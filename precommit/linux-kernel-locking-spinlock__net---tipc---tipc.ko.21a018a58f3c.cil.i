/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 7 ".tmp_bcast.c"
struct device;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/int-ll64.h"
typedef int s32;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef unsigned short umode_t;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef _Bool bool;
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __kernel_time_t time_t;
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef unsigned char unchar;
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __s32 int32_t;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __u8 uint8_t;
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __u32 uint32_t;
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef __u64 uint64_t;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef unsigned int fmode_t;
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef unsigned int oom_flags_t;
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 188
struct hlist_node;
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 203 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/spinlock_types.h"
union __anonunion____missing_field_name_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion____missing_field_name_8 __annonCompField4 ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/rwlock.h"
struct __anonstruct____missing_field_name_10 {
   u32 read ;
   s32 write ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct____missing_field_name_10 __annonCompField5 ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 34
struct task_struct;
#line 35
struct lockdep_map;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/export.h"
struct module;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/init.h"
struct __anonstruct____missing_field_name_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/init.h"
struct __anonstruct____missing_field_name_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/init.h"
union __anonunion____missing_field_name_11 {
   struct __anonstruct____missing_field_name_12 __annonCompField6 ;
   struct __anonstruct____missing_field_name_13 __annonCompField7 ;
};
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/init.h"
struct desc_struct {
   union __anonunion____missing_field_name_11 __annonCompField8 ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 243 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 333
struct page;
#line 333 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 341
struct file;
#line 354
struct seq_file;
#line 386
struct thread_struct;
#line 388
struct mm_struct;
#line 389
struct cpumask;
#line 354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/printk.h"
struct file_operations;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dynamic_debug.h"
struct net_device;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/sysinfo.h"
struct completion;
#line 383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kernel.h"
struct pid;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/vm86.h"
union __anonunion____missing_field_name_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_18 __annonCompField9 ;
};
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/bug.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 294 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_23 {
   u64 rip ;
   u64 rdp ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_22 {
   struct __anonstruct____missing_field_name_23 __annonCompField13 ;
   struct __anonstruct____missing_field_name_24 __annonCompField14 ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_22 __annonCompField15 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion____missing_field_name_25 __annonCompField16 ;
};
#line 346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 367 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 378 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 384 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 392 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 439
struct kmem_cache;
#line 440
struct perf_event;
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 11 ;
};
#line 533 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock_types.h"
struct __anonstruct____missing_field_name_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock_types.h"
union __anonunion____missing_field_name_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct____missing_field_name_29 __annonCompField18 ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion____missing_field_name_28 __annonCompField19 ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/thread.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/plist.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 177
struct timespec;
#line 402 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
struct rw_semaphore;
#line 403 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rwsem.h"
struct seqcount {
   unsigned int sequence ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 986 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
struct notifier_block;
#line 1028 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ktime.h"
typedef union ktime ktime_t;
#line 388
struct tvec_base;
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 266
struct workqueue_struct;
#line 267
struct work_struct;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 236 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ioport.h"
struct sock;
#line 237
struct kobject;
#line 238
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ioport.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/highuid.h"
struct user_namespace;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uidgid.h"
struct __anonstruct_kuid_t_36 {
   uid_t val ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_36 kuid_t;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uidgid.h"
struct __anonstruct_kgid_t_37 {
   gid_t val ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_37 kgid_t;
#line 149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/stat.h"
struct bin_attribute;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/stat.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 66
struct vm_area_struct;
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 178
struct sysfs_dirent;
#line 251 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kobject.h"
struct kset;
#line 50
struct kobj_type;
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 218
struct klist_node;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_38 {
   unsigned long bits[16U] ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_38 nodemask_t;
#line 522
struct path;
#line 523
struct inode;
#line 524
struct dentry;
#line 525 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nodemask.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 181
struct pinctrl;
#line 182
struct pinctrl_state;
#line 194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 301
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 308
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 316
struct wakeup_source;
#line 506 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};
#line 513
struct dev_pm_qos;
#line 513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool ignore_children : 1 ;
   bool early_init : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int run_wake : 1 ;
   unsigned int runtime_auto : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
#line 570 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct device_driver;
#line 16
struct driver_private;
#line 17
struct class;
#line 18
struct subsys_private;
#line 19
struct bus_type;
#line 20
struct device_node;
#line 21
struct iommu_ops;
#line 22
struct iommu_group;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct device_attribute;
#line 59
struct driver_attribute;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   struct attribute_group  const  **bus_groups ;
   struct attribute_group  const  **dev_groups ;
   struct attribute_group  const  **drv_groups ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*online)(struct device * ) ;
   int (*offline)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};
#line 141
struct device_type;
#line 198
struct of_device_id;
#line 198
struct acpi_device_id;
#line 198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 263 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 324
struct class_attribute;
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct attribute_group  const  **dev_groups ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 421 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * , kuid_t * , kgid_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 616 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 625 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct acpi_dev_node {
   void *handle ;
};
#line 630
struct dma_coherent_mem;
#line 630 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
};
#line 772 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/device.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm_qos.h"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
#line 50
enum dev_pm_qos_req_type {
    DEV_PM_QOS_LATENCY = 1,
    DEV_PM_QOS_FLAGS = 2
} ;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm_qos.h"
union __anonunion_data_39 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm_qos.h"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_39 data ;
   struct device *dev ;
};
#line 64
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm_qos.h"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pm_qos.h"
struct dev_pm_qos {
   struct pm_qos_constraints latency ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *latency_req ;
   struct dev_pm_qos_request *flags_req ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_104 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_104 mm_context_t;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/pci_iomap.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rculist.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 888 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mmzone.h"
struct ctl_table;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 67
struct return_instance;
#line 67
struct uprobe;
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct return_instance *return_instances ;
   unsigned int depth ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 128
struct address_space;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_132 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_135 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_136 __annonCompField32 ;
   int units ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_134 {
   union __anonunion____missing_field_name_135 __annonCompField33 ;
   atomic_t _count ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_133 {
   unsigned long counters ;
   struct __anonstruct____missing_field_name_134 __annonCompField34 ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_131 {
   union __anonunion____missing_field_name_132 __annonCompField31 ;
   union __anonunion____missing_field_name_133 __annonCompField35 ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_138 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 129
struct slab;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_137 {
   struct list_head lru ;
   struct __anonstruct____missing_field_name_138 __annonCompField37 ;
   struct list_head list ;
   struct slab *slab_page ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_139 {
   unsigned long private ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct____missing_field_name_131 __annonCompField36 ;
   union __anonunion____missing_field_name_137 __annonCompField38 ;
   union __anonunion____missing_field_name_139 __annonCompField39 ;
   unsigned long debug_flags ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm_types.h"
struct __anonstruct_linear_141 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm_types.h"
union __anonunion_shared_140 {
   struct __anonstruct_linear_141 linear ;
   struct list_head nonlinear ;
};
#line 220
struct anon_vma;
#line 220
struct vm_operations_struct;
#line 220
struct mempolicy;
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_140 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 324
struct kioctx_table;
#line 325
struct linux_binfmt;
#line 325
struct mmu_notifier_mm;
#line 325 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_next_reset ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   int first_nid ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
};
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   nodemask_t nodes_to_scan ;
   int nid ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker * , struct shrink_control * ) ;
   unsigned long (*scan_objects)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};
#line 71
struct file_ra_state;
#line 72
struct user_struct;
#line 73
struct writeback_control;
#line 171 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1849 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1084 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sem.h"
struct sem_undo_list;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 18
struct cred;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_143 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_143 sync_serial_settings;
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_144 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_144 te1_settings;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_145 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_145 raw_hdlc_proto;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_146 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_146 fr_proto;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_147 {
   unsigned int dlci ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_147 fr_proto_pvc;
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_148 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_148 fr_proto_pvc_info;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_149 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_149 cisco_proto;
#line 95 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_150 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_150 ifs_ifsu ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_151 {
   char ifrn_name[16U] ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_152 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_151 ifr_ifrn ;
   union __anonunion_ifr_ifru_152 ifr_ifru ;
};
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kdev_t.h"
struct hlist_bl_node;
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rculist_bl.h"
struct __anonstruct____missing_field_name_155 {
   spinlock_t lock ;
   unsigned int count ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rculist_bl.h"
union __anonunion____missing_field_name_154 {
   struct __anonstruct____missing_field_name_155 __annonCompField40 ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion____missing_field_name_154 __annonCompField41 ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockref.h"
struct nameidata;
#line 39
struct vfsmount;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockref.h"
struct __anonstruct____missing_field_name_157 {
   u32 hash ;
   u32 len ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockref.h"
union __anonunion____missing_field_name_156 {
   struct __anonstruct____missing_field_name_157 __annonCompField42 ;
   u64 hash_len ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockref.h"
struct qstr {
   union __anonunion____missing_field_name_156 __annonCompField43 ;
   unsigned char const   *name ;
};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dcache.h"
struct dentry_operations;
#line 88
struct super_block;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dcache.h"
union __anonunion_d_u_158 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_158 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 140 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_weak_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct dentry  const  * , unsigned int  ,
                    char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 403 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/path.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_head list ;
   long nr_items ;
};
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   nodemask_t active_nodes ;
};
#line 131
struct llist_node;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 381
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 388
struct pid_namespace;
#line 388 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/percpu-rwsem.h"
struct block_device;
#line 31
struct io_context;
#line 32
struct cgroup_subsys_state;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/fs.h"
struct export_operations;
#line 58
struct kiocb;
#line 59
struct pipe_inode_info;
#line 60
struct poll_table_struct;
#line 61
struct kstatfs;
#line 62
struct swap_info_struct;
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 243 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 166 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
   __u32 qfs_pad ;
};
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_statv {
   __s8 qs_version ;
   __u8 qs_pad1 ;
   __u16 qs_flags ;
   __u32 qs_incoredqs ;
   struct fs_qfilestatv qs_uquota ;
   struct fs_qfilestatv qs_gquota ;
   struct fs_qfilestatv qs_pquota ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
   __u64 qs_pad2[8U] ;
};
#line 212
struct dquot;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/projid.h"
struct __anonstruct_kprojid_t_160 {
   projid_t val ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_160 kprojid_t;
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
typedef long long qsize_t;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
union __anonunion____missing_field_name_161 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct kqid {
   union __anonunion____missing_field_name_161 __annonCompField44 ;
   enum quota_type type ;
};
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xstatev)(struct super_block * , struct fs_quota_statv * ) ;
};
#line 333 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 379 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
union __anonunion_arg_163 {
   char *buf ;
   void *data ;
};
#line 342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_162 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_163 arg ;
   int error ;
};
#line 342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_162 read_descriptor_t;
#line 345 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned int  , unsigned int  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   void (*is_dirty_writeback)(struct page * , bool * , bool * ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 405
struct backing_dev_info;
#line 406 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 427
struct request_queue;
#line 428
struct hd_struct;
#line 428
struct gendisk;
#line 428 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 500
struct posix_acl;
#line 501
struct inode_operations;
#line 501 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_164 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 501 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_165 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 501
struct file_lock;
#line 501
struct cdev;
#line 501 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_166 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 501 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion____missing_field_name_164 __annonCompField45 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion____missing_field_name_165 __annonCompField46 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_166 __annonCompField47 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 731 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 739 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 762 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
union __anonunion_f_u_167 {
   struct list_head fu_list ;
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 762 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct file {
   union __anonunion_f_u_167 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 906
struct files_struct;
#line 906 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 907 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 912 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   unsigned long (*lm_owner_key)(struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 925
struct net;
#line 930
struct nlm_lockowner;
#line 931 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_169 {
   struct list_head link ;
   int state ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_168 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_169 afs ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_168 fl_u ;
};
#line 1033 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1241
struct file_system_type;
#line 1241
struct super_operations;
#line 1241
struct xattr_handler;
#line 1241
struct mtd_info;
#line 1241 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
};
#line 1475 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct dir_context {
   int (*actor)(void * , char const   * , int  , loff_t  , u64  , unsigned int  ) ;
   loff_t pos ;
};
#line 1518 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*iterate)(struct file * , struct dir_context * ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
#line 1556 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
   int (*tmpfile)(struct inode * , struct dentry * , umode_t  ) ;
};
#line 1600 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   long (*nr_cached_objects)(struct super_block * , int  ) ;
   long (*free_cached_objects)(struct super_block * , long  , int  ) ;
};
#line 1814 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 4 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_170 {
   unsigned long sig[1U] ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_170 sigset_t;
#line 25
struct siginfo;
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_172 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_173 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_174 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_175 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_176 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_177 {
   long _band ;
   int _fd ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_178 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_171 {
   int _pad[28U] ;
   struct __anonstruct__kill_172 _kill ;
   struct __anonstruct__timer_173 _timer ;
   struct __anonstruct__rt_174 _rt ;
   struct __anonstruct__sigchld_175 _sigchld ;
   struct __anonstruct__sigfault_176 _sigfault ;
   struct __anonstruct__sigpoll_177 _sigpoll ;
   struct __anonstruct__sigsys_178 _sigsys ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_171 _sifields ;
};
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 251 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};
#line 463 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
struct __anonstruct____missing_field_name_182 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
union __anonunion____missing_field_name_181 {
   struct __anonstruct____missing_field_name_182 __annonCompField48 ;
   struct callback_head rcu ;
};
#line 124
struct ctl_table_set;
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion____missing_field_name_181 __annonCompField49 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_header * , struct ctl_table * ) ;
};
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct signal_struct;
#line 36
struct key_type;
#line 38
struct keyring_list;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_183 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_184 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/key.h"
union __anonunion_type_data_185 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/key.h"
union __anonunion_payload_186 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion____missing_field_name_183 __annonCompField50 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_184 __annonCompField51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_185 type_data ;
   union __anonunion_payload_186 payload ;
};
#line 323
struct audit_context;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 344
struct futex_pi_state;
#line 345
struct robust_list_head;
#line 346
struct bio_list;
#line 347
struct fs_struct;
#line 348
struct perf_event_context;
#line 349
struct blk_plug;
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct cfs_rq;
#line 114
struct task_group;
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 375 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 390 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 402 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 422 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 458
struct autogroup;
#line 459
struct tty_struct;
#line 459
struct taskstats;
#line 459
struct tty_audit_buf;
#line 459 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 638 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 682
struct reclaim_state;
#line 683 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 698 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 909
struct uts_namespace;
#line 910 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 917 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 929 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 964 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 995
struct rt_rq;
#line 995 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1019
struct mem_cgroup;
#line 1019 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1399 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int may_oom : 1 ;
};
#line 1406
struct sched_class;
#line 1406
struct css_set;
#line 1406
struct compat_robust_list_head;
#line 1406
struct ftrace_ret_stack;
#line 1406 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned int brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int no_new_privs : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   int numa_migrate_seq ;
   unsigned int numa_scan_period ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 277 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 348 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 58
struct memcg_cache_params;
#line 58
struct kmem_cache_node;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 449 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
struct __anonstruct____missing_field_name_203 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
#line 449 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
union __anonunion____missing_field_name_202 {
   struct kmem_cache *memcg_caches[0U] ;
   struct __anonstruct____missing_field_name_203 __annonCompField53 ;
};
#line 449 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion____missing_field_name_202 __annonCompField54 ;
};
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/checksum.h"
struct sk_buff;
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/checksum.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/flow_keys.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 332
struct sec_path;
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
struct __anonstruct____missing_field_name_207 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_206 {
   __wsum csum ;
   struct __anonstruct____missing_field_name_207 __annonCompField56 ;
};
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_208 {
   unsigned int napi_id ;
   dma_cookie_t dma_cookie ;
};
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_209 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 reserved_tailroom ;
};
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion____missing_field_name_206 __annonCompField57 ;
   __u32 priority ;
   __u8 local_df : 1 ;
   __u8 cloned : 1 ;
   __u8 ip_summed : 2 ;
   __u8 nohdr : 1 ;
   __u8 nfctinfo : 3 ;
   __u8 pkt_type : 3 ;
   __u8 fclone : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 peeked : 1 ;
   __u8 nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   __u8 ndisc_nodetype : 2 ;
   __u8 pfmemalloc : 1 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_rxhash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 head_frag : 1 ;
   __u8 encapsulation : 1 ;
   union __anonunion____missing_field_name_208 __annonCompField58 ;
   __u32 secmark ;
   union __anonunion____missing_field_name_209 __annonCompField59 ;
   __be16 inner_protocol ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 555
struct dst_entry;
#line 2838 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 166 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 382 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 425 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 458 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 474 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 494 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 524 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 550 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 684 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 692 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 768 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 249
struct prot_inuse;
#line 250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[8U] ;
};
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[96U] ;
};
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 118
struct proc_dir_entry;
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   struct list_head lru_list ;
   spinlock_t lru_lock ;
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/inet_frag.h"
struct tcpm_hash_bucket;
#line 177
struct ipv4_devconf;
#line 178
struct fib_rules_ops;
#line 179
struct fib_table;
#line 180
struct inet_peer_base;
#line 180
struct xt_table;
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_tcp_ecn ;
   kgid_t sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/ipv4.h"
struct neighbour;
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 32
struct rt6_info;
#line 32
struct rt6_statistics;
#line 32
struct fib6_table;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t rt_genid ;
};
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 83
struct sctp_mib;
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/ipv6.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics[1U] ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 322 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netfilter.h"
struct nlattr;
#line 335
struct nf_logger;
#line 336 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger  const  *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/netfilter.h"
struct ebt_table;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
   bool ulog_warn_deprecated ;
   bool ebt_ulog_warn_deprecated ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/x_tables.h"
struct hlist_nulls_node;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 63
struct ip_conntrack_stat;
#line 63
struct nf_ct_event_notifier;
#line 63
struct nf_exp_event_notifier;
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct hlist_nulls_head tmpl ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
};
#line 489 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   unsigned int proc_inum ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};
#line 383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/prio_heap.h"
struct idr_layer {
   int prefix ;
   unsigned long bitmap[4U] ;
   struct idr_layer *ary[256U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   int cur ;
   spinlock_t lock ;
};
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/idr.h"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t (*list)(struct dentry * , char * , size_t  , char const   * , size_t  ,
                  int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t  , int  ,
              int  ) ;
};
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/xattr.h"
struct simple_xattrs {
   struct list_head head ;
   spinlock_t lock ;
};
#line 98
struct percpu_ref;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref * );
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_t count ;
   unsigned int *pcpu_count ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_kill ;
   struct callback_head rcu ;
};
#line 173
struct cgroupfs_root;
#line 174
struct cgroup_subsys;
#line 175
struct cgroup;
#line 176
struct css_id;
#line 177
struct eventfd_ctx;
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   unsigned long flags ;
   struct css_id *id ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct cgroup_name {
   struct callback_head callback_head ;
   char name[] ;
};
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   int id ;
   int nr_css ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   u64 serial_nr ;
   struct cgroup_name *name ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroupfs_root *root ;
   struct list_head cset_links ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct cgroup_subsys_state dummy_css ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct simple_xattrs xattrs ;
};
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct cgroupfs_root {
   struct super_block *sb ;
   unsigned long subsys_mask ;
   int hierarchy_id ;
   struct list_head subsys_list ;
   struct cgroup top_cgroup ;
   int number_of_cgroups ;
   struct list_head root_list ;
   unsigned long flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 349 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cgrp_links ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct callback_head callback_head ;
};
#line 392 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct cgroup_map_cb {
   int (*fill)(struct cgroup_map_cb * , char const   * , u64  ) ;
   void *state ;
};
#line 409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   int (*open)(struct inode * , struct file * ) ;
   ssize_t (*read)(struct cgroup_subsys_state * , struct cftype * , struct file * ,
                   char * , size_t  , loff_t * ) ;
   u64 (*read_u64)(struct cgroup_subsys_state * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup_subsys_state * , struct cftype * ) ;
   int (*read_map)(struct cgroup_subsys_state * , struct cftype * , struct cgroup_map_cb * ) ;
   int (*read_seq_string)(struct cgroup_subsys_state * , struct cftype * , struct seq_file * ) ;
   ssize_t (*write)(struct cgroup_subsys_state * , struct cftype * , struct file * ,
                    char const   * , size_t  , loff_t * ) ;
   int (*write_u64)(struct cgroup_subsys_state * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup_subsys_state * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup_subsys_state * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup_subsys_state * , unsigned int  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*register_event)(struct cgroup_subsys_state * , struct cftype * , struct eventfd_ctx * ,
                         char const   * ) ;
   void (*unregister_event)(struct cgroup_subsys_state * , struct cftype * , struct eventfd_ctx * ) ;
};
#line 529 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct cftype_set {
   struct list_head node ;
   struct cftype *cfts ;
};
#line 566
struct cgroup_taskset;
#line 577 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state * ) ;
   int (*css_online)(struct cgroup_subsys_state * ) ;
   void (*css_offline)(struct cgroup_subsys_state * ) ;
   void (*css_free)(struct cgroup_subsys_state * ) ;
   int (*can_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup_subsys_state * , struct cgroup_subsys_state * , struct task_struct * ) ;
   void (*bind)(struct cgroup_subsys_state * ) ;
   int subsys_id ;
   int disabled ;
   int early_init ;
   bool use_id ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   char const   *name ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/hardirq.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 3143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/security.h"
struct mnt_namespace;
#line 3144
struct ipc_namespace;
#line 3145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 467 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
   __u32 linkstate ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/if_link.h"
struct netpoll_info;
#line 28
struct phy_device;
#line 29
struct wireless_dev;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 196
struct neigh_parms;
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 251 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct * , int  ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 346
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 395 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 531
struct Qdisc;
#line 531 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 593 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 605 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 617 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 678 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 691 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 702 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 729 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct netdev_phys_port_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 740 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , __be16  , u16  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , __be16  , u16  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * , gfp_t  ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_busy_poll)(struct napi_struct * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_link_state)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
   int (*ndo_bridge_setlink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_bridge_getlink)(struct sk_buff * , u32  , u32  , struct net_device * ,
                             u32  ) ;
   int (*ndo_bridge_dellink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_change_carrier)(struct net_device * , bool  ) ;
   int (*ndo_get_phys_port_id)(struct net_device * , struct netdev_phys_port_id * ) ;
   void (*ndo_add_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void (*ndo_del_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
};
#line 1099
enum ldv_27811 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 1108
enum ldv_27812 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
} ;
#line 1113
struct iw_handler_def;
#line 1113
struct iw_public_data;
#line 1113
struct vlan_info;
#line 1113
struct in_device;
#line 1113
struct dn_dev;
#line 1113
struct inet6_dev;
#line 1113
struct cpu_rmap;
#line 1113
struct pcpu_lstats;
#line 1113
struct pcpu_tstats;
#line 1113
struct pcpu_dstats;
#line 1113
struct pcpu_vstats;
#line 1113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
union __anonunion____missing_field_name_223 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};
#line 1113
struct garp_port;
#line 1113
struct mrp_port;
#line 1113
struct rtnl_link_ops;
#line 1113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head upper_dev_list ;
   struct list_head lower_dev_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   unsigned char broadcast[32U] ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   struct cpu_rmap *rx_cpu_rmap ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   enum ldv_27811 reg_state : 8 ;
   bool dismantle ;
   enum ldv_27812 rtnl_link_state : 16 ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion____missing_field_name_223 __annonCompField63 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/interrupt.h"
struct tipc_msg;
#line 181 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
struct tipc_skb_cb {
   void *handle ;
};
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
struct tipc_node_map {
   u32 count ;
   u32 map[128U] ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.h"
struct tipc_port_list {
   int count ;
   struct tipc_port_list *next ;
   u32 ports[32U] ;
};
#line 66
struct tipc_node;
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.h"
struct tipc_media_addr {
   u8 value[20U] ;
   u8 media_id ;
   u8 broadcast ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct tipc_bearer;
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct tipc_media {
   int (*send_msg)(struct sk_buff * , struct tipc_bearer * , struct tipc_media_addr * ) ;
   int (*enable_bearer)(struct tipc_bearer * ) ;
   void (*disable_bearer)(struct tipc_bearer * ) ;
   int (*addr2str)(struct tipc_media_addr * , char * , int  ) ;
   int (*addr2msg)(struct tipc_media_addr * , char * ) ;
   int (*msg2addr)(struct tipc_bearer  const  * , struct tipc_media_addr * , char * ) ;
   u32 priority ;
   u32 tolerance ;
   u32 window ;
   u32 type_id ;
   char name[16U] ;
};
#line 106
struct tipc_link_req;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct tipc_bearer {
   void *usr_handle ;
   u32 mtu ;
   int blocked ;
   struct tipc_media_addr addr ;
   char name[32U] ;
   spinlock_t lock ;
   struct tipc_media *media ;
   struct tipc_media_addr bcast_addr ;
   u32 priority ;
   u32 window ;
   u32 tolerance ;
   u32 identity ;
   struct tipc_link_req *link_req ;
   struct list_head links ;
   int active ;
   char net_plane ;
   struct tipc_node_map nodes ;
};
#line 154
struct tipc_link;
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct tipc_msg {
   __be32 hdr[15U] ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.h"
struct __anonstruct_bclink_227 {
   u32 acked ;
   u32 last_in ;
   u32 last_sent ;
   u32 oos_state ;
   u32 deferred_size ;
   struct sk_buff *deferred_head ;
   struct sk_buff *deferred_tail ;
   struct sk_buff *defragm ;
   bool recv_permitted ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.h"
struct tipc_node {
   u32 addr ;
   spinlock_t lock ;
   struct hlist_node hash ;
   struct list_head list ;
   struct list_head nsub ;
   struct tipc_link *active_links[2U] ;
   struct tipc_link *links[2U] ;
   int link_cnt ;
   int working_links ;
   int block_setup ;
   int permit_changeover ;
   u32 signature ;
   struct __anonstruct_bclink_227 bclink ;
};
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
struct tipc_stats {
   u32 sent_info ;
   u32 recv_info ;
   u32 sent_states ;
   u32 recv_states ;
   u32 sent_probes ;
   u32 recv_probes ;
   u32 sent_nacks ;
   u32 recv_nacks ;
   u32 sent_acks ;
   u32 sent_bundled ;
   u32 sent_bundles ;
   u32 recv_bundled ;
   u32 recv_bundles ;
   u32 retransmitted ;
   u32 sent_fragmented ;
   u32 sent_fragments ;
   u32 recv_fragmented ;
   u32 recv_fragments ;
   u32 link_congs ;
   u32 deferred_recv ;
   u32 duplicates ;
   u32 max_queue_sz ;
   u32 accu_queue_sz ;
   u32 queue_sz_counts ;
   u32 msg_length_counts ;
   u32 msg_lengths_total ;
   u32 msg_length_profile[7U] ;
};
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
struct __anonstruct_proto_msg_228 {
   unchar hdr[40U] ;
   unchar body[16U] ;
};
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
struct tipc_link {
   u32 addr ;
   char name[60U] ;
   struct tipc_media_addr media_addr ;
   struct timer_list timer ;
   struct tipc_node *owner ;
   struct list_head link_list ;
   int started ;
   u32 checkpoint ;
   u32 peer_session ;
   u32 peer_bearer_id ;
   struct tipc_bearer *b_ptr ;
   u32 tolerance ;
   u32 continuity_interval ;
   u32 abort_limit ;
   int state ;
   int blocked ;
   u32 fsm_msg_cnt ;
   struct __anonstruct_proto_msg_228 proto_msg ;
   struct tipc_msg *pmsg ;
   u32 priority ;
   u32 queue_limit[15U] ;
   u32 exp_msg_count ;
   u32 reset_checkpoint ;
   u32 max_pkt ;
   u32 max_pkt_target ;
   u32 max_pkt_probes ;
   u32 out_queue_size ;
   struct sk_buff *first_out ;
   struct sk_buff *last_out ;
   u32 next_out_no ;
   u32 last_retransmitted ;
   u32 stale_count ;
   u32 next_in_no ;
   u32 deferred_inqueue_sz ;
   struct sk_buff *oldest_deferred_in ;
   struct sk_buff *newest_deferred_in ;
   u32 unacked_window ;
   struct sk_buff *proto_msg_queue ;
   u32 retransm_queue_size ;
   u32 retransm_queue_head ;
   struct sk_buff *next_out ;
   struct list_head waiting_ports ;
   u32 long_msg_seq_no ;
   struct sk_buff *defragm_buf ;
   struct tipc_stats stats ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.h"
struct tipc_bcbearer_pair {
   struct tipc_bearer *primary ;
   struct tipc_bearer *secondary ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
struct tipc_bcbearer {
   struct tipc_bearer bearer ;
   struct tipc_media media ;
   struct tipc_bcbearer_pair bpairs[2U] ;
   struct tipc_bcbearer_pair bpairs_temp[32U] ;
   struct tipc_node_map remains ;
   struct tipc_node_map remains_new ;
};
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
struct tipc_bclink {
   struct tipc_link link ;
   struct tipc_node node ;
   struct tipc_node_map bcast_nodes ;
   struct tipc_node *retransmit_to ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct tipc_bearer_names {
   char media_name[16U] ;
   char if_name[16U] ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/poll.h"
struct tipc_portid {
   __u32 ref ;
   __u32 node ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
struct tipc_name {
   __u32 type ;
   __u32 instance ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
struct tipc_name_seq {
   __u32 type ;
   __u32 lower ;
   __u32 upper ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
struct __anonstruct_name_226 {
   struct tipc_name name ;
   __u32 domain ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
union __anonunion_addr_225 {
   struct tipc_portid id ;
   struct tipc_name_seq nameseq ;
   struct __anonstruct_name_226 name ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
struct sockaddr_tipc {
   unsigned short family ;
   unsigned char addrtype ;
   signed char scope ;
   union __anonunion_addr_225 addr ;
};
#line 206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
struct tipc_bearer_config {
   __be32 priority ;
   __be32 disc_domain ;
   char name[32U] ;
};
#line 226 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
struct tlv_desc {
   __be16 tlv_len ;
   __be16 tlv_type ;
};
#line 353 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
struct tipc_cfg_msg_hdr {
   __be32 tcm_len ;
   __be16 tcm_type ;
   __be16 tcm_flags ;
   char tcm_reserved[8U] ;
};
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.h"
struct tipc_server {
   struct idr conn_idr ;
   spinlock_t idr_lock ;
   int idr_in_use ;
   struct kmem_cache *rcvbuf_cache ;
   struct workqueue_struct *rcv_wq ;
   struct workqueue_struct *send_wq ;
   int max_rcvbuf_size ;
   void *(*tipc_conn_new)(int  ) ;
   void (*tipc_conn_shutdown)(int  , void * ) ;
   void (*tipc_conn_recvmsg)(int  , struct sockaddr_tipc * , void * , void * , size_t  ) ;
   struct sockaddr_tipc *saddr ;
   char const   name[32U] ;
   int imp ;
   int type ;
   int enabled ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/int-ll64.h"
typedef short s16;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockdep.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/barrier.h"
struct jump_entry;
#line 115
struct static_key_mod;
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/barrier.h"
struct static_key {
   atomic_t enabled ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/elf.h"
struct kernel_param;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/elf.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/moduleparam.h"
struct kparam_string;
#line 58
struct kparam_array;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/moduleparam.h"
union __anonunion____missing_field_name_233 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion____missing_field_name_233 __annonCompField64 ;
};
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 463
struct tracepoint;
#line 464 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/moduleparam.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/module.h"
struct module_param_attrs;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 207
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
} ;
#line 214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 228
struct module_sect_attrs;
#line 228
struct module_notes_attrs;
#line 228
struct ftrace_event_call;
#line 228 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.c"
struct ldv_struct_insmod_7 {
   int signal_pending ;
};
#line 256 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
struct ldv_struct_timer_scenario_5 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long  ) ;
   unsigned long data ;
};
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
struct queue_item {
   struct list_head next_signal ;
   void (*handler)(unsigned long  ) ;
   unsigned long data ;
};
#line 366 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
struct tipc_link_config {
   __be32 value ;
   char name[60U] ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node_subscr.h"
struct tipc_node_subscr {
   struct tipc_node *node ;
   void (*handle_node_down)(void * ) ;
   void *usr_handle ;
   struct list_head nodesub_list ;
};
#line 206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
struct tipc_port;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.h"
struct tipc_port {
   struct sock *sk ;
   spinlock_t *lock ;
   int connected ;
   u32 conn_type ;
   u32 conn_instance ;
   u32 conn_unacked ;
   int published ;
   u32 congested ;
   u32 max_pkt ;
   u32 ref ;
   struct tipc_msg phdr ;
   struct list_head port_list ;
   u32 (*dispatcher)(struct tipc_port * , struct sk_buff * ) ;
   void (*wakeup)(struct tipc_port * ) ;
   struct list_head wait_list ;
   u32 waiting_pkts ;
   u32 sent ;
   u32 acked ;
   struct list_head publications ;
   u32 pub_count ;
   u32 probing_state ;
   u32 probing_interval ;
   struct timer_list timer ;
   struct tipc_node_subscr subscription ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
struct tipc_link_name {
   u32 addr_local ;
   char if_local[16U] ;
   u32 addr_peer ;
   char if_peer[16U] ;
};
#line 820 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_link.c.aux"
typedef int ldv_func_ret_type___0;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.h"
struct tipc_link_req {
   struct tipc_bearer *bearer ;
   struct tipc_media_addr dest ;
   u32 domain ;
   int num_nodes ;
   struct sk_buff *buf ;
   struct timer_list timer ;
   unsigned int timer_intv ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 319 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
struct publication {
   u32 type ;
   u32 lower ;
   u32 upper ;
   u32 scope ;
   u32 node ;
   u32 ref ;
   u32 key ;
   struct tipc_node_subscr subscr ;
   struct list_head local_list ;
   struct list_head pport_list ;
   struct list_head node_list ;
   struct list_head cluster_list ;
   struct list_head zone_list ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.h"
struct distr_item {
   __be32 type ;
   __be32 lower ;
   __be32 upper ;
   __be32 ref ;
   __be32 key ;
};
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
struct publ_list {
   struct list_head list ;
   u32 size ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
struct tipc_subscr {
   struct tipc_name_seq seq ;
   __u32 timeout ;
   __u32 filter ;
   char usr_handle[8U] ;
};
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
struct tipc_event {
   __u32 event ;
   __u32 found_lower ;
   __u32 found_upper ;
   struct tipc_portid port ;
   struct tipc_subscr s ;
};
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node_subscr.h"
struct tipc_subscription;
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.h"
struct tipc_subscriber;
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.h"
struct tipc_subscription {
   struct tipc_subscriber *subscriber ;
   struct tipc_name_seq seq ;
   u32 timeout ;
   u32 filter ;
   struct timer_list timer ;
   struct list_head nameseq_list ;
   struct list_head subscription_list ;
   int swap ;
   struct tipc_event evt ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.h"
struct tipc_subscriber {
   int conid ;
   spinlock_t lock ;
   struct list_head subscription_list ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
struct tipc_name_table_query {
   __be32 depth ;
   __be32 type ;
   __be32 lowbound ;
   __be32 upbound ;
};
#line 204 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
struct name_info {
   struct list_head node_list ;
   struct list_head cluster_list ;
   struct list_head zone_list ;
   u32 node_list_size ;
   u32 cluster_list_size ;
   u32 zone_list_size ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
struct sub_seq {
   u32 lower ;
   u32 upper ;
   struct name_info *info ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
struct name_seq {
   u32 type ;
   struct sub_seq *sseqs ;
   u32 alloc ;
   u32 first_free ;
   struct hlist_node ns_list ;
   struct list_head subscriptions ;
   spinlock_t lock ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
struct name_table {
   struct hlist_head *types ;
   u32 local_publ_count ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/nsproxy.h"
struct scm_creds {
   u32 pid ;
   kuid_t uid ;
   kgid_t gid ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netlink.h"
struct netlink_skb_parms {
   struct scm_creds creds ;
   __u32 portid ;
   __u32 dst_group ;
   __u32 flags ;
   struct sock *sk ;
};
#line 336 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
struct tipc_genlmsghdr {
   __u32 dest ;
   __u16 cmd ;
   __u16 reserved ;
};
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.h"
struct genlmsghdr {
   __u8 cmd ;
   __u8 version ;
   __u16 reserved ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/genetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 1179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netlink.h"
struct genl_family;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/genetlink.h"
struct genl_ops;
#line 25
struct genl_info;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/genetlink.h"
struct genl_family {
   unsigned int id ;
   unsigned int hdrsize ;
   char name[16U] ;
   unsigned int version ;
   unsigned int maxattr ;
   bool netnsok ;
   bool parallel_ops ;
   int (*pre_doit)(struct genl_ops * , struct sk_buff * , struct genl_info * ) ;
   void (*post_doit)(struct genl_ops * , struct sk_buff * , struct genl_info * ) ;
   struct nlattr **attrbuf ;
   struct list_head ops_list ;
   struct list_head family_list ;
   struct list_head mcast_groups ;
   struct module *module ;
};
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/genetlink.h"
struct genl_info {
   u32 snd_seq ;
   u32 snd_portid ;
   struct nlmsghdr *nlhdr ;
   struct genlmsghdr *genlhdr ;
   void *userhdr ;
   struct nlattr **attrs ;
   struct net *_net ;
   void *user_ptr[2U] ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/genetlink.h"
struct genl_ops {
   u8 cmd ;
   u8 internal_flags ;
   unsigned int flags ;
   struct nla_policy  const  *policy ;
   int (*doit)(struct sk_buff * , struct genl_info * ) ;
   int (*dumpit)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   struct list_head ops_list ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 189 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
struct tipc_node_info {
   __be32 addr ;
   __be32 up ;
};
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
struct tipc_link_info {
   __be32 dest ;
   __be32 up ;
   char str[60U] ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.h"
struct reference {
   void *object ;
   spinlock_t lock ;
   u32 ref ;
};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
struct ref_table {
   struct reference *entries ;
   u32 capacity ;
   u32 init_point ;
   u32 first_free ;
   u32 last_free ;
   u32 index_mask ;
   u32 start_mask ;
};
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/special_insns.h"
struct exec_domain;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/personality.h"
struct map_segment;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 582 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 582 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mutex.h"
struct compat_timespec;
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mutex.h"
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mutex.h"
struct __anonstruct_nanosleep_33 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 179
struct pollfd;
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mutex.h"
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mutex.h"
union __anonunion____missing_field_name_31 {
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mutex.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_31 __annonCompField20 ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned int sig_on_uaccess_error : 1 ;
   unsigned int uaccess_err : 1 ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/wait.h"
struct __wait_queue;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/random.h"
enum ldv_21386 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/net.h"
typedef enum ldv_21386 socket_state;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/net.h"
struct proto_ops;
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   int (*set_peek_off)(struct sock * , int  ) ;
};
#line 185 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/net.h"
struct net_proto_family {
   int family ;
   int (*create)(struct net * , struct socket * , int  , int  ) ;
   struct module *owner ;
};
#line 623 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
struct rtable;
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/security.h"
struct xfrm_policy;
#line 104
struct xfrm_state;
#line 3020 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/poll.h"
typedef struct poll_table_struct poll_table;
#line 614 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 226 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/res_counter.h"
struct kioctx;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/aio.h"
typedef int kiocb_cancel_fn(struct kiocb * );
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/aio.h"
union __anonunion_ki_obj_227 {
   void *user ;
   struct task_struct *tsk ;
};
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/aio.h"
struct kiocb {
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   kiocb_cancel_fn *ki_cancel ;
   void *private ;
   union __anonunion_ki_obj_227 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   size_t ki_nbytes ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/aio.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/filter.h"
union __anonunion____missing_field_name_228 {
   struct sock_filter insns[0U] ;
   struct work_struct work ;
};
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct callback_head rcu ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   union __anonunion____missing_field_name_228 __annonCompField64 ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
};
#line 133
struct neigh_table;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 407
struct dn_route;
#line 407 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/neighbour.h"
union __anonunion____missing_field_name_232 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 407 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion____missing_field_name_232 __annonCompField65 ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct __anonstruct_socket_lock_t_233 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_233 socket_lock_t;
#line 123
struct proto;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
typedef __u32 __portpair;
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
typedef __u64 __addrpair;
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct __anonstruct____missing_field_name_235 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_234 {
   __addrpair skc_addrpair ;
   struct __anonstruct____missing_field_name_235 __annonCompField66 ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_236 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct __anonstruct____missing_field_name_238 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_237 {
   __portpair skc_portpair ;
   struct __anonstruct____missing_field_name_238 __annonCompField69 ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_239 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_240 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct sock_common {
   union __anonunion____missing_field_name_234 __annonCompField67 ;
   union __anonunion____missing_field_name_236 __annonCompField68 ;
   union __anonunion____missing_field_name_237 __annonCompField70 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 4 ;
   int skc_bound_dev_if ;
   union __anonunion____missing_field_name_239 __annonCompField71 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion____missing_field_name_240 __annonCompField72 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 210
struct cg_proto;
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct __anonstruct_sk_backlog_241 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_241 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int sk_shutdown : 2 ;
   unsigned int sk_no_check : 2 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 870
struct request_sock_ops;
#line 871
struct timewait_sock_ops;
#line 872
struct inet_hashinfo;
#line 873
struct raw_hashinfo;
#line 888
struct udp_table;
#line 888 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
union __anonunion_h_242 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 888 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*release_cb)(struct sock * ) ;
   void (*mtu_reduced)(struct sock * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock  const  * ) ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_242 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 1013 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 2295 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct tipc_sock {
   struct sock sk ;
   struct tipc_port *p ;
   struct tipc_portid peer_name ;
   unsigned int conn_timeout ;
};
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
struct ldv_struct_proto_scenario_2 {
   struct socket *arg0 ;
   int arg1 ;
   int signal_pending ;
};
#line 6 ".tmp_log.c"
struct __va_list_tag;
#line 6 ".tmp_log.c"
typedef struct __va_list_tag __va_list_tag;
#line 40 "/home/debian/klever-inst/klever-addons/CIF/bin/aspectator-bin/bin/../lib64/gcc/x86_64-unknown-linux-gnu/4.6.0/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/home/debian/klever-inst/klever-addons/CIF/bin/aspectator-bin/bin/../lib64/gcc/x86_64-unknown-linux-gnu/4.6.0/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 1613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff * , struct net_device * , struct packet_type * , struct net_device * ) ;
   bool (*id_match)(struct packet_type * , struct sock * ) ;
   void *af_packet_priv ;
   struct list_head list ;
};
#line 1678 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
};
#line 2413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
typedef int pao_T_____27;
#line 2413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
typedef int pao_T_____28;
#line 2413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
typedef int pao_T_____29;
#line 2413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
typedef int pao_T_____30;
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct eth_bearer {
   struct tipc_bearer *bearer ;
   struct net_device *dev ;
   struct packet_type tipc_packet_type ;
   struct work_struct setup ;
   struct work_struct cleanup ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/net.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 2295 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
struct tipc_conn {
   struct kref kref ;
   int conid ;
   struct socket *sock ;
   unsigned long flags ;
   struct tipc_server *server ;
   struct work_struct rwork ;
   int (*rx_action)(struct tipc_conn * ) ;
   void *usr_data ;
   struct list_head outqueue ;
   spinlock_t outqueue_lock ;
   struct work_struct swork ;
};
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
struct outqueue_entry {
   struct list_head list ;
   struct kvec iov ;
   struct sockaddr_tipc dest ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct ib_bearer {
   struct tipc_bearer *bearer ;
   struct net_device *dev ;
   struct packet_type tipc_packet_type ;
   struct work_struct setup ;
   struct work_struct cleanup ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
};
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kthread.h"
struct kthread_work;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work * ) ;
   wait_queue_head_t done ;
   struct kthread_worker *worker ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spi/spi.h"
struct spi_master;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u16 mode ;
   u8 bits_per_word ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};
#line 151
struct spi_message;
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device * ) ;
   int (*transfer)(struct spi_device * , struct spi_message * ) ;
   void (*cleanup)(struct spi_device * ) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   int (*prepare_transfer_hardware)(struct spi_master * ) ;
   int (*transfer_one_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_transfer_hardware)(struct spi_master * ) ;
   int *cs_gpios ;
};
#line 560 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void * ) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
__inline static unsigned int tipc_zone(__u32 addr ) 
{ 


  {
#line 71
  return (addr >> 24);
}
}
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
__inline static unsigned int tipc_cluster(__u32 addr ) 
{ 


  {
#line 76
  return ((addr >> 12) & 4095U);
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
__inline static unsigned int tipc_node(__u32 addr ) 
{ 


  {
#line 81
  return (addr & 4095U);
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.h"
__inline static u32 tipc_zone_mask(u32 addr ) 
{ 


  {
#line 45
  return (addr & 4278190080U);
}
}
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.h"
__inline static u32 tipc_cluster_mask(u32 addr ) 
{ 


  {
#line 50
  return (addr & 4294963200U);
}
}
#line 89
int tipc_addr_domain_valid(u32 addr ) ;
#line 90
int tipc_addr_node_valid(u32 addr ) ;
#line 91
int tipc_in_scope(u32 domain , u32 addr ) ;
#line 92
int tipc_addr_scope(u32 domain ) ;
#line 93
char *tipc_addr_string_fill(char *string , u32 addr ) ;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.c"
int tipc_addr_domain_valid(u32 addr ) 
{ 
  u32 n ;
  unsigned int tmp ;
  u32 c ;
  unsigned int tmp___0 ;
  u32 z ;
  unsigned int tmp___1 ;

  {
  {
#line 50
  tmp = tipc_node(addr);
#line 50
  n = tmp;
#line 51
  tmp___0 = tipc_cluster(addr);
#line 51
  c = tmp___0;
#line 52
  tmp___1 = tipc_zone(addr);
#line 52
  z = tmp___1;
  }
#line 54
  if (n != 0U && (z == 0U || c == 0U)) {
#line 55
    return (0);
  } else {

  }
#line 56
  if (c != 0U && z == 0U) {
#line 57
    return (0);
  } else {

  }
#line 58
  return (1);
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.c"
int tipc_addr_node_valid(u32 addr ) 
{ 
  int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 70
  tmp = tipc_addr_domain_valid(addr);
  }
#line 70
  if (tmp != 0) {
    {
#line 70
    tmp___0 = tipc_node(addr);
    }
#line 70
    if (tmp___0 != 0U) {
#line 70
      tmp___1 = 1;
    } else {
#line 70
      tmp___1 = 0;
    }
  } else {
#line 70
    tmp___1 = 0;
  }
#line 70
  return (tmp___1);
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.c"
int tipc_in_scope(u32 domain , u32 addr ) 
{ 
  u32 tmp ;
  u32 tmp___0 ;

  {
#line 75
  if (domain == 0U || domain == addr) {
#line 76
    return (1);
  } else {

  }
  {
#line 77
  tmp = tipc_cluster_mask(addr);
  }
#line 77
  if (domain == tmp) {
#line 78
    return (1);
  } else {

  }
  {
#line 79
  tmp___0 = tipc_zone_mask(addr);
  }
#line 79
  if (domain == tmp___0) {
#line 80
    return (1);
  } else {

  }
#line 81
  return (0);
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.c"
int tipc_addr_scope(u32 domain ) 
{ 
  long tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
  {
#line 89
  tmp = __builtin_expect(domain == 0U, 1L);
  }
#line 89
  if (tmp != 0L) {
#line 90
    return (1);
  } else {

  }
  {
#line 91
  tmp___0 = tipc_node(domain);
  }
#line 91
  if (tmp___0 != 0U) {
#line 92
    return (3);
  } else {

  }
  {
#line 93
  tmp___1 = tipc_cluster(domain);
  }
#line 93
  if (tmp___1 != 0U) {
#line 94
    return (2);
  } else {

  }
#line 95
  return (1);
}
}
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.c"
char *tipc_addr_string_fill(char *string , u32 addr ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
  {
#line 100
  tmp = tipc_node(addr);
#line 100
  tmp___0 = tipc_cluster(addr);
#line 100
  tmp___1 = tipc_zone(addr);
#line 100
  snprintf(string, 16UL, "<%u.%u.%u>", tmp___1, tmp___0, tmp);
  }
#line 102
  return (string);
}
}
#line 1 "<compiler builtins>"
int __builtin_bswap32(int  ) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size , gfp_t flags ) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  int tmp ;

  {
  {
#line 60
  tmp = __builtin_bswap32(val);
  }
#line 60
  return ((__u32 )tmp);
}
}
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 203
extern void dump_stack(void) ;
#line 355 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 60
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/string.h"
extern size_t strlcpy(char * , char const   * , size_t  ) ;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bcast.c.aux"
void ldv_spin_lock_bc_lock(void) ;
#line 70
void ldv_spin_unlock_bc_lock(void) ;
#line 141
void ldv_spin_lock_lock_of_tipc_node(void) ;
#line 142
void ldv_spin_unlock_lock_of_tipc_node(void) ;
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_bh(raw_spinlock_t * ) ;
#line 40
extern void _raw_spin_unlock_bh(raw_spinlock_t * ) ;
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 282
  return (& lock->__annonCompField19.rlock);
}
}
#line 344 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void spin_lock_bh(spinlock_t *lock ) 
{ 


  {
  {
#line 346
  _raw_spin_lock_bh(& lock->__annonCompField19.rlock);
  }
#line 347
  return;
}
}
#line 368
__inline static void ldv_spin_lock_bh_58(spinlock_t *lock ) ;
#line 372
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 376
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 380
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 384
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 388
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 392
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 396
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 400
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 404
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 408
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 412
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 416
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 420
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 436
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) ;
#line 392 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void spin_unlock_bh(spinlock_t *lock ) 
{ 


  {
  {
#line 394
  _raw_spin_unlock_bh(& lock->__annonCompField19.rlock);
  }
#line 395
  return;
}
}
#line 416
__inline static void ldv_spin_unlock_bh_59(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 436
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 440
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 444
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 448
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 452
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 456
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 460
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 464
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 468
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 472
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 476
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 480
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 484
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 488
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) ;
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 389
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 628 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
extern void kfree_skb(struct sk_buff * ) ;
#line 666
extern struct sk_buff *__pskb_copy(struct sk_buff * , int  , gfp_t  ) ;
#line 1474 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff  const  *skb ) 
{ 


  {
#line 1476
  return ((unsigned int )((long )skb->data) - (unsigned int )((long )skb->head));
}
}
#line 2090 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static struct sk_buff *pskb_copy(struct sk_buff *skb , gfp_t gfp_mask ) 
{ 
  unsigned int tmp ;
  struct sk_buff *tmp___0 ;

  {
  {
#line 2093
  tmp = skb_headroom((struct sk_buff  const  *)skb);
#line 2093
  tmp___0 = __pskb_copy(skb, (int )tmp, gfp_mask);
  }
#line 2093
  return (tmp___0);
}
}
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
int tipc_snprintf(char *buf , int len , char const   *fmt  , ...) ;
#line 79
u32 tipc_own_addr ;
#line 81
int tipc_net_id ;
#line 199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
__inline static struct tipc_msg *buf_msg(struct sk_buff *skb ) 
{ 


  {
#line 201
  return ((struct tipc_msg *)skb->data);
}
}
#line 204
struct sk_buff *tipc_buf_acquire(u32 size ) ;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.h"
char const   tipc_bclink_name[15U] ;
#line 72
void tipc_nmap_add(struct tipc_node_map *nm_ptr , u32 node ) ;
#line 73
void tipc_nmap_remove(struct tipc_node_map *nm_ptr , u32 node ) ;
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.h"
__inline static int tipc_nmap_equal(struct tipc_node_map *nm_a , struct tipc_node_map *nm_b ) 
{ 
  int tmp ;

  {
  {
#line 81
  tmp = memcmp((void const   *)nm_a, (void const   *)nm_b, 516UL);
  }
#line 81
  return (tmp == 0);
}
}
#line 84
void tipc_port_list_add(struct tipc_port_list *pl_ptr , u32 port ) ;
#line 85
void tipc_port_list_free(struct tipc_port_list *pl_ptr ) ;
#line 87
void tipc_bclink_init(void) ;
#line 88
void tipc_bclink_stop(void) ;
#line 89
void tipc_bclink_add_node(u32 addr ) ;
#line 90
void tipc_bclink_remove_node(u32 addr ) ;
#line 91
struct tipc_node *tipc_bclink_retransmit_to(void) ;
#line 92
void tipc_bclink_acknowledge(struct tipc_node *n_ptr , u32 acked ) ;
#line 93
int tipc_bclink_send_msg(struct sk_buff *buf ) ;
#line 94
void tipc_bclink_recv_pkt(struct sk_buff *buf ) ;
#line 95
u32 tipc_bclink_get_last_sent(void) ;
#line 96
u32 tipc_bclink_acks_missing(struct tipc_node *n_ptr ) ;
#line 97
void tipc_bclink_update_link_state(struct tipc_node *n_ptr , u32 last_sent ) ;
#line 98
int tipc_bclink_stats(char *buf , u32 const   buf_size ) ;
#line 99
int tipc_bclink_reset_stats(void) ;
#line 100
int tipc_bclink_set_queue_limits(u32 limit ) ;
#line 101
void tipc_bcbearer_sort(void) ;
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct tipc_bearer tipc_bearers[2U] ;
#line 197
int tipc_bearer_blocked(struct tipc_bearer *b ) ;
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
__inline static void tipc_bearer_send(struct tipc_bearer *b , struct sk_buff *buf ,
                                      struct tipc_media_addr *dest ) 
{ 


  {
  {
#line 210
  (*((b->media)->send_msg))(buf, b, dest);
  }
#line 211
  return;
}
}
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_word(struct tipc_msg *m , u32 pos ) 
{ 
  __u32 tmp ;

  {
  {
#line 88
  tmp = __fswab32(m->hdr[pos]);
  }
#line 88
  return (tmp);
}
}
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_word(struct tipc_msg *m , u32 w , u32 val ) 
{ 
  __u32 tmp ;

  {
  {
#line 93
  tmp = __fswab32(val);
#line 93
  m->hdr[w] = tmp;
  }
#line 94
  return;
}
}
#line 96 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_bits(struct tipc_msg *m , u32 w , u32 pos , u32 mask ) 
{ 
  u32 tmp ;

  {
  {
#line 98
  tmp = msg_word(m, w);
  }
#line 98
  return ((tmp >> (int )pos) & mask);
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_bits(struct tipc_msg *m , u32 w , u32 pos , u32 mask ,
                                  u32 val ) 
{ 
  __u32 tmp ;
  __u32 tmp___0 ;

  {
  {
#line 104
  val = (val & mask) << (int )pos;
#line 105
  mask = mask << (int )pos;
#line 106
  tmp = __fswab32(mask);
#line 106
  m->hdr[w] = m->hdr[w] & ~ tmp;
#line 107
  tmp___0 = __fswab32(val);
#line 107
  m->hdr[w] = m->hdr[w] | tmp___0;
  }
#line 108
  return;
}
}
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_user(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 133
  tmp = msg_bits(m, 0U, 25U, 15U);
  }
#line 133
  return (tmp);
}
}
#line 136 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_isdata(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 138
  tmp = msg_user(m);
  }
#line 138
  return (tmp <= 3U);
}
}
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_hdr_sz(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 158
  tmp = msg_bits(m, 0U, 21U, 15U);
  }
#line 158
  return (tmp << 2);
}
}
#line 166 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_size(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 168
  tmp = msg_bits(m, 0U, 0U, 131071U);
  }
#line 168
  return (tmp);
}
}
#line 171 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_data_sz(struct tipc_msg *m ) 
{ 
  u32 tmp ;
  u32 tmp___0 ;

  {
  {
#line 173
  tmp = msg_size(m);
#line 173
  tmp___0 = msg_hdr_sz(m);
  }
#line 173
  return (tmp - tmp___0);
}
}
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static int msg_non_seq(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 178
  tmp = msg_bits(m, 0U, 20U, 1U);
  }
#line 178
  return ((int )tmp);
}
}
#line 181 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_non_seq(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 183
  msg_set_bits(m, 0U, 20U, 1U, n);
  }
#line 184
  return;
}
}
#line 215 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_type(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 217
  tmp = msg_bits(m, 1U, 29U, 7U);
  }
#line 217
  return (tmp);
}
}
#line 230 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_mcast(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 232
  tmp = msg_type(m);
  }
#line 232
  return (tmp == 1U);
}
}
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_bcast_ack(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 277
  tmp = msg_bits(m, 1U, 0U, 65535U);
  }
#line 277
  return (tmp);
}
}
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_bcast_ack(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 282
  msg_set_bits(m, 1U, 0U, 65535U, n);
  }
#line 283
  return;
}
}
#line 299 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_seqno(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 301
  tmp = msg_bits(m, 2U, 0U, 65535U);
  }
#line 301
  return (tmp);
}
}
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_prevnode(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 314
  tmp = msg_word(m, 3U);
  }
#line 314
  return (tmp);
}
}
#line 342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_mc_netid(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 344
  tmp = msg_word(m, 5U);
  }
#line 344
  return (tmp);
}
}
#line 347 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_mc_netid(struct tipc_msg *m , u32 p ) 
{ 


  {
  {
#line 349
  msg_set_word(m, 5U, p);
  }
#line 350
  return;
}
}
#line 369 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_destnode(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 371
  tmp = msg_word(m, 7U);
  }
#line 371
  return (tmp);
}
}
#line 523 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_bcgap_after(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 525
  tmp = msg_bits(m, 2U, 16U, 65535U);
  }
#line 525
  return (tmp);
}
}
#line 528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_bcgap_after(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 530
  msg_set_bits(m, 2U, 16U, 65535U, n);
  }
#line 531
  return;
}
}
#line 538 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_bcgap_to(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 540
  msg_set_bits(m, 2U, 0U, 65535U, n);
  }
#line 541
  return;
}
}
#line 681 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_msgcnt(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 683
  tmp = msg_bits(m, 9U, 16U, 65535U);
  }
#line 683
  return (tmp);
}
}
#line 722
void tipc_msg_init(struct tipc_msg *m , u32 user , u32 type , u32 hsize , u32 destnode ) ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.h"
void tipc_net_route_msg(struct sk_buff *buf ) ;
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
struct tipc_node *tipc_node_find(u32 addr ) ;
#line 117
int tipc_node_is_up(struct tipc_node *n_ptr ) ;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_lock(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 123
  ldv_spin_lock_bh_58(& n_ptr->lock);
  }
#line 124
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_unlock(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 128
  ldv_spin_unlock_bh_59(& n_ptr->lock);
  }
#line 129
  return;
}
}
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
void tipc_link_stop(struct tipc_link *l_ptr ) ;
#line 226
int tipc_link_send_buf(struct tipc_link *l_ptr , struct sk_buff *buf ) ;
#line 233
void tipc_link_recv_bundle(struct sk_buff *buf ) ;
#line 234
int tipc_link_recv_fragment(struct sk_buff **pending , struct sk_buff **fb , struct tipc_msg **m ) ;
#line 237
void tipc_link_send_proto_msg(struct tipc_link *l_ptr , u32 msg_typ , int probe_msg ,
                              u32 gap , u32 tolerance , u32 priority , u32 ack_mtu ) ;
#line 240
void tipc_link_push_queue(struct tipc_link *l_ptr ) ;
#line 241
u32 tipc_link_defer_pkt(struct sk_buff **head , struct sk_buff **tail , struct sk_buff *buf ) ;
#line 243
void tipc_link_wakeup_ports(struct tipc_link *l_ptr , int all ) ;
#line 244
void tipc_link_set_queue_limits(struct tipc_link *l_ptr , u32 window ) ;
#line 245
void tipc_link_retransmit(struct tipc_link *l_ptr , struct sk_buff *buf , u32 retransmits ) ;
#line 251 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static u32 buf_seqno(struct sk_buff *buf ) 
{ 
  struct tipc_msg *tmp ;
  u32 tmp___0 ;

  {
  {
#line 253
  tmp = buf_msg(buf);
#line 253
  tmp___0 = msg_seqno(tmp);
  }
#line 253
  return (tmp___0);
}
}
#line 256 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static u32 mod(u32 x ) 
{ 


  {
#line 258
  return (x & 65535U);
}
}
#line 270 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static int less_eq(u32 left , u32 right ) 
{ 
  u32 tmp ;

  {
  {
#line 272
  tmp = mod(right - left);
  }
#line 272
  return (tmp <= 32767U);
}
}
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static int less(u32 left , u32 right ) 
{ 
  int tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  int tmp___2 ;

  {
  {
#line 277
  tmp = less_eq(left, right);
  }
#line 277
  if (tmp != 0) {
    {
#line 277
    tmp___0 = mod(right);
#line 277
    tmp___1 = mod(left);
    }
#line 277
    if (tmp___0 != tmp___1) {
#line 277
      tmp___2 = 1;
    } else {
#line 277
      tmp___2 = 0;
    }
  } else {
#line 277
    tmp___2 = 0;
  }
#line 277
  return (tmp___2);
}
}
#line 174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
void tipc_port_recv_mcast(struct sk_buff *buf , struct tipc_port_list *dp ) ;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.h"
void tipc_named_recv(struct sk_buff *buf ) ;
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static struct tipc_bcbearer bcast_bearer  ;
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static struct tipc_bclink bcast_link  ;
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static struct tipc_bcbearer *bcbearer  =    & bcast_bearer;
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static struct tipc_bclink *bclink  =    & bcast_link;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static struct tipc_link *bcl  =    & bcast_link.link;
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static spinlock_t bc_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "bc_lock", 0, 0UL}}}};
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
char const   tipc_bclink_name[15U]  = 
#line 110
  {      'b',      'r',      'o',      'a', 
        'd',      'c',      'a',      's', 
        't',      '-',      'l',      'i', 
        'n',      'k',      '\000'};
#line 112
static void tipc_nmap_diff(struct tipc_node_map *nm_a , struct tipc_node_map *nm_b ,
                           struct tipc_node_map *nm_diff ) ;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static u32 bcbuf_acks(struct sk_buff *buf ) 
{ 


  {
#line 118
  return ((u32 )((long )((struct tipc_skb_cb *)(& buf->cb))->handle));
}
}
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static void bcbuf_set_acks(struct sk_buff *buf , u32 acks ) 
{ 


  {
#line 123
  ((struct tipc_skb_cb *)(& buf->cb))->handle = (void *)((unsigned long )acks);
#line 124
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static void bcbuf_decr_acks(struct sk_buff *buf ) 
{ 
  u32 tmp ;

  {
  {
#line 128
  tmp = bcbuf_acks(buf);
#line 128
  bcbuf_set_acks(buf, tmp - 1U);
  }
#line 129
  return;
}
}
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_bclink_add_node(u32 addr ) 
{ 


  {
  {
#line 133
  ldv_spin_lock_bh_61(& bc_lock);
#line 134
  tipc_nmap_add(& bclink->bcast_nodes, addr);
#line 135
  ldv_spin_unlock_bh_62(& bc_lock);
  }
#line 136
  return;
}
}
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_bclink_remove_node(u32 addr ) 
{ 


  {
  {
#line 140
  ldv_spin_lock_bh_61(& bc_lock);
#line 141
  tipc_nmap_remove(& bclink->bcast_nodes, addr);
#line 142
  ldv_spin_unlock_bh_62(& bc_lock);
  }
#line 143
  return;
}
}
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static void bclink_set_last_sent(void) 
{ 
  u32 tmp ;

  {
#line 147
  if ((unsigned long )bcl->next_out != (unsigned long )((struct sk_buff *)0)) {
    {
#line 148
    tmp = buf_seqno(bcl->next_out);
#line 148
    bcl->fsm_msg_cnt = mod(tmp - 1U);
    }
  } else {
    {
#line 150
    bcl->fsm_msg_cnt = mod(bcl->next_out_no - 1U);
    }
  }
#line 151
  return;
}
}
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
u32 tipc_bclink_get_last_sent(void) 
{ 


  {
#line 155
  return (bcl->fsm_msg_cnt);
}
}
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static void bclink_update_last_sent(struct tipc_node *node , u32 seqno ) 
{ 
  int tmp ;

  {
  {
#line 160
  tmp = less_eq(node->bclink.last_sent, seqno);
#line 160
  node->bclink.last_sent = tmp != 0 ? seqno : node->bclink.last_sent;
  }
#line 162
  return;
}
}
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
struct tipc_node *tipc_bclink_retransmit_to(void) 
{ 


  {
#line 172
  return (bclink->retransmit_to);
}
}
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static void bclink_retransmit_pkt(u32 after , u32 to ) 
{ 
  struct sk_buff *buf ;
  u32 tmp ;
  int tmp___0 ;
  u32 tmp___1 ;

  {
#line 186
  buf = bcl->first_out;
#line 187
  goto ldv_40925;
  ldv_40924: 
#line 188
  buf = buf->next;
  ldv_40925: ;
#line 187
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 187
    tmp = buf_seqno(buf);
#line 187
    tmp___0 = less_eq(tmp, after);
    }
#line 187
    if (tmp___0 != 0) {
#line 189
      goto ldv_40924;
    } else {
#line 192
      goto ldv_40926;
    }
  } else {

  }
  ldv_40926: 
  {
#line 189
  tmp___1 = mod(to - after);
#line 189
  tipc_link_retransmit(bcl, buf, tmp___1);
  }
#line 190
  return;
}
}
#line 199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_bclink_acknowledge(struct tipc_node *n_ptr , u32 acked ) 
{ 
  struct sk_buff *crs ;
  struct sk_buff *next ;
  unsigned int released ;
  u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  u32 tmp___3 ;
  int tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;

  {
  {
#line 203
  released = 0U;
#line 205
  ldv_spin_lock_bh_61(& bc_lock);
#line 208
  crs = bcl->first_out;
  }
#line 209
  if ((unsigned long )crs == (unsigned long )((struct sk_buff *)0)) {
#line 210
    goto exit;
  } else {

  }
#line 213
  if (acked == 65536U) {
#line 219
    if (bclink->bcast_nodes.count != 0U) {
#line 220
      acked = bcl->fsm_msg_cnt;
    } else {
#line 222
      acked = bcl->next_out_no;
    }
  } else {
    {
#line 228
    tmp = buf_seqno(crs);
#line 228
    tmp___0 = less(acked, tmp);
    }
#line 228
    if (tmp___0 != 0) {
#line 231
      goto exit;
    } else {
      {
#line 228
      tmp___1 = less(bcl->fsm_msg_cnt, acked);
      }
#line 228
      if (tmp___1 != 0) {
#line 231
        goto exit;
      } else {
        {
#line 228
        tmp___2 = less_eq(acked, n_ptr->bclink.acked);
        }
#line 228
        if (tmp___2 != 0) {
#line 231
          goto exit;
        } else {

        }
      }
    }
  }
#line 235
  goto ldv_40936;
  ldv_40935: 
#line 236
  crs = crs->next;
  ldv_40936: ;
#line 235
  if ((unsigned long )crs != (unsigned long )((struct sk_buff *)0)) {
    {
#line 235
    tmp___3 = buf_seqno(crs);
#line 235
    tmp___4 = less_eq(tmp___3, n_ptr->bclink.acked);
    }
#line 235
    if (tmp___4 != 0) {
#line 237
      goto ldv_40935;
    } else {
#line 240
      goto ldv_40937;
    }
  } else {

  }
  ldv_40937: ;
#line 240
  goto ldv_40939;
  ldv_40938: 
#line 241
  next = crs->next;
#line 243
  if ((unsigned long )crs != (unsigned long )bcl->next_out) {
    {
#line 244
    bcbuf_decr_acks(crs);
    }
  } else {
    {
#line 246
    bcbuf_set_acks(crs, 0U);
#line 247
    bcl->next_out = next;
#line 248
    bclink_set_last_sent();
    }
  }
  {
#line 251
  tmp___5 = bcbuf_acks(crs);
  }
#line 251
  if (tmp___5 == 0U) {
    {
#line 252
    bcl->first_out = next;
#line 253
    bcl->out_queue_size = bcl->out_queue_size - 1U;
#line 254
    kfree_skb(crs);
#line 255
    released = 1U;
    }
  } else {

  }
#line 257
  crs = next;
  ldv_40939: ;
#line 240
  if ((unsigned long )crs != (unsigned long )((struct sk_buff *)0)) {
    {
#line 240
    tmp___6 = buf_seqno(crs);
#line 240
    tmp___7 = less_eq(tmp___6, acked);
    }
#line 240
    if (tmp___7 != 0) {
#line 242
      goto ldv_40938;
    } else {
#line 245
      goto ldv_40940;
    }
  } else {

  }
  ldv_40940: 
  {
#line 259
  n_ptr->bclink.acked = acked;
#line 263
  tmp___8 = __builtin_expect((unsigned long )bcl->next_out != (unsigned long )((struct sk_buff *)0),
                             0L);
  }
#line 263
  if (tmp___8 != 0L) {
    {
#line 264
    tipc_link_push_queue(bcl);
#line 265
    bclink_set_last_sent();
    }
  } else {

  }
  {
#line 267
  tmp___9 = __builtin_expect(released != 0U, 0L);
  }
#line 267
  if (tmp___9 != 0L) {
    {
#line 267
    tmp___10 = list_empty((struct list_head  const  *)(& bcl->waiting_ports));
#line 267
    tmp___11 = __builtin_expect(tmp___10 == 0, 0L);
    }
#line 267
    if (tmp___11 != 0L) {
      {
#line 268
      tipc_link_wakeup_ports(bcl, 0);
      }
    } else {

    }
  } else {

  }
  exit: 
  {
#line 270
  ldv_spin_unlock_bh_62(& bc_lock);
  }
#line 271
  return;
}
}
#line 278 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_bclink_update_link_state(struct tipc_node *n_ptr , u32 last_sent ) 
{ 
  struct sk_buff *buf ;
  int tmp ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;

  {
  {
#line 284
  tmp = less_eq(last_sent, n_ptr->bclink.last_in);
  }
#line 284
  if (tmp != 0) {
#line 285
    return;
  } else {

  }
  {
#line 289
  bclink_update_last_sent(n_ptr, last_sent);
  }
#line 291
  if (n_ptr->bclink.last_sent == n_ptr->bclink.last_in) {
#line 292
    return;
  } else {

  }
#line 296
  n_ptr->bclink.oos_state = n_ptr->bclink.oos_state + 1U;
#line 296
  if (n_ptr->bclink.oos_state == 1U) {
#line 297
    if (n_ptr->bclink.deferred_size <= 7U) {
#line 298
      return;
    } else {

    }
#line 299
    n_ptr->bclink.oos_state = n_ptr->bclink.oos_state + 1U;
  } else {

  }
#line 304
  if ((int )n_ptr->bclink.oos_state & 1) {
#line 305
    return;
  } else {

  }
  {
#line 309
  buf = tipc_buf_acquire(40U);
  }
#line 310
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 311
    tmp___0 = buf_msg(buf);
#line 311
    msg = tmp___0;
#line 313
    tipc_msg_init(msg, 5U, 0U, 40U, n_ptr->addr);
#line 315
    msg_set_non_seq(msg, 1U);
#line 316
    msg_set_mc_netid(msg, (u32 )tipc_net_id);
#line 317
    msg_set_bcast_ack(msg, n_ptr->bclink.last_in);
#line 318
    msg_set_bcgap_after(msg, n_ptr->bclink.last_in);
    }
#line 319
    if ((unsigned long )n_ptr->bclink.deferred_head != (unsigned long )((struct sk_buff *)0)) {
      {
#line 319
      tmp___1 = buf_seqno(n_ptr->bclink.deferred_head);
#line 319
      tmp___2 = tmp___1 - 1U;
      }
    } else {
#line 319
      tmp___2 = n_ptr->bclink.last_sent;
    }
    {
#line 319
    msg_set_bcgap_to(msg, tmp___2);
#line 323
    ldv_spin_lock_bh_61(& bc_lock);
#line 324
    tipc_bearer_send(& bcbearer->bearer, buf, (struct tipc_media_addr *)0);
#line 325
    bcl->stats.sent_nacks = bcl->stats.sent_nacks + 1U;
#line 326
    ldv_spin_unlock_bh_62(& bc_lock);
#line 327
    kfree_skb(buf);
#line 329
    n_ptr->bclink.oos_state = n_ptr->bclink.oos_state + 1U;
    }
  } else {

  }
#line 331
  return;
}
}
#line 341 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static void bclink_peek_nack(struct tipc_msg *msg ) 
{ 
  struct tipc_node *n_ptr ;
  u32 tmp ;
  struct tipc_node *tmp___0 ;
  long tmp___1 ;
  u32 tmp___2 ;

  {
  {
#line 343
  tmp = msg_destnode(msg);
#line 343
  tmp___0 = tipc_node_find(tmp);
#line 343
  n_ptr = tmp___0;
#line 345
  tmp___1 = __builtin_expect((unsigned long )n_ptr == (unsigned long )((struct tipc_node *)0),
                             0L);
  }
#line 345
  if (tmp___1 != 0L) {
#line 346
    return;
  } else {

  }
  {
#line 348
  tipc_node_lock(n_ptr);
  }
#line 350
  if ((int )n_ptr->bclink.recv_permitted && n_ptr->bclink.last_in != n_ptr->bclink.last_sent) {
    {
#line 350
    tmp___2 = msg_bcgap_after(msg);
    }
#line 350
    if (n_ptr->bclink.last_in == tmp___2) {
#line 353
      n_ptr->bclink.oos_state = 2U;
    } else {

    }
  } else {

  }
  {
#line 355
  tipc_node_unlock(n_ptr);
  }
#line 356
  return;
}
}
#line 361 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
int tipc_bclink_send_msg(struct sk_buff *buf ) 
{ 
  int res ;
  struct tipc_msg *tmp ;
  u32 tmp___0 ;
  long tmp___1 ;

  {
  {
#line 365
  ldv_spin_lock_bh_61(& bc_lock);
  }
#line 367
  if (bclink->bcast_nodes.count == 0U) {
    {
#line 368
    tmp = buf_msg(buf);
#line 368
    tmp___0 = msg_data_sz(tmp);
#line 368
    res = (int )tmp___0;
#line 369
    kfree_skb(buf);
    }
#line 370
    goto exit;
  } else {

  }
  {
#line 373
  res = tipc_link_send_buf(bcl, buf);
#line 374
  tmp___1 = __builtin_expect(res >= 0, 1L);
  }
#line 374
  if (tmp___1 != 0L) {
    {
#line 375
    bclink_set_last_sent();
#line 376
    bcl->stats.queue_sz_counts = bcl->stats.queue_sz_counts + 1U;
#line 377
    bcl->stats.accu_queue_sz = bcl->stats.accu_queue_sz + bcl->out_queue_size;
    }
  } else {

  }
  exit: 
  {
#line 380
  ldv_spin_unlock_bh_62(& bc_lock);
  }
#line 381
  return (res);
}
}
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static void bclink_accept_pkt(struct tipc_node *node , u32 seqno ) 
{ 


  {
  {
#line 391
  bclink_update_last_sent(node, seqno);
#line 392
  node->bclink.last_in = seqno;
#line 393
  node->bclink.oos_state = 0U;
#line 394
  bcl->stats.recv_info = bcl->stats.recv_info + 1U;
  }
#line 401
  if (((seqno - tipc_own_addr) & 15U) == 0U) {
    {
#line 402
    tipc_link_send_proto_msg(node->active_links[node->addr & 1U], 0U, 0, 0U, 0U, 0U,
                             0U);
#line 405
    bcl->stats.sent_acks = bcl->stats.sent_acks + 1U;
    }
  } else {

  }
#line 407
  return;
}
}
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_bclink_recv_pkt(struct sk_buff *buf ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  struct tipc_node *node ;
  u32 next_in ;
  u32 seqno ;
  int deferred ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  long tmp___10 ;
  u32 tmp___11 ;
  long tmp___12 ;
  u32 tmp___13 ;
  int ret ;
  int tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  long tmp___19 ;
  int tmp___20 ;
  long tmp___21 ;
  long tmp___22 ;
  u32 tmp___23 ;
  int tmp___24 ;

  {
  {
#line 416
  tmp = buf_msg(buf);
#line 416
  msg = tmp;
#line 424
  tmp___0 = msg_mc_netid(msg);
  }
#line 424
  if (tmp___0 != (u32 )tipc_net_id) {
#line 425
    goto exit;
  } else {

  }
  {
#line 427
  tmp___1 = msg_prevnode(msg);
#line 427
  node = tipc_node_find(tmp___1);
#line 428
  tmp___2 = __builtin_expect((unsigned long )node == (unsigned long )((struct tipc_node *)0),
                             0L);
  }
#line 428
  if (tmp___2 != 0L) {
#line 429
    goto exit;
  } else {

  }
  {
#line 431
  tipc_node_lock(node);
#line 432
  tmp___3 = __builtin_expect((long )(! node->bclink.recv_permitted), 0L);
  }
#line 432
  if (tmp___3 != 0L) {
#line 433
    goto unlock;
  } else {

  }
  {
#line 437
  tmp___9 = msg_user(msg);
#line 437
  tmp___10 = __builtin_expect(tmp___9 == 5U, 0L);
  }
#line 437
  if (tmp___10 != 0L) {
    {
#line 438
    tmp___4 = msg_type(msg);
    }
#line 438
    if (tmp___4 != 0U) {
#line 439
      goto unlock;
    } else {

    }
    {
#line 440
    tmp___8 = msg_destnode(msg);
    }
#line 440
    if (tmp___8 == tipc_own_addr) {
      {
#line 441
      tmp___5 = msg_bcast_ack(msg);
#line 441
      tipc_bclink_acknowledge(node, tmp___5);
#line 442
      tipc_node_unlock(node);
#line 443
      ldv_spin_lock_bh_61(& bc_lock);
#line 444
      bcl->stats.recv_nacks = bcl->stats.recv_nacks + 1U;
#line 445
      bclink->retransmit_to = node;
#line 446
      tmp___6 = msg_seqno(msg);
#line 446
      tmp___7 = msg_bcgap_after(msg);
#line 446
      bclink_retransmit_pkt(tmp___7, tmp___6);
#line 448
      ldv_spin_unlock_bh_62(& bc_lock);
      }
    } else {
      {
#line 450
      tipc_node_unlock(node);
#line 451
      bclink_peek_nack(msg);
      }
    }
#line 453
    goto exit;
  } else {

  }
  {
#line 458
  seqno = msg_seqno(msg);
#line 459
  next_in = mod(node->bclink.last_in + 1U);
#line 461
  tmp___22 = __builtin_expect(seqno == next_in, 1L);
  }
#line 461
  if (tmp___22 != 0L) {
    receive: 
    {
#line 465
    tmp___18 = msg_isdata(msg);
#line 465
    tmp___19 = __builtin_expect(tmp___18 != 0U, 1L);
    }
#line 465
    if (tmp___19 != 0L) {
      {
#line 466
      ldv_spin_lock_bh_61(& bc_lock);
#line 467
      bclink_accept_pkt(node, seqno);
#line 468
      ldv_spin_unlock_bh_62(& bc_lock);
#line 469
      tipc_node_unlock(node);
#line 470
      tmp___11 = msg_mcast(msg);
#line 470
      tmp___12 = __builtin_expect(tmp___11 != 0U, 1L);
      }
#line 470
      if (tmp___12 != 0L) {
        {
#line 471
        tipc_port_recv_mcast(buf, (struct tipc_port_list *)0);
        }
      } else {
        {
#line 473
        kfree_skb(buf);
        }
      }
    } else {
      {
#line 474
      tmp___17 = msg_user(msg);
      }
#line 474
      if (tmp___17 == 6U) {
        {
#line 475
        ldv_spin_lock_bh_61(& bc_lock);
#line 476
        bclink_accept_pkt(node, seqno);
#line 477
        bcl->stats.recv_bundles = bcl->stats.recv_bundles + 1U;
#line 478
        tmp___13 = msg_msgcnt(msg);
#line 478
        bcl->stats.recv_bundled = bcl->stats.recv_bundled + tmp___13;
#line 479
        ldv_spin_unlock_bh_62(& bc_lock);
#line 480
        tipc_node_unlock(node);
#line 481
        tipc_link_recv_bundle(buf);
        }
      } else {
        {
#line 482
        tmp___16 = msg_user(msg);
        }
#line 482
        if (tmp___16 == 12U) {
          {
#line 483
          tmp___14 = tipc_link_recv_fragment(& node->bclink.defragm, & buf, & msg);
#line 483
          ret = tmp___14;
          }
#line 485
          if (ret < 0) {
#line 486
            goto unlock;
          } else {

          }
          {
#line 487
          ldv_spin_lock_bh_61(& bc_lock);
#line 488
          bclink_accept_pkt(node, seqno);
#line 489
          bcl->stats.recv_fragments = bcl->stats.recv_fragments + 1U;
          }
#line 490
          if (ret > 0) {
#line 491
            bcl->stats.recv_fragmented = bcl->stats.recv_fragmented + 1U;
          } else {

          }
          {
#line 492
          ldv_spin_unlock_bh_62(& bc_lock);
#line 493
          tipc_node_unlock(node);
#line 494
          tipc_net_route_msg(buf);
          }
        } else {
          {
#line 495
          tmp___15 = msg_user(msg);
          }
#line 495
          if (tmp___15 == 11U) {
            {
#line 496
            ldv_spin_lock_bh_61(& bc_lock);
#line 497
            bclink_accept_pkt(node, seqno);
#line 498
            ldv_spin_unlock_bh_62(& bc_lock);
#line 499
            tipc_node_unlock(node);
#line 500
            tipc_named_recv(buf);
            }
          } else {
            {
#line 502
            ldv_spin_lock_bh_61(& bc_lock);
#line 503
            bclink_accept_pkt(node, seqno);
#line 504
            ldv_spin_unlock_bh_62(& bc_lock);
#line 505
            tipc_node_unlock(node);
#line 506
            kfree_skb(buf);
            }
          }
        }
      }
    }
    {
#line 508
    buf = (struct sk_buff *)0;
#line 512
    tipc_node_lock(node);
#line 513
    tmp___20 = tipc_node_is_up(node);
#line 513
    tmp___21 = __builtin_expect(tmp___20 == 0, 0L);
    }
#line 513
    if (tmp___21 != 0L) {
#line 514
      goto unlock;
    } else {

    }
#line 516
    if (node->bclink.last_in == node->bclink.last_sent) {
#line 517
      goto unlock;
    } else {

    }
#line 519
    if ((unsigned long )node->bclink.deferred_head == (unsigned long )((struct sk_buff *)0)) {
#line 520
      node->bclink.oos_state = 1U;
#line 521
      goto unlock;
    } else {

    }
    {
#line 524
    msg = buf_msg(node->bclink.deferred_head);
#line 525
    seqno = msg_seqno(msg);
#line 526
    next_in = mod(next_in + 1U);
    }
#line 527
    if (seqno != next_in) {
#line 528
      goto unlock;
    } else {

    }
#line 532
    buf = node->bclink.deferred_head;
#line 533
    node->bclink.deferred_head = buf->next;
#line 534
    node->bclink.deferred_size = node->bclink.deferred_size - 1U;
#line 535
    goto receive;
  } else {

  }
  {
#line 540
  tmp___24 = less(next_in, seqno);
  }
#line 540
  if (tmp___24 != 0) {
    {
#line 541
    tmp___23 = tipc_link_defer_pkt(& node->bclink.deferred_head, & node->bclink.deferred_tail,
                                   buf);
#line 541
    deferred = (int )tmp___23;
#line 544
    node->bclink.deferred_size = node->bclink.deferred_size + (u32 )deferred;
#line 545
    bclink_update_last_sent(node, seqno);
#line 546
    buf = (struct sk_buff *)0;
    }
  } else {
#line 548
    deferred = 0;
  }
  {
#line 550
  ldv_spin_lock_bh_61(& bc_lock);
  }
#line 552
  if (deferred != 0) {
#line 553
    bcl->stats.deferred_recv = bcl->stats.deferred_recv + 1U;
  } else {
#line 555
    bcl->stats.duplicates = bcl->stats.duplicates + 1U;
  }
  {
#line 557
  ldv_spin_unlock_bh_62(& bc_lock);
  }
  unlock: 
  {
#line 560
  tipc_node_unlock(node);
  }
  exit: 
  {
#line 562
  kfree_skb(buf);
  }
#line 563
  return;
}
}
#line 565 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
u32 tipc_bclink_acks_missing(struct tipc_node *n_ptr ) 
{ 
  u32 tmp ;
  int tmp___0 ;

  {
#line 567
  if ((int )n_ptr->bclink.recv_permitted) {
    {
#line 567
    tmp = tipc_bclink_get_last_sent();
    }
#line 567
    if (tmp != n_ptr->bclink.acked) {
#line 567
      tmp___0 = 1;
    } else {
#line 567
      tmp___0 = 0;
    }
  } else {
#line 567
    tmp___0 = 0;
  }
#line 567
  return ((u32 )tmp___0);
}
}
#line 581 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static int tipc_bcbearer_send(struct sk_buff *buf , struct tipc_bearer *unused1 ,
                              struct tipc_media_addr *unused2 ) 
{ 
  int bp_index ;
  struct tipc_msg *msg ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  struct tipc_msg *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct tipc_bearer *p ;
  struct tipc_bearer *s ;
  struct tipc_bearer *b ;
  struct sk_buff *tbuf ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 591
  tmp___1 = buf_msg(buf);
#line 591
  tmp___2 = msg_non_seq(tmp___1);
#line 591
  tmp___3 = __builtin_expect(tmp___2 == 0, 1L);
  }
#line 591
  if (tmp___3 != 0L) {
    {
#line 594
    bcbuf_set_acks(buf, bclink->bcast_nodes.count);
#line 595
    msg = buf_msg(buf);
#line 596
    msg_set_non_seq(msg, 1U);
#line 597
    msg_set_mc_netid(msg, (u32 )tipc_net_id);
#line 598
    bcl->stats.sent_info = bcl->stats.sent_info + 1U;
#line 600
    __ret_warn_on = bclink->bcast_nodes.count == 0U;
#line 600
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 600
    if (tmp != 0L) {
      {
#line 600
      warn_slowpath_null("net/tipc/bcast.c", 600);
      }
    } else {

    }
    {
#line 600
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 600
    if (tmp___0 != 0L) {
      {
#line 601
      dump_stack();
      }
#line 602
      return (0);
    } else {

    }
  } else {

  }
#line 607
  bcbearer->remains = bclink->bcast_nodes;
#line 609
  bp_index = 0;
#line 609
  goto ldv_40991;
  ldv_40990: 
#line 610
  p = bcbearer->bpairs[bp_index].primary;
#line 611
  s = bcbearer->bpairs[bp_index].secondary;
#line 612
  b = p;
#line 615
  if ((unsigned long )p == (unsigned long )((struct tipc_bearer *)0)) {
#line 616
    goto ldv_40988;
  } else {

  }
  {
#line 618
  tmp___5 = tipc_bearer_blocked(p);
  }
#line 618
  if (tmp___5 != 0) {
#line 619
    if ((unsigned long )s == (unsigned long )((struct tipc_bearer *)0)) {
#line 620
      goto ldv_40989;
    } else {
      {
#line 619
      tmp___4 = tipc_bearer_blocked(s);
      }
#line 619
      if (tmp___4 != 0) {
#line 620
        goto ldv_40989;
      } else {

      }
    }
#line 621
    b = s;
  } else {

  }
  {
#line 624
  tipc_nmap_diff(& bcbearer->remains, & b->nodes, & bcbearer->remains_new);
  }
#line 626
  if (bcbearer->remains_new.count == bcbearer->remains.count) {
#line 627
    goto ldv_40989;
  } else {

  }
#line 629
  if (bp_index == 0) {
    {
#line 631
    tipc_bearer_send(b, buf, & b->bcast_addr);
    }
  } else {
    {
#line 634
    tbuf = pskb_copy(buf, 32U);
    }
#line 635
    if ((unsigned long )tbuf == (unsigned long )((struct sk_buff *)0)) {
#line 636
      goto ldv_40988;
    } else {

    }
    {
#line 637
    tipc_bearer_send(b, tbuf, & b->bcast_addr);
#line 638
    kfree_skb(tbuf);
    }
  }
#line 642
  if ((unsigned long )s != (unsigned long )((struct tipc_bearer *)0)) {
#line 643
    bcbearer->bpairs[bp_index].primary = s;
#line 644
    bcbearer->bpairs[bp_index].secondary = p;
  } else {

  }
#line 647
  if (bcbearer->remains_new.count == 0U) {
#line 648
    goto ldv_40988;
  } else {

  }
#line 650
  bcbearer->remains = bcbearer->remains_new;
  ldv_40989: 
#line 609
  bp_index = bp_index + 1;
  ldv_40991: ;
#line 609
  if (bp_index <= 1) {
#line 611
    goto ldv_40990;
  } else {

  }
  ldv_40988: ;
#line 653
  return (0);
}
}
#line 659 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_bcbearer_sort(void) 
{ 
  struct tipc_bcbearer_pair *bp_temp ;
  struct tipc_bcbearer_pair *bp_curr ;
  int b_index ;
  int pri ;
  struct tipc_bearer *b ;
  int tmp ;

  {
  {
#line 661
  bp_temp = (struct tipc_bcbearer_pair *)(& bcbearer->bpairs_temp);
#line 666
  ldv_spin_lock_bh_61(& bc_lock);
#line 669
  memset((void *)bp_temp, 0, 512UL);
#line 671
  b_index = 0;
  }
#line 671
  goto ldv_41002;
  ldv_41001: 
#line 672
  b = (struct tipc_bearer *)(& tipc_bearers) + (unsigned long )b_index;
#line 674
  if (b->active == 0 || b->nodes.count == 0U) {
#line 675
    goto ldv_41000;
  } else {

  }
#line 677
  if ((unsigned long )(bp_temp + (unsigned long )b->priority)->primary == (unsigned long )((struct tipc_bearer *)0)) {
#line 678
    (bp_temp + (unsigned long )b->priority)->primary = b;
  } else {
#line 680
    (bp_temp + (unsigned long )b->priority)->secondary = b;
  }
  ldv_41000: 
#line 671
  b_index = b_index + 1;
  ldv_41002: ;
#line 671
  if (b_index <= 1) {
#line 673
    goto ldv_41001;
  } else {

  }
  {
#line 684
  bp_curr = (struct tipc_bcbearer_pair *)(& bcbearer->bpairs);
#line 685
  memset((void *)(& bcbearer->bpairs), 0, 32UL);
#line 687
  pri = 31;
  }
#line 687
  goto ldv_41006;
  ldv_41005: ;
#line 689
  if ((unsigned long )(bp_temp + (unsigned long )pri)->primary == (unsigned long )((struct tipc_bearer *)0)) {
#line 690
    goto ldv_41004;
  } else {

  }
#line 692
  bp_curr->primary = (bp_temp + (unsigned long )pri)->primary;
#line 694
  if ((unsigned long )(bp_temp + (unsigned long )pri)->secondary != (unsigned long )((struct tipc_bearer *)0)) {
    {
#line 695
    tmp = tipc_nmap_equal(& ((bp_temp + (unsigned long )pri)->primary)->nodes, & ((bp_temp + (unsigned long )pri)->secondary)->nodes);
    }
#line 695
    if (tmp != 0) {
#line 697
      bp_curr->secondary = (bp_temp + (unsigned long )pri)->secondary;
    } else {
#line 699
      bp_curr = bp_curr + 1;
#line 700
      bp_curr->primary = (bp_temp + (unsigned long )pri)->secondary;
    }
  } else {

  }
#line 704
  bp_curr = bp_curr + 1;
  ldv_41004: 
#line 687
  pri = pri - 1;
  ldv_41006: ;
#line 687
  if (pri >= 0) {
#line 689
    goto ldv_41005;
  } else {

  }
  {
#line 707
  ldv_spin_unlock_bh_62(& bc_lock);
  }
#line 708
  return;
}
}
#line 711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
int tipc_bclink_stats(char *buf , u32 const   buf_size ) 
{ 
  int ret ;
  struct tipc_stats *s ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 716
  if ((unsigned long )bcl == (unsigned long )((struct tipc_link *)0)) {
#line 717
    return (0);
  } else {

  }
  {
#line 719
  ldv_spin_lock_bh_61(& bc_lock);
#line 721
  s = & bcl->stats;
#line 723
  ret = tipc_snprintf(buf, (int )buf_size, "Link <%s>\n  Window:%u packets\n", (char *)(& bcl->name),
                      bcl->queue_limit[0]);
#line 726
  tmp = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                      "  RX packets:%u fragments:%u/%u bundles:%u/%u\n", s->recv_info,
                      s->recv_fragments, s->recv_fragmented, s->recv_bundles, s->recv_bundled);
#line 726
  ret = ret + tmp;
#line 731
  tmp___0 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                          "  TX packets:%u fragments:%u/%u bundles:%u/%u\n", s->sent_info,
                          s->sent_fragments, s->sent_fragmented, s->sent_bundles,
                          s->sent_bundled);
#line 731
  ret = ret + tmp___0;
#line 736
  tmp___1 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                          "  RX naks:%u defs:%u dups:%u\n", s->recv_nacks, s->deferred_recv,
                          s->duplicates);
#line 736
  ret = ret + tmp___1;
#line 739
  tmp___2 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                          "  TX naks:%u acks:%u dups:%u\n", s->sent_nacks, s->sent_acks,
                          s->retransmitted);
#line 739
  ret = ret + tmp___2;
#line 742
  tmp___3 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                          "  Congestion link:%u  Send queue max:%u avg:%u\n", s->link_congs,
                          s->max_queue_sz, s->queue_sz_counts != 0U ? s->accu_queue_sz / s->queue_sz_counts : 0U);
#line 742
  ret = ret + tmp___3;
#line 748
  ldv_spin_unlock_bh_62(& bc_lock);
  }
#line 749
  return (ret);
}
}
#line 752 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
int tipc_bclink_reset_stats(void) 
{ 


  {
#line 754
  if ((unsigned long )bcl == (unsigned long )((struct tipc_link *)0)) {
#line 755
    return (-92);
  } else {

  }
  {
#line 757
  ldv_spin_lock_bh_61(& bc_lock);
#line 758
  memset((void *)(& bcl->stats), 0, 132UL);
#line 759
  ldv_spin_unlock_bh_62(& bc_lock);
  }
#line 760
  return (0);
}
}
#line 763 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
int tipc_bclink_set_queue_limits(u32 limit ) 
{ 


  {
#line 765
  if ((unsigned long )bcl == (unsigned long )((struct tipc_link *)0)) {
#line 766
    return (-92);
  } else {

  }
#line 767
  if (limit - 16U > 134U) {
#line 768
    return (-22);
  } else {

  }
  {
#line 770
  ldv_spin_lock_bh_61(& bc_lock);
#line 771
  tipc_link_set_queue_limits(bcl, limit);
#line 772
  ldv_spin_unlock_bh_62(& bc_lock);
  }
#line 773
  return (0);
}
}
#line 776 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_bclink_init(void) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
  {
#line 778
  bcbearer->bearer.media = & bcbearer->media;
#line 779
  bcbearer->media.send_msg = & tipc_bcbearer_send;
#line 780
  sprintf((char *)(& bcbearer->media.name), "tipc-broadcast");
#line 782
  INIT_LIST_HEAD(& bcl->waiting_ports);
#line 783
  bcl->next_out_no = 1U;
#line 784
  spinlock_check(& bclink->node.lock);
#line 784
  __raw_spin_lock_init(& bclink->node.lock.__annonCompField19.rlock, "&(&bclink->node.lock)->rlock",
                       & __key);
#line 785
  bcl->owner = & bclink->node;
#line 786
  bcl->max_pkt = 1500U;
#line 787
  tipc_link_set_queue_limits(bcl, 20U);
#line 788
  spinlock_check(& bcbearer->bearer.lock);
#line 788
  __raw_spin_lock_init(& bcbearer->bearer.lock.__annonCompField19.rlock, "&(&bcbearer->bearer.lock)->rlock",
                       & __key___0);
#line 789
  bcl->b_ptr = & bcbearer->bearer;
#line 790
  bcl->state = 560810;
#line 791
  strlcpy((char *)(& bcl->name), (char const   *)(& tipc_bclink_name), 60UL);
  }
#line 792
  return;
}
}
#line 794 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_bclink_stop(void) 
{ 


  {
  {
#line 796
  ldv_spin_lock_bh_61(& bc_lock);
#line 797
  tipc_link_stop(bcl);
#line 798
  ldv_spin_unlock_bh_62(& bc_lock);
#line 800
  memset((void *)bclink, 0, 1464UL);
#line 801
  memset((void *)bcbearer, 0, 2400UL);
  }
#line 802
  return;
}
}
#line 808 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_nmap_add(struct tipc_node_map *nm_ptr , u32 node ) 
{ 
  int n ;
  unsigned int tmp ;
  int w ;
  u32 mask ;

  {
  {
#line 810
  tmp = tipc_node(node);
#line 810
  n = (int )tmp;
#line 811
  w = n / 32;
#line 812
  mask = (u32 )(1 << n % 32);
  }
#line 814
  if ((nm_ptr->map[w] & mask) == 0U) {
#line 815
    nm_ptr->count = nm_ptr->count + 1U;
#line 816
    nm_ptr->map[w] = nm_ptr->map[w] | mask;
  } else {

  }
#line 818
  return;
}
}
#line 823 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_nmap_remove(struct tipc_node_map *nm_ptr , u32 node ) 
{ 
  int n ;
  unsigned int tmp ;
  int w ;
  u32 mask ;

  {
  {
#line 825
  tmp = tipc_node(node);
#line 825
  n = (int )tmp;
#line 826
  w = n / 32;
#line 827
  mask = (u32 )(1 << n % 32);
  }
#line 829
  if ((nm_ptr->map[w] & mask) != 0U) {
#line 830
    nm_ptr->map[w] = nm_ptr->map[w] & ~ mask;
#line 831
    nm_ptr->count = nm_ptr->count - 1U;
  } else {

  }
#line 833
  return;
}
}
#line 841 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
static void tipc_nmap_diff(struct tipc_node_map *nm_a , struct tipc_node_map *nm_b ,
                           struct tipc_node_map *nm_diff ) 
{ 
  int stop ;
  int w ;
  int b ;
  u32 map ;

  {
  {
#line 845
  stop = 128;
#line 850
  memset((void *)nm_diff, 0, 516UL);
#line 851
  w = 0;
  }
#line 851
  goto ldv_41057;
  ldv_41056: 
#line 852
  map = nm_a->map[w] & ~ nm_b->map[w];
#line 853
  nm_diff->map[w] = map;
#line 854
  if (map != 0U) {
#line 855
    b = 0;
#line 855
    goto ldv_41054;
    ldv_41053: ;
#line 856
    if ((map & (u32 )(1 << b)) != 0U) {
#line 857
      nm_diff->count = nm_diff->count + 1U;
    } else {

    }
#line 855
    b = b + 1;
    ldv_41054: ;
#line 855
    if (b <= 31) {
#line 857
      goto ldv_41053;
    } else {

    }

  } else {

  }
#line 851
  w = w + 1;
  ldv_41057: ;
#line 851
  if (w < stop) {
#line 853
    goto ldv_41056;
  } else {

  }

#line 858
  return;
}
}
#line 866 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_port_list_add(struct tipc_port_list *pl_ptr , u32 port ) 
{ 
  struct tipc_port_list *item ;
  int i ;
  int item_sz ;
  int cnt ;
  void *tmp ;

  {
#line 868
  item = pl_ptr;
#line 870
  item_sz = 32;
#line 871
  cnt = pl_ptr->count;
  ldv_41070: ;
#line 874
  if (cnt <= 31) {
#line 875
    item_sz = cnt;
  } else {

  }
#line 876
  i = 0;
#line 876
  goto ldv_41068;
  ldv_41067: ;
#line 877
  if (item->ports[i] == port) {
#line 878
    return;
  } else {

  }
#line 876
  i = i + 1;
  ldv_41068: ;
#line 876
  if (i < item_sz) {
#line 878
    goto ldv_41067;
  } else {

  }

#line 879
  if (i <= 31) {
#line 880
    item->ports[i] = port;
#line 881
    pl_ptr->count = pl_ptr->count + 1;
#line 882
    return;
  } else {

  }
#line 884
  if ((unsigned long )item->next == (unsigned long )((struct tipc_port_list *)0)) {
    {
#line 885
    tmp = kmalloc(144UL, 32U);
#line 885
    item->next = (struct tipc_port_list *)tmp;
    }
#line 886
    if ((unsigned long )item->next == (unsigned long )((struct tipc_port_list *)0)) {
      {
#line 887
      printk("\ftipc: Incomplete multicast delivery, no memory\n");
      }
#line 888
      return;
    } else {

    }
#line 890
    (item->next)->next = (struct tipc_port_list *)0;
  } else {

  }
#line 873
  cnt = cnt - item_sz;
#line 873
  item = item->next;
#line 892
  goto ldv_41070;
}
}
#line 899 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bcast.c"
void tipc_port_list_free(struct tipc_port_list *pl_ptr ) 
{ 
  struct tipc_port_list *item ;
  struct tipc_port_list *next ;

  {
#line 904
  item = pl_ptr->next;
#line 904
  goto ldv_41077;
  ldv_41076: 
  {
#line 905
  next = item->next;
#line 906
  kfree((void const   *)item);
#line 904
  item = next;
  }
  ldv_41077: ;
#line 904
  if ((unsigned long )item != (unsigned long )((struct tipc_port_list *)0)) {
#line 906
    goto ldv_41076;
  } else {

  }

#line 911
  return;
}
}
#line 580 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bcast.c.aux"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 583
  tmp = ldv_kmalloc(size, flags);
  }
#line 583
  return (tmp);
}
}
#line 773 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bcast.c.aux"
__inline static void ldv_spin_lock_bh_58(spinlock_t *lock ) 
{ 


  {
  {
#line 776
  ldv_spin_lock_lock_of_tipc_node();
#line 778
  spin_lock_bh(lock);
  }
#line 779
  return;
}
}
#line 782 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bcast.c.aux"
__inline static void ldv_spin_unlock_bh_59(spinlock_t *lock ) 
{ 


  {
  {
#line 785
  ldv_spin_unlock_lock_of_tipc_node();
#line 787
  spin_unlock_bh(lock);
  }
#line 788
  return;
}
}
#line 800 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bcast.c.aux"
__inline static void ldv_spin_lock_bh_61(spinlock_t *lock ) 
{ 


  {
  {
#line 803
  ldv_spin_lock_bc_lock();
#line 805
  spin_lock_bh(lock);
  }
#line 806
  return;
}
}
#line 809 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bcast.c.aux"
__inline static void ldv_spin_unlock_bh_62(spinlock_t *lock ) 
{ 


  {
  {
#line 812
  ldv_spin_unlock_bc_lock();
#line 814
  spin_unlock_bh(lock);
  }
#line 815
  return;
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/string.h"
extern char *strncpy(char * , char const   * , __kernel_size_t  ) ;
#line 53
extern char *strchr(char const   * , int  ) ;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bearer.c.aux"
void ldv_spin_lock_lock_of_tipc_bearer(void) ;
#line 134
void ldv_spin_unlock_lock_of_tipc_bearer(void) ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rwlock_api_smp.h"
extern void _raw_read_lock_bh(rwlock_t * ) ;
#line 21
extern void _raw_write_lock_bh(rwlock_t * ) ;
#line 32
extern void _raw_read_unlock_bh(rwlock_t * ) ;
#line 33
extern void _raw_write_unlock_bh(rwlock_t * ) ;
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_60(spinlock_t *lock ) ;
#line 376
__inline static void ldv_spin_lock_bh_60(spinlock_t *lock ) ;
#line 380
__inline static void ldv_spin_lock_bh_60(spinlock_t *lock ) ;
#line 384
__inline static void ldv_spin_lock_bh_58(spinlock_t *lock ) ;
#line 388
__inline static void ldv_spin_lock_bh_60(spinlock_t *lock ) ;
#line 420
__inline static void ldv_spin_unlock_bh_61(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_unlock_bh_61(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_59(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_unlock_bh_61(spinlock_t *lock ) ;
#line 436
__inline static void ldv_spin_unlock_bh_61(spinlock_t *lock ) ;
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
struct tipc_bearer tipc_bearers[2U]  ;
#line 162
int tipc_register_media(struct tipc_media *m_ptr ) ;
#line 166
int tipc_block_bearer(char const   *name ) ;
#line 167
void tipc_continue(struct tipc_bearer *b ) ;
#line 169
int tipc_enable_bearer(char const   *name , u32 disc_domain , u32 priority ) ;
#line 170
int tipc_disable_bearer(char const   *name ) ;
#line 188
void tipc_media_addr_printf(char *buf , int len , struct tipc_media_addr *a ) ;
#line 189
struct sk_buff *tipc_media_get_names(void) ;
#line 191
struct sk_buff *tipc_bearer_get_names(void) ;
#line 192
void tipc_bearer_add_dest(struct tipc_bearer *b_ptr , u32 dest ) ;
#line 193
void tipc_bearer_remove_dest(struct tipc_bearer *b_ptr , u32 dest ) ;
#line 194
struct tipc_bearer *tipc_bearer_find(char const   *name ) ;
#line 195
struct tipc_bearer *tipc_bearer_find_interface(char const   *if_name ) ;
#line 196
struct tipc_media *tipc_media_find(char const   *name ) ;
#line 198
void tipc_bearer_stop(void) ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.h"
__inline static int in_own_cluster_exact(u32 addr ) 
{ 


  {
#line 55
  return ((addr ^ tipc_own_addr) >> 12 == 0U);
}
}
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.h"
rwlock_t tipc_net_lock ;
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
void tipc_link_delete(struct tipc_link *l_ptr ) ;
#line 223
void tipc_link_reset(struct tipc_link *l_ptr ) ;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.h"
struct sk_buff *tipc_cfg_reply_alloc(int payload_size ) ;
#line 45
int tipc_cfg_append_tlv(struct sk_buff *buf , int tlv_type , void *tlv_data , int tlv_data_size ) ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.h"
int tipc_disc_create(struct tipc_bearer *b_ptr , struct tipc_media_addr *dest , u32 dest_domain ) ;
#line 44
void tipc_disc_delete(struct tipc_link_req *req ) ;
#line 45
void tipc_disc_add_dest(struct tipc_link_req *req ) ;
#line 46
void tipc_disc_remove_dest(struct tipc_link_req *req ) ;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
static struct tipc_media *media_list[2U]  ;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
static u32 media_count  ;
#line 49
static void bearer_disable(struct tipc_bearer *b_ptr ) ;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
struct tipc_media *tipc_media_find(char const   *name ) 
{ 
  u32 i ;
  int tmp ;

  {
#line 58
  i = 0U;
#line 58
  goto ldv_40565;
  ldv_40564: 
  {
#line 59
  tmp = strcmp((char const   *)(& (media_list[i])->name), name);
  }
#line 59
  if (tmp == 0) {
#line 60
    return (media_list[i]);
  } else {

  }
#line 58
  i = i + 1U;
  ldv_40565: ;
#line 58
  if (i < media_count) {
#line 60
    goto ldv_40564;
  } else {

  }

#line 62
  return ((struct tipc_media *)0);
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
static struct tipc_media *media_find_id(u8 type ) 
{ 
  u32 i ;

  {
#line 72
  i = 0U;
#line 72
  goto ldv_40572;
  ldv_40571: ;
#line 73
  if ((media_list[i])->type_id == (u32 )type) {
#line 74
    return (media_list[i]);
  } else {

  }
#line 72
  i = i + 1U;
  ldv_40572: ;
#line 72
  if (i < media_count) {
#line 74
    goto ldv_40571;
  } else {

  }

#line 76
  return ((struct tipc_media *)0);
}
}
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
int tipc_register_media(struct tipc_media *m_ptr ) 
{ 
  int res ;
  size_t tmp ;
  struct tipc_media *tmp___0 ;
  struct tipc_media *tmp___1 ;

  {
  {
#line 86
  res = -22;
#line 88
  _raw_write_lock_bh(& tipc_net_lock);
#line 90
  tmp = strlen((char const   *)(& m_ptr->name));
  }
#line 90
  if (tmp + 1UL > 16UL) {
#line 91
    goto exit;
  } else {

  }
#line 92
  if (m_ptr->priority > 31U) {
#line 93
    goto exit;
  } else {

  }
#line 94
  if (m_ptr->tolerance - 50U > 29950U) {
#line 96
    goto exit;
  } else {

  }
#line 97
  if (media_count > 1U) {
#line 98
    goto exit;
  } else {

  }
  {
#line 99
  tmp___0 = tipc_media_find((char const   *)(& m_ptr->name));
  }
#line 99
  if ((unsigned long )tmp___0 != (unsigned long )((struct tipc_media *)0)) {
#line 100
    goto exit;
  } else {
    {
#line 99
    tmp___1 = media_find_id((int )((u8 )m_ptr->type_id));
    }
#line 99
    if ((unsigned long )tmp___1 != (unsigned long )((struct tipc_media *)0)) {
#line 100
      goto exit;
    } else {

    }
  }
#line 102
  media_list[media_count] = m_ptr;
#line 103
  media_count = media_count + 1U;
#line 104
  res = 0;
  exit: 
  {
#line 106
  _raw_write_unlock_bh(& tipc_net_lock);
  }
#line 107
  if (res != 0) {
    {
#line 108
    printk("\ftipc: Media <%s> registration error\n", (char *)(& m_ptr->name));
    }
  } else {

  }
#line 109
  return (res);
}
}
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
void tipc_media_addr_printf(char *buf , int len , struct tipc_media_addr *a ) 
{ 
  char addr_str[60U] ;
  struct tipc_media *m_ptr ;
  int ret ;
  u32 i ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 121
  m_ptr = media_find_id((int )a->media_id);
  }
#line 123
  if ((unsigned long )m_ptr != (unsigned long )((struct tipc_media *)0)) {
    {
#line 123
    tmp___0 = (*(m_ptr->addr2str))(a, (char *)(& addr_str), 60);
    }
#line 123
    if (tmp___0 == 0) {
      {
#line 124
      ret = tipc_snprintf(buf, len, "%s(%s)", (char *)(& m_ptr->name), (char *)(& addr_str));
      }
    } else {
#line 123
      goto _L;
    }
  } else {
    _L: /* CIL Label */ 
    {
#line 128
    ret = tipc_snprintf(buf, len, "UNKNOWN(%u)", (int )a->media_id);
#line 129
    i = 0U;
    }
#line 129
    goto ldv_40589;
    ldv_40588: 
    {
#line 130
    tmp = tipc_snprintf(buf + - ((unsigned long )ret), len + ret, "-%02x", (int )a->value[i]);
#line 130
    ret = ret + tmp;
#line 129
    i = i + 1U;
    }
    ldv_40589: ;
#line 129
    if (i <= 19U) {
#line 131
      goto ldv_40588;
    } else {

    }

  }
#line 137
  return;
}
}
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
struct sk_buff *tipc_media_get_names(void) 
{ 
  struct sk_buff *buf ;
  int i ;
  size_t tmp ;

  {
  {
#line 143
  buf = tipc_cfg_reply_alloc(40);
  }
#line 144
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 145
    return ((struct sk_buff *)0);
  } else {

  }
  {
#line 147
  _raw_read_lock_bh(& tipc_net_lock);
#line 148
  i = 0;
  }
#line 148
  goto ldv_40597;
  ldv_40596: 
  {
#line 149
  tmp = strlen((char const   *)(& (media_list[i])->name));
#line 149
  tipc_cfg_append_tlv(buf, 18, (void *)(& (media_list[i])->name), (int )((unsigned int )tmp + 1U));
#line 148
  i = i + 1;
  }
  ldv_40597: ;
#line 148
  if ((u32 )i < media_count) {
#line 150
    goto ldv_40596;
  } else {

  }
  {
#line 153
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 154
  return (buf);
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
static int bearer_name_validate(char const   *name , struct tipc_bearer_names *name_parts ) 
{ 
  char name_copy[32U] ;
  char *media_name ;
  char *if_name ;
  u32 media_len ;
  u32 if_len ;
  char *tmp ;
  size_t tmp___0 ;

  {
  {
#line 174
  name_copy[31] = 0;
#line 176
  strncpy((char *)(& name_copy), name, 32UL);
  }
#line 177
  if ((int )((signed char )name_copy[31]) != 0) {
#line 178
    return (0);
  } else {

  }
  {
#line 181
  media_name = (char *)(& name_copy);
#line 182
  if_name = strchr((char const   *)media_name, 58);
  }
#line 183
  if ((unsigned long )if_name == (unsigned long )((char *)0)) {
#line 184
    return (0);
  } else {

  }
  {
#line 185
  tmp = if_name;
#line 185
  if_name = if_name + 1;
#line 185
  *tmp = 0;
#line 186
  media_len = (u32 )((long )if_name) - (u32 )((long )media_name);
#line 187
  tmp___0 = strlen((char const   *)if_name);
#line 187
  if_len = (u32 )tmp___0 + 1U;
  }
#line 190
  if ((media_len - 2U > 14U || if_len <= 1U) || if_len > 16U) {
#line 192
    return (0);
  } else {

  }
#line 195
  if ((unsigned long )name_parts != (unsigned long )((struct tipc_bearer_names *)0)) {
    {
#line 196
    strcpy((char *)(& name_parts->media_name), (char const   *)media_name);
#line 197
    strcpy((char *)(& name_parts->if_name), (char const   *)if_name);
    }
  } else {

  }
#line 199
  return (1);
}
}
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
struct tipc_bearer *tipc_bearer_find(char const   *name ) 
{ 
  struct tipc_bearer *b_ptr ;
  u32 i ;
  int tmp ;

  {
#line 210
  i = 0U;
#line 210
  b_ptr = (struct tipc_bearer *)(& tipc_bearers);
#line 210
  goto ldv_40614;
  ldv_40613: ;
#line 211
  if (b_ptr->active != 0) {
    {
#line 211
    tmp = strcmp((char const   *)(& b_ptr->name), name);
    }
#line 211
    if (tmp == 0) {
#line 212
      return (b_ptr);
    } else {

    }
  } else {

  }
#line 210
  i = i + 1U;
#line 210
  b_ptr = b_ptr + 1;
  ldv_40614: ;
#line 210
  if (i <= 1U) {
#line 212
    goto ldv_40613;
  } else {

  }

#line 214
  return ((struct tipc_bearer *)0);
}
}
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
struct tipc_bearer *tipc_bearer_find_interface(char const   *if_name ) 
{ 
  struct tipc_bearer *b_ptr ;
  char *b_if_name ;
  u32 i ;
  char *tmp ;
  int tmp___0 ;

  {
#line 226
  i = 0U;
#line 226
  b_ptr = (struct tipc_bearer *)(& tipc_bearers);
#line 226
  goto ldv_40624;
  ldv_40623: ;
#line 227
  if (b_ptr->active == 0) {
#line 228
    goto ldv_40622;
  } else {

  }
  {
#line 229
  tmp = strchr((char const   *)(& b_ptr->name), 58);
#line 229
  b_if_name = tmp + 1UL;
#line 230
  tmp___0 = strcmp((char const   *)b_if_name, if_name);
  }
#line 230
  if (tmp___0 == 0) {
#line 231
    return (b_ptr);
  } else {

  }
  ldv_40622: 
#line 226
  i = i + 1U;
#line 226
  b_ptr = b_ptr + 1;
  ldv_40624: ;
#line 226
  if (i <= 1U) {
#line 228
    goto ldv_40623;
  } else {

  }

#line 233
  return ((struct tipc_bearer *)0);
}
}
#line 239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
struct sk_buff *tipc_bearer_get_names(void) 
{ 
  struct sk_buff *buf ;
  struct tipc_bearer *b_ptr ;
  int i ;
  int j ;
  size_t tmp ;

  {
  {
#line 245
  buf = tipc_cfg_reply_alloc(72);
  }
#line 246
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 247
    return ((struct sk_buff *)0);
  } else {

  }
  {
#line 249
  _raw_read_lock_bh(& tipc_net_lock);
#line 250
  i = 0;
  }
#line 250
  goto ldv_40637;
  ldv_40636: 
#line 251
  j = 0;
#line 251
  goto ldv_40634;
  ldv_40633: 
#line 252
  b_ptr = (struct tipc_bearer *)(& tipc_bearers) + (unsigned long )j;
#line 253
  if (b_ptr->active != 0 && (unsigned long )b_ptr->media == (unsigned long )media_list[i]) {
    {
#line 254
    tmp = strlen((char const   *)(& b_ptr->name));
#line 254
    tipc_cfg_append_tlv(buf, 19, (void *)(& b_ptr->name), (int )((unsigned int )tmp + 1U));
    }
  } else {

  }
#line 251
  j = j + 1;
  ldv_40634: ;
#line 251
  if (j <= 1) {
#line 253
    goto ldv_40633;
  } else {

  }
#line 250
  i = i + 1;
  ldv_40637: ;
#line 250
  if ((u32 )i < media_count) {
#line 252
    goto ldv_40636;
  } else {

  }
  {
#line 260
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 261
  return (buf);
}
}
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
void tipc_bearer_add_dest(struct tipc_bearer *b_ptr , u32 dest ) 
{ 


  {
  {
#line 266
  tipc_nmap_add(& b_ptr->nodes, dest);
#line 267
  tipc_bcbearer_sort();
#line 268
  tipc_disc_add_dest(b_ptr->link_req);
  }
#line 269
  return;
}
}
#line 271 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
void tipc_bearer_remove_dest(struct tipc_bearer *b_ptr , u32 dest ) 
{ 


  {
  {
#line 273
  tipc_nmap_remove(& b_ptr->nodes, dest);
#line 274
  tipc_bcbearer_sort();
#line 275
  tipc_disc_remove_dest(b_ptr->link_req);
  }
#line 276
  return;
}
}
#line 282 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
void tipc_continue(struct tipc_bearer *b ) 
{ 


  {
  {
#line 284
  ldv_spin_lock_bh_60(& b->lock);
#line 285
  b->blocked = 0;
#line 286
  ldv_spin_unlock_bh_61(& b->lock);
  }
#line 287
  return;
}
}
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
int tipc_bearer_blocked(struct tipc_bearer *b ) 
{ 
  int res ;

  {
  {
#line 296
  ldv_spin_lock_bh_60(& b->lock);
#line 297
  res = b->blocked;
#line 298
  ldv_spin_unlock_bh_61(& b->lock);
  }
#line 300
  return (res);
}
}
#line 306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
int tipc_enable_bearer(char const   *name , u32 disc_domain , u32 priority ) 
{ 
  struct tipc_bearer *b_ptr ;
  struct tipc_media *m_ptr ;
  struct tipc_bearer_names b_names ;
  char addr_string[16U] ;
  u32 bearer_id ;
  u32 with_this_prio ;
  u32 i ;
  int res ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  struct lock_class_key __key ;
  char *tmp___6 ;

  {
#line 315
  res = -22;
#line 317
  if (tipc_own_addr == 0U) {
    {
#line 318
    printk("\ftipc: Bearer <%s> rejected, not supported in standalone mode\n", name);
    }
#line 320
    return (-92);
  } else {

  }
  {
#line 322
  tmp = bearer_name_validate(name, & b_names);
  }
#line 322
  if (tmp == 0) {
    {
#line 323
    printk("\ftipc: Bearer <%s> rejected, illegal name\n", name);
    }
#line 324
    return (-22);
  } else {

  }
  {
#line 326
  tmp___2 = tipc_addr_domain_valid(disc_domain);
  }
#line 326
  if (tmp___2 != 0 && disc_domain != tipc_own_addr) {
    {
#line 328
    tmp___1 = tipc_in_scope(disc_domain, tipc_own_addr);
    }
#line 328
    if (tmp___1 != 0) {
#line 329
      disc_domain = tipc_own_addr & 4294963200U;
#line 330
      res = 0;
    } else {
      {
#line 331
      tmp___0 = in_own_cluster_exact(disc_domain);
      }
#line 331
      if (tmp___0 != 0) {
#line 332
        res = 0;
      } else {

      }
    }
  } else {

  }
#line 334
  if (res != 0) {
    {
#line 335
    printk("\ftipc: Bearer <%s> rejected, illegal discovery domain\n", name);
    }
#line 337
    return (-22);
  } else {

  }
#line 339
  if (priority > 32U) {
    {
#line 341
    printk("\ftipc: Bearer <%s> rejected, illegal priority\n", name);
    }
#line 342
    return (-22);
  } else {

  }
  {
#line 345
  _raw_write_lock_bh(& tipc_net_lock);
#line 347
  m_ptr = tipc_media_find((char const   *)(& b_names.media_name));
  }
#line 348
  if ((unsigned long )m_ptr == (unsigned long )((struct tipc_media *)0)) {
    {
#line 349
    printk("\ftipc: Bearer <%s> rejected, media <%s> not registered\n", name, (char *)(& b_names.media_name));
    }
#line 351
    goto exit;
  } else {

  }
#line 354
  if (priority == 32U) {
#line 355
    priority = m_ptr->priority;
  } else {

  }
  restart: 
#line 358
  bearer_id = 2U;
#line 359
  with_this_prio = 1U;
#line 360
  i = 2U;
#line 360
  goto ldv_40669;
  ldv_40670: ;
#line 361
  if (tipc_bearers[i].active == 0) {
#line 362
    bearer_id = i;
#line 363
    goto ldv_40669;
  } else {

  }
  {
#line 365
  tmp___3 = strcmp(name, (char const   *)(& tipc_bearers[i].name));
  }
#line 365
  if (tmp___3 == 0) {
    {
#line 366
    printk("\ftipc: Bearer <%s> rejected, already enabled\n", name);
    }
#line 368
    goto exit;
  } else {

  }
#line 370
  if (tipc_bearers[i].priority == priority) {
#line 370
    with_this_prio = with_this_prio + 1U;
#line 370
    if (with_this_prio > 2U) {
#line 372
      tmp___4 = priority;
#line 372
      priority = priority - 1U;
#line 372
      if (tmp___4 == 0U) {
        {
#line 373
        printk("\ftipc: Bearer <%s> rejected, duplicate priority\n", name);
        }
#line 375
        goto exit;
      } else {

      }
      {
#line 377
      printk("\ftipc: Bearer <%s> priority adjustment required %u->%u\n", name, priority + 1U,
             priority);
      }
#line 379
      goto restart;
    } else {

    }
  } else {

  }
  ldv_40669: 
#line 360
  tmp___5 = i;
#line 360
  i = i - 1U;
#line 360
  if (tmp___5 != 0U) {
#line 362
    goto ldv_40670;
  } else {

  }

#line 382
  if (bearer_id > 1U) {
    {
#line 383
    printk("\ftipc: Bearer <%s> rejected, bearer limit reached (%u)\n", name, 2);
    }
#line 385
    goto exit;
  } else {

  }
  {
#line 388
  b_ptr = (struct tipc_bearer *)(& tipc_bearers) + (unsigned long )bearer_id;
#line 389
  strcpy((char *)(& b_ptr->name), name);
#line 390
  res = (*(m_ptr->enable_bearer))(b_ptr);
  }
#line 391
  if (res != 0) {
    {
#line 392
    printk("\ftipc: Bearer <%s> rejected, enable failure (%d)\n", name, - res);
    }
#line 394
    goto exit;
  } else {

  }
  {
#line 397
  b_ptr->identity = bearer_id;
#line 398
  b_ptr->media = m_ptr;
#line 399
  b_ptr->tolerance = m_ptr->tolerance;
#line 400
  b_ptr->window = m_ptr->window;
#line 401
  b_ptr->net_plane = (char )((unsigned int )((unsigned char )bearer_id) + 65U);
#line 402
  b_ptr->active = 1;
#line 403
  b_ptr->priority = priority;
#line 404
  INIT_LIST_HEAD(& b_ptr->links);
#line 405
  spinlock_check(& b_ptr->lock);
#line 405
  __raw_spin_lock_init(& b_ptr->lock.__annonCompField19.rlock, "&(&b_ptr->lock)->rlock",
                       & __key);
#line 407
  res = tipc_disc_create(b_ptr, & b_ptr->bcast_addr, disc_domain);
  }
#line 408
  if (res != 0) {
    {
#line 409
    bearer_disable(b_ptr);
#line 410
    printk("\ftipc: Bearer <%s> rejected, discovery object creation failed\n", name);
    }
#line 412
    goto exit;
  } else {

  }
  {
#line 414
  tmp___6 = tipc_addr_string_fill((char *)(& addr_string), disc_domain);
#line 414
  printk("\016tipc: Enabled bearer <%s>, discovery domain %s, priority %u\n", name,
         tmp___6, priority);
  }
  exit: 
  {
#line 418
  _raw_write_unlock_bh(& tipc_net_lock);
  }
#line 419
  return (res);
}
}
#line 425 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
int tipc_block_bearer(char const   *name ) 
{ 
  struct tipc_bearer *b_ptr ;
  struct tipc_link *l_ptr ;
  struct tipc_link *temp_l_ptr ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct tipc_node *n_ptr ;
  struct list_head  const  *__mptr___1 ;

  {
  {
#line 427
  b_ptr = (struct tipc_bearer *)0;
#line 431
  _raw_read_lock_bh(& tipc_net_lock);
#line 432
  b_ptr = tipc_bearer_find(name);
  }
#line 433
  if ((unsigned long )b_ptr == (unsigned long )((struct tipc_bearer *)0)) {
    {
#line 434
    printk("\ftipc: Attempt to block unknown bearer <%s>\n", name);
#line 435
    _raw_read_unlock_bh(& tipc_net_lock);
    }
#line 436
    return (-22);
  } else {

  }
  {
#line 439
  printk("\016tipc: Blocking bearer <%s>\n", name);
#line 440
  ldv_spin_lock_bh_60(& b_ptr->lock);
#line 441
  b_ptr->blocked = 1;
#line 442
  __mptr = (struct list_head  const  *)b_ptr->links.next;
#line 442
  l_ptr = (struct tipc_link *)((char *)__mptr + 0xffffffffffffff20UL);
#line 442
  __mptr___0 = (struct list_head  const  *)l_ptr->link_list.next;
#line 442
  temp_l_ptr = (struct tipc_link *)((char *)__mptr___0 + 0xffffffffffffff20UL);
  }
#line 442
  goto ldv_40687;
  ldv_40686: 
  {
#line 443
  n_ptr = l_ptr->owner;
#line 445
  ldv_spin_lock_bh_58(& n_ptr->lock);
#line 446
  tipc_link_reset(l_ptr);
#line 447
  ldv_spin_unlock_bh_59(& n_ptr->lock);
#line 442
  l_ptr = temp_l_ptr;
#line 442
  __mptr___1 = (struct list_head  const  *)temp_l_ptr->link_list.next;
#line 442
  temp_l_ptr = (struct tipc_link *)((char *)__mptr___1 + 0xffffffffffffff20UL);
  }
  ldv_40687: ;
#line 442
  if ((unsigned long )(& l_ptr->link_list) != (unsigned long )(& b_ptr->links)) {
#line 444
    goto ldv_40686;
  } else {

  }
  {
#line 449
  ldv_spin_unlock_bh_61(& b_ptr->lock);
#line 450
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 451
  return (0);
}
}
#line 459 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
static void bearer_disable(struct tipc_bearer *b_ptr ) 
{ 
  struct tipc_link *l_ptr ;
  struct tipc_link *temp_l_ptr ;
  struct tipc_link_req *temp_req ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
  {
#line 465
  printk("\016tipc: Disabling bearer <%s>\n", (char *)(& b_ptr->name));
#line 466
  ldv_spin_lock_bh_60(& b_ptr->lock);
#line 467
  b_ptr->blocked = 1;
#line 468
  (*((b_ptr->media)->disable_bearer))(b_ptr);
#line 469
  __mptr = (struct list_head  const  *)b_ptr->links.next;
#line 469
  l_ptr = (struct tipc_link *)((char *)__mptr + 0xffffffffffffff20UL);
#line 469
  __mptr___0 = (struct list_head  const  *)l_ptr->link_list.next;
#line 469
  temp_l_ptr = (struct tipc_link *)((char *)__mptr___0 + 0xffffffffffffff20UL);
  }
#line 469
  goto ldv_40702;
  ldv_40701: 
  {
#line 470
  tipc_link_delete(l_ptr);
#line 469
  l_ptr = temp_l_ptr;
#line 469
  __mptr___1 = (struct list_head  const  *)temp_l_ptr->link_list.next;
#line 469
  temp_l_ptr = (struct tipc_link *)((char *)__mptr___1 + 0xffffffffffffff20UL);
  }
  ldv_40702: ;
#line 469
  if ((unsigned long )(& l_ptr->link_list) != (unsigned long )(& b_ptr->links)) {
#line 471
    goto ldv_40701;
  } else {

  }
  {
#line 472
  temp_req = b_ptr->link_req;
#line 473
  b_ptr->link_req = (struct tipc_link_req *)0;
#line 474
  ldv_spin_unlock_bh_61(& b_ptr->lock);
  }
#line 476
  if ((unsigned long )temp_req != (unsigned long )((struct tipc_link_req *)0)) {
    {
#line 477
    tipc_disc_delete(temp_req);
    }
  } else {

  }
  {
#line 479
  memset((void *)b_ptr, 0, 744UL);
  }
#line 480
  return;
}
}
#line 482 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
int tipc_disable_bearer(char const   *name ) 
{ 
  struct tipc_bearer *b_ptr ;
  int res ;

  {
  {
#line 487
  _raw_write_lock_bh(& tipc_net_lock);
#line 488
  b_ptr = tipc_bearer_find(name);
  }
#line 489
  if ((unsigned long )b_ptr == (unsigned long )((struct tipc_bearer *)0)) {
    {
#line 490
    printk("\ftipc: Attempt to disable unknown bearer <%s>\n", name);
#line 491
    res = -22;
    }
  } else {
    {
#line 493
    bearer_disable(b_ptr);
#line 494
    res = 0;
    }
  }
  {
#line 496
  _raw_write_unlock_bh(& tipc_net_lock);
  }
#line 497
  return (res);
}
}
#line 502 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.c"
void tipc_bearer_stop(void) 
{ 
  u32 i ;

  {
#line 506
  i = 0U;
#line 506
  goto ldv_40714;
  ldv_40713: ;
#line 507
  if (tipc_bearers[i].active != 0) {
    {
#line 508
    bearer_disable((struct tipc_bearer *)(& tipc_bearers) + (unsigned long )i);
    }
  } else {

  }
#line 506
  i = i + 1U;
  ldv_40714: ;
#line 506
  if (i <= 1U) {
#line 508
    goto ldv_40713;
  } else {

  }
#line 510
  media_count = 0U;
#line 511
  return;
}
}
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bearer.c.aux"
__inline static void ldv_spin_lock_bh_60(spinlock_t *lock ) 
{ 


  {
  {
#line 794
  ldv_spin_lock_lock_of_tipc_bearer();
#line 796
  spin_lock_bh(lock);
  }
#line 797
  return;
}
}
#line 800 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_bearer.c.aux"
__inline static void ldv_spin_unlock_bh_61(spinlock_t *lock ) 
{ 


  {
  {
#line 803
  ldv_spin_unlock_lock_of_tipc_bearer();
#line 805
  spin_unlock_bh(lock);
  }
#line 806
  return;
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 53
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/string_64.h"
extern void *memcpy(void * , void const   * , size_t  ) ;
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/mutex.h"
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 174
extern void mutex_unlock(struct mutex * ) ;
#line 639 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
extern struct sk_buff *__alloc_skb(unsigned int  , gfp_t  , int  , int  ) ;
#line 642 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 645
  tmp = __alloc_skb(size, priority, 0, -1);
  }
#line 645
  return (tmp);
}
}
#line 1291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff  const  *skb ) 
{ 


  {
#line 1293
  return ((unsigned int )skb->data_len != 0U);
}
}
#line 1375 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff  const  *skb ) 
{ 


  {
#line 1377
  return ((unsigned char *)(skb->head + (unsigned long )skb->tail));
}
}
#line 1412
extern unsigned char *skb_put(struct sk_buff * , unsigned int  ) ;
#line 1422
extern unsigned char *skb_push(struct sk_buff * , unsigned int  ) ;
#line 1485 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff  const  *skb ) 
{ 
  bool tmp ;

  {
  {
#line 1487
  tmp = skb_is_nonlinear(skb);
  }
#line 1487
  return ((int )tmp ? 0 : (int )((unsigned int )skb->end - (unsigned int )skb->tail));
}
}
#line 1513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb , int len ) 
{ 


  {
#line 1515
  skb->data = skb->data + (unsigned long )len;
#line 1516
  skb->tail = skb->tail + (sk_buff_data_t )len;
#line 1517
  return;
}
}
#line 262 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
__inline static int TLV_OK(void const   *tlv , __u16 space ) 
{ 
  __u16 tmp ;
  int tmp___0 ;

  {
#line 273
  if ((unsigned int )space > 3U) {
    {
#line 273
    tmp = __fswab16((int )((struct tlv_desc *)tlv)->tlv_len);
    }
#line 273
    if ((int )tmp <= (int )space) {
#line 273
      tmp___0 = 1;
    } else {
#line 273
      tmp___0 = 0;
    }
  } else {
#line 273
    tmp___0 = 0;
  }
#line 273
  return (tmp___0);
}
}
#line 277 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
__inline static int TLV_CHECK(void const   *tlv , __u16 space , __u16 exp_type ) 
{ 
  int tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;

  {
  {
#line 279
  tmp = TLV_OK(tlv, (int )space);
  }
#line 279
  if (tmp != 0) {
    {
#line 279
    tmp___0 = __fswab16((int )((struct tlv_desc *)tlv)->tlv_type);
    }
#line 279
    if ((int )tmp___0 == (int )exp_type) {
#line 279
      tmp___1 = 1;
    } else {
#line 279
      tmp___1 = 0;
    }
  } else {
#line 279
    tmp___1 = 0;
  }
#line 279
  return (tmp___1);
}
}
#line 283 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc_config.h"
__inline static int TLV_SET(void *tlv , __u16 type , void *data , __u16 len ) 
{ 
  struct tlv_desc *tlv_ptr ;
  int tlv_len ;
  __u16 tmp ;
  __u16 tmp___0 ;

  {
  {
#line 288
  tlv_len = (int )((unsigned int )len + 4U);
#line 289
  tlv_ptr = (struct tlv_desc *)tlv;
#line 290
  tmp = __fswab16((int )type);
#line 290
  tlv_ptr->tlv_type = tmp;
#line 291
  tmp___0 = __fswab16((int )((__u16 )tlv_len));
#line 291
  tlv_ptr->tlv_len = tmp___0;
  }
#line 292
  if ((unsigned int )len != 0U && (unsigned long )data != (unsigned long )((void *)0)) {
    {
#line 293
    memcpy((void *)((char *)tlv_ptr + 4UL), (void const   *)data, (size_t )tlv_len);
    }
  } else {

  }
#line 294
  return ((int )((unsigned int )len + 7U) & -4);
}
}
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
int tipc_max_ports ;
#line 82
int tipc_remote_management ;
#line 93
int tipc_core_start_net(unsigned long addr ) ;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.h"
__inline static int in_own_node(u32 addr ) 
{ 


  {
#line 63
  return (addr == tipc_own_addr || addr == 0U);
}
}
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
struct sk_buff *tipc_port_get_ports(void) ;
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.h"
struct sk_buff *tipc_nametbl_get(void const   *req_tlv_area___0 , int req_tlv_space___0 ) ;
#line 88
u32 tipc_nametbl_translate(u32 type , u32 instance , u32 *destnode ) ;
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
struct sk_buff *tipc_node_get_links(void const   *req_tlv_area___0 , int req_tlv_space___0 ) ;
#line 119
struct sk_buff *tipc_node_get_nodes(void const   *req_tlv_area___0 , int req_tlv_space___0 ) ;
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
struct sk_buff *tipc_link_cmd_config(void const   *req_tlv_area___0 , int req_tlv_space___0 ,
                                     u16 cmd ) ;
#line 221
struct sk_buff *tipc_link_cmd_show_stats(void const   *req_tlv_area___0 , int req_tlv_space___0 ) ;
#line 222
struct sk_buff *tipc_link_cmd_reset_stats(void const   *req_tlv_area___0 , int req_tlv_space___0 ) ;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.h"
struct sk_buff *tipc_cfg_reply_string_type(u16 tlv_type , char *string ) ;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.h"
__inline static struct sk_buff *tipc_cfg_reply_none(void) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 51
  tmp = tipc_cfg_reply_alloc(0);
  }
#line 51
  return (tmp);
}
}
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.h"
__inline static struct sk_buff *tipc_cfg_reply_error_string(char *string ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 56
  tmp = tipc_cfg_reply_string_type(16, string);
  }
#line 56
  return (tmp);
}
}
#line 64
struct sk_buff *tipc_cfg_do_cmd(u32 orig_node , u16 cmd , void const   *request_area ,
                                int request_space , int reply_headroom ) ;
#line 68
int tipc_cfg_init(void) ;
#line 69
void tipc_cfg_reinit(void) ;
#line 70
void tipc_cfg_stop(void) ;
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.h"
int tipc_conn_sendmsg(struct tipc_server *s , int conid , struct sockaddr_tipc *addr ,
                      void *data , size_t len ) ;
#line 90
int tipc_server_start(struct tipc_server *s ) ;
#line 92
void tipc_server_stop(struct tipc_server *s ) ;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct mutex config_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "config_mutex.wait_lock",
                                                           0, 0UL}}}}, {& config_mutex.wait_list,
                                                                        & config_mutex.wait_list},
    0, 0, (void *)(& config_mutex), {0, {0, 0}, "config_mutex", 0, 0UL}};
#line 46
static struct tipc_server cfgsrv ;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static void const   *req_tlv_area  ;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static int req_tlv_space  ;
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static int rep_headroom  ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
struct sk_buff *tipc_cfg_reply_alloc(int payload_size ) 
{ 
  struct sk_buff *buf ;

  {
  {
#line 57
  buf = alloc_skb((unsigned int )(rep_headroom + payload_size), 32U);
  }
#line 58
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 59
    skb_reserve(buf, rep_headroom);
    }
  } else {

  }
#line 60
  return (buf);
}
}
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
int tipc_cfg_append_tlv(struct sk_buff *buf , int tlv_type , void *tlv_data , int tlv_data_size ) 
{ 
  struct tlv_desc *tlv ;
  unsigned char *tmp ;
  int new_tlv_space ;
  int tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;

  {
  {
#line 66
  tmp = skb_tail_pointer((struct sk_buff  const  *)buf);
#line 66
  tlv = (struct tlv_desc *)tmp;
#line 67
  new_tlv_space = (int )((unsigned int )tlv_data_size + 7U) & -4;
#line 69
  tmp___0 = skb_tailroom((struct sk_buff  const  *)buf);
  }
#line 69
  if (tmp___0 < new_tlv_space) {
#line 70
    return (0);
  } else {

  }
  {
#line 71
  skb_put(buf, (unsigned int )new_tlv_space);
#line 72
  tmp___1 = __fswab16((int )((__u16 )tlv_type));
#line 72
  tlv->tlv_type = tmp___1;
#line 73
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )tlv_data_size) + 4U));
#line 73
  tlv->tlv_len = tmp___2;
  }
#line 74
  if (tlv_data_size != 0 && (unsigned long )tlv_data != (unsigned long )((void *)0)) {
    {
#line 75
    memcpy((void *)((char *)tlv + 4UL), (void const   *)tlv_data, (size_t )tlv_data_size);
    }
  } else {

  }
#line 76
  return (1);
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *tipc_cfg_reply_unsigned_type(u16 tlv_type , u32 value ) 
{ 
  struct sk_buff *buf ;
  __be32 value_net ;
  __u32 tmp ;

  {
  {
#line 84
  buf = tipc_cfg_reply_alloc(8);
  }
#line 85
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 86
    tmp = __fswab32(value);
#line 86
    value_net = tmp;
#line 87
    tipc_cfg_append_tlv(buf, (int )tlv_type, (void *)(& value_net), 4);
    }
  } else {

  }
#line 90
  return (buf);
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *tipc_cfg_reply_unsigned(u32 value ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 95
  tmp = tipc_cfg_reply_unsigned_type(2, value);
  }
#line 95
  return (tmp);
}
}
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
struct sk_buff *tipc_cfg_reply_string_type(u16 tlv_type , char *string ) 
{ 
  struct sk_buff *buf ;
  int string_len ;
  size_t tmp ;

  {
  {
#line 101
  tmp = strlen((char const   *)string);
#line 101
  string_len = (int )((unsigned int )tmp + 1U);
#line 103
  buf = tipc_cfg_reply_alloc((int )((unsigned int )string_len + 7U) & -4);
  }
#line 104
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 105
    tipc_cfg_append_tlv(buf, (int )tlv_type, (void *)string, string_len);
    }
  } else {

  }
#line 106
  return (buf);
}
}
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *tipc_show_stats(void) 
{ 
  struct sk_buff *buf ;
  struct tlv_desc *rep_tlv ;
  char *pb ;
  int pb_len ;
  int str_len ;
  u32 value ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  struct sk_buff *tmp___2 ;

  {
  {
#line 118
  tmp___0 = TLV_CHECK(req_tlv_area, (int )((__u16 )req_tlv_space), 2);
  }
#line 118
  if (tmp___0 == 0) {
    {
#line 119
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 119
    return (tmp);
  } else {

  }
  {
#line 121
  tmp___1 = __fswab32(*((u32 *)((char *)req_tlv_area + 4UL)));
#line 121
  value = tmp___1;
  }
#line 122
  if (value != 0U) {
    {
#line 123
    tmp___2 = tipc_cfg_reply_error_string((char *)"unsupported argument");
    }
#line 123
    return (tmp___2);
  } else {

  }
  {
#line 125
  buf = tipc_cfg_reply_alloc(32772);
  }
#line 126
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 127
    return ((struct sk_buff *)0);
  } else {

  }
  {
#line 129
  rep_tlv = (struct tlv_desc *)buf->data;
#line 130
  pb = (char *)rep_tlv + 4UL;
#line 131
  pb_len = 32768;
#line 133
  str_len = tipc_snprintf(pb, pb_len, "TIPC version 2.0.0\n");
#line 134
  str_len = str_len + 1;
#line 135
  skb_put(buf, ((unsigned int )str_len + 7U) & 4294967292U);
#line 136
  TLV_SET((void *)rep_tlv, 5, (void *)0, (int )((__u16 )str_len));
  }
#line 138
  return (buf);
}
}
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *cfg_enable_bearer(void) 
{ 
  struct tipc_bearer_config *args ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  struct sk_buff *tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  struct sk_buff *tmp___5 ;

  {
  {
#line 145
  tmp___0 = TLV_CHECK(req_tlv_area, (int )((__u16 )req_tlv_space), 23);
  }
#line 145
  if (tmp___0 == 0) {
    {
#line 146
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 146
    return (tmp);
  } else {

  }
  {
#line 148
  args = (struct tipc_bearer_config *)((char *)req_tlv_area + 4UL);
#line 149
  tmp___2 = __fswab32(args->priority);
#line 149
  tmp___3 = __fswab32(args->disc_domain);
#line 149
  tmp___4 = tipc_enable_bearer((char const   *)(& args->name), tmp___3, tmp___2);
  }
#line 149
  if (tmp___4 != 0) {
    {
#line 152
    tmp___1 = tipc_cfg_reply_error_string((char *)"unable to enable bearer");
    }
#line 152
    return (tmp___1);
  } else {

  }
  {
#line 154
  tmp___5 = tipc_cfg_reply_none();
  }
#line 154
  return (tmp___5);
}
}
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *cfg_disable_bearer(void) 
{ 
  struct sk_buff *tmp ;
  int tmp___0 ;
  struct sk_buff *tmp___1 ;
  int tmp___2 ;
  struct sk_buff *tmp___3 ;

  {
  {
#line 159
  tmp___0 = TLV_CHECK(req_tlv_area, (int )((__u16 )req_tlv_space), 19);
  }
#line 159
  if (tmp___0 == 0) {
    {
#line 160
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 160
    return (tmp);
  } else {

  }
  {
#line 162
  tmp___2 = tipc_disable_bearer((char const   *)((char *)req_tlv_area + 4UL));
  }
#line 162
  if (tmp___2 != 0) {
    {
#line 163
    tmp___1 = tipc_cfg_reply_error_string((char *)"unable to disable bearer");
    }
#line 163
    return (tmp___1);
  } else {

  }
  {
#line 165
  tmp___3 = tipc_cfg_reply_none();
  }
#line 165
  return (tmp___3);
}
}
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *cfg_set_own_addr(void) 
{ 
  u32 addr ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  struct sk_buff *tmp___2 ;
  struct sk_buff *tmp___3 ;
  int tmp___4 ;
  struct sk_buff *tmp___5 ;
  struct sk_buff *tmp___6 ;

  {
  {
#line 172
  tmp___0 = TLV_CHECK(req_tlv_area, (int )((__u16 )req_tlv_space), 17);
  }
#line 172
  if (tmp___0 == 0) {
    {
#line 173
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 173
    return (tmp);
  } else {

  }
  {
#line 175
  tmp___1 = __fswab32(*((__be32 *)((char *)req_tlv_area + 4UL)));
#line 175
  addr = tmp___1;
  }
#line 176
  if (addr == tipc_own_addr) {
    {
#line 177
    tmp___2 = tipc_cfg_reply_none();
    }
#line 177
    return (tmp___2);
  } else {

  }
  {
#line 178
  tmp___4 = tipc_addr_node_valid(addr);
  }
#line 178
  if (tmp___4 == 0) {
    {
#line 179
    tmp___3 = tipc_cfg_reply_error_string((char *)"\205 (node address)");
    }
#line 179
    return (tmp___3);
  } else {

  }
#line 181
  if (tipc_own_addr != 0U) {
    {
#line 182
    tmp___5 = tipc_cfg_reply_error_string((char *)"\204 (cannot change node address once assigned)");
    }
#line 182
    return (tmp___5);
  } else {

  }
  {
#line 184
  tipc_core_start_net((unsigned long )addr);
#line 185
  tmp___6 = tipc_cfg_reply_none();
  }
#line 185
  return (tmp___6);
}
}
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *cfg_set_remote_mng(void) 
{ 
  u32 value ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  struct sk_buff *tmp___2 ;

  {
  {
#line 192
  tmp___0 = TLV_CHECK(req_tlv_area, (int )((__u16 )req_tlv_space), 2);
  }
#line 192
  if (tmp___0 == 0) {
    {
#line 193
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 193
    return (tmp);
  } else {

  }
  {
#line 195
  tmp___1 = __fswab32(*((__be32 *)((char *)req_tlv_area + 4UL)));
#line 195
  value = tmp___1;
#line 196
  tipc_remote_management = value != 0U;
#line 197
  tmp___2 = tipc_cfg_reply_none();
  }
#line 197
  return (tmp___2);
}
}
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *cfg_set_max_ports(void) 
{ 
  u32 value ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  struct sk_buff *tmp___2 ;
  struct sk_buff *tmp___3 ;
  struct sk_buff *tmp___4 ;

  {
  {
#line 204
  tmp___0 = TLV_CHECK(req_tlv_area, (int )((__u16 )req_tlv_space), 2);
  }
#line 204
  if (tmp___0 == 0) {
    {
#line 205
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 205
    return (tmp);
  } else {

  }
  {
#line 206
  tmp___1 = __fswab32(*((__be32 *)((char *)req_tlv_area + 4UL)));
#line 206
  value = tmp___1;
  }
#line 207
  if (value == (u32 )tipc_max_ports) {
    {
#line 208
    tmp___2 = tipc_cfg_reply_none();
    }
#line 208
    return (tmp___2);
  } else {

  }
#line 209
  if (value - 127U > 65408U) {
    {
#line 210
    tmp___3 = tipc_cfg_reply_error_string((char *)"\205 (max ports must be 127-65535)");
    }
#line 210
    return (tmp___3);
  } else {

  }
  {
#line 212
  tmp___4 = tipc_cfg_reply_error_string((char *)"\204 (cannot change max ports while TIPC is active)");
  }
#line 212
  return (tmp___4);
}
}
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sk_buff *cfg_set_netid(void) 
{ 
  u32 value ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  struct sk_buff *tmp___2 ;
  struct sk_buff *tmp___3 ;
  struct sk_buff *tmp___4 ;
  struct sk_buff *tmp___5 ;

  {
  {
#line 220
  tmp___0 = TLV_CHECK(req_tlv_area, (int )((__u16 )req_tlv_space), 2);
  }
#line 220
  if (tmp___0 == 0) {
    {
#line 221
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 221
    return (tmp);
  } else {

  }
  {
#line 222
  tmp___1 = __fswab32(*((__be32 *)((char *)req_tlv_area + 4UL)));
#line 222
  value = tmp___1;
  }
#line 223
  if (value == (u32 )tipc_net_id) {
    {
#line 224
    tmp___2 = tipc_cfg_reply_none();
    }
#line 224
    return (tmp___2);
  } else {

  }
#line 225
  if (value - 1U > 9998U) {
    {
#line 226
    tmp___3 = tipc_cfg_reply_error_string((char *)"\205 (network id must be 1-9999)");
    }
#line 226
    return (tmp___3);
  } else {

  }
#line 228
  if (tipc_own_addr != 0U) {
    {
#line 229
    tmp___4 = tipc_cfg_reply_error_string((char *)"\204 (cannot change network id once TIPC has joined a network)");
    }
#line 229
    return (tmp___4);
  } else {

  }
  {
#line 231
  tipc_net_id = (int )value;
#line 232
  tmp___5 = tipc_cfg_reply_none();
  }
#line 232
  return (tmp___5);
}
}
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
struct sk_buff *tipc_cfg_do_cmd(u32 orig_node , u16 cmd , void const   *request_area ,
                                int request_space , int reply_headroom ) 
{ 
  struct sk_buff *rep_tlv_buf ;
  u32 domain ;
  u32 tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int __ret_warn_on ;
  long tmp___2 ;

  {
  {
#line 240
  mutex_lock_nested(& config_mutex, 0U);
#line 243
  req_tlv_area = request_area;
#line 244
  req_tlv_space = request_space;
#line 245
  rep_headroom = reply_headroom;
#line 248
  tmp___0 = in_own_node(orig_node);
#line 248
  tmp___1 = __builtin_expect(tmp___0 != 0, 1L);
  }
#line 248
  if (tmp___1 != 0L) {

  } else
#line 250
  if ((int )((short )cmd) < 0) {
    {
#line 251
    rep_tlv_buf = tipc_cfg_reply_error_string((char *)"\204 (cannot be done remotely)");
    }
#line 253
    goto exit;
  } else
#line 254
  if (tipc_remote_management == 0) {
    {
#line 255
    rep_tlv_buf = tipc_cfg_reply_error_string((char *)"\203");
    }
#line 256
    goto exit;
  } else
#line 257
  if ((unsigned int )cmd > 16383U) {
    {
#line 258
    domain = 0U;
#line 260
    tmp = tipc_nametbl_translate(3U, 0U, & domain);
    }
#line 260
    if (tmp == 0U || domain != orig_node) {
      {
#line 262
      rep_tlv_buf = tipc_cfg_reply_error_string((char *)"\202");
      }
#line 263
      goto exit;
    } else {

    }
  } else {

  }
  {
#line 269
  if ((int )cmd == 0) {
#line 269
    goto case_0;
  } else {

  }
#line 272
  if ((int )cmd == 1) {
#line 272
    goto case_1;
  } else {

  }
#line 275
  if ((int )cmd == 4) {
#line 275
    goto case_4;
  } else {

  }
#line 278
  if ((int )cmd == 11) {
#line 278
    goto case_11;
  } else {

  }
#line 281
  if ((int )cmd == 16652) {
#line 281
    goto case_16652;
  } else {

  }
#line 284
  if ((int )cmd == 5) {
#line 284
    goto case_5;
  } else {

  }
#line 287
  if ((int )cmd == 3) {
#line 287
    goto case_3;
  } else {

  }
#line 290
  if ((int )cmd == 2) {
#line 290
    goto case_2;
  } else {

  }
#line 293
  if ((int )cmd == 6) {
#line 293
    goto case_6;
  } else {

  }
#line 296
  if ((int )cmd == 15) {
#line 296
    goto case_15;
  } else {

  }
#line 299
  if ((int )cmd == 16647) {
#line 299
    goto case_16647;
  } else {

  }
#line 300
  if ((int )cmd == 16648) {
#line 300
    goto case_16648;
  } else {

  }
#line 301
  if ((int )cmd == 16649) {
#line 301
    goto case_16649;
  } else {

  }
#line 304
  if ((int )cmd == 16641) {
#line 304
    goto case_16641;
  } else {

  }
#line 307
  if ((int )cmd == 16642) {
#line 307
    goto case_16642;
  } else {

  }
#line 310
  if ((int )cmd == 32769) {
#line 310
    goto case_32769;
  } else {

  }
#line 313
  if ((int )cmd == 32771) {
#line 313
    goto case_32771;
  } else {

  }
#line 316
  if ((int )cmd == 32772) {
#line 316
    goto case_32772;
  } else {

  }
#line 319
  if ((int )cmd == 32779) {
#line 319
    goto case_32779;
  } else {

  }
#line 322
  if ((int )cmd == 16387) {
#line 322
    goto case_16387;
  } else {

  }
#line 325
  if ((int )cmd == 16388) {
#line 325
    goto case_16388;
  } else {

  }
#line 328
  if ((int )cmd == 16395) {
#line 328
    goto case_16395;
  } else {

  }
#line 331
  if ((int )cmd == 49153) {
#line 331
    goto case_49153;
  } else {

  }
#line 335
  if ((int )cmd == 32775) {
#line 335
    goto case_32775;
  } else {

  }
#line 336
  if ((int )cmd == 16391) {
#line 336
    goto case_16391;
  } else {

  }
#line 337
  if ((int )cmd == 32778) {
#line 337
    goto case_32778;
  } else {

  }
#line 338
  if ((int )cmd == 16394) {
#line 338
    goto case_16394;
  } else {

  }
#line 339
  if ((int )cmd == 32776) {
#line 339
    goto case_32776;
  } else {

  }
#line 340
  if ((int )cmd == 16392) {
#line 340
    goto case_16392;
  } else {

  }
#line 341
  if ((int )cmd == 32777) {
#line 341
    goto case_32777;
  } else {

  }
#line 342
  if ((int )cmd == 16393) {
#line 342
    goto case_16393;
  } else {

  }
#line 343
  if ((int )cmd == 32774) {
#line 343
    goto case_32774;
  } else {

  }
#line 344
  if ((int )cmd == 16390) {
#line 344
    goto case_16390;
  } else {

  }
#line 345
  if ((int )cmd == 32773) {
#line 345
    goto case_32773;
  } else {

  }
#line 346
  if ((int )cmd == 16389) {
#line 346
    goto case_16389;
  } else {

  }
#line 347
  if ((int )cmd == 16650) {
#line 347
    goto case_16650;
  } else {

  }
#line 348
  if ((int )cmd == 16651) {
#line 348
    goto case_16651;
  } else {

  }
#line 352
  goto switch_default;
  case_0: /* CIL Label */ 
  {
#line 270
  rep_tlv_buf = tipc_cfg_reply_none();
  }
#line 271
  goto ldv_40827;
  case_1: /* CIL Label */ 
  {
#line 273
  rep_tlv_buf = tipc_node_get_nodes(req_tlv_area, req_tlv_space);
  }
#line 274
  goto ldv_40827;
  case_4: /* CIL Label */ 
  {
#line 276
  rep_tlv_buf = tipc_node_get_links(req_tlv_area, req_tlv_space);
  }
#line 277
  goto ldv_40827;
  case_11: /* CIL Label */ 
  {
#line 279
  rep_tlv_buf = tipc_link_cmd_show_stats(req_tlv_area, req_tlv_space);
  }
#line 280
  goto ldv_40827;
  case_16652: /* CIL Label */ 
  {
#line 282
  rep_tlv_buf = tipc_link_cmd_reset_stats(req_tlv_area, req_tlv_space);
  }
#line 283
  goto ldv_40827;
  case_5: /* CIL Label */ 
  {
#line 285
  rep_tlv_buf = tipc_nametbl_get(req_tlv_area, req_tlv_space);
  }
#line 286
  goto ldv_40827;
  case_3: /* CIL Label */ 
  {
#line 288
  rep_tlv_buf = tipc_bearer_get_names();
  }
#line 289
  goto ldv_40827;
  case_2: /* CIL Label */ 
  {
#line 291
  rep_tlv_buf = tipc_media_get_names();
  }
#line 292
  goto ldv_40827;
  case_6: /* CIL Label */ 
  {
#line 294
  rep_tlv_buf = tipc_port_get_ports();
  }
#line 295
  goto ldv_40827;
  case_15: /* CIL Label */ 
  {
#line 297
  rep_tlv_buf = tipc_show_stats();
  }
#line 298
  goto ldv_40827;
  case_16647: /* CIL Label */ ;
  case_16648: /* CIL Label */ ;
  case_16649: /* CIL Label */ 
  {
#line 302
  rep_tlv_buf = tipc_link_cmd_config(req_tlv_area, req_tlv_space, (int )cmd);
  }
#line 303
  goto ldv_40827;
  case_16641: /* CIL Label */ 
  {
#line 305
  rep_tlv_buf = cfg_enable_bearer();
  }
#line 306
  goto ldv_40827;
  case_16642: /* CIL Label */ 
  {
#line 308
  rep_tlv_buf = cfg_disable_bearer();
  }
#line 309
  goto ldv_40827;
  case_32769: /* CIL Label */ 
  {
#line 311
  rep_tlv_buf = cfg_set_own_addr();
  }
#line 312
  goto ldv_40827;
  case_32771: /* CIL Label */ 
  {
#line 314
  rep_tlv_buf = cfg_set_remote_mng();
  }
#line 315
  goto ldv_40827;
  case_32772: /* CIL Label */ 
  {
#line 317
  rep_tlv_buf = cfg_set_max_ports();
  }
#line 318
  goto ldv_40827;
  case_32779: /* CIL Label */ 
  {
#line 320
  rep_tlv_buf = cfg_set_netid();
  }
#line 321
  goto ldv_40827;
  case_16387: /* CIL Label */ 
  {
#line 323
  rep_tlv_buf = tipc_cfg_reply_unsigned((u32 )tipc_remote_management);
  }
#line 324
  goto ldv_40827;
  case_16388: /* CIL Label */ 
  {
#line 326
  rep_tlv_buf = tipc_cfg_reply_unsigned((u32 )tipc_max_ports);
  }
#line 327
  goto ldv_40827;
  case_16395: /* CIL Label */ 
  {
#line 329
  rep_tlv_buf = tipc_cfg_reply_unsigned((u32 )tipc_net_id);
  }
#line 330
  goto ldv_40827;
  case_49153: /* CIL Label */ 
  {
#line 332
  rep_tlv_buf = tipc_cfg_reply_error_string((char *)"\201");
  }
#line 334
  goto ldv_40827;
  case_32775: /* CIL Label */ ;
  case_16391: /* CIL Label */ ;
  case_32778: /* CIL Label */ ;
  case_16394: /* CIL Label */ ;
  case_32776: /* CIL Label */ ;
  case_16392: /* CIL Label */ ;
  case_32777: /* CIL Label */ ;
  case_16393: /* CIL Label */ ;
  case_32774: /* CIL Label */ ;
  case_16390: /* CIL Label */ ;
  case_32773: /* CIL Label */ ;
  case_16389: /* CIL Label */ ;
  case_16650: /* CIL Label */ ;
  case_16651: /* CIL Label */ 
  {
#line 349
  rep_tlv_buf = tipc_cfg_reply_error_string((char *)"\204 (obsolete command)");
  }
#line 351
  goto ldv_40827;
  switch_default: /* CIL Label */ 
  {
#line 353
  rep_tlv_buf = tipc_cfg_reply_error_string((char *)"\204 (unknown command)");
  }
#line 355
  goto ldv_40827;
  switch_break: /* CIL Label */ ;
  }
  ldv_40827: 
  {
#line 358
  __ret_warn_on = rep_tlv_buf->len > 32772U;
#line 358
  tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 358
  if (tmp___2 != 0L) {
    {
#line 358
    warn_slowpath_null("net/tipc/config.c", 358);
    }
  } else {

  }
  {
#line 358
  __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 361
  if (rep_tlv_buf->len == 32772U) {
#line 362
    if ((unsigned int )*(rep_tlv_buf->data + 32768UL) != 0U) {
      {
#line 363
      sprintf((char *)(rep_tlv_buf->data + ((unsigned long )rep_tlv_buf->len + 0xfffffffffffffff2UL)),
              "<truncated>\n");
      }
    } else {

    }
  } else {

  }
  exit: 
  {
#line 369
  mutex_unlock(& config_mutex);
  }
#line 370
  return (rep_tlv_buf);
}
}
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static void cfg_conn_msg_event(int conid , struct sockaddr_tipc *addr , void *usr_data ,
                               void *buf , size_t len ) 
{ 
  struct tipc_cfg_msg_hdr *req_hdr ;
  struct tipc_cfg_msg_hdr *rep_hdr ;
  struct sk_buff *rep_buf ;
  __u32 tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 381
  req_hdr = (struct tipc_cfg_msg_hdr *)buf;
#line 382
  if (len <= 15UL) {
    {
#line 385
    printk("\ftipc: Invalid configuration message discarded\n");
    }
#line 386
    return;
  } else {
    {
#line 382
    tmp = __fswab32(req_hdr->tcm_len);
    }
#line 382
    if (len != ((size_t )(tmp + 3U) & 4294967292UL)) {
      {
#line 385
      printk("\ftipc: Invalid configuration message discarded\n");
      }
#line 386
      return;
    } else {
      {
#line 382
      tmp___0 = __fswab16((int )req_hdr->tcm_flags);
      }
#line 382
      if ((unsigned int )tmp___0 != 1U) {
        {
#line 385
        printk("\ftipc: Invalid configuration message discarded\n");
        }
#line 386
        return;
      } else {

      }
    }
  }
  {
#line 390
  tmp___1 = __fswab16((int )req_hdr->tcm_type);
#line 390
  rep_buf = tipc_cfg_do_cmd(addr->addr.id.node, (int )tmp___1, (void const   *)(buf + 16UL),
                            (int )((unsigned int )len - 16U), 204);
  }
#line 394
  if ((unsigned long )rep_buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 395
    skb_push(rep_buf, 16U);
#line 396
    rep_hdr = (struct tipc_cfg_msg_hdr *)rep_buf->data;
#line 397
    memcpy((void *)rep_hdr, (void const   *)req_hdr, 16UL);
#line 398
    tmp___2 = __fswab32(rep_buf->len);
#line 398
    rep_hdr->tcm_len = tmp___2;
#line 399
    rep_hdr->tcm_flags = (unsigned int )rep_hdr->tcm_flags & 65279U;
#line 400
    tipc_conn_sendmsg(& cfgsrv, conid, addr, (void *)rep_buf->data, (size_t )rep_buf->len);
#line 402
    kfree_skb(rep_buf);
    }
  } else {

  }
#line 404
  return;
}
}
#line 406 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct sockaddr_tipc cfgsrv_addr  =    {30U, 1U, 1, {.nameseq = {0U, 0U, 0U}}};
#line 415 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
static struct tipc_server cfgsrv  = 
#line 415
     {{0, 0, 0, 0, 0, 0, {{{{{0U}}, 0U, 0U, 0, {0, {0, 0}, 0, 0, 0UL}}}}}, {{{{{0U}},
                                                                            0U, 0U,
                                                                            0, {0,
                                                                                {0,
                                                                                 0},
                                                                                0,
                                                                                0,
                                                                                0UL}}}},
    0, 0, 0, 0, 65536, (void *(*)(int  ))0, (void (*)(int  , void * ))0, & cfg_conn_msg_event,
    & cfgsrv_addr, {'c', 'f', 'g', '_', 's', 'e', 'r', 'v', 'e', 'r', '\000'}, 3,
    4, 0};
#line 426 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
int tipc_cfg_init(void) 
{ 
  int tmp ;

  {
  {
#line 428
  tmp = tipc_server_start(& cfgsrv);
  }
#line 428
  return (tmp);
}
}
#line 431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
void tipc_cfg_reinit(void) 
{ 


  {
  {
#line 433
  tipc_server_stop(& cfgsrv);
#line 435
  cfgsrv_addr.addr.nameseq.lower = tipc_own_addr;
#line 436
  cfgsrv_addr.addr.nameseq.upper = tipc_own_addr;
#line 437
  tipc_server_start(& cfgsrv);
  }
#line 438
  return;
}
}
#line 440 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/config.c"
void tipc_cfg_stop(void) 
{ 


  {
  {
#line 442
  tipc_server_stop(& cfgsrv);
  }
#line 443
  return;
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void) ;
#line 42
void ldv_switch_to_process_context(void) ;
#line 62
extern void ldv_initialize(void) ;
#line 76
void ldv_check_final_state(void) ;
#line 113
int ldv_post_init(int init_ret_val ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/common.h"
extern void __VERIFIER_assume(int  ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_int(void) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
void ldv_free(void *s ) ;
#line 28
void *ldv_xmalloc(size_t size ) ;
#line 41
void *ldv_xmalloc_unknown_size(size_t size ) ;
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 648 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb_fclone(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 651
  tmp = __alloc_skb(size, priority, 1, -1);
  }
#line 651
  return (tmp);
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
u32 tipc_own_addr  ;
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
int tipc_max_ports  ;
#line 81 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
int tipc_net_id  ;
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
int tipc_remote_management  ;
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
int sysctl_tipc_rmem[3U]  ;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
int tipc_random  ;
#line 94
int tipc_handler_start(void) ;
#line 95
void tipc_handler_stop(void) ;
#line 96
int tipc_netlink_start(void) ;
#line 97
void tipc_netlink_stop(void) ;
#line 98
int tipc_socket_init(void) ;
#line 99
void tipc_socket_stop(void) ;
#line 106
int tipc_register_sysctl(void) ;
#line 107
void tipc_unregister_sysctl(void) ;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.h"
int tipc_ref_table_init(u32 requested_size , u32 start ) ;
#line 41
void tipc_ref_table_stop(void) ;
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.h"
int tipc_nametbl_init(void) ;
#line 102
void tipc_nametbl_stop(void) ;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.h"
int tipc_subscr_start(void) ;
#line 79
void tipc_subscr_stop(void) ;
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
int tipc_eth_media_start(void) ;
#line 176
void tipc_eth_media_stop(void) ;
#line 179
int tipc_ib_media_start(void) ;
#line 180
void tipc_ib_media_stop(void) ;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.h"
void tipc_net_start(u32 addr ) ;
#line 45
void tipc_net_stop(void) ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.c"
struct sk_buff *tipc_buf_acquire(u32 size ) 
{ 
  struct sk_buff *skb ;
  unsigned int buf_size ;

  {
  {
#line 68
  buf_size = (size + 131U) & 4294967292U;
#line 70
  skb = alloc_skb_fclone(buf_size, 32U);
  }
#line 71
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    {
#line 72
    skb_reserve(skb, 128);
#line 73
    skb_put(skb, size);
#line 74
    skb->next = (struct sk_buff *)0;
    }
  } else {

  }
#line 76
  return (skb);
}
}
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.c"
static void tipc_core_stop_net(void) 
{ 


  {
  {
#line 84
  tipc_net_stop();
#line 85
  tipc_eth_media_stop();
#line 86
  tipc_ib_media_stop();
  }
#line 87
  return;
}
}
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.c"
int tipc_core_start_net(unsigned long addr ) 
{ 
  int res ;

  {
  {
#line 96
  tipc_net_start((u32 )addr);
#line 97
  res = tipc_eth_media_start();
  }
#line 98
  if (res < 0) {
#line 99
    goto err;
  } else {

  }
  {
#line 100
  res = tipc_ib_media_start();
  }
#line 101
  if (res < 0) {
#line 102
    goto err;
  } else {

  }
#line 103
  return (res);
  err: 
  {
#line 106
  tipc_core_stop_net();
  }
#line 107
  return (res);
}
}
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.c"
static void tipc_core_stop(void) 
{ 


  {
  {
#line 115
  tipc_netlink_stop();
#line 116
  tipc_handler_stop();
#line 117
  tipc_cfg_stop();
#line 118
  tipc_subscr_stop();
#line 119
  tipc_nametbl_stop();
#line 120
  tipc_ref_table_stop();
#line 121
  tipc_socket_stop();
#line 122
  tipc_unregister_sysctl();
  }
#line 123
  return;
}
}
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.c"
static int tipc_core_start(void) 
{ 
  int res ;

  {
  {
#line 132
  get_random_bytes((void *)(& tipc_random), 4);
#line 134
  res = tipc_handler_start();
  }
#line 135
  if (res == 0) {
    {
#line 136
    res = tipc_ref_table_init((u32 )tipc_max_ports, (u32 )tipc_random);
    }
  } else {

  }
#line 137
  if (res == 0) {
    {
#line 138
    res = tipc_nametbl_init();
    }
  } else {

  }
#line 139
  if (res == 0) {
    {
#line 140
    res = tipc_netlink_start();
    }
  } else {

  }
#line 141
  if (res == 0) {
    {
#line 142
    res = tipc_socket_init();
    }
  } else {

  }
#line 143
  if (res == 0) {
    {
#line 144
    res = tipc_register_sysctl();
    }
  } else {

  }
#line 145
  if (res == 0) {
    {
#line 146
    res = tipc_subscr_start();
    }
  } else {

  }
#line 147
  if (res == 0) {
    {
#line 148
    res = tipc_cfg_init();
    }
  } else {

  }
#line 149
  if (res != 0) {
    {
#line 150
    tipc_core_stop();
    }
  } else {

  }
#line 152
  return (res);
}
}
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.c"
static int tipc_init(void) 
{ 
  int res ;

  {
  {
#line 159
  printk("\016tipc: Activated (version 2.0.0)\n");
#line 161
  tipc_own_addr = 0U;
#line 162
  tipc_remote_management = 1;
#line 163
  tipc_max_ports = 8191;
#line 164
  tipc_net_id = 4711;
#line 166
  sysctl_tipc_rmem[0] = 4265025;
#line 167
  sysctl_tipc_rmem[1] = 34120200;
#line 169
  sysctl_tipc_rmem[2] = 68240400;
#line 171
  res = tipc_core_start();
  }
#line 172
  if (res != 0) {
    {
#line 173
    printk("\vtipc: Unable to start in single node mode\n");
    }
  } else {
    {
#line 175
    printk("\016tipc: Started in single node mode\n");
    }
  }
#line 176
  return (res);
}
}
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.c"
static void tipc_exit(void) 
{ 


  {
  {
#line 181
  tipc_core_stop_net();
#line 182
  tipc_core_stop();
#line 183
  printk("\016tipc: Deactivated\n");
  }
#line 184
  return;
}
}
#line 263 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_dispatch_default_deregister_5_7_3(void) ;
#line 264
void ldv_dispatch_default_register_5_7_4(void) ;
#line 265
void ldv_dispatch_insmod_deregister_10_1(void) ;
#line 266
void ldv_dispatch_insmod_register_10_2(void) ;
#line 267
void ldv_dispatch_instance_deregister_6_3(struct timer_list *arg0 ) ;
#line 268
void ldv_dispatch_instance_register_6_4(struct timer_list *arg0 ) ;
#line 271
void ldv_factory_scenario_6(void *arg0 ) ;
#line 272
void ldv_insmod_7(void *arg0 ) ;
#line 273
void ldv_insmod_tipc_exit_7_2(void (*arg0)(void) ) ;
#line 274
int ldv_insmod_tipc_init_7_9(int (*arg0)(void) ) ;
#line 275
void ldv_main_10(void *arg0 ) ;
#line 279
void ldv_timer_scenario_5(void *arg0 ) ;
#line 280
void ldv_timer_scenario_callback_5_2(void (*arg0)(unsigned long  ) , unsigned long arg1 ) ;
#line 281
int main(void) ;
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_dispatch_default_deregister_5_7_3(void) 
{ 


  {
#line 292
  return;
}
}
#line 296 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_dispatch_default_register_5_7_4(void) 
{ 
  struct ldv_struct_insmod_7 *cf_arg_6 ;
  void *tmp ;

  {
  {
#line 298
  tmp = ldv_xmalloc(4UL);
#line 298
  cf_arg_6 = (struct ldv_struct_insmod_7 *)tmp;
#line 299
  ldv_factory_scenario_6((void *)cf_arg_6);
  }
#line 300
  return;
}
}
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_dispatch_insmod_deregister_10_1(void) 
{ 


  {
#line 307
  return;
}
}
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_dispatch_insmod_register_10_2(void) 
{ 
  struct ldv_struct_insmod_7 *cf_arg_7 ;
  void *tmp ;

  {
  {
#line 313
  tmp = ldv_xmalloc(4UL);
#line 313
  cf_arg_7 = (struct ldv_struct_insmod_7 *)tmp;
#line 314
  ldv_insmod_7((void *)cf_arg_7);
  }
#line 315
  return;
}
}
#line 319 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_dispatch_instance_deregister_6_3(struct timer_list *arg0 ) 
{ 


  {
#line 322
  return;
}
}
#line 326 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_dispatch_instance_register_6_4(struct timer_list *arg0 ) 
{ 
  struct ldv_struct_timer_scenario_5 *cf_arg_5 ;
  void *tmp ;

  {
  {
#line 328
  tmp = ldv_xmalloc(16UL);
#line 328
  cf_arg_5 = (struct ldv_struct_timer_scenario_5 *)tmp;
#line 329
  cf_arg_5->arg0 = arg0;
#line 330
  ldv_timer_scenario_5((void *)cf_arg_5);
  }
#line 331
  return;
}
}
#line 335 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_factory_scenario_6(void *arg0 ) 
{ 
  struct timer_list *ldv_6_container_timer_list ;
  void *tmp ;

  {
  {
#line 341
  ldv_free(arg0);
#line 345
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 345
  ldv_6_container_timer_list = (struct timer_list *)tmp;
#line 349
  ldv_dispatch_instance_register_6_4(ldv_6_container_timer_list);
#line 353
  ldv_dispatch_instance_deregister_6_3(ldv_6_container_timer_list);
#line 357
  ldv_free((void *)ldv_6_container_timer_list);
  }
#line 365
  return;
#line 367
  return;
}
}
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_insmod_7(void *arg0 ) 
{ 
  int ldv_7_reg_guard_5_default ;
  int ldv_7_ret_default ;
  void (*ldv_7_tipc_exit_default)(void) ;
  int (*ldv_7_tipc_init_default)(void) ;
  int tmp ;

  {
  {
#line 381
  ldv_free(arg0);
#line 386
  ldv_7_ret_default = ldv_insmod_tipc_init_7_9(ldv_7_tipc_init_default);
#line 388
  ldv_7_ret_default = ldv_post_init(ldv_7_ret_default);
#line 391
  tmp = ldv_undef_int();
  }
#line 391
  if (tmp != 0) {
    {
#line 393
    __VERIFIER_assume(ldv_7_ret_default != 0);
    }
#line 401
    return;
  } else {
    {
#line 405
    __VERIFIER_assume(ldv_7_ret_default == 0);
#line 409
    ldv_7_reg_guard_5_default = ldv_undef_int();
    }
#line 413
    if (ldv_7_reg_guard_5_default != 0) {
      {
#line 414
      ldv_dispatch_default_register_5_7_4();
      }
    } else {

    }
#line 419
    if (ldv_7_reg_guard_5_default != 0) {
      {
#line 420
      ldv_dispatch_default_deregister_5_7_3();
      }
    } else {

    }
    {
#line 426
    ldv_insmod_tipc_exit_7_2(ldv_7_tipc_exit_default);
    }
#line 434
    return;
  }
#line 437
  return;
}
}
#line 442 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_insmod_tipc_exit_7_2(void (*arg0)(void) ) 
{ 


  {
  {
#line 443
  tipc_exit();
  }
#line 444
  return;
}
}
#line 447 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
int ldv_insmod_tipc_init_7_9(int (*arg0)(void) ) 
{ 
  int tmp ;

  {
  {
#line 448
  tmp = tipc_init();
  }
#line 448
  return (tmp);
}
}
#line 452 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_main_10(void *arg0 ) 
{ 


  {
  {
#line 457
  ldv_dispatch_insmod_register_10_2();
#line 461
  ldv_dispatch_insmod_deregister_10_1();
  }
#line 465
  return;
#line 467
  return;
}
}
#line 472 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_timer_scenario_5(void *arg0 ) 
{ 
  struct timer_list *ldv_5_container_timer_list ;
  struct ldv_struct_timer_scenario_5 *data ;

  {
#line 477
  data = (struct ldv_struct_timer_scenario_5 *)arg0;
#line 482
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_timer_scenario_5 *)0)) {
    {
#line 483
    ldv_5_container_timer_list = data->arg0;
#line 484
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 490
  ldv_switch_to_interrupt_context();
  }
#line 491
  if ((unsigned long )ldv_5_container_timer_list->function != (unsigned long )((void (*)(unsigned long  ))0)) {
    {
#line 493
    ldv_timer_scenario_callback_5_2(ldv_5_container_timer_list->function, ldv_5_container_timer_list->data);
    }
  } else {

  }
  {
#line 496
  ldv_switch_to_process_context();
  }
#line 504
  return;
#line 506
  return;
}
}
#line 511 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
void ldv_timer_scenario_callback_5_2(void (*arg0)(unsigned long  ) , unsigned long arg1 ) 
{ 


  {
  {
#line 512
  (*arg0)(arg1);
  }
#line 513
  return;
}
}
#line 516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_core.c.aux"
int main(void) 
{ 


  {
  {
#line 519
  ldv_initialize();
#line 522
  ldv_main_10((void *)0);
#line 525
  ldv_check_final_state();
  }
#line 527
  return (0);
}
}
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
  {
#line 76
  __list_add(new, head->prev, head);
  }
#line 77
  return;
}
}
#line 112
extern void list_del(struct list_head * ) ;
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 209
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 212
  return (oldbit);
}
}
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_handler.c.aux"
void ldv_spin_lock_qitem_lock(void) ;
#line 198
void ldv_spin_unlock_qitem_lock(void) ;
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_58___0(spinlock_t *lock ) ;
#line 372
__inline static void ldv_spin_lock_bh_58___0(spinlock_t *lock ) ;
#line 376
__inline static void ldv_spin_lock_bh_58___0(spinlock_t *lock ) ;
#line 380
__inline static void ldv_spin_lock_bh_58___0(spinlock_t *lock ) ;
#line 416
__inline static void ldv_spin_unlock_bh_59___0(spinlock_t *lock ) ;
#line 420
__inline static void ldv_spin_unlock_bh_59___0(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_unlock_bh_59___0(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_59___0(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_unlock_bh_59___0(spinlock_t *lock ) ;
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 114
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 116
extern void kmem_cache_free(struct kmem_cache * , void * ) ;
#line 296
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 475 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/interrupt.h"
extern void __tasklet_schedule(struct tasklet_struct * ) ;
#line 477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/interrupt.h"
__inline static void tasklet_schedule(struct tasklet_struct *t ) 
{ 
  int tmp ;

  {
  {
#line 479
  tmp = test_and_set_bit(0L, (unsigned long volatile   *)(& t->state));
  }
#line 479
  if (tmp == 0) {
    {
#line 480
    __tasklet_schedule(t);
    }
  } else {

  }
#line 481
  return;
}
}
#line 519 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/interrupt.h"
__inline static void tasklet_enable(struct tasklet_struct *t ) 
{ 


  {
  {
#line 521
  __asm__  volatile   ("": : : "memory");
#line 522
  atomic_dec(& t->count);
  }
#line 523
  return;
}
}
#line 531
extern void tasklet_kill(struct tasklet_struct * ) ;
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
u32 tipc_k_signal(void (*routine)(unsigned long  ) , unsigned long argument ) ;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
static struct kmem_cache *tipc_queue_item_cache  ;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
static struct list_head signal_queue_head  ;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
static spinlock_t qitem_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "qitem_lock", 0, 0UL}}}};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
static int handler_enabled  ;
#line 50
static void process_signal_queue(unsigned long dummy ) ;
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
static struct tasklet_struct tipc_tasklet  =    {(struct tasklet_struct *)0, 0UL, {1}, & process_signal_queue, 0UL};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
u32 tipc_k_signal(void (*routine)(unsigned long  ) , unsigned long argument ) 
{ 
  struct queue_item *item ;
  void *tmp ;

  {
#line 59
  if (handler_enabled == 0) {
#line 60
    return (4294967204U);
  } else {

  }
  {
#line 63
  ldv_spin_lock_bh_58___0(& qitem_lock);
#line 64
  tmp = kmem_cache_alloc(tipc_queue_item_cache, 32U);
#line 64
  item = (struct queue_item *)tmp;
  }
#line 65
  if ((unsigned long )item == (unsigned long )((struct queue_item *)0)) {
    {
#line 66
    printk("\vtipc: Signal queue out of memory\n");
#line 67
    ldv_spin_unlock_bh_59___0(& qitem_lock);
    }
#line 68
    return (4294967284U);
  } else {

  }
  {
#line 70
  item->handler = routine;
#line 71
  item->data = argument;
#line 72
  list_add_tail(& item->next_signal, & signal_queue_head);
#line 73
  ldv_spin_unlock_bh_59___0(& qitem_lock);
#line 74
  tasklet_schedule(& tipc_tasklet);
  }
#line 75
  return (0U);
}
}
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
static void process_signal_queue(unsigned long dummy ) 
{ 
  struct queue_item * volatile  item ;
  struct list_head *l ;
  struct list_head *n ;
  struct list_head  const  *__mptr ;

  {
  {
#line 83
  ldv_spin_lock_bh_58___0(& qitem_lock);
#line 84
  l = signal_queue_head.next;
#line 84
  n = l->next;
  }
#line 84
  goto ldv_39648;
  ldv_39647: 
  {
#line 85
  __mptr = (struct list_head  const  *)l;
#line 85
  item = (struct queue_item *)__mptr;
#line 86
  list_del(& item->next_signal);
#line 87
  ldv_spin_unlock_bh_59___0(& qitem_lock);
#line 88
  (*(item->handler))(item->data);
#line 89
  ldv_spin_lock_bh_58___0(& qitem_lock);
#line 90
  kmem_cache_free(tipc_queue_item_cache, (void *)item);
#line 84
  l = n;
#line 84
  n = l->next;
  }
  ldv_39648: ;
#line 84
  if ((unsigned long )l != (unsigned long )(& signal_queue_head)) {
#line 86
    goto ldv_39647;
  } else {

  }
  {
#line 92
  ldv_spin_unlock_bh_59___0(& qitem_lock);
  }
#line 93
  return;
}
}
#line 95 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
int tipc_handler_start(void) 
{ 


  {
  {
#line 97
  tipc_queue_item_cache = kmem_cache_create("tipc_queue_items", 32UL, 0UL, 8192UL,
                                            (void (*)(void * ))0);
  }
#line 100
  if ((unsigned long )tipc_queue_item_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 101
    return (-12);
  } else {

  }
  {
#line 103
  INIT_LIST_HEAD(& signal_queue_head);
#line 104
  tasklet_enable(& tipc_tasklet);
#line 105
  handler_enabled = 1;
  }
#line 106
  return (0);
}
}
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/handler.c"
void tipc_handler_stop(void) 
{ 
  struct list_head *l ;
  struct list_head *n ;
  struct queue_item *item ;
  struct list_head  const  *__mptr ;

  {
#line 114
  if (handler_enabled == 0) {
#line 115
    return;
  } else {

  }
  {
#line 117
  handler_enabled = 0;
#line 118
  tasklet_kill(& tipc_tasklet);
#line 120
  ldv_spin_lock_bh_58___0(& qitem_lock);
#line 121
  l = signal_queue_head.next;
#line 121
  n = l->next;
  }
#line 121
  goto ldv_39662;
  ldv_39661: 
  {
#line 122
  __mptr = (struct list_head  const  *)l;
#line 122
  item = (struct queue_item *)__mptr;
#line 123
  list_del(& item->next_signal);
#line 124
  kmem_cache_free(tipc_queue_item_cache, (void *)item);
#line 121
  l = n;
#line 121
  n = l->next;
  }
  ldv_39662: ;
#line 121
  if ((unsigned long )l != (unsigned long )(& signal_queue_head)) {
#line 123
    goto ldv_39661;
  } else {

  }
  {
#line 126
  ldv_spin_unlock_bh_59___0(& qitem_lock);
#line 128
  kmem_cache_destroy(tipc_queue_item_cache);
  }
#line 129
  return;
}
}
#line 773 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_handler.c.aux"
__inline static void ldv_spin_lock_bh_58___0(spinlock_t *lock ) 
{ 


  {
  {
#line 776
  ldv_spin_lock_qitem_lock();
#line 778
  spin_lock_bh(lock);
  }
#line 779
  return;
}
}
#line 782 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_handler.c.aux"
__inline static void ldv_spin_unlock_bh_59___0(spinlock_t *lock ) 
{ 


  {
  {
#line 785
  ldv_spin_unlock_qitem_lock();
#line 787
  spin_unlock_bh(lock);
  }
#line 788
  return;
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size , gfp_t flags ) ;
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
extern void __list_del_entry(struct list_head * ) ;
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
  }
#line 146
  return;
}
}
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/dynamic_debug.h"
extern int __dynamic_pr_debug(struct _ddebug * , char const   *  , ...) ;
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kernel.h"
extern void might_fault(void) ;
#line 370
extern int sscanf(char const   * , char const   *  , ...) ;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/string.h"
extern char *strrchr(char const   * , int  ) ;
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/asm-generic/bug.h"
extern void warn_slowpath_fmt(char const   * , int const    , char const   *  , ...) ;
#line 149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_link.c.aux"
void ldv_spin_lock_lock_of_tipc_port(void) ;
#line 150
void ldv_spin_unlock_lock_of_tipc_port(void) ;
#line 229
void ldv_spin_lock_tipc_port_list_lock(void) ;
#line 230
void ldv_spin_unlock_tipc_port_list_lock(void) ;
#line 231
int ldv_spin_trylock_tipc_port_list_lock(void) ;
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock_api_smp.h"
extern int _raw_spin_trylock_bh(raw_spinlock_t * ) ;
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_58(spinlock_t *lock ) ;
#line 372
__inline static void ldv_spin_lock_bh_61___1(spinlock_t *lock ) ;
#line 376
__inline static void ldv_spin_lock_bh_64___0(spinlock_t *lock ) ;
#line 416
__inline static void ldv_spin_unlock_bh_59(spinlock_t *lock ) ;
#line 420
__inline static void ldv_spin_unlock_bh_60___0(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_unlock_bh_62___1(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_60___0(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_unlock_bh_62___1(spinlock_t *lock ) ;
#line 475 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static int spin_trylock_bh(spinlock_t *lock ) 
{ 
  int tmp ;

  {
  {
#line 477
  tmp = _raw_spin_trylock_bh(& lock->__annonCompField19.rlock);
  }
#line 477
  return (tmp);
}
}
#line 483
__inline static int ldv_spin_trylock_bh_63(spinlock_t *lock ) ;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 297
extern unsigned long msecs_to_jiffies(unsigned int const    ) ;
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/timer.h"
extern void init_timer_key(struct timer_list * , unsigned int  , char const   * ,
                           struct lock_class_key * ) ;
#line 176
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 245
extern int del_timer_sync(struct timer_list * ) ;
#line 636 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/uaccess_64.h"
extern unsigned long _copy_from_user(void * , void const   * , unsigned int  ) ;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/uaccess_64.h"
__inline static unsigned long copy_from_user(void *to , void const   *from , unsigned long n ) 
{ 
  int sz ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 59
  sz = -1;
#line 61
  might_fault();
#line 62
  tmp___0 = __builtin_expect(sz == -1, 1L);
  }
#line 62
  if (tmp___0 != 0L) {
    {
#line 63
    n = _copy_from_user(to, from, (unsigned int )n);
    }
  } else {
    {
#line 62
    tmp___1 = __builtin_expect((unsigned long )sz >= n, 1L);
    }
#line 62
    if (tmp___1 != 0L) {
      {
#line 63
      n = _copy_from_user(to, from, (unsigned int )n);
      }
    } else {
      {
#line 66
      __ret_warn_on = 1;
#line 66
      tmp = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 66
      if (tmp != 0L) {
        {
#line 66
        warn_slowpath_fmt("/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/uaccess_64.h",
                          66, "Buffer overflow detected!\n");
        }
      } else {

      }
      {
#line 66
      __builtin_expect(__ret_warn_on != 0, 0L);
      }
    }
  }
#line 68
  return (n);
}
}
#line 1296 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff  const  *skb ) 
{ 


  {
#line 1298
  return ((unsigned int )skb->len - (unsigned int )skb->data_len);
}
}
#line 1443
extern unsigned char *__pskb_pull_tail(struct sk_buff * , int  ) ;
#line 1459 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static int pskb_may_pull(struct sk_buff *skb , unsigned int len ) 
{ 
  unsigned int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  unsigned char *tmp___3 ;

  {
  {
#line 1461
  tmp = skb_headlen((struct sk_buff  const  *)skb);
#line 1461
  tmp___0 = __builtin_expect(len <= tmp, 1L);
  }
#line 1461
  if (tmp___0 != 0L) {
#line 1462
    return (1);
  } else {

  }
  {
#line 1463
  tmp___1 = __builtin_expect(len > skb->len, 0L);
  }
#line 1463
  if (tmp___1 != 0L) {
#line 1464
    return (0);
  } else {

  }
  {
#line 1465
  tmp___2 = skb_headlen((struct sk_buff  const  *)skb);
#line 1465
  tmp___3 = __pskb_pull_tail(skb, (int )(len - tmp___2));
  }
#line 1465
  return ((unsigned long )tmp___3 != (unsigned long )((unsigned char *)0U));
}
}
#line 1764
extern void skb_trim(struct sk_buff * , unsigned int  ) ;
#line 2207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb ) 
{ 
  unsigned char *tmp ;

  {
  {
#line 2209
  tmp = __pskb_pull_tail(skb, (int )skb->data_len);
  }
#line 2209
  return ((unsigned long )tmp != (unsigned long )((unsigned char *)0U) ? 0 : -12);
}
}
#line 2219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static int skb_linearize(struct sk_buff *skb ) 
{ 
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
  {
#line 2221
  tmp___2 = skb_is_nonlinear((struct sk_buff  const  *)skb);
  }
#line 2221
  if ((int )tmp___2) {
    {
#line 2221
    tmp___0 = __skb_linearize(skb);
#line 2221
    tmp___1 = tmp___0;
    }
  } else {
#line 2221
    tmp___1 = 0;
  }
#line 2221
  return (tmp___1);
}
}
#line 2374
extern int skb_copy_bits(struct sk_buff  const  * , int  , void * , int  ) ;
#line 2398 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void *skb_header_pointer(struct sk_buff  const  *skb , int offset ,
                                         int len , void *buffer ) 
{ 
  int hlen ;
  unsigned int tmp ;
  int tmp___0 ;

  {
  {
#line 2401
  tmp = skb_headlen(skb);
#line 2401
  hlen = (int )tmp;
  }
#line 2403
  if (hlen - offset >= len) {
#line 2404
    return ((void *)(skb->data + (unsigned long )offset));
  } else {

  }
  {
#line 2406
  tmp___0 = skb_copy_bits(skb, offset, buffer, len);
  }
#line 2406
  if (tmp___0 < 0) {
#line 2407
    return ((void *)0);
  } else {

  }
#line 2409
  return (buffer);
}
}
#line 2426 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb , void const   *from ,
                                             unsigned int const   len ) 
{ 


  {
  {
#line 2430
  memcpy((void *)skb->data, from, (size_t )len);
  }
#line 2431
  return;
}
}
#line 2433 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data_offset(struct sk_buff *skb , int const   offset ,
                                                    void const   *from , unsigned int const   len ) 
{ 


  {
  {
#line 2438
  memcpy((void *)(skb->data + (unsigned long )offset), from, (size_t )len);
  }
#line 2439
  return;
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/uapi/linux/tipc.h"
__inline static __u32 tipc_addr(unsigned int zone , unsigned int cluster , unsigned int node ) 
{ 


  {
#line 66
  return (((zone << 24) | (cluster << 12)) | node);
}
}
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
__inline static void k_init_timer(struct timer_list *timer , void (*routine)(unsigned long  ) ,
                                  unsigned long argument ) 
{ 
  struct lock_class_key __key ;

  {
  {
#line 131
  init_timer_key(timer, 0U, "((timer))", & __key);
#line 131
  timer->function = routine;
#line 131
  timer->data = argument;
  }
#line 132
  return;
}
}
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
__inline static void k_start_timer(struct timer_list *timer , unsigned long msec ) 
{ 
  unsigned long tmp ;

  {
  {
#line 149
  tmp = msecs_to_jiffies((unsigned int const   )msec);
#line 149
  mod_timer(timer, ((unsigned long )jiffies + tmp) + 1UL);
  }
#line 150
  return;
}
}
#line 162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
__inline static void k_cancel_timer(struct timer_list *timer ) 
{ 


  {
  {
#line 164
  del_timer_sync(timer);
  }
#line 165
  return;
}
}
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
__inline static void k_term_timer(struct timer_list *timer ) 
{ 


  {
#line 180
  return;
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/bearer.h"
void tipc_recv_msg(struct sk_buff *head , struct tipc_bearer *b_ptr ) ;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_version(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 123
  tmp = msg_bits(m, 0U, 29U, 7U);
  }
#line 123
  return (tmp);
}
}
#line 206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_size(struct tipc_msg *m , u32 sz ) 
{ 
  u32 tmp ;
  __u32 tmp___0 ;

  {
  {
#line 208
  tmp = msg_word(m, 0U);
#line 208
  tmp___0 = __fswab32((tmp & 4294836224U) | sz);
#line 208
  m->hdr[0] = tmp___0;
  }
#line 209
  return;
}
}
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_type(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 222
  msg_set_bits(m, 1U, 29U, 7U, n);
  }
#line 223
  return;
}
}
#line 260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_reset_reroute_cnt(struct tipc_msg *m ) 
{ 


  {
  {
#line 262
  msg_set_bits(m, 1U, 21U, 15U, 0U);
  }
#line 263
  return;
}
}
#line 322 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_origport(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 324
  tmp = msg_word(m, 4U);
  }
#line 324
  return (tmp);
}
}
#line 352 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static int msg_short(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 354
  tmp = msg_hdr_sz(m);
  }
#line 354
  return (tmp == 24U);
}
}
#line 357 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_orignode(struct tipc_msg *m ) 
{ 
  u32 tmp ;
  int tmp___0 ;
  long tmp___1 ;
  u32 tmp___2 ;

  {
  {
#line 359
  tmp___0 = msg_short(m);
#line 359
  tmp___1 = __builtin_expect(tmp___0 != 0, 1L);
  }
#line 359
  if (tmp___1 != 0L) {
    {
#line 360
    tmp = msg_prevnode(m);
    }
#line 360
    return (tmp);
  } else {

  }
  {
#line 361
  tmp___2 = msg_word(m, 6U);
  }
#line 361
  return (tmp___2);
}
}
#line 419 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static unchar *msg_data(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 421
  tmp = msg_hdr_sz(m);
  }
#line 421
  return ((unchar *)m + (unsigned long )tmp);
}
}
#line 424 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static struct tipc_msg *msg_get_wrapped(struct tipc_msg *m ) 
{ 
  unchar *tmp ;

  {
  {
#line 426
  tmp = msg_data(m);
  }
#line 426
  return ((struct tipc_msg *)tmp);
}
}
#line 489 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_seq_gap(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 491
  tmp = msg_bits(m, 1U, 16U, 8191U);
  }
#line 491
  return (tmp);
}
}
#line 494 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_seq_gap(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 496
  msg_set_bits(m, 1U, 16U, 8191U, n);
  }
#line 497
  return;
}
}
#line 547 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_last_bcast(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 549
  tmp = msg_bits(m, 4U, 16U, 65535U);
  }
#line 549
  return (tmp);
}
}
#line 552 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_last_bcast(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 554
  msg_set_bits(m, 4U, 16U, 65535U, n);
  }
#line 555
  return;
}
}
#line 569 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_next_sent(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 571
  tmp = msg_bits(m, 4U, 0U, 65535U);
  }
#line 571
  return (tmp);
}
}
#line 574 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_next_sent(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 576
  msg_set_bits(m, 4U, 0U, 65535U, n);
  }
#line 577
  return;
}
}
#line 600 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_link_selector(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 602
  tmp = msg_bits(m, 4U, 0U, 1U);
  }
#line 602
  return (tmp);
}
}
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_session(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 615
  tmp = msg_bits(m, 5U, 16U, 65535U);
  }
#line 615
  return (tmp);
}
}
#line 618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_session(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 620
  msg_set_bits(m, 5U, 16U, 65535U, n);
  }
#line 621
  return;
}
}
#line 623 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_probe(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 625
  tmp = msg_bits(m, 5U, 0U, 1U);
  }
#line 625
  return (tmp);
}
}
#line 628 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_probe(struct tipc_msg *m , u32 val ) 
{ 


  {
  {
#line 630
  msg_set_bits(m, 5U, 0U, 1U, val);
  }
#line 631
  return;
}
}
#line 633 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static char msg_net_plane(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 635
  tmp = msg_bits(m, 5U, 1U, 7U);
  }
#line 635
  return ((char )((unsigned int )((unsigned char )tmp) + 65U));
}
}
#line 638 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_net_plane(struct tipc_msg *m , char n ) 
{ 


  {
  {
#line 640
  msg_set_bits(m, 5U, 1U, 7U, (u32 )((int )n + -65));
  }
#line 641
  return;
}
}
#line 643 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_linkprio(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 645
  tmp = msg_bits(m, 5U, 4U, 31U);
  }
#line 645
  return (tmp);
}
}
#line 648 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_linkprio(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 650
  msg_set_bits(m, 5U, 4U, 31U, n);
  }
#line 651
  return;
}
}
#line 653 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_bearer_id(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 655
  tmp = msg_bits(m, 5U, 9U, 7U);
  }
#line 655
  return (tmp);
}
}
#line 658 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_bearer_id(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 660
  msg_set_bits(m, 5U, 9U, 7U, n);
  }
#line 661
  return;
}
}
#line 663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_redundant_link(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 665
  tmp = msg_bits(m, 5U, 12U, 1U);
  }
#line 665
  return (tmp);
}
}
#line 668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_redundant_link(struct tipc_msg *m , u32 r ) 
{ 


  {
  {
#line 670
  msg_set_bits(m, 5U, 12U, 1U, r);
  }
#line 671
  return;
}
}
#line 686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_msgcnt(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 688
  msg_set_bits(m, 9U, 16U, 65535U, n);
  }
#line 689
  return;
}
}
#line 701 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_max_pkt(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 703
  tmp = msg_bits(m, 9U, 16U, 65535U);
  }
#line 703
  return (tmp * 4U);
}
}
#line 706 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_max_pkt(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 708
  msg_set_bits(m, 9U, 16U, 65535U, n / 4U);
  }
#line 709
  return;
}
}
#line 711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_link_tolerance(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 713
  tmp = msg_bits(m, 9U, 0U, 65535U);
  }
#line 713
  return (tmp);
}
}
#line 716 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_link_tolerance(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 718
  msg_set_bits(m, 9U, 0U, 65535U, n);
  }
#line 719
  return;
}
}
#line 721
u32 tipc_msg_tot_importance(struct tipc_msg *m ) ;
#line 724
int tipc_msg_build(struct tipc_msg *hdr , struct iovec  const  *msg_sect , u32 num_sect ,
                   unsigned int total_len , int max_size , struct sk_buff **buf ) ;
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
void tipc_node_attach_link(struct tipc_node *n_ptr , struct tipc_link *l_ptr ) ;
#line 112
void tipc_node_detach_link(struct tipc_node *n_ptr , struct tipc_link *l_ptr ) ;
#line 113
void tipc_node_link_down(struct tipc_node *n_ptr , struct tipc_link *l_ptr ) ;
#line 114
void tipc_node_link_up(struct tipc_node *n_ptr , struct tipc_link *l_ptr ) ;
#line 115
int tipc_node_active_links(struct tipc_node *n_ptr ) ;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_lock___0(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 123
  ldv_spin_lock_bh_58(& n_ptr->lock);
  }
#line 124
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_unlock___0(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 128
  ldv_spin_unlock_bh_59(& n_ptr->lock);
  }
#line 129
  return;
}
}
#line 209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
struct tipc_link *tipc_link_create(struct tipc_node *n_ptr , struct tipc_bearer *b_ptr ,
                                   struct tipc_media_addr  const  *media_addr ) ;
#line 213
void tipc_link_changeover(struct tipc_link *l_ptr ) ;
#line 214
void tipc_link_send_duplicate(struct tipc_link *l_ptr , struct tipc_link *tunnel ) ;
#line 215
void tipc_link_reset_fragments(struct tipc_link *l_ptr ) ;
#line 216
int tipc_link_is_up(struct tipc_link *l_ptr ) ;
#line 217
int tipc_link_is_active(struct tipc_link *l_ptr ) ;
#line 218
u32 tipc_link_push_packet(struct tipc_link *l_ptr ) ;
#line 224
int tipc_link_send(struct sk_buff *buf , u32 dest , u32 selector ) ;
#line 225
void tipc_link_send_names(struct list_head *message_list , u32 dest ) ;
#line 227
u32 tipc_link_get_max_pkt(u32 dest , u32 selector ) ;
#line 228
int tipc_link_send_sections_fast(struct tipc_port *sender , struct iovec  const  *msg_sect ,
                                 u32 const   num_sect , unsigned int total_len , u32 destaddr ) ;
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static u32 lesser(u32 left , u32 right ) 
{ 
  int tmp ;

  {
  {
#line 282
  tmp = less_eq(left, right);
  }
#line 282
  return (tmp != 0 ? left : right);
}
}
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static int link_working_working(struct tipc_link *l_ptr ) 
{ 


  {
#line 291
  return (l_ptr->state == 560810);
}
}
#line 294 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static int link_working_unknown(struct tipc_link *l_ptr ) 
{ 


  {
#line 296
  return (l_ptr->state == 560811);
}
}
#line 299 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static int link_reset_unknown(struct tipc_link *l_ptr ) 
{ 


  {
#line 301
  return (l_ptr->state == 560812);
}
}
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static int link_reset_reset(struct tipc_link *l_ptr ) 
{ 


  {
#line 306
  return (l_ptr->state == 560813);
}
}
#line 309 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static int link_blocked(struct tipc_link *l_ptr ) 
{ 


  {
#line 311
  return (l_ptr->exp_msg_count != 0U || l_ptr->blocked != 0);
}
}
#line 314 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.h"
__inline static int link_congested(struct tipc_link *l_ptr ) 
{ 


  {
#line 316
  return (l_ptr->out_queue_size >= l_ptr->queue_limit[0]);
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.h"
void *tipc_ref_lock(u32 ref ) ;
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
spinlock_t tipc_port_list_lock ;
#line 115
int tipc_reject_msg(struct sk_buff *buf , u32 err ) ;
#line 153
int tipc_port_recv_msg(struct sk_buff *buf ) ;
#line 169
int tipc_port_reject_sections(struct tipc_port *p_ptr , struct tipc_msg *hdr , struct iovec  const  *msg_sect ,
                              u32 num_sect , unsigned int total_len , int err ) ;
#line 173
void tipc_port_recv_proto_msg(struct sk_buff *buf ) ;
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
__inline static struct tipc_port *tipc_port_lock(u32 ref ) 
{ 
  void *tmp ;

  {
  {
#line 182
  tmp = tipc_ref_lock(ref);
  }
#line 182
  return ((struct tipc_port *)tmp);
}
}
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
__inline static void tipc_port_unlock(struct tipc_port *p_ptr ) 
{ 


  {
  {
#line 192
  ldv_spin_unlock_bh_60___0(p_ptr->lock);
  }
#line 193
  return;
}
}
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.h"
void tipc_disc_recv_msg(struct sk_buff *buf , struct tipc_bearer *b_ptr ) ;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static char const   *link_co_err  =    "Link changeover error, ";
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static char const   *link_rst_msg  =    "Resetting link ";
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static char const   *link_unk_evt  =    "Unknown link event ";
#line 92
static void link_handle_out_of_seq_msg(struct tipc_link *l_ptr , struct sk_buff *buf ) ;
#line 94
static void link_recv_proto_msg(struct tipc_link *l_ptr , struct sk_buff *buf ) ;
#line 95
static int link_recv_changeover_msg(struct tipc_link **l_ptr , struct sk_buff **buf ) ;
#line 97
static void link_set_supervision_props(struct tipc_link *l_ptr , u32 tolerance ) ;
#line 98
static int link_send_sections_long(struct tipc_port *sender , struct iovec  const  *msg_sect ,
                                   u32 num_sect , unsigned int total_len , u32 destaddr ) ;
#line 102
static void link_state_event(struct tipc_link *l_ptr , unsigned int event ) ;
#line 103
static void link_reset_statistics(struct tipc_link *l_ptr ) ;
#line 104
static void link_print(struct tipc_link *l_ptr , char const   *str ) ;
#line 105
static void link_start(struct tipc_link *l_ptr ) ;
#line 106
static int link_send_long_buf(struct tipc_link *l_ptr , struct sk_buff *buf ) ;
#line 107
static void tipc_link_send_sync(struct tipc_link *l ) ;
#line 108
static void tipc_link_recv_sync(struct tipc_node *n , struct sk_buff *buf ) ;
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static unsigned int align(unsigned int i ) 
{ 


  {
#line 115
  return ((i + 3U) & 4294967292U);
}
}
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_init_max_pkt(struct tipc_link *l_ptr ) 
{ 
  u32 max_pkt ;

  {
#line 122
  max_pkt = (l_ptr->b_ptr)->mtu & 4294967292U;
#line 123
  if (max_pkt > 66060U) {
#line 124
    max_pkt = 66060U;
  } else {

  }
#line 126
  l_ptr->max_pkt_target = max_pkt;
#line 127
  if (l_ptr->max_pkt_target <= 1499U) {
#line 128
    l_ptr->max_pkt = l_ptr->max_pkt_target;
  } else {
#line 130
    l_ptr->max_pkt = 1500U;
  }
#line 132
  l_ptr->max_pkt_probes = 0U;
#line 133
  return;
}
}
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static u32 link_next_sent(struct tipc_link *l_ptr ) 
{ 
  u32 tmp ;
  u32 tmp___0 ;

  {
#line 137
  if ((unsigned long )l_ptr->next_out != (unsigned long )((struct sk_buff *)0)) {
    {
#line 138
    tmp = buf_seqno(l_ptr->next_out);
    }
#line 138
    return (tmp);
  } else {

  }
  {
#line 139
  tmp___0 = mod(l_ptr->next_out_no);
  }
#line 139
  return (tmp___0);
}
}
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static u32 link_last_sent(struct tipc_link *l_ptr ) 
{ 
  u32 tmp ;
  u32 tmp___0 ;

  {
  {
#line 144
  tmp = link_next_sent(l_ptr);
#line 144
  tmp___0 = mod(tmp - 1U);
  }
#line 144
  return (tmp___0);
}
}
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
int tipc_link_is_up(struct tipc_link *l_ptr ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 152
  if ((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0)) {
#line 153
    return (0);
  } else {

  }
  {
#line 154
  tmp = link_working_working(l_ptr);
  }
#line 154
  if (tmp != 0) {
#line 154
    tmp___1 = 1;
  } else {
    {
#line 154
    tmp___0 = link_working_unknown(l_ptr);
    }
#line 154
    if (tmp___0 != 0) {
#line 154
      tmp___1 = 1;
    } else {
#line 154
      tmp___1 = 0;
    }
  }
#line 154
  return (tmp___1);
}
}
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
int tipc_link_is_active(struct tipc_link *l_ptr ) 
{ 


  {
#line 159
  return ((unsigned long )(l_ptr->owner)->active_links[0] == (unsigned long )l_ptr || (unsigned long )(l_ptr->owner)->active_links[1] == (unsigned long )l_ptr);
}
}
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_name_validate(char const   *name , struct tipc_link_name *name_parts ) 
{ 
  char name_copy[60U] ;
  char *addr_local ;
  char *if_local ;
  char *addr_peer ;
  char *if_peer ;
  char dummy ;
  u32 z_local ;
  u32 c_local ;
  u32 n_local ;
  u32 z_peer ;
  u32 c_peer ;
  u32 n_peer ;
  u32 if_local_len ;
  u32 if_peer_len ;
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;
  size_t tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 185
  name_copy[59] = 0;
#line 187
  strncpy((char *)(& name_copy), name, 60UL);
  }
#line 188
  if ((int )((signed char )name_copy[59]) != 0) {
#line 189
    return (0);
  } else {

  }
  {
#line 192
  addr_local = (char *)(& name_copy);
#line 193
  if_local = strchr((char const   *)addr_local, 58);
  }
#line 194
  if ((unsigned long )if_local == (unsigned long )((char *)0)) {
#line 195
    return (0);
  } else {

  }
  {
#line 196
  tmp = if_local;
#line 196
  if_local = if_local + 1;
#line 196
  *tmp = 0;
#line 197
  addr_peer = strchr((char const   *)if_local, 45);
  }
#line 198
  if ((unsigned long )addr_peer == (unsigned long )((char *)0)) {
#line 199
    return (0);
  } else {

  }
  {
#line 200
  tmp___0 = addr_peer;
#line 200
  addr_peer = addr_peer + 1;
#line 200
  *tmp___0 = 0;
#line 201
  if_local_len = (u32 )((long )addr_peer) - (u32 )((long )if_local);
#line 202
  if_peer = strchr((char const   *)addr_peer, 58);
  }
#line 203
  if ((unsigned long )if_peer == (unsigned long )((char *)0)) {
#line 204
    return (0);
  } else {

  }
  {
#line 205
  tmp___1 = if_peer;
#line 205
  if_peer = if_peer + 1;
#line 205
  *tmp___1 = 0;
#line 206
  tmp___2 = strlen((char const   *)if_peer);
#line 206
  if_peer_len = (u32 )tmp___2 + 1U;
#line 209
  tmp___3 = sscanf((char const   *)addr_local, "%u.%u.%u%c", & z_local, & c_local,
                   & n_local, & dummy);
  }
#line 209
  if (tmp___3 != 3) {
#line 217
    return (0);
  } else {
    {
#line 209
    tmp___4 = sscanf((char const   *)addr_peer, "%u.%u.%u%c", & z_peer, & c_peer,
                     & n_peer, & dummy);
    }
#line 209
    if (tmp___4 != 3) {
#line 217
      return (0);
    } else
#line 209
    if (z_local > 255U) {
#line 217
      return (0);
    } else
#line 209
    if (c_local > 4095U) {
#line 217
      return (0);
    } else
#line 209
    if (n_local > 4095U) {
#line 217
      return (0);
    } else
#line 209
    if (z_peer > 255U) {
#line 217
      return (0);
    } else
#line 209
    if (c_peer > 4095U) {
#line 217
      return (0);
    } else
#line 209
    if (n_peer > 4095U || if_local_len <= 1U) {
#line 217
      return (0);
    } else
#line 209
    if (if_local_len > 16U || if_peer_len <= 1U) {
#line 217
      return (0);
    } else
#line 209
    if (if_peer_len > 16U) {
#line 217
      return (0);
    } else {

    }
  }
#line 220
  if ((unsigned long )name_parts != (unsigned long )((struct tipc_link_name *)0)) {
    {
#line 221
    name_parts->addr_local = tipc_addr(z_local, c_local, n_local);
#line 222
    strcpy((char *)(& name_parts->if_local), (char const   *)if_local);
#line 223
    name_parts->addr_peer = tipc_addr(z_peer, c_peer, n_peer);
#line 224
    strcpy((char *)(& name_parts->if_peer), (char const   *)if_peer);
    }
  } else {

  }
#line 226
  return (1);
}
}
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_timeout(struct tipc_link *l_ptr ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  u32 length ;
  u32 tmp___0 ;
  struct tipc_msg *tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;

  {
  {
#line 240
  tipc_node_lock___0(l_ptr->owner);
#line 243
  l_ptr->stats.accu_queue_sz = l_ptr->stats.accu_queue_sz + l_ptr->out_queue_size;
#line 244
  l_ptr->stats.queue_sz_counts = l_ptr->stats.queue_sz_counts + 1U;
  }
#line 246
  if ((unsigned long )l_ptr->first_out != (unsigned long )((struct sk_buff *)0)) {
    {
#line 247
    tmp = buf_msg(l_ptr->first_out);
#line 247
    msg = tmp;
#line 248
    tmp___0 = msg_size(msg);
#line 248
    length = tmp___0;
#line 250
    tmp___2 = msg_user(msg);
    }
#line 250
    if (tmp___2 == 12U) {
      {
#line 250
      tmp___3 = msg_type(msg);
      }
#line 250
      if (tmp___3 == 0U) {
        {
#line 252
        tmp___1 = msg_get_wrapped(msg);
#line 252
        length = msg_size(tmp___1);
        }
      } else {

      }
    } else {

    }
#line 254
    if (length != 0U) {
#line 255
      l_ptr->stats.msg_lengths_total = l_ptr->stats.msg_lengths_total + length;
#line 256
      l_ptr->stats.msg_length_counts = l_ptr->stats.msg_length_counts + 1U;
#line 257
      if (length <= 64U) {
#line 258
        l_ptr->stats.msg_length_profile[0] = l_ptr->stats.msg_length_profile[0] + 1U;
      } else
#line 259
      if (length <= 256U) {
#line 260
        l_ptr->stats.msg_length_profile[1] = l_ptr->stats.msg_length_profile[1] + 1U;
      } else
#line 261
      if (length <= 1024U) {
#line 262
        l_ptr->stats.msg_length_profile[2] = l_ptr->stats.msg_length_profile[2] + 1U;
      } else
#line 263
      if (length <= 4096U) {
#line 264
        l_ptr->stats.msg_length_profile[3] = l_ptr->stats.msg_length_profile[3] + 1U;
      } else
#line 265
      if (length <= 16384U) {
#line 266
        l_ptr->stats.msg_length_profile[4] = l_ptr->stats.msg_length_profile[4] + 1U;
      } else
#line 267
      if (length <= 32768U) {
#line 268
        l_ptr->stats.msg_length_profile[5] = l_ptr->stats.msg_length_profile[5] + 1U;
      } else {
#line 270
        l_ptr->stats.msg_length_profile[6] = l_ptr->stats.msg_length_profile[6] + 1U;
      }
    } else {

    }
  } else {

  }
  {
#line 276
  link_state_event(l_ptr, 560817U);
  }
#line 278
  if ((unsigned long )l_ptr->next_out != (unsigned long )((struct sk_buff *)0)) {
    {
#line 279
    tipc_link_push_queue(l_ptr);
    }
  } else {

  }
  {
#line 281
  tipc_node_unlock___0(l_ptr->owner);
  }
#line 282
  return;
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_set_timer(struct tipc_link *l_ptr , u32 time ) 
{ 


  {
  {
#line 286
  k_start_timer(& l_ptr->timer, (unsigned long )time);
  }
#line 287
  return;
}
}
#line 297 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
struct tipc_link *tipc_link_create(struct tipc_node *n_ptr , struct tipc_bearer *b_ptr ,
                                   struct tipc_media_addr  const  *media_addr ) 
{ 
  struct tipc_link *l_ptr ;
  struct tipc_msg *msg ;
  char *if_name ;
  char addr_string[16U] ;
  u32 peer ;
  void *tmp ;
  char *tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unchar *tmp___7 ;

  {
#line 305
  peer = n_ptr->addr;
#line 307
  if (n_ptr->link_cnt > 1) {
    {
#line 308
    tipc_addr_string_fill((char *)(& addr_string), n_ptr->addr);
#line 309
    printk("\vtipc: Attempt to establish third link to %s\n", (char *)(& addr_string));
    }
#line 310
    return ((struct tipc_link *)0);
  } else {

  }
#line 313
  if ((unsigned long )n_ptr->links[b_ptr->identity] != (unsigned long )((struct tipc_link *)0)) {
    {
#line 314
    tipc_addr_string_fill((char *)(& addr_string), n_ptr->addr);
#line 315
    printk("\vtipc: Attempt to establish second link on <%s> to %s\n", (char *)(& b_ptr->name),
           (char *)(& addr_string));
    }
#line 317
    return ((struct tipc_link *)0);
  } else {

  }
  {
#line 320
  tmp = kzalloc(696UL, 32U);
#line 320
  l_ptr = (struct tipc_link *)tmp;
  }
#line 321
  if ((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0)) {
    {
#line 322
    printk("\ftipc: Link creation failed, no memory\n");
    }
#line 323
    return ((struct tipc_link *)0);
  } else {

  }
  {
#line 326
  l_ptr->addr = peer;
#line 327
  tmp___0 = strchr((char const   *)(& b_ptr->name), 58);
#line 327
  if_name = tmp___0 + 1UL;
#line 328
  tmp___1 = tipc_node(peer);
#line 328
  tmp___2 = tipc_cluster(peer);
#line 328
  tmp___3 = tipc_zone(peer);
#line 328
  tmp___4 = tipc_node(tipc_own_addr);
#line 328
  tmp___5 = tipc_cluster(tipc_own_addr);
#line 328
  tmp___6 = tipc_zone(tipc_own_addr);
#line 328
  sprintf((char *)(& l_ptr->name), "%u.%u.%u:%s-%u.%u.%u:unknown", tmp___6, tmp___5,
          tmp___4, if_name, tmp___3, tmp___2, tmp___1);
#line 334
  memcpy((void *)(& l_ptr->media_addr), (void const   *)media_addr, 22UL);
#line 335
  l_ptr->owner = n_ptr;
#line 336
  l_ptr->checkpoint = 1U;
#line 337
  l_ptr->peer_session = 65536U;
#line 338
  l_ptr->b_ptr = b_ptr;
#line 339
  link_set_supervision_props(l_ptr, b_ptr->tolerance);
#line 340
  l_ptr->state = 560812;
#line 342
  l_ptr->pmsg = (struct tipc_msg *)(& l_ptr->proto_msg);
#line 343
  msg = l_ptr->pmsg;
#line 344
  tipc_msg_init(msg, 7U, 1U, 40U, l_ptr->addr);
#line 345
  msg_set_size(msg, 56U);
#line 346
  msg_set_session(msg, (u32 )tipc_random & 65535U);
#line 347
  msg_set_bearer_id(msg, b_ptr->identity);
#line 348
  tmp___7 = msg_data(msg);
#line 348
  strcpy((char *)tmp___7, (char const   *)if_name);
#line 350
  l_ptr->priority = b_ptr->priority;
#line 351
  tipc_link_set_queue_limits(l_ptr, b_ptr->window);
#line 353
  link_init_max_pkt(l_ptr);
#line 355
  l_ptr->next_out_no = 1U;
#line 356
  INIT_LIST_HEAD(& l_ptr->waiting_ports);
#line 358
  link_reset_statistics(l_ptr);
#line 360
  tipc_node_attach_link(n_ptr, l_ptr);
#line 362
  k_init_timer(& l_ptr->timer, (void (*)(unsigned long  ))(& link_timeout), (unsigned long )l_ptr);
#line 363
  list_add_tail(& l_ptr->link_list, & b_ptr->links);
#line 364
  tipc_k_signal((void (*)(unsigned long  ))(& link_start), (unsigned long )l_ptr);
  }
#line 366
  return (l_ptr);
}
}
#line 377 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_delete(struct tipc_link *l_ptr ) 
{ 


  {
#line 379
  if ((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0)) {
    {
#line 380
    printk("\vtipc: Attempt to delete non-existent link\n");
    }
#line 381
    return;
  } else {

  }
  {
#line 384
  k_cancel_timer(& l_ptr->timer);
#line 386
  tipc_node_lock___0(l_ptr->owner);
#line 387
  tipc_link_reset(l_ptr);
#line 388
  tipc_node_detach_link(l_ptr->owner, l_ptr);
#line 389
  tipc_link_stop(l_ptr);
#line 390
  list_del_init(& l_ptr->link_list);
#line 391
  tipc_node_unlock___0(l_ptr->owner);
#line 392
  k_term_timer(& l_ptr->timer);
#line 393
  kfree((void const   *)l_ptr);
  }
#line 394
  return;
}
}
#line 396 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_start(struct tipc_link *l_ptr ) 
{ 


  {
  {
#line 398
  tipc_node_lock___0(l_ptr->owner);
#line 399
  link_state_event(l_ptr, 856384768U);
#line 400
  tipc_node_unlock___0(l_ptr->owner);
  }
#line 401
  return;
}
}
#line 412 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_schedule_port(struct tipc_link *l_ptr , u32 origport , u32 sz ) 
{ 
  struct tipc_port *p_ptr ;
  int tmp ;

  {
  {
#line 416
  ldv_spin_lock_bh_61___1(& tipc_port_list_lock);
#line 417
  p_ptr = tipc_port_lock(origport);
  }
#line 418
  if ((unsigned long )p_ptr != (unsigned long )((struct tipc_port *)0)) {
#line 419
    if ((unsigned long )p_ptr->wakeup == (unsigned long )((void (*)(struct tipc_port * ))0)) {
#line 420
      goto exit;
    } else {

    }
    {
#line 421
    tmp = list_empty((struct list_head  const  *)(& p_ptr->wait_list));
    }
#line 421
    if (tmp == 0) {
#line 422
      goto exit;
    } else {

    }
    {
#line 423
    p_ptr->congested = 1U;
#line 424
    p_ptr->waiting_pkts = (sz - 1U) / l_ptr->max_pkt + 1U;
#line 425
    list_add_tail(& p_ptr->wait_list, & l_ptr->waiting_ports);
#line 426
    l_ptr->stats.link_congs = l_ptr->stats.link_congs + 1U;
    }
    exit: 
    {
#line 428
    tipc_port_unlock(p_ptr);
    }
  } else {

  }
  {
#line 430
  ldv_spin_unlock_bh_62___1(& tipc_port_list_lock);
  }
#line 431
  return (-11);
}
}
#line 434 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_wakeup_ports(struct tipc_link *l_ptr , int all ) 
{ 
  struct tipc_port *p_ptr ;
  struct tipc_port *temp_p_ptr ;
  int win ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 438
  win = (int )(l_ptr->queue_limit[0] - l_ptr->out_queue_size);
#line 440
  if (all != 0) {
#line 441
    win = 100000;
  } else {

  }
#line 442
  if (win <= 0) {
#line 443
    return;
  } else {

  }
  {
#line 444
  tmp = ldv_spin_trylock_bh_63(& tipc_port_list_lock);
  }
#line 444
  if (tmp == 0) {
#line 445
    return;
  } else {

  }
  {
#line 446
  tmp___0 = link_congested(l_ptr);
  }
#line 446
  if (tmp___0 != 0) {
#line 447
    goto exit;
  } else {

  }
#line 448
  __mptr = (struct list_head  const  *)l_ptr->waiting_ports.next;
#line 448
  p_ptr = (struct tipc_port *)((char *)__mptr + 0xffffffffffffff70UL);
#line 448
  __mptr___0 = (struct list_head  const  *)p_ptr->wait_list.next;
#line 448
  temp_p_ptr = (struct tipc_port *)((char *)__mptr___0 + 0xffffffffffffff70UL);
#line 448
  goto ldv_41324;
  ldv_41323: ;
#line 450
  if (win <= 0) {
#line 451
    goto ldv_41322;
  } else {

  }
  {
#line 452
  list_del_init(& p_ptr->wait_list);
#line 453
  ldv_spin_lock_bh_64___0(p_ptr->lock);
#line 454
  p_ptr->congested = 0U;
#line 455
  (*(p_ptr->wakeup))(p_ptr);
#line 456
  win = (int )((u32 )win - p_ptr->waiting_pkts);
#line 457
  ldv_spin_unlock_bh_60___0(p_ptr->lock);
#line 448
  p_ptr = temp_p_ptr;
#line 448
  __mptr___1 = (struct list_head  const  *)temp_p_ptr->wait_list.next;
#line 448
  temp_p_ptr = (struct tipc_port *)((char *)__mptr___1 + 0xffffffffffffff70UL);
  }
  ldv_41324: ;
#line 448
  if ((unsigned long )(& p_ptr->wait_list) != (unsigned long )(& l_ptr->waiting_ports)) {
#line 450
    goto ldv_41323;
  } else {

  }
  ldv_41322: ;
  exit: 
  {
#line 461
  ldv_spin_unlock_bh_62___1(& tipc_port_list_lock);
  }
#line 462
  return;
}
}
#line 468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_release_outqueue(struct tipc_link *l_ptr ) 
{ 
  struct sk_buff *buf ;
  struct sk_buff *next ;

  {
#line 470
  buf = l_ptr->first_out;
#line 473
  goto ldv_41331;
  ldv_41330: 
  {
#line 474
  next = buf->next;
#line 475
  kfree_skb(buf);
#line 476
  buf = next;
  }
  ldv_41331: ;
#line 473
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
#line 475
    goto ldv_41330;
  } else {

  }
#line 478
  l_ptr->first_out = (struct sk_buff *)0;
#line 479
  l_ptr->out_queue_size = 0U;
#line 480
  return;
}
}
#line 486 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_reset_fragments(struct tipc_link *l_ptr ) 
{ 
  struct sk_buff *buf ;
  struct sk_buff *next ;

  {
#line 488
  buf = l_ptr->defragm_buf;
#line 491
  goto ldv_41339;
  ldv_41338: 
  {
#line 492
  next = buf->next;
#line 493
  kfree_skb(buf);
#line 494
  buf = next;
  }
  ldv_41339: ;
#line 491
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
#line 493
    goto ldv_41338;
  } else {

  }
#line 496
  l_ptr->defragm_buf = (struct sk_buff *)0;
#line 497
  return;
}
}
#line 503 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_stop(struct tipc_link *l_ptr ) 
{ 
  struct sk_buff *buf ;
  struct sk_buff *next ;

  {
#line 508
  buf = l_ptr->oldest_deferred_in;
#line 509
  goto ldv_41347;
  ldv_41346: 
  {
#line 510
  next = buf->next;
#line 511
  kfree_skb(buf);
#line 512
  buf = next;
  }
  ldv_41347: ;
#line 509
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
#line 511
    goto ldv_41346;
  } else {

  }
#line 515
  buf = l_ptr->first_out;
#line 516
  goto ldv_41350;
  ldv_41349: 
  {
#line 517
  next = buf->next;
#line 518
  kfree_skb(buf);
#line 519
  buf = next;
  }
  ldv_41350: ;
#line 516
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
#line 518
    goto ldv_41349;
  } else {

  }
  {
#line 522
  tipc_link_reset_fragments(l_ptr);
#line 524
  kfree_skb(l_ptr->proto_msg_queue);
#line 525
  l_ptr->proto_msg_queue = (struct sk_buff *)0;
  }
#line 526
  return;
}
}
#line 528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_reset(struct tipc_link *l_ptr ) 
{ 
  struct sk_buff *buf ;
  u32 prev_state ;
  u32 checkpoint ;
  int was_active_link ;
  int tmp ;
  u32 tmp___0 ;
  int tmp___1 ;
  struct sk_buff *next ;
  int tmp___2 ;

  {
  {
#line 531
  prev_state = (u32 )l_ptr->state;
#line 532
  checkpoint = l_ptr->next_in_no;
#line 533
  tmp = tipc_link_is_active(l_ptr);
#line 533
  was_active_link = tmp;
#line 535
  tmp___0 = msg_session(l_ptr->pmsg);
#line 535
  msg_set_session(l_ptr->pmsg, (tmp___0 + 1U) & 65535U);
#line 538
  l_ptr->peer_session = 65536U;
#line 541
  link_init_max_pkt(l_ptr);
#line 543
  l_ptr->state = 560812;
  }
#line 545
  if (prev_state - 560812U <= 1U) {
#line 546
    return;
  } else {

  }
  {
#line 548
  tipc_node_link_down(l_ptr->owner, l_ptr);
#line 549
  tipc_bearer_remove_dest(l_ptr->b_ptr, l_ptr->addr);
  }
#line 551
  if (was_active_link != 0) {
    {
#line 551
    tmp___1 = tipc_node_active_links(l_ptr->owner);
    }
#line 551
    if (tmp___1 != 0) {
#line 551
      if ((l_ptr->owner)->permit_changeover != 0) {
#line 553
        l_ptr->reset_checkpoint = checkpoint;
#line 554
        l_ptr->exp_msg_count = 100000U;
      } else {

      }
    } else {

    }
  } else {

  }
  {
#line 558
  link_release_outqueue(l_ptr);
#line 559
  kfree_skb(l_ptr->proto_msg_queue);
#line 560
  l_ptr->proto_msg_queue = (struct sk_buff *)0;
#line 561
  buf = l_ptr->oldest_deferred_in;
  }
#line 562
  goto ldv_41361;
  ldv_41360: 
  {
#line 563
  next = buf->next;
#line 564
  kfree_skb(buf);
#line 565
  buf = next;
  }
  ldv_41361: ;
#line 562
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
#line 564
    goto ldv_41360;
  } else {

  }
  {
#line 567
  tmp___2 = list_empty((struct list_head  const  *)(& l_ptr->waiting_ports));
  }
#line 567
  if (tmp___2 == 0) {
    {
#line 568
    tipc_link_wakeup_ports(l_ptr, 1);
    }
  } else {

  }
  {
#line 570
  l_ptr->retransm_queue_head = 0U;
#line 571
  l_ptr->retransm_queue_size = 0U;
#line 572
  l_ptr->last_out = (struct sk_buff *)0;
#line 573
  l_ptr->first_out = (struct sk_buff *)0;
#line 574
  l_ptr->next_out = (struct sk_buff *)0;
#line 575
  l_ptr->unacked_window = 0U;
#line 576
  l_ptr->checkpoint = 1U;
#line 577
  l_ptr->next_out_no = 1U;
#line 578
  l_ptr->deferred_inqueue_sz = 0U;
#line 579
  l_ptr->oldest_deferred_in = (struct sk_buff *)0;
#line 580
  l_ptr->newest_deferred_in = (struct sk_buff *)0;
#line 581
  l_ptr->fsm_msg_cnt = 0U;
#line 582
  l_ptr->stale_count = 0U;
#line 583
  link_reset_statistics(l_ptr);
  }
#line 584
  return;
}
}
#line 587 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_activate(struct tipc_link *l_ptr ) 
{ 
  u32 tmp ;

  {
  {
#line 589
  tmp = 1U;
#line 589
  l_ptr->stats.recv_info = tmp;
#line 589
  l_ptr->next_in_no = tmp;
#line 590
  tipc_node_link_up(l_ptr->owner, l_ptr);
#line 591
  tipc_bearer_add_dest(l_ptr->b_ptr, l_ptr->addr);
  }
#line 592
  return;
}
}
#line 599 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_state_event(struct tipc_link *l_ptr , unsigned int event ) 
{ 
  struct tipc_link *other ;
  u32 cont_intv ;
  int tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 602
  cont_intv = l_ptr->continuity_interval;
#line 604
  if (l_ptr->started == 0 && event != 856384768U) {
#line 605
    return;
  } else {

  }
  {
#line 607
  tmp = link_blocked(l_ptr);
  }
#line 607
  if (tmp != 0) {
#line 608
    if (event == 560817U) {
      {
#line 609
      link_set_timer(l_ptr, cont_intv);
      }
    } else {

    }
#line 610
    return;
  } else {

  }
  {
#line 614
  if (l_ptr->state == 560810) {
#line 614
    goto case_560810;
  } else {

  }
#line 654
  if (l_ptr->state == 560811) {
#line 654
    goto case_560811;
  } else {

  }
#line 704
  if (l_ptr->state == 560812) {
#line 704
    goto case_560812;
  } else {

  }
#line 740
  if (l_ptr->state == 560813) {
#line 740
    goto case_560813;
  } else {

  }
#line 767
  goto switch_default___3;
  case_560810: /* CIL Label */ ;
  {
#line 616
  if (event == 560815U) {
#line 616
    goto case_560815;
  } else {

  }
#line 617
  if (event == 2U) {
#line 617
    goto case_2;
  } else {

  }
#line 619
  if (event == 560817U) {
#line 619
    goto case_560817;
  } else {

  }
#line 640
  if (event == 1U) {
#line 640
    goto case_1;
  } else {

  }
#line 650
  goto switch_default;
  case_560815: /* CIL Label */ ;
  case_2: /* CIL Label */ ;
#line 618
  goto ldv_41375;
  case_560817: /* CIL Label */ ;
#line 620
  if (l_ptr->next_in_no != l_ptr->checkpoint) {
    {
#line 621
    l_ptr->checkpoint = l_ptr->next_in_no;
#line 622
    tmp___0 = tipc_bclink_acks_missing(l_ptr->owner);
    }
#line 622
    if (tmp___0 != 0U) {
      {
#line 623
      tipc_link_send_proto_msg(l_ptr, 0U, 0, 0U, 0U, 0U, 0U);
#line 625
      l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
      }
    } else
#line 626
    if (l_ptr->max_pkt < l_ptr->max_pkt_target) {
      {
#line 627
      tipc_link_send_proto_msg(l_ptr, 0U, 1, 0U, 0U, 0U, 0U);
#line 629
      l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
      }
    } else {

    }
    {
#line 631
    link_set_timer(l_ptr, cont_intv);
    }
#line 632
    goto ldv_41375;
  } else {

  }
  {
#line 634
  l_ptr->state = 560811;
#line 635
  l_ptr->fsm_msg_cnt = 0U;
#line 636
  tipc_link_send_proto_msg(l_ptr, 0U, 1, 0U, 0U, 0U, 0U);
#line 637
  l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
#line 638
  link_set_timer(l_ptr, cont_intv / 4U);
  }
#line 639
  goto ldv_41375;
  case_1: /* CIL Label */ 
  {
#line 641
  printk("\016tipc: %s<%s>, requested by peer\n", link_rst_msg, (char *)(& l_ptr->name));
#line 643
  tipc_link_reset(l_ptr);
#line 644
  l_ptr->state = 560813;
#line 645
  l_ptr->fsm_msg_cnt = 0U;
#line 646
  tipc_link_send_proto_msg(l_ptr, 2U, 0, 0U, 0U, 0U, 0U);
#line 647
  l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
#line 648
  link_set_timer(l_ptr, cont_intv);
  }
#line 649
  goto ldv_41375;
  switch_default: /* CIL Label */ 
  {
#line 651
  printk("\vtipc: %s%u in WW state\n", link_unk_evt, event);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_41375: ;
#line 653
  goto ldv_41379;
  case_560811: /* CIL Label */ ;
  {
#line 656
  if (event == 560815U) {
#line 656
    goto case_560815___0;
  } else {

  }
#line 657
  if (event == 2U) {
#line 657
    goto case_2___0;
  } else {

  }
#line 662
  if (event == 1U) {
#line 662
    goto case_1___0;
  } else {

  }
#line 672
  if (event == 560817U) {
#line 672
    goto case_560817___0;
  } else {

  }
#line 700
  goto switch_default___0;
  case_560815___0: /* CIL Label */ ;
  case_2___0: /* CIL Label */ 
  {
#line 658
  l_ptr->state = 560810;
#line 659
  l_ptr->fsm_msg_cnt = 0U;
#line 660
  link_set_timer(l_ptr, cont_intv);
  }
#line 661
  goto ldv_41383;
  case_1___0: /* CIL Label */ 
  {
#line 663
  printk("\016tipc: %s<%s>, requested by peer while probing\n", link_rst_msg, (char *)(& l_ptr->name));
#line 665
  tipc_link_reset(l_ptr);
#line 666
  l_ptr->state = 560813;
#line 667
  l_ptr->fsm_msg_cnt = 0U;
#line 668
  tipc_link_send_proto_msg(l_ptr, 2U, 0, 0U, 0U, 0U, 0U);
#line 669
  l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
#line 670
  link_set_timer(l_ptr, cont_intv);
  }
#line 671
  goto ldv_41383;
  case_560817___0: /* CIL Label */ ;
#line 673
  if (l_ptr->next_in_no != l_ptr->checkpoint) {
    {
#line 674
    l_ptr->state = 560810;
#line 675
    l_ptr->fsm_msg_cnt = 0U;
#line 676
    l_ptr->checkpoint = l_ptr->next_in_no;
#line 677
    tmp___1 = tipc_bclink_acks_missing(l_ptr->owner);
    }
#line 677
    if (tmp___1 != 0U) {
      {
#line 678
      tipc_link_send_proto_msg(l_ptr, 0U, 0, 0U, 0U, 0U, 0U);
#line 680
      l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
      }
    } else {

    }
    {
#line 682
    link_set_timer(l_ptr, cont_intv);
    }
  } else
#line 683
  if (l_ptr->fsm_msg_cnt < l_ptr->abort_limit) {
    {
#line 684
    tipc_link_send_proto_msg(l_ptr, 0U, 1, 0U, 0U, 0U, 0U);
#line 686
    l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
#line 687
    link_set_timer(l_ptr, cont_intv / 4U);
    }
  } else {
    {
#line 689
    printk("\ftipc: %s<%s>, peer not responding\n", link_rst_msg, (char *)(& l_ptr->name));
#line 691
    tipc_link_reset(l_ptr);
#line 692
    l_ptr->state = 560812;
#line 693
    l_ptr->fsm_msg_cnt = 0U;
#line 694
    tipc_link_send_proto_msg(l_ptr, 1U, 0, 0U, 0U, 0U, 0U);
#line 696
    l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
#line 697
    link_set_timer(l_ptr, cont_intv);
    }
  }
#line 699
  goto ldv_41383;
  switch_default___0: /* CIL Label */ 
  {
#line 701
  printk("\vtipc: %s%u in WU state\n", link_unk_evt, event);
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_41383: ;
#line 703
  goto ldv_41379;
  case_560812: /* CIL Label */ ;
  {
#line 706
  if (event == 560815U) {
#line 706
    goto case_560815___1;
  } else {

  }
#line 708
  if (event == 2U) {
#line 708
    goto case_2___1;
  } else {

  }
#line 721
  if (event == 1U) {
#line 721
    goto case_1___1;
  } else {

  }
#line 728
  if (event == 856384768U) {
#line 728
    goto case_856384768;
  } else {

  }
#line 731
  if (event == 560817U) {
#line 731
    goto case_560817___1;
  } else {

  }
#line 736
  goto switch_default___1;
  case_560815___1: /* CIL Label */ ;
#line 707
  goto ldv_41389;
  case_2___1: /* CIL Label */ 
#line 709
  other = (l_ptr->owner)->active_links[0];
#line 710
  if ((unsigned long )other != (unsigned long )((struct tipc_link *)0)) {
    {
#line 710
    tmp___2 = link_working_unknown(other);
    }
#line 710
    if (tmp___2 != 0) {
#line 711
      goto ldv_41389;
    } else {

    }
  } else {

  }
  {
#line 712
  l_ptr->state = 560810;
#line 713
  l_ptr->fsm_msg_cnt = 0U;
#line 714
  link_activate(l_ptr);
#line 715
  tipc_link_send_proto_msg(l_ptr, 0U, 1, 0U, 0U, 0U, 0U);
#line 716
  l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
  }
#line 717
  if ((l_ptr->owner)->working_links == 1) {
    {
#line 718
    tipc_link_send_sync(l_ptr);
    }
  } else {

  }
  {
#line 719
  link_set_timer(l_ptr, cont_intv);
  }
#line 720
  goto ldv_41389;
  case_1___1: /* CIL Label */ 
  {
#line 722
  l_ptr->state = 560813;
#line 723
  l_ptr->fsm_msg_cnt = 0U;
#line 724
  tipc_link_send_proto_msg(l_ptr, 2U, 1, 0U, 0U, 0U, 0U);
#line 725
  l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
#line 726
  link_set_timer(l_ptr, cont_intv);
  }
#line 727
  goto ldv_41389;
  case_856384768: /* CIL Label */ 
#line 729
  l_ptr->started = 1;
  case_560817___1: /* CIL Label */ 
  {
#line 732
  tipc_link_send_proto_msg(l_ptr, 1U, 0, 0U, 0U, 0U, 0U);
#line 733
  l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
#line 734
  link_set_timer(l_ptr, cont_intv);
  }
#line 735
  goto ldv_41389;
  switch_default___1: /* CIL Label */ 
  {
#line 737
  printk("\vtipc: %s%u in RU state\n", link_unk_evt, event);
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_41389: ;
#line 739
  goto ldv_41379;
  case_560813: /* CIL Label */ ;
  {
#line 742
  if (event == 560815U) {
#line 742
    goto case_560815___2;
  } else {

  }
#line 743
  if (event == 2U) {
#line 743
    goto case_2___2;
  } else {

  }
#line 756
  if (event == 1U) {
#line 756
    goto case_1___2;
  } else {

  }
#line 758
  if (event == 560817U) {
#line 758
    goto case_560817___2;
  } else {

  }
#line 763
  goto switch_default___2;
  case_560815___2: /* CIL Label */ ;
  case_2___2: /* CIL Label */ 
#line 744
  other = (l_ptr->owner)->active_links[0];
#line 745
  if ((unsigned long )other != (unsigned long )((struct tipc_link *)0)) {
    {
#line 745
    tmp___3 = link_working_unknown(other);
    }
#line 745
    if (tmp___3 != 0) {
#line 746
      goto ldv_41398;
    } else {

    }
  } else {

  }
  {
#line 747
  l_ptr->state = 560810;
#line 748
  l_ptr->fsm_msg_cnt = 0U;
#line 749
  link_activate(l_ptr);
#line 750
  tipc_link_send_proto_msg(l_ptr, 0U, 1, 0U, 0U, 0U, 0U);
#line 751
  l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
  }
#line 752
  if ((l_ptr->owner)->working_links == 1) {
    {
#line 753
    tipc_link_send_sync(l_ptr);
    }
  } else {

  }
  {
#line 754
  link_set_timer(l_ptr, cont_intv);
  }
#line 755
  goto ldv_41398;
  case_1___2: /* CIL Label */ ;
#line 757
  goto ldv_41398;
  case_560817___2: /* CIL Label */ 
  {
#line 759
  tipc_link_send_proto_msg(l_ptr, 2U, 0, 0U, 0U, 0U, 0U);
#line 760
  l_ptr->fsm_msg_cnt = l_ptr->fsm_msg_cnt + 1U;
#line 761
  link_set_timer(l_ptr, cont_intv);
  }
#line 762
  goto ldv_41398;
  switch_default___2: /* CIL Label */ 
  {
#line 764
  printk("\vtipc: %s%u in RR state\n", link_unk_evt, event);
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_41398: ;
#line 766
  goto ldv_41379;
  switch_default___3: /* CIL Label */ 
  {
#line 768
  printk("\vtipc: Unknown link state %u/%u\n", l_ptr->state, event);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_41379: ;
#line 771
  return;
}
}
#line 776 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_bundle_buf(struct tipc_link *l_ptr , struct sk_buff *bundler , struct sk_buff *buf ) 
{ 
  struct tipc_msg *bundler_msg ;
  struct tipc_msg *tmp ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp___0 ;
  u32 size ;
  u32 tmp___1 ;
  u32 bundle_size ;
  u32 tmp___2 ;
  u32 to_pos ;
  unsigned int tmp___3 ;
  u32 pad ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  int tmp___6 ;
  u32 tmp___7 ;

  {
  {
#line 779
  tmp = buf_msg(bundler);
#line 779
  bundler_msg = tmp;
#line 780
  tmp___0 = buf_msg(buf);
#line 780
  msg = tmp___0;
#line 781
  tmp___1 = msg_size(msg);
#line 781
  size = tmp___1;
#line 782
  tmp___2 = msg_size(bundler_msg);
#line 782
  bundle_size = tmp___2;
#line 783
  tmp___3 = align(bundle_size);
#line 783
  to_pos = tmp___3;
#line 784
  pad = to_pos - bundle_size;
#line 786
  tmp___4 = msg_user(bundler_msg);
  }
#line 786
  if (tmp___4 != 6U) {
#line 787
    return (0);
  } else {

  }
  {
#line 788
  tmp___5 = msg_type(bundler_msg);
  }
#line 788
  if (tmp___5 != 0U) {
#line 789
    return (0);
  } else {

  }
  {
#line 790
  tmp___6 = skb_tailroom((struct sk_buff  const  *)bundler);
  }
#line 790
  if ((u32 )tmp___6 < pad + size) {
#line 791
    return (0);
  } else {

  }
#line 792
  if (l_ptr->max_pkt < to_pos + size) {
#line 793
    return (0);
  } else {

  }
  {
#line 795
  skb_put(bundler, pad + size);
#line 796
  skb_copy_to_linear_data_offset(bundler, (int const   )to_pos, (void const   *)buf->data,
                                 size);
#line 797
  msg_set_size(bundler_msg, to_pos + size);
#line 798
  tmp___7 = msg_msgcnt(bundler_msg);
#line 798
  msg_set_msgcnt(bundler_msg, tmp___7 + 1U);
#line 799
  kfree_skb(buf);
#line 800
  l_ptr->stats.sent_bundled = l_ptr->stats.sent_bundled + 1U;
  }
#line 801
  return (1);
}
}
#line 804 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_add_to_outqueue(struct tipc_link *l_ptr , struct sk_buff *buf , struct tipc_msg *msg ) 
{ 
  u32 ack ;
  u32 tmp ;
  u32 seqno ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  struct sk_buff *tmp___2 ;

  {
  {
#line 808
  tmp = mod(l_ptr->next_in_no - 1U);
#line 808
  ack = tmp;
#line 809
  tmp___0 = l_ptr->next_out_no;
#line 809
  l_ptr->next_out_no = l_ptr->next_out_no + 1U;
#line 809
  tmp___1 = mod(tmp___0);
#line 809
  seqno = tmp___1;
#line 811
  msg_set_word(msg, 2U, (ack << 16) | seqno);
#line 812
  msg_set_bcast_ack(msg, (l_ptr->owner)->bclink.last_in);
#line 813
  buf->next = (struct sk_buff *)0;
  }
#line 814
  if ((unsigned long )l_ptr->first_out != (unsigned long )((struct sk_buff *)0)) {
#line 815
    (l_ptr->last_out)->next = buf;
#line 816
    l_ptr->last_out = buf;
  } else {
#line 818
    tmp___2 = buf;
#line 818
    l_ptr->last_out = tmp___2;
#line 818
    l_ptr->first_out = tmp___2;
  }
#line 820
  l_ptr->out_queue_size = l_ptr->out_queue_size + 1U;
#line 821
  if (l_ptr->out_queue_size > l_ptr->stats.max_queue_sz) {
#line 822
    l_ptr->stats.max_queue_sz = l_ptr->out_queue_size;
  } else {

  }
#line 823
  return;
}
}
#line 825 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_add_chain_to_outqueue(struct tipc_link *l_ptr , struct sk_buff *buf_chain ,
                                       u32 long_msgno ) 
{ 
  struct sk_buff *buf ;
  struct tipc_msg *msg ;

  {
#line 832
  if ((unsigned long )l_ptr->next_out == (unsigned long )((struct sk_buff *)0)) {
#line 833
    l_ptr->next_out = buf_chain;
  } else {

  }
#line 834
  goto ldv_41429;
  ldv_41428: 
  {
#line 835
  buf = buf_chain;
#line 836
  buf_chain = buf_chain->next;
#line 838
  msg = buf_msg(buf);
#line 839
  msg_set_next_sent(msg, long_msgno);
#line 840
  link_add_to_outqueue(l_ptr, buf, msg);
  }
  ldv_41429: ;
#line 834
  if ((unsigned long )buf_chain != (unsigned long )((struct sk_buff *)0)) {
#line 836
    goto ldv_41428;
  } else {

  }

#line 841
  return;
}
}
#line 849 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
int tipc_link_send_buf(struct tipc_link *l_ptr , struct sk_buff *buf ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  u32 size ;
  u32 tmp___0 ;
  u32 dsz ;
  u32 tmp___1 ;
  u32 queue_size ;
  u32 imp ;
  u32 tmp___2 ;
  u32 queue_limit ;
  u32 max_packet ;
  u32 tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;
  struct sk_buff *bundler ;
  struct sk_buff *tmp___11 ;
  struct tipc_msg bundler_hdr ;
  u32 tmp___12 ;
  u32 tmp___13 ;

  {
  {
#line 851
  tmp = buf_msg(buf);
#line 851
  msg = tmp;
#line 852
  tmp___0 = msg_size(msg);
#line 852
  size = tmp___0;
#line 853
  tmp___1 = msg_data_sz(msg);
#line 853
  dsz = tmp___1;
#line 854
  queue_size = l_ptr->out_queue_size;
#line 855
  tmp___2 = tipc_msg_tot_importance(msg);
#line 855
  imp = tmp___2;
#line 856
  queue_limit = l_ptr->queue_limit[imp];
#line 857
  max_packet = l_ptr->max_pkt;
#line 860
  tmp___4 = __builtin_expect(queue_size >= queue_limit, 0L);
  }
#line 860
  if (tmp___4 != 0L) {
#line 861
    if (imp <= 3U) {
      {
#line 862
      tmp___3 = msg_origport(msg);
#line 862
      link_schedule_port(l_ptr, tmp___3, size);
#line 863
      kfree_skb(buf);
      }
#line 864
      return (-11);
    } else {

    }
    {
#line 866
    kfree_skb(buf);
    }
#line 867
    if (imp > 8U) {
      {
#line 868
      printk("\ftipc: %s<%s>, send queue full", link_rst_msg, (char *)(& l_ptr->name));
#line 870
      tipc_link_reset(l_ptr);
      }
    } else {

    }
#line 872
    return ((int )dsz);
  } else {

  }
#line 876
  if (size > max_packet) {
    {
#line 877
    tmp___5 = link_send_long_buf(l_ptr, buf);
    }
#line 877
    return (tmp___5);
  } else {

  }
  {
#line 880
  tmp___6 = tipc_bearer_blocked(l_ptr->b_ptr);
#line 880
  tmp___7 = __builtin_expect(tmp___6 == 0, 1L);
  }
#line 880
  if (tmp___7 != 0L) {
    {
#line 880
    tmp___8 = link_congested(l_ptr);
#line 880
    tmp___9 = __builtin_expect(tmp___8 == 0, 1L);
    }
#line 880
    if (tmp___9 != 0L) {
      {
#line 882
      link_add_to_outqueue(l_ptr, buf, msg);
#line 884
      tipc_bearer_send(l_ptr->b_ptr, buf, & l_ptr->media_addr);
#line 885
      l_ptr->unacked_window = 0U;
      }
#line 886
      return ((int )dsz);
    } else {

    }
  } else {

  }
  {
#line 889
  tmp___12 = msg_user(msg);
  }
#line 889
  if (tmp___12 != 10U) {
    {
#line 889
    tmp___13 = msg_user(msg);
    }
#line 889
    if (tmp___13 != 12U) {
#line 893
      if ((unsigned long )l_ptr->next_out != (unsigned long )((struct sk_buff *)0)) {
        {
#line 893
        tmp___10 = link_bundle_buf(l_ptr, l_ptr->last_out, buf);
        }
#line 893
        if (tmp___10 != 0) {
#line 895
          return ((int )dsz);
        } else {

        }
      } else {

      }
#line 898
      if (size <= (max_packet * 2U) / 3U) {
        {
#line 899
        tmp___11 = tipc_buf_acquire(max_packet);
#line 899
        bundler = tmp___11;
        }
#line 902
        if ((unsigned long )bundler != (unsigned long )((struct sk_buff *)0)) {
          {
#line 903
          tipc_msg_init(& bundler_hdr, 6U, 0U, 40U, l_ptr->addr);
#line 905
          skb_copy_to_linear_data(bundler, (void const   *)(& bundler_hdr), 40U);
#line 907
          skb_trim(bundler, 40U);
#line 908
          link_bundle_buf(l_ptr, bundler, buf);
#line 909
          buf = bundler;
#line 910
          msg = buf_msg(buf);
#line 911
          l_ptr->stats.sent_bundles = l_ptr->stats.sent_bundles + 1U;
          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 915
  if ((unsigned long )l_ptr->next_out == (unsigned long )((struct sk_buff *)0)) {
#line 916
    l_ptr->next_out = buf;
  } else {

  }
  {
#line 917
  link_add_to_outqueue(l_ptr, buf, msg);
  }
#line 918
  return ((int )dsz);
}
}
#line 926 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
int tipc_link_send(struct sk_buff *buf , u32 dest , u32 selector ) 
{ 
  struct tipc_link *l_ptr ;
  struct tipc_node *n_ptr ;
  int res ;

  {
  {
#line 930
  res = -11;
#line 932
  _raw_read_lock_bh(& tipc_net_lock);
#line 933
  n_ptr = tipc_node_find(dest);
  }
#line 934
  if ((unsigned long )n_ptr != (unsigned long )((struct tipc_node *)0)) {
    {
#line 935
    tipc_node_lock___0(n_ptr);
#line 936
    l_ptr = n_ptr->active_links[selector & 1U];
    }
#line 937
    if ((unsigned long )l_ptr != (unsigned long )((struct tipc_link *)0)) {
      {
#line 938
      res = tipc_link_send_buf(l_ptr, buf);
      }
    } else {
      {
#line 940
      kfree_skb(buf);
      }
    }
    {
#line 941
    tipc_node_unlock___0(n_ptr);
    }
  } else {
    {
#line 943
    kfree_skb(buf);
    }
  }
  {
#line 945
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 946
  return (res);
}
}
#line 957 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void tipc_link_send_sync(struct tipc_link *l ) 
{ 
  struct sk_buff *buf ;
  struct tipc_msg *msg ;

  {
  {
#line 962
  buf = tipc_buf_acquire(40U);
  }
#line 963
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 964
    return;
  } else {

  }
  {
#line 966
  msg = buf_msg(buf);
#line 967
  tipc_msg_init(msg, 5U, 0U, 40U, l->addr);
#line 968
  msg_set_last_bcast(msg, (l->owner)->bclink.acked);
#line 969
  link_add_chain_to_outqueue(l, buf, 0U);
#line 970
  tipc_link_push_queue(l);
  }
#line 971
  return;
}
}
#line 981 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void tipc_link_recv_sync(struct tipc_node *n , struct sk_buff *buf ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  u32 tmp___0 ;

  {
  {
#line 983
  tmp = buf_msg(buf);
#line 983
  msg = tmp;
#line 985
  tmp___0 = msg_last_bcast(msg);
#line 985
  n->bclink.last_in = tmp___0;
#line 985
  n->bclink.last_sent = tmp___0;
#line 986
  n->bclink.recv_permitted = 1;
#line 987
  kfree_skb(buf);
  }
#line 988
  return;
}
}
#line 999 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_send_names(struct list_head *message_list , u32 dest ) 
{ 
  struct tipc_node *n_ptr ;
  struct tipc_link *l_ptr ;
  struct sk_buff *buf ;
  struct sk_buff *temp_buf ;
  int tmp ;

  {
  {
#line 1006
  tmp = list_empty((struct list_head  const  *)message_list);
  }
#line 1006
  if (tmp != 0) {
#line 1007
    return;
  } else {

  }
  {
#line 1009
  _raw_read_lock_bh(& tipc_net_lock);
#line 1010
  n_ptr = tipc_node_find(dest);
  }
#line 1011
  if ((unsigned long )n_ptr != (unsigned long )((struct tipc_node *)0)) {
    {
#line 1012
    tipc_node_lock___0(n_ptr);
#line 1013
    l_ptr = n_ptr->active_links[0];
    }
#line 1014
    if ((unsigned long )l_ptr != (unsigned long )((struct tipc_link *)0)) {
      {
#line 1016
      ((struct sk_buff *)message_list->prev)->next = (struct sk_buff *)0;
#line 1017
      link_add_chain_to_outqueue(l_ptr, (struct sk_buff *)message_list->next, 0U);
#line 1019
      tipc_link_push_queue(l_ptr);
#line 1020
      INIT_LIST_HEAD(message_list);
      }
    } else {

    }
    {
#line 1022
    tipc_node_unlock___0(n_ptr);
    }
  } else {

  }
  {
#line 1024
  _raw_read_unlock_bh(& tipc_net_lock);
#line 1027
  buf = ((struct sk_buff *)message_list)->next;
#line 1027
  temp_buf = buf->next;
  }
#line 1027
  goto ldv_41471;
  ldv_41470: 
  {
#line 1028
  list_del((struct list_head *)buf);
#line 1029
  kfree_skb(buf);
#line 1027
  buf = temp_buf;
#line 1027
  temp_buf = buf->next;
  }
  ldv_41471: ;
#line 1027
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)message_list)) {
#line 1029
    goto ldv_41470;
  } else {

  }

#line 1034
  return;
}
}
#line 1039 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_send_buf_fast(struct tipc_link *l_ptr , struct sk_buff *buf , u32 *used_max_pkt ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  int res ;
  u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  u32 tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
  {
#line 1042
  tmp = buf_msg(buf);
#line 1042
  msg = tmp;
#line 1043
  tmp___0 = msg_data_sz(msg);
#line 1043
  res = (int )tmp___0;
#line 1045
  tmp___5 = link_congested(l_ptr);
#line 1045
  tmp___6 = __builtin_expect(tmp___5 == 0, 1L);
  }
#line 1045
  if (tmp___6 != 0L) {
    {
#line 1046
    tmp___3 = msg_size(msg);
#line 1046
    tmp___4 = __builtin_expect(tmp___3 <= l_ptr->max_pkt, 1L);
    }
#line 1046
    if (tmp___4 != 0L) {
      {
#line 1047
      tmp___1 = tipc_bearer_blocked(l_ptr->b_ptr);
#line 1047
      tmp___2 = __builtin_expect(tmp___1 == 0, 1L);
      }
#line 1047
      if (tmp___2 != 0L) {
        {
#line 1048
        link_add_to_outqueue(l_ptr, buf, msg);
#line 1049
        tipc_bearer_send(l_ptr->b_ptr, buf, & l_ptr->media_addr);
#line 1051
        l_ptr->unacked_window = 0U;
        }
#line 1052
        return (res);
      } else {

      }
    } else {
#line 1055
      *used_max_pkt = l_ptr->max_pkt;
    }
  } else {

  }
  {
#line 1057
  tmp___7 = tipc_link_send_buf(l_ptr, buf);
  }
#line 1057
  return (tmp___7);
}
}
#line 1066 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
int tipc_link_send_sections_fast(struct tipc_port *sender , struct iovec  const  *msg_sect ,
                                 u32 const   num_sect , unsigned int total_len , u32 destaddr ) 
{ 
  struct tipc_msg *hdr ;
  struct tipc_link *l_ptr ;
  struct sk_buff *buf ;
  struct tipc_node *node ;
  int res ;
  u32 selector ;
  u32 tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  u32 tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
  {
#line 1071
  hdr = & sender->phdr;
#line 1076
  tmp = msg_origport(hdr);
#line 1076
  selector = tmp & 1U;
  }
  again: 
  {
#line 1083
  res = tipc_msg_build(hdr, msg_sect, num_sect, total_len, (int )sender->max_pkt,
                       & buf);
#line 1086
  tmp___0 = __builtin_expect(res < 0, 0L);
  }
#line 1086
  if (tmp___0 != 0L) {
#line 1087
    return (res);
  } else {

  }
  {
#line 1089
  _raw_read_lock_bh(& tipc_net_lock);
#line 1090
  node = tipc_node_find(destaddr);
#line 1091
  tmp___7 = __builtin_expect((unsigned long )node != (unsigned long )((struct tipc_node *)0),
                             1L);
  }
#line 1091
  if (tmp___7 != 0L) {
    {
#line 1092
    tipc_node_lock___0(node);
#line 1093
    l_ptr = node->active_links[selector];
#line 1094
    tmp___6 = __builtin_expect((unsigned long )l_ptr != (unsigned long )((struct tipc_link *)0),
                               1L);
    }
#line 1094
    if (tmp___6 != 0L) {
      {
#line 1095
      tmp___1 = __builtin_expect((unsigned long )buf != (unsigned long )((struct sk_buff *)0),
                                 1L);
      }
#line 1095
      if (tmp___1 != 0L) {
        {
#line 1096
        res = link_send_buf_fast(l_ptr, buf, & sender->max_pkt);
        }
        exit: 
        {
#line 1099
        tipc_node_unlock___0(node);
#line 1100
        _raw_read_unlock_bh(& tipc_net_lock);
        }
#line 1101
        return (res);
      } else {

      }
      {
#line 1105
      tmp___2 = link_congested(l_ptr);
      }
#line 1105
      if (tmp___2 != 0) {
        {
#line 1107
        res = link_schedule_port(l_ptr, sender->ref, (u32 )res);
        }
#line 1109
        goto exit;
      } else {
        {
#line 1105
        tmp___3 = tipc_bearer_blocked(l_ptr->b_ptr);
        }
#line 1105
        if (tmp___3 != 0) {
          {
#line 1107
          res = link_schedule_port(l_ptr, sender->ref, (u32 )res);
          }
#line 1109
          goto exit;
        } else {

        }
      }
      {
#line 1116
      sender->max_pkt = l_ptr->max_pkt;
#line 1117
      tipc_node_unlock___0(node);
#line 1118
      _raw_read_unlock_bh(& tipc_net_lock);
#line 1121
      tmp___4 = msg_hdr_sz(hdr);
      }
#line 1121
      if (tmp___4 + (u32 )res <= sender->max_pkt) {
#line 1122
        goto again;
      } else {

      }
      {
#line 1124
      tmp___5 = link_send_sections_long(sender, msg_sect, num_sect, total_len, destaddr);
      }
#line 1124
      return (tmp___5);
    } else {

    }
    {
#line 1128
    tipc_node_unlock___0(node);
    }
  } else {

  }
  {
#line 1130
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 1133
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 1134
    tmp___8 = tipc_reject_msg(buf, 3U);
    }
#line 1134
    return (tmp___8);
  } else {

  }
#line 1135
  if (res >= 0) {
    {
#line 1136
    tmp___9 = tipc_port_reject_sections(sender, hdr, msg_sect, num_sect, total_len,
                                        3);
    }
#line 1136
    return (tmp___9);
  } else {

  }
#line 1138
  return (res);
}
}
#line 1155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_send_sections_long(struct tipc_port *sender , struct iovec  const  *msg_sect ,
                                   u32 num_sect , unsigned int total_len , u32 destaddr ) 
{ 
  struct tipc_link *l_ptr ;
  struct tipc_node *node ;
  struct tipc_msg *hdr ;
  u32 dsz ;
  u32 max_pkt ;
  u32 fragm_sz ;
  u32 rest ;
  struct tipc_msg fragm_hdr ;
  struct sk_buff *buf ;
  struct sk_buff *buf_chain ;
  struct sk_buff *prev ;
  u32 fragm_crs ;
  u32 fragm_rest ;
  u32 hsz ;
  u32 sect_rest ;
  unchar const   *sect_crs ;
  int curr_sect ;
  u32 fragm_no ;
  int res ;
  u32 tmp ;
  u32 sz ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 1162
  hdr = & sender->phdr;
#line 1163
  dsz = total_len;
#line 1171
  res = 0;
  again: 
  {
#line 1174
  fragm_no = 1U;
#line 1175
  max_pkt = sender->max_pkt - 40U;
#line 1177
  fragm_sz = max_pkt - 40U;
#line 1179
  rest = dsz;
#line 1180
  fragm_crs = 0U;
#line 1181
  fragm_rest = 0U;
#line 1182
  sect_rest = 0U;
#line 1183
  sect_crs = (unchar const   *)0U;
#line 1184
  curr_sect = -1;
#line 1187
  tmp = msg_destnode(hdr);
#line 1187
  tipc_msg_init(& fragm_hdr, 12U, 0U, 40U, tmp);
#line 1189
  msg_set_size(& fragm_hdr, max_pkt);
#line 1190
  msg_set_last_bcast(& fragm_hdr, 1U);
#line 1193
  buf = tipc_buf_acquire(max_pkt);
#line 1193
  buf_chain = buf;
  }
#line 1194
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 1195
    return (-12);
  } else {

  }
  {
#line 1196
  buf->next = (struct sk_buff *)0;
#line 1197
  skb_copy_to_linear_data(buf, (void const   *)(& fragm_hdr), 40U);
#line 1198
  hsz = msg_hdr_sz(hdr);
#line 1199
  skb_copy_to_linear_data_offset(buf, 40, (void const   *)hdr, hsz);
#line 1202
  fragm_crs = hsz + 40U;
#line 1203
  fragm_rest = fragm_sz - hsz;
  }
  ldv_41527: ;
#line 1208
  if (sect_rest == 0U) {
#line 1209
    curr_sect = curr_sect + 1;
#line 1209
    sect_rest = (u32 )(msg_sect + (unsigned long )curr_sect)->iov_len;
#line 1210
    sect_crs = (unchar const   *)(msg_sect + (unsigned long )curr_sect)->iov_base;
  } else {

  }
#line 1213
  if (sect_rest < fragm_rest) {
#line 1214
    sz = sect_rest;
  } else {
#line 1216
    sz = fragm_rest;
  }
  {
#line 1218
  tmp___0 = copy_from_user((void *)(buf->data + (unsigned long )fragm_crs), (void const   *)sect_crs,
                           (unsigned long )sz);
  }
#line 1218
  if (tmp___0 != 0UL) {
#line 1219
    res = -14;
    error: ;
#line 1221
    goto ldv_41525;
    ldv_41524: 
    {
#line 1222
    buf = buf_chain->next;
#line 1223
    kfree_skb(buf_chain);
#line 1221
    buf_chain = buf;
    }
    ldv_41525: ;
#line 1221
    if ((unsigned long )buf_chain != (unsigned long )((struct sk_buff *)0)) {
#line 1223
      goto ldv_41524;
    } else {

    }

#line 1225
    return (res);
  } else {

  }
#line 1227
  sect_crs = sect_crs + (unsigned long )sz;
#line 1228
  sect_rest = sect_rest - sz;
#line 1229
  fragm_crs = fragm_crs + sz;
#line 1230
  fragm_rest = fragm_rest - sz;
#line 1231
  rest = rest - sz;
#line 1233
  if (fragm_rest == 0U && rest != 0U) {
#line 1236
    if (rest <= fragm_sz) {
      {
#line 1237
      fragm_sz = rest;
#line 1238
      msg_set_type(& fragm_hdr, 2U);
      }
    } else {
      {
#line 1240
      msg_set_type(& fragm_hdr, 1U);
      }
    }
    {
#line 1242
    msg_set_size(& fragm_hdr, fragm_sz + 40U);
#line 1243
    fragm_no = fragm_no + 1U;
#line 1243
    msg_set_last_bcast(& fragm_hdr, fragm_no);
#line 1244
    prev = buf;
#line 1245
    buf = tipc_buf_acquire(fragm_sz + 40U);
    }
#line 1246
    if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 1247
      res = -12;
#line 1248
      goto error;
    } else {

    }
    {
#line 1251
    buf->next = (struct sk_buff *)0;
#line 1252
    prev->next = buf;
#line 1253
    skb_copy_to_linear_data(buf, (void const   *)(& fragm_hdr), 40U);
#line 1254
    fragm_crs = 40U;
#line 1255
    fragm_rest = fragm_sz;
    }
  } else {

  }
#line 1257
  if (rest != 0U) {
#line 1259
    goto ldv_41527;
  } else {

  }
  {
#line 1263
  node = tipc_node_find(destaddr);
#line 1264
  tmp___2 = __builtin_expect((unsigned long )node != (unsigned long )((struct tipc_node *)0),
                             1L);
  }
#line 1264
  if (tmp___2 != 0L) {
    {
#line 1265
    tipc_node_lock___0(node);
#line 1266
    l_ptr = node->active_links[sender->ref & 1U];
    }
#line 1267
    if ((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0)) {
      {
#line 1268
      tipc_node_unlock___0(node);
      }
#line 1269
      goto reject;
    } else {

    }
#line 1271
    if (l_ptr->max_pkt < max_pkt) {
      {
#line 1272
      sender->max_pkt = l_ptr->max_pkt;
#line 1273
      tipc_node_unlock___0(node);
      }
#line 1274
      goto ldv_41531;
      ldv_41530: 
      {
#line 1275
      buf = buf_chain->next;
#line 1276
      kfree_skb(buf_chain);
#line 1274
      buf_chain = buf;
      }
      ldv_41531: ;
#line 1274
      if ((unsigned long )buf_chain != (unsigned long )((struct sk_buff *)0)) {
#line 1276
        goto ldv_41530;
      } else {

      }

#line 1278
      goto again;
    } else {

    }
  } else {
    reject: ;
#line 1282
    goto ldv_41534;
    ldv_41533: 
    {
#line 1283
    buf = buf_chain->next;
#line 1284
    kfree_skb(buf_chain);
#line 1282
    buf_chain = buf;
    }
    ldv_41534: ;
#line 1282
    if ((unsigned long )buf_chain != (unsigned long )((struct sk_buff *)0)) {
#line 1284
      goto ldv_41533;
    } else {

    }
    {
#line 1286
    tmp___1 = tipc_port_reject_sections(sender, hdr, msg_sect, num_sect, total_len,
                                        3);
    }
#line 1286
    return (tmp___1);
  }
  {
#line 1291
  l_ptr->long_msg_seq_no = l_ptr->long_msg_seq_no + 1U;
#line 1292
  link_add_chain_to_outqueue(l_ptr, buf_chain, l_ptr->long_msg_seq_no);
#line 1293
  l_ptr->stats.sent_fragments = l_ptr->stats.sent_fragments + fragm_no;
#line 1294
  l_ptr->stats.sent_fragmented = l_ptr->stats.sent_fragmented + 1U;
#line 1295
  tipc_link_push_queue(l_ptr);
#line 1296
  tipc_node_unlock___0(node);
  }
#line 1297
  return ((int )dsz);
}
}
#line 1303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
u32 tipc_link_push_packet(struct tipc_link *l_ptr ) 
{ 
  struct sk_buff *buf ;
  u32 r_q_size ;
  u32 r_q_head ;
  u32 last ;
  u32 tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  u32 first ;
  u32 tmp___2 ;
  int tmp___3 ;
  u32 tmp___4 ;
  struct tipc_msg *tmp___5 ;
  struct tipc_msg *tmp___6 ;
  u32 tmp___7 ;
  struct tipc_msg *tmp___8 ;
  struct tipc_msg *tmp___9 ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp___10 ;
  u32 next ;
  u32 tmp___11 ;
  u32 first___0 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;

  {
#line 1305
  buf = l_ptr->first_out;
#line 1306
  r_q_size = l_ptr->retransm_queue_size;
#line 1307
  r_q_head = l_ptr->retransm_queue_head;
#line 1311
  if (r_q_size != 0U && (unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 1312
    tmp = link_last_sent(l_ptr);
#line 1312
    tmp___0 = mod(r_q_head + r_q_size);
#line 1312
    tmp___1 = lesser(tmp___0, tmp);
#line 1312
    last = tmp___1;
#line 1314
    tmp___2 = buf_seqno(buf);
#line 1314
    first = tmp___2;
    }
#line 1316
    goto ldv_41545;
    ldv_41544: 
    {
#line 1317
    first = mod(first + 1U);
#line 1318
    buf = buf->next;
    }
    ldv_41545: ;
#line 1316
    if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
      {
#line 1316
      tmp___3 = less(first, r_q_head);
      }
#line 1316
      if (tmp___3 != 0) {
#line 1318
        goto ldv_41544;
      } else {
#line 1321
        goto ldv_41546;
      }
    } else {

    }
    ldv_41546: 
    {
#line 1320
    r_q_head = first;
#line 1320
    l_ptr->retransm_queue_head = r_q_head;
#line 1321
    r_q_size = mod(last - first);
#line 1321
    l_ptr->retransm_queue_size = r_q_size;
    }
  } else {

  }
#line 1325
  if (r_q_size != 0U && (unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 1326
    tmp___4 = mod(l_ptr->next_in_no - 1U);
#line 1326
    tmp___5 = buf_msg(buf);
#line 1326
    msg_set_bcgap_after(tmp___5, tmp___4);
#line 1327
    tmp___6 = buf_msg(buf);
#line 1327
    msg_set_bcast_ack(tmp___6, (l_ptr->owner)->bclink.last_in);
#line 1328
    tipc_bearer_send(l_ptr->b_ptr, buf, & l_ptr->media_addr);
#line 1329
    r_q_head = r_q_head + 1U;
#line 1329
    l_ptr->retransm_queue_head = mod(r_q_head);
#line 1330
    r_q_size = r_q_size - 1U;
#line 1330
    l_ptr->retransm_queue_size = r_q_size;
#line 1331
    l_ptr->stats.retransmitted = l_ptr->stats.retransmitted + 1U;
    }
#line 1332
    return (0U);
  } else {

  }
#line 1336
  buf = l_ptr->proto_msg_queue;
#line 1337
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 1338
    tmp___7 = mod(l_ptr->next_in_no - 1U);
#line 1338
    tmp___8 = buf_msg(buf);
#line 1338
    msg_set_bcgap_after(tmp___8, tmp___7);
#line 1339
    tmp___9 = buf_msg(buf);
#line 1339
    msg_set_bcast_ack(tmp___9, (l_ptr->owner)->bclink.last_in);
#line 1340
    tipc_bearer_send(l_ptr->b_ptr, buf, & l_ptr->media_addr);
#line 1341
    l_ptr->unacked_window = 0U;
#line 1342
    kfree_skb(buf);
#line 1343
    l_ptr->proto_msg_queue = (struct sk_buff *)0;
    }
#line 1344
    return (0U);
  } else {

  }
#line 1348
  buf = l_ptr->next_out;
#line 1349
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 1350
    tmp___10 = buf_msg(buf);
#line 1350
    msg = tmp___10;
#line 1351
    tmp___11 = msg_seqno(msg);
#line 1351
    next = tmp___11;
#line 1352
    tmp___12 = buf_seqno(l_ptr->first_out);
#line 1352
    first___0 = tmp___12;
#line 1354
    tmp___15 = mod(next - first___0);
    }
#line 1354
    if (tmp___15 < l_ptr->queue_limit[0]) {
      {
#line 1355
      tmp___13 = mod(l_ptr->next_in_no - 1U);
#line 1355
      msg_set_bcgap_after(msg, tmp___13);
#line 1356
      msg_set_bcast_ack(msg, (l_ptr->owner)->bclink.last_in);
#line 1357
      tipc_bearer_send(l_ptr->b_ptr, buf, & l_ptr->media_addr);
#line 1358
      tmp___14 = msg_user(msg);
      }
#line 1358
      if (tmp___14 == 6U) {
        {
#line 1359
        msg_set_type(msg, 1U);
        }
      } else {

      }
#line 1360
      l_ptr->next_out = buf->next;
#line 1361
      return (0U);
    } else {

    }
  } else {

  }
#line 1364
  return (1U);
}
}
#line 1371 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_push_queue(struct tipc_link *l_ptr ) 
{ 
  u32 res ;
  int tmp ;

  {
  {
#line 1375
  tmp = tipc_bearer_blocked(l_ptr->b_ptr);
  }
#line 1375
  if (tmp != 0) {
#line 1376
    return;
  } else {

  }
  ldv_41554: 
  {
#line 1379
  res = tipc_link_push_packet(l_ptr);
  }
#line 1380
  if (res == 0U) {
#line 1382
    goto ldv_41554;
  } else {

  }

#line 1387
  return;
}
}
#line 1383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_reset_all(unsigned long addr ) 
{ 
  struct tipc_node *n_ptr ;
  char addr_string[16U] ;
  u32 i ;
  char *tmp ;

  {
  {
#line 1389
  _raw_read_lock_bh(& tipc_net_lock);
#line 1390
  n_ptr = tipc_node_find((unsigned int )addr);
  }
#line 1391
  if ((unsigned long )n_ptr == (unsigned long )((struct tipc_node *)0)) {
    {
#line 1392
    _raw_read_unlock_bh(& tipc_net_lock);
    }
#line 1393
    return;
  } else {

  }
  {
#line 1396
  tipc_node_lock___0(n_ptr);
#line 1398
  tmp = tipc_addr_string_fill((char *)(& addr_string), n_ptr->addr);
#line 1398
  printk("\ftipc: Resetting all links to %s\n", tmp);
#line 1401
  i = 0U;
  }
#line 1401
  goto ldv_41563;
  ldv_41562: ;
#line 1402
  if ((unsigned long )n_ptr->links[i] != (unsigned long )((struct tipc_link *)0)) {
    {
#line 1403
    link_print(n_ptr->links[i], "Resetting link\n");
#line 1404
    tipc_link_reset(n_ptr->links[i]);
    }
  } else {

  }
#line 1401
  i = i + 1U;
  ldv_41563: ;
#line 1401
  if (i <= 1U) {
#line 1403
    goto ldv_41562;
  } else {

  }
  {
#line 1408
  tipc_node_unlock___0(n_ptr);
#line 1409
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 1410
  return;
}
}
#line 1412 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_retransmit_failure(struct tipc_link *l_ptr , struct sk_buff *buf ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  struct tipc_node *n_ptr ;
  char addr_string[16U] ;
  u32 tmp___0 ;

  {
  {
#line 1415
  tmp = buf_msg(buf);
#line 1415
  msg = tmp;
#line 1417
  printk("\ftipc: Retransmission failure on link <%s>\n", (char *)(& l_ptr->name));
  }
#line 1419
  if (l_ptr->addr != 0U) {
    {
#line 1421
    link_print(l_ptr, "Resetting link\n");
#line 1422
    tipc_link_reset(l_ptr);
    }
  } else {
    {
#line 1429
    tmp___0 = msg_seqno(msg);
#line 1429
    printk("\016tipc: Msg seq number: %u,  ", tmp___0);
#line 1430
    printk("Outstanding acks: %lu\n", (unsigned long )((struct tipc_skb_cb *)(& buf->cb))->handle);
#line 1433
    n_ptr = tipc_bclink_retransmit_to();
#line 1434
    tipc_node_lock___0(n_ptr);
#line 1436
    tipc_addr_string_fill((char *)(& addr_string), n_ptr->addr);
#line 1437
    printk("\016tipc: Broadcast link info for %s\n", (char *)(& addr_string));
#line 1438
    printk("\016tipc: Reception permitted: %d,  Acked: %u\n", (int )n_ptr->bclink.recv_permitted,
           n_ptr->bclink.acked);
#line 1441
    printk("\016tipc: Last in: %u,  Oos state: %u,  Last sent: %u\n", n_ptr->bclink.last_in,
           n_ptr->bclink.oos_state, n_ptr->bclink.last_sent);
#line 1446
    tipc_k_signal(& link_reset_all, (unsigned long )n_ptr->addr);
#line 1448
    tipc_node_unlock___0(n_ptr);
#line 1450
    l_ptr->stale_count = 0U;
    }
  }
#line 1452
  return;
}
}
#line 1454 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_retransmit(struct tipc_link *l_ptr , struct sk_buff *buf , u32 retransmits ) 
{ 
  struct tipc_msg *msg ;
  u32 tmp ;
  int tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;

  {
#line 1459
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 1460
    return;
  } else {

  }
  {
#line 1462
  msg = buf_msg(buf);
#line 1464
  tmp___0 = tipc_bearer_blocked(l_ptr->b_ptr);
  }
#line 1464
  if (tmp___0 != 0) {
#line 1465
    if (l_ptr->retransm_queue_size == 0U) {
      {
#line 1466
      l_ptr->retransm_queue_head = msg_seqno(msg);
#line 1467
      l_ptr->retransm_queue_size = retransmits;
      }
    } else {
      {
#line 1469
      printk("\vtipc: Unexpected retransmit on link %s (qsize=%d)\n", (char *)(& l_ptr->name),
             l_ptr->retransm_queue_size);
      }
    }
#line 1472
    return;
  } else {
    {
#line 1475
    tmp = msg_seqno(msg);
    }
#line 1475
    if (l_ptr->last_retransmitted == tmp) {
#line 1476
      l_ptr->stale_count = l_ptr->stale_count + 1U;
#line 1476
      if (l_ptr->stale_count > 100U) {
        {
#line 1477
        link_retransmit_failure(l_ptr, buf);
        }
#line 1478
        return;
      } else {

      }
    } else {
      {
#line 1481
      l_ptr->last_retransmitted = msg_seqno(msg);
#line 1482
      l_ptr->stale_count = 1U;
      }
    }
  }
#line 1486
  goto ldv_41579;
  ldv_41578: 
  {
#line 1487
  msg = buf_msg(buf);
#line 1488
  tmp___1 = mod(l_ptr->next_in_no - 1U);
#line 1488
  msg_set_bcgap_after(msg, tmp___1);
#line 1489
  msg_set_bcast_ack(msg, (l_ptr->owner)->bclink.last_in);
#line 1490
  tipc_bearer_send(l_ptr->b_ptr, buf, & l_ptr->media_addr);
#line 1491
  buf = buf->next;
#line 1492
  retransmits = retransmits - 1U;
#line 1493
  l_ptr->stats.retransmitted = l_ptr->stats.retransmitted + 1U;
  }
  ldv_41579: ;
#line 1486
  if (retransmits != 0U && ((unsigned long )buf != (unsigned long )l_ptr->next_out && (unsigned long )buf != (unsigned long )((struct sk_buff *)0))) {
#line 1488
    goto ldv_41578;
  } else {

  }
#line 1496
  tmp___2 = 0U;
#line 1496
  l_ptr->retransm_queue_size = tmp___2;
#line 1496
  l_ptr->retransm_queue_head = tmp___2;
#line 1497
  return;
}
}
#line 1502 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static struct sk_buff *link_insert_deferred_queue(struct tipc_link *l_ptr , struct sk_buff *buf ) 
{ 
  u32 seq_no ;
  u32 tmp ;

  {
#line 1507
  if ((unsigned long )l_ptr->oldest_deferred_in == (unsigned long )((struct sk_buff *)0)) {
#line 1508
    return (buf);
  } else {

  }
  {
#line 1510
  seq_no = buf_seqno(l_ptr->oldest_deferred_in);
#line 1511
  tmp = mod(l_ptr->next_in_no);
  }
#line 1511
  if (seq_no == tmp) {
#line 1512
    (l_ptr->newest_deferred_in)->next = buf;
#line 1513
    buf = l_ptr->oldest_deferred_in;
#line 1514
    l_ptr->oldest_deferred_in = (struct sk_buff *)0;
#line 1515
    l_ptr->deferred_inqueue_sz = 0U;
  } else {

  }
#line 1517
  return (buf);
}
}
#line 1532 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_recv_buf_validate(struct sk_buff *buf ) 
{ 
  u32 min_data_hdr_size[8U] ;
  struct tipc_msg *msg ;
  u32 tipc_hdr[2U] ;
  u32 size ;
  u32 hdr_size ;
  u32 min_hdr_size ;
  long tmp ;
  void *tmp___0 ;
  u32 tmp___1 ;
  long tmp___2 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;

  {
  {
#line 1534
  min_data_hdr_size[0] = 24U;
#line 1534
  min_data_hdr_size[1] = 44U;
#line 1534
  min_data_hdr_size[2] = 40U;
#line 1534
  min_data_hdr_size[3] = 32U;
#line 1534
  min_data_hdr_size[4] = 60U;
#line 1534
  min_data_hdr_size[5] = 60U;
#line 1534
  min_data_hdr_size[6] = 60U;
#line 1534
  min_data_hdr_size[7] = 60U;
#line 1545
  tmp = __builtin_expect(buf->len <= 23U, 0L);
  }
#line 1545
  if (tmp != 0L) {
#line 1546
    return (0);
  } else {

  }
  {
#line 1548
  tmp___0 = skb_header_pointer((struct sk_buff  const  *)buf, 0, 8, (void *)(& tipc_hdr));
#line 1548
  msg = (struct tipc_msg *)tmp___0;
  }
#line 1549
  if ((unsigned long )msg == (unsigned long )((struct tipc_msg *)0)) {
#line 1550
    return (0);
  } else {

  }
  {
#line 1552
  tmp___1 = msg_version(msg);
#line 1552
  tmp___2 = __builtin_expect(tmp___1 != 2U, 0L);
  }
#line 1552
  if (tmp___2 != 0L) {
#line 1553
    return (0);
  } else {

  }
  {
#line 1555
  size = msg_size(msg);
#line 1556
  hdr_size = msg_hdr_sz(msg);
#line 1557
  tmp___5 = msg_isdata(msg);
  }
#line 1557
  if (tmp___5 != 0U) {
    {
#line 1557
    tmp___4 = msg_type(msg);
#line 1557
    min_hdr_size = min_data_hdr_size[tmp___4];
    }
  } else {
#line 1557
    min_hdr_size = 40U;
  }
  {
#line 1560
  tmp___6 = __builtin_expect((long )(hdr_size < min_hdr_size || size < hdr_size),
                             0L);
  }
#line 1560
  if (tmp___6 != 0L) {
#line 1560
    tmp___8 = 1;
  } else {
    {
#line 1560
    tmp___7 = __builtin_expect(buf->len < size, 0L);
    }
#line 1560
    if (tmp___7 != 0L) {
#line 1560
      tmp___8 = 1;
    } else {
#line 1560
      tmp___8 = 0;
    }
  }
#line 1560
  if (tmp___8 != 0) {
#line 1564
    return (0);
  } else {
    {
#line 1560
    tmp___9 = __builtin_expect(size - hdr_size > 66000U, 0L);
    }
#line 1560
    if (tmp___9 != 0L) {
#line 1564
      return (0);
    } else {

    }
  }
  {
#line 1566
  tmp___10 = pskb_may_pull(buf, hdr_size);
  }
#line 1566
  return (tmp___10);
}
}
#line 1577 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_recv_msg(struct sk_buff *head , struct tipc_bearer *b_ptr ) 
{ 
  struct tipc_node *n_ptr ;
  struct tipc_link *l_ptr ;
  struct sk_buff *crs ;
  struct sk_buff *buf ;
  struct tipc_msg *msg ;
  u32 seq_no ;
  u32 ackd ;
  u32 released ;
  int type ;
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  u32 tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  u32 tmp___9 ;
  long tmp___10 ;
  u32 tmp___11 ;
  long tmp___12 ;
  long tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  struct sk_buff *next ;
  u32 tmp___19 ;
  int tmp___20 ;
  long tmp___21 ;
  int tmp___22 ;
  long tmp___23 ;
  long tmp___24 ;
  long tmp___25 ;
  u32 tmp___26 ;
  long tmp___27 ;
  u32 tmp___28 ;
  int ret ;
  u32 tmp___29 ;
  u32 tmp___30 ;
  int tmp___31 ;
  u32 tmp___32 ;
  long tmp___33 ;
  int tmp___34 ;
  long tmp___35 ;
  u32 tmp___36 ;
  int tmp___37 ;

  {
  {
#line 1579
  _raw_read_lock_bh(& tipc_net_lock);
  }
#line 1580
  goto ldv_41609;
  ldv_41625: 
  {
#line 1584
  buf = head;
#line 1588
  released = 0U;
#line 1591
  head = head->next;
#line 1594
  tmp = __builtin_expect(b_ptr->active == 0, 0L);
  }
#line 1594
  if (tmp != 0L) {
#line 1595
    goto cont;
  } else {

  }
  {
#line 1598
  tmp___0 = link_recv_buf_validate(buf);
#line 1598
  tmp___1 = __builtin_expect(tmp___0 == 0, 0L);
  }
#line 1598
  if (tmp___1 != 0L) {
#line 1599
    goto cont;
  } else {

  }
  {
#line 1602
  tmp___2 = skb_linearize(buf);
#line 1602
  tmp___3 = __builtin_expect(tmp___2 != 0, 0L);
  }
#line 1602
  if (tmp___3 != 0L) {
#line 1603
    goto cont;
  } else {

  }
  {
#line 1606
  msg = buf_msg(buf);
#line 1608
  tmp___5 = msg_non_seq(msg);
#line 1608
  tmp___6 = __builtin_expect(tmp___5 != 0, 0L);
  }
#line 1608
  if (tmp___6 != 0L) {
    {
#line 1609
    tmp___4 = msg_user(msg);
    }
#line 1609
    if (tmp___4 == 13U) {
      {
#line 1610
      tipc_disc_recv_msg(buf, b_ptr);
      }
    } else {
      {
#line 1612
      tipc_bclink_recv_pkt(buf);
      }
    }
#line 1613
    goto ldv_41609;
  } else {

  }
  {
#line 1617
  tmp___7 = msg_short(msg);
#line 1617
  tmp___8 = __builtin_expect(tmp___7 == 0, 0L);
  }
#line 1617
  if (tmp___8 != 0L) {
    {
#line 1617
    tmp___9 = msg_destnode(msg);
#line 1617
    tmp___10 = __builtin_expect(tmp___9 != tipc_own_addr, 0L);
    }
#line 1617
    if (tmp___10 != 0L) {
#line 1619
      goto cont;
    } else {

    }
  } else {

  }
  {
#line 1622
  tmp___11 = msg_prevnode(msg);
#line 1622
  n_ptr = tipc_node_find(tmp___11);
#line 1623
  tmp___12 = __builtin_expect((unsigned long )n_ptr == (unsigned long )((struct tipc_node *)0),
                              0L);
  }
#line 1623
  if (tmp___12 != 0L) {
#line 1624
    goto cont;
  } else {

  }
  {
#line 1625
  tipc_node_lock___0(n_ptr);
#line 1628
  l_ptr = n_ptr->links[b_ptr->identity];
#line 1629
  tmp___13 = __builtin_expect((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0),
                              0L);
  }
#line 1629
  if (tmp___13 != 0L) {
    {
#line 1630
    tipc_node_unlock___0(n_ptr);
    }
#line 1631
    goto cont;
  } else {

  }
#line 1635
  if (n_ptr->block_setup & 1) {
    {
#line 1635
    tmp___14 = msg_user(msg);
    }
#line 1635
    if (tmp___14 == 7U) {
      {
#line 1635
      tmp___15 = msg_type(msg);
      }
#line 1635
      if (tmp___15 == 1U) {
#line 1635
        goto _L;
      } else {
        {
#line 1635
        tmp___16 = msg_type(msg);
        }
#line 1635
        if (tmp___16 == 2U) {
          _L: /* CIL Label */ 
          {
#line 1635
          tmp___17 = msg_redundant_link(msg);
          }
#line 1635
          if (tmp___17 == 0U) {
#line 1640
            n_ptr->block_setup = n_ptr->block_setup & -2;
          } else {

          }
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 1642
  if (n_ptr->block_setup != 0) {
    {
#line 1643
    tipc_node_unlock___0(n_ptr);
    }
#line 1644
    goto cont;
  } else {

  }
  {
#line 1648
  seq_no = msg_seqno(msg);
#line 1649
  ackd = msg_bcgap_after(msg);
  }
#line 1652
  if ((int )n_ptr->bclink.recv_permitted) {
    {
#line 1653
    tmp___18 = msg_bcast_ack(msg);
#line 1653
    tipc_bclink_acknowledge(n_ptr, tmp___18);
    }
  } else {

  }
#line 1655
  crs = l_ptr->first_out;
#line 1656
  goto ldv_41612;
  ldv_41611: 
  {
#line 1658
  next = crs->next;
#line 1660
  kfree_skb(crs);
#line 1661
  crs = next;
#line 1662
  released = released + 1U;
  }
  ldv_41612: ;
#line 1656
  if ((unsigned long )crs != (unsigned long )l_ptr->next_out) {
    {
#line 1656
    tmp___19 = buf_seqno(crs);
#line 1656
    tmp___20 = less_eq(tmp___19, ackd);
    }
#line 1656
    if (tmp___20 != 0) {
#line 1658
      goto ldv_41611;
    } else {
#line 1661
      goto ldv_41613;
    }
  } else {

  }
  ldv_41613: ;
#line 1664
  if (released != 0U) {
#line 1665
    l_ptr->first_out = crs;
#line 1666
    l_ptr->out_queue_size = l_ptr->out_queue_size - released;
  } else {

  }
  {
#line 1670
  tmp___21 = __builtin_expect((unsigned long )l_ptr->next_out != (unsigned long )((struct sk_buff *)0),
                              0L);
  }
#line 1670
  if (tmp___21 != 0L) {
    {
#line 1671
    tipc_link_push_queue(l_ptr);
    }
  } else {

  }
  {
#line 1672
  tmp___22 = list_empty((struct list_head  const  *)(& l_ptr->waiting_ports));
#line 1672
  tmp___23 = __builtin_expect(tmp___22 == 0, 0L);
  }
#line 1672
  if (tmp___23 != 0L) {
    {
#line 1673
    tipc_link_wakeup_ports(l_ptr, 0);
    }
  } else {

  }
  {
#line 1674
  l_ptr->unacked_window = l_ptr->unacked_window + 1U;
#line 1674
  tmp___24 = __builtin_expect(l_ptr->unacked_window > 15U, 0L);
  }
#line 1674
  if (tmp___24 != 0L) {
    {
#line 1675
    l_ptr->stats.sent_acks = l_ptr->stats.sent_acks + 1U;
#line 1676
    tipc_link_send_proto_msg(l_ptr, 0U, 0, 0U, 0U, 0U, 0U);
    }
  } else {

  }
  protocol_check: 
  {
#line 1681
  tmp___34 = link_working_working(l_ptr);
#line 1681
  tmp___35 = __builtin_expect(tmp___34 != 0, 1L);
  }
#line 1681
  if (tmp___35 != 0L) {
    {
#line 1682
    tmp___32 = mod(l_ptr->next_in_no);
#line 1682
    tmp___33 = __builtin_expect(seq_no == tmp___32, 1L);
    }
#line 1682
    if (tmp___33 != 0L) {
      {
#line 1683
      l_ptr->next_in_no = l_ptr->next_in_no + 1U;
#line 1684
      tmp___25 = __builtin_expect((unsigned long )l_ptr->oldest_deferred_in != (unsigned long )((struct sk_buff *)0),
                                  0L);
      }
#line 1684
      if (tmp___25 != 0L) {
        {
#line 1685
        head = link_insert_deferred_queue(l_ptr, head);
        }
      } else {

      }
      deliver: 
      {
#line 1688
      tmp___26 = msg_isdata(msg);
#line 1688
      tmp___27 = __builtin_expect(tmp___26 != 0U, 1L);
      }
#line 1688
      if (tmp___27 != 0L) {
        {
#line 1689
        tipc_node_unlock___0(n_ptr);
#line 1690
        tipc_port_recv_msg(buf);
        }
#line 1691
        goto ldv_41609;
      } else {

      }
      {
#line 1693
      tmp___28 = msg_user(msg);
      }
      {
#line 1695
      if (tmp___28 == 6U) {
#line 1695
        goto case_6;
      } else {

      }
#line 1702
      if (tmp___28 == 11U) {
#line 1702
        goto case_11;
      } else {

      }
#line 1707
      if (tmp___28 == 5U) {
#line 1707
        goto case_5;
      } else {

      }
#line 1711
      if (tmp___28 == 8U) {
#line 1711
        goto case_8;
      } else {

      }
#line 1715
      if (tmp___28 == 12U) {
#line 1715
        goto case_12;
      } else {

      }
#line 1727
      if (tmp___28 == 10U) {
#line 1727
        goto case_10;
      } else {

      }
#line 1738
      goto switch_default;
      case_6: /* CIL Label */ 
      {
#line 1696
      l_ptr->stats.recv_bundles = l_ptr->stats.recv_bundles + 1U;
#line 1697
      tmp___29 = msg_msgcnt(msg);
#line 1697
      l_ptr->stats.recv_bundled = l_ptr->stats.recv_bundled + tmp___29;
#line 1699
      tipc_node_unlock___0(n_ptr);
#line 1700
      tipc_link_recv_bundle(buf);
      }
#line 1701
      goto ldv_41609;
      case_11: /* CIL Label */ 
      {
#line 1703
      n_ptr->bclink.recv_permitted = 1;
#line 1704
      tipc_node_unlock___0(n_ptr);
#line 1705
      tipc_named_recv(buf);
      }
#line 1706
      goto ldv_41609;
      case_5: /* CIL Label */ 
      {
#line 1708
      tipc_link_recv_sync(n_ptr, buf);
#line 1709
      tipc_node_unlock___0(n_ptr);
      }
#line 1710
      goto ldv_41609;
      case_8: /* CIL Label */ 
      {
#line 1712
      tipc_node_unlock___0(n_ptr);
#line 1713
      tipc_port_recv_proto_msg(buf);
      }
#line 1714
      goto ldv_41609;
      case_12: /* CIL Label */ 
      {
#line 1716
      l_ptr->stats.recv_fragments = l_ptr->stats.recv_fragments + 1U;
#line 1717
      ret = tipc_link_recv_fragment(& l_ptr->defragm_buf, & buf, & msg);
      }
#line 1720
      if (ret == 1) {
#line 1721
        l_ptr->stats.recv_fragmented = l_ptr->stats.recv_fragmented + 1U;
#line 1722
        goto deliver;
      } else {

      }
#line 1724
      if (ret == -1) {
#line 1725
        l_ptr->next_in_no = l_ptr->next_in_no - 1U;
      } else {

      }
#line 1726
      goto ldv_41622;
      case_10: /* CIL Label */ 
      {
#line 1728
      tmp___30 = msg_type(msg);
#line 1728
      type = (int )tmp___30;
#line 1729
      tmp___31 = link_recv_changeover_msg(& l_ptr, & buf);
      }
#line 1729
      if (tmp___31 != 0) {
        {
#line 1731
        msg = buf_msg(buf);
#line 1732
        seq_no = msg_seqno(msg);
        }
#line 1733
        if (type == 1) {
#line 1734
          goto deliver;
        } else {

        }
#line 1735
        goto protocol_check;
      } else {

      }
#line 1737
      goto ldv_41622;
      switch_default: /* CIL Label */ 
      {
#line 1739
      kfree_skb(buf);
#line 1740
      buf = (struct sk_buff *)0;
      }
#line 1741
      goto ldv_41622;
      switch_break: /* CIL Label */ ;
      }
      ldv_41622: 
      {
#line 1743
      tipc_node_unlock___0(n_ptr);
#line 1744
      tipc_net_route_msg(buf);
      }
#line 1745
      goto ldv_41609;
    } else {

    }
    {
#line 1747
    link_handle_out_of_seq_msg(l_ptr, buf);
#line 1748
    head = link_insert_deferred_queue(l_ptr, head);
#line 1749
    tipc_node_unlock___0(n_ptr);
    }
#line 1750
    goto ldv_41609;
  } else {

  }
  {
#line 1754
  tmp___36 = msg_user(msg);
  }
#line 1754
  if (tmp___36 == 7U) {
    {
#line 1755
    link_recv_proto_msg(l_ptr, buf);
#line 1756
    head = link_insert_deferred_queue(l_ptr, head);
#line 1757
    tipc_node_unlock___0(n_ptr);
    }
#line 1758
    goto ldv_41609;
  } else {

  }
  {
#line 1762
  link_state_event(l_ptr, 560815U);
#line 1764
  tmp___37 = link_working_working(l_ptr);
  }
#line 1764
  if (tmp___37 != 0) {
    {
#line 1766
    buf->next = head;
#line 1767
    head = buf;
#line 1768
    tipc_node_unlock___0(n_ptr);
    }
#line 1769
    goto ldv_41609;
  } else {

  }
  {
#line 1771
  tipc_node_unlock___0(n_ptr);
  }
  cont: 
  {
#line 1773
  kfree_skb(buf);
  }
  ldv_41609: ;
#line 1580
  if ((unsigned long )head != (unsigned long )((struct sk_buff *)0)) {
#line 1582
    goto ldv_41625;
  } else {

  }
  {
#line 1775
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 1776
  return;
}
}
#line 1783 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
u32 tipc_link_defer_pkt(struct sk_buff **head , struct sk_buff **tail , struct sk_buff *buf ) 
{ 
  struct sk_buff *queue_buf ;
  struct sk_buff **prev ;
  u32 seq_no ;
  u32 tmp ;
  struct sk_buff *tmp___0 ;
  u32 tmp___1 ;
  int tmp___2 ;
  u32 curr_seqno ;
  u32 tmp___3 ;
  int tmp___4 ;

  {
  {
#line 1788
  tmp = buf_seqno(buf);
#line 1788
  seq_no = tmp;
#line 1790
  buf->next = (struct sk_buff *)0;
  }
#line 1793
  if ((unsigned long )*head == (unsigned long )((struct sk_buff *)0)) {
#line 1794
    tmp___0 = buf;
#line 1794
    *tail = tmp___0;
#line 1794
    *head = tmp___0;
#line 1795
    return (1U);
  } else {

  }
  {
#line 1799
  tmp___1 = buf_seqno(*tail);
#line 1799
  tmp___2 = less(tmp___1, seq_no);
  }
#line 1799
  if (tmp___2 != 0) {
#line 1800
    (*tail)->next = buf;
#line 1801
    *tail = buf;
#line 1802
    return (1U);
  } else {

  }
#line 1806
  prev = head;
#line 1807
  queue_buf = *head;
  ldv_41637: 
  {
#line 1809
  tmp___3 = buf_seqno(queue_buf);
#line 1809
  curr_seqno = tmp___3;
  }
#line 1811
  if (seq_no == curr_seqno) {
    {
#line 1812
    kfree_skb(buf);
    }
#line 1813
    return (0U);
  } else {

  }
  {
#line 1816
  tmp___4 = less(seq_no, curr_seqno);
  }
#line 1816
  if (tmp___4 != 0) {
#line 1817
    goto ldv_41636;
  } else {

  }
#line 1819
  prev = & queue_buf->next;
#line 1820
  queue_buf = queue_buf->next;
#line 1821
  goto ldv_41637;
  ldv_41636: 
#line 1823
  buf->next = queue_buf;
#line 1824
  *prev = buf;
#line 1825
  return (1U);
}
}
#line 1831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_handle_out_of_seq_msg(struct tipc_link *l_ptr , struct sk_buff *buf ) 
{ 
  u32 seq_no ;
  u32 tmp ;
  struct tipc_msg *tmp___0 ;
  u32 tmp___1 ;
  long tmp___2 ;
  u32 tmp___3 ;
  int tmp___4 ;
  u32 tmp___5 ;

  {
  {
#line 1834
  tmp = buf_seqno(buf);
#line 1834
  seq_no = tmp;
#line 1836
  tmp___0 = buf_msg(buf);
#line 1836
  tmp___1 = msg_user(tmp___0);
#line 1836
  tmp___2 = __builtin_expect(tmp___1 == 7U, 1L);
  }
#line 1836
  if (tmp___2 != 0L) {
    {
#line 1837
    link_recv_proto_msg(l_ptr, buf);
    }
#line 1838
    return;
  } else {

  }
  {
#line 1842
  l_ptr->checkpoint = l_ptr->checkpoint - 1U;
#line 1848
  tmp___3 = mod(l_ptr->next_in_no);
#line 1848
  tmp___4 = less(seq_no, tmp___3);
  }
#line 1848
  if (tmp___4 != 0) {
    {
#line 1849
    l_ptr->stats.duplicates = l_ptr->stats.duplicates + 1U;
#line 1850
    kfree_skb(buf);
    }
#line 1851
    return;
  } else {

  }
  {
#line 1854
  tmp___5 = tipc_link_defer_pkt(& l_ptr->oldest_deferred_in, & l_ptr->newest_deferred_in,
                                buf);
  }
#line 1854
  if (tmp___5 != 0U) {
#line 1856
    l_ptr->deferred_inqueue_sz = l_ptr->deferred_inqueue_sz + 1U;
#line 1857
    l_ptr->stats.deferred_recv = l_ptr->stats.deferred_recv + 1U;
#line 1858
    if ((l_ptr->deferred_inqueue_sz & 15U) == 1U) {
      {
#line 1859
      tipc_link_send_proto_msg(l_ptr, 0U, 0, 0U, 0U, 0U, 0U);
      }
    } else {

    }
  } else {
#line 1861
    l_ptr->stats.duplicates = l_ptr->stats.duplicates + 1U;
  }
#line 1862
  return;
}
}
#line 1867 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_send_proto_msg(struct tipc_link *l_ptr , u32 msg_typ , int probe_msg ,
                              u32 gap , u32 tolerance , u32 priority , u32 ack_mtu ) 
{ 
  struct sk_buff *buf ;
  struct tipc_msg *msg ;
  u32 msg_size___0 ;
  int r_flag ;
  int tmp ;
  u32 tmp___0 ;
  u32 next_sent ;
  u32 tmp___1 ;
  int tmp___2 ;
  u32 rec ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 mtu ;
  int tmp___6 ;
  u32 tmp___7 ;
  int tmp___8 ;
  u32 tmp___9 ;
  int tmp___10 ;

  {
#line 1871
  buf = (struct sk_buff *)0;
#line 1872
  msg = l_ptr->pmsg;
#line 1873
  msg_size___0 = 56U;
#line 1877
  if ((unsigned long )l_ptr->proto_msg_queue != (unsigned long )((struct sk_buff *)0)) {
    {
#line 1878
    kfree_skb(l_ptr->proto_msg_queue);
#line 1879
    l_ptr->proto_msg_queue = (struct sk_buff *)0;
    }
  } else {

  }
  {
#line 1882
  tmp = link_blocked(l_ptr);
  }
#line 1882
  if (tmp != 0) {
#line 1883
    return;
  } else {

  }
#line 1886
  if ((l_ptr->owner)->block_setup != 0 && msg_typ != 1U) {
#line 1887
    return;
  } else {

  }
  {
#line 1890
  msg_set_type(msg, msg_typ);
#line 1891
  msg_set_net_plane(msg, (int )(l_ptr->b_ptr)->net_plane);
#line 1892
  msg_set_bcast_ack(msg, (l_ptr->owner)->bclink.last_in);
#line 1893
  tmp___0 = tipc_bclink_get_last_sent();
#line 1893
  msg_set_last_bcast(msg, tmp___0);
  }
#line 1895
  if (msg_typ == 0U) {
    {
#line 1896
    tmp___1 = mod(l_ptr->next_out_no);
#line 1896
    next_sent = tmp___1;
#line 1898
    tmp___2 = tipc_link_is_up(l_ptr);
    }
#line 1898
    if (tmp___2 == 0) {
#line 1899
      return;
    } else {

    }
#line 1900
    if ((unsigned long )l_ptr->next_out != (unsigned long )((struct sk_buff *)0)) {
      {
#line 1901
      next_sent = buf_seqno(l_ptr->next_out);
      }
    } else {

    }
    {
#line 1902
    msg_set_next_sent(msg, next_sent);
    }
#line 1903
    if ((unsigned long )l_ptr->oldest_deferred_in != (unsigned long )((struct sk_buff *)0)) {
      {
#line 1904
      tmp___3 = buf_seqno(l_ptr->oldest_deferred_in);
#line 1904
      rec = tmp___3;
#line 1905
      tmp___4 = mod(l_ptr->next_in_no);
#line 1905
      gap = mod(rec - tmp___4);
      }
    } else {

    }
    {
#line 1907
    msg_set_seq_gap(msg, gap);
    }
#line 1908
    if (gap != 0U) {
#line 1909
      l_ptr->stats.sent_nacks = l_ptr->stats.sent_nacks + 1U;
    } else {

    }
    {
#line 1910
    msg_set_link_tolerance(msg, tolerance);
#line 1911
    msg_set_linkprio(msg, priority);
#line 1912
    msg_set_max_pkt(msg, ack_mtu);
#line 1913
    tmp___5 = mod(l_ptr->next_in_no - 1U);
#line 1913
    msg_set_bcgap_after(msg, tmp___5);
#line 1914
    msg_set_probe(msg, probe_msg != 0);
    }
#line 1915
    if (probe_msg != 0) {
#line 1916
      mtu = l_ptr->max_pkt;
#line 1918
      if (mtu < l_ptr->max_pkt_target) {
        {
#line 1918
        tmp___6 = link_working_working(l_ptr);
        }
#line 1918
        if (tmp___6 != 0) {
#line 1918
          if (l_ptr->fsm_msg_cnt != 0U) {
#line 1921
            msg_size___0 = ((mtu + (l_ptr->max_pkt_target - mtu) / 2U) + 2U) & 4294967292U;
#line 1922
            if (l_ptr->max_pkt_probes == 10U) {
#line 1923
              l_ptr->max_pkt_target = msg_size___0 - 4U;
#line 1924
              l_ptr->max_pkt_probes = 0U;
#line 1925
              msg_size___0 = ((mtu + (l_ptr->max_pkt_target - mtu) / 2U) + 2U) & 4294967292U;
            } else {

            }
#line 1927
            l_ptr->max_pkt_probes = l_ptr->max_pkt_probes + 1U;
          } else {

          }
        } else {

        }
      } else {

      }
#line 1930
      l_ptr->stats.sent_probes = l_ptr->stats.sent_probes + 1U;
    } else {

    }
#line 1932
    l_ptr->stats.sent_states = l_ptr->stats.sent_states + 1U;
  } else {
    {
#line 1934
    tmp___7 = mod(l_ptr->reset_checkpoint - 1U);
#line 1934
    msg_set_bcgap_after(msg, tmp___7);
#line 1935
    msg_set_seq_gap(msg, 0U);
#line 1936
    msg_set_next_sent(msg, 1U);
#line 1937
    msg_set_probe(msg, 0U);
#line 1938
    msg_set_link_tolerance(msg, l_ptr->tolerance);
#line 1939
    msg_set_linkprio(msg, l_ptr->priority);
#line 1940
    msg_set_max_pkt(msg, l_ptr->max_pkt_target);
    }
  }
  {
#line 1943
  tmp___8 = tipc_link_is_up(l_ptr);
#line 1943
  r_flag = (l_ptr->owner)->working_links > tmp___8;
#line 1944
  msg_set_redundant_link(msg, (u32 )r_flag);
#line 1945
  msg_set_linkprio(msg, l_ptr->priority);
#line 1946
  msg_set_size(msg, msg_size___0);
#line 1948
  tmp___9 = mod(l_ptr->next_out_no + 32767U);
#line 1948
  msg_set_bcgap_to(msg, tmp___9);
#line 1950
  buf = tipc_buf_acquire(msg_size___0);
  }
#line 1951
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 1952
    return;
  } else {

  }
  {
#line 1954
  skb_copy_to_linear_data(buf, (void const   *)msg, 56U);
#line 1955
  buf->priority = 7U;
#line 1958
  tmp___10 = tipc_bearer_blocked(l_ptr->b_ptr);
  }
#line 1958
  if (tmp___10 != 0) {
#line 1959
    l_ptr->proto_msg_queue = buf;
#line 1960
    return;
  } else {

  }
  {
#line 1963
  tipc_bearer_send(l_ptr->b_ptr, buf, & l_ptr->media_addr);
#line 1964
  l_ptr->unacked_window = 0U;
#line 1965
  kfree_skb(buf);
  }
#line 1966
  return;
}
}
#line 1973 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_recv_proto_msg(struct tipc_link *l_ptr , struct sk_buff *buf ) 
{ 
  u32 rec_gap ;
  u32 max_pkt_info ;
  u32 max_pkt_ack ;
  u32 msg_tol ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  int tmp___0 ;
  u32 tmp___1 ;
  char tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  u32 tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  unchar *tmp___11 ;
  char *tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  int tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  u32 tmp___19 ;
  int tmp___20 ;
  u32 tmp___21 ;
  u32 tmp___22 ;
  u32 tmp___23 ;
  u32 tmp___24 ;
  int tmp___25 ;
  u32 tmp___26 ;
  u32 tmp___27 ;
  u32 tmp___28 ;
  u32 tmp___29 ;
  u32 tmp___30 ;
  u32 tmp___31 ;

  {
  {
#line 1975
  rec_gap = 0U;
#line 1979
  tmp = buf_msg(buf);
#line 1979
  msg = tmp;
#line 1981
  tmp___0 = link_blocked(l_ptr);
  }
#line 1981
  if (tmp___0 != 0) {
#line 1982
    goto exit;
  } else {

  }
  {
#line 1985
  l_ptr->checkpoint = l_ptr->checkpoint - 1U;
#line 1987
  tmp___2 = msg_net_plane(msg);
  }
#line 1987
  if ((int )((signed char )(l_ptr->b_ptr)->net_plane) != (int )((signed char )tmp___2)) {
    {
#line 1988
    tmp___1 = msg_prevnode(msg);
    }
#line 1988
    if (tipc_own_addr > tmp___1) {
      {
#line 1989
      (l_ptr->b_ptr)->net_plane = msg_net_plane(msg);
      }
    } else {

    }
  } else {

  }
  {
#line 1991
  tmp___3 = msg_redundant_link(msg);
#line 1991
  (l_ptr->owner)->permit_changeover = (int )tmp___3;
#line 1993
  tmp___4 = msg_type(msg);
  }
  {
#line 1995
  if (tmp___4 == 1U) {
#line 1995
    goto case_1;
  } else {

  }
#line 2014
  if (tmp___4 == 2U) {
#line 2014
    goto case_2;
  } else {

  }
#line 2049
  if (tmp___4 == 0U) {
#line 2049
    goto case_0;
  } else {

  }
#line 1993
  goto switch_break;
  case_1: /* CIL Label */ 
  {
#line 1996
  tmp___7 = link_working_unknown(l_ptr);
  }
#line 1996
  if (tmp___7 == 0 && l_ptr->peer_session != 65536U) {
    {
#line 1998
    tmp___5 = msg_session(msg);
#line 1998
    tmp___6 = less_eq(tmp___5, l_ptr->peer_session);
    }
#line 1998
    if (tmp___6 != 0) {
#line 1999
      goto ldv_41670;
    } else {

    }
  } else {

  }
  {
#line 2002
  tmp___8 = msg_redundant_link(msg);
  }
#line 2002
  if (tmp___8 == 0U) {
    {
#line 2002
    tmp___9 = link_working_working(l_ptr);
    }
#line 2002
    if (tmp___9 != 0) {
#line 2008
      (l_ptr->owner)->block_setup = 4;
    } else {
      {
#line 2002
      tmp___10 = link_working_unknown(l_ptr);
      }
#line 2002
      if (tmp___10 != 0) {
#line 2008
        (l_ptr->owner)->block_setup = 4;
      } else {

      }
    }
  } else {

  }
  {
#line 2011
  link_state_event(l_ptr, 1U);
  }
  case_2: /* CIL Label */ 
  {
#line 2016
  tmp___11 = msg_data(msg);
#line 2016
  tmp___12 = strrchr((char const   *)(& l_ptr->name), 58);
#line 2016
  strcpy(tmp___12 + 1UL, (char const   *)tmp___11);
#line 2018
  msg_tol = msg_link_tolerance(msg);
  }
#line 2019
  if (msg_tol > l_ptr->tolerance) {
    {
#line 2020
    link_set_supervision_props(l_ptr, msg_tol);
    }
  } else {

  }
  {
#line 2022
  tmp___13 = msg_linkprio(msg);
  }
#line 2022
  if (tmp___13 > l_ptr->priority) {
    {
#line 2023
    l_ptr->priority = msg_linkprio(msg);
    }
  } else {

  }
  {
#line 2025
  max_pkt_info = msg_max_pkt(msg);
  }
#line 2026
  if (max_pkt_info != 0U) {
#line 2027
    if (max_pkt_info < l_ptr->max_pkt_target) {
#line 2028
      l_ptr->max_pkt_target = max_pkt_info;
    } else {

    }
#line 2029
    if (l_ptr->max_pkt > l_ptr->max_pkt_target) {
#line 2030
      l_ptr->max_pkt = l_ptr->max_pkt_target;
    } else {

    }
  } else {
#line 2032
    l_ptr->max_pkt = l_ptr->max_pkt_target;
  }
  {
#line 2036
  tmp___15 = tipc_node_is_up(l_ptr->owner);
  }
#line 2036
  if (tmp___15 == 0) {
    {
#line 2037
    tmp___14 = msg_last_bcast(msg);
#line 2037
    (l_ptr->owner)->bclink.last_in = tmp___14;
#line 2037
    (l_ptr->owner)->bclink.last_sent = tmp___14;
#line 2040
    (l_ptr->owner)->bclink.oos_state = 0U;
    }
  } else {

  }
  {
#line 2043
  l_ptr->peer_session = msg_session(msg);
#line 2044
  l_ptr->peer_bearer_id = msg_bearer_id(msg);
#line 2046
  tmp___16 = msg_type(msg);
  }
#line 2046
  if (tmp___16 == 2U) {
    {
#line 2047
    link_state_event(l_ptr, 2U);
    }
  } else {

  }
#line 2048
  goto ldv_41670;
  case_0: /* CIL Label */ 
  {
#line 2051
  msg_tol = msg_link_tolerance(msg);
  }
#line 2052
  if (msg_tol != 0U) {
    {
#line 2053
    link_set_supervision_props(l_ptr, msg_tol);
    }
  } else {

  }
  {
#line 2055
  tmp___18 = msg_linkprio(msg);
  }
#line 2055
  if (tmp___18 != 0U) {
    {
#line 2055
    tmp___19 = msg_linkprio(msg);
    }
#line 2055
    if (tmp___19 != l_ptr->priority) {
      {
#line 2057
      tmp___17 = msg_linkprio(msg);
#line 2057
      printk("\ftipc: %s<%s>, priority change %u->%u\n", link_rst_msg, (char *)(& l_ptr->name),
             l_ptr->priority, tmp___17);
#line 2060
      l_ptr->priority = msg_linkprio(msg);
#line 2061
      tipc_link_reset(l_ptr);
      }
#line 2062
      goto ldv_41670;
    } else {

    }
  } else {

  }
  {
#line 2064
  link_state_event(l_ptr, 560815U);
#line 2065
  l_ptr->stats.recv_states = l_ptr->stats.recv_states + 1U;
#line 2066
  tmp___20 = link_reset_unknown(l_ptr);
  }
#line 2066
  if (tmp___20 != 0) {
#line 2067
    goto ldv_41670;
  } else {

  }
  {
#line 2069
  tmp___23 = msg_next_sent(msg);
#line 2069
  tmp___24 = mod(l_ptr->next_in_no);
#line 2069
  tmp___25 = less_eq(tmp___24, tmp___23);
  }
#line 2069
  if (tmp___25 != 0) {
    {
#line 2070
    tmp___21 = msg_next_sent(msg);
#line 2070
    tmp___22 = mod(l_ptr->next_in_no);
#line 2070
    rec_gap = mod(tmp___21 - tmp___22);
    }
  } else {

  }
  {
#line 2074
  max_pkt_ack = msg_max_pkt(msg);
  }
#line 2075
  if (max_pkt_ack > l_ptr->max_pkt) {
#line 2076
    l_ptr->max_pkt = max_pkt_ack;
#line 2077
    l_ptr->max_pkt_probes = 0U;
  } else {

  }
  {
#line 2080
  max_pkt_ack = 0U;
#line 2081
  tmp___27 = msg_probe(msg);
  }
#line 2081
  if (tmp___27 != 0U) {
    {
#line 2082
    l_ptr->stats.recv_probes = l_ptr->stats.recv_probes + 1U;
#line 2083
    tmp___26 = msg_size(msg);
    }
#line 2083
    if (tmp___26 > 56U) {
      {
#line 2084
      max_pkt_ack = msg_size(msg);
      }
    } else {

    }
  } else {

  }
#line 2088
  if ((int )(l_ptr->owner)->bclink.recv_permitted) {
    {
#line 2089
    tmp___28 = msg_last_bcast(msg);
#line 2089
    tipc_bclink_update_link_state(l_ptr->owner, tmp___28);
    }
  } else {

  }
#line 2092
  if (rec_gap != 0U) {
    {
#line 2093
    tipc_link_send_proto_msg(l_ptr, 0U, 0, rec_gap, 0U, 0U, max_pkt_ack);
    }
  } else {
    {
#line 2092
    tmp___29 = msg_probe(msg);
    }
#line 2092
    if (tmp___29 != 0U) {
      {
#line 2093
      tipc_link_send_proto_msg(l_ptr, 0U, 0, rec_gap, 0U, 0U, max_pkt_ack);
      }
    } else {

    }
  }
  {
#line 2096
  tmp___31 = msg_seq_gap(msg);
  }
#line 2096
  if (tmp___31 != 0U) {
    {
#line 2097
    l_ptr->stats.recv_nacks = l_ptr->stats.recv_nacks + 1U;
#line 2098
    tmp___30 = msg_seq_gap(msg);
#line 2098
    tipc_link_retransmit(l_ptr, l_ptr->first_out, tmp___30);
    }
  } else {

  }
#line 2101
  goto ldv_41670;
  switch_break: /* CIL Label */ ;
  }
  ldv_41670: ;
  exit: 
  {
#line 2104
  kfree_skb(buf);
  }
#line 2105
  return;
}
}
#line 2112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void tipc_link_tunnel(struct tipc_link *l_ptr , struct tipc_msg *tunnel_hdr ,
                             struct tipc_msg *msg , u32 selector ) 
{ 
  struct tipc_link *tunnel ;
  struct sk_buff *buf ;
  u32 length ;
  u32 tmp ;
  int tmp___0 ;

  {
  {
#line 2118
  tmp = msg_size(msg);
#line 2118
  length = tmp;
#line 2120
  tunnel = (l_ptr->owner)->active_links[selector & 1U];
#line 2121
  tmp___0 = tipc_link_is_up(tunnel);
  }
#line 2121
  if (tmp___0 == 0) {
    {
#line 2122
    printk("\ftipc: %stunnel link no longer available\n", link_co_err);
    }
#line 2123
    return;
  } else {

  }
  {
#line 2125
  msg_set_size(tunnel_hdr, length + 40U);
#line 2126
  buf = tipc_buf_acquire(length + 40U);
  }
#line 2127
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 2128
    printk("\ftipc: %sunable to send tunnel msg\n", link_co_err);
    }
#line 2129
    return;
  } else {

  }
  {
#line 2131
  skb_copy_to_linear_data(buf, (void const   *)tunnel_hdr, 40U);
#line 2132
  skb_copy_to_linear_data_offset(buf, 40, (void const   *)msg, length);
#line 2133
  tipc_link_send_buf(tunnel, buf);
  }
#line 2134
  return;
}
}
#line 2142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_changeover(struct tipc_link *l_ptr ) 
{ 
  u32 msgcount ;
  struct sk_buff *crs ;
  struct tipc_link *tunnel ;
  struct tipc_msg tunnel_hdr ;
  int split_bundles ;
  struct sk_buff *buf ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  struct tipc_msg *m ;
  struct tipc_msg *tmp___0 ;
  unchar *pos ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  unsigned int tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;

  {
#line 2144
  msgcount = l_ptr->out_queue_size;
#line 2145
  crs = l_ptr->first_out;
#line 2146
  tunnel = (l_ptr->owner)->active_links[0];
#line 2150
  if ((unsigned long )tunnel == (unsigned long )((struct tipc_link *)0)) {
#line 2151
    return;
  } else {

  }
#line 2153
  if ((l_ptr->owner)->permit_changeover == 0) {
    {
#line 2154
    printk("\ftipc: %speer did not permit changeover\n", link_co_err);
    }
#line 2155
    return;
  } else {

  }
  {
#line 2158
  tipc_msg_init(& tunnel_hdr, 10U, 1U, 40U, l_ptr->addr);
#line 2160
  msg_set_bearer_id(& tunnel_hdr, l_ptr->peer_bearer_id);
#line 2161
  msg_set_msgcnt(& tunnel_hdr, msgcount);
  }
#line 2163
  if ((unsigned long )l_ptr->first_out == (unsigned long )((struct sk_buff *)0)) {
    {
#line 2166
    buf = tipc_buf_acquire(40U);
    }
#line 2167
    if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
      {
#line 2168
      skb_copy_to_linear_data(buf, (void const   *)(& tunnel_hdr), 40U);
#line 2169
      msg_set_size(& tunnel_hdr, 40U);
#line 2170
      tipc_link_send_buf(tunnel, buf);
      }
    } else {
      {
#line 2172
      printk("\ftipc: %sunable to send changeover msg\n", link_co_err);
      }
    }
#line 2175
    return;
  } else {

  }
#line 2178
  split_bundles = (unsigned long )(l_ptr->owner)->active_links[0] != (unsigned long )(l_ptr->owner)->active_links[1];
#line 2181
  goto ldv_41698;
  ldv_41697: 
  {
#line 2182
  tmp = buf_msg(crs);
#line 2182
  msg = tmp;
#line 2184
  tmp___7 = msg_user(msg);
  }
#line 2184
  if (tmp___7 == 6U && split_bundles != 0) {
    {
#line 2185
    tmp___0 = msg_get_wrapped(msg);
#line 2185
    m = tmp___0;
#line 2186
    pos = (unchar *)m;
#line 2188
    msgcount = msg_msgcnt(msg);
    }
#line 2189
    goto ldv_41695;
    ldv_41694: 
    {
#line 2190
    tmp___1 = msg_seqno(msg);
#line 2190
    msg_set_bcgap_to(m, tmp___1);
#line 2191
    tmp___2 = msg_link_selector(m);
#line 2191
    tipc_link_tunnel(l_ptr, & tunnel_hdr, m, tmp___2);
#line 2193
    tmp___3 = msg_size(m);
#line 2193
    tmp___4 = align(tmp___3);
#line 2193
    pos = pos + (unsigned long )tmp___4;
#line 2194
    m = (struct tipc_msg *)pos;
    }
    ldv_41695: 
#line 2189
    tmp___5 = msgcount;
#line 2189
    msgcount = msgcount - 1U;
#line 2189
    if (tmp___5 != 0U) {
#line 2191
      goto ldv_41694;
    } else {

    }

  } else {
    {
#line 2197
    tmp___6 = msg_link_selector(msg);
#line 2197
    tipc_link_tunnel(l_ptr, & tunnel_hdr, msg, tmp___6);
    }
  }
#line 2200
  crs = crs->next;
  ldv_41698: ;
#line 2181
  if ((unsigned long )crs != (unsigned long )((struct sk_buff *)0)) {
#line 2183
    goto ldv_41697;
  } else {

  }

#line 2188
  return;
}
}
#line 2204 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_send_duplicate(struct tipc_link *l_ptr , struct tipc_link *tunnel ) 
{ 
  struct sk_buff *iter ;
  struct tipc_msg tunnel_hdr ;
  struct sk_buff *outbuf ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  u32 length ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  int tmp___3 ;

  {
  {
#line 2209
  tipc_msg_init(& tunnel_hdr, 10U, 0U, 40U, l_ptr->addr);
#line 2211
  msg_set_msgcnt(& tunnel_hdr, l_ptr->out_queue_size);
#line 2212
  msg_set_bearer_id(& tunnel_hdr, l_ptr->peer_bearer_id);
#line 2213
  iter = l_ptr->first_out;
  }
#line 2214
  goto ldv_41710;
  ldv_41709: 
  {
#line 2216
  tmp = buf_msg(iter);
#line 2216
  msg = tmp;
#line 2217
  tmp___0 = msg_size(msg);
#line 2217
  length = tmp___0;
#line 2219
  tmp___1 = msg_user(msg);
  }
#line 2219
  if (tmp___1 == 6U) {
    {
#line 2220
    msg_set_type(msg, 1U);
    }
  } else {

  }
  {
#line 2221
  tmp___2 = mod(l_ptr->next_in_no - 1U);
#line 2221
  msg_set_bcgap_after(msg, tmp___2);
#line 2222
  msg_set_bcast_ack(msg, (l_ptr->owner)->bclink.last_in);
#line 2223
  msg_set_size(& tunnel_hdr, length + 40U);
#line 2224
  outbuf = tipc_buf_acquire(length + 40U);
  }
#line 2225
  if ((unsigned long )outbuf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 2226
    printk("\ftipc: %sunable to send duplicate msg\n", link_co_err);
    }
#line 2228
    return;
  } else {

  }
  {
#line 2230
  skb_copy_to_linear_data(outbuf, (void const   *)(& tunnel_hdr), 40U);
#line 2231
  skb_copy_to_linear_data_offset(outbuf, 40, (void const   *)iter->data, length);
#line 2233
  tipc_link_send_buf(tunnel, outbuf);
#line 2234
  tmp___3 = tipc_link_is_up(l_ptr);
  }
#line 2234
  if (tmp___3 == 0) {
#line 2235
    return;
  } else {

  }
#line 2236
  iter = iter->next;
  ldv_41710: ;
#line 2214
  if ((unsigned long )iter != (unsigned long )((struct sk_buff *)0)) {
#line 2216
    goto ldv_41709;
  } else {

  }

#line 2221
  return;
}
}
#line 2248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static struct sk_buff *buf_extract(struct sk_buff *skb , u32 from_pos ) 
{ 
  struct tipc_msg *msg ;
  u32 size ;
  u32 tmp ;
  struct sk_buff *eb ;

  {
  {
#line 2250
  msg = (struct tipc_msg *)(skb->data + (unsigned long )from_pos);
#line 2251
  tmp = msg_size(msg);
#line 2251
  size = tmp;
#line 2254
  eb = tipc_buf_acquire(size);
  }
#line 2255
  if ((unsigned long )eb != (unsigned long )((struct sk_buff *)0)) {
    {
#line 2256
    skb_copy_to_linear_data(eb, (void const   *)msg, size);
    }
  } else {

  }
#line 2257
  return (eb);
}
}
#line 2264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_recv_changeover_msg(struct tipc_link **l_ptr , struct sk_buff **buf ) 
{ 
  struct sk_buff *tunnel_buf ;
  struct tipc_link *dest_link ;
  struct tipc_msg *msg ;
  struct tipc_msg *tunnel_msg ;
  struct tipc_msg *tmp ;
  u32 msg_typ ;
  u32 tmp___0 ;
  u32 msg_count ;
  u32 tmp___1 ;
  u32 bearer_id ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  u32 tmp___7 ;
  int tmp___8 ;

  {
  {
#line 2267
  tunnel_buf = *buf;
#line 2270
  tmp = buf_msg(tunnel_buf);
#line 2270
  tunnel_msg = tmp;
#line 2271
  tmp___0 = msg_type(tunnel_msg);
#line 2271
  msg_typ = tmp___0;
#line 2272
  tmp___1 = msg_msgcnt(tunnel_msg);
#line 2272
  msg_count = tmp___1;
#line 2273
  tmp___2 = msg_bearer_id(tunnel_msg);
#line 2273
  bearer_id = tmp___2;
  }
#line 2275
  if (bearer_id > 1U) {
#line 2276
    goto exit;
  } else {

  }
#line 2277
  dest_link = ((*l_ptr)->owner)->links[bearer_id];
#line 2278
  if ((unsigned long )dest_link == (unsigned long )((struct tipc_link *)0)) {
#line 2279
    goto exit;
  } else {

  }
#line 2280
  if ((unsigned long )dest_link == (unsigned long )*l_ptr) {
    {
#line 2281
    printk("\vtipc: Unexpected changeover message on link <%s>\n", (char *)(& (*l_ptr)->name));
    }
#line 2283
    goto exit;
  } else {

  }
  {
#line 2285
  *l_ptr = dest_link;
#line 2286
  msg = msg_get_wrapped(tunnel_msg);
  }
#line 2288
  if (msg_typ == 0U) {
    {
#line 2289
    tmp___3 = mod(dest_link->next_in_no);
#line 2289
    tmp___4 = msg_seqno(msg);
#line 2289
    tmp___5 = less(tmp___4, tmp___3);
    }
#line 2289
    if (tmp___5 != 0) {
#line 2290
      goto exit;
    } else {

    }
    {
#line 2291
    *buf = buf_extract(tunnel_buf, 40U);
    }
#line 2292
    if ((unsigned long )*buf == (unsigned long )((struct sk_buff *)0)) {
      {
#line 2293
      printk("\ftipc: %sduplicate msg dropped\n", link_co_err);
      }
#line 2294
      goto exit;
    } else {

    }
    {
#line 2296
    kfree_skb(tunnel_buf);
    }
#line 2297
    return (1);
  } else {

  }
  {
#line 2301
  tmp___6 = tipc_link_is_up(dest_link);
  }
#line 2301
  if (tmp___6 != 0) {
    {
#line 2302
    printk("\016tipc: %s<%s>, changeover initiated by peer\n", link_rst_msg, (char *)(& dest_link->name));
#line 2304
    tipc_link_reset(dest_link);
#line 2305
    dest_link->exp_msg_count = msg_count;
    }
#line 2306
    if (msg_count == 0U) {
#line 2307
      goto exit;
    } else {

    }
  } else
#line 2308
  if (dest_link->exp_msg_count == 100000U) {
#line 2309
    dest_link->exp_msg_count = msg_count;
#line 2310
    if (msg_count == 0U) {
#line 2311
      goto exit;
    } else {

    }
  } else {

  }
#line 2315
  if (dest_link->exp_msg_count == 0U) {
    {
#line 2316
    printk("\ftipc: %sgot too many tunnelled messages\n", link_co_err);
    }
#line 2317
    goto exit;
  } else {

  }
  {
#line 2319
  dest_link->exp_msg_count = dest_link->exp_msg_count - 1U;
#line 2320
  tmp___7 = msg_seqno(msg);
#line 2320
  tmp___8 = less(tmp___7, dest_link->reset_checkpoint);
  }
#line 2320
  if (tmp___8 != 0) {

  } else {
    {
#line 2323
    *buf = buf_extract(tunnel_buf, 40U);
    }
#line 2324
    if ((unsigned long )*buf != (unsigned long )((struct sk_buff *)0)) {
      {
#line 2325
      kfree_skb(tunnel_buf);
      }
#line 2326
      return (1);
    } else {
      {
#line 2328
      printk("\ftipc: %soriginal msg dropped\n", link_co_err);
      }
    }
  }
  exit: 
  {
#line 2332
  *buf = (struct sk_buff *)0;
#line 2333
  kfree_skb(tunnel_buf);
  }
#line 2334
  return (0);
}
}
#line 2340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_recv_bundle(struct sk_buff *buf ) 
{ 
  u32 msgcount ;
  struct tipc_msg *tmp ;
  u32 tmp___0 ;
  u32 pos ;
  struct sk_buff *obuf ;
  struct tipc_msg *tmp___1 ;
  u32 tmp___2 ;
  unsigned int tmp___3 ;
  u32 tmp___4 ;

  {
  {
#line 2342
  tmp = buf_msg(buf);
#line 2342
  tmp___0 = msg_msgcnt(tmp);
#line 2342
  msgcount = tmp___0;
#line 2343
  pos = 40U;
  }
#line 2346
  goto ldv_41739;
  ldv_41738: 
  {
#line 2347
  obuf = buf_extract(buf, pos);
  }
#line 2348
  if ((unsigned long )obuf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 2349
    printk("\ftipc: Link unable to unbundle message(s)\n");
    }
#line 2350
    goto ldv_41737;
  } else {

  }
  {
#line 2352
  tmp___1 = buf_msg(obuf);
#line 2352
  tmp___2 = msg_size(tmp___1);
#line 2352
  tmp___3 = align(tmp___2);
#line 2352
  pos = pos + tmp___3;
#line 2353
  tipc_net_route_msg(obuf);
  }
  ldv_41739: 
#line 2346
  tmp___4 = msgcount;
#line 2346
  msgcount = msgcount - 1U;
#line 2346
  if (tmp___4 != 0U) {
#line 2348
    goto ldv_41738;
  } else {

  }
  ldv_41737: 
  {
#line 2355
  kfree_skb(buf);
  }
#line 2356
  return;
}
}
#line 2367 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_send_long_buf(struct tipc_link *l_ptr , struct sk_buff *buf ) 
{ 
  struct sk_buff *buf_chain ;
  struct sk_buff *buf_chain_tail ;
  struct tipc_msg *inmsg ;
  struct tipc_msg *tmp ;
  struct tipc_msg fragm_hdr ;
  u32 insize ;
  u32 tmp___0 ;
  u32 dsz ;
  u32 tmp___1 ;
  unchar *crs ;
  u32 rest ;
  u32 pack_sz ;
  u32 fragm_sz ;
  u32 fragm_no ;
  u32 destaddr ;
  int tmp___2 ;
  struct sk_buff *fragm ;

  {
  {
#line 2369
  buf_chain = (struct sk_buff *)0;
#line 2370
  buf_chain_tail = (struct sk_buff *)(& buf_chain);
#line 2371
  tmp = buf_msg(buf);
#line 2371
  inmsg = tmp;
#line 2373
  tmp___0 = msg_size(inmsg);
#line 2373
  insize = tmp___0;
#line 2374
  tmp___1 = msg_data_sz(inmsg);
#line 2374
  dsz = tmp___1;
#line 2375
  crs = buf->data;
#line 2376
  rest = insize;
#line 2377
  pack_sz = l_ptr->max_pkt;
#line 2378
  fragm_sz = pack_sz - 40U;
#line 2379
  fragm_no = 0U;
#line 2382
  tmp___2 = msg_short(inmsg);
  }
#line 2382
  if (tmp___2 != 0) {
#line 2383
    destaddr = l_ptr->addr;
  } else {
    {
#line 2385
    destaddr = msg_destnode(inmsg);
    }
  }
  {
#line 2388
  tipc_msg_init(& fragm_hdr, 12U, 0U, 40U, destaddr);
  }
#line 2392
  goto ldv_41761;
  ldv_41760: ;
#line 2395
  if (rest <= fragm_sz) {
    {
#line 2396
    fragm_sz = rest;
#line 2397
    msg_set_type(& fragm_hdr, 2U);
    }
  } else {

  }
  {
#line 2399
  fragm = tipc_buf_acquire(fragm_sz + 40U);
  }
#line 2400
  if ((unsigned long )fragm == (unsigned long )((struct sk_buff *)0)) {
    {
#line 2401
    kfree_skb(buf);
    }
#line 2402
    goto ldv_41758;
    ldv_41757: 
    {
#line 2403
    buf = buf_chain;
#line 2404
    buf_chain = buf_chain->next;
#line 2405
    kfree_skb(buf);
    }
    ldv_41758: ;
#line 2402
    if ((unsigned long )buf_chain != (unsigned long )((struct sk_buff *)0)) {
#line 2404
      goto ldv_41757;
    } else {

    }

#line 2407
    return (-12);
  } else {

  }
  {
#line 2409
  msg_set_size(& fragm_hdr, fragm_sz + 40U);
#line 2410
  fragm_no = fragm_no + 1U;
#line 2411
  msg_set_last_bcast(& fragm_hdr, fragm_no);
#line 2412
  skb_copy_to_linear_data(fragm, (void const   *)(& fragm_hdr), 40U);
#line 2413
  skb_copy_to_linear_data_offset(fragm, 40, (void const   *)crs, fragm_sz);
#line 2415
  buf_chain_tail->next = fragm;
#line 2416
  buf_chain_tail = fragm;
#line 2418
  rest = rest - fragm_sz;
#line 2419
  crs = crs + (unsigned long )fragm_sz;
#line 2420
  msg_set_type(& fragm_hdr, 1U);
  }
  ldv_41761: ;
#line 2392
  if (rest != 0U) {
#line 2394
    goto ldv_41760;
  } else {

  }
  {
#line 2422
  kfree_skb(buf);
#line 2425
  l_ptr->long_msg_seq_no = l_ptr->long_msg_seq_no + 1U;
#line 2426
  link_add_chain_to_outqueue(l_ptr, buf_chain, l_ptr->long_msg_seq_no);
#line 2427
  l_ptr->stats.sent_fragments = l_ptr->stats.sent_fragments + fragm_no;
#line 2428
  l_ptr->stats.sent_fragmented = l_ptr->stats.sent_fragmented + 1U;
#line 2429
  tipc_link_push_queue(l_ptr);
  }
#line 2431
  return ((int )dsz);
}
}
#line 2440 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void set_long_msg_seqno(struct sk_buff *buf , u32 seqno ) 
{ 
  struct tipc_msg *tmp ;

  {
  {
#line 2442
  tmp = buf_msg(buf);
#line 2442
  msg_set_bcgap_to(tmp, seqno);
  }
#line 2443
  return;
}
}
#line 2445 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static u32 get_fragm_size(struct sk_buff *buf ) 
{ 
  struct tipc_msg *tmp ;
  u32 tmp___0 ;

  {
  {
#line 2447
  tmp = buf_msg(buf);
#line 2447
  tmp___0 = msg_bcgap_after(tmp);
  }
#line 2447
  return (tmp___0);
}
}
#line 2450 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void set_fragm_size(struct sk_buff *buf , u32 sz ) 
{ 
  struct tipc_msg *tmp ;

  {
  {
#line 2452
  tmp = buf_msg(buf);
#line 2452
  msg_set_bcgap_after(tmp, sz);
  }
#line 2453
  return;
}
}
#line 2455 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static u32 get_expected_frags(struct sk_buff *buf ) 
{ 
  struct tipc_msg *tmp ;
  u32 tmp___0 ;

  {
  {
#line 2457
  tmp = buf_msg(buf);
#line 2457
  tmp___0 = msg_bcast_ack(tmp);
  }
#line 2457
  return (tmp___0);
}
}
#line 2460 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void set_expected_frags(struct sk_buff *buf , u32 exp ) 
{ 
  struct tipc_msg *tmp ;

  {
  {
#line 2462
  tmp = buf_msg(buf);
#line 2462
  msg_set_bcast_ack(tmp, exp);
  }
#line 2463
  return;
}
}
#line 2469 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
int tipc_link_recv_fragment(struct sk_buff **pending , struct sk_buff **fb , struct tipc_msg **m ) 
{ 
  struct sk_buff *prev ;
  struct sk_buff *fbuf ;
  struct tipc_msg *fragm ;
  struct tipc_msg *tmp ;
  struct sk_buff *pbuf ;
  u32 long_msg_seq_no ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  struct tipc_msg *tmp___3 ;
  u32 tmp___4 ;
  struct tipc_msg *imsg ;
  unchar *tmp___5 ;
  u32 msg_sz ;
  u32 tmp___6 ;
  u32 fragm_sz ;
  u32 tmp___7 ;
  u32 exp_fragm_cnt ;
  u32 max ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  struct _ddebug descriptor ;
  long tmp___12 ;
  u32 dsz ;
  u32 tmp___13 ;
  u32 fsz ;
  u32 tmp___14 ;
  u32 crs ;
  u32 tmp___15 ;
  u32 exp_frags ;
  u32 tmp___16 ;
  unchar *tmp___17 ;
  struct tipc_msg *tmp___18 ;
  u32 tmp___19 ;
  u32 tmp___20 ;

  {
  {
#line 2472
  prev = (struct sk_buff *)0;
#line 2473
  fbuf = *fb;
#line 2474
  tmp = buf_msg(fbuf);
#line 2474
  fragm = tmp;
#line 2475
  pbuf = *pending;
#line 2476
  tmp___0 = msg_next_sent(fragm);
#line 2476
  long_msg_seq_no = tmp___0;
#line 2478
  *fb = (struct sk_buff *)0;
  }
#line 2481
  goto ldv_41792;
  ldv_41791: 
#line 2483
  prev = pbuf;
#line 2484
  pbuf = pbuf->next;
  ldv_41792: ;
#line 2481
  if ((unsigned long )pbuf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 2481
    tmp___1 = buf_seqno(pbuf);
    }
#line 2481
    if (tmp___1 != long_msg_seq_no) {
#line 2484
      goto ldv_41791;
    } else {
      {
#line 2481
      tmp___2 = msg_orignode(fragm);
#line 2481
      tmp___3 = buf_msg(pbuf);
#line 2481
      tmp___4 = msg_orignode(tmp___3);
      }
#line 2481
      if (tmp___2 != tmp___4) {
#line 2484
        goto ldv_41791;
      } else {
#line 2487
        goto ldv_41793;
      }
    }
  } else {

  }
  ldv_41793: ;
#line 2487
  if ((unsigned long )pbuf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 2487
    tmp___20 = msg_type(fragm);
    }
#line 2487
    if (tmp___20 == 0U) {
      {
#line 2488
      tmp___5 = msg_data(fragm);
#line 2488
      imsg = (struct tipc_msg *)tmp___5;
#line 2489
      tmp___6 = msg_size(imsg);
#line 2489
      msg_sz = tmp___6;
#line 2490
      tmp___7 = msg_data_sz(fragm);
#line 2490
      fragm_sz = tmp___7;
#line 2492
      max = 66040U;
#line 2494
      tmp___8 = msg_type(imsg);
      }
#line 2494
      if (tmp___8 == 1U) {
#line 2495
        max = 66044U;
      } else {

      }
#line 2496
      if (fragm_sz == 0U) {
        {
#line 2497
        kfree_skb(fbuf);
        }
#line 2498
        return (0);
      } else {
        {
#line 2496
        tmp___9 = msg_size(imsg);
        }
#line 2496
        if (tmp___9 > max) {
          {
#line 2497
          kfree_skb(fbuf);
          }
#line 2498
          return (0);
        } else {

        }
      }
      {
#line 2500
      exp_fragm_cnt = msg_sz / fragm_sz + (u32 )(msg_sz % fragm_sz != 0U);
#line 2501
      tmp___10 = msg_size(imsg);
#line 2501
      pbuf = tipc_buf_acquire(tmp___10);
      }
#line 2502
      if ((unsigned long )pbuf != (unsigned long )((struct sk_buff *)0)) {
        {
#line 2503
        pbuf->next = *pending;
#line 2504
        *pending = pbuf;
#line 2505
        tmp___11 = msg_data_sz(fragm);
#line 2505
        skb_copy_to_linear_data(pbuf, (void const   *)imsg, tmp___11);
#line 2508
        set_long_msg_seqno(pbuf, long_msg_seq_no);
#line 2509
        set_fragm_size(pbuf, fragm_sz);
#line 2510
        set_expected_frags(pbuf, exp_fragm_cnt - 1U);
        }
      } else {
        {
#line 2512
        descriptor.modname = "tipc";
#line 2512
        descriptor.function = "tipc_link_recv_fragment";
#line 2512
        descriptor.filename = "net/tipc/link.c";
#line 2512
        descriptor.format = "Link unable to reassemble fragmented message\n";
#line 2512
        descriptor.lineno = 2512U;
#line 2512
        descriptor.flags = 0U;
#line 2512
        tmp___12 = __builtin_expect((long )descriptor.flags & 1L, 0L);
        }
#line 2512
        if (tmp___12 != 0L) {
          {
#line 2512
          __dynamic_pr_debug(& descriptor, "tipc: Link unable to reassemble fragmented message\n");
          }
        } else {

        }
        {
#line 2513
        kfree_skb(fbuf);
        }
#line 2514
        return (-1);
      }
      {
#line 2516
      kfree_skb(fbuf);
      }
#line 2517
      return (0);
    } else {
#line 2487
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 2518
  if ((unsigned long )pbuf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 2518
    tmp___19 = msg_type(fragm);
    }
#line 2518
    if (tmp___19 != 0U) {
      {
#line 2519
      tmp___13 = msg_data_sz(fragm);
#line 2519
      dsz = tmp___13;
#line 2520
      tmp___14 = get_fragm_size(pbuf);
#line 2520
      fsz = tmp___14;
#line 2521
      tmp___15 = msg_last_bcast(fragm);
#line 2521
      crs = (tmp___15 - 1U) * fsz;
#line 2522
      tmp___16 = get_expected_frags(pbuf);
#line 2522
      exp_frags = tmp___16 - 1U;
#line 2523
      tmp___17 = msg_data(fragm);
#line 2523
      skb_copy_to_linear_data_offset(pbuf, (int const   )crs, (void const   *)tmp___17,
                                     dsz);
#line 2525
      kfree_skb(fbuf);
      }
#line 2528
      if (exp_frags == 0U) {
#line 2529
        if ((unsigned long )prev != (unsigned long )((struct sk_buff *)0)) {
#line 2530
          prev->next = pbuf->next;
        } else {
#line 2532
          *pending = pbuf->next;
        }
        {
#line 2533
        tmp___18 = buf_msg(pbuf);
#line 2533
        msg_reset_reroute_cnt(tmp___18);
#line 2534
        *fb = pbuf;
#line 2535
        *m = buf_msg(pbuf);
        }
#line 2536
        return (1);
      } else {

      }
      {
#line 2538
      set_expected_frags(pbuf, exp_frags);
      }
#line 2539
      return (0);
    } else {

    }
  } else {

  }
  {
#line 2541
  kfree_skb(fbuf);
  }
#line 2542
  return (0);
}
}
#line 2545 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_set_supervision_props(struct tipc_link *l_ptr , u32 tolerance ) 
{ 


  {
#line 2547
  if (tolerance - 50U > 29950U) {
#line 2548
    return;
  } else {

  }
#line 2550
  l_ptr->tolerance = tolerance;
#line 2551
  l_ptr->continuity_interval = tolerance <= 2003U ? tolerance / 4U : 500U;
#line 2553
  l_ptr->abort_limit = tolerance / (l_ptr->continuity_interval / 4U);
#line 2554
  return;
}
}
#line 2556 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
void tipc_link_set_queue_limits(struct tipc_link *l_ptr , u32 window ) 
{ 


  {
#line 2559
  l_ptr->queue_limit[0] = window;
#line 2560
  l_ptr->queue_limit[1] = (window / 3U) * 4U;
#line 2561
  l_ptr->queue_limit[2] = (window / 3U) * 5U;
#line 2562
  l_ptr->queue_limit[3] = (window / 3U) * 6U;
#line 2564
  l_ptr->queue_limit[4] = 300U;
#line 2565
  l_ptr->queue_limit[5] = 600U;
#line 2566
  l_ptr->queue_limit[6] = 900U;
#line 2567
  l_ptr->queue_limit[7] = 1200U;
#line 2568
  l_ptr->queue_limit[8] = 1200U;
#line 2569
  l_ptr->queue_limit[10] = 2500U;
#line 2570
  l_ptr->queue_limit[11] = 3000U;
#line 2572
  l_ptr->queue_limit[12] = 4000U;
#line 2573
  return;
}
}
#line 2585 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static struct tipc_link *link_find_link(char const   *name , struct tipc_node **node ) 
{ 
  struct tipc_link_name link_name_parts ;
  struct tipc_bearer *b_ptr ;
  struct tipc_link *l_ptr ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 2592
  tmp = link_name_validate(name, & link_name_parts);
  }
#line 2592
  if (tmp == 0) {
#line 2593
    return ((struct tipc_link *)0);
  } else {

  }
  {
#line 2595
  b_ptr = tipc_bearer_find_interface((char const   *)(& link_name_parts.if_local));
  }
#line 2596
  if ((unsigned long )b_ptr == (unsigned long )((struct tipc_bearer *)0)) {
#line 2597
    return ((struct tipc_link *)0);
  } else {

  }
  {
#line 2599
  *node = tipc_node_find(link_name_parts.addr_peer);
  }
#line 2600
  if ((unsigned long )*node == (unsigned long )((struct tipc_node *)0)) {
#line 2601
    return ((struct tipc_link *)0);
  } else {

  }
#line 2603
  l_ptr = (*node)->links[b_ptr->identity];
#line 2604
  if ((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0)) {
#line 2605
    return ((struct tipc_link *)0);
  } else {
    {
#line 2604
    tmp___0 = strcmp((char const   *)(& l_ptr->name), name);
    }
#line 2604
    if (tmp___0 != 0) {
#line 2605
      return ((struct tipc_link *)0);
    } else {

    }
  }
#line 2607
  return (l_ptr);
}
}
#line 2618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_value_is_valid(u16 cmd , u32 new_value ) 
{ 


  {
  {
#line 2621
  if ((int )cmd == 16647) {
#line 2621
    goto case_16647;
  } else {

  }
#line 2624
  if ((int )cmd == 16648) {
#line 2624
    goto case_16648;
  } else {

  }
#line 2626
  if ((int )cmd == 16649) {
#line 2626
    goto case_16649;
  } else {

  }
#line 2620
  goto switch_break;
  case_16647: /* CIL Label */ ;
#line 2622
  return (new_value - 50U <= 29950U);
  case_16648: /* CIL Label */ ;
#line 2625
  return (new_value <= 31U);
  case_16649: /* CIL Label */ ;
#line 2627
  return (new_value - 16U <= 134U);
  switch_break: /* CIL Label */ ;
  }
#line 2630
  return (0);
}
}
#line 2643 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int link_cmd_set_value(char const   *name , u32 new_value , u16 cmd ) 
{ 
  struct tipc_node *node ;
  struct tipc_link *l_ptr ;
  struct tipc_bearer *b_ptr ;
  struct tipc_media *m_ptr ;

  {
  {
#line 2650
  l_ptr = link_find_link(name, & node);
  }
#line 2651
  if ((unsigned long )l_ptr != (unsigned long )((struct tipc_link *)0)) {
    {
#line 2656
    tipc_node_lock___0(node);
    }
    {
#line 2658
    if ((int )cmd == 16647) {
#line 2658
      goto case_16647;
    } else {

    }
#line 2663
    if ((int )cmd == 16648) {
#line 2663
      goto case_16648;
    } else {

    }
#line 2668
    if ((int )cmd == 16649) {
#line 2668
      goto case_16649;
    } else {

    }
#line 2657
    goto switch_break;
    case_16647: /* CIL Label */ 
    {
#line 2659
    link_set_supervision_props(l_ptr, new_value);
#line 2660
    tipc_link_send_proto_msg(l_ptr, 0U, 0, 0U, new_value, 0U, 0U);
    }
#line 2662
    goto ldv_41837;
    case_16648: /* CIL Label */ 
    {
#line 2664
    l_ptr->priority = new_value;
#line 2665
    tipc_link_send_proto_msg(l_ptr, 0U, 0, 0U, 0U, new_value, 0U);
    }
#line 2667
    goto ldv_41837;
    case_16649: /* CIL Label */ 
    {
#line 2669
    tipc_link_set_queue_limits(l_ptr, new_value);
    }
#line 2670
    goto ldv_41837;
    switch_break: /* CIL Label */ ;
    }
    ldv_41837: 
    {
#line 2672
    tipc_node_unlock___0(node);
    }
#line 2673
    return (0);
  } else {

  }
  {
#line 2676
  b_ptr = tipc_bearer_find(name);
  }
#line 2677
  if ((unsigned long )b_ptr != (unsigned long )((struct tipc_bearer *)0)) {
    {
#line 2679
    if ((int )cmd == 16647) {
#line 2679
      goto case_16647___0;
    } else {

    }
#line 2682
    if ((int )cmd == 16648) {
#line 2682
      goto case_16648___0;
    } else {

    }
#line 2685
    if ((int )cmd == 16649) {
#line 2685
      goto case_16649___0;
    } else {

    }
#line 2678
    goto switch_break___0;
    case_16647___0: /* CIL Label */ 
#line 2680
    b_ptr->tolerance = new_value;
#line 2681
    return (0);
    case_16648___0: /* CIL Label */ 
#line 2683
    b_ptr->priority = new_value;
#line 2684
    return (0);
    case_16649___0: /* CIL Label */ 
#line 2686
    b_ptr->window = new_value;
#line 2687
    return (0);
    switch_break___0: /* CIL Label */ ;
    }
#line 2689
    return (-22);
  } else {

  }
  {
#line 2692
  m_ptr = tipc_media_find(name);
  }
#line 2693
  if ((unsigned long )m_ptr == (unsigned long )((struct tipc_media *)0)) {
#line 2694
    return (-19);
  } else {

  }
  {
#line 2696
  if ((int )cmd == 16647) {
#line 2696
    goto case_16647___1;
  } else {

  }
#line 2699
  if ((int )cmd == 16648) {
#line 2699
    goto case_16648___1;
  } else {

  }
#line 2702
  if ((int )cmd == 16649) {
#line 2702
    goto case_16649___1;
  } else {

  }
#line 2695
  goto switch_break___1;
  case_16647___1: /* CIL Label */ 
#line 2697
  m_ptr->tolerance = new_value;
#line 2698
  return (0);
  case_16648___1: /* CIL Label */ 
#line 2700
  m_ptr->priority = new_value;
#line 2701
  return (0);
  case_16649___1: /* CIL Label */ 
#line 2703
  m_ptr->window = new_value;
#line 2704
  return (0);
  switch_break___1: /* CIL Label */ ;
  }
#line 2706
  return (-22);
}
}
#line 2709 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
struct sk_buff *tipc_link_cmd_config(void const   *req_tlv_area___0 , int req_tlv_space___0 ,
                                     u16 cmd ) 
{ 
  struct tipc_link_config *args ;
  u32 new_value ;
  int res ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  struct sk_buff *tmp___2 ;
  int tmp___3 ;
  struct sk_buff *tmp___4 ;
  int tmp___5 ;
  struct sk_buff *tmp___6 ;
  int tmp___7 ;
  struct sk_buff *tmp___8 ;
  struct sk_buff *tmp___9 ;

  {
  {
#line 2716
  tmp___0 = TLV_CHECK(req_tlv_area___0, (int )((__u16 )req_tlv_space___0), 24);
  }
#line 2716
  if (tmp___0 == 0) {
    {
#line 2717
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 2717
    return (tmp);
  } else {

  }
  {
#line 2719
  args = (struct tipc_link_config *)((char *)req_tlv_area___0 + 4UL);
#line 2720
  tmp___1 = __fswab32(args->value);
#line 2720
  new_value = tmp___1;
#line 2722
  tmp___3 = link_value_is_valid((int )cmd, new_value);
  }
#line 2722
  if (tmp___3 == 0) {
    {
#line 2723
    tmp___2 = tipc_cfg_reply_error_string((char *)"cannot change, value invalid");
    }
#line 2723
    return (tmp___2);
  } else {

  }
  {
#line 2726
  tmp___7 = strcmp((char const   *)(& args->name), (char const   *)(& tipc_bclink_name));
  }
#line 2726
  if (tmp___7 == 0) {
#line 2727
    if ((unsigned int )cmd == 16649U) {
      {
#line 2727
      tmp___5 = tipc_bclink_set_queue_limits(new_value);
      }
#line 2727
      if (tmp___5 == 0) {
        {
#line 2729
        tmp___4 = tipc_cfg_reply_none();
        }
#line 2729
        return (tmp___4);
      } else {

      }
    } else {

    }
    {
#line 2730
    tmp___6 = tipc_cfg_reply_error_string((char *)"\204 (cannot change setting on broadcast link)");
    }
#line 2730
    return (tmp___6);
  } else {

  }
  {
#line 2734
  _raw_read_lock_bh(& tipc_net_lock);
#line 2735
  res = link_cmd_set_value((char const   *)(& args->name), new_value, (int )cmd);
#line 2736
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 2737
  if (res != 0) {
    {
#line 2738
    tmp___8 = tipc_cfg_reply_error_string((char *)"cannot change link setting");
    }
#line 2738
    return (tmp___8);
  } else {

  }
  {
#line 2740
  tmp___9 = tipc_cfg_reply_none();
  }
#line 2740
  return (tmp___9);
}
}
#line 2747 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_reset_statistics(struct tipc_link *l_ptr ) 
{ 


  {
  {
#line 2749
  memset((void *)(& l_ptr->stats), 0, 132UL);
#line 2750
  l_ptr->stats.sent_info = l_ptr->next_out_no;
#line 2751
  l_ptr->stats.recv_info = l_ptr->next_in_no;
  }
#line 2752
  return;
}
}
#line 2754 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
struct sk_buff *tipc_link_cmd_reset_stats(void const   *req_tlv_area___0 , int req_tlv_space___0 ) 
{ 
  char *link_name ;
  struct tipc_link *l_ptr ;
  struct tipc_node *node ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  struct sk_buff *tmp___1 ;
  int tmp___2 ;
  struct sk_buff *tmp___3 ;
  int tmp___4 ;
  struct sk_buff *tmp___5 ;
  struct sk_buff *tmp___6 ;

  {
  {
#line 2760
  tmp___0 = TLV_CHECK(req_tlv_area___0, (int )((__u16 )req_tlv_space___0), 20);
  }
#line 2760
  if (tmp___0 == 0) {
    {
#line 2761
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 2761
    return (tmp);
  } else {

  }
  {
#line 2763
  link_name = (char *)req_tlv_area___0 + 4UL;
#line 2764
  tmp___4 = strcmp((char const   *)link_name, (char const   *)(& tipc_bclink_name));
  }
#line 2764
  if (tmp___4 == 0) {
    {
#line 2765
    tmp___2 = tipc_bclink_reset_stats();
    }
#line 2765
    if (tmp___2 != 0) {
      {
#line 2766
      tmp___1 = tipc_cfg_reply_error_string((char *)"link not found");
      }
#line 2766
      return (tmp___1);
    } else {

    }
    {
#line 2767
    tmp___3 = tipc_cfg_reply_none();
    }
#line 2767
    return (tmp___3);
  } else {

  }
  {
#line 2770
  _raw_read_lock_bh(& tipc_net_lock);
#line 2771
  l_ptr = link_find_link((char const   *)link_name, & node);
  }
#line 2772
  if ((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0)) {
    {
#line 2773
    _raw_read_unlock_bh(& tipc_net_lock);
#line 2774
    tmp___5 = tipc_cfg_reply_error_string((char *)"link not found");
    }
#line 2774
    return (tmp___5);
  } else {

  }
  {
#line 2777
  tipc_node_lock___0(node);
#line 2778
  link_reset_statistics(l_ptr);
#line 2779
  tipc_node_unlock___0(node);
#line 2780
  _raw_read_unlock_bh(& tipc_net_lock);
#line 2781
  tmp___6 = tipc_cfg_reply_none();
  }
#line 2781
  return (tmp___6);
}
}
#line 2787 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static u32 percent(u32 count , u32 total ) 
{ 


  {
#line 2789
  return ((count * 100U + total / 2U) / total);
}
}
#line 2800 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static int tipc_link_stats(char const   *name , char *buf , u32 const   buf_size ) 
{ 
  struct tipc_link *l ;
  struct tipc_stats *s ;
  struct tipc_node *node ;
  char *status ;
  u32 profile_total ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
  {
#line 2806
  profile_total = 0U;
#line 2809
  tmp___0 = strcmp(name, (char const   *)(& tipc_bclink_name));
  }
#line 2809
  if (tmp___0 == 0) {
    {
#line 2810
    tmp = tipc_bclink_stats(buf, buf_size);
    }
#line 2810
    return (tmp);
  } else {

  }
  {
#line 2812
  _raw_read_lock_bh(& tipc_net_lock);
#line 2813
  l = link_find_link(name, & node);
  }
#line 2814
  if ((unsigned long )l == (unsigned long )((struct tipc_link *)0)) {
    {
#line 2815
    _raw_read_unlock_bh(& tipc_net_lock);
    }
#line 2816
    return (0);
  } else {

  }
  {
#line 2818
  tipc_node_lock___0(node);
#line 2819
  s = & l->stats;
#line 2821
  tmp___2 = tipc_link_is_active(l);
  }
#line 2821
  if (tmp___2 != 0) {
#line 2822
    status = (char *)"ACTIVE";
  } else {
    {
#line 2823
    tmp___1 = tipc_link_is_up(l);
    }
#line 2823
    if (tmp___1 != 0) {
#line 2824
      status = (char *)"STANDBY";
    } else {
#line 2826
      status = (char *)"DEFUNCT";
    }
  }
  {
#line 2828
  ret = tipc_snprintf(buf, (int )buf_size, "Link <%s>\n  %s  MTU:%u  Priority:%u  Tolerance:%u ms  Window:%u packets\n",
                      (char *)(& l->name), status, l->max_pkt, l->priority, l->tolerance,
                      l->queue_limit[0]);
#line 2834
  tmp___3 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                          "  RX packets:%u fragments:%u/%u bundles:%u/%u\n", l->next_in_no - s->recv_info,
                          s->recv_fragments, s->recv_fragmented, s->recv_bundles,
                          s->recv_bundled);
#line 2834
  ret = ret + tmp___3;
#line 2840
  tmp___4 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                          "  TX packets:%u fragments:%u/%u bundles:%u/%u\n", l->next_out_no - s->sent_info,
                          s->sent_fragments, s->sent_fragmented, s->sent_bundles,
                          s->sent_bundled);
#line 2840
  ret = ret + tmp___4;
#line 2846
  profile_total = s->msg_length_counts;
  }
#line 2847
  if (profile_total == 0U) {
#line 2848
    profile_total = 1U;
  } else {

  }
  {
#line 2850
  tmp___5 = percent(s->msg_length_profile[6], profile_total);
#line 2850
  tmp___6 = percent(s->msg_length_profile[5], profile_total);
#line 2850
  tmp___7 = percent(s->msg_length_profile[4], profile_total);
#line 2850
  tmp___8 = percent(s->msg_length_profile[3], profile_total);
#line 2850
  tmp___9 = percent(s->msg_length_profile[2], profile_total);
#line 2850
  tmp___10 = percent(s->msg_length_profile[1], profile_total);
#line 2850
  tmp___11 = percent(s->msg_length_profile[0], profile_total);
#line 2850
  tmp___12 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                           "  TX profile sample:%u packets  average:%u octets\n  0-64:%u%% -256:%u%% -1024:%u%% -4096:%u%% -16384:%u%% -32768:%u%% -66000:%u%%\n",
                           s->msg_length_counts, s->msg_lengths_total / profile_total,
                           tmp___11, tmp___10, tmp___9, tmp___8, tmp___7, tmp___6,
                           tmp___5);
#line 2850
  ret = ret + tmp___12;
#line 2864
  tmp___13 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                           "  RX states:%u probes:%u naks:%u defs:%u dups:%u\n", s->recv_states,
                           s->recv_probes, s->recv_nacks, s->deferred_recv, s->duplicates);
#line 2864
  ret = ret + tmp___13;
#line 2869
  tmp___14 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                           "  TX states:%u probes:%u naks:%u acks:%u dups:%u\n", s->sent_states,
                           s->sent_probes, s->sent_nacks, s->sent_acks, s->retransmitted);
#line 2869
  ret = ret + tmp___14;
#line 2874
  tmp___15 = tipc_snprintf(buf + (unsigned long )ret, (int )((unsigned int )buf_size - (unsigned int )ret),
                           "  Congestion link:%u  Send queue max:%u avg:%u\n", s->link_congs,
                           s->max_queue_sz, s->queue_sz_counts != 0U ? s->accu_queue_sz / s->queue_sz_counts : 0U);
#line 2874
  ret = ret + tmp___15;
#line 2880
  tipc_node_unlock___0(node);
#line 2881
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 2882
  return (ret);
}
}
#line 2885 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
struct sk_buff *tipc_link_cmd_show_stats(void const   *req_tlv_area___0 , int req_tlv_space___0 ) 
{ 
  struct sk_buff *buf ;
  struct tlv_desc *rep_tlv ;
  int str_len ;
  int pb_len ;
  char *pb ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  struct sk_buff *tmp___1 ;

  {
  {
#line 2893
  tmp___0 = TLV_CHECK(req_tlv_area___0, (int )((__u16 )req_tlv_space___0), 20);
  }
#line 2893
  if (tmp___0 == 0) {
    {
#line 2894
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 2894
    return (tmp);
  } else {

  }
  {
#line 2896
  buf = tipc_cfg_reply_alloc(32772);
  }
#line 2897
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 2898
    return ((struct sk_buff *)0);
  } else {

  }
  {
#line 2900
  rep_tlv = (struct tlv_desc *)buf->data;
#line 2901
  pb = (char *)rep_tlv + 4UL;
#line 2902
  pb_len = 32768;
#line 2903
  str_len = tipc_link_stats((char const   *)((char *)req_tlv_area___0 + 4UL), pb,
                            (u32 const   )pb_len);
  }
#line 2905
  if (str_len == 0) {
    {
#line 2906
    kfree_skb(buf);
#line 2907
    tmp___1 = tipc_cfg_reply_error_string((char *)"link not found");
    }
#line 2907
    return (tmp___1);
  } else {

  }
  {
#line 2909
  str_len = str_len + 1;
#line 2910
  skb_put(buf, ((unsigned int )str_len + 7U) & 4294967292U);
#line 2911
  TLV_SET((void *)rep_tlv, 5, (void *)0, (int )((__u16 )str_len));
  }
#line 2913
  return (buf);
}
}
#line 2923 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
u32 tipc_link_get_max_pkt(u32 dest , u32 selector ) 
{ 
  struct tipc_node *n_ptr ;
  struct tipc_link *l_ptr ;
  u32 res ;

  {
#line 2927
  res = 1500U;
#line 2929
  if (dest == tipc_own_addr) {
#line 2930
    return (66060U);
  } else {

  }
  {
#line 2932
  _raw_read_lock_bh(& tipc_net_lock);
#line 2933
  n_ptr = tipc_node_find(dest);
  }
#line 2934
  if ((unsigned long )n_ptr != (unsigned long )((struct tipc_node *)0)) {
    {
#line 2935
    tipc_node_lock___0(n_ptr);
#line 2936
    l_ptr = n_ptr->active_links[selector & 1U];
    }
#line 2937
    if ((unsigned long )l_ptr != (unsigned long )((struct tipc_link *)0)) {
#line 2938
      res = l_ptr->max_pkt;
    } else {

    }
    {
#line 2939
    tipc_node_unlock___0(n_ptr);
    }
  } else {

  }
  {
#line 2941
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 2942
  return (res);
}
}
#line 2945 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/link.c"
static void link_print(struct tipc_link *l_ptr , char const   *str ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2947
  printk("\016tipc: %s Link %x<%s>:", str, l_ptr->addr, (char *)(& (l_ptr->b_ptr)->name));
#line 2949
  tmp___2 = link_working_unknown(l_ptr);
  }
#line 2949
  if (tmp___2 != 0) {
    {
#line 2950
    printk(":WU\n");
    }
  } else {
    {
#line 2951
    tmp___1 = link_reset_reset(l_ptr);
    }
#line 2951
    if (tmp___1 != 0) {
      {
#line 2952
      printk(":RR\n");
      }
    } else {
      {
#line 2953
      tmp___0 = link_reset_unknown(l_ptr);
      }
#line 2953
      if (tmp___0 != 0) {
        {
#line 2954
        printk(":RU\n");
        }
      } else {
        {
#line 2955
        tmp = link_working_working(l_ptr);
        }
#line 2955
        if (tmp != 0) {
          {
#line 2956
          printk(":WW\n");
          }
        } else {
          {
#line 2958
          printk("\n");
          }
        }
      }
    }
  }
#line 2959
  return;
}
}
#line 601 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_link.c.aux"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 604
  tmp = ldv_kzalloc(size, flags);
  }
#line 604
  return (tmp);
}
}
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_link.c.aux"
__inline static void ldv_spin_unlock_bh_60___0(spinlock_t *lock ) 
{ 


  {
  {
#line 794
  ldv_spin_unlock_lock_of_tipc_port();
#line 796
  spin_unlock_bh(lock);
  }
#line 797
  return;
}
}
#line 800 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_link.c.aux"
__inline static void ldv_spin_lock_bh_61___1(spinlock_t *lock ) 
{ 


  {
  {
#line 803
  ldv_spin_lock_tipc_port_list_lock();
#line 805
  spin_lock_bh(lock);
  }
#line 806
  return;
}
}
#line 809 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_link.c.aux"
__inline static void ldv_spin_unlock_bh_62___1(spinlock_t *lock ) 
{ 


  {
  {
#line 812
  ldv_spin_unlock_tipc_port_list_lock();
#line 814
  spin_unlock_bh(lock);
  }
#line 815
  return;
}
}
#line 818 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_link.c.aux"
__inline static int ldv_spin_trylock_bh_63(spinlock_t *lock ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 822
  tmp = spin_trylock_bh(lock);
#line 822
  ldv_func_res = tmp;
#line 824
  tmp___0 = ldv_spin_trylock_tipc_port_list_lock();
  }
#line 824
  return (tmp___0);
#line 826
  return (ldv_func_res);
}
}
#line 830 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_link.c.aux"
__inline static void ldv_spin_lock_bh_64___0(spinlock_t *lock ) 
{ 


  {
  {
#line 833
  ldv_spin_lock_lock_of_tipc_port();
#line 835
  spin_lock_bh(lock);
  }
#line 836
  return;
}
}
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_58(spinlock_t *lock ) ;
#line 372
__inline static void ldv_spin_lock_bh_60(spinlock_t *lock ) ;
#line 416
__inline static void ldv_spin_unlock_bh_59(spinlock_t *lock ) ;
#line 420
__inline static void ldv_spin_unlock_bh_61(spinlock_t *lock ) ;
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_dest_domain(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 515
  tmp = msg_word(m, 2U);
  }
#line 515
  return (tmp);
}
}
#line 518 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_dest_domain(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 520
  msg_set_word(m, 2U, n);
  }
#line 521
  return;
}
}
#line 595 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_bc_netid(struct tipc_msg *m , u32 id ) 
{ 


  {
  {
#line 597
  msg_set_word(m, 4U, id);
  }
#line 598
  return;
}
}
#line 673 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static char *msg_media_addr(struct tipc_msg *m ) 
{ 


  {
#line 675
  return ((char *)((__be32 *)(& m->hdr) + 5UL));
}
}
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
struct tipc_node *tipc_node_create(u32 addr ) ;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_lock___1(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 123
  ldv_spin_lock_bh_58(& n_ptr->lock);
  }
#line 124
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_unlock___1(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 128
  ldv_spin_unlock_bh_59(& n_ptr->lock);
  }
#line 129
  return;
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
static struct sk_buff *tipc_disc_init_msg(u32 type , u32 dest_domain , struct tipc_bearer *b_ptr ) 
{ 
  struct sk_buff *buf ;
  struct sk_buff *tmp ;
  struct tipc_msg *msg ;
  char *tmp___0 ;

  {
  {
#line 76
  tmp = tipc_buf_acquire(40U);
#line 76
  buf = tmp;
  }
#line 79
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 80
    msg = buf_msg(buf);
#line 81
    tipc_msg_init(msg, 13U, type, 40U, dest_domain);
#line 82
    msg_set_non_seq(msg, 1U);
#line 83
    msg_set_bcast_ack(msg, (u32 )tipc_random);
#line 84
    msg_set_dest_domain(msg, dest_domain);
#line 85
    msg_set_bc_netid(msg, (u32 )tipc_net_id);
#line 86
    tmp___0 = msg_media_addr(msg);
#line 86
    (*((b_ptr->media)->addr2msg))(& b_ptr->addr, tmp___0);
    }
  } else {

  }
#line 88
  return (buf);
}
}
#line 97 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
static void disc_dupl_alert(struct tipc_bearer *b_ptr , u32 node_addr , struct tipc_media_addr *media_addr ) 
{ 
  char node_addr_str[16U] ;
  char media_addr_str[64U] ;

  {
  {
#line 103
  tipc_addr_string_fill((char *)(& node_addr_str), node_addr);
#line 104
  tipc_media_addr_printf((char *)(& media_addr_str), 64, media_addr);
#line 106
  printk("\ftipc: Duplicate %s using %s seen on <%s>\n", (char *)(& node_addr_str),
         (char *)(& media_addr_str), (char *)(& b_ptr->name));
  }
#line 107
  return;
}
}
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
void tipc_disc_recv_msg(struct sk_buff *buf , struct tipc_bearer *b_ptr ) 
{ 
  struct tipc_node *n_ptr ;
  struct tipc_link *link ;
  struct tipc_media_addr media_addr ;
  struct sk_buff *rbuf ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  u32 dest ;
  u32 tmp___0 ;
  u32 orig ;
  u32 tmp___1 ;
  u32 net_id ;
  u32 tmp___2 ;
  u32 type ;
  u32 tmp___3 ;
  u32 signature ;
  u32 tmp___4 ;
  int addr_mismatch ;
  int link_fully_up ;
  char *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  struct tipc_link *curr_link ;
  int i ;
  int tmp___13 ;
  int tmp___14 ;

  {
  {
#line 121
  tmp = buf_msg(buf);
#line 121
  msg = tmp;
#line 122
  tmp___0 = msg_dest_domain(msg);
#line 122
  dest = tmp___0;
#line 123
  tmp___1 = msg_prevnode(msg);
#line 123
  orig = tmp___1;
#line 124
  tmp___2 = msg_origport(msg);
#line 124
  net_id = tmp___2;
#line 125
  tmp___3 = msg_type(msg);
#line 125
  type = tmp___3;
#line 126
  tmp___4 = msg_bcast_ack(msg);
#line 126
  signature = tmp___4;
#line 130
  media_addr.broadcast = 1U;
#line 131
  tmp___5 = msg_media_addr(msg);
#line 131
  (*((b_ptr->media)->msg2addr))((struct tipc_bearer  const  *)b_ptr, & media_addr,
                                tmp___5);
#line 132
  kfree_skb(buf);
  }
#line 135
  if (net_id != (u32 )tipc_net_id) {
#line 136
    return;
  } else {

  }
#line 137
  if ((unsigned int )media_addr.broadcast != 0U) {
#line 138
    return;
  } else {

  }
  {
#line 139
  tmp___6 = tipc_addr_domain_valid(dest);
  }
#line 139
  if (tmp___6 == 0) {
#line 140
    return;
  } else {

  }
  {
#line 141
  tmp___7 = tipc_addr_node_valid(orig);
  }
#line 141
  if (tmp___7 == 0) {
#line 142
    return;
  } else {

  }
#line 143
  if (orig == tipc_own_addr) {
    {
#line 144
    tmp___8 = memcmp((void const   *)(& media_addr), (void const   *)(& b_ptr->addr),
                     22UL);
    }
#line 144
    if (tmp___8 != 0) {
      {
#line 145
      disc_dupl_alert(b_ptr, tipc_own_addr, & media_addr);
      }
    } else {

    }
#line 146
    return;
  } else {

  }
  {
#line 148
  tmp___9 = tipc_in_scope(dest, tipc_own_addr);
  }
#line 148
  if (tmp___9 == 0) {
#line 149
    return;
  } else {

  }
  {
#line 150
  tmp___10 = tipc_in_scope((b_ptr->link_req)->domain, orig);
  }
#line 150
  if (tmp___10 == 0) {
#line 151
    return;
  } else {

  }
  {
#line 154
  n_ptr = tipc_node_find(orig);
  }
#line 155
  if ((unsigned long )n_ptr == (unsigned long )((struct tipc_node *)0)) {
    {
#line 156
    n_ptr = tipc_node_create(orig);
    }
#line 157
    if ((unsigned long )n_ptr == (unsigned long )((struct tipc_node *)0)) {
#line 158
      return;
    } else {

    }
  } else {

  }
  {
#line 160
  tipc_node_lock___1(n_ptr);
#line 163
  link = n_ptr->links[b_ptr->identity];
  }
#line 164
  if ((unsigned long )link != (unsigned long )((struct tipc_link *)0)) {
    {
#line 164
    tmp___11 = memcmp((void const   *)(& link->media_addr), (void const   *)(& media_addr),
                      22UL);
    }
#line 164
    if (tmp___11 != 0) {
#line 164
      tmp___12 = 1;
    } else {
#line 164
      tmp___12 = 0;
    }
  } else {
#line 164
    tmp___12 = 0;
  }
#line 164
  addr_mismatch = tmp___12;
#line 184
  if (signature != n_ptr->signature) {
#line 185
    if (n_ptr->working_links == 0) {
#line 189
      i = 0;
#line 189
      goto ldv_40524;
      ldv_40523: 
#line 190
      curr_link = n_ptr->links[i];
#line 191
      if ((unsigned long )curr_link != (unsigned long )((struct tipc_link *)0)) {
        {
#line 192
        memset((void *)(& curr_link->media_addr), 0, 22UL);
#line 194
        tipc_link_reset(curr_link);
        }
      } else {

      }
#line 189
      i = i + 1;
      ldv_40524: ;
#line 189
      if (i <= 1) {
#line 191
        goto ldv_40523;
      } else {

      }
#line 197
      addr_mismatch = (unsigned long )link != (unsigned long )((struct tipc_link *)0);
    } else {
      {
#line 198
      tmp___13 = tipc_link_is_up(link);
      }
#line 198
      if (tmp___13 != 0 && addr_mismatch == 0) {

      } else {
        {
#line 201
        disc_dupl_alert(b_ptr, orig, & media_addr);
#line 202
        tipc_node_unlock___1(n_ptr);
        }
#line 203
        return;
      }
    }
#line 205
    n_ptr->signature = signature;
  } else {

  }
#line 218
  if (addr_mismatch != 0) {
    {
#line 219
    tmp___14 = tipc_link_is_up(link);
    }
#line 219
    if (tmp___14 != 0) {
      {
#line 220
      disc_dupl_alert(b_ptr, orig, & media_addr);
#line 221
      tipc_node_unlock___1(n_ptr);
      }
#line 222
      return;
    } else {
      {
#line 224
      memcpy((void *)(& link->media_addr), (void const   *)(& media_addr), 22UL);
#line 226
      tipc_link_reset(link);
      }
    }
  } else {

  }
#line 231
  if ((unsigned long )link == (unsigned long )((struct tipc_link *)0)) {
    {
#line 232
    link = tipc_link_create(n_ptr, b_ptr, (struct tipc_media_addr  const  *)(& media_addr));
    }
#line 233
    if ((unsigned long )link == (unsigned long )((struct tipc_link *)0)) {
      {
#line 234
      tipc_node_unlock___1(n_ptr);
      }
#line 235
      return;
    } else {

    }
  } else {

  }
  {
#line 240
  link_fully_up = link_working_working(link);
  }
#line 242
  if ((type == 0U && link_fully_up == 0) && b_ptr->blocked == 0) {
    {
#line 243
    rbuf = tipc_disc_init_msg(1U, orig, b_ptr);
    }
#line 244
    if ((unsigned long )rbuf != (unsigned long )((struct sk_buff *)0)) {
      {
#line 245
      tipc_bearer_send(b_ptr, rbuf, & media_addr);
#line 246
      kfree_skb(rbuf);
      }
    } else {

    }
  } else {

  }
  {
#line 250
  tipc_node_unlock___1(n_ptr);
  }
#line 251
  return;
}
}
#line 260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
static void disc_update(struct tipc_link_req *req ) 
{ 


  {
#line 262
  if (req->num_nodes == 0) {
#line 263
    if (req->timer_intv > 1000U) {
      {
#line 265
      req->timer_intv = 125U;
#line 266
      k_start_timer(& req->timer, (unsigned long )req->timer_intv);
      }
    } else {

    }
  } else {

  }
#line 268
  return;
}
}
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
void tipc_disc_add_dest(struct tipc_link_req *req ) 
{ 


  {
#line 277
  req->num_nodes = req->num_nodes + 1;
#line 278
  return;
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
void tipc_disc_remove_dest(struct tipc_link_req *req ) 
{ 


  {
  {
#line 286
  req->num_nodes = req->num_nodes - 1;
#line 287
  disc_update(req);
  }
#line 288
  return;
}
}
#line 294 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
static void disc_send_msg(struct tipc_link_req *req ) 
{ 


  {
#line 296
  if ((req->bearer)->blocked == 0) {
    {
#line 297
    tipc_bearer_send(req->bearer, req->buf, & req->dest);
    }
  } else {

  }
#line 298
  return;
}
}
#line 306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
static void disc_timeout(struct tipc_link_req *req ) 
{ 
  int max_delay ;
  unsigned int tmp ;

  {
  {
#line 310
  ldv_spin_lock_bh_60(& (req->bearer)->lock);
#line 313
  tmp = tipc_node(req->domain);
  }
#line 313
  if (tmp != 0U && req->num_nodes != 0) {
#line 314
    req->timer_intv = 4294967295U;
#line 315
    goto exit;
  } else {

  }
  {
#line 325
  disc_send_msg(req);
#line 327
  req->timer_intv = req->timer_intv * 2U;
  }
#line 328
  if (req->num_nodes != 0) {
#line 329
    max_delay = 60000;
  } else {
#line 331
    max_delay = 1000;
  }
#line 332
  if (req->timer_intv > (unsigned int )max_delay) {
#line 333
    req->timer_intv = (unsigned int )max_delay;
  } else {

  }
  {
#line 335
  k_start_timer(& req->timer, (unsigned long )req->timer_intv);
  }
  exit: 
  {
#line 337
  ldv_spin_unlock_bh_61(& (req->bearer)->lock);
  }
#line 338
  return;
}
}
#line 348 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
int tipc_disc_create(struct tipc_bearer *b_ptr , struct tipc_media_addr *dest , u32 dest_domain ) 
{ 
  struct tipc_link_req *req ;
  void *tmp ;

  {
  {
#line 353
  tmp = kmalloc(184UL, 32U);
#line 353
  req = (struct tipc_link_req *)tmp;
  }
#line 354
  if ((unsigned long )req == (unsigned long )((struct tipc_link_req *)0)) {
#line 355
    return (-12);
  } else {

  }
  {
#line 357
  req->buf = tipc_disc_init_msg(0U, dest_domain, b_ptr);
  }
#line 358
  if ((unsigned long )req->buf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 359
    kfree((void const   *)req);
    }
#line 360
    return (-42);
  } else {

  }
  {
#line 363
  memcpy((void *)(& req->dest), (void const   *)dest, 22UL);
#line 364
  req->bearer = b_ptr;
#line 365
  req->domain = dest_domain;
#line 366
  req->num_nodes = 0;
#line 367
  req->timer_intv = 125U;
#line 368
  k_init_timer(& req->timer, (void (*)(unsigned long  ))(& disc_timeout), (unsigned long )req);
#line 369
  k_start_timer(& req->timer, (unsigned long )req->timer_intv);
#line 370
  b_ptr->link_req = req;
#line 371
  disc_send_msg(req);
  }
#line 372
  return (0);
}
}
#line 379 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/discover.c"
void tipc_disc_delete(struct tipc_link_req *req ) 
{ 


  {
  {
#line 381
  k_cancel_timer(& req->timer);
#line 382
  k_term_timer(& req->timer);
#line 383
  kfree_skb(req->buf);
#line 384
  kfree((void const   *)req);
  }
#line 385
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_version(struct tipc_msg *m ) 
{ 


  {
  {
#line 128
  msg_set_bits(m, 0U, 29U, 7U, 2U);
  }
#line 129
  return;
}
}
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_user(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 143
  msg_set_bits(m, 0U, 25U, 15U, n);
  }
#line 144
  return;
}
}
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_hdr_sz(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 163
  msg_set_bits(m, 0U, 21U, 15U, n >> 2);
  }
#line 164
  return;
}
}
#line 317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_prevnode(struct tipc_msg *m , u32 a ) 
{ 


  {
  {
#line 319
  msg_set_word(m, 3U, a);
  }
#line 320
  return;
}
}
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_orignode(struct tipc_msg *m , u32 a ) 
{ 


  {
  {
#line 366
  msg_set_word(m, 6U, a);
  }
#line 367
  return;
}
}
#line 374 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_destnode(struct tipc_msg *m , u32 a ) 
{ 


  {
  {
#line 376
  msg_set_word(m, 7U, a);
  }
#line 377
  return;
}
}
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.c"
u32 tipc_msg_tot_importance(struct tipc_msg *m ) 
{ 
  u32 tmp ;
  u32 tmp___0 ;
  long tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  long tmp___4 ;
  struct tipc_msg *tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;

  {
  {
#line 42
  tmp___3 = msg_isdata(m);
#line 42
  tmp___4 = __builtin_expect(tmp___3 != 0U, 1L);
  }
#line 42
  if (tmp___4 != 0L) {
    {
#line 43
    tmp___0 = msg_orignode(m);
#line 43
    tmp___1 = __builtin_expect(tmp___0 == tipc_own_addr, 1L);
    }
#line 43
    if (tmp___1 != 0L) {
      {
#line 44
      tmp = msg_user(m);
      }
#line 44
      return (tmp);
    } else {

    }
    {
#line 45
    tmp___2 = msg_user(m);
    }
#line 45
    return (tmp___2 + 4U);
  } else {

  }
  {
#line 47
  tmp___7 = msg_user(m);
  }
#line 47
  if (tmp___7 == 12U) {
    {
#line 47
    tmp___8 = msg_type(m);
    }
#line 47
    if (tmp___8 == 0U) {
      {
#line 49
      tmp___5 = msg_get_wrapped(m);
#line 49
      tmp___6 = msg_user(tmp___5);
      }
#line 49
      return (tmp___6);
    } else {

    }
  } else {

  }
  {
#line 50
  tmp___9 = msg_user(m);
  }
#line 50
  return (tmp___9);
}
}
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.c"
void tipc_msg_init(struct tipc_msg *m , u32 user , u32 type , u32 hsize , u32 destnode ) 
{ 


  {
  {
#line 57
  memset((void *)m, 0, (size_t )hsize);
#line 58
  msg_set_version(m);
#line 59
  msg_set_user(m, user);
#line 60
  msg_set_hdr_sz(m, hsize);
#line 61
  msg_set_size(m, hsize);
#line 62
  msg_set_prevnode(m, tipc_own_addr);
#line 63
  msg_set_type(m, type);
#line 64
  msg_set_orignode(m, tipc_own_addr);
#line 65
  msg_set_destnode(m, destnode);
  }
#line 66
  return;
}
}
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.c"
int tipc_msg_build(struct tipc_msg *hdr , struct iovec  const  *msg_sect , u32 num_sect ,
                   unsigned int total_len , int max_size , struct sk_buff **buf ) 
{ 
  int dsz ;
  int sz ;
  int hsz ;
  int pos ;
  int res ;
  int cnt ;
  u32 tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 81
  dsz = (int )total_len;
#line 82
  tmp = msg_hdr_sz(hdr);
#line 82
  hsz = (int )tmp;
#line 82
  pos = hsz;
#line 83
  sz = hsz + dsz;
#line 84
  msg_set_size(hdr, (u32 )sz);
#line 85
  tmp___0 = __builtin_expect(sz > max_size, 0L);
  }
#line 85
  if (tmp___0 != 0L) {
#line 86
    *buf = (struct sk_buff *)0;
#line 87
    return (dsz);
  } else {

  }
  {
#line 90
  *buf = tipc_buf_acquire((u32 )sz);
  }
#line 91
  if ((unsigned long )*buf == (unsigned long )((struct sk_buff *)0)) {
#line 92
    return (-12);
  } else {

  }
  {
#line 93
  skb_copy_to_linear_data(*buf, (void const   *)hdr, (unsigned int const   )hsz);
#line 94
  res = 1;
#line 94
  cnt = 0;
  }
#line 94
  goto ldv_40163;
  ldv_40162: 
  {
#line 95
  skb_copy_to_linear_data_offset(*buf, pos, (void const   *)(msg_sect + (unsigned long )cnt)->iov_base,
                                 (unsigned int const   )(msg_sect + (unsigned long )cnt)->iov_len);
#line 98
  pos = (int )((unsigned int )pos + (unsigned int )(msg_sect + (unsigned long )cnt)->iov_len);
#line 94
  cnt = cnt + 1;
  }
  ldv_40163: ;
#line 94
  if (res != 0 && (u32 )cnt < num_sect) {
#line 96
    goto ldv_40162;
  } else {

  }
  {
#line 100
  tmp___1 = __builtin_expect(res != 0, 1L);
  }
#line 100
  if (tmp___1 != 0L) {
#line 101
    return (dsz);
  } else {

  }
  {
#line 103
  kfree_skb(*buf);
#line 104
  *buf = (struct sk_buff *)0;
  }
#line 105
  return (-14);
}
}
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_58(spinlock_t *lock ) ;
#line 416
__inline static void ldv_spin_unlock_bh_59(spinlock_t *lock ) ;
#line 664 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
extern struct sk_buff *skb_copy(struct sk_buff  const  * , gfp_t  ) ;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node_subscr.h"
void tipc_nodesub_subscribe(struct tipc_node_subscr *node_sub , u32 addr , void *usr_handle ,
                            void (*handle_down)(void * ) ) ;
#line 60
void tipc_nodesub_unsubscribe(struct tipc_node_subscr *node_sub ) ;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
struct list_head tipc_node_list ;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_lock___2(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 123
  ldv_spin_lock_bh_58(& n_ptr->lock);
  }
#line 124
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_unlock___2(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 128
  ldv_spin_unlock_bh_59(& n_ptr->lock);
  }
#line 129
  return;
}
}
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.h"
rwlock_t tipc_nametbl_lock ;
#line 94
struct publication *tipc_nametbl_insert_publ(u32 type , u32 lower , u32 upper , u32 scope ,
                                             u32 node , u32 port , u32 key ) ;
#line 97
struct publication *tipc_nametbl_remove_publ(u32 type , u32 lower , u32 node , u32 ref ,
                                             u32 key ) ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.h"
void tipc_named_publish(struct publication *publ ) ;
#line 43
void tipc_named_withdraw(struct publication *publ ) ;
#line 44
void tipc_named_node_up(unsigned long nodearg ) ;
#line 46
void tipc_named_reinit(void) ;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static struct publ_list publ_zone  =    {{& publ_zone.list, & publ_zone.list}, 0U};
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static struct publ_list publ_cluster  =    {{& publ_cluster.list, & publ_cluster.list}, 0U};
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static struct publ_list publ_node  =    {{& publ_node.list, & publ_node.list}, 0U};
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static struct publ_list *publ_lists[4U]  = {      (struct publ_list *)0,      & publ_zone,      & publ_cluster,      & publ_node};
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static void publ_to_item(struct distr_item *i , struct publication *p ) 
{ 
  __u32 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
  {
#line 107
  tmp = __fswab32(p->type);
#line 107
  i->type = tmp;
#line 108
  tmp___0 = __fswab32(p->lower);
#line 108
  i->lower = tmp___0;
#line 109
  tmp___1 = __fswab32(p->upper);
#line 109
  i->upper = tmp___1;
#line 110
  tmp___2 = __fswab32(p->ref);
#line 110
  i->ref = tmp___2;
#line 111
  tmp___3 = __fswab32(p->key);
#line 111
  i->key = tmp___3;
  }
#line 112
  return;
}
}
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static struct sk_buff *named_prepare_buf(u32 type , u32 size , u32 dest ) 
{ 
  struct sk_buff *buf ;
  struct sk_buff *tmp ;
  struct tipc_msg *msg ;

  {
  {
#line 119
  tmp = tipc_buf_acquire(size + 40U);
#line 119
  buf = tmp;
  }
#line 122
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 123
    msg = buf_msg(buf);
#line 124
    tipc_msg_init(msg, 11U, type, 40U, dest);
#line 125
    msg_set_size(msg, size + 40U);
    }
  } else {

  }
#line 127
  return (buf);
}
}
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static void named_cluster_distribute(struct sk_buff *buf ) 
{ 
  struct sk_buff *buf_copy ;
  struct tipc_node *n_ptr ;
  struct list_head  const  *__mptr ;
  struct tipc_msg *tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 135
  __mptr = (struct list_head  const  *)tipc_node_list.next;
#line 135
  n_ptr = (struct tipc_node *)((char *)__mptr + 0xffffffffffffffa0UL);
#line 135
  goto ldv_40569;
  ldv_40568: 
  {
#line 136
  tmp___0 = tipc_node_active_links(n_ptr);
  }
#line 136
  if (tmp___0 != 0) {
    {
#line 137
    buf_copy = skb_copy((struct sk_buff  const  *)buf, 32U);
    }
#line 138
    if ((unsigned long )buf_copy == (unsigned long )((struct sk_buff *)0)) {
#line 139
      goto ldv_40567;
    } else {

    }
    {
#line 140
    tmp = buf_msg(buf_copy);
#line 140
    msg_set_destnode(tmp, n_ptr->addr);
#line 141
    tipc_link_send(buf_copy, n_ptr->addr, n_ptr->addr);
    }
  } else {

  }
#line 135
  __mptr___0 = (struct list_head  const  *)n_ptr->list.next;
#line 135
  n_ptr = (struct tipc_node *)((char *)__mptr___0 + 0xffffffffffffffa0UL);
  ldv_40569: ;
#line 135
  if ((unsigned long )(& n_ptr->list) != (unsigned long )(& tipc_node_list)) {
#line 137
    goto ldv_40568;
  } else {

  }
  ldv_40567: 
  {
#line 145
  kfree_skb(buf);
  }
#line 146
  return;
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
void tipc_named_publish(struct publication *publ ) 
{ 
  struct sk_buff *buf ;
  struct distr_item *item ;
  struct tipc_msg *tmp ;
  unchar *tmp___0 ;

  {
  {
#line 156
  list_add_tail(& publ->local_list, & (publ_lists[publ->scope])->list);
#line 157
  (publ_lists[publ->scope])->size = (publ_lists[publ->scope])->size + 1U;
  }
#line 159
  if (publ->scope == 3U) {
#line 160
    return;
  } else {

  }
  {
#line 162
  buf = named_prepare_buf(0U, 20U, 0U);
  }
#line 163
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 164
    printk("\ftipc: Publication distribution failure\n");
    }
#line 165
    return;
  } else {

  }
  {
#line 168
  tmp = buf_msg(buf);
#line 168
  tmp___0 = msg_data(tmp);
#line 168
  item = (struct distr_item *)tmp___0;
#line 169
  publ_to_item(item, publ);
#line 170
  named_cluster_distribute(buf);
  }
#line 171
  return;
}
}
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
void tipc_named_withdraw(struct publication *publ ) 
{ 
  struct sk_buff *buf ;
  struct distr_item *item ;
  struct tipc_msg *tmp ;
  unchar *tmp___0 ;

  {
  {
#line 181
  list_del(& publ->local_list);
#line 182
  (publ_lists[publ->scope])->size = (publ_lists[publ->scope])->size - 1U;
  }
#line 184
  if (publ->scope == 3U) {
#line 185
    return;
  } else {

  }
  {
#line 187
  buf = named_prepare_buf(1U, 20U, 0U);
  }
#line 188
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 189
    printk("\ftipc: Withdrawal distribution failure\n");
    }
#line 190
    return;
  } else {

  }
  {
#line 193
  tmp = buf_msg(buf);
#line 193
  tmp___0 = msg_data(tmp);
#line 193
  item = (struct distr_item *)tmp___0;
#line 194
  publ_to_item(item, publ);
#line 195
  named_cluster_distribute(buf);
  }
#line 196
  return;
}
}
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static void named_distribute(struct list_head *message_list , u32 node , struct publ_list *pls ,
                             u32 max_item_buf ) 
{ 
  struct publication *publ ;
  struct sk_buff *buf ;
  struct distr_item *item ;
  u32 left ;
  u32 rest ;
  struct list_head  const  *__mptr ;
  struct tipc_msg *tmp ;
  unchar *tmp___0 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 205
  buf = (struct sk_buff *)0;
#line 206
  item = (struct distr_item *)0;
#line 207
  left = 0U;
#line 208
  rest = pls->size * 20U;
#line 210
  __mptr = (struct list_head  const  *)pls->list.next;
#line 210
  publ = (struct publication *)((char *)__mptr + 0xffffffffffffffb8UL);
#line 210
  goto ldv_40596;
  ldv_40595: ;
#line 211
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 212
    left = max_item_buf < rest ? max_item_buf : rest;
#line 213
    rest = rest - left;
#line 214
    buf = named_prepare_buf(0U, left, node);
    }
#line 215
    if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
      {
#line 216
      printk("\ftipc: Bulk publication failure\n");
      }
#line 217
      return;
    } else {

    }
    {
#line 219
    tmp = buf_msg(buf);
#line 219
    tmp___0 = msg_data(tmp);
#line 219
    item = (struct distr_item *)tmp___0;
    }
  } else {

  }
  {
#line 221
  publ_to_item(item, publ);
#line 222
  item = item + 1;
#line 223
  left = left - 20U;
  }
#line 224
  if (left == 0U) {
    {
#line 225
    list_add_tail((struct list_head *)buf, message_list);
#line 226
    buf = (struct sk_buff *)0;
    }
  } else {

  }
#line 210
  __mptr___0 = (struct list_head  const  *)publ->local_list.next;
#line 210
  publ = (struct publication *)((char *)__mptr___0 + 0xffffffffffffffb8UL);
  ldv_40596: ;
#line 210
  if ((unsigned long )(& publ->local_list) != (unsigned long )(& pls->list)) {
#line 212
    goto ldv_40595;
  } else {

  }

#line 217
  return;
}
}
#line 234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
void tipc_named_node_up(unsigned long nodearg ) 
{ 
  struct tipc_node *n_ptr ;
  struct tipc_link *l_ptr ;
  struct list_head message_list ;
  u32 node ;
  u32 max_item_buf ;

  {
  {
#line 239
  node = (unsigned int )nodearg;
#line 240
  max_item_buf = 0U;
#line 243
  _raw_read_lock_bh(& tipc_net_lock);
#line 244
  n_ptr = tipc_node_find(node);
  }
#line 245
  if ((unsigned long )n_ptr != (unsigned long )((struct tipc_node *)0)) {
    {
#line 246
    tipc_node_lock___2(n_ptr);
#line 247
    l_ptr = n_ptr->active_links[0];
    }
#line 248
    if ((unsigned long )l_ptr != (unsigned long )((struct tipc_link *)0)) {
#line 249
      max_item_buf = ((l_ptr->max_pkt - 40U) / 20U) * 20U;
    } else {

    }
    {
#line 251
    tipc_node_unlock___2(n_ptr);
    }
  } else {

  }
  {
#line 253
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 254
  if (max_item_buf == 0U) {
#line 255
    return;
  } else {

  }
  {
#line 258
  INIT_LIST_HEAD(& message_list);
#line 260
  _raw_read_lock_bh(& tipc_nametbl_lock);
#line 261
  named_distribute(& message_list, node, & publ_cluster, max_item_buf);
#line 262
  named_distribute(& message_list, node, & publ_zone, max_item_buf);
#line 263
  _raw_read_unlock_bh(& tipc_nametbl_lock);
#line 265
  tipc_link_send_names(& message_list, node);
  }
#line 266
  return;
}
}
#line 274 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
static void named_purge_publ(struct publication *publ ) 
{ 
  struct publication *p ;

  {
  {
#line 278
  _raw_write_lock_bh(& tipc_nametbl_lock);
#line 279
  p = tipc_nametbl_remove_publ(publ->type, publ->lower, publ->node, publ->ref, publ->key);
  }
#line 281
  if ((unsigned long )p != (unsigned long )((struct publication *)0)) {
    {
#line 282
    tipc_nodesub_unsubscribe(& p->subscr);
    }
  } else {

  }
  {
#line 283
  _raw_write_unlock_bh(& tipc_nametbl_lock);
  }
#line 285
  if ((unsigned long )p != (unsigned long )publ) {
    {
#line 286
    printk("\vtipc: Unable to remove publication from failed node\n (type=%u, lower=%u, node=0x%x, ref=%u, key=%u)\n",
           publ->type, publ->lower, publ->node, publ->ref, publ->key);
    }
  } else {

  }
  {
#line 292
  kfree((void const   *)p);
  }
#line 293
  return;
}
}
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
void tipc_named_recv(struct sk_buff *buf ) 
{ 
  struct publication *publ ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  struct distr_item *item ;
  unchar *tmp___0 ;
  u32 count ;
  u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  u32 tmp___11 ;
  __u32 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u32 tmp___15 ;
  __u32 tmp___16 ;
  __u32 tmp___17 ;
  u32 tmp___18 ;
  u32 tmp___19 ;
  u32 tmp___20 ;
  u32 tmp___21 ;

  {
  {
#line 301
  tmp = buf_msg(buf);
#line 301
  msg = tmp;
#line 302
  tmp___0 = msg_data(msg);
#line 302
  item = (struct distr_item *)tmp___0;
#line 303
  tmp___1 = msg_data_sz(msg);
#line 303
  count = tmp___1 / 20U;
#line 305
  _raw_write_lock_bh(& tipc_nametbl_lock);
  }
#line 306
  goto ldv_40618;
  ldv_40617: 
  {
#line 307
  tmp___20 = msg_type(msg);
  }
#line 307
  if (tmp___20 == 0U) {
    {
#line 308
    tmp___2 = __fswab32(item->key);
#line 308
    tmp___3 = __fswab32(item->ref);
#line 308
    tmp___4 = msg_orignode(msg);
#line 308
    tmp___5 = __fswab32(item->upper);
#line 308
    tmp___6 = __fswab32(item->lower);
#line 308
    tmp___7 = __fswab32(item->type);
#line 308
    publ = tipc_nametbl_insert_publ(tmp___7, tmp___6, tmp___5, 2U, tmp___4, tmp___3,
                                    tmp___2);
    }
#line 315
    if ((unsigned long )publ != (unsigned long )((struct publication *)0)) {
      {
#line 316
      tmp___8 = msg_orignode(msg);
#line 316
      tipc_nodesub_subscribe(& publ->subscr, tmp___8, (void *)publ, (void (*)(void * ))(& named_purge_publ));
      }
    } else {

    }
  } else {
    {
#line 322
    tmp___19 = msg_type(msg);
    }
#line 322
    if (tmp___19 == 1U) {
      {
#line 323
      tmp___9 = __fswab32(item->key);
#line 323
      tmp___10 = __fswab32(item->ref);
#line 323
      tmp___11 = msg_orignode(msg);
#line 323
      tmp___12 = __fswab32(item->lower);
#line 323
      tmp___13 = __fswab32(item->type);
#line 323
      publ = tipc_nametbl_remove_publ(tmp___13, tmp___12, tmp___11, tmp___10, tmp___9);
      }
#line 329
      if ((unsigned long )publ != (unsigned long )((struct publication *)0)) {
        {
#line 330
        tipc_nodesub_unsubscribe(& publ->subscr);
#line 331
        kfree((void const   *)publ);
        }
      } else {
        {
#line 333
        tmp___14 = __fswab32(item->key);
#line 333
        tmp___15 = __fswab32(item->ref);
#line 333
        tmp___16 = __fswab32(item->lower);
#line 333
        tmp___17 = __fswab32(item->type);
#line 333
        tmp___18 = msg_orignode(msg);
#line 333
        printk("\vtipc: Unable to remove publication by node 0x%x\n (type=%u, lower=%u, ref=%u, key=%u)\n",
               tmp___18, tmp___17, tmp___16, tmp___15, tmp___14);
        }
      }
    } else {
      {
#line 340
      printk("\ftipc: Unrecognized name table message received\n");
      }
    }
  }
#line 342
  item = item + 1;
  ldv_40618: 
#line 306
  tmp___21 = count;
#line 306
  count = count - 1U;
#line 306
  if (tmp___21 != 0U) {
#line 308
    goto ldv_40617;
  } else {

  }
  {
#line 344
  _raw_write_unlock_bh(& tipc_nametbl_lock);
#line 345
  kfree_skb(buf);
  }
#line 346
  return;
}
}
#line 355 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_distr.c"
void tipc_named_reinit(void) 
{ 
  struct publication *publ ;
  int scope ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 360
  _raw_write_lock_bh(& tipc_nametbl_lock);
#line 362
  scope = 1;
  }
#line 362
  goto ldv_40633;
  ldv_40632: 
#line 363
  __mptr = (struct list_head  const  *)(publ_lists[scope])->list.next;
#line 363
  publ = (struct publication *)((char *)__mptr + 0xffffffffffffffb8UL);
#line 363
  goto ldv_40630;
  ldv_40629: 
#line 364
  publ->node = tipc_own_addr;
#line 363
  __mptr___0 = (struct list_head  const  *)publ->local_list.next;
#line 363
  publ = (struct publication *)((char *)__mptr___0 + 0xffffffffffffffb8UL);
  ldv_40630: ;
#line 363
  if ((unsigned long )(& publ->local_list) != (unsigned long )(& (publ_lists[scope])->list)) {
#line 365
    goto ldv_40629;
  } else {

  }
#line 362
  scope = scope + 1;
  ldv_40633: ;
#line 362
  if (scope <= 3) {
#line 364
    goto ldv_40632;
  } else {

  }
  {
#line 366
  _raw_write_unlock_bh(& tipc_nametbl_lock);
  }
#line 367
  return;
}
}
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
  {
#line 62
  __list_add(new, head, head->next);
  }
#line 63
  return;
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_subscr.c.aux"
void ldv_spin_lock_lock_of_tipc_subscriber(void) ;
#line 158
void ldv_spin_unlock_lock_of_tipc_subscriber(void) ;
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_59(spinlock_t *lock ) ;
#line 372
__inline static void ldv_spin_lock_bh_59(spinlock_t *lock ) ;
#line 376
__inline static void ldv_spin_lock_bh_59(spinlock_t *lock ) ;
#line 380
__inline static void ldv_spin_lock_bh_59(spinlock_t *lock ) ;
#line 384
__inline static void ldv_spin_lock_bh_59(spinlock_t *lock ) ;
#line 420
__inline static void ldv_spin_unlock_bh_60___1(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_unlock_bh_60___1(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_60___1(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_unlock_bh_60___1(spinlock_t *lock ) ;
#line 436
__inline static void ldv_spin_unlock_bh_60___1(spinlock_t *lock ) ;
#line 440
__inline static void ldv_spin_unlock_bh_60___1(spinlock_t *lock ) ;
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 636
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.h"
void tipc_nametbl_subscribe(struct tipc_subscription *s ) ;
#line 100
void tipc_nametbl_unsubscribe(struct tipc_subscription *s ) ;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.h"
void tipc_conn_terminate(struct tipc_server *s , int conid ) ;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.h"
int tipc_subscr_overlap(struct tipc_subscription *sub , u32 found_lower , u32 found_upper ) ;
#line 73
void tipc_subscr_report_overlap(struct tipc_subscription *sub , u32 found_lower ,
                                u32 found_upper , u32 event , u32 port_ref , u32 node ,
                                int must ) ;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_conn_msg_event(int conid , struct sockaddr_tipc *addr , void *usr_data ,
                                  void *buf , size_t len ) ;
#line 56
static void *subscr_named_msg_event(int conid ) ;
#line 57
static void subscr_conn_shutdown_event(int conid , void *usr_data ) ;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static atomic_t subscription_count  =    {0};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static struct sockaddr_tipc topsrv_addr  =    {30U, 1U, 3, {.nameseq = {1U, 1U, 1U}}};
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static struct tipc_server topsrv  = 
#line 70
     {{0, 0, 0, 0, 0, 0, {{{{{0U}}, 0U, 0U, 0, {0, {0, 0}, 0, 0, 0UL}}}}}, {{{{{0U}},
                                                                            0U, 0U,
                                                                            0, {0,
                                                                                {0,
                                                                                 0},
                                                                                0,
                                                                                0,
                                                                                0UL}}}},
    0, 0, 0, 0, 28, & subscr_named_msg_event, & subscr_conn_shutdown_event, & subscr_conn_msg_event,
    & topsrv_addr, {'t', 'o', 'p', 'o', 'l', 'o', 'g', 'y', '_', 's', 'e', 'r', 'v',
                    'e', 'r', '\000'}, 3, 5, 0};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static u32 htohl(u32 in , int swap ) 
{ 
  __u32 tmp ;
  unsigned int tmp___0 ;

  {
#line 90
  if (swap != 0) {
    {
#line 90
    tmp = __fswab32(in);
#line 90
    tmp___0 = tmp;
    }
  } else {
#line 90
    tmp___0 = in;
  }
#line 90
  return (tmp___0);
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_send_event(struct tipc_subscription *sub , u32 found_lower , u32 found_upper ,
                              u32 event , u32 port_ref , u32 node ) 
{ 
  struct tipc_subscriber *subscriber ;
  struct kvec msg_sect ;

  {
  {
#line 97
  subscriber = sub->subscriber;
#line 100
  msg_sect.iov_base = (void *)(& sub->evt);
#line 101
  msg_sect.iov_len = 48UL;
#line 102
  sub->evt.event = htohl(event, sub->swap);
#line 103
  sub->evt.found_lower = htohl(found_lower, sub->swap);
#line 104
  sub->evt.found_upper = htohl(found_upper, sub->swap);
#line 105
  sub->evt.port.ref = htohl(port_ref, sub->swap);
#line 106
  sub->evt.port.node = htohl(node, sub->swap);
#line 107
  tipc_conn_sendmsg(& topsrv, subscriber->conid, (struct sockaddr_tipc *)0, msg_sect.iov_base,
                    msg_sect.iov_len);
  }
#line 109
  return;
}
}
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
int tipc_subscr_overlap(struct tipc_subscription *sub , u32 found_lower , u32 found_upper ) 
{ 


  {
#line 119
  if (found_lower < sub->seq.lower) {
#line 120
    found_lower = sub->seq.lower;
  } else {

  }
#line 121
  if (found_upper > sub->seq.upper) {
#line 122
    found_upper = sub->seq.upper;
  } else {

  }
#line 123
  if (found_lower > found_upper) {
#line 124
    return (0);
  } else {

  }
#line 125
  return (1);
}
}
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
void tipc_subscr_report_overlap(struct tipc_subscription *sub , u32 found_lower ,
                                u32 found_upper , u32 event , u32 port_ref , u32 node ,
                                int must ) 
{ 
  int tmp ;

  {
  {
#line 137
  tmp = tipc_subscr_overlap(sub, found_lower, found_upper);
  }
#line 137
  if (tmp == 0) {
#line 138
    return;
  } else {

  }
#line 139
  if (must == 0 && (sub->filter & 1U) == 0U) {
#line 140
    return;
  } else {

  }
  {
#line 142
  subscr_send_event(sub, found_lower, found_upper, event, port_ref, node);
  }
#line 143
  return;
}
}
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_timeout(struct tipc_subscription *sub ) 
{ 
  struct tipc_subscriber *subscriber ;

  {
  {
#line 147
  subscriber = sub->subscriber;
#line 150
  ldv_spin_lock_bh_59(& subscriber->lock);
  }
#line 153
  if (sub->timeout == 4294967295U) {
    {
#line 154
    ldv_spin_unlock_bh_60___1(& subscriber->lock);
    }
#line 155
    return;
  } else {

  }
  {
#line 159
  tipc_nametbl_unsubscribe(sub);
#line 162
  list_del(& sub->subscription_list);
#line 164
  ldv_spin_unlock_bh_60___1(& subscriber->lock);
#line 167
  subscr_send_event(sub, sub->evt.s.seq.lower, sub->evt.s.seq.upper, 3U, 0U, 0U);
#line 171
  k_term_timer(& sub->timer);
#line 172
  kfree((void const   *)sub);
#line 173
  atomic_dec(& subscription_count);
  }
#line 174
  return;
}
}
#line 181 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_del(struct tipc_subscription *sub ) 
{ 


  {
  {
#line 183
  tipc_nametbl_unsubscribe(sub);
#line 184
  list_del(& sub->subscription_list);
#line 185
  kfree((void const   *)sub);
#line 186
  atomic_dec(& subscription_count);
  }
#line 187
  return;
}
}
#line 194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_terminate(struct tipc_subscriber *subscriber ) 
{ 


  {
  {
#line 196
  tipc_conn_terminate(& topsrv, subscriber->conid);
  }
#line 197
  return;
}
}
#line 199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_release(struct tipc_subscriber *subscriber ) 
{ 
  struct tipc_subscription *sub ;
  struct tipc_subscription *sub_temp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
  {
#line 204
  ldv_spin_lock_bh_59(& subscriber->lock);
#line 207
  __mptr = (struct list_head  const  *)subscriber->subscription_list.next;
#line 207
  sub = (struct tipc_subscription *)((char *)__mptr + 0xffffffffffffff50UL);
#line 207
  __mptr___0 = (struct list_head  const  *)sub->subscription_list.next;
#line 207
  sub_temp = (struct tipc_subscription *)((char *)__mptr___0 + 0xffffffffffffff50UL);
  }
#line 207
  goto ldv_40599;
  ldv_40598: ;
#line 209
  if (sub->timeout != 4294967295U) {
    {
#line 210
    ldv_spin_unlock_bh_60___1(& subscriber->lock);
#line 211
    k_cancel_timer(& sub->timer);
#line 212
    k_term_timer(& sub->timer);
#line 213
    ldv_spin_lock_bh_59(& subscriber->lock);
    }
  } else {

  }
  {
#line 215
  subscr_del(sub);
#line 207
  sub = sub_temp;
#line 207
  __mptr___1 = (struct list_head  const  *)sub_temp->subscription_list.next;
#line 207
  sub_temp = (struct tipc_subscription *)((char *)__mptr___1 + 0xffffffffffffff50UL);
  }
  ldv_40599: ;
#line 207
  if ((unsigned long )(& sub->subscription_list) != (unsigned long )(& subscriber->subscription_list)) {
#line 209
    goto ldv_40598;
  } else {

  }
  {
#line 217
  ldv_spin_unlock_bh_60___1(& subscriber->lock);
#line 220
  kfree((void const   *)subscriber);
  }
#line 221
  return;
}
}
#line 232 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_cancel(struct tipc_subscr *s , struct tipc_subscriber *subscriber ) 
{ 
  struct tipc_subscription *sub ;
  struct tipc_subscription *sub_temp ;
  int found ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;
  struct list_head  const  *__mptr___1 ;

  {
#line 237
  found = 0;
#line 240
  __mptr = (struct list_head  const  *)subscriber->subscription_list.next;
#line 240
  sub = (struct tipc_subscription *)((char *)__mptr + 0xffffffffffffff50UL);
#line 240
  __mptr___0 = (struct list_head  const  *)sub->subscription_list.next;
#line 240
  sub_temp = (struct tipc_subscription *)((char *)__mptr___0 + 0xffffffffffffff50UL);
#line 240
  goto ldv_40616;
  ldv_40615: 
  {
#line 242
  tmp = memcmp((void const   *)s, (void const   *)(& sub->evt.s), 28UL);
  }
#line 242
  if (tmp == 0) {
#line 243
    found = 1;
#line 244
    goto ldv_40614;
  } else {

  }
#line 240
  sub = sub_temp;
#line 240
  __mptr___1 = (struct list_head  const  *)sub_temp->subscription_list.next;
#line 240
  sub_temp = (struct tipc_subscription *)((char *)__mptr___1 + 0xffffffffffffff50UL);
  ldv_40616: ;
#line 240
  if ((unsigned long )(& sub->subscription_list) != (unsigned long )(& subscriber->subscription_list)) {
#line 242
    goto ldv_40615;
  } else {

  }
  ldv_40614: ;
#line 247
  if (found == 0) {
#line 248
    return;
  } else {

  }
#line 251
  if (sub->timeout != 4294967295U) {
    {
#line 252
    sub->timeout = 4294967295U;
#line 253
    ldv_spin_unlock_bh_60___1(& subscriber->lock);
#line 254
    k_cancel_timer(& sub->timer);
#line 255
    k_term_timer(& sub->timer);
#line 256
    ldv_spin_lock_bh_59(& subscriber->lock);
    }
  } else {

  }
  {
#line 258
  subscr_del(sub);
  }
#line 259
  return;
}
}
#line 266 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static struct tipc_subscription *subscr_subscribe(struct tipc_subscr *s , struct tipc_subscriber *subscriber ) 
{ 
  struct tipc_subscription *sub ;
  int swap ;
  u32 tmp ;
  u32 tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;

  {
  {
#line 273
  swap = (s->filter & 3U) == 0U;
#line 276
  tmp___0 = htohl(4U, swap);
  }
#line 276
  if ((s->filter & tmp___0) != 0U) {
    {
#line 277
    tmp = htohl(4U, swap);
#line 277
    s->filter = s->filter & ~ tmp;
#line 278
    subscr_cancel(s, subscriber);
    }
#line 279
    return ((struct tipc_subscription *)0);
  } else {

  }
  {
#line 283
  tmp___1 = atomic_read((atomic_t const   *)(& subscription_count));
  }
#line 283
  if (tmp___1 > 65534) {
    {
#line 284
    printk("\ftipc: Subscription rejected, limit reached (%u)\n", 65535);
#line 286
    subscr_terminate(subscriber);
    }
#line 287
    return ((struct tipc_subscription *)0);
  } else {

  }
  {
#line 291
  tmp___2 = kmalloc(248UL, 32U);
#line 291
  sub = (struct tipc_subscription *)tmp___2;
  }
#line 292
  if ((unsigned long )sub == (unsigned long )((struct tipc_subscription *)0)) {
    {
#line 293
    printk("\ftipc: Subscription rejected, no memory\n");
#line 294
    subscr_terminate(subscriber);
    }
#line 295
    return ((struct tipc_subscription *)0);
  } else {

  }
  {
#line 299
  sub->seq.type = htohl(s->seq.type, swap);
#line 300
  sub->seq.lower = htohl(s->seq.lower, swap);
#line 301
  sub->seq.upper = htohl(s->seq.upper, swap);
#line 302
  sub->timeout = htohl(s->timeout, swap);
#line 303
  sub->filter = htohl(s->filter, swap);
  }
#line 304
  if (((sub->filter & 1U) != 0U) ^ ((sub->filter & 2U) == 0U) || sub->seq.lower > sub->seq.upper) {
    {
#line 307
    printk("\ftipc: Subscription rejected, illegal request\n");
#line 308
    kfree((void const   *)sub);
#line 309
    subscr_terminate(subscriber);
    }
#line 310
    return ((struct tipc_subscription *)0);
  } else {

  }
  {
#line 312
  INIT_LIST_HEAD(& sub->nameseq_list);
#line 313
  list_add(& sub->subscription_list, & subscriber->subscription_list);
#line 314
  sub->subscriber = subscriber;
#line 315
  sub->swap = swap;
#line 316
  memcpy((void *)(& sub->evt.s), (void const   *)s, 28UL);
#line 317
  atomic_inc(& subscription_count);
  }
#line 318
  if (sub->timeout != 4294967295U) {
    {
#line 319
    k_init_timer(& sub->timer, (void (*)(unsigned long  ))(& subscr_timeout), (unsigned long )sub);
#line 321
    k_start_timer(& sub->timer, (unsigned long )sub->timeout);
    }
  } else {

  }
#line 324
  return (sub);
}
}
#line 328 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_conn_shutdown_event(int conid , void *usr_data ) 
{ 


  {
  {
#line 330
  subscr_release((struct tipc_subscriber *)usr_data);
  }
#line 331
  return;
}
}
#line 334 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void subscr_conn_msg_event(int conid , struct sockaddr_tipc *addr , void *usr_data ,
                                  void *buf , size_t len ) 
{ 
  struct tipc_subscriber *subscriber ;
  struct tipc_subscription *sub ;

  {
  {
#line 337
  subscriber = (struct tipc_subscriber *)usr_data;
#line 340
  ldv_spin_lock_bh_59(& subscriber->lock);
#line 341
  sub = subscr_subscribe((struct tipc_subscr *)buf, subscriber);
  }
#line 342
  if ((unsigned long )sub != (unsigned long )((struct tipc_subscription *)0)) {
    {
#line 343
    tipc_nametbl_subscribe(sub);
    }
  } else {

  }
  {
#line 344
  ldv_spin_unlock_bh_60___1(& subscriber->lock);
  }
#line 345
  return;
}
}
#line 349 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
static void *subscr_named_msg_event(int conid ) 
{ 
  struct tipc_subscriber *subscriber ;
  void *tmp ;
  struct lock_class_key __key ;

  {
  {
#line 354
  tmp = kzalloc(96UL, 32U);
#line 354
  subscriber = (struct tipc_subscriber *)tmp;
  }
#line 355
  if ((unsigned long )subscriber == (unsigned long )((struct tipc_subscriber *)0)) {
    {
#line 356
    printk("\ftipc: Subscriber rejected, no memory\n");
    }
#line 357
    return ((void *)0);
  } else {

  }
  {
#line 359
  INIT_LIST_HEAD(& subscriber->subscription_list);
#line 360
  subscriber->conid = conid;
#line 361
  spinlock_check(& subscriber->lock);
#line 361
  __raw_spin_lock_init(& subscriber->lock.__annonCompField19.rlock, "&(&subscriber->lock)->rlock",
                       & __key);
  }
#line 363
  return ((void *)subscriber);
}
}
#line 366 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
int tipc_subscr_start(void) 
{ 
  int tmp ;

  {
  {
#line 368
  tmp = tipc_server_start(& topsrv);
  }
#line 368
  return (tmp);
}
}
#line 371 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/subscr.c"
void tipc_subscr_stop(void) 
{ 


  {
  {
#line 373
  tipc_server_stop(& topsrv);
  }
#line 374
  return;
}
}
#line 782 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_subscr.c.aux"
__inline static void ldv_spin_lock_bh_59(spinlock_t *lock ) 
{ 


  {
  {
#line 785
  ldv_spin_lock_lock_of_tipc_subscriber();
#line 787
  spin_lock_bh(lock);
  }
#line 788
  return;
}
}
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_subscr.c.aux"
__inline static void ldv_spin_unlock_bh_60___1(spinlock_t *lock ) 
{ 


  {
  {
#line 794
  ldv_spin_unlock_lock_of_tipc_subscriber();
#line 796
  spin_unlock_bh(lock);
  }
#line 797
  return;
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kcalloc(size_t n , size_t size , gfp_t flags ) ;
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
  {
#line 167
  __list_del_entry(list);
#line 168
  list_add_tail(list, head);
  }
#line 169
  return;
}
}
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static int list_is_last(struct list_head  const  *list , struct list_head  const  *head ) 
{ 


  {
#line 179
  return ((unsigned long )((struct list_head  const  *)list->next) == (unsigned long )head);
}
}
#line 570 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 572
  h->next = (struct hlist_node *)0;
#line 573
  h->pprev = (struct hlist_node **)0;
#line 574
  return;
}
}
#line 576 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 581 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 583
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 586 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 602 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
  {
#line 604
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
  }
#line 604
  if (tmp == 0) {
    {
#line 605
    __hlist_del(n);
#line 606
    INIT_HLIST_NODE(n);
    }
  } else {

  }
#line 608
  return;
}
}
#line 610 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/string_64.h"
extern void *memmove(void * , void const   * , size_t  ) ;
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_name_table.c.aux"
void ldv_spin_lock_lock_of_name_seq(void) ;
#line 110
void ldv_spin_unlock_lock_of_name_seq(void) ;
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_61___2(spinlock_t *lock ) ;
#line 376
__inline static void ldv_spin_lock_bh_61___2(spinlock_t *lock ) ;
#line 380
__inline static void ldv_spin_lock_bh_61___2(spinlock_t *lock ) ;
#line 384
__inline static void ldv_spin_lock_bh_61___2(spinlock_t *lock ) ;
#line 388
__inline static void ldv_spin_lock_bh_61___2(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_unlock_bh_62___2(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_62___2(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_unlock_bh_62___2(spinlock_t *lock ) ;
#line 436
__inline static void ldv_spin_unlock_bh_62___2(spinlock_t *lock ) ;
#line 440
__inline static void ldv_spin_unlock_bh_62___2(spinlock_t *lock ) ;
#line 575 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) ;
#line 636
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.h"
__inline static int in_own_cluster(u32 addr ) 
{ 
  int tmp ;

  {
  {
#line 71
  tmp = in_own_cluster_exact(addr);
  }
#line 71
  return (tmp != 0 || addr == 0U);
}
}
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.h"
int tipc_nametbl_mc_translate(u32 type , u32 lower , u32 upper , u32 limit , struct tipc_port_list *dports ) ;
#line 91
struct publication *tipc_nametbl_publish(u32 type , u32 lower , u32 upper , u32 scope ,
                                         u32 port_ref , u32 key ) ;
#line 93
int tipc_nametbl_withdraw(u32 type , u32 lower , u32 ref , u32 key ) ;
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static struct name_table table  ;
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
rwlock_t tipc_nametbl_lock  =    {{4294967296LL}, 3736018669U, 4294967295U, (void *)-1, {0, {0, 0}, "tipc_nametbl_lock",
                                                           0, 0UL}};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static int hash(int x ) 
{ 


  {
#line 117
  return (x & 1023);
}
}
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static struct publication *publ_create(u32 type , u32 lower , u32 upper , u32 scope ,
                                       u32 node , u32 port_ref , u32 key ) 
{ 
  struct publication *publ ;
  void *tmp ;

  {
  {
#line 127
  tmp = kzalloc(152UL, 32U);
#line 127
  publ = (struct publication *)tmp;
  }
#line 128
  if ((unsigned long )publ == (unsigned long )((struct publication *)0)) {
    {
#line 129
    printk("\ftipc: Publication creation failure, no memory\n");
    }
#line 130
    return ((struct publication *)0);
  } else {

  }
  {
#line 133
  publ->type = type;
#line 134
  publ->lower = lower;
#line 135
  publ->upper = upper;
#line 136
  publ->scope = scope;
#line 137
  publ->node = node;
#line 138
  publ->ref = port_ref;
#line 139
  publ->key = key;
#line 140
  INIT_LIST_HEAD(& publ->local_list);
#line 141
  INIT_LIST_HEAD(& publ->pport_list);
#line 142
  INIT_LIST_HEAD(& publ->subscr.nodesub_list);
  }
#line 143
  return (publ);
}
}
#line 149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static struct sub_seq *tipc_subseq_alloc(u32 cnt ) 
{ 
  struct sub_seq *sseq ;
  void *tmp ;

  {
  {
#line 151
  tmp = kcalloc((size_t )cnt, 16UL, 32U);
#line 151
  sseq = (struct sub_seq *)tmp;
  }
#line 152
  return (sseq);
}
}
#line 160 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static struct name_seq *tipc_nameseq_create(u32 type , struct hlist_head *seq_head ) 
{ 
  struct name_seq *nseq ;
  void *tmp ;
  struct sub_seq *sseq ;
  struct sub_seq *tmp___0 ;
  struct lock_class_key __key ;

  {
  {
#line 162
  tmp = kzalloc(128UL, 32U);
#line 162
  nseq = (struct name_seq *)tmp;
#line 163
  tmp___0 = tipc_subseq_alloc(1U);
#line 163
  sseq = tmp___0;
  }
#line 165
  if ((unsigned long )nseq == (unsigned long )((struct name_seq *)0) || (unsigned long )sseq == (unsigned long )((struct sub_seq *)0)) {
    {
#line 166
    printk("\ftipc: Name sequence creation failed, no memory\n");
#line 167
    kfree((void const   *)nseq);
#line 168
    kfree((void const   *)sseq);
    }
#line 169
    return ((struct name_seq *)0);
  } else {

  }
  {
#line 172
  spinlock_check(& nseq->lock);
#line 172
  __raw_spin_lock_init(& nseq->lock.__annonCompField19.rlock, "&(&nseq->lock)->rlock",
                       & __key);
#line 173
  nseq->type = type;
#line 174
  nseq->sseqs = sseq;
#line 175
  nseq->alloc = 1U;
#line 176
  INIT_HLIST_NODE(& nseq->ns_list);
#line 177
  INIT_LIST_HEAD(& nseq->subscriptions);
#line 178
  hlist_add_head(& nseq->ns_list, seq_head);
  }
#line 179
  return (nseq);
}
}
#line 185 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static void nameseq_delete_empty(struct name_seq *seq ) 
{ 
  int tmp ;

  {
#line 187
  if (seq->first_free == 0U) {
    {
#line 187
    tmp = list_empty((struct list_head  const  *)(& seq->subscriptions));
    }
#line 187
    if (tmp != 0) {
      {
#line 188
      hlist_del_init(& seq->ns_list);
#line 189
      kfree((void const   *)seq->sseqs);
#line 190
      kfree((void const   *)seq);
      }
    } else {

    }
  } else {

  }
#line 192
  return;
}
}
#line 199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static struct sub_seq *nameseq_find_subseq(struct name_seq *nseq , u32 instance ) 
{ 
  struct sub_seq *sseqs ;
  int low ;
  int high ;
  int mid ;

  {
#line 202
  sseqs = nseq->sseqs;
#line 203
  low = 0;
#line 204
  high = (int )(nseq->first_free - 1U);
#line 207
  goto ldv_40898;
  ldv_40897: 
#line 208
  mid = (low + high) / 2;
#line 209
  if (instance < (sseqs + (unsigned long )mid)->lower) {
#line 210
    high = mid + -1;
  } else
#line 211
  if (instance > (sseqs + (unsigned long )mid)->upper) {
#line 212
    low = mid + 1;
  } else {
#line 214
    return (sseqs + (unsigned long )mid);
  }
  ldv_40898: ;
#line 207
  if (low <= high) {
#line 209
    goto ldv_40897;
  } else {

  }

#line 216
  return ((struct sub_seq *)0);
}
}
#line 228 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static u32 nameseq_locate_subseq(struct name_seq *nseq , u32 instance ) 
{ 
  struct sub_seq *sseqs ;
  int low ;
  int high ;
  int mid ;

  {
#line 230
  sseqs = nseq->sseqs;
#line 231
  low = 0;
#line 232
  high = (int )(nseq->first_free - 1U);
#line 235
  goto ldv_40909;
  ldv_40908: 
#line 236
  mid = (low + high) / 2;
#line 237
  if (instance < (sseqs + (unsigned long )mid)->lower) {
#line 238
    high = mid + -1;
  } else
#line 239
  if (instance > (sseqs + (unsigned long )mid)->upper) {
#line 240
    low = mid + 1;
  } else {
#line 242
    return ((u32 )mid);
  }
  ldv_40909: ;
#line 235
  if (low <= high) {
#line 237
    goto ldv_40908;
  } else {

  }

#line 244
  return ((u32 )low);
}
}
#line 250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static struct publication *tipc_nameseq_insert_publ(struct name_seq *nseq , u32 type ,
                                                    u32 lower , u32 upper , u32 scope ,
                                                    u32 node , u32 port , u32 key ) 
{ 
  struct tipc_subscription *s ;
  struct tipc_subscription *st ;
  struct publication *publ ;
  struct sub_seq *sseq ;
  struct name_info *info ;
  int created_subseq ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  u32 inspos ;
  struct sub_seq *freesseq ;
  struct sub_seq *sseqs ;
  struct sub_seq *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;

  {
  {
#line 259
  created_subseq = 0;
#line 261
  sseq = nameseq_find_subseq(nseq, lower);
  }
#line 262
  if ((unsigned long )sseq != (unsigned long )((struct sub_seq *)0)) {
#line 265
    if (sseq->lower != lower || sseq->upper != upper) {
      {
#line 266
      printk("\ftipc: Cannot publish {%u,%u,%u}, overlap error\n", type, lower, upper);
      }
#line 268
      return ((struct publication *)0);
    } else {

    }
#line 271
    info = sseq->info;
#line 274
    __mptr = (struct list_head  const  *)info->zone_list.next;
#line 274
    publ = (struct publication *)((char *)__mptr + 0xffffffffffffff78UL);
#line 274
    goto ldv_40932;
    ldv_40931: ;
#line 275
    if ((publ->ref == port && publ->key == key) && (publ->node == 0U || publ->node == node)) {
#line 277
      return ((struct publication *)0);
    } else {

    }
#line 274
    __mptr___0 = (struct list_head  const  *)publ->zone_list.next;
#line 274
    publ = (struct publication *)((char *)__mptr___0 + 0xffffffffffffff78UL);
    ldv_40932: ;
#line 274
    if ((unsigned long )(& publ->zone_list) != (unsigned long )(& info->zone_list)) {
#line 276
      goto ldv_40931;
    } else {

    }

  } else {
    {
#line 284
    inspos = nameseq_locate_subseq(nseq, lower);
    }
#line 287
    if (inspos < nseq->first_free && upper >= (nseq->sseqs + (unsigned long )inspos)->lower) {
      {
#line 289
      printk("\ftipc: Cannot publish {%u,%u,%u}, overlap error\n", type, lower, upper);
      }
#line 291
      return ((struct publication *)0);
    } else {

    }
#line 295
    if (nseq->first_free == nseq->alloc) {
      {
#line 296
      tmp = tipc_subseq_alloc(nseq->alloc * 2U);
#line 296
      sseqs = tmp;
      }
#line 298
      if ((unsigned long )sseqs == (unsigned long )((struct sub_seq *)0)) {
        {
#line 299
        printk("\ftipc: Cannot publish {%u,%u,%u}, no memory\n", type, lower, upper);
        }
#line 301
        return ((struct publication *)0);
      } else {

      }
      {
#line 303
      memcpy((void *)sseqs, (void const   *)nseq->sseqs, (unsigned long )nseq->alloc * 16UL);
#line 305
      kfree((void const   *)nseq->sseqs);
#line 306
      nseq->sseqs = sseqs;
#line 307
      nseq->alloc = nseq->alloc * 2U;
      }
    } else {

    }
    {
#line 310
    tmp___0 = kzalloc(64UL, 32U);
#line 310
    info = (struct name_info *)tmp___0;
    }
#line 311
    if ((unsigned long )info == (unsigned long )((struct name_info *)0)) {
      {
#line 312
      printk("\ftipc: Cannot publish {%u,%u,%u}, no memory\n", type, lower, upper);
      }
#line 314
      return ((struct publication *)0);
    } else {

    }
    {
#line 317
    INIT_LIST_HEAD(& info->node_list);
#line 318
    INIT_LIST_HEAD(& info->cluster_list);
#line 319
    INIT_LIST_HEAD(& info->zone_list);
#line 322
    sseq = nseq->sseqs + (unsigned long )inspos;
#line 323
    freesseq = nseq->sseqs + (unsigned long )nseq->first_free;
#line 324
    memmove((void *)(sseq + 1UL), (void const   *)sseq, (unsigned long )(((long )freesseq - (long )sseq) / 16L) * 16UL);
#line 325
    memset((void *)sseq, 0, 16UL);
#line 326
    nseq->first_free = nseq->first_free + 1U;
#line 327
    sseq->lower = lower;
#line 328
    sseq->upper = upper;
#line 329
    sseq->info = info;
#line 330
    created_subseq = 1;
    }
  }
  {
#line 334
  publ = publ_create(type, lower, upper, scope, node, port, key);
  }
#line 335
  if ((unsigned long )publ == (unsigned long )((struct publication *)0)) {
#line 336
    return ((struct publication *)0);
  } else {

  }
  {
#line 338
  list_add(& publ->zone_list, & info->zone_list);
#line 339
  info->zone_list_size = info->zone_list_size + 1U;
#line 341
  tmp___1 = in_own_cluster(node);
  }
#line 341
  if (tmp___1 != 0) {
    {
#line 342
    list_add(& publ->cluster_list, & info->cluster_list);
#line 343
    info->cluster_list_size = info->cluster_list_size + 1U;
    }
  } else {

  }
  {
#line 346
  tmp___2 = in_own_node(node);
  }
#line 346
  if (tmp___2 != 0) {
    {
#line 347
    list_add(& publ->node_list, & info->node_list);
#line 348
    info->node_list_size = info->node_list_size + 1U;
    }
  } else {

  }
#line 352
  __mptr___1 = (struct list_head  const  *)nseq->subscriptions.next;
#line 352
  s = (struct tipc_subscription *)((char *)__mptr___1 + 0xffffffffffffff60UL);
#line 352
  __mptr___2 = (struct list_head  const  *)s->nameseq_list.next;
#line 352
  st = (struct tipc_subscription *)((char *)__mptr___2 + 0xffffffffffffff60UL);
#line 352
  goto ldv_40944;
  ldv_40943: 
  {
#line 353
  tipc_subscr_report_overlap(s, publ->lower, publ->upper, 1U, publ->ref, publ->node,
                             created_subseq);
#line 352
  s = st;
#line 352
  __mptr___3 = (struct list_head  const  *)st->nameseq_list.next;
#line 352
  st = (struct tipc_subscription *)((char *)__mptr___3 + 0xffffffffffffff60UL);
  }
  ldv_40944: ;
#line 352
  if ((unsigned long )(& s->nameseq_list) != (unsigned long )(& nseq->subscriptions)) {
#line 354
    goto ldv_40943;
  } else {

  }

#line 361
  return (publ);
}
}
#line 375 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static struct publication *tipc_nameseq_remove_publ(struct name_seq *nseq , u32 inst ,
                                                    u32 node , u32 ref , u32 key ) 
{ 
  struct publication *publ ;
  struct sub_seq *sseq ;
  struct sub_seq *tmp ;
  struct name_info *info ;
  struct sub_seq *free___0 ;
  struct tipc_subscription *s ;
  struct tipc_subscription *st ;
  int removed_subseq ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp___0 ;
  int tmp___1 ;
  u32 tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;

  {
  {
#line 379
  tmp = nameseq_find_subseq(nseq, inst);
#line 379
  sseq = tmp;
#line 383
  removed_subseq = 0;
  }
#line 385
  if ((unsigned long )sseq == (unsigned long )((struct sub_seq *)0)) {
#line 386
    return ((struct publication *)0);
  } else {

  }
#line 388
  info = sseq->info;
#line 391
  __mptr = (struct list_head  const  *)info->zone_list.next;
#line 391
  publ = (struct publication *)((char *)__mptr + 0xffffffffffffff78UL);
#line 391
  goto ldv_40966;
  ldv_40965: ;
#line 392
  if ((publ->key == key && publ->ref == ref) && (publ->node == 0U || publ->node == node)) {
#line 394
    goto found;
  } else {

  }
#line 391
  __mptr___0 = (struct list_head  const  *)publ->zone_list.next;
#line 391
  publ = (struct publication *)((char *)__mptr___0 + 0xffffffffffffff78UL);
  ldv_40966: ;
#line 391
  if ((unsigned long )(& publ->zone_list) != (unsigned long )(& info->zone_list)) {
#line 393
    goto ldv_40965;
  } else {

  }

#line 396
  return ((struct publication *)0);
  found: 
  {
#line 400
  list_del(& publ->zone_list);
#line 401
  info->zone_list_size = info->zone_list_size - 1U;
#line 404
  tmp___0 = in_own_cluster(node);
  }
#line 404
  if (tmp___0 != 0) {
    {
#line 405
    list_del(& publ->cluster_list);
#line 406
    info->cluster_list_size = info->cluster_list_size - 1U;
    }
  } else {

  }
  {
#line 410
  tmp___1 = in_own_node(node);
  }
#line 410
  if (tmp___1 != 0) {
    {
#line 411
    list_del(& publ->node_list);
#line 412
    info->node_list_size = info->node_list_size - 1U;
    }
  } else {

  }
  {
#line 416
  tmp___3 = list_empty((struct list_head  const  *)(& info->zone_list));
  }
#line 416
  if (tmp___3 != 0) {
    {
#line 417
    kfree((void const   *)info);
#line 418
    tmp___2 = nseq->first_free;
#line 418
    nseq->first_free = nseq->first_free - 1U;
#line 418
    free___0 = nseq->sseqs + (unsigned long )tmp___2;
#line 419
    memmove((void *)sseq, (void const   *)(sseq + 1UL), (unsigned long )(((long )free___0 - (long )(sseq + 1UL)) / 16L) * 16UL);
#line 420
    removed_subseq = 1;
    }
  } else {

  }
#line 424
  __mptr___1 = (struct list_head  const  *)nseq->subscriptions.next;
#line 424
  s = (struct tipc_subscription *)((char *)__mptr___1 + 0xffffffffffffff60UL);
#line 424
  __mptr___2 = (struct list_head  const  *)s->nameseq_list.next;
#line 424
  st = (struct tipc_subscription *)((char *)__mptr___2 + 0xffffffffffffff60UL);
#line 424
  goto ldv_40975;
  ldv_40974: 
  {
#line 425
  tipc_subscr_report_overlap(s, publ->lower, publ->upper, 2U, publ->ref, publ->node,
                             removed_subseq);
#line 424
  s = st;
#line 424
  __mptr___3 = (struct list_head  const  *)st->nameseq_list.next;
#line 424
  st = (struct tipc_subscription *)((char *)__mptr___3 + 0xffffffffffffff60UL);
  }
  ldv_40975: ;
#line 424
  if ((unsigned long )(& s->nameseq_list) != (unsigned long )(& nseq->subscriptions)) {
#line 426
    goto ldv_40974;
  } else {

  }

#line 434
  return (publ);
}
}
#line 442 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static void tipc_nameseq_subscribe(struct name_seq *nseq , struct tipc_subscription *s ) 
{ 
  struct sub_seq *sseq ;
  struct publication *crs ;
  struct name_info *info ;
  int must_report ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;

  {
  {
#line 445
  sseq = nseq->sseqs;
#line 447
  list_add(& s->nameseq_list, & nseq->subscriptions);
  }
#line 449
  if ((unsigned long )sseq == (unsigned long )((struct sub_seq *)0)) {
#line 450
    return;
  } else {

  }
#line 452
  goto ldv_40993;
  ldv_40992: 
  {
#line 453
  tmp = tipc_subscr_overlap(s, sseq->lower, sseq->upper);
  }
#line 453
  if (tmp != 0) {
#line 455
    info = sseq->info;
#line 456
    must_report = 1;
#line 458
    __mptr = (struct list_head  const  *)info->zone_list.next;
#line 458
    crs = (struct publication *)((char *)__mptr + 0xffffffffffffff78UL);
#line 458
    goto ldv_40990;
    ldv_40989: 
    {
#line 459
    tipc_subscr_report_overlap(s, sseq->lower, sseq->upper, 1U, crs->ref, crs->node,
                               must_report);
#line 466
    must_report = 0;
#line 458
    __mptr___0 = (struct list_head  const  *)crs->zone_list.next;
#line 458
    crs = (struct publication *)((char *)__mptr___0 + 0xffffffffffffff78UL);
    }
    ldv_40990: ;
#line 458
    if ((unsigned long )(& crs->zone_list) != (unsigned long )(& info->zone_list)) {
#line 460
      goto ldv_40989;
    } else {

    }

  } else {

  }
#line 469
  sseq = sseq + 1;
  ldv_40993: ;
#line 452
  if ((unsigned long )sseq != (unsigned long )(nseq->sseqs + (unsigned long )nseq->first_free)) {
#line 454
    goto ldv_40992;
  } else {

  }

#line 459
  return;
}
}
#line 473 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static struct name_seq *nametbl_find_seq(u32 type ) 
{ 
  struct hlist_head *seq_head ;
  struct name_seq *ns ;
  int tmp ;
  struct hlist_node *____ptr ;
  struct hlist_node  const  *__mptr ;
  struct name_seq *tmp___0 ;
  struct hlist_node *____ptr___0 ;
  struct hlist_node  const  *__mptr___0 ;
  struct name_seq *tmp___1 ;

  {
  {
#line 478
  tmp = hash((int )type);
#line 478
  seq_head = table.types + (unsigned long )tmp;
#line 479
  ____ptr = seq_head->first;
  }
#line 479
  if ((unsigned long )____ptr != (unsigned long )((struct hlist_node *)0)) {
#line 479
    __mptr = (struct hlist_node  const  *)____ptr;
#line 479
    tmp___0 = (struct name_seq *)((char *)__mptr + 0xffffffffffffffe8UL);
  } else {
#line 479
    tmp___0 = (struct name_seq *)0;
  }
#line 479
  ns = tmp___0;
#line 479
  goto ldv_41009;
  ldv_41008: ;
#line 480
  if (ns->type == type) {
#line 481
    return (ns);
  } else {

  }
#line 479
  ____ptr___0 = ns->ns_list.next;
#line 479
  if ((unsigned long )____ptr___0 != (unsigned long )((struct hlist_node *)0)) {
#line 479
    __mptr___0 = (struct hlist_node  const  *)____ptr___0;
#line 479
    tmp___1 = (struct name_seq *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  } else {
#line 479
    tmp___1 = (struct name_seq *)0;
  }
#line 479
  ns = tmp___1;
  ldv_41009: ;
#line 479
  if ((unsigned long )ns != (unsigned long )((struct name_seq *)0)) {
#line 481
    goto ldv_41008;
  } else {

  }

#line 484
  return ((struct name_seq *)0);
}
}
#line 487 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
struct publication *tipc_nametbl_insert_publ(u32 type , u32 lower , u32 upper , u32 scope ,
                                             u32 node , u32 port , u32 key ) 
{ 
  struct name_seq *seq ;
  struct name_seq *tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  int tmp___1 ;
  struct publication *tmp___2 ;

  {
  {
#line 490
  tmp = nametbl_find_seq(type);
#line 490
  seq = tmp;
  }
#line 492
  if (scope - 1U > 2U || lower > upper) {
    {
#line 494
    descriptor.modname = "tipc";
#line 494
    descriptor.function = "tipc_nametbl_insert_publ";
#line 494
    descriptor.filename = "net/tipc/name_table.c";
#line 494
    descriptor.format = "Failed to publish illegal {%u,%u,%u} with scope %u\n";
#line 494
    descriptor.lineno = 495U;
#line 494
    descriptor.flags = 0U;
#line 494
    tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
    }
#line 494
    if (tmp___0 != 0L) {
      {
#line 494
      __dynamic_pr_debug(& descriptor, "tipc: Failed to publish illegal {%u,%u,%u} with scope %u\n",
                         type, lower, upper, scope);
      }
    } else {

    }
#line 496
    return ((struct publication *)0);
  } else {

  }
#line 499
  if ((unsigned long )seq == (unsigned long )((struct name_seq *)0)) {
    {
#line 500
    tmp___1 = hash((int )type);
#line 500
    seq = tipc_nameseq_create(type, table.types + (unsigned long )tmp___1);
    }
  } else {

  }
#line 501
  if ((unsigned long )seq == (unsigned long )((struct name_seq *)0)) {
#line 502
    return ((struct publication *)0);
  } else {

  }
  {
#line 504
  tmp___2 = tipc_nameseq_insert_publ(seq, type, lower, upper, scope, node, port, key);
  }
#line 504
  return (tmp___2);
}
}
#line 508 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
struct publication *tipc_nametbl_remove_publ(u32 type , u32 lower , u32 node , u32 ref ,
                                             u32 key ) 
{ 
  struct publication *publ ;
  struct name_seq *seq ;
  struct name_seq *tmp ;

  {
  {
#line 512
  tmp = nametbl_find_seq(type);
#line 512
  seq = tmp;
  }
#line 514
  if ((unsigned long )seq == (unsigned long )((struct name_seq *)0)) {
#line 515
    return ((struct publication *)0);
  } else {

  }
  {
#line 517
  publ = tipc_nameseq_remove_publ(seq, lower, node, ref, key);
#line 518
  nameseq_delete_empty(seq);
  }
#line 519
  return (publ);
}
}
#line 535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
u32 tipc_nametbl_translate(u32 type , u32 instance , u32 *destnode ) 
{ 
  struct sub_seq *sseq ;
  struct name_info *info ;
  struct publication *publ ;
  struct name_seq *seq ;
  u32 ref ;
  u32 node ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct list_head  const  *__mptr___2 ;
  int tmp___5 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;
  int tmp___6 ;
  long tmp___7 ;

  {
  {
#line 541
  ref = 0U;
#line 542
  node = 0U;
#line 544
  tmp = tipc_in_scope(*destnode, tipc_own_addr);
  }
#line 544
  if (tmp == 0) {
#line 545
    return (0U);
  } else {

  }
  {
#line 547
  _raw_read_lock_bh(& tipc_nametbl_lock);
#line 548
  seq = nametbl_find_seq(type);
#line 549
  tmp___0 = __builtin_expect((unsigned long )seq == (unsigned long )((struct name_seq *)0),
                             0L);
  }
#line 549
  if (tmp___0 != 0L) {
#line 550
    goto not_found;
  } else {

  }
  {
#line 551
  sseq = nameseq_find_subseq(seq, instance);
#line 552
  tmp___1 = __builtin_expect((unsigned long )sseq == (unsigned long )((struct sub_seq *)0),
                             0L);
  }
#line 552
  if (tmp___1 != 0L) {
#line 553
    goto not_found;
  } else {

  }
  {
#line 554
  ldv_spin_lock_bh_61___2(& seq->lock);
#line 555
  info = sseq->info;
#line 558
  tmp___7 = __builtin_expect(*destnode == 0U, 1L);
  }
#line 558
  if (tmp___7 != 0L) {
    {
#line 559
    tmp___3 = list_empty((struct list_head  const  *)(& info->node_list));
    }
#line 559
    if (tmp___3 == 0) {
      {
#line 560
      __mptr = (struct list_head  const  *)info->node_list.next;
#line 560
      publ = (struct publication *)((char *)__mptr + 0xffffffffffffff98UL);
#line 563
      list_move_tail(& publ->node_list, & info->node_list);
      }
    } else {
      {
#line 565
      tmp___2 = list_empty((struct list_head  const  *)(& info->cluster_list));
      }
#line 565
      if (tmp___2 == 0) {
        {
#line 566
        __mptr___0 = (struct list_head  const  *)info->cluster_list.next;
#line 566
        publ = (struct publication *)((char *)__mptr___0 + 0xffffffffffffff88UL);
#line 569
        list_move_tail(& publ->cluster_list, & info->cluster_list);
        }
      } else {
        {
#line 572
        __mptr___1 = (struct list_head  const  *)info->zone_list.next;
#line 572
        publ = (struct publication *)((char *)__mptr___1 + 0xffffffffffffff78UL);
#line 575
        list_move_tail(& publ->zone_list, & info->zone_list);
        }
      }
    }
  } else
#line 581
  if (*destnode == tipc_own_addr) {
    {
#line 582
    tmp___4 = list_empty((struct list_head  const  *)(& info->node_list));
    }
#line 582
    if (tmp___4 != 0) {
#line 583
      goto no_match;
    } else {

    }
    {
#line 584
    __mptr___2 = (struct list_head  const  *)info->node_list.next;
#line 584
    publ = (struct publication *)((char *)__mptr___2 + 0xffffffffffffff98UL);
#line 586
    list_move_tail(& publ->node_list, & info->node_list);
    }
  } else {
    {
#line 587
    tmp___6 = in_own_cluster_exact(*destnode);
    }
#line 587
    if (tmp___6 != 0) {
      {
#line 588
      tmp___5 = list_empty((struct list_head  const  *)(& info->cluster_list));
      }
#line 588
      if (tmp___5 != 0) {
#line 589
        goto no_match;
      } else {

      }
      {
#line 590
      __mptr___3 = (struct list_head  const  *)info->cluster_list.next;
#line 590
      publ = (struct publication *)((char *)__mptr___3 + 0xffffffffffffff88UL);
#line 592
      list_move_tail(& publ->cluster_list, & info->cluster_list);
      }
    } else {
      {
#line 594
      __mptr___4 = (struct list_head  const  *)info->zone_list.next;
#line 594
      publ = (struct publication *)((char *)__mptr___4 + 0xffffffffffffff78UL);
#line 596
      list_move_tail(& publ->zone_list, & info->zone_list);
      }
    }
  }
#line 599
  ref = publ->ref;
#line 600
  node = publ->node;
  no_match: 
  {
#line 602
  ldv_spin_unlock_bh_62___2(& seq->lock);
  }
  not_found: 
  {
#line 604
  _raw_read_unlock_bh(& tipc_nametbl_lock);
#line 605
  *destnode = node;
  }
#line 606
  return (ref);
}
}
#line 621 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
int tipc_nametbl_mc_translate(u32 type , u32 lower , u32 upper , u32 limit , struct tipc_port_list *dports ) 
{ 
  struct name_seq *seq ;
  struct sub_seq *sseq ;
  struct sub_seq *sseq_stop ;
  struct name_info *info ;
  int res ;
  u32 tmp ;
  struct publication *publ ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 628
  res = 0;
#line 630
  _raw_read_lock_bh(& tipc_nametbl_lock);
#line 631
  seq = nametbl_find_seq(type);
  }
#line 632
  if ((unsigned long )seq == (unsigned long )((struct name_seq *)0)) {
#line 633
    goto exit;
  } else {

  }
  {
#line 635
  ldv_spin_lock_bh_61___2(& seq->lock);
#line 637
  tmp = nameseq_locate_subseq(seq, lower);
#line 637
  sseq = seq->sseqs + (unsigned long )tmp;
#line 638
  sseq_stop = seq->sseqs + (unsigned long )seq->first_free;
  }
#line 639
  goto ldv_41080;
  ldv_41079: ;
#line 642
  if (sseq->lower > upper) {
#line 643
    goto ldv_41071;
  } else {

  }
#line 645
  info = sseq->info;
#line 646
  __mptr = (struct list_head  const  *)info->node_list.next;
#line 646
  publ = (struct publication *)((char *)__mptr + 0xffffffffffffff98UL);
#line 646
  goto ldv_41077;
  ldv_41076: ;
#line 647
  if (publ->scope <= limit) {
    {
#line 648
    tipc_port_list_add(dports, publ->ref);
    }
  } else {

  }
#line 646
  __mptr___0 = (struct list_head  const  *)publ->node_list.next;
#line 646
  publ = (struct publication *)((char *)__mptr___0 + 0xffffffffffffff98UL);
  ldv_41077: ;
#line 646
  if ((unsigned long )(& publ->node_list) != (unsigned long )(& info->node_list)) {
#line 648
    goto ldv_41076;
  } else {

  }

#line 651
  if (info->cluster_list_size != info->node_list_size) {
#line 652
    res = 1;
  } else {

  }
#line 639
  sseq = sseq + 1;
  ldv_41080: ;
#line 639
  if ((unsigned long )sseq != (unsigned long )sseq_stop) {
#line 641
    goto ldv_41079;
  } else {

  }
  ldv_41071: 
  {
#line 655
  ldv_spin_unlock_bh_62___2(& seq->lock);
  }
  exit: 
  {
#line 657
  _raw_read_unlock_bh(& tipc_nametbl_lock);
  }
#line 658
  return (res);
}
}
#line 664 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
struct publication *tipc_nametbl_publish(u32 type , u32 lower , u32 upper , u32 scope ,
                                         u32 port_ref , u32 key ) 
{ 
  struct publication *publ ;
  long tmp ;

  {
#line 669
  if (table.local_publ_count > 65534U) {
    {
#line 670
    printk("\ftipc: Publication failed, local publication limit reached (%u)\n", 65535);
    }
#line 672
    return ((struct publication *)0);
  } else {

  }
  {
#line 675
  _raw_write_lock_bh(& tipc_nametbl_lock);
#line 676
  publ = tipc_nametbl_insert_publ(type, lower, upper, scope, tipc_own_addr, port_ref,
                                  key);
#line 678
  tmp = __builtin_expect((unsigned long )publ != (unsigned long )((struct publication *)0),
                         1L);
  }
#line 678
  if (tmp != 0L) {
    {
#line 679
    table.local_publ_count = table.local_publ_count + 1U;
#line 680
    tipc_named_publish(publ);
    }
  } else {

  }
  {
#line 682
  _raw_write_unlock_bh(& tipc_nametbl_lock);
  }
#line 683
  return (publ);
}
}
#line 689 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
int tipc_nametbl_withdraw(u32 type , u32 lower , u32 ref , u32 key ) 
{ 
  struct publication *publ ;
  long tmp ;

  {
  {
#line 693
  _raw_write_lock_bh(& tipc_nametbl_lock);
#line 694
  publ = tipc_nametbl_remove_publ(type, lower, tipc_own_addr, ref, key);
#line 695
  tmp = __builtin_expect((unsigned long )publ != (unsigned long )((struct publication *)0),
                         1L);
  }
#line 695
  if (tmp != 0L) {
    {
#line 696
    table.local_publ_count = table.local_publ_count - 1U;
#line 697
    tipc_named_withdraw(publ);
#line 698
    _raw_write_unlock_bh(& tipc_nametbl_lock);
#line 699
    list_del_init(& publ->pport_list);
#line 700
    kfree((void const   *)publ);
    }
#line 701
    return (1);
  } else {

  }
  {
#line 703
  _raw_write_unlock_bh(& tipc_nametbl_lock);
#line 704
  printk("\vtipc: Unable to remove local publication\n(type=%u, lower=%u, ref=%u, key=%u)\n",
         type, lower, ref, key);
  }
#line 707
  return (0);
}
}
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
void tipc_nametbl_subscribe(struct tipc_subscription *s ) 
{ 
  u32 type ;
  struct name_seq *seq ;
  int tmp ;

  {
  {
#line 715
  type = s->seq.type;
#line 718
  _raw_write_lock_bh(& tipc_nametbl_lock);
#line 719
  seq = nametbl_find_seq(type);
  }
#line 720
  if ((unsigned long )seq == (unsigned long )((struct name_seq *)0)) {
    {
#line 721
    tmp = hash((int )type);
#line 721
    seq = tipc_nameseq_create(type, table.types + (unsigned long )tmp);
    }
  } else {

  }
#line 722
  if ((unsigned long )seq != (unsigned long )((struct name_seq *)0)) {
    {
#line 723
    ldv_spin_lock_bh_61___2(& seq->lock);
#line 724
    tipc_nameseq_subscribe(seq, s);
#line 725
    ldv_spin_unlock_bh_62___2(& seq->lock);
    }
  } else {
    {
#line 727
    printk("\ftipc: Failed to create subscription for {%u,%u,%u}\n", s->seq.type,
           s->seq.lower, s->seq.upper);
    }
  }
  {
#line 730
  _raw_write_unlock_bh(& tipc_nametbl_lock);
  }
#line 731
  return;
}
}
#line 736 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
void tipc_nametbl_unsubscribe(struct tipc_subscription *s ) 
{ 
  struct name_seq *seq ;

  {
  {
#line 740
  _raw_write_lock_bh(& tipc_nametbl_lock);
#line 741
  seq = nametbl_find_seq(s->seq.type);
  }
#line 742
  if ((unsigned long )seq != (unsigned long )((struct name_seq *)0)) {
    {
#line 743
    ldv_spin_lock_bh_61___2(& seq->lock);
#line 744
    list_del_init(& s->nameseq_list);
#line 745
    ldv_spin_unlock_bh_62___2(& seq->lock);
#line 746
    nameseq_delete_empty(seq);
    }
  } else {

  }
  {
#line 748
  _raw_write_unlock_bh(& tipc_nametbl_lock);
  }
#line 749
  return;
}
}
#line 755 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static int subseq_list(struct sub_seq *sseq , char *buf , int len , u32 depth , u32 index ) 
{ 
  char portIdStr[27U] ;
  char const   *scope_str[4U] ;
  struct publication *publ ;
  struct name_info *info ;
  int ret ;
  int tmp ;
  struct list_head  const  *__mptr ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___7 ;

  {
  {
#line 759
  scope_str[0] = "";
#line 759
  scope_str[1] = " zone";
#line 759
  scope_str[2] = " cluster";
#line 759
  scope_str[3] = " node";
#line 764
  ret = tipc_snprintf(buf, len, "%-10u %-10u ", sseq->lower, sseq->upper);
  }
#line 766
  if (depth == 2U) {
    {
#line 767
    tmp = tipc_snprintf(buf + - ((unsigned long )ret), len + ret, "\n");
#line 767
    ret = ret + tmp;
    }
#line 768
    return (ret);
  } else {

  }
#line 771
  info = sseq->info;
#line 773
  __mptr = (struct list_head  const  *)info->zone_list.next;
#line 773
  publ = (struct publication *)((char *)__mptr + 0xffffffffffffff78UL);
#line 773
  goto ldv_41123;
  ldv_41122: 
  {
#line 774
  tmp___0 = tipc_node(publ->node);
#line 774
  tmp___1 = tipc_cluster(publ->node);
#line 774
  tmp___2 = tipc_zone(publ->node);
#line 774
  sprintf((char *)(& portIdStr), "<%u.%u.%u:%u>", tmp___2, tmp___1, tmp___0, publ->ref);
#line 777
  tmp___3 = tipc_snprintf(buf + (unsigned long )ret, len - ret, "%-26s ", (char *)(& portIdStr));
#line 777
  ret = ret + tmp___3;
  }
#line 778
  if (depth > 3U) {
    {
#line 779
    tmp___4 = tipc_snprintf(buf + (unsigned long )ret, len - ret, "%-10u %s", publ->key,
                            scope_str[publ->scope]);
#line 779
    ret = ret + tmp___4;
    }
  } else {

  }
  {
#line 782
  tmp___6 = list_is_last((struct list_head  const  *)(& publ->zone_list), (struct list_head  const  *)(& info->zone_list));
  }
#line 782
  if (tmp___6 == 0) {
    {
#line 783
    tmp___5 = tipc_snprintf(buf + (unsigned long )ret, len - ret, "\n%33s", (char *)" ");
#line 783
    ret = ret + tmp___5;
    }
  } else {

  }
#line 773
  __mptr___0 = (struct list_head  const  *)publ->zone_list.next;
#line 773
  publ = (struct publication *)((char *)__mptr___0 + 0xffffffffffffff78UL);
  ldv_41123: ;
#line 773
  if ((unsigned long )(& publ->zone_list) != (unsigned long )(& info->zone_list)) {
#line 775
    goto ldv_41122;
  } else {

  }
  {
#line 787
  tmp___7 = tipc_snprintf(buf + (unsigned long )ret, len - ret, "\n");
#line 787
  ret = ret + tmp___7;
  }
#line 788
  return (ret);
}
}
#line 794 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static int nameseq_list(struct name_seq *seq , char *buf , int len , u32 depth , u32 type ,
                        u32 lowbound , u32 upbound , u32 index ) 
{ 
  struct sub_seq *sseq ;
  char typearea[11U] ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 799
  ret = 0;
#line 801
  if (seq->first_free == 0U) {
#line 802
    return (0);
  } else {

  }
  {
#line 804
  sprintf((char *)(& typearea), "%-10u", seq->type);
  }
#line 806
  if (depth == 1U) {
    {
#line 807
    tmp = tipc_snprintf(buf, len, "%s\n", (char *)(& typearea));
#line 807
    ret = ret + tmp;
    }
#line 808
    return (ret);
  } else {

  }
#line 811
  sseq = seq->sseqs;
#line 811
  goto ldv_41139;
  ldv_41138: ;
#line 812
  if (lowbound <= sseq->upper && upbound >= sseq->lower) {
    {
#line 813
    tmp___0 = tipc_snprintf(buf + (unsigned long )ret, len - ret, "%s ", (char *)(& typearea));
#line 813
    ret = ret + tmp___0;
#line 815
    ldv_spin_lock_bh_61___2(& seq->lock);
#line 816
    tmp___1 = subseq_list(sseq, buf + (unsigned long )ret, len - ret, depth, index);
#line 816
    ret = ret + tmp___1;
#line 818
    ldv_spin_unlock_bh_62___2(& seq->lock);
#line 819
    sprintf((char *)(& typearea), "%10s", (char *)" ");
    }
  } else {

  }
#line 811
  sseq = sseq + 1;
  ldv_41139: ;
#line 811
  if ((unsigned long )sseq != (unsigned long )(seq->sseqs + (unsigned long )seq->first_free)) {
#line 813
    goto ldv_41138;
  } else {

  }

#line 822
  return (ret);
}
}
#line 828 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static int nametbl_header(char *buf , int len , u32 depth ) 
{ 
  char const   *header[4U] ;
  int i ;
  int ret ;
  int tmp ;
  int tmp___0 ;

  {
#line 830
  header[0] = "Type       ";
#line 830
  header[1] = "Lower      Upper      ";
#line 830
  header[2] = "Port Identity              ";
#line 830
  header[3] = "Publication Scope";
#line 838
  ret = 0;
#line 840
  if (depth > 4U) {
#line 841
    depth = 4U;
  } else {

  }
#line 842
  i = 0;
#line 842
  goto ldv_41150;
  ldv_41149: 
  {
#line 843
  tmp = tipc_snprintf(buf + (unsigned long )ret, len - ret, header[i]);
#line 843
  ret = ret + tmp;
#line 842
  i = i + 1;
  }
  ldv_41150: ;
#line 842
  if ((u32 )i < depth) {
#line 844
    goto ldv_41149;
  } else {

  }
  {
#line 844
  tmp___0 = tipc_snprintf(buf + (unsigned long )ret, len - ret, "\n");
#line 844
  ret = ret + tmp___0;
  }
#line 845
  return (ret);
}
}
#line 851 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static int nametbl_list(char *buf , int len , u32 depth_info , u32 type , u32 lowbound ,
                        u32 upbound ) 
{ 
  struct hlist_head *seq_head ;
  struct name_seq *seq ;
  int all_types ;
  int ret ;
  u32 depth ;
  u32 i ;
  int tmp ;
  struct hlist_node *____ptr ;
  struct hlist_node  const  *__mptr ;
  struct name_seq *tmp___0 ;
  int tmp___1 ;
  struct hlist_node *____ptr___0 ;
  struct hlist_node  const  *__mptr___0 ;
  struct name_seq *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct hlist_node *____ptr___1 ;
  struct hlist_node  const  *__mptr___1 ;
  struct name_seq *tmp___6 ;
  int tmp___7 ;
  struct hlist_node *____ptr___2 ;
  struct hlist_node  const  *__mptr___2 ;
  struct name_seq *tmp___8 ;

  {
#line 857
  ret = 0;
#line 861
  all_types = (long )((int )depth_info) & (-0x7FFFFFFF-1);
#line 862
  depth = depth_info & 2147483647U;
#line 864
  if (depth == 0U) {
#line 865
    return (0);
  } else {

  }
#line 867
  if (all_types != 0) {
    {
#line 869
    tmp = nametbl_header(buf, len, depth);
#line 869
    ret = ret + tmp;
#line 870
    lowbound = 0U;
#line 871
    upbound = 4294967295U;
#line 872
    i = 0U;
    }
#line 872
    goto ldv_41178;
    ldv_41177: 
#line 873
    seq_head = table.types + (unsigned long )i;
#line 874
    ____ptr = seq_head->first;
#line 874
    if ((unsigned long )____ptr != (unsigned long )((struct hlist_node *)0)) {
#line 874
      __mptr = (struct hlist_node  const  *)____ptr;
#line 874
      tmp___0 = (struct name_seq *)((char *)__mptr + 0xffffffffffffffe8UL);
    } else {
#line 874
      tmp___0 = (struct name_seq *)0;
    }
#line 874
    seq = tmp___0;
#line 874
    goto ldv_41175;
    ldv_41174: 
    {
#line 875
    tmp___1 = nameseq_list(seq, buf + (unsigned long )ret, len - ret, depth, seq->type,
                           lowbound, upbound, i);
#line 875
    ret = ret + tmp___1;
#line 874
    ____ptr___0 = seq->ns_list.next;
    }
#line 874
    if ((unsigned long )____ptr___0 != (unsigned long )((struct hlist_node *)0)) {
#line 874
      __mptr___0 = (struct hlist_node  const  *)____ptr___0;
#line 874
      tmp___2 = (struct name_seq *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
    } else {
#line 874
      tmp___2 = (struct name_seq *)0;
    }
#line 874
    seq = tmp___2;
    ldv_41175: ;
#line 874
    if ((unsigned long )seq != (unsigned long )((struct name_seq *)0)) {
#line 876
      goto ldv_41174;
    } else {

    }
#line 872
    i = i + 1U;
    ldv_41178: ;
#line 872
    if (i <= 1023U) {
#line 874
      goto ldv_41177;
    } else {

    }

  } else {
#line 882
    if (upbound < lowbound) {
      {
#line 883
      tmp___3 = tipc_snprintf(buf + (unsigned long )ret, len - ret, "invalid name sequence specified\n");
#line 883
      ret = ret + tmp___3;
      }
#line 885
      return (ret);
    } else {

    }
    {
#line 887
    tmp___4 = nametbl_header(buf + (unsigned long )ret, len - ret, depth);
#line 887
    ret = ret + tmp___4;
#line 888
    tmp___5 = hash((int )type);
#line 888
    i = (u32 )tmp___5;
#line 889
    seq_head = table.types + (unsigned long )i;
#line 890
    ____ptr___1 = seq_head->first;
    }
#line 890
    if ((unsigned long )____ptr___1 != (unsigned long )((struct hlist_node *)0)) {
#line 890
      __mptr___1 = (struct hlist_node  const  *)____ptr___1;
#line 890
      tmp___6 = (struct name_seq *)((char *)__mptr___1 + 0xffffffffffffffe8UL);
    } else {
#line 890
      tmp___6 = (struct name_seq *)0;
    }
#line 890
    seq = tmp___6;
#line 890
    goto ldv_41190;
    ldv_41189: ;
#line 891
    if (seq->type == type) {
      {
#line 892
      tmp___7 = nameseq_list(seq, buf + (unsigned long )ret, len - ret, depth, type,
                             lowbound, upbound, i);
#line 892
      ret = ret + tmp___7;
      }
#line 895
      goto ldv_41188;
    } else {

    }
#line 890
    ____ptr___2 = seq->ns_list.next;
#line 890
    if ((unsigned long )____ptr___2 != (unsigned long )((struct hlist_node *)0)) {
#line 890
      __mptr___2 = (struct hlist_node  const  *)____ptr___2;
#line 890
      tmp___8 = (struct name_seq *)((char *)__mptr___2 + 0xffffffffffffffe8UL);
    } else {
#line 890
      tmp___8 = (struct name_seq *)0;
    }
#line 890
    seq = tmp___8;
    ldv_41190: ;
#line 890
    if ((unsigned long )seq != (unsigned long )((struct name_seq *)0)) {
#line 892
      goto ldv_41189;
    } else {

    }
    ldv_41188: ;
  }
#line 899
  return (ret);
}
}
#line 902 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
struct sk_buff *tipc_nametbl_get(void const   *req_tlv_area___0 , int req_tlv_space___0 ) 
{ 
  struct sk_buff *buf ;
  struct tipc_name_table_query *argv ;
  struct tlv_desc *rep_tlv ;
  char *pb ;
  int pb_len ;
  int str_len ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;

  {
  {
#line 911
  tmp___0 = TLV_CHECK(req_tlv_area___0, (int )((__u16 )req_tlv_space___0), 25);
  }
#line 911
  if (tmp___0 == 0) {
    {
#line 912
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 912
    return (tmp);
  } else {

  }
  {
#line 914
  buf = tipc_cfg_reply_alloc(32772);
  }
#line 915
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 916
    return ((struct sk_buff *)0);
  } else {

  }
  {
#line 918
  rep_tlv = (struct tlv_desc *)buf->data;
#line 919
  pb = (char *)rep_tlv + 4UL;
#line 920
  pb_len = 32768;
#line 921
  argv = (struct tipc_name_table_query *)((char *)req_tlv_area___0 + 4UL);
#line 922
  _raw_read_lock_bh(& tipc_nametbl_lock);
#line 923
  tmp___1 = __fswab32(argv->upbound);
#line 923
  tmp___2 = __fswab32(argv->lowbound);
#line 923
  tmp___3 = __fswab32(argv->type);
#line 923
  tmp___4 = __fswab32(argv->depth);
#line 923
  str_len = nametbl_list(pb, pb_len, tmp___4, tmp___3, tmp___2, tmp___1);
#line 926
  _raw_read_unlock_bh(& tipc_nametbl_lock);
#line 927
  str_len = str_len + 1;
#line 928
  skb_put(buf, ((unsigned int )str_len + 7U) & 4294967292U);
#line 929
  TLV_SET((void *)rep_tlv, 5, (void *)0, (int )((__u16 )str_len));
  }
#line 931
  return (buf);
}
}
#line 934 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
int tipc_nametbl_init(void) 
{ 
  void *tmp ;

  {
  {
#line 936
  tmp = kcalloc(1024UL, 8UL, 32U);
#line 936
  table.types = (struct hlist_head *)tmp;
  }
#line 938
  if ((unsigned long )table.types == (unsigned long )((struct hlist_head *)0)) {
#line 939
    return (-12);
  } else {

  }
#line 941
  table.local_publ_count = 0U;
#line 942
  return (0);
}
}
#line 950 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
static void tipc_purge_publications(struct name_seq *seq ) 
{ 
  struct publication *publ ;
  struct publication *safe ;
  struct sub_seq *sseq ;
  struct name_info *info ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 956
  if ((unsigned long )seq->sseqs == (unsigned long )((struct sub_seq *)0)) {
    {
#line 957
    nameseq_delete_empty(seq);
    }
#line 958
    return;
  } else {

  }
#line 960
  sseq = seq->sseqs;
#line 961
  info = sseq->info;
#line 962
  __mptr = (struct list_head  const  *)info->zone_list.next;
#line 962
  publ = (struct publication *)((char *)__mptr + 0xffffffffffffff78UL);
#line 962
  __mptr___0 = (struct list_head  const  *)publ->zone_list.next;
#line 962
  safe = (struct publication *)((char *)__mptr___0 + 0xffffffffffffff78UL);
#line 962
  goto ldv_41218;
  ldv_41217: 
  {
#line 963
  tipc_nametbl_remove_publ(publ->type, publ->lower, publ->node, publ->ref, publ->key);
#line 962
  publ = safe;
#line 962
  __mptr___1 = (struct list_head  const  *)safe->zone_list.next;
#line 962
  safe = (struct publication *)((char *)__mptr___1 + 0xffffffffffffff78UL);
  }
  ldv_41218: ;
#line 962
  if ((unsigned long )(& publ->zone_list) != (unsigned long )(& info->zone_list)) {
#line 964
    goto ldv_41217;
  } else {

  }

#line 969
  return;
}
}
#line 968 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/name_table.c"
void tipc_nametbl_stop(void) 
{ 
  u32 i ;
  struct name_seq *seq ;
  struct hlist_head *seq_head ;
  struct hlist_node *safe ;
  int tmp ;
  struct hlist_node *____ptr ;
  struct hlist_node  const  *__mptr ;
  struct name_seq *tmp___0 ;
  struct hlist_node *____ptr___0 ;
  struct hlist_node  const  *__mptr___0 ;
  struct name_seq *tmp___1 ;

  {
#line 975
  if ((unsigned long )table.types == (unsigned long )((struct hlist_head *)0)) {
#line 976
    return;
  } else {

  }
  {
#line 981
  _raw_write_lock_bh(& tipc_nametbl_lock);
#line 982
  i = 0U;
  }
#line 982
  goto ldv_41241;
  ldv_41240: 
  {
#line 983
  tmp = hlist_empty((struct hlist_head  const  *)(table.types + (unsigned long )i));
  }
#line 983
  if (tmp != 0) {
#line 984
    goto ldv_41227;
  } else {

  }
#line 985
  seq_head = table.types + (unsigned long )i;
#line 986
  ____ptr = seq_head->first;
#line 986
  if ((unsigned long )____ptr != (unsigned long )((struct hlist_node *)0)) {
#line 986
    __mptr = (struct hlist_node  const  *)____ptr;
#line 986
    tmp___0 = (struct name_seq *)((char *)__mptr + 0xffffffffffffffe8UL);
  } else {
#line 986
    tmp___0 = (struct name_seq *)0;
  }
#line 986
  seq = tmp___0;
#line 986
  goto ldv_41238;
  ldv_41237: 
  {
#line 987
  tipc_purge_publications(seq);
#line 986
  ____ptr___0 = safe;
  }
#line 986
  if ((unsigned long )____ptr___0 != (unsigned long )((struct hlist_node *)0)) {
#line 986
    __mptr___0 = (struct hlist_node  const  *)____ptr___0;
#line 986
    tmp___1 = (struct name_seq *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  } else {
#line 986
    tmp___1 = (struct name_seq *)0;
  }
#line 986
  seq = tmp___1;
  ldv_41238: ;
#line 986
  if ((unsigned long )seq != (unsigned long )((struct name_seq *)0)) {
#line 986
    safe = seq->ns_list.next;
#line 988
    goto ldv_41237;
  } else {

  }

#line 989
  goto ldv_41227;
  ldv_41227: 
#line 982
  i = i + 1U;
  ldv_41241: ;
#line 982
  if (i <= 1023U) {
#line 984
    goto ldv_41240;
  } else {

  }
  {
#line 991
  kfree((void const   *)table.types);
#line 992
  table.types = (struct hlist_head *)0;
#line 993
  _raw_write_unlock_bh(& tipc_nametbl_lock);
  }
#line 994
  return;
}
}
#line 594 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_name_table.c.aux"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 597
  tmp = ldv_kcalloc(n, size, flags);
  }
#line 597
  return (tmp);
}
}
#line 800 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_name_table.c.aux"
__inline static void ldv_spin_lock_bh_61___2(spinlock_t *lock ) 
{ 


  {
  {
#line 803
  ldv_spin_lock_lock_of_name_seq();
#line 805
  spin_lock_bh(lock);
  }
#line 806
  return;
}
}
#line 809 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_name_table.c.aux"
__inline static void ldv_spin_unlock_bh_62___2(spinlock_t *lock ) 
{ 


  {
  {
#line 812
  ldv_spin_unlock_lock_of_name_seq();
#line 814
  spin_unlock_bh(lock);
  }
#line 815
  return;
}
}
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/addr.h"
__inline static u32 addr_domain(u32 sc ) 
{ 
  long tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;

  {
  {
#line 82
  tmp = __builtin_expect(sc == 3U, 1L);
  }
#line 82
  if (tmp != 0L) {
#line 83
    return (tipc_own_addr);
  } else {

  }
#line 84
  if (sc == 2U) {
    {
#line 85
    tmp___0 = tipc_cluster_mask(tipc_own_addr);
    }
#line 85
    return (tmp___0);
  } else {

  }
  {
#line 86
  tmp___1 = tipc_zone_mask(tipc_own_addr);
  }
#line 86
  return (tmp___1);
}
}
#line 225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_named(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 227
  tmp = msg_type(m);
  }
#line 227
  return (tmp == 2U);
}
}
#line 265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_lookup_scope(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 267
  tmp = msg_bits(m, 1U, 19U, 3U);
  }
#line 267
  return (tmp);
}
}
#line 379 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_nametype(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 381
  tmp = msg_word(m, 8U);
  }
#line 381
  return (tmp);
}
}
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_nameinst(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 391
  tmp = msg_word(m, 9U);
  }
#line 391
  return (tmp);
}
}
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
void tipc_port_reinit(void) ;
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
void tipc_node_delete(struct tipc_node *n_ptr ) ;
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.c"
rwlock_t tipc_net_lock  =    {{4294967296LL}, 3736018669U, 4294967295U, (void *)-1, {0, {0, 0}, "tipc_net_lock",
                                                           0, 0UL}};
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.c"
static void net_route_named_msg(struct sk_buff *buf ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  u32 dnode ;
  u32 dport ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;

  {
  {
#line 115
  tmp = buf_msg(buf);
#line 115
  msg = tmp;
#line 119
  tmp___0 = msg_named(msg);
  }
#line 119
  if (tmp___0 == 0U) {
    {
#line 120
    kfree_skb(buf);
    }
#line 121
    return;
  } else {

  }
  {
#line 124
  tmp___1 = msg_lookup_scope(msg);
#line 124
  dnode = addr_domain(tmp___1);
#line 125
  tmp___2 = msg_nameinst(msg);
#line 125
  tmp___3 = msg_nametype(msg);
#line 125
  dport = tipc_nametbl_translate(tmp___3, tmp___2, & dnode);
  }
#line 126
  if (dport != 0U) {
    {
#line 127
    msg_set_destnode(msg, dnode);
#line 128
    msg_set_mc_netid(msg, dport);
#line 129
    tipc_net_route_msg(buf);
    }
#line 130
    return;
  } else {

  }
  {
#line 132
  tipc_reject_msg(buf, 1U);
  }
#line 133
  return;
}
}
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.c"
void tipc_net_route_msg(struct sk_buff *buf ) 
{ 
  struct tipc_msg *msg ;
  u32 dnode ;
  u32 tmp___0 ;
  int tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  int tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;

  {
#line 140
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 141
    return;
  } else {

  }
  {
#line 142
  msg = buf_msg(buf);
#line 145
  tmp___1 = msg_short(msg);
  }
#line 145
  if (tmp___1 != 0) {
#line 145
    dnode = tipc_own_addr;
  } else {
    {
#line 145
    tmp___0 = msg_destnode(msg);
#line 145
    dnode = tmp___0;
    }
  }
  {
#line 146
  tmp___6 = tipc_in_scope(dnode, tipc_own_addr);
  }
#line 146
  if (tmp___6 != 0) {
    {
#line 147
    tmp___4 = msg_isdata(msg);
    }
#line 147
    if (tmp___4 != 0U) {
      {
#line 148
      tmp___3 = msg_mcast(msg);
      }
#line 148
      if (tmp___3 != 0U) {
        {
#line 149
        tipc_port_recv_mcast(buf, (struct tipc_port_list *)0);
        }
      } else {
        {
#line 150
        tmp___2 = msg_mc_netid(msg);
        }
#line 150
        if (tmp___2 != 0U) {
          {
#line 151
          tipc_port_recv_msg(buf);
          }
        } else {
          {
#line 153
          net_route_named_msg(buf);
          }
        }
      }
#line 154
      return;
    } else {

    }
    {
#line 156
    tmp___5 = msg_user(msg);
    }
    {
#line 157
    if (tmp___5 == 11U) {
#line 157
      goto case_11;
    } else {

    }
#line 160
    if (tmp___5 == 8U) {
#line 160
      goto case_8;
    } else {

    }
#line 163
    goto switch_default;
    case_11: /* CIL Label */ 
    {
#line 158
    tipc_named_recv(buf);
    }
#line 159
    goto ldv_40801;
    case_8: /* CIL Label */ 
    {
#line 161
    tipc_port_recv_proto_msg(buf);
    }
#line 162
    goto ldv_40801;
    switch_default: /* CIL Label */ 
    {
#line 164
    kfree_skb(buf);
    }
    switch_break: /* CIL Label */ ;
    }
    ldv_40801: ;
#line 166
    return;
  } else {

  }
  {
#line 170
  tmp___7 = msg_size(msg);
#line 170
  skb_trim(buf, tmp___7);
#line 171
  tmp___8 = msg_link_selector(msg);
#line 171
  tipc_link_send(buf, dnode, tmp___8);
  }
#line 172
  return;
}
}
#line 174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.c"
void tipc_net_start(u32 addr ) 
{ 
  char addr_string[16U] ;
  char *tmp ;

  {
  {
#line 178
  _raw_write_lock_bh(& tipc_net_lock);
#line 179
  tipc_own_addr = addr;
#line 180
  tipc_named_reinit();
#line 181
  tipc_port_reinit();
#line 182
  tipc_bclink_init();
#line 183
  _raw_write_unlock_bh(& tipc_net_lock);
#line 185
  tipc_cfg_reinit();
#line 187
  printk("\016tipc: Started in network mode\n");
#line 188
  tmp = tipc_addr_string_fill((char *)(& addr_string), tipc_own_addr);
#line 188
  printk("\016tipc: Own node address %s, network identity %u\n", tmp, tipc_net_id);
  }
#line 189
  return;
}
}
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/net.c"
void tipc_net_stop(void) 
{ 
  struct tipc_node *node ;
  struct tipc_node *t_node ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 196
  if (tipc_own_addr == 0U) {
#line 197
    return;
  } else {

  }
  {
#line 198
  _raw_write_lock_bh(& tipc_net_lock);
#line 199
  tipc_bearer_stop();
#line 200
  tipc_bclink_stop();
#line 201
  __mptr = (struct list_head  const  *)tipc_node_list.next;
#line 201
  node = (struct tipc_node *)((char *)__mptr + 0xffffffffffffffa0UL);
#line 201
  __mptr___0 = (struct list_head  const  *)node->list.next;
#line 201
  t_node = (struct tipc_node *)((char *)__mptr___0 + 0xffffffffffffffa0UL);
  }
#line 201
  goto ldv_40820;
  ldv_40819: 
  {
#line 202
  tipc_node_delete(node);
#line 201
  node = t_node;
#line 201
  __mptr___1 = (struct list_head  const  *)t_node->list.next;
#line 201
  t_node = (struct tipc_node *)((char *)__mptr___1 + 0xffffffffffffffa0UL);
  }
  ldv_40820: ;
#line 201
  if ((unsigned long )(& node->list) != (unsigned long )(& tipc_node_list)) {
#line 203
    goto ldv_40819;
  } else {

  }
  {
#line 203
  _raw_write_unlock_bh(& tipc_net_lock);
#line 204
  printk("\016tipc: Left network mode\n");
  }
#line 205
  return;
}
}
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/export.h"
extern struct module __this_module ;
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/capability.h"
extern bool capable(int  ) ;
#line 7 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/seq_file_net.h"
extern struct net init_net ;
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netlink.h"
__inline static struct nlmsghdr *nlmsg_hdr(struct sk_buff  const  *skb ) 
{ 


  {
#line 15
  return ((struct nlmsghdr *)skb->data);
}
}
#line 70
extern int netlink_unicast(struct sock * , struct sk_buff * , __u32  , int  ) ;
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netlink.h"
__inline static int nlmsg_msg_size(int payload ) 
{ 


  {
#line 277
  return (payload + 16);
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netlink.h"
__inline static int nlmsg_total_size(int payload ) 
{ 
  int tmp ;

  {
  {
#line 286
  tmp = nlmsg_msg_size(payload);
  }
#line 286
  return ((int )((unsigned int )tmp + 3U) & -4);
}
}
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netlink.h"
__inline static void *nlmsg_data(struct nlmsghdr  const  *nlh ) 
{ 


  {
#line 304
  return ((void *)((unsigned char *)nlh + 16UL));
}
}
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netlink.h"
__inline static int nlmsg_len(struct nlmsghdr  const  *nlh ) 
{ 


  {
#line 313
  return ((int )((unsigned int )nlh->nlmsg_len - 16U));
}
}
#line 333 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netlink.h"
__inline static int nlmsg_attrlen(struct nlmsghdr  const  *nlh , int hdrlen ) 
{ 
  int tmp ;

  {
  {
#line 335
  tmp = nlmsg_len(nlh);
  }
#line 335
  return ((int )((unsigned int )tmp - (((unsigned int )hdrlen + 3U) & 4294967292U)));
}
}
#line 590 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/netlink.h"
__inline static int nlmsg_unicast(struct sock *sk , struct sk_buff *skb , u32 portid ) 
{ 
  int err ;

  {
  {
#line 594
  err = netlink_unicast(sk, skb, portid, 64);
  }
#line 595
  if (err > 0) {
#line 596
    err = 0;
  } else {

  }
#line 598
  return (err);
}
}
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/genetlink.h"
extern int __genl_register_family_with_ops(struct genl_family * , struct genl_ops * ,
                                           size_t  ) ;
#line 136 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/genetlink.h"
__inline static int genl_register_family_with_ops(struct genl_family *family , struct genl_ops *ops ,
                                                  size_t n_ops ) 
{ 
  int tmp ;

  {
  {
#line 139
  family->module = & __this_module;
#line 140
  tmp = __genl_register_family_with_ops(family, ops, n_ops);
  }
#line 140
  return (tmp);
}
}
#line 143
extern int genl_unregister_family(struct genl_family * ) ;
#line 272 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/genetlink.h"
__inline static int genlmsg_unicast(struct net *net , struct sk_buff *skb , u32 portid ) 
{ 
  int tmp ;

  {
  {
#line 274
  tmp = nlmsg_unicast(net->genl_sock, skb, portid);
  }
#line 274
  return (tmp);
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/netlink.c"
static int handle_cmd(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct sk_buff *rep_buf ;
  struct nlmsghdr *rep_nlh ;
  struct nlmsghdr *req_nlh ;
  struct tipc_genlmsghdr *req_userhdr ;
  int hdr_space ;
  int tmp ;
  u16 cmd ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
  {
#line 45
  req_nlh = info->nlhdr;
#line 46
  req_userhdr = (struct tipc_genlmsghdr *)info->userhdr;
#line 47
  tmp = nlmsg_total_size(12);
#line 47
  hdr_space = tmp;
  }
#line 50
  if (((int )req_userhdr->cmd & 49152) != 0) {
    {
#line 50
    tmp___0 = capable(12);
    }
#line 50
    if (tmp___0) {
#line 50
      tmp___1 = 0;
    } else {
#line 50
      tmp___1 = 1;
    }
#line 50
    if (tmp___1) {
#line 51
      cmd = 49153U;
    } else {
#line 53
      cmd = req_userhdr->cmd;
    }
  } else {
#line 53
    cmd = req_userhdr->cmd;
  }
  {
#line 55
  tmp___2 = nlmsg_attrlen((struct nlmsghdr  const  *)req_nlh, 12);
#line 55
  tmp___3 = nlmsg_data((struct nlmsghdr  const  *)req_nlh);
#line 55
  rep_buf = tipc_cfg_do_cmd(req_userhdr->dest, (int )cmd, (void const   *)(tmp___3 + 12U),
                            tmp___2, hdr_space);
  }
#line 60
  if ((unsigned long )rep_buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 61
    skb_push(rep_buf, (unsigned int )hdr_space);
#line 62
    rep_nlh = nlmsg_hdr((struct sk_buff  const  *)rep_buf);
#line 63
    memcpy((void *)rep_nlh, (void const   *)req_nlh, (size_t )hdr_space);
#line 64
    rep_nlh->nlmsg_len = rep_buf->len;
#line 65
    genlmsg_unicast(& init_net, rep_buf, ((struct netlink_skb_parms *)(& skb->cb))->portid);
    }
  } else {

  }
#line 68
  return (0);
}
}
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/netlink.c"
static struct genl_family tipc_genl_family  = 
#line 71
     {0U, 8U, {'T', 'I', 'P', 'C', '\000'}, 1U, 0U, (_Bool)0, (_Bool)0, 0, 0, 0, {0,
                                                                                0},
    {0, 0}, {0, 0}, 0};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/netlink.c"
static struct genl_ops tipc_genl_ops  = 
#line 79
     {1U, (unsigned char)0, 0U, 0, & handle_cmd, 0, 0, {0, 0}};
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/netlink.c"
static int tipc_genl_family_registered  ;
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/netlink.c"
int tipc_netlink_start(void) 
{ 
  int res ;

  {
  {
#line 90
  res = genl_register_family_with_ops(& tipc_genl_family, & tipc_genl_ops, 1UL);
  }
#line 92
  if (res != 0) {
    {
#line 93
    printk("\vtipc: Failed to register netlink interface\n");
    }
#line 94
    return (res);
  } else {

  }
#line 97
  tipc_genl_family_registered = 1;
#line 98
  return (0);
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/netlink.c"
void tipc_netlink_stop(void) 
{ 


  {
#line 103
  if (tipc_genl_family_registered == 0) {
#line 104
    return;
  } else {

  }
  {
#line 106
  genl_unregister_family(& tipc_genl_family);
#line 107
  tipc_genl_family_registered = 0;
  }
#line 108
  return;
}
}
#line 595 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
  {
#line 597
  __hlist_del(n);
#line 598
  n->next = (struct hlist_node *)-2401263026317557504L;
#line 599
  n->pprev = (struct hlist_node **)-2401263026316508672L;
  }
#line 600
  return;
}
}
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_node.c.aux"
void ldv_spin_lock_node_create_lock(void) ;
#line 174
void ldv_spin_unlock_node_create_lock(void) ;
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_58(spinlock_t *lock ) ;
#line 372
__inline static void ldv_spin_lock_bh_60___1(spinlock_t *lock ) ;
#line 416
__inline static void ldv_spin_unlock_bh_59(spinlock_t *lock ) ;
#line 420
__inline static void ldv_spin_unlock_bh_61___2(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_unlock_bh_61___2(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_61___2(spinlock_t *lock ) ;
#line 636 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node_subscr.h"
void tipc_nodesub_notify(struct tipc_node *node ) ;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
int tipc_node_redundant_links(struct tipc_node *n_ptr ) ;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_lock___3(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 123
  ldv_spin_lock_bh_58(& n_ptr->lock);
  }
#line 124
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_unlock___3(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 128
  ldv_spin_unlock_bh_59(& n_ptr->lock);
  }
#line 129
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static void node_lost_contact(struct tipc_node *n_ptr ) ;
#line 45
static void node_established_contact(struct tipc_node *n_ptr ) ;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static spinlock_t node_create_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "node_create_lock",
                                                     0, 0UL}}}};
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static struct hlist_head node_htable[512U]  ;
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
struct list_head tipc_node_list  =    {& tipc_node_list, & tipc_node_list};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static u32 tipc_num_nodes  ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static atomic_t tipc_num_links  =    {0};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static unsigned int tipc_hashfn(u32 addr ) 
{ 


  {
#line 63
  return (addr & 511U);
}
}
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
struct tipc_node *tipc_node_find(u32 addr ) 
{ 
  struct tipc_node *node ;
  int tmp ;
  long tmp___0 ;
  struct hlist_node *____ptr ;
  unsigned int tmp___1 ;
  struct hlist_node  const  *__mptr ;
  struct tipc_node *tmp___2 ;
  struct hlist_node *____ptr___0 ;
  struct hlist_node  const  *__mptr___0 ;
  struct tipc_node *tmp___3 ;

  {
  {
#line 73
  tmp = in_own_cluster_exact(addr);
#line 73
  tmp___0 = __builtin_expect(tmp == 0, 0L);
  }
#line 73
  if (tmp___0 != 0L) {
#line 74
    return ((struct tipc_node *)0);
  } else {

  }
  {
#line 76
  tmp___1 = tipc_hashfn(addr);
#line 76
  ____ptr = ((struct hlist_head *)(& node_htable) + (unsigned long )tmp___1)->first;
  }
#line 76
  if ((unsigned long )____ptr != (unsigned long )((struct hlist_node *)0)) {
#line 76
    __mptr = (struct hlist_node  const  *)____ptr;
#line 76
    tmp___2 = (struct tipc_node *)((char *)__mptr + 0xffffffffffffffb0UL);
  } else {
#line 76
    tmp___2 = (struct tipc_node *)0;
  }
#line 76
  node = tmp___2;
#line 76
  goto ldv_40611;
  ldv_40610: ;
#line 77
  if (node->addr == addr) {
#line 78
    return (node);
  } else {

  }
#line 76
  ____ptr___0 = node->hash.next;
#line 76
  if ((unsigned long )____ptr___0 != (unsigned long )((struct hlist_node *)0)) {
#line 76
    __mptr___0 = (struct hlist_node  const  *)____ptr___0;
#line 76
    tmp___3 = (struct tipc_node *)((char *)__mptr___0 + 0xffffffffffffffb0UL);
  } else {
#line 76
    tmp___3 = (struct tipc_node *)0;
  }
#line 76
  node = tmp___3;
  ldv_40611: ;
#line 76
  if ((unsigned long )node != (unsigned long )((struct tipc_node *)0)) {
#line 78
    goto ldv_40610;
  } else {

  }

#line 80
  return ((struct tipc_node *)0);
}
}
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
struct tipc_node *tipc_node_create(u32 addr ) 
{ 
  struct tipc_node *n_ptr ;
  struct tipc_node *temp_node ;
  void *tmp ;
  struct lock_class_key __key ;
  unsigned int tmp___0 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 96
  ldv_spin_lock_bh_60___1(& node_create_lock);
#line 98
  n_ptr = tipc_node_find(addr);
  }
#line 99
  if ((unsigned long )n_ptr != (unsigned long )((struct tipc_node *)0)) {
    {
#line 100
    ldv_spin_unlock_bh_61___2(& node_create_lock);
    }
#line 101
    return (n_ptr);
  } else {

  }
  {
#line 104
  tmp = kzalloc(240UL, 32U);
#line 104
  n_ptr = (struct tipc_node *)tmp;
  }
#line 105
  if ((unsigned long )n_ptr == (unsigned long )((struct tipc_node *)0)) {
    {
#line 106
    ldv_spin_unlock_bh_61___2(& node_create_lock);
#line 107
    printk("\ftipc: Node creation failed, no memory\n");
    }
#line 108
    return ((struct tipc_node *)0);
  } else {

  }
  {
#line 111
  n_ptr->addr = addr;
#line 112
  spinlock_check(& n_ptr->lock);
#line 112
  __raw_spin_lock_init(& n_ptr->lock.__annonCompField19.rlock, "&(&n_ptr->lock)->rlock",
                       & __key);
#line 113
  INIT_HLIST_NODE(& n_ptr->hash);
#line 114
  INIT_LIST_HEAD(& n_ptr->list);
#line 115
  INIT_LIST_HEAD(& n_ptr->nsub);
#line 117
  tmp___0 = tipc_hashfn(addr);
#line 117
  hlist_add_head(& n_ptr->hash, (struct hlist_head *)(& node_htable) + (unsigned long )tmp___0);
#line 119
  __mptr = (struct list_head  const  *)tipc_node_list.next;
#line 119
  temp_node = (struct tipc_node *)((char *)__mptr + 0xffffffffffffffa0UL);
  }
#line 119
  goto ldv_40625;
  ldv_40624: ;
#line 120
  if (n_ptr->addr < temp_node->addr) {
#line 121
    goto ldv_40623;
  } else {

  }
#line 119
  __mptr___0 = (struct list_head  const  *)temp_node->list.next;
#line 119
  temp_node = (struct tipc_node *)((char *)__mptr___0 + 0xffffffffffffffa0UL);
  ldv_40625: ;
#line 119
  if ((unsigned long )(& temp_node->list) != (unsigned long )(& tipc_node_list)) {
#line 121
    goto ldv_40624;
  } else {

  }
  ldv_40623: 
  {
#line 123
  list_add_tail(& n_ptr->list, & temp_node->list);
#line 124
  n_ptr->block_setup = 1;
#line 125
  n_ptr->signature = 65536U;
#line 127
  tipc_num_nodes = tipc_num_nodes + 1U;
#line 129
  ldv_spin_unlock_bh_61___2(& node_create_lock);
  }
#line 130
  return (n_ptr);
}
}
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
void tipc_node_delete(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 135
  list_del(& n_ptr->list);
#line 136
  hlist_del(& n_ptr->hash);
#line 137
  kfree((void const   *)n_ptr);
#line 139
  tipc_num_nodes = tipc_num_nodes - 1U;
  }
#line 140
  return;
}
}
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
void tipc_node_link_up(struct tipc_node *n_ptr , struct tipc_link *l_ptr ) 
{ 
  struct tipc_link **active ;
  struct tipc_link *tmp ;
  struct tipc_link *tmp___0 ;

  {
  {
#line 149
  active = (struct tipc_link **)(& n_ptr->active_links);
#line 151
  n_ptr->working_links = n_ptr->working_links + 1;
#line 153
  printk("\016tipc: Established link <%s> on network plane %c\n", (char *)(& l_ptr->name),
         (int )(l_ptr->b_ptr)->net_plane);
  }
#line 156
  if ((unsigned long )*active == (unsigned long )((struct tipc_link *)0)) {
    {
#line 157
    tmp = l_ptr;
#line 157
    *(active + 1UL) = tmp;
#line 157
    *active = tmp;
#line 158
    node_established_contact(n_ptr);
    }
#line 159
    return;
  } else {

  }
#line 161
  if (l_ptr->priority < (*active)->priority) {
    {
#line 162
    printk("\016tipc: New link <%s> becomes standby\n", (char *)(& l_ptr->name));
    }
#line 163
    return;
  } else {

  }
  {
#line 165
  tipc_link_send_duplicate(*active, l_ptr);
  }
#line 166
  if (l_ptr->priority == (*active)->priority) {
#line 167
    *active = l_ptr;
#line 168
    return;
  } else {

  }
  {
#line 170
  printk("\016tipc: Old link <%s> becomes standby\n", (char *)(& (*active)->name));
  }
#line 171
  if ((unsigned long )*(active + 1UL) != (unsigned long )*active) {
    {
#line 172
    printk("\016tipc: Old link <%s> becomes standby\n", (char *)(& (*(active + 1UL))->name));
    }
  } else {

  }
#line 173
  tmp___0 = l_ptr;
#line 173
  *(active + 1UL) = tmp___0;
#line 173
  *active = tmp___0;
#line 174
  return;
}
}
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static void node_select_active_links(struct tipc_node *n_ptr ) 
{ 
  struct tipc_link **active ;
  u32 i ;
  u32 highest_prio ;
  struct tipc_link *tmp ;
  struct tipc_link *l_ptr ;
  int tmp___0 ;
  struct tipc_link *tmp___1 ;

  {
#line 181
  active = (struct tipc_link **)(& n_ptr->active_links);
#line 183
  highest_prio = 0U;
#line 185
  tmp = (struct tipc_link *)0;
#line 185
  *(active + 1UL) = tmp;
#line 185
  *active = tmp;
#line 187
  i = 0U;
#line 187
  goto ldv_40643;
  ldv_40642: 
#line 188
  l_ptr = n_ptr->links[i];
#line 190
  if ((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0)) {
#line 192
    goto ldv_40641;
  } else {
    {
#line 190
    tmp___0 = tipc_link_is_up(l_ptr);
    }
#line 190
    if (tmp___0 == 0) {
#line 192
      goto ldv_40641;
    } else
#line 190
    if (l_ptr->priority < highest_prio) {
#line 192
      goto ldv_40641;
    } else {

    }
  }
#line 194
  if (l_ptr->priority > highest_prio) {
#line 195
    highest_prio = l_ptr->priority;
#line 196
    tmp___1 = l_ptr;
#line 196
    *(active + 1UL) = tmp___1;
#line 196
    *active = tmp___1;
  } else {
#line 198
    *(active + 1UL) = l_ptr;
  }
  ldv_40641: 
#line 187
  i = i + 1U;
  ldv_40643: ;
#line 187
  if (i <= 1U) {
#line 189
    goto ldv_40642;
  } else {

  }

#line 194
  return;
}
}
#line 206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
void tipc_node_link_down(struct tipc_node *n_ptr , struct tipc_link *l_ptr ) 
{ 
  struct tipc_link **active ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 210
  n_ptr->working_links = n_ptr->working_links - 1;
#line 212
  tmp = tipc_link_is_active(l_ptr);
  }
#line 212
  if (tmp == 0) {
    {
#line 213
    printk("\016tipc: Lost standby link <%s> on network plane %c\n", (char *)(& l_ptr->name),
           (int )(l_ptr->b_ptr)->net_plane);
    }
#line 215
    return;
  } else {

  }
  {
#line 217
  printk("\016tipc: Lost link <%s> on network plane %c\n", (char *)(& l_ptr->name),
         (int )(l_ptr->b_ptr)->net_plane);
#line 220
  active = (struct tipc_link **)(& n_ptr->active_links);
  }
#line 221
  if ((unsigned long )*active == (unsigned long )l_ptr) {
#line 222
    *active = *(active + 1UL);
  } else {

  }
#line 223
  if ((unsigned long )*(active + 1UL) == (unsigned long )l_ptr) {
#line 224
    *(active + 1UL) = *active;
  } else {

  }
#line 225
  if ((unsigned long )*active == (unsigned long )l_ptr) {
    {
#line 226
    node_select_active_links(n_ptr);
    }
  } else {

  }
  {
#line 227
  tmp___0 = tipc_node_is_up(n_ptr);
  }
#line 227
  if (tmp___0 != 0) {
    {
#line 228
    tipc_link_changeover(l_ptr);
    }
  } else {
    {
#line 230
    node_lost_contact(n_ptr);
    }
  }
#line 231
  return;
}
}
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
int tipc_node_active_links(struct tipc_node *n_ptr ) 
{ 


  {
#line 235
  return ((unsigned long )n_ptr->active_links[0] != (unsigned long )((struct tipc_link *)0));
}
}
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
int tipc_node_redundant_links(struct tipc_node *n_ptr ) 
{ 


  {
#line 240
  return (n_ptr->working_links > 1);
}
}
#line 243 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
int tipc_node_is_up(struct tipc_node *n_ptr ) 
{ 
  int tmp ;

  {
  {
#line 245
  tmp = tipc_node_active_links(n_ptr);
  }
#line 245
  return (tmp);
}
}
#line 248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
void tipc_node_attach_link(struct tipc_node *n_ptr , struct tipc_link *l_ptr ) 
{ 


  {
  {
#line 250
  n_ptr->links[(l_ptr->b_ptr)->identity] = l_ptr;
#line 251
  atomic_inc(& tipc_num_links);
#line 252
  n_ptr->link_cnt = n_ptr->link_cnt + 1;
  }
#line 253
  return;
}
}
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
void tipc_node_detach_link(struct tipc_node *n_ptr , struct tipc_link *l_ptr ) 
{ 


  {
  {
#line 257
  n_ptr->links[(l_ptr->b_ptr)->identity] = (struct tipc_link *)0;
#line 258
  atomic_dec(& tipc_num_links);
#line 259
  n_ptr->link_cnt = n_ptr->link_cnt - 1;
  }
#line 260
  return;
}
}
#line 262 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static void node_established_contact(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 264
  tipc_k_signal(& tipc_named_node_up, (unsigned long )n_ptr->addr);
#line 265
  n_ptr->bclink.oos_state = 0U;
#line 266
  n_ptr->bclink.acked = tipc_bclink_get_last_sent();
#line 267
  tipc_bclink_add_node(n_ptr->addr);
  }
#line 268
  return;
}
}
#line 270 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static void node_name_purge_complete(unsigned long node_addr ) 
{ 
  struct tipc_node *n_ptr ;

  {
  {
#line 274
  _raw_read_lock_bh(& tipc_net_lock);
#line 275
  n_ptr = tipc_node_find((u32 )node_addr);
  }
#line 276
  if ((unsigned long )n_ptr != (unsigned long )((struct tipc_node *)0)) {
    {
#line 277
    tipc_node_lock___3(n_ptr);
#line 278
    n_ptr->block_setup = n_ptr->block_setup & -3;
#line 279
    tipc_node_unlock___3(n_ptr);
    }
  } else {

  }
  {
#line 281
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 282
  return;
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
static void node_lost_contact(struct tipc_node *n_ptr ) 
{ 
  char addr_string[16U] ;
  u32 i ;
  char *tmp ;
  struct sk_buff *buf ;
  struct tipc_link *l_ptr ;

  {
  {
#line 289
  tmp = tipc_addr_string_fill((char *)(& addr_string), n_ptr->addr);
#line 289
  printk("\016tipc: Lost contact with %s\n", tmp);
  }
#line 293
  if ((int )n_ptr->bclink.recv_permitted) {
#line 294
    goto ldv_40681;
    ldv_40680: 
    {
#line 295
    buf = n_ptr->bclink.deferred_head;
#line 296
    n_ptr->bclink.deferred_head = buf->next;
#line 297
    kfree_skb(buf);
    }
    ldv_40681: ;
#line 294
    if ((unsigned long )n_ptr->bclink.deferred_head != (unsigned long )((struct sk_buff *)0)) {
#line 296
      goto ldv_40680;
    } else {

    }
#line 299
    n_ptr->bclink.deferred_size = 0U;
#line 301
    if ((unsigned long )n_ptr->bclink.defragm != (unsigned long )((struct sk_buff *)0)) {
      {
#line 302
      kfree_skb(n_ptr->bclink.defragm);
#line 303
      n_ptr->bclink.defragm = (struct sk_buff *)0;
      }
    } else {

    }
    {
#line 306
    tipc_bclink_remove_node(n_ptr->addr);
#line 307
    tipc_bclink_acknowledge(n_ptr, 65536U);
#line 309
    n_ptr->bclink.recv_permitted = 0;
    }
  } else {

  }
#line 313
  i = 0U;
#line 313
  goto ldv_40686;
  ldv_40685: 
#line 314
  l_ptr = n_ptr->links[i];
#line 315
  if ((unsigned long )l_ptr == (unsigned long )((struct tipc_link *)0)) {
#line 316
    goto ldv_40684;
  } else {

  }
  {
#line 317
  l_ptr->reset_checkpoint = l_ptr->next_in_no;
#line 318
  l_ptr->exp_msg_count = 0U;
#line 319
  tipc_link_reset_fragments(l_ptr);
  }
  ldv_40684: 
#line 313
  i = i + 1U;
  ldv_40686: ;
#line 313
  if (i <= 1U) {
#line 315
    goto ldv_40685;
  } else {

  }
  {
#line 323
  tipc_nodesub_notify(n_ptr);
#line 326
  n_ptr->block_setup = 3;
#line 327
  tipc_k_signal(& node_name_purge_complete, (unsigned long )n_ptr->addr);
  }
#line 328
  return;
}
}
#line 330 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
struct sk_buff *tipc_node_get_nodes(void const   *req_tlv_area___0 , int req_tlv_space___0 ) 
{ 
  u32 domain ;
  struct sk_buff *buf ;
  struct tipc_node *n_ptr ;
  struct tipc_node_info node_info ;
  u32 payload_size ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  struct sk_buff *tmp___2 ;
  int tmp___3 ;
  struct sk_buff *tmp___4 ;
  struct sk_buff *tmp___5 ;
  struct list_head  const  *__mptr ;
  int tmp___6 ;
  __u32 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 338
  tmp___0 = TLV_CHECK(req_tlv_area___0, (int )((__u16 )req_tlv_space___0), 17);
  }
#line 338
  if (tmp___0 == 0) {
    {
#line 339
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 339
    return (tmp);
  } else {

  }
  {
#line 341
  tmp___1 = __fswab32(*((__be32 *)((char *)req_tlv_area___0 + 4UL)));
#line 341
  domain = tmp___1;
#line 342
  tmp___3 = tipc_addr_domain_valid(domain);
  }
#line 342
  if (tmp___3 == 0) {
    {
#line 343
    tmp___2 = tipc_cfg_reply_error_string((char *)"\205 (network address)");
    }
#line 343
    return (tmp___2);
  } else {

  }
  {
#line 346
  _raw_read_lock_bh(& tipc_net_lock);
  }
#line 347
  if (tipc_num_nodes == 0U) {
    {
#line 348
    _raw_read_unlock_bh(& tipc_net_lock);
#line 349
    tmp___4 = tipc_cfg_reply_none();
    }
#line 349
    return (tmp___4);
  } else {

  }
#line 353
  payload_size = tipc_num_nodes * 12U;
#line 354
  if (payload_size > 32768U) {
    {
#line 355
    _raw_read_unlock_bh(& tipc_net_lock);
#line 356
    tmp___5 = tipc_cfg_reply_error_string((char *)"\204 (too many nodes)");
    }
#line 356
    return (tmp___5);
  } else {

  }
  {
#line 359
  buf = tipc_cfg_reply_alloc((int )payload_size);
  }
#line 360
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 361
    _raw_read_unlock_bh(& tipc_net_lock);
    }
#line 362
    return ((struct sk_buff *)0);
  } else {

  }
#line 366
  __mptr = (struct list_head  const  *)tipc_node_list.next;
#line 366
  n_ptr = (struct tipc_node *)((char *)__mptr + 0xffffffffffffffa0UL);
#line 366
  goto ldv_40703;
  ldv_40702: 
  {
#line 367
  tmp___6 = tipc_in_scope(domain, n_ptr->addr);
  }
#line 367
  if (tmp___6 == 0) {
#line 368
    goto ldv_40701;
  } else {

  }
  {
#line 369
  tmp___7 = __fswab32(n_ptr->addr);
#line 369
  node_info.addr = tmp___7;
#line 370
  tmp___8 = tipc_node_is_up(n_ptr);
#line 370
  tmp___9 = __fswab32((__u32 )tmp___8);
#line 370
  node_info.up = tmp___9;
#line 371
  tipc_cfg_append_tlv(buf, 21, (void *)(& node_info), 8);
  }
  ldv_40701: 
#line 366
  __mptr___0 = (struct list_head  const  *)n_ptr->list.next;
#line 366
  n_ptr = (struct tipc_node *)((char *)__mptr___0 + 0xffffffffffffffa0UL);
  ldv_40703: ;
#line 366
  if ((unsigned long )(& n_ptr->list) != (unsigned long )(& tipc_node_list)) {
#line 368
    goto ldv_40702;
  } else {

  }
  {
#line 375
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 376
  return (buf);
}
}
#line 379 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.c"
struct sk_buff *tipc_node_get_links(void const   *req_tlv_area___0 , int req_tlv_space___0 ) 
{ 
  u32 domain ;
  struct sk_buff *buf ;
  struct tipc_node *n_ptr ;
  struct tipc_link_info link_info ;
  u32 payload_size ;
  struct sk_buff *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  struct sk_buff *tmp___2 ;
  int tmp___3 ;
  struct sk_buff *tmp___4 ;
  int tmp___5 ;
  struct sk_buff *tmp___6 ;
  u32 tmp___7 ;
  __u32 tmp___8 ;
  struct list_head  const  *__mptr ;
  u32 i ;
  int tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  __u32 tmp___12 ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 387
  tmp___0 = TLV_CHECK(req_tlv_area___0, (int )((__u16 )req_tlv_space___0), 17);
  }
#line 387
  if (tmp___0 == 0) {
    {
#line 388
    tmp = tipc_cfg_reply_error_string((char *)"\200");
    }
#line 388
    return (tmp);
  } else {

  }
  {
#line 390
  tmp___1 = __fswab32(*((__be32 *)((char *)req_tlv_area___0 + 4UL)));
#line 390
  domain = tmp___1;
#line 391
  tmp___3 = tipc_addr_domain_valid(domain);
  }
#line 391
  if (tmp___3 == 0) {
    {
#line 392
    tmp___2 = tipc_cfg_reply_error_string((char *)"\205 (network address)");
    }
#line 392
    return (tmp___2);
  } else {

  }
#line 395
  if (tipc_own_addr == 0U) {
    {
#line 396
    tmp___4 = tipc_cfg_reply_none();
    }
#line 396
    return (tmp___4);
  } else {

  }
  {
#line 398
  _raw_read_lock_bh(& tipc_net_lock);
#line 401
  tmp___5 = atomic_read((atomic_t const   *)(& tipc_num_links));
#line 401
  payload_size = (u32 )((unsigned long )(tmp___5 + 1)) * 72U;
  }
#line 403
  if (payload_size > 32768U) {
    {
#line 404
    _raw_read_unlock_bh(& tipc_net_lock);
#line 405
    tmp___6 = tipc_cfg_reply_error_string((char *)"\204 (too many links)");
    }
#line 405
    return (tmp___6);
  } else {

  }
  {
#line 408
  buf = tipc_cfg_reply_alloc((int )payload_size);
  }
#line 409
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
    {
#line 410
    _raw_read_unlock_bh(& tipc_net_lock);
    }
#line 411
    return ((struct sk_buff *)0);
  } else {

  }
  {
#line 415
  tmp___7 = tipc_cluster_mask(tipc_own_addr);
#line 415
  tmp___8 = __fswab32(tmp___7);
#line 415
  link_info.dest = tmp___8;
#line 416
  link_info.up = 16777216U;
#line 417
  strlcpy((char *)(& link_info.str), (char const   *)(& tipc_bclink_name), 60UL);
#line 418
  tipc_cfg_append_tlv(buf, 22, (void *)(& link_info), 68);
#line 421
  __mptr = (struct list_head  const  *)tipc_node_list.next;
#line 421
  n_ptr = (struct tipc_node *)((char *)__mptr + 0xffffffffffffffa0UL);
  }
#line 421
  goto ldv_40725;
  ldv_40724: 
  {
#line 424
  tmp___9 = tipc_in_scope(domain, n_ptr->addr);
  }
#line 424
  if (tmp___9 == 0) {
#line 425
    goto ldv_40719;
  } else {

  }
  {
#line 426
  tipc_node_lock___3(n_ptr);
#line 427
  i = 0U;
  }
#line 427
  goto ldv_40722;
  ldv_40721: ;
#line 428
  if ((unsigned long )n_ptr->links[i] == (unsigned long )((struct tipc_link *)0)) {
#line 429
    goto ldv_40720;
  } else {

  }
  {
#line 430
  tmp___10 = __fswab32(n_ptr->addr);
#line 430
  link_info.dest = tmp___10;
#line 431
  tmp___11 = tipc_link_is_up(n_ptr->links[i]);
#line 431
  tmp___12 = __fswab32((__u32 )tmp___11);
#line 431
  link_info.up = tmp___12;
#line 432
  strcpy((char *)(& link_info.str), (char const   *)(& (n_ptr->links[i])->name));
#line 433
  tipc_cfg_append_tlv(buf, 22, (void *)(& link_info), 68);
  }
  ldv_40720: 
#line 427
  i = i + 1U;
  ldv_40722: ;
#line 427
  if (i <= 1U) {
#line 429
    goto ldv_40721;
  } else {

  }
  {
#line 436
  tipc_node_unlock___3(n_ptr);
  }
  ldv_40719: 
#line 421
  __mptr___0 = (struct list_head  const  *)n_ptr->list.next;
#line 421
  n_ptr = (struct tipc_node *)((char *)__mptr___0 + 0xffffffffffffffa0UL);
  ldv_40725: ;
#line 421
  if ((unsigned long )(& n_ptr->list) != (unsigned long )(& tipc_node_list)) {
#line 423
    goto ldv_40724;
  } else {

  }
  {
#line 439
  _raw_read_unlock_bh(& tipc_net_lock);
  }
#line 440
  return (buf);
}
}
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_node.c.aux"
__inline static void ldv_spin_lock_bh_60___1(spinlock_t *lock ) 
{ 


  {
  {
#line 794
  ldv_spin_lock_node_create_lock();
#line 796
  spin_lock_bh(lock);
  }
#line 797
  return;
}
}
#line 800 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_node.c.aux"
__inline static void ldv_spin_unlock_bh_61___2(spinlock_t *lock ) 
{ 


  {
  {
#line 803
  ldv_spin_unlock_node_create_lock();
#line 805
  spin_unlock_bh(lock);
  }
#line 806
  return;
}
}
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_58(spinlock_t *lock ) ;
#line 416
__inline static void ldv_spin_unlock_bh_59(spinlock_t *lock ) ;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_lock___4(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 123
  ldv_spin_lock_bh_58(& n_ptr->lock);
  }
#line 124
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node.h"
__inline static void tipc_node_unlock___4(struct tipc_node *n_ptr ) 
{ 


  {
  {
#line 128
  ldv_spin_unlock_bh_59(& n_ptr->lock);
  }
#line 129
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node_subscr.c"
void tipc_nodesub_subscribe(struct tipc_node_subscr *node_sub , u32 addr , void *usr_handle ,
                            void (*handle_down)(void * ) ) 
{ 
  int tmp ;

  {
  {
#line 47
  tmp = in_own_node(addr);
  }
#line 47
  if (tmp != 0) {
#line 48
    node_sub->node = (struct tipc_node *)0;
#line 49
    return;
  } else {

  }
  {
#line 52
  node_sub->node = tipc_node_find(addr);
  }
#line 53
  if ((unsigned long )node_sub->node == (unsigned long )((struct tipc_node *)0)) {
    {
#line 54
    printk("\ftipc: Node subscription rejected, unknown node 0x%x\n", addr);
    }
#line 56
    return;
  } else {

  }
  {
#line 58
  node_sub->handle_node_down = handle_down;
#line 59
  node_sub->usr_handle = usr_handle;
#line 61
  tipc_node_lock___4(node_sub->node);
#line 62
  list_add_tail(& node_sub->nodesub_list, & (node_sub->node)->nsub);
#line 63
  tipc_node_unlock___4(node_sub->node);
  }
#line 64
  return;
}
}
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node_subscr.c"
void tipc_nodesub_unsubscribe(struct tipc_node_subscr *node_sub ) 
{ 


  {
#line 71
  if ((unsigned long )node_sub->node == (unsigned long )((struct tipc_node *)0)) {
#line 72
    return;
  } else {

  }
  {
#line 74
  tipc_node_lock___4(node_sub->node);
#line 75
  list_del_init(& node_sub->nodesub_list);
#line 76
  tipc_node_unlock___4(node_sub->node);
  }
#line 77
  return;
}
}
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/node_subscr.c"
void tipc_nodesub_notify(struct tipc_node *node ) 
{ 
  struct tipc_node_subscr *ns ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 88
  __mptr = (struct list_head  const  *)node->nsub.next;
#line 88
  ns = (struct tipc_node_subscr *)((char *)__mptr + 0xffffffffffffffe8UL);
#line 88
  goto ldv_39885;
  ldv_39884: ;
#line 89
  if ((unsigned long )ns->handle_node_down != (unsigned long )((void (*)(void * ))0)) {
    {
#line 90
    tipc_k_signal((void (*)(unsigned long  ))ns->handle_node_down, (unsigned long )ns->usr_handle);
#line 92
    ns->handle_node_down = (void (*)(void * ))0;
    }
  } else {

  }
#line 88
  __mptr___0 = (struct list_head  const  *)ns->nodesub_list.next;
#line 88
  ns = (struct tipc_node_subscr *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  ldv_39885: ;
#line 88
  if ((unsigned long )(& ns->nodesub_list) != (unsigned long )(& node->nsub)) {
#line 90
    goto ldv_39884;
  } else {

  }

#line 95
  return;
}
}
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_61___1(spinlock_t *lock ) ;
#line 376
__inline static void ldv_spin_lock_bh_61___1(spinlock_t *lock ) ;
#line 380
__inline static void ldv_spin_lock_bh_61___1(spinlock_t *lock ) ;
#line 384
__inline static void ldv_spin_lock_bh_64___0(spinlock_t *lock ) ;
#line 388
__inline static void ldv_spin_lock_bh_61___1(spinlock_t *lock ) ;
#line 420
__inline static void ldv_spin_unlock_bh_60___0(spinlock_t *lock ) ;
#line 424
__inline static void ldv_spin_unlock_bh_62___1(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_62___1(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_unlock_bh_60___0(spinlock_t *lock ) ;
#line 436
__inline static void ldv_spin_unlock_bh_62___1(spinlock_t *lock ) ;
#line 440
__inline static void ldv_spin_unlock_bh_62___1(spinlock_t *lock ) ;
#line 636 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
extern struct sk_buff *skb_clone(struct sk_buff * , gfp_t  ) ;
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_swap_words(struct tipc_msg *msg , u32 a , u32 b ) 
{ 
  u32 temp ;

  {
#line 112
  temp = msg->hdr[a];
#line 114
  msg->hdr[a] = msg->hdr[b];
#line 115
  msg->hdr[b] = temp;
#line 116
  return;
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_importance(struct tipc_msg *m , u32 i ) 
{ 


  {
  {
#line 153
  msg_set_user(m, i);
  }
#line 154
  return;
}
}
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static int msg_dest_droppable(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 188
  tmp = msg_bits(m, 0U, 19U, 1U);
  }
#line 188
  return ((int )tmp);
}
}
#line 191 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_dest_droppable(struct tipc_msg *m , u32 d ) 
{ 


  {
  {
#line 193
  msg_set_bits(m, 0U, 19U, 1U, d);
  }
#line 194
  return;
}
}
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static int msg_src_droppable(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 198
  tmp = msg_bits(m, 0U, 18U, 1U);
  }
#line 198
  return ((int )tmp);
}
}
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_src_droppable(struct tipc_msg *m , u32 d ) 
{ 


  {
  {
#line 203
  msg_set_bits(m, 0U, 18U, 1U, d);
  }
#line 204
  return;
}
}
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_connected(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 237
  tmp = msg_type(m);
  }
#line 237
  return (tmp == 0U);
}
}
#line 240 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_errcode(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 242
  tmp = msg_bits(m, 1U, 25U, 15U);
  }
#line 242
  return (tmp);
}
}
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_errcode(struct tipc_msg *m , u32 err ) 
{ 


  {
  {
#line 247
  msg_set_bits(m, 1U, 25U, 15U, err);
  }
#line 248
  return;
}
}
#line 270 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_lookup_scope(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 272
  msg_set_bits(m, 1U, 19U, 3U, n);
  }
#line 273
  return;
}
}
#line 384 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_nametype(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 386
  msg_set_word(m, 8U, n);
  }
#line 387
  return;
}
}
#line 394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_namelower(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 396
  tmp = msg_nameinst(m);
  }
#line 396
  return (tmp);
}
}
#line 399 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_namelower(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 401
  msg_set_word(m, 9U, n);
  }
#line 402
  return;
}
}
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_nameinst(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 406
  msg_set_namelower(m, n);
  }
#line 407
  return;
}
}
#line 409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static u32 msg_nameupper(struct tipc_msg *m ) 
{ 
  u32 tmp ;

  {
  {
#line 411
  tmp = msg_word(m, 10U);
  }
#line 411
  return (tmp);
}
}
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/msg.h"
__inline static void msg_set_nameupper(struct tipc_msg *m , u32 n ) 
{ 


  {
  {
#line 416
  msg_set_word(m, 10U, n);
  }
#line 417
  return;
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.h"
u32 tipc_ref_acquire(void *object , spinlock_t **lock ) ;
#line 44
void tipc_ref_discard(u32 ref ) ;
#line 47
void *tipc_ref_deref(u32 ref ) ;
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
struct tipc_port *tipc_createport(struct sock *sk , u32 (*dispatcher)(struct tipc_port * ,
                                                                      struct sk_buff * ) ,
                                  void (*wakeup)(struct tipc_port * ) , u32 const   importance ) ;
#line 117
void tipc_acknowledge(u32 ref , u32 ack ) ;
#line 119
int tipc_deleteport(u32 ref ) ;
#line 121
int tipc_portimportance(u32 ref , unsigned int *importance ) ;
#line 122
int tipc_set_portimportance(u32 ref , unsigned int imp ) ;
#line 124
int tipc_portunreliable(u32 ref , unsigned int *isunreliable ) ;
#line 125
int tipc_set_portunreliable(u32 ref , unsigned int isunreliable ) ;
#line 127
int tipc_portunreturnable(u32 ref , unsigned int *isunrejectable ) ;
#line 128
int tipc_set_portunreturnable(u32 ref , unsigned int isunrejectable ) ;
#line 130
int tipc_publish(u32 ref , unsigned int scope , struct tipc_name_seq  const  *seq ) ;
#line 132
int tipc_withdraw(u32 ref , unsigned int scope , struct tipc_name_seq  const  *seq ) ;
#line 135
int tipc_connect(u32 ref , struct tipc_portid  const  *peer ) ;
#line 137
int tipc_disconnect(u32 ref ) ;
#line 139
int tipc_shutdown(u32 ref ) ;
#line 145
int __tipc_disconnect(struct tipc_port *tp_ptr ) ;
#line 146
int __tipc_connect(u32 ref , struct tipc_port *p_ptr , struct tipc_portid  const  *peer ) ;
#line 148
int tipc_port_peer_msg(struct tipc_port *p_ptr , struct tipc_msg *msg ) ;
#line 154
int tipc_send(u32 ref , unsigned int num_sect , struct iovec  const  *msg_sect , unsigned int total_len ) ;
#line 157
int tipc_send2name(u32 ref , struct tipc_name  const  *name , unsigned int domain ,
                   unsigned int num_sect , struct iovec  const  *msg_sect , unsigned int total_len ) ;
#line 161
int tipc_send2port(u32 ref , struct tipc_portid  const  *dest , unsigned int num_sect ,
                   struct iovec  const  *msg_sect , unsigned int total_len ) ;
#line 165
int tipc_multicast(u32 ref , struct tipc_name_seq  const  *seq , unsigned int num_sect ,
                   struct iovec  const  *msg_sect , unsigned int total_len ) ;
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
__inline static void tipc_port_unlock___0(struct tipc_port *p_ptr ) 
{ 


  {
  {
#line 192
  ldv_spin_unlock_bh_60___0(p_ptr->lock);
  }
#line 193
  return;
}
}
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
__inline static struct tipc_port *tipc_port_deref(u32 ref ) 
{ 
  void *tmp ;

  {
  {
#line 197
  tmp = tipc_ref_deref(ref);
  }
#line 197
  return ((struct tipc_port *)tmp);
}
}
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.h"
__inline static int tipc_port_congested(struct tipc_port *p_ptr ) 
{ 


  {
#line 202
  return (p_ptr->sent - p_ptr->acked > 1023U);
}
}
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
spinlock_t tipc_port_list_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "tipc_port_list_lock",
                                                     0, 0UL}}}};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static struct list_head ports  =    {& ports, & ports};
#line 52
static void port_handle_node_down(unsigned long ref ) ;
#line 53
static struct sk_buff *port_build_self_abort_msg(struct tipc_port *p_ptr , u32 err ) ;
#line 54
static struct sk_buff *port_build_peer_abort_msg(struct tipc_port *p_ptr , u32 err ) ;
#line 55
static void port_timeout(unsigned long ref ) ;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static u32 port_peernode(struct tipc_port *p_ptr ) 
{ 
  u32 tmp ;

  {
  {
#line 60
  tmp = msg_destnode(& p_ptr->phdr);
  }
#line 60
  return (tmp);
}
}
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static u32 port_peerport(struct tipc_port *p_ptr ) 
{ 
  u32 tmp ;

  {
  {
#line 65
  tmp = msg_mc_netid(& p_ptr->phdr);
  }
#line 65
  return (tmp);
}
}
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_port_peer_msg(struct tipc_port *p_ptr , struct tipc_msg *msg ) 
{ 
  u32 peernode ;
  u32 orignode ;
  u32 tmp ;
  u32 tmp___0 ;

  {
  {
#line 79
  tmp = msg_origport(msg);
#line 79
  tmp___0 = port_peerport(p_ptr);
  }
#line 79
  if (tmp != tmp___0) {
#line 80
    return (0);
  } else {

  }
  {
#line 82
  orignode = msg_orignode(msg);
#line 83
  peernode = port_peernode(p_ptr);
  }
#line 84
  return ((orignode == peernode || (orignode == 0U && peernode == tipc_own_addr)) || (peernode == 0U && orignode == tipc_own_addr));
}
}
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_multicast(u32 ref , struct tipc_name_seq  const  *seq , unsigned int num_sect ,
                   struct iovec  const  *msg_sect , unsigned int total_len ) 
{ 
  struct tipc_msg *hdr ;
  struct sk_buff *buf ;
  struct sk_buff *ibuf ;
  struct tipc_port_list dports ;
  struct tipc_port *oport ;
  struct tipc_port *tmp ;
  int ext_targets ;
  int res ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 98
  ibuf = (struct sk_buff *)0;
#line 99
  dports.count = 0;
#line 99
  dports.next = (struct tipc_port_list *)0;
#line 99
  dports.ports[0] = 0U;
#line 99
  dports.ports[1] = 0U;
#line 99
  dports.ports[2] = 0U;
#line 99
  dports.ports[3] = 0U;
#line 99
  dports.ports[4] = 0U;
#line 99
  dports.ports[5] = 0U;
#line 99
  dports.ports[6] = 0U;
#line 99
  dports.ports[7] = 0U;
#line 99
  dports.ports[8] = 0U;
#line 99
  dports.ports[9] = 0U;
#line 99
  dports.ports[10] = 0U;
#line 99
  dports.ports[11] = 0U;
#line 99
  dports.ports[12] = 0U;
#line 99
  dports.ports[13] = 0U;
#line 99
  dports.ports[14] = 0U;
#line 99
  dports.ports[15] = 0U;
#line 99
  dports.ports[16] = 0U;
#line 99
  dports.ports[17] = 0U;
#line 99
  dports.ports[18] = 0U;
#line 99
  dports.ports[19] = 0U;
#line 99
  dports.ports[20] = 0U;
#line 99
  dports.ports[21] = 0U;
#line 99
  dports.ports[22] = 0U;
#line 99
  dports.ports[23] = 0U;
#line 99
  dports.ports[24] = 0U;
#line 99
  dports.ports[25] = 0U;
#line 99
  dports.ports[26] = 0U;
#line 99
  dports.ports[27] = 0U;
#line 99
  dports.ports[28] = 0U;
#line 99
  dports.ports[29] = 0U;
#line 99
  dports.ports[30] = 0U;
#line 99
  dports.ports[31] = 0U;
#line 100
  tmp = tipc_port_deref(ref);
#line 100
  oport = tmp;
#line 104
  tmp___0 = __builtin_expect((unsigned long )oport == (unsigned long )((struct tipc_port *)0),
                             0L);
  }
#line 104
  if (tmp___0 != 0L) {
#line 105
    return (-22);
  } else {

  }
  {
#line 108
  hdr = & oport->phdr;
#line 109
  msg_set_type(hdr, 1U);
#line 110
  msg_set_lookup_scope(hdr, 2U);
#line 111
  msg_set_mc_netid(hdr, 0U);
#line 112
  msg_set_destnode(hdr, 0U);
#line 113
  msg_set_nametype(hdr, seq->type);
#line 114
  msg_set_namelower(hdr, seq->lower);
#line 115
  msg_set_nameupper(hdr, seq->upper);
#line 116
  msg_set_hdr_sz(hdr, 44U);
#line 117
  res = tipc_msg_build(hdr, msg_sect, num_sect, total_len, 66060, & buf);
#line 119
  tmp___1 = __builtin_expect((unsigned long )buf == (unsigned long )((struct sk_buff *)0),
                             0L);
  }
#line 119
  if (tmp___1 != 0L) {
#line 120
    return (res);
  } else {

  }
  {
#line 123
  ext_targets = tipc_nametbl_mc_translate(seq->type, seq->lower, seq->upper, 3U, & dports);
  }
#line 127
  if (ext_targets != 0) {
#line 128
    if (dports.count != 0) {
      {
#line 129
      ibuf = skb_copy((struct sk_buff  const  *)buf, 32U);
      }
#line 130
      if ((unsigned long )ibuf == (unsigned long )((struct sk_buff *)0)) {
        {
#line 131
        tipc_port_list_free(& dports);
#line 132
        kfree_skb(buf);
        }
#line 133
        return (-12);
      } else {

      }
    } else {

    }
    {
#line 136
    res = tipc_bclink_send_msg(buf);
    }
#line 137
    if (res < 0 && dports.count != 0) {
      {
#line 138
      kfree_skb(ibuf);
      }
    } else {

    }
  } else {
#line 140
    ibuf = buf;
  }
#line 143
  if (res >= 0) {
#line 144
    if ((unsigned long )ibuf != (unsigned long )((struct sk_buff *)0)) {
      {
#line 145
      tipc_port_recv_mcast(ibuf, & dports);
      }
    } else {

    }
  } else {
    {
#line 147
    tipc_port_list_free(& dports);
    }
  }
#line 149
  return (res);
}
}
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
void tipc_port_recv_mcast(struct sk_buff *buf , struct tipc_port_list *dp ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_port_list dports ;
  struct tipc_port_list *item ;
  int cnt ;
  u32 tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  int index ;
  struct sk_buff *b ;
  struct sk_buff *tmp___2 ;
  struct tipc_msg *tmp___3 ;

  {
  {
#line 160
  dports.count = 0;
#line 160
  dports.next = (struct tipc_port_list *)0;
#line 160
  dports.ports[0] = 0U;
#line 160
  dports.ports[1] = 0U;
#line 160
  dports.ports[2] = 0U;
#line 160
  dports.ports[3] = 0U;
#line 160
  dports.ports[4] = 0U;
#line 160
  dports.ports[5] = 0U;
#line 160
  dports.ports[6] = 0U;
#line 160
  dports.ports[7] = 0U;
#line 160
  dports.ports[8] = 0U;
#line 160
  dports.ports[9] = 0U;
#line 160
  dports.ports[10] = 0U;
#line 160
  dports.ports[11] = 0U;
#line 160
  dports.ports[12] = 0U;
#line 160
  dports.ports[13] = 0U;
#line 160
  dports.ports[14] = 0U;
#line 160
  dports.ports[15] = 0U;
#line 160
  dports.ports[16] = 0U;
#line 160
  dports.ports[17] = 0U;
#line 160
  dports.ports[18] = 0U;
#line 160
  dports.ports[19] = 0U;
#line 160
  dports.ports[20] = 0U;
#line 160
  dports.ports[21] = 0U;
#line 160
  dports.ports[22] = 0U;
#line 160
  dports.ports[23] = 0U;
#line 160
  dports.ports[24] = 0U;
#line 160
  dports.ports[25] = 0U;
#line 160
  dports.ports[26] = 0U;
#line 160
  dports.ports[27] = 0U;
#line 160
  dports.ports[28] = 0U;
#line 160
  dports.ports[29] = 0U;
#line 160
  dports.ports[30] = 0U;
#line 160
  dports.ports[31] = 0U;
#line 161
  item = dp;
#line 162
  cnt = 0;
#line 164
  msg = buf_msg(buf);
  }
#line 167
  if ((unsigned long )dp == (unsigned long )((struct tipc_port_list *)0)) {
    {
#line 168
    tmp = msg_nameupper(msg);
#line 168
    tmp___0 = msg_namelower(msg);
#line 168
    tmp___1 = msg_nametype(msg);
#line 168
    tipc_nametbl_mc_translate(tmp___1, tmp___0, tmp, 2U, & dports);
#line 173
    dp = & dports;
#line 173
    item = dp;
    }
  } else {

  }
#line 177
  if (dp->count != 0) {
    {
#line 178
    msg_set_destnode(msg, tipc_own_addr);
    }
#line 179
    if (dp->count == 1) {
      {
#line 180
      msg_set_mc_netid(msg, dp->ports[0]);
#line 181
      tipc_port_recv_msg(buf);
#line 182
      tipc_port_list_free(dp);
      }
#line 183
      return;
    } else {

    }
#line 185
    goto ldv_40815;
    ldv_40814: 
    {
#line 186
    index = cnt % 32;
#line 187
    tmp___2 = skb_clone(buf, 32U);
#line 187
    b = tmp___2;
    }
#line 189
    if ((unsigned long )b == (unsigned long )((struct sk_buff *)0)) {
      {
#line 190
      printk("\ftipc: Unable to deliver multicast message(s)\n");
      }
#line 191
      goto exit;
    } else {

    }
#line 193
    if (index == 0 && cnt != 0) {
#line 194
      item = item->next;
    } else {

    }
    {
#line 195
    tmp___3 = buf_msg(b);
#line 195
    msg_set_mc_netid(tmp___3, item->ports[index]);
#line 196
    tipc_port_recv_msg(b);
#line 185
    cnt = cnt + 1;
    }
    ldv_40815: ;
#line 185
    if (cnt < dp->count) {
#line 187
      goto ldv_40814;
    } else {

    }

  } else {

  }
  exit: 
  {
#line 200
  kfree_skb(buf);
#line 201
  tipc_port_list_free(dp);
  }
#line 202
  return;
}
}
#line 209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
struct tipc_port *tipc_createport(struct sock *sk , u32 (*dispatcher)(struct tipc_port * ,
                                                                      struct sk_buff * ) ,
                                  void (*wakeup)(struct tipc_port * ) , u32 const   importance ) 
{ 
  struct tipc_port *p_ptr ;
  struct tipc_msg *msg ;
  u32 ref ;
  void *tmp ;

  {
  {
#line 219
  tmp = kzalloc(376UL, 32U);
#line 219
  p_ptr = (struct tipc_port *)tmp;
  }
#line 220
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
    {
#line 221
    printk("\ftipc: Port creation failed, no memory\n");
    }
#line 222
    return ((struct tipc_port *)0);
  } else {

  }
  {
#line 224
  ref = tipc_ref_acquire((void *)p_ptr, & p_ptr->lock);
  }
#line 225
  if (ref == 0U) {
    {
#line 226
    printk("\ftipc: Port creation failed, ref. table exhausted\n");
#line 227
    kfree((void const   *)p_ptr);
    }
#line 228
    return ((struct tipc_port *)0);
  } else {

  }
  {
#line 231
  p_ptr->sk = sk;
#line 232
  p_ptr->max_pkt = 1500U;
#line 233
  p_ptr->ref = ref;
#line 234
  INIT_LIST_HEAD(& p_ptr->wait_list);
#line 235
  INIT_LIST_HEAD(& p_ptr->subscription.nodesub_list);
#line 236
  p_ptr->dispatcher = dispatcher;
#line 237
  p_ptr->wakeup = wakeup;
#line 238
  k_init_timer(& p_ptr->timer, & port_timeout, (unsigned long )ref);
#line 239
  INIT_LIST_HEAD(& p_ptr->publications);
#line 240
  INIT_LIST_HEAD(& p_ptr->port_list);
#line 247
  ldv_spin_lock_bh_61___1(& tipc_port_list_lock);
#line 248
  msg = & p_ptr->phdr;
#line 249
  tipc_msg_init(msg, importance, 2U, 40U, 0U);
#line 250
  msg_set_bc_netid(msg, ref);
#line 251
  list_add_tail(& p_ptr->port_list, & ports);
#line 252
  ldv_spin_unlock_bh_62___1(& tipc_port_list_lock);
  }
#line 253
  return (p_ptr);
}
}
#line 256 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_deleteport(u32 ref ) 
{ 
  struct tipc_port *p_ptr ;
  struct sk_buff *buf ;

  {
  {
#line 259
  buf = (struct sk_buff *)0;
#line 261
  tipc_withdraw(ref, 0U, (struct tipc_name_seq  const  *)0);
#line 262
  p_ptr = tipc_port_lock(ref);
  }
#line 263
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 264
    return (-22);
  } else {

  }
  {
#line 266
  tipc_ref_discard(ref);
#line 267
  tipc_port_unlock___0(p_ptr);
#line 269
  k_cancel_timer(& p_ptr->timer);
  }
#line 270
  if (p_ptr->connected != 0) {
    {
#line 271
    buf = port_build_peer_abort_msg(p_ptr, 2U);
#line 272
    tipc_nodesub_unsubscribe(& p_ptr->subscription);
    }
  } else {

  }
  {
#line 275
  ldv_spin_lock_bh_61___1(& tipc_port_list_lock);
#line 276
  list_del(& p_ptr->port_list);
#line 277
  list_del(& p_ptr->wait_list);
#line 278
  ldv_spin_unlock_bh_62___1(& tipc_port_list_lock);
#line 279
  k_term_timer(& p_ptr->timer);
#line 280
  kfree((void const   *)p_ptr);
#line 281
  tipc_net_route_msg(buf);
  }
#line 282
  return (0);
}
}
#line 285 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static int port_unreliable(struct tipc_port *p_ptr ) 
{ 
  int tmp ;

  {
  {
#line 287
  tmp = msg_src_droppable(& p_ptr->phdr);
  }
#line 287
  return (tmp);
}
}
#line 290 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_portunreliable(u32 ref , unsigned int *isunreliable ) 
{ 
  struct tipc_port *p_ptr ;
  int tmp ;

  {
  {
#line 294
  p_ptr = tipc_port_lock(ref);
  }
#line 295
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 296
    return (-22);
  } else {

  }
  {
#line 297
  tmp = port_unreliable(p_ptr);
#line 297
  *isunreliable = (unsigned int )tmp;
#line 298
  tipc_port_unlock___0(p_ptr);
  }
#line 299
  return (0);
}
}
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_set_portunreliable(u32 ref , unsigned int isunreliable ) 
{ 
  struct tipc_port *p_ptr ;

  {
  {
#line 306
  p_ptr = tipc_port_lock(ref);
  }
#line 307
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 308
    return (-22);
  } else {

  }
  {
#line 309
  msg_set_src_droppable(& p_ptr->phdr, isunreliable != 0U);
#line 310
  tipc_port_unlock___0(p_ptr);
  }
#line 311
  return (0);
}
}
#line 314 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static int port_unreturnable(struct tipc_port *p_ptr ) 
{ 
  int tmp ;

  {
  {
#line 316
  tmp = msg_dest_droppable(& p_ptr->phdr);
  }
#line 316
  return (tmp);
}
}
#line 319 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_portunreturnable(u32 ref , unsigned int *isunrejectable ) 
{ 
  struct tipc_port *p_ptr ;
  int tmp ;

  {
  {
#line 323
  p_ptr = tipc_port_lock(ref);
  }
#line 324
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 325
    return (-22);
  } else {

  }
  {
#line 326
  tmp = port_unreturnable(p_ptr);
#line 326
  *isunrejectable = (unsigned int )tmp;
#line 327
  tipc_port_unlock___0(p_ptr);
  }
#line 328
  return (0);
}
}
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_set_portunreturnable(u32 ref , unsigned int isunrejectable ) 
{ 
  struct tipc_port *p_ptr ;

  {
  {
#line 335
  p_ptr = tipc_port_lock(ref);
  }
#line 336
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 337
    return (-22);
  } else {

  }
  {
#line 338
  msg_set_dest_droppable(& p_ptr->phdr, isunrejectable != 0U);
#line 339
  tipc_port_unlock___0(p_ptr);
  }
#line 340
  return (0);
}
}
#line 348 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static struct sk_buff *port_build_proto_msg(struct tipc_port *p_ptr , u32 type , u32 ack ) 
{ 
  struct sk_buff *buf ;
  struct tipc_msg *msg ;
  u32 tmp ;
  u32 tmp___0 ;

  {
  {
#line 354
  buf = tipc_buf_acquire(40U);
  }
#line 355
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 356
    msg = buf_msg(buf);
#line 357
    tmp = port_peernode(p_ptr);
#line 357
    tipc_msg_init(msg, 8U, type, 40U, tmp);
#line 359
    tmp___0 = port_peerport(p_ptr);
#line 359
    msg_set_mc_netid(msg, tmp___0);
#line 360
    msg_set_bc_netid(msg, p_ptr->ref);
#line 361
    msg_set_msgcnt(msg, ack);
    }
  } else {

  }
#line 363
  return (buf);
}
}
#line 366 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_reject_msg(struct sk_buff *buf , u32 err ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  struct sk_buff *rbuf ;
  struct tipc_msg *rmsg ;
  int hdr_sz ;
  u32 imp ;
  u32 data_sz ;
  u32 tmp___0 ;
  u32 src_node ;
  u32 rmsg_sz ;
  int __ret_warn_on ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  u32 tmp___5 ;
  int tmp___6 ;
  u32 tmp___7 ;
  u32 __min1 ;
  u32 __min2 ;
  u32 tmp___8 ;
  int tmp___9 ;
  struct tipc_port *p_ptr ;
  u32 tmp___10 ;
  struct tipc_port *tmp___11 ;
  struct sk_buff *abuf ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  int tmp___14 ;

  {
  {
#line 368
  tmp = buf_msg(buf);
#line 368
  msg = tmp;
#line 373
  tmp___0 = msg_data_sz(msg);
#line 373
  data_sz = tmp___0;
#line 378
  tmp___1 = msg_isdata(msg);
#line 378
  __ret_warn_on = tmp___1 == 0U;
#line 378
  tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 378
  if (tmp___3 != 0L) {
    {
#line 378
    tmp___2 = msg_user(msg);
#line 378
    warn_slowpath_fmt("net/tipc/port.c", 379, "attempt to reject message with user=%u",
                      tmp___2);
    }
  } else {

  }
  {
#line 378
  tmp___4 = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 378
  if (tmp___4 != 0L) {
    {
#line 380
    dump_stack();
    }
#line 381
    goto exit;
  } else {

  }
  {
#line 383
  tmp___5 = msg_errcode(msg);
  }
#line 383
  if (tmp___5 != 0U) {
#line 384
    goto exit;
  } else {
    {
#line 383
    tmp___6 = msg_dest_droppable(msg);
    }
#line 383
    if (tmp___6 != 0) {
#line 384
      goto exit;
    } else {

    }
  }
  {
#line 390
  tmp___7 = msg_hdr_sz(msg);
#line 390
  hdr_sz = (int )tmp___7;
#line 391
  __min1 = data_sz;
#line 391
  __min2 = 1024U;
#line 391
  rmsg_sz = (u32 )hdr_sz + (__min1 < __min2 ? __min1 : __min2);
#line 393
  rbuf = tipc_buf_acquire(rmsg_sz);
  }
#line 394
  if ((unsigned long )rbuf == (unsigned long )((struct sk_buff *)0)) {
#line 395
    goto exit;
  } else {

  }
  {
#line 397
  rmsg = buf_msg(rbuf);
#line 398
  skb_copy_to_linear_data(rbuf, (void const   *)msg, rmsg_sz);
#line 400
  tmp___8 = msg_connected(rmsg);
  }
#line 400
  if (tmp___8 != 0U) {
    {
#line 401
    imp = msg_user(rmsg);
    }
#line 402
    if (imp <= 2U) {
      {
#line 403
      imp = imp + 1U;
#line 403
      msg_set_importance(rmsg, imp);
      }
    } else {

    }
  } else {

  }
  {
#line 405
  msg_set_non_seq(rmsg, 0U);
#line 406
  msg_set_size(rmsg, rmsg_sz);
#line 407
  msg_set_errcode(rmsg, err);
#line 408
  msg_set_prevnode(rmsg, tipc_own_addr);
#line 409
  msg_swap_words(rmsg, 4U, 5U);
#line 410
  tmp___9 = msg_short(rmsg);
  }
#line 410
  if (tmp___9 == 0) {
    {
#line 411
    msg_swap_words(rmsg, 6U, 7U);
    }
  } else {

  }
  {
#line 414
  tmp___12 = msg_connected(msg);
  }
#line 414
  if (tmp___12 != 0U) {
    {
#line 415
    tmp___10 = msg_mc_netid(msg);
#line 415
    tmp___11 = tipc_port_lock(tmp___10);
#line 415
    p_ptr = tmp___11;
    }
#line 417
    if ((unsigned long )p_ptr != (unsigned long )((struct tipc_port *)0)) {
#line 418
      abuf = (struct sk_buff *)0;
#line 420
      if (p_ptr->connected != 0) {
        {
#line 421
        abuf = port_build_self_abort_msg(p_ptr, err);
        }
      } else {

      }
      {
#line 422
      tipc_port_unlock___0(p_ptr);
#line 423
      tipc_net_route_msg(abuf);
      }
    } else {

    }
  } else {

  }
  {
#line 428
  src_node = msg_prevnode(msg);
#line 429
  tmp___14 = in_own_node(src_node);
  }
#line 429
  if (tmp___14 != 0) {
    {
#line 430
    tipc_port_recv_msg(rbuf);
    }
  } else {
    {
#line 432
    tmp___13 = msg_link_selector(rmsg);
#line 432
    tipc_link_send(rbuf, src_node, tmp___13);
    }
  }
  exit: 
  {
#line 434
  kfree_skb(buf);
  }
#line 435
  return ((int )data_sz);
}
}
#line 438 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_port_reject_sections(struct tipc_port *p_ptr , struct tipc_msg *hdr , struct iovec  const  *msg_sect ,
                              u32 num_sect , unsigned int total_len , int err ) 
{ 
  struct sk_buff *buf ;
  int res ;
  int tmp ;

  {
  {
#line 445
  res = tipc_msg_build(hdr, msg_sect, num_sect, total_len, 66060, & buf);
  }
#line 447
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 448
    return (res);
  } else {

  }
  {
#line 450
  tmp = tipc_reject_msg(buf, (u32 )err);
  }
#line 450
  return (tmp);
}
}
#line 453 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static void port_timeout(unsigned long ref ) 
{ 
  struct tipc_port *p_ptr ;
  struct tipc_port *tmp ;
  struct sk_buff *buf ;

  {
  {
#line 455
  tmp = tipc_port_lock((u32 )ref);
#line 455
  p_ptr = tmp;
#line 456
  buf = (struct sk_buff *)0;
  }
#line 458
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 459
    return;
  } else {

  }
#line 461
  if (p_ptr->connected == 0) {
    {
#line 462
    tipc_port_unlock___0(p_ptr);
    }
#line 463
    return;
  } else {

  }
#line 467
  if (p_ptr->probing_state == 1U) {
    {
#line 468
    buf = port_build_self_abort_msg(p_ptr, 2U);
    }
  } else {
    {
#line 470
    buf = port_build_proto_msg(p_ptr, 0U, 0U);
#line 471
    p_ptr->probing_state = 1U;
#line 472
    k_start_timer(& p_ptr->timer, (unsigned long )p_ptr->probing_interval);
    }
  }
  {
#line 474
  tipc_port_unlock___0(p_ptr);
#line 475
  tipc_net_route_msg(buf);
  }
#line 476
  return;
}
}
#line 479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static void port_handle_node_down(unsigned long ref ) 
{ 
  struct tipc_port *p_ptr ;
  struct tipc_port *tmp ;
  struct sk_buff *buf ;

  {
  {
#line 481
  tmp = tipc_port_lock((u32 )ref);
#line 481
  p_ptr = tmp;
#line 482
  buf = (struct sk_buff *)0;
  }
#line 484
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 485
    return;
  } else {

  }
  {
#line 486
  buf = port_build_self_abort_msg(p_ptr, 3U);
#line 487
  tipc_port_unlock___0(p_ptr);
#line 488
  tipc_net_route_msg(buf);
  }
#line 489
  return;
}
}
#line 492 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static struct sk_buff *port_build_self_abort_msg(struct tipc_port *p_ptr , u32 err ) 
{ 
  struct sk_buff *buf ;
  struct sk_buff *tmp ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp___0 ;

  {
  {
#line 494
  tmp = port_build_peer_abort_msg(p_ptr, err);
#line 494
  buf = tmp;
  }
#line 496
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 497
    tmp___0 = buf_msg(buf);
#line 497
    msg = tmp___0;
#line 498
    msg_swap_words(msg, 4U, 5U);
#line 499
    msg_swap_words(msg, 6U, 7U);
    }
  } else {

  }
#line 501
  return (buf);
}
}
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static struct sk_buff *port_build_peer_abort_msg(struct tipc_port *p_ptr , u32 err ) 
{ 
  struct sk_buff *buf ;
  struct tipc_msg *msg ;
  u32 imp ;

  {
#line 511
  if (p_ptr->connected == 0) {
#line 512
    return ((struct sk_buff *)0);
  } else {

  }
  {
#line 514
  buf = tipc_buf_acquire(32U);
  }
#line 515
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
    {
#line 516
    msg = buf_msg(buf);
#line 517
    memcpy((void *)msg, (void const   *)(& p_ptr->phdr), 32UL);
#line 518
    msg_set_hdr_sz(msg, 32U);
#line 519
    msg_set_size(msg, 32U);
#line 520
    imp = msg_user(msg);
    }
#line 521
    if (imp <= 2U) {
      {
#line 522
      imp = imp + 1U;
#line 522
      msg_set_importance(msg, imp);
      }
    } else {

    }
    {
#line 523
    msg_set_errcode(msg, err);
    }
  } else {

  }
#line 525
  return (buf);
}
}
#line 528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
void tipc_port_recv_proto_msg(struct sk_buff *buf ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  struct tipc_port *p_ptr ;
  struct sk_buff *r_buf ;
  u32 destport ;
  u32 tmp___0 ;
  int wakeable ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  int tmp___3 ;
  u32 tmp___4 ;
  int tmp___5 ;
  u32 tmp___6 ;
  int tmp___7 ;

  {
  {
#line 530
  tmp = buf_msg(buf);
#line 530
  msg = tmp;
#line 532
  r_buf = (struct sk_buff *)0;
#line 533
  tmp___0 = msg_mc_netid(msg);
#line 533
  destport = tmp___0;
#line 537
  p_ptr = tipc_port_lock(destport);
  }
#line 538
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0) || p_ptr->connected == 0) {
#line 538
    goto _L;
  } else {
    {
#line 538
    tmp___3 = tipc_port_peer_msg(p_ptr, msg);
    }
#line 538
    if (tmp___3 == 0) {
      _L: /* CIL Label */ 
      {
#line 539
      r_buf = tipc_buf_acquire(32U);
      }
#line 540
      if ((unsigned long )r_buf != (unsigned long )((struct sk_buff *)0)) {
        {
#line 541
        msg = buf_msg(r_buf);
#line 542
        tmp___1 = msg_orignode(msg);
#line 542
        tipc_msg_init(msg, 2U, 0U, 32U, tmp___1);
#line 544
        msg_set_errcode(msg, 2U);
#line 545
        msg_set_bc_netid(msg, destport);
#line 546
        tmp___2 = msg_origport(msg);
#line 546
        msg_set_mc_netid(msg, tmp___2);
        }
      } else {

      }
#line 548
      if ((unsigned long )p_ptr != (unsigned long )((struct tipc_port *)0)) {
        {
#line 549
        tipc_port_unlock___0(p_ptr);
        }
      } else {

      }
#line 550
      goto exit;
    } else {

    }
  }
  {
#line 554
  tmp___4 = msg_type(msg);
  }
  {
#line 555
  if (tmp___4 == 2U) {
#line 555
    goto case_2;
  } else {

  }
#line 565
  if (tmp___4 == 0U) {
#line 565
    goto case_0;
  } else {

  }
#line 568
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 556
  tmp___5 = tipc_port_congested(p_ptr);
#line 556
  wakeable = (tmp___5 != 0 && p_ptr->congested != 0U) && (unsigned long )p_ptr->wakeup != (unsigned long )((void (*)(struct tipc_port * ))0);
#line 558
  tmp___6 = msg_msgcnt(msg);
#line 558
  p_ptr->acked = p_ptr->acked + tmp___6;
#line 559
  tmp___7 = tipc_port_congested(p_ptr);
  }
#line 559
  if (tmp___7 == 0) {
#line 560
    p_ptr->congested = 0U;
#line 561
    if (wakeable != 0) {
      {
#line 562
      (*(p_ptr->wakeup))(p_ptr);
      }
    } else {

    }
  } else {

  }
#line 564
  goto ldv_40930;
  case_0: /* CIL Label */ 
  {
#line 566
  r_buf = port_build_proto_msg(p_ptr, 1U, 0U);
  }
#line 567
  goto ldv_40930;
  switch_default: /* CIL Label */ ;
#line 570
  goto ldv_40930;
  switch_break: /* CIL Label */ ;
  }
  ldv_40930: 
  {
#line 572
  p_ptr->probing_state = 0U;
#line 573
  tipc_port_unlock___0(p_ptr);
  }
  exit: 
  {
#line 575
  tipc_net_route_msg(r_buf);
#line 576
  kfree_skb(buf);
  }
#line 577
  return;
}
}
#line 579 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static int port_print(struct tipc_port *p_ptr , char *buf , int len , int full_id ) 
{ 
  struct publication *publ ;
  int ret ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  u32 dport ;
  u32 tmp___2 ;
  u32 destnode ;
  u32 tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr ;
  int tmp___10 ;
  int tmp___11 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___12 ;

  {
#line 584
  if (full_id != 0) {
    {
#line 585
    tmp = tipc_node(tipc_own_addr);
#line 585
    tmp___0 = tipc_cluster(tipc_own_addr);
#line 585
    tmp___1 = tipc_zone(tipc_own_addr);
#line 585
    ret = tipc_snprintf(buf, len, "<%u.%u.%u:%u>:", tmp___1, tmp___0, tmp, p_ptr->ref);
    }
  } else {
    {
#line 590
    ret = tipc_snprintf(buf, len, "%-10u:", p_ptr->ref);
    }
  }
#line 592
  if (p_ptr->connected != 0) {
    {
#line 593
    tmp___2 = port_peerport(p_ptr);
#line 593
    dport = tmp___2;
#line 594
    tmp___3 = port_peernode(p_ptr);
#line 594
    destnode = tmp___3;
#line 596
    tmp___4 = tipc_node(destnode);
#line 596
    tmp___5 = tipc_cluster(destnode);
#line 596
    tmp___6 = tipc_zone(destnode);
#line 596
    tmp___7 = tipc_snprintf(buf + (unsigned long )ret, len - ret, " connected to <%u.%u.%u:%u>",
                            tmp___6, tmp___5, tmp___4, dport);
#line 596
    ret = ret + tmp___7;
    }
#line 601
    if (p_ptr->conn_type != 0U) {
      {
#line 602
      tmp___8 = tipc_snprintf(buf + (unsigned long )ret, len - ret, " via {%u,%u}",
                              p_ptr->conn_type, p_ptr->conn_instance);
#line 602
      ret = ret + tmp___8;
      }
    } else {

    }
  } else
#line 605
  if (p_ptr->published != 0) {
    {
#line 606
    tmp___9 = tipc_snprintf(buf + (unsigned long )ret, len - ret, " bound to");
#line 606
    ret = ret + tmp___9;
#line 607
    __mptr = (struct list_head  const  *)p_ptr->publications.next;
#line 607
    publ = (struct publication *)((char *)__mptr + 0xffffffffffffffa8UL);
    }
#line 607
    goto ldv_40948;
    ldv_40947: ;
#line 608
    if (publ->lower == publ->upper) {
      {
#line 609
      tmp___10 = tipc_snprintf(buf + (unsigned long )ret, len - ret, " {%u,%u}", publ->type,
                               publ->lower);
#line 609
      ret = ret + tmp___10;
      }
    } else {
      {
#line 613
      tmp___11 = tipc_snprintf(buf + (unsigned long )ret, len - ret, " {%u,%u,%u}",
                               publ->type, publ->lower, publ->upper);
#line 613
      ret = ret + tmp___11;
      }
    }
#line 607
    __mptr___0 = (struct list_head  const  *)publ->pport_list.next;
#line 607
    publ = (struct publication *)((char *)__mptr___0 + 0xffffffffffffffa8UL);
    ldv_40948: ;
#line 607
    if ((unsigned long )(& publ->pport_list) != (unsigned long )(& p_ptr->publications)) {
#line 609
      goto ldv_40947;
    } else {

    }

  } else {

  }
  {
#line 618
  tmp___12 = tipc_snprintf(buf + (unsigned long )ret, len - ret, "\n");
#line 618
  ret = ret + tmp___12;
  }
#line 619
  return (ret);
}
}
#line 622 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
struct sk_buff *tipc_port_get_ports(void) 
{ 
  struct sk_buff *buf ;
  struct tlv_desc *rep_tlv ;
  char *pb ;
  int pb_len ;
  struct tipc_port *p_ptr ;
  int str_len ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 629
  str_len = 0;
#line 631
  buf = tipc_cfg_reply_alloc(32772);
  }
#line 632
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 633
    return ((struct sk_buff *)0);
  } else {

  }
  {
#line 634
  rep_tlv = (struct tlv_desc *)buf->data;
#line 635
  pb = (char *)rep_tlv + 4UL;
#line 636
  pb_len = 32768;
#line 638
  ldv_spin_lock_bh_61___1(& tipc_port_list_lock);
#line 639
  __mptr = (struct list_head  const  *)ports.next;
#line 639
  p_ptr = (struct tipc_port *)((char *)__mptr + 0xffffffffffffff90UL);
  }
#line 639
  goto ldv_40964;
  ldv_40963: 
  {
#line 640
  ldv_spin_lock_bh_64___0(p_ptr->lock);
#line 641
  tmp = port_print(p_ptr, pb, pb_len, 0);
#line 641
  str_len = str_len + tmp;
#line 642
  ldv_spin_unlock_bh_60___0(p_ptr->lock);
#line 639
  __mptr___0 = (struct list_head  const  *)p_ptr->port_list.next;
#line 639
  p_ptr = (struct tipc_port *)((char *)__mptr___0 + 0xffffffffffffff90UL);
  }
  ldv_40964: ;
#line 639
  if ((unsigned long )(& p_ptr->port_list) != (unsigned long )(& ports)) {
#line 641
    goto ldv_40963;
  } else {

  }
  {
#line 644
  ldv_spin_unlock_bh_62___1(& tipc_port_list_lock);
#line 645
  str_len = str_len + 1;
#line 646
  skb_put(buf, ((unsigned int )str_len + 7U) & 4294967292U);
#line 647
  TLV_SET((void *)rep_tlv, 5, (void *)0, (int )((__u16 )str_len));
  }
#line 649
  return (buf);
}
}
#line 652 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
void tipc_port_reinit(void) 
{ 
  struct tipc_port *p_ptr ;
  struct tipc_msg *msg ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 657
  ldv_spin_lock_bh_61___1(& tipc_port_list_lock);
#line 658
  __mptr = (struct list_head  const  *)ports.next;
#line 658
  p_ptr = (struct tipc_port *)((char *)__mptr + 0xffffffffffffff90UL);
  }
#line 658
  goto ldv_40976;
  ldv_40975: 
  {
#line 659
  msg = & p_ptr->phdr;
#line 660
  msg_set_prevnode(msg, tipc_own_addr);
#line 661
  msg_set_orignode(msg, tipc_own_addr);
#line 658
  __mptr___0 = (struct list_head  const  *)p_ptr->port_list.next;
#line 658
  p_ptr = (struct tipc_port *)((char *)__mptr___0 + 0xffffffffffffff90UL);
  }
  ldv_40976: ;
#line 658
  if ((unsigned long )(& p_ptr->port_list) != (unsigned long )(& ports)) {
#line 660
    goto ldv_40975;
  } else {

  }
  {
#line 663
  ldv_spin_unlock_bh_62___1(& tipc_port_list_lock);
  }
#line 664
  return;
}
}
#line 666 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
void tipc_acknowledge(u32 ref , u32 ack ) 
{ 
  struct tipc_port *p_ptr ;
  struct sk_buff *buf ;

  {
  {
#line 669
  buf = (struct sk_buff *)0;
#line 671
  p_ptr = tipc_port_lock(ref);
  }
#line 672
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 673
    return;
  } else {

  }
#line 674
  if (p_ptr->connected != 0) {
    {
#line 675
    p_ptr->conn_unacked = p_ptr->conn_unacked - ack;
#line 676
    buf = port_build_proto_msg(p_ptr, 2U, ack);
    }
  } else {

  }
  {
#line 678
  tipc_port_unlock___0(p_ptr);
#line 679
  tipc_net_route_msg(buf);
  }
#line 680
  return;
}
}
#line 682 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_portimportance(u32 ref , unsigned int *importance ) 
{ 
  struct tipc_port *p_ptr ;

  {
  {
#line 686
  p_ptr = tipc_port_lock(ref);
  }
#line 687
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 688
    return (-22);
  } else {

  }
  {
#line 689
  *importance = msg_user(& p_ptr->phdr);
#line 690
  tipc_port_unlock___0(p_ptr);
  }
#line 691
  return (0);
}
}
#line 694 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_set_portimportance(u32 ref , unsigned int imp ) 
{ 
  struct tipc_port *p_ptr ;

  {
#line 698
  if (imp > 3U) {
#line 699
    return (-22);
  } else {

  }
  {
#line 701
  p_ptr = tipc_port_lock(ref);
  }
#line 702
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 703
    return (-22);
  } else {

  }
  {
#line 704
  msg_set_importance(& p_ptr->phdr, imp);
#line 705
  tipc_port_unlock___0(p_ptr);
  }
#line 706
  return (0);
}
}
#line 710 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_publish(u32 ref , unsigned int scope , struct tipc_name_seq  const  *seq ) 
{ 
  struct tipc_port *p_ptr ;
  struct publication *publ ;
  u32 key ;
  int res ;

  {
  {
#line 715
  res = -22;
#line 717
  p_ptr = tipc_port_lock(ref);
  }
#line 718
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 719
    return (-22);
  } else {

  }
#line 721
  if (p_ptr->connected != 0) {
#line 722
    goto exit;
  } else {

  }
#line 723
  key = (ref + p_ptr->pub_count) + 1U;
#line 724
  if (key == ref) {
#line 725
    res = -98;
#line 726
    goto exit;
  } else {

  }
  {
#line 728
  publ = tipc_nametbl_publish(seq->type, seq->lower, seq->upper, scope, p_ptr->ref,
                              key);
  }
#line 730
  if ((unsigned long )publ != (unsigned long )((struct publication *)0)) {
    {
#line 731
    list_add(& publ->pport_list, & p_ptr->publications);
#line 732
    p_ptr->pub_count = p_ptr->pub_count + 1U;
#line 733
    p_ptr->published = 1;
#line 734
    res = 0;
    }
  } else {

  }
  exit: 
  {
#line 737
  tipc_port_unlock___0(p_ptr);
  }
#line 738
  return (res);
}
}
#line 741 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_withdraw(u32 ref , unsigned int scope , struct tipc_name_seq  const  *seq ) 
{ 
  struct tipc_port *p_ptr ;
  struct publication *publ ;
  struct publication *tpubl ;
  int res ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;
  int tmp ;

  {
  {
#line 746
  res = -22;
#line 748
  p_ptr = tipc_port_lock(ref);
  }
#line 749
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 750
    return (-22);
  } else {

  }
#line 751
  if ((unsigned long )seq == (unsigned long )((struct tipc_name_seq  const  *)0)) {
#line 752
    __mptr = (struct list_head  const  *)p_ptr->publications.next;
#line 752
    publ = (struct publication *)((char *)__mptr + 0xffffffffffffffa8UL);
#line 752
    __mptr___0 = (struct list_head  const  *)publ->pport_list.next;
#line 752
    tpubl = (struct publication *)((char *)__mptr___0 + 0xffffffffffffffa8UL);
#line 752
    goto ldv_41020;
    ldv_41019: 
    {
#line 754
    tipc_nametbl_withdraw(publ->type, publ->lower, publ->ref, publ->key);
#line 752
    publ = tpubl;
#line 752
    __mptr___1 = (struct list_head  const  *)tpubl->pport_list.next;
#line 752
    tpubl = (struct publication *)((char *)__mptr___1 + 0xffffffffffffffa8UL);
    }
    ldv_41020: ;
#line 752
    if ((unsigned long )(& publ->pport_list) != (unsigned long )(& p_ptr->publications)) {
#line 754
      goto ldv_41019;
    } else {

    }
#line 757
    res = 0;
  } else {
#line 759
    __mptr___2 = (struct list_head  const  *)p_ptr->publications.next;
#line 759
    publ = (struct publication *)((char *)__mptr___2 + 0xffffffffffffffa8UL);
#line 759
    __mptr___3 = (struct list_head  const  *)publ->pport_list.next;
#line 759
    tpubl = (struct publication *)((char *)__mptr___3 + 0xffffffffffffffa8UL);
#line 759
    goto ldv_41031;
    ldv_41030: ;
#line 761
    if (publ->scope != scope) {
#line 762
      goto ldv_41028;
    } else {

    }
#line 763
    if (publ->type != (u32 )seq->type) {
#line 764
      goto ldv_41028;
    } else {

    }
#line 765
    if (publ->lower != (u32 )seq->lower) {
#line 766
      goto ldv_41028;
    } else {

    }
#line 767
    if (publ->upper != (u32 )seq->upper) {
#line 768
      goto ldv_41029;
    } else {

    }
    {
#line 769
    tipc_nametbl_withdraw(publ->type, publ->lower, publ->ref, publ->key);
#line 771
    res = 0;
    }
#line 772
    goto ldv_41029;
    ldv_41028: 
#line 759
    publ = tpubl;
#line 759
    __mptr___4 = (struct list_head  const  *)tpubl->pport_list.next;
#line 759
    tpubl = (struct publication *)((char *)__mptr___4 + 0xffffffffffffffa8UL);
    ldv_41031: ;
#line 759
    if ((unsigned long )(& publ->pport_list) != (unsigned long )(& p_ptr->publications)) {
#line 761
      goto ldv_41030;
    } else {

    }
    ldv_41029: ;
  }
  {
#line 775
  tmp = list_empty((struct list_head  const  *)(& p_ptr->publications));
  }
#line 775
  if (tmp != 0) {
#line 776
    p_ptr->published = 0;
  } else {

  }
  {
#line 777
  tipc_port_unlock___0(p_ptr);
  }
#line 778
  return (res);
}
}
#line 781 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_connect(u32 ref , struct tipc_portid  const  *peer ) 
{ 
  struct tipc_port *p_ptr ;
  int res ;

  {
  {
#line 786
  p_ptr = tipc_port_lock(ref);
  }
#line 787
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 788
    return (-22);
  } else {

  }
  {
#line 789
  res = __tipc_connect(ref, p_ptr, peer);
#line 790
  tipc_port_unlock___0(p_ptr);
  }
#line 791
  return (res);
}
}
#line 799 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int __tipc_connect(u32 ref , struct tipc_port *p_ptr , struct tipc_portid  const  *peer ) 
{ 
  struct tipc_msg *msg ;
  int res ;

  {
#line 803
  res = -22;
#line 805
  if (p_ptr->published != 0 || p_ptr->connected != 0) {
#line 806
    goto exit;
  } else {

  }
#line 807
  if ((unsigned int )peer->ref == 0U) {
#line 808
    goto exit;
  } else {

  }
  {
#line 810
  msg = & p_ptr->phdr;
#line 811
  msg_set_destnode(msg, peer->node);
#line 812
  msg_set_mc_netid(msg, peer->ref);
#line 813
  msg_set_type(msg, 0U);
#line 814
  msg_set_lookup_scope(msg, 0U);
#line 815
  msg_set_hdr_sz(msg, 24U);
#line 817
  p_ptr->probing_interval = 3600000U;
#line 818
  p_ptr->probing_state = 0U;
#line 819
  p_ptr->connected = 1;
#line 820
  k_start_timer(& p_ptr->timer, (unsigned long )p_ptr->probing_interval);
#line 822
  tipc_nodesub_subscribe(& p_ptr->subscription, peer->node, (void *)((unsigned long )ref),
                         (void (*)(void * ))(& port_handle_node_down));
#line 825
  res = 0;
  }
  exit: 
  {
#line 827
  p_ptr->max_pkt = tipc_link_get_max_pkt(peer->node, ref);
  }
#line 828
  return (res);
}
}
#line 836 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int __tipc_disconnect(struct tipc_port *tp_ptr ) 
{ 
  int res ;

  {
#line 840
  if (tp_ptr->connected != 0) {
    {
#line 841
    tp_ptr->connected = 0;
#line 843
    tipc_nodesub_unsubscribe(& tp_ptr->subscription);
#line 844
    res = 0;
    }
  } else {
#line 846
    res = -107;
  }
#line 848
  return (res);
}
}
#line 855 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_disconnect(u32 ref ) 
{ 
  struct tipc_port *p_ptr ;
  int res ;

  {
  {
#line 860
  p_ptr = tipc_port_lock(ref);
  }
#line 861
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 862
    return (-22);
  } else {

  }
  {
#line 863
  res = __tipc_disconnect(p_ptr);
#line 864
  tipc_port_unlock___0(p_ptr);
  }
#line 865
  return (res);
}
}
#line 871 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_shutdown(u32 ref ) 
{ 
  struct tipc_port *p_ptr ;
  struct sk_buff *buf ;
  int tmp ;

  {
  {
#line 874
  buf = (struct sk_buff *)0;
#line 876
  p_ptr = tipc_port_lock(ref);
  }
#line 877
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 878
    return (-22);
  } else {

  }
  {
#line 880
  buf = port_build_peer_abort_msg(p_ptr, 5U);
#line 881
  tipc_port_unlock___0(p_ptr);
#line 882
  tipc_net_route_msg(buf);
#line 883
  tmp = tipc_disconnect(ref);
  }
#line 883
  return (tmp);
}
}
#line 889 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_port_recv_msg(struct sk_buff *buf ) 
{ 
  struct tipc_port *p_ptr ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  u32 destport ;
  u32 tmp___0 ;
  u32 dsz ;
  u32 tmp___1 ;
  u32 err ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;

  {
  {
#line 892
  tmp = buf_msg(buf);
#line 892
  msg = tmp;
#line 893
  tmp___0 = msg_mc_netid(msg);
#line 893
  destport = tmp___0;
#line 894
  tmp___1 = msg_data_sz(msg);
#line 894
  dsz = tmp___1;
#line 898
  tmp___2 = __builtin_expect(destport == 0U, 0L);
  }
#line 898
  if (tmp___2 != 0L) {
    {
#line 899
    tipc_net_route_msg(buf);
    }
#line 900
    return ((int )dsz);
  } else {

  }
  {
#line 904
  p_ptr = tipc_port_lock(destport);
#line 905
  tmp___4 = __builtin_expect((unsigned long )p_ptr != (unsigned long )((struct tipc_port *)0),
                             1L);
  }
#line 905
  if (tmp___4 != 0L) {
    {
#line 906
    err = (*(p_ptr->dispatcher))(p_ptr, buf);
#line 907
    tipc_port_unlock___0(p_ptr);
#line 908
    tmp___3 = __builtin_expect(err == 0U, 1L);
    }
#line 908
    if (tmp___3 != 0L) {
#line 909
      return ((int )dsz);
    } else {

    }
  } else {
#line 911
    err = 2U;
  }
  {
#line 914
  tmp___5 = tipc_reject_msg(buf, err);
  }
#line 914
  return (tmp___5);
}
}
#line 921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
static int tipc_port_recv_sections(struct tipc_port *sender , unsigned int num_sect ,
                                   struct iovec  const  *msg_sect , unsigned int total_len ) 
{ 
  struct sk_buff *buf ;
  int res ;
  long tmp ;

  {
  {
#line 928
  res = tipc_msg_build(& sender->phdr, msg_sect, num_sect, total_len, 66060, & buf);
#line 930
  tmp = __builtin_expect((unsigned long )buf != (unsigned long )((struct sk_buff *)0),
                         1L);
  }
#line 930
  if (tmp != 0L) {
    {
#line 931
    tipc_port_recv_msg(buf);
    }
  } else {

  }
#line 932
  return (res);
}
}
#line 938 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_send(u32 ref , unsigned int num_sect , struct iovec  const  *msg_sect , unsigned int total_len ) 
{ 
  struct tipc_port *p_ptr ;
  u32 destnode ;
  int res ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 945
  p_ptr = tipc_port_deref(ref);
  }
#line 946
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0) || p_ptr->connected == 0) {
#line 947
    return (-22);
  } else {

  }
  {
#line 949
  p_ptr->congested = 1U;
#line 950
  tmp___2 = tipc_port_congested(p_ptr);
  }
#line 950
  if (tmp___2 == 0) {
    {
#line 951
    destnode = port_peernode(p_ptr);
#line 952
    tmp = in_own_node(destnode);
#line 952
    tmp___0 = __builtin_expect(tmp == 0, 1L);
    }
#line 952
    if (tmp___0 != 0L) {
      {
#line 953
      res = tipc_link_send_sections_fast(p_ptr, msg_sect, num_sect, total_len, destnode);
      }
    } else {
      {
#line 956
      res = tipc_port_recv_sections(p_ptr, num_sect, msg_sect, total_len);
      }
    }
    {
#line 959
    tmp___1 = __builtin_expect(res != -11, 1L);
    }
#line 959
    if (tmp___1 != 0L) {
#line 960
      p_ptr->congested = 0U;
#line 961
      if (res > 0) {
#line 962
        p_ptr->sent = p_ptr->sent + 1U;
      } else {

      }
#line 963
      return (res);
    } else {

    }
  } else {

  }
  {
#line 966
  tmp___3 = port_unreliable(p_ptr);
  }
#line 966
  if (tmp___3 != 0) {
#line 967
    p_ptr->congested = 0U;
#line 968
    return ((int )total_len);
  } else {

  }
#line 970
  return (-11);
}
}
#line 976 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_send2name(u32 ref , struct tipc_name  const  *name , unsigned int domain ,
                   unsigned int num_sect , struct iovec  const  *msg_sect , unsigned int total_len ) 
{ 
  struct tipc_port *p_ptr ;
  struct tipc_msg *msg ;
  u32 destnode ;
  u32 destport ;
  int res ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;

  {
  {
#line 982
  destnode = domain;
#line 986
  p_ptr = tipc_port_deref(ref);
  }
#line 987
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0) || p_ptr->connected != 0) {
#line 988
    return (-22);
  } else {

  }
  {
#line 990
  msg = & p_ptr->phdr;
#line 991
  msg_set_type(msg, 2U);
#line 992
  msg_set_hdr_sz(msg, 40U);
#line 993
  msg_set_nametype(msg, name->type);
#line 994
  msg_set_nameinst(msg, name->instance);
#line 995
  tmp = tipc_addr_scope(domain);
#line 995
  msg_set_lookup_scope(msg, (u32 )tmp);
#line 996
  destport = tipc_nametbl_translate(name->type, name->instance, & destnode);
#line 997
  msg_set_destnode(msg, destnode);
#line 998
  msg_set_mc_netid(msg, destport);
#line 1000
  tmp___4 = __builtin_expect(destport != 0U, 1L);
  }
#line 1000
  if (tmp___4 != 0L) {
#line 1000
    goto _L;
  } else {
    {
#line 1000
    tmp___5 = __builtin_expect(destnode != 0U, 1L);
    }
#line 1000
    if (tmp___5 != 0L) {
      _L: /* CIL Label */ 
      {
#line 1001
      tmp___0 = in_own_node(destnode);
#line 1001
      tmp___1 = __builtin_expect(tmp___0 != 0, 1L);
      }
#line 1001
      if (tmp___1 != 0L) {
        {
#line 1002
        res = tipc_port_recv_sections(p_ptr, num_sect, msg_sect, total_len);
        }
      } else
#line 1004
      if (tipc_own_addr != 0U) {
        {
#line 1005
        res = tipc_link_send_sections_fast(p_ptr, msg_sect, num_sect, total_len, destnode);
        }
      } else {
        {
#line 1009
        res = tipc_port_reject_sections(p_ptr, msg, msg_sect, num_sect, total_len,
                                        3);
        }
      }
      {
#line 1012
      tmp___2 = __builtin_expect(res != -11, 1L);
      }
#line 1012
      if (tmp___2 != 0L) {
#line 1013
        if (res > 0) {
#line 1014
          p_ptr->sent = p_ptr->sent + 1U;
        } else {

        }
#line 1015
        return (res);
      } else {

      }
      {
#line 1017
      tmp___3 = port_unreliable(p_ptr);
      }
#line 1017
      if (tmp___3 != 0) {
#line 1018
        return ((int )total_len);
      } else {

      }
#line 1020
      return (-11);
    } else {

    }
  }
  {
#line 1022
  tmp___6 = tipc_port_reject_sections(p_ptr, msg, msg_sect, num_sect, total_len, 1);
  }
#line 1022
  return (tmp___6);
}
}
#line 1029 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/port.c"
int tipc_send2port(u32 ref , struct tipc_portid  const  *dest , unsigned int num_sect ,
                   struct iovec  const  *msg_sect , unsigned int total_len ) 
{ 
  struct tipc_port *p_ptr ;
  struct tipc_msg *msg ;
  int res ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1037
  p_ptr = tipc_port_deref(ref);
  }
#line 1038
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0) || p_ptr->connected != 0) {
#line 1039
    return (-22);
  } else {

  }
  {
#line 1041
  msg = & p_ptr->phdr;
#line 1042
  msg_set_type(msg, 3U);
#line 1043
  msg_set_lookup_scope(msg, 0U);
#line 1044
  msg_set_destnode(msg, dest->node);
#line 1045
  msg_set_mc_netid(msg, dest->ref);
#line 1046
  msg_set_hdr_sz(msg, 32U);
#line 1048
  tmp = in_own_node(dest->node);
  }
#line 1048
  if (tmp != 0) {
    {
#line 1049
    res = tipc_port_recv_sections(p_ptr, num_sect, msg_sect, total_len);
    }
  } else
#line 1051
  if (tipc_own_addr != 0U) {
    {
#line 1052
    res = tipc_link_send_sections_fast(p_ptr, msg_sect, num_sect, total_len, dest->node);
    }
  } else {
    {
#line 1055
    res = tipc_port_reject_sections(p_ptr, msg, msg_sect, num_sect, total_len, 3);
    }
  }
  {
#line 1057
  tmp___0 = __builtin_expect(res != -11, 1L);
  }
#line 1057
  if (tmp___0 != 0L) {
#line 1058
    if (res > 0) {
#line 1059
      p_ptr->sent = p_ptr->sent + 1U;
    } else {

    }
#line 1060
    return (res);
  } else {

  }
  {
#line 1062
  tmp___1 = port_unreliable(p_ptr);
  }
#line 1062
  if (tmp___1 != 0) {
#line 1063
    return ((int )total_len);
  } else {

  }
#line 1065
  return (-11);
}
}
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_ref.c.aux"
void ldv_spin_lock_lock_of_reference(void) ;
#line 118
void ldv_spin_unlock_lock_of_reference(void) ;
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_58___6(spinlock_t *lock ) ;
#line 372
__inline static void ldv_spin_lock_bh_58___6(spinlock_t *lock ) ;
#line 416
__inline static void ldv_spin_unlock_bh_60___3(spinlock_t *lock ) ;
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/vmalloc.h"
extern void *vzalloc(unsigned long  ) ;
#line 79
extern void vfree(void const   * ) ;
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
static struct ref_table tipc_ref_table  ;
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
static rwlock_t ref_table_lock  =    {{4294967296LL}, 3736018669U, 4294967295U, (void *)-1, {0, {0, 0}, "ref_table_lock",
                                                           0, 0UL}};
#line 97 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
int tipc_ref_table_init(u32 requested_size , u32 start ) 
{ 
  struct reference *table___0 ;
  u32 actual_size ;
  void *tmp ;

  {
#line 104
  requested_size = requested_size + 1U;
#line 105
  actual_size = 16U;
#line 105
  goto ldv_39627;
  ldv_39626: 
#line 105
  actual_size = actual_size << 1;
  ldv_39627: ;
#line 105
  if (actual_size < requested_size) {
#line 107
    goto ldv_39626;
  } else {

  }
  {
#line 109
  tmp = vzalloc((unsigned long )actual_size * 88UL);
#line 109
  table___0 = (struct reference *)tmp;
  }
#line 110
  if ((unsigned long )table___0 == (unsigned long )((struct reference *)0)) {
#line 111
    return (-12);
  } else {

  }
#line 113
  tipc_ref_table.entries = table___0;
#line 114
  tipc_ref_table.capacity = requested_size;
#line 115
  tipc_ref_table.init_point = 1U;
#line 116
  tipc_ref_table.first_free = 0U;
#line 117
  tipc_ref_table.last_free = 0U;
#line 118
  tipc_ref_table.index_mask = actual_size - 1U;
#line 119
  tipc_ref_table.start_mask = start & ~ tipc_ref_table.index_mask;
#line 121
  return (0);
}
}
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
void tipc_ref_table_stop(void) 
{ 


  {
#line 129
  if ((unsigned long )tipc_ref_table.entries == (unsigned long )((struct reference *)0)) {
#line 130
    return;
  } else {

  }
  {
#line 132
  vfree((void const   *)tipc_ref_table.entries);
#line 133
  tipc_ref_table.entries = (struct reference *)0;
  }
#line 134
  return;
}
}
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
u32 tipc_ref_acquire(void *object , spinlock_t **lock ) 
{ 
  u32 index ;
  u32 index_mask ;
  u32 next_plus_upper ;
  u32 ref ;
  struct reference *entry ;
  u32 tmp ;
  struct lock_class_key __key ;

  {
#line 153
  entry = (struct reference *)0;
#line 155
  if ((unsigned long )object == (unsigned long )((void *)0)) {
    {
#line 156
    printk("\vtipc: Attempt to acquire ref. to non-existent obj\n");
    }
#line 157
    return (0U);
  } else {

  }
#line 159
  if ((unsigned long )tipc_ref_table.entries == (unsigned long )((struct reference *)0)) {
    {
#line 160
    printk("\vtipc: Ref. table not found in acquisition attempt\n");
    }
#line 161
    return (0U);
  } else {

  }
  {
#line 165
  _raw_write_lock_bh(& ref_table_lock);
  }
#line 166
  if (tipc_ref_table.first_free != 0U) {
#line 167
    index = tipc_ref_table.first_free;
#line 168
    entry = tipc_ref_table.entries + (unsigned long )index;
#line 169
    index_mask = tipc_ref_table.index_mask;
#line 170
    next_plus_upper = entry->ref;
#line 171
    tipc_ref_table.first_free = next_plus_upper & index_mask;
#line 172
    ref = (next_plus_upper & ~ index_mask) + index;
  } else
#line 173
  if (tipc_ref_table.init_point < tipc_ref_table.capacity) {
    {
#line 174
    tmp = tipc_ref_table.init_point;
#line 174
    tipc_ref_table.init_point = tipc_ref_table.init_point + 1U;
#line 174
    index = tmp;
#line 175
    entry = tipc_ref_table.entries + (unsigned long )index;
#line 176
    spinlock_check(& entry->lock);
#line 176
    __raw_spin_lock_init(& entry->lock.__annonCompField19.rlock, "&(&entry->lock)->rlock",
                         & __key);
#line 177
    ref = tipc_ref_table.start_mask + index;
    }
  } else {
#line 179
    ref = 0U;
  }
  {
#line 181
  _raw_write_unlock_bh(& ref_table_lock);
  }
#line 187
  if ((unsigned long )entry != (unsigned long )((struct reference *)0)) {
    {
#line 188
    ldv_spin_lock_bh_58___6(& entry->lock);
#line 189
    entry->ref = ref;
#line 190
    entry->object = object;
#line 191
    *lock = & entry->lock;
    }
  } else {

  }
#line 198
  return (ref);
}
}
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
void tipc_ref_discard(u32 ref ) 
{ 
  struct reference *entry ;
  u32 index ;
  u32 index_mask ;

  {
#line 213
  if ((unsigned long )tipc_ref_table.entries == (unsigned long )((struct reference *)0)) {
    {
#line 214
    printk("\vtipc: Ref. table not found during discard attempt\n");
    }
#line 215
    return;
  } else {

  }
  {
#line 218
  index_mask = tipc_ref_table.index_mask;
#line 219
  index = ref & index_mask;
#line 220
  entry = tipc_ref_table.entries + (unsigned long )index;
#line 222
  _raw_write_lock_bh(& ref_table_lock);
  }
#line 224
  if ((unsigned long )entry->object == (unsigned long )((void *)0)) {
    {
#line 225
    printk("\vtipc: Attempt to discard ref. to non-existent obj\n");
    }
#line 226
    goto exit;
  } else {

  }
#line 228
  if (entry->ref != ref) {
    {
#line 229
    printk("\vtipc: Attempt to discard non-existent reference\n");
    }
#line 230
    goto exit;
  } else {

  }
#line 237
  entry->object = (void *)0;
#line 238
  entry->ref = ((ref & ~ index_mask) + index_mask) + 1U;
#line 241
  if (tipc_ref_table.first_free == 0U) {
#line 242
    tipc_ref_table.first_free = index;
  } else {
#line 244
    (tipc_ref_table.entries + (unsigned long )tipc_ref_table.last_free)->ref = (tipc_ref_table.entries + (unsigned long )tipc_ref_table.last_free)->ref | index;
  }
#line 245
  tipc_ref_table.last_free = index;
  exit: 
  {
#line 248
  _raw_write_unlock_bh(& ref_table_lock);
  }
#line 249
  return;
}
}
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
void *tipc_ref_lock(u32 ref ) 
{ 
  struct reference *entry ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 256
  tmp___2 = __builtin_expect((unsigned long )tipc_ref_table.entries != (unsigned long )((struct reference *)0),
                             1L);
  }
#line 256
  if (tmp___2 != 0L) {
    {
#line 259
    entry = tipc_ref_table.entries + (unsigned long )(ref & tipc_ref_table.index_mask);
#line 261
    tmp___1 = __builtin_expect(entry->ref != 0U, 1L);
    }
#line 261
    if (tmp___1 != 0L) {
      {
#line 262
      ldv_spin_lock_bh_58___6(& entry->lock);
#line 263
      tmp = __builtin_expect(entry->ref == ref, 1L);
      }
#line 263
      if (tmp != 0L) {
        {
#line 263
        tmp___0 = __builtin_expect((unsigned long )entry->object != (unsigned long )((void *)0),
                                   1L);
        }
#line 263
        if (tmp___0 != 0L) {
#line 264
          return (entry->object);
        } else {

        }
      } else {

      }
      {
#line 265
      ldv_spin_unlock_bh_60___3(& entry->lock);
      }
    } else {

    }
  } else {

  }
#line 268
  return ((void *)0);
}
}
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ref.c"
void *tipc_ref_deref(u32 ref ) 
{ 
  struct reference *entry ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 277
  tmp___0 = __builtin_expect((unsigned long )tipc_ref_table.entries != (unsigned long )((struct reference *)0),
                             1L);
  }
#line 277
  if (tmp___0 != 0L) {
    {
#line 280
    entry = tipc_ref_table.entries + (unsigned long )(ref & tipc_ref_table.index_mask);
#line 282
    tmp = __builtin_expect(entry->ref == ref, 1L);
    }
#line 282
    if (tmp != 0L) {
#line 283
      return (entry->object);
    } else {

    }
  } else {

  }
#line 285
  return ((void *)0);
}
}
#line 773 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_ref.c.aux"
__inline static void ldv_spin_lock_bh_58___6(spinlock_t *lock ) 
{ 


  {
  {
#line 776
  ldv_spin_lock_lock_of_reference();
#line 778
  spin_lock_bh(lock);
  }
#line 779
  return;
}
}
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_ref.c.aux"
__inline static void ldv_spin_unlock_bh_60___3(spinlock_t *lock ) 
{ 


  {
  {
#line 794
  ldv_spin_unlock_lock_of_reference();
#line 796
  spin_unlock_bh(lock);
  }
#line 797
  return;
}
}
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(long nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 336
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 341
  return (oldbit);
}
}
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
  {
#line 14
  if (8UL == 1UL) {
#line 14
    goto case_1;
  } else {

  }
#line 14
  if (8UL == 2UL) {
#line 14
    goto case_2;
  } else {

  }
#line 14
  if (8UL == 4UL) {
#line 14
    goto case_4;
  } else {

  }
#line 14
  if (8UL == 8UL) {
#line 14
    goto case_8;
  } else {

  }
#line 14
  goto switch_default;
  case_1: /* CIL Label */ 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2911;
  case_2: /* CIL Label */ 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2911;
  case_4: /* CIL Label */ 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2911;
  case_8: /* CIL Label */ 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2911;
  switch_default: /* CIL Label */ 
  {
#line 14
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_2911: ;
#line 14
  return (pfo_ret__);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/paravirt.h"
extern int ( /* missing proto */  __builtin_unreachable)() ;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 333 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 337
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 342
extern int lock_is_held(struct lockdep_map * ) ;
#line 532
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_spin_lock_slock_of_NOT_ARG_SIGN(void) ;
#line 246
void ldv_spin_unlock_slock_of_NOT_ARG_SIGN(void) ;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_int_negative(void) ;
#line 203 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
  {
#line 208
  if (8UL == 1UL) {
#line 208
    goto case_1;
  } else {

  }
#line 208
  if (8UL == 2UL) {
#line 208
    goto case_2;
  } else {

  }
#line 208
  if (8UL == 4UL) {
#line 208
    goto case_4;
  } else {

  }
#line 208
  if (8UL == 8UL) {
#line 208
    goto case_8;
  } else {

  }
#line 208
  goto switch_default;
  case_1: /* CIL Label */ 
#line 208
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 208
  goto ldv_6637;
  case_2: /* CIL Label */ 
#line 208
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 208
  goto ldv_6637;
  case_4: /* CIL Label */ 
#line 208
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 208
  goto ldv_6637;
  case_8: /* CIL Label */ 
#line 208
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 208
  goto ldv_6637;
  switch_default: /* CIL Label */ 
  {
#line 208
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6637: 
#line 208
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 210
  return (ti);
}
}
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
  {
#line 93
  tmp___0 = variable_test_bit((long )flag, (unsigned long const volatile   *)(& ti->flags));
  }
#line 93
  return (tmp___0);
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
  {
#line 293
  _raw_spin_lock(& lock->__annonCompField19.rlock);
  }
#line 294
  return;
}
}
#line 355
__inline static void ldv_spin_lock_77(spinlock_t *lock ) ;
#line 339 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
  {
#line 341
  _raw_spin_unlock(& lock->__annonCompField19.rlock);
  }
#line 342
  return;
}
}
#line 403
__inline static void ldv_spin_unlock_78(spinlock_t *lock ) ;
#line 436
__inline static void ldv_spin_unlock_bh_60___0(spinlock_t *lock ) ;
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/wait.h"
__inline static int waitqueue_active(wait_queue_head_t *q ) 
{ 
  int tmp ;

  {
  {
#line 102
  tmp = list_empty((struct list_head  const  *)(& q->task_list));
  }
#line 102
  return (tmp == 0);
}
}
#line 143
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 145
extern void __wake_up_sync_key(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 887
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 889
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 892
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 
  struct thread_info *tmp ;

  {
  {
#line 198
  tmp = current_thread_info();
#line 198
  tmp->preempt_count = tmp->preempt_count + 1;
#line 198
  __asm__  volatile   ("": : : "memory");
  }
#line 199
  return;
}
}
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void) 
{ 
  struct thread_info *tmp ;

  {
  {
#line 203
  __asm__  volatile   ("": : : "memory");
#line 203
  tmp = current_thread_info();
#line 203
  tmp->preempt_count = tmp->preempt_count + -1;
#line 203
  __asm__  volatile   ("": : : "memory");
  }
#line 204
  return;
}
}
#line 301
extern int rcu_is_cpu_idle(void) ;
#line 305
extern bool rcu_lockdep_current_cpu_online(void) ;
#line 315 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
  {
#line 317
  lock_acquire(map, 0U, 0, 2, 1, (struct lockdep_map *)0, (unsigned long )((void *)0));
  }
#line 319
  return;
}
}
#line 320 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
  {
#line 322
  lock_release(map, 1, (unsigned long )((void *)0));
  }
#line 324
  return;
}
}
#line 325
extern struct lockdep_map rcu_lock_map ;
#line 328
extern int debug_lockdep_rcu_enabled(void) ;
#line 350 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
__inline static int rcu_read_lock_held(void) 
{ 
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 352
  tmp = debug_lockdep_rcu_enabled();
  }
#line 352
  if (tmp == 0) {
#line 353
    return (1);
  } else {

  }
  {
#line 354
  tmp___0 = rcu_is_cpu_idle();
  }
#line 354
  if (tmp___0 != 0) {
#line 355
    return (0);
  } else {

  }
  {
#line 356
  tmp___1 = rcu_lockdep_current_cpu_online();
  }
#line 356
  if (tmp___1) {
#line 356
    tmp___2 = 0;
  } else {
#line 356
    tmp___2 = 1;
  }
#line 356
  if (tmp___2) {
#line 357
    return (0);
  } else {

  }
  {
#line 358
  tmp___3 = lock_is_held(& rcu_lock_map);
  }
#line 358
  return (tmp___3);
}
}
#line 365
extern int rcu_read_lock_bh_held(void) ;
#line 769 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 771
  __rcu_read_lock();
#line 773
  rcu_lock_acquire(& rcu_lock_map);
#line 774
  tmp = debug_lockdep_rcu_enabled();
  }
#line 774
  if (tmp != 0 && ! __warned) {
    {
#line 774
    tmp___0 = rcu_is_cpu_idle();
    }
#line 774
    if (tmp___0 != 0) {
      {
#line 774
      __warned = 1;
#line 774
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 775, "rcu_read_lock() used illegally while idle");
      }
    } else {

    }
  } else {

  }
#line 777
  return;
}
}
#line 793 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 795
  tmp = debug_lockdep_rcu_enabled();
  }
#line 795
  if (tmp != 0 && ! __warned) {
    {
#line 795
    tmp___0 = rcu_is_cpu_idle();
    }
#line 795
    if (tmp___0 != 0) {
      {
#line 795
      __warned = 1;
#line 795
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 796, "rcu_read_unlock() used illegally while idle");
      }
    } else {

    }
  } else {

  }
  {
#line 797
  rcu_lock_release(& rcu_lock_map);
#line 799
  __rcu_read_unlock();
  }
#line 800
  return;
}
}
#line 323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/socket.h"
extern int put_cmsg(struct msghdr * , int  , int  , int  , void * ) ;
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 302
extern void schedule(void) ;
#line 2357 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
  {
#line 2359
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
  }
#line 2359
  return (tmp);
}
}
#line 2383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  {
#line 2385
  tmp = test_tsk_thread_flag(p, 2);
#line 2385
  tmp___0 = __builtin_expect(tmp != 0, 0L);
  }
#line 2385
  return ((int )tmp___0);
}
}
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/net.h"
static int ldv_sock_register_79(struct net_proto_family  const  *ldv_func_arg1 ) ;
#line 215
static void ldv_sock_unregister_80(int ldv_func_arg1 ) ;
#line 223
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 225
extern void sock_release(struct socket * ) ;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/uaccess_64.h"
extern unsigned long _copy_to_user(void * , void const   * , unsigned int  ) ;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/uaccess_64.h"
__inline static int copy_to_user(void *dst , void const   *src , unsigned int size ) 
{ 
  unsigned long tmp ;

  {
  {
#line 74
  might_fault();
#line 76
  tmp = _copy_to_user(dst, src, size);
  }
#line 76
  return ((int )tmp);
}
}
#line 555 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static struct dst_entry *skb_dst(struct sk_buff  const  *skb ) 
{ 
  int __ret_warn_on ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 560
  if ((int )skb->_skb_refdst & 1) {
    {
#line 560
    tmp = rcu_read_lock_held();
    }
#line 560
    if (tmp == 0) {
      {
#line 560
      tmp___0 = rcu_read_lock_bh_held();
      }
#line 560
      if (tmp___0 == 0) {
#line 560
        tmp___1 = 1;
      } else {
#line 560
        tmp___1 = 0;
      }
    } else {
#line 560
      tmp___1 = 0;
    }
  } else {
#line 560
    tmp___1 = 0;
  }
  {
#line 560
  __ret_warn_on = tmp___1;
#line 560
  tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 560
  if (tmp___2 != 0L) {
    {
#line 560
    warn_slowpath_null("include/linux/skbuff.h", 562);
    }
  } else {

  }
  {
#line 560
  __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 563
  return ((struct dst_entry *)((unsigned long )skb->_skb_refdst & 0xfffffffffffffffeUL));
}
}
#line 618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static bool skb_dst_is_noref(struct sk_buff  const  *skb ) 
{ 
  struct dst_entry *tmp ;
  int tmp___0 ;

  {
#line 620
  if ((int )skb->_skb_refdst & 1) {
    {
#line 620
    tmp = skb_dst(skb);
    }
#line 620
    if ((unsigned long )tmp != (unsigned long )((struct dst_entry *)0)) {
#line 620
      tmp___0 = 1;
    } else {
#line 620
      tmp___0 = 0;
    }
  } else {
#line 620
    tmp___0 = 0;
  }
#line 620
  return ((bool )tmp___0);
}
}
#line 756 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head  const  *list ) 
{ 


  {
#line 758
  return ((unsigned long )((struct sk_buff *)list->next) == (unsigned long )((struct sk_buff *)list));
}
}
#line 984 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static struct sk_buff *skb_peek(struct sk_buff_head  const  *list_ ) 
{ 
  struct sk_buff *skb ;

  {
#line 986
  skb = list_->next;
#line 988
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)list_)) {
#line 989
    skb = (struct sk_buff *)0;
  } else {

  }
#line 990
  return (skb);
}
}
#line 1041 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static __u32 skb_queue_len(struct sk_buff_head  const  *list_ ) 
{ 


  {
#line 1043
  return ((__u32 )list_->qlen);
}
}
#line 1090 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void __skb_insert(struct sk_buff *newsk , struct sk_buff *prev , struct sk_buff *next ,
                                  struct sk_buff_head *list ) 
{ 
  struct sk_buff *tmp ;

  {
#line 1094
  newsk->next = next;
#line 1095
  newsk->prev = prev;
#line 1096
  tmp = newsk;
#line 1096
  prev->next = tmp;
#line 1096
  next->prev = tmp;
#line 1097
  list->qlen = list->qlen + 1U;
#line 1098
  return;
}
}
#line 1188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void __skb_queue_after(struct sk_buff_head *list , struct sk_buff *prev ,
                                       struct sk_buff *newsk ) 
{ 


  {
  {
#line 1192
  __skb_insert(newsk, prev, prev->next, list);
  }
#line 1193
  return;
}
}
#line 1198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void __skb_queue_before(struct sk_buff_head *list , struct sk_buff *next ,
                                        struct sk_buff *newsk ) 
{ 


  {
  {
#line 1202
  __skb_insert(newsk, next->prev, next, list);
  }
#line 1203
  return;
}
}
#line 1216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void __skb_queue_head(struct sk_buff_head *list , struct sk_buff *newsk ) 
{ 


  {
  {
#line 1219
  __skb_queue_after(list, (struct sk_buff *)list, newsk);
  }
#line 1220
  return;
}
}
#line 1233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void __skb_queue_tail(struct sk_buff_head *list , struct sk_buff *newsk ) 
{ 


  {
  {
#line 1236
  __skb_queue_before(list, (struct sk_buff *)list, newsk);
  }
#line 1237
  return;
}
}
#line 1244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void __skb_unlink(struct sk_buff *skb , struct sk_buff_head *list ) 
{ 
  struct sk_buff *next ;
  struct sk_buff *prev ;
  struct sk_buff *tmp ;

  {
#line 1248
  list->qlen = list->qlen - 1U;
#line 1249
  next = skb->next;
#line 1250
  prev = skb->prev;
#line 1251
  tmp = (struct sk_buff *)0;
#line 1251
  skb->prev = tmp;
#line 1251
  skb->next = tmp;
#line 1252
  next->prev = prev;
#line 1253
  prev->next = next;
#line 1254
  return;
}
}
#line 1265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static struct sk_buff *__skb_dequeue(struct sk_buff_head *list ) 
{ 
  struct sk_buff *skb ;
  struct sk_buff *tmp ;

  {
  {
#line 1267
  tmp = skb_peek((struct sk_buff_head  const  *)list);
#line 1267
  skb = tmp;
  }
#line 1268
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    {
#line 1269
    __skb_unlink(skb, list);
    }
  } else {

  }
#line 1270
  return (skb);
}
}
#line 1802 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void skb_orphan(struct sk_buff *skb ) 
{ 
  long tmp ;

  {
#line 1804
  if ((unsigned long )skb->destructor != (unsigned long )((void (*)(struct sk_buff * ))0)) {
    {
#line 1805
    (*(skb->destructor))(skb);
#line 1806
    skb->destructor = (void (*)(struct sk_buff * ))0;
#line 1807
    skb->sk = (struct sock *)0;
    }
  } else {
    {
#line 1809
    tmp = __builtin_expect((unsigned long )skb->sk != (unsigned long )((struct sock *)0),
                           0L);
    }
#line 1809
    if (tmp != 0L) {
      {
#line 1809
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/skbuff.h"),
                           "i" (1809), "i" (12UL));
#line 1809
      __builtin_unreachable();
      }
    } else {

    }
  }
#line 1811
  return;
}
}
#line 1838 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void __skb_queue_purge(struct sk_buff_head *list ) 
{ 
  struct sk_buff *skb ;

  {
#line 1841
  goto ldv_29673;
  ldv_29672: 
  {
#line 1842
  kfree_skb(skb);
  }
  ldv_29673: 
  {
#line 1841
  skb = __skb_dequeue(list);
  }
#line 1841
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
#line 1843
    goto ldv_29672;
  } else {

  }

#line 1848
  return;
}
}
#line 2347
extern int skb_copy_datagram_iovec(struct sk_buff  const  * , int  , struct iovec * ,
                                   int  ) ;
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/net_namespace.h"
__inline static struct net *read_pnet(struct net * const  *pnet ) 
{ 


  {
#line 255
  return ((struct net *)*pnet);
}
}
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/poll.h"
__inline static void poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                               poll_table *p ) 
{ 


  {
#line 44
  if ((unsigned long )p != (unsigned long )((poll_table *)0) && ((unsigned long )p->_qproc != (unsigned long )((void (*)(struct file * ,
                                                                                                                         wait_queue_head_t * ,
                                                                                                                         struct poll_table_struct * ))0) && (unsigned long )wait_address != (unsigned long )((wait_queue_head_t *)0))) {
    {
#line 45
    (*(p->_qproc))(filp, wait_address, p);
    }
  } else {

  }
#line 46
  return;
}
}
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/poll.h"
__inline static bool poll_does_not_wait(poll_table const   *p ) 
{ 


  {
#line 55
  return ((bool )((unsigned long )p == (unsigned long )((poll_table const   *)0) || (unsigned long )p->_qproc == (unsigned long )((void (*)(struct file * ,
                                                                                                                                            wait_queue_head_t * ,
                                                                                                                                            struct poll_table_struct * ))0)));
}
}
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/core.h"
int tipc_sock_create_local(int type , struct socket **res ) ;
#line 101
void tipc_sock_release_local(struct socket *sock ) ;
#line 102
int tipc_sock_accept_local(struct socket *sock , struct socket **newsock , int flags ) ;
#line 258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dst.h"
__inline static struct dst_entry *dst_clone(struct dst_entry *dst ) 
{ 


  {
#line 260
  if ((unsigned long )dst != (unsigned long )((struct dst_entry *)0)) {
    {
#line 261
    atomic_inc(& dst->__refcnt);
    }
  } else {

  }
#line 262
  return (dst);
}
}
#line 300 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/dst.h"
__inline static void skb_dst_force(struct sk_buff *skb ) 
{ 
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  struct dst_entry *tmp___1 ;
  bool tmp___2 ;

  {
  {
#line 302
  tmp___2 = skb_dst_is_noref((struct sk_buff  const  *)skb);
  }
#line 302
  if ((int )tmp___2) {
    {
#line 303
    tmp = rcu_read_lock_held();
#line 303
    __ret_warn_on = tmp == 0;
#line 303
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 303
    if (tmp___0 != 0L) {
      {
#line 303
      warn_slowpath_null("include/net/dst.h", 303);
      }
    } else {

    }
    {
#line 303
    __builtin_expect(__ret_warn_on != 0, 0L);
#line 304
    skb->_skb_refdst = skb->_skb_refdst & 0xfffffffffffffffeUL;
#line 305
    tmp___1 = skb_dst((struct sk_buff  const  *)skb);
#line 305
    dst_clone(tmp___1);
    }
  } else {

  }
#line 307
  return;
}
}
#line 757 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static void __sk_add_backlog(struct sock *sk , struct sk_buff *skb ) 
{ 


  {
  {
#line 760
  skb_dst_force(skb);
  }
#line 762
  if ((unsigned long )sk->sk_backlog.tail == (unsigned long )((struct sk_buff *)0)) {
#line 763
    sk->sk_backlog.head = skb;
  } else {
#line 765
    (sk->sk_backlog.tail)->next = skb;
  }
#line 767
  sk->sk_backlog.tail = skb;
#line 768
  skb->next = (struct sk_buff *)0;
#line 769
  return;
}
}
#line 776 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static bool sk_rcvqueues_full(struct sock  const  *sk , struct sk_buff  const  *skb ,
                                       unsigned int limit ) 
{ 
  unsigned int qsize ;
  int tmp ;

  {
  {
#line 779
  tmp = atomic_read(& sk->sk_backlog.rmem_alloc);
#line 779
  qsize = (unsigned int )((int )sk->sk_backlog.len + tmp);
  }
#line 781
  return (qsize > limit);
}
}
#line 785 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static int sk_add_backlog(struct sock *sk , struct sk_buff *skb , unsigned int limit ) 
{ 
  bool tmp ;

  {
  {
#line 788
  tmp = sk_rcvqueues_full((struct sock  const  *)sk, (struct sk_buff  const  *)skb,
                          limit);
  }
#line 788
  if ((int )tmp) {
#line 789
    return (-105);
  } else {

  }
  {
#line 791
  __sk_add_backlog(sk, skb);
#line 792
  sk->sk_backlog.len = (int )((unsigned int )sk->sk_backlog.len + skb->truesize);
  }
#line 793
  return (0);
}
}
#line 1039
extern int proto_register(struct proto * , int  ) ;
#line 1040
extern void proto_unregister(struct proto * ) ;
#line 1385 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static bool sk_has_account(struct sock *sk ) 
{ 


  {
#line 1388
  return ((unsigned long )(sk->__sk_common.skc_prot)->memory_allocated != (unsigned long )((atomic_long_t *)0));
}
}
#line 1425 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static void sk_mem_charge(struct sock *sk , int size ) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
  {
#line 1427
  tmp = sk_has_account(sk);
  }
#line 1427
  if (tmp) {
#line 1427
    tmp___0 = 0;
  } else {
#line 1427
    tmp___0 = 1;
  }
#line 1427
  if (tmp___0) {
#line 1428
    return;
  } else {

  }
#line 1429
  sk->sk_forward_alloc = sk->sk_forward_alloc - size;
#line 1430
  return;
}
}
#line 1486
extern void lock_sock_nested(struct sock * , int  ) ;
#line 1488 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static void lock_sock(struct sock *sk ) 
{ 


  {
  {
#line 1490
  lock_sock_nested(sk, 0);
  }
#line 1491
  return;
}
}
#line 1493
extern void release_sock(struct sock * ) ;
#line 1520
extern struct sock *sk_alloc(struct net * , int  , gfp_t  , struct proto * ) ;
#line 1523
extern void sk_free(struct sock * ) ;
#line 1536
extern void sock_rfree(struct sk_buff * ) ;
#line 1569
extern int sock_no_socketpair(struct socket * , struct socket * ) ;
#line 1571
extern int sock_no_accept(struct socket * , struct socket * , int  ) ;
#line 1577
extern int sock_no_ioctl(struct socket * , unsigned int  , unsigned long  ) ;
#line 1579
extern int sock_no_listen(struct socket * , int  ) ;
#line 1589
extern int sock_no_mmap(struct file * , struct socket * , struct vm_area_struct * ) ;
#line 1592
extern ssize_t sock_no_sendpage(struct socket * , struct page * , int  , size_t  ,
                                int  ) ;
#line 1619
extern void sock_init_data(struct socket * , struct sock * ) ;
#line 1674 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static void sock_put(struct sock *sk ) 
{ 
  int tmp ;

  {
  {
#line 1676
  tmp = atomic_dec_and_test(& sk->__sk_common.skc_refcnt);
  }
#line 1676
  if (tmp != 0) {
    {
#line 1677
    sk_free(sk);
    }
  } else {

  }
#line 1678
  return;
}
}
#line 1706
extern void __compiletime_assert_1706(void) ;
#line 1704 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static wait_queue_head_t *sk_sleep(struct sock *sk ) 
{ 
  bool __cond ;
  struct socket_wq *_________p1 ;
  bool __warned ;
  int tmp ;

  {
#line 1706
  __cond = 0;
#line 1706
  if ((int )__cond) {
    {
#line 1706
    __compiletime_assert_1706();
    }
  } else {

  }
  {
#line 1707
  _________p1 = *((struct socket_wq * volatile  *)(& sk->sk_wq));
#line 1707
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1707
  if (tmp != 0 && ! __warned) {
    {
#line 1707
    rcu_read_lock_held();
    }
  } else {

  }
#line 1707
  return (& _________p1->wait);
}
}
#line 1921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static int sk_rmem_alloc_get(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
  {
#line 1923
  tmp = atomic_read(& sk->sk_backlog.rmem_alloc);
  }
#line 1923
  return (tmp);
}
}
#line 1969 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static bool wq_has_sleeper(struct socket_wq *wq ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1976
  __asm__  volatile   ("mfence": : : "memory");
#line 1977
  if ((unsigned long )wq != (unsigned long )((struct socket_wq *)0)) {
    {
#line 1977
    tmp = waitqueue_active(& wq->wait);
    }
#line 1977
    if (tmp != 0) {
#line 1977
      tmp___0 = 1;
    } else {
#line 1977
      tmp___0 = 0;
    }
  } else {
#line 1977
    tmp___0 = 0;
  }
#line 1977
  return ((bool )tmp___0);
}
}
#line 1988 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static void sock_poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                                    poll_table *p ) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
  {
#line 1991
  tmp = poll_does_not_wait((poll_table const   *)p);
  }
#line 1991
  if (tmp) {
#line 1991
    tmp___0 = 0;
  } else {
#line 1991
    tmp___0 = 1;
  }
#line 1991
  if (tmp___0 && (unsigned long )wait_address != (unsigned long )((wait_queue_head_t *)0)) {
    {
#line 1992
    poll_wait(filp, wait_address, p);
#line 1998
    __asm__  volatile   ("mfence": : : "memory");
    }
  } else {

  }
#line 2000
  return;
}
}
#line 2024 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static void skb_set_owner_r(struct sk_buff *skb , struct sock *sk ) 
{ 


  {
  {
#line 2026
  skb_orphan(skb);
#line 2027
  skb->sk = sk;
#line 2028
  skb->destructor = & sock_rfree;
#line 2029
  atomic_add((int )skb->truesize, & sk->sk_backlog.rmem_alloc);
#line 2030
  sk_mem_charge(sk, (int )skb->truesize);
  }
#line 2031
  return;
}
}
#line 2046 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static int sock_error(struct sock *sk ) 
{ 
  int err ;
  long tmp ;
  int __ret ;

  {
  {
#line 2049
  tmp = __builtin_expect(sk->sk_err == 0, 1L);
  }
#line 2049
  if (tmp != 0L) {
#line 2050
    return (0);
  } else {

  }
#line 2051
  __ret = 0;
  {
#line 2051
  if (4UL == 1UL) {
#line 2051
    goto case_1;
  } else {

  }
#line 2051
  if (4UL == 2UL) {
#line 2051
    goto case_2;
  } else {

  }
#line 2051
  if (4UL == 4UL) {
#line 2051
    goto case_4;
  } else {

  }
#line 2051
  if (4UL == 8UL) {
#line 2051
    goto case_8;
  } else {

  }
#line 2051
  goto switch_default;
  case_1: /* CIL Label */ 
#line 2051
  __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (sk->sk_err): : "memory",
                       "cc");
#line 2051
  goto ldv_43520;
  case_2: /* CIL Label */ 
#line 2051
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (sk->sk_err): : "memory",
                       "cc");
#line 2051
  goto ldv_43520;
  case_4: /* CIL Label */ 
#line 2051
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (sk->sk_err): : "memory",
                       "cc");
#line 2051
  goto ldv_43520;
  case_8: /* CIL Label */ 
#line 2051
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (sk->sk_err): : "memory",
                       "cc");
#line 2051
  goto ldv_43520;
  switch_default: /* CIL Label */ 
  {
#line 2051
  __xchg_wrong_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_43520: 
#line 2051
  err = __ret;
#line 2052
  return (- err);
}
}
#line 2123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static long sock_rcvtimeo(struct sock  const  *sk , bool noblock ) 
{ 


  {
#line 2125
  return ((int )noblock ? 0L : (long )sk->sk_rcvtimeo);
}
}
#line 2128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static long sock_sndtimeo(struct sock  const  *sk , bool noblock ) 
{ 


  {
#line 2130
  return ((int )noblock ? 0L : (long )sk->sk_sndtimeo);
}
}
#line 2133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static int sock_rcvlowat(struct sock  const  *sk , int waitall , int len ) 
{ 
  int __min1 ;
  int __min2 ;
  int tmp ;

  {
#line 2135
  if (waitall != 0) {
#line 2135
    tmp = len;
  } else {
#line 2135
    __min1 = sk->sk_rcvlowat;
#line 2135
    __min2 = len;
#line 2135
    tmp = __min1 < __min2 ? __min1 : __min2;
  }
#line 2135
  return (tmp != 0 ? tmp != 0 : 1);
}
}
#line 2237 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/sock.h"
__inline static struct net *sock_net(struct sock  const  *sk ) 
{ 
  struct net *tmp ;

  {
  {
#line 2239
  tmp = read_pnet(& sk->__sk_common.skc_net);
  }
#line 2239
  return (tmp);
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int backlog_rcv(struct sock *sk , struct sk_buff *buf ) ;
#line 62
static u32 dispatch(struct tipc_port *tport , struct sk_buff *buf ) ;
#line 63
static void wakeupdispatch(struct tipc_port *tport ) ;
#line 64
static void tipc_data_ready(struct sock *sk , int len ) ;
#line 65
static void tipc_write_space(struct sock *sk ) ;
#line 66
static int release(struct socket *sock ) ;
#line 67
static int accept(struct socket *sock , struct socket *new_sock , int flags ) ;
#line 69
static struct proto_ops  const  packet_ops ;
#line 70
static struct proto_ops  const  stream_ops ;
#line 71
static struct proto_ops  const  msg_ops ;
#line 73
static struct proto tipc_proto ;
#line 74
static struct proto tipc_proto_kern ;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int sockets_enabled  ;
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static void advance_rx_queue(struct sock *sk ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 130
  tmp = __skb_dequeue(& sk->sk_receive_queue);
#line 130
  kfree_skb(tmp);
  }
#line 131
  return;
}
}
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static void reject_rx_queue(struct sock *sk ) 
{ 
  struct sk_buff *buf ;

  {
#line 142
  goto ldv_43685;
  ldv_43684: 
  {
#line 143
  tipc_reject_msg(buf, 2U);
  }
  ldv_43685: 
  {
#line 142
  buf = __skb_dequeue(& sk->sk_receive_queue);
  }
#line 142
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
#line 144
    goto ldv_43684;
  } else {

  }

#line 149
  return;
}
}
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int tipc_sk_create(struct net *net , struct socket *sock , int protocol , int kern ) 
{ 
  struct proto_ops  const  *ops ;
  socket_state state ;
  struct sock *sk ;
  struct tipc_port *tp_ptr ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 167
  tmp = __builtin_expect(protocol != 0, 0L);
  }
#line 167
  if (tmp != 0L) {
#line 168
    return (-93);
  } else {

  }
  {
#line 171
  if ((int )sock->type == 1) {
#line 171
    goto case_1;
  } else {

  }
#line 175
  if ((int )sock->type == 5) {
#line 175
    goto case_5;
  } else {

  }
#line 179
  if ((int )sock->type == 2) {
#line 179
    goto case_2;
  } else {

  }
#line 180
  if ((int )sock->type == 4) {
#line 180
    goto case_4;
  } else {

  }
#line 184
  goto switch_default;
  case_1: /* CIL Label */ 
#line 172
  ops = & stream_ops;
#line 173
  state = 1;
#line 174
  goto ldv_43698;
  case_5: /* CIL Label */ 
#line 176
  ops = & packet_ops;
#line 177
  state = 1;
#line 178
  goto ldv_43698;
  case_2: /* CIL Label */ ;
  case_4: /* CIL Label */ 
#line 181
  ops = & msg_ops;
#line 182
  state = 4294967294L;
#line 183
  goto ldv_43698;
  switch_default: /* CIL Label */ ;
#line 185
  return (-91);
  switch_break: /* CIL Label */ ;
  }
  ldv_43698: ;
#line 189
  if (kern == 0) {
    {
#line 190
    sk = sk_alloc(net, 30, 208U, & tipc_proto);
    }
  } else {
    {
#line 192
    sk = sk_alloc(net, 30, 208U, & tipc_proto_kern);
    }
  }
#line 194
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
#line 195
    return (-12);
  } else {

  }
  {
#line 198
  tp_ptr = tipc_createport(sk, & dispatch, & wakeupdispatch, 0U);
#line 200
  tmp___0 = __builtin_expect((unsigned long )tp_ptr == (unsigned long )((struct tipc_port *)0),
                             0L);
  }
#line 200
  if (tmp___0 != 0L) {
    {
#line 201
    sk_free(sk);
    }
#line 202
    return (-12);
  } else {

  }
  {
#line 206
  sock->ops = ops;
#line 207
  sock->state = state;
#line 209
  sock_init_data(sock, sk);
#line 210
  sk->sk_backlog_rcv = & backlog_rcv;
#line 211
  sk->sk_rcvbuf = sysctl_tipc_rmem[1];
#line 212
  sk->sk_data_ready = & tipc_data_ready;
#line 213
  sk->sk_write_space = & tipc_write_space;
#line 214
  ((struct tipc_sock *)sk)->p = tp_ptr;
#line 215
  ((struct tipc_sock *)sk)->conn_timeout = 8000U;
#line 217
  ldv_spin_unlock_bh_60___0(tp_ptr->lock);
  }
#line 219
  if ((unsigned int )sock->state == 4294967294U) {
    {
#line 220
    tipc_set_portunreturnable(tp_ptr->ref, 1U);
    }
#line 221
    if ((int )sock->type == 2) {
      {
#line 222
      tipc_set_portunreliable(tp_ptr->ref, 1U);
      }
    } else {

    }
  } else {

  }
#line 225
  return (0);
}
}
#line 239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
int tipc_sock_create_local(int type , struct socket **res ) 
{ 
  int rc ;
  struct sock *sk ;

  {
  {
#line 244
  rc = sock_create_lite(30, type, 0, res);
  }
#line 245
  if (rc < 0) {
    {
#line 246
    printk("\vtipc: Failed to create kernel socket\n");
    }
#line 247
    return (rc);
  } else {

  }
  {
#line 249
  tipc_sk_create(& init_net, *res, 0, 1);
#line 251
  sk = (*res)->sk;
  }
#line 253
  return (0);
}
}
#line 263 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
void tipc_sock_release_local(struct socket *sock ) 
{ 


  {
  {
#line 265
  release(sock);
#line 266
  sock->ops = (struct proto_ops  const  *)0;
#line 267
  sock_release(sock);
  }
#line 268
  return;
}
}
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
int tipc_sock_accept_local(struct socket *sock , struct socket **newsock , int flags ) 
{ 
  struct sock *sk ;
  int ret ;

  {
  {
#line 283
  sk = sock->sk;
#line 286
  ret = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
  }
#line 288
  if (ret < 0) {
#line 289
    return (ret);
  } else {

  }
  {
#line 291
  ret = accept(sock, *newsock, flags);
  }
#line 292
  if (ret < 0) {
    {
#line 293
    sock_release(*newsock);
    }
#line 294
    return (ret);
  } else {

  }
#line 296
  (*newsock)->ops = sock->ops;
#line 297
  return (ret);
}
}
#line 316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int release(struct socket *sock ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  struct sk_buff *buf ;
  int res ;

  {
#line 318
  sk = sock->sk;
#line 327
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
#line 328
    return (0);
  } else {

  }
  {
#line 330
  tport = ((struct tipc_sock *)sk)->p;
#line 331
  lock_sock(sk);
  }
#line 337
  goto ldv_43728;
  ldv_43727: 
  {
#line 338
  buf = __skb_dequeue(& sk->sk_receive_queue);
  }
#line 339
  if ((unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 340
    goto ldv_43726;
  } else {

  }
#line 341
  if ((unsigned long )((struct tipc_skb_cb *)(& buf->cb))->handle != (unsigned long )((void *)0)) {
    {
#line 342
    kfree_skb(buf);
    }
  } else {
#line 344
    if ((unsigned int )sock->state - 2U <= 1U) {
      {
#line 346
      sock->state = 4;
#line 347
      tipc_disconnect(tport->ref);
      }
    } else {

    }
    {
#line 349
    tipc_reject_msg(buf, 2U);
    }
  }
  ldv_43728: ;
#line 337
  if ((unsigned int )sock->state != 4U) {
#line 339
    goto ldv_43727;
  } else {

  }
  ldv_43726: 
  {
#line 357
  res = tipc_deleteport(tport->ref);
#line 360
  __skb_queue_purge(& sk->sk_receive_queue);
#line 363
  sock->state = 4;
#line 364
  release_sock(sk);
#line 366
  sock_put(sk);
#line 367
  sock->sk = (struct sock *)0;
  }
#line 369
  return (res);
}
}
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int bind(struct socket *sock , struct sockaddr *uaddr , int uaddr_len ) 
{ 
  struct sockaddr_tipc *addr ;
  u32 portref ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 389
  addr = (struct sockaddr_tipc *)uaddr;
#line 390
  portref = (((struct tipc_sock *)sock->sk)->p)->ref;
#line 392
  tmp___0 = __builtin_expect(uaddr_len == 0, 0L);
  }
#line 392
  if (tmp___0 != 0L) {
    {
#line 393
    tmp = tipc_withdraw(portref, 0U, (struct tipc_name_seq  const  *)0);
    }
#line 393
    return (tmp);
  } else {

  }
#line 395
  if ((unsigned int )uaddr_len <= 15U) {
#line 396
    return (-22);
  } else {

  }
#line 397
  if ((unsigned int )addr->family != 30U) {
#line 398
    return (-97);
  } else {

  }
#line 400
  if ((unsigned int )addr->addrtype == 2U) {
#line 401
    addr->addr.nameseq.upper = addr->addr.nameseq.lower;
  } else
#line 402
  if ((unsigned int )addr->addrtype != 1U) {
#line 403
    return (-97);
  } else {

  }
#line 405
  if ((addr->addr.nameseq.type <= 63U && addr->addr.nameseq.type != 1U) && addr->addr.nameseq.type != 0U) {
#line 408
    return (-13);
  } else {

  }
#line 410
  if ((int )addr->scope > 0) {
    {
#line 410
    tmp___1 = tipc_publish(portref, (unsigned int )addr->scope, (struct tipc_name_seq  const  *)(& addr->addr.nameseq));
#line 410
    tmp___3 = tmp___1;
    }
  } else {
    {
#line 410
    tmp___2 = tipc_withdraw(portref, (unsigned int )(- ((int )addr->scope)), (struct tipc_name_seq  const  *)(& addr->addr.nameseq));
#line 410
    tmp___3 = tmp___2;
    }
  }
#line 410
  return (tmp___3);
}
}
#line 428 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int get_name(struct socket *sock , struct sockaddr *uaddr , int *uaddr_len ,
                    int peer ) 
{ 
  struct sockaddr_tipc *addr ;
  struct tipc_sock *tsock ;

  {
  {
#line 431
  addr = (struct sockaddr_tipc *)uaddr;
#line 432
  tsock = (struct tipc_sock *)sock->sk;
#line 434
  memset((void *)addr, 0, 16UL);
  }
#line 435
  if (peer != 0) {
#line 436
    if ((unsigned int )sock->state != 3U && (peer != 2 || (unsigned int )sock->state != 4U)) {
#line 438
      return (-107);
    } else {

    }
#line 439
    addr->addr.id.ref = tsock->peer_name.ref;
#line 440
    addr->addr.id.node = tsock->peer_name.node;
  } else {
#line 442
    addr->addr.id.ref = (tsock->p)->ref;
#line 443
    addr->addr.id.node = tipc_own_addr;
  }
#line 446
  *uaddr_len = 16;
#line 447
  addr->addrtype = 3U;
#line 448
  addr->family = 30U;
#line 449
  addr->scope = 0;
#line 450
  addr->addr.name.domain = 0U;
#line 452
  return (0);
}
}
#line 495 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static unsigned int poll(struct file *file , struct socket *sock , poll_table *wait ) 
{ 
  struct sock *sk ;
  u32 mask ;
  wait_queue_head_t *tmp ;
  int tmp___0 ;

  {
  {
#line 498
  sk = sock->sk;
#line 499
  mask = 0U;
#line 501
  tmp = sk_sleep(sk);
#line 501
  sock_poll_wait(file, tmp, wait);
  }
  {
#line 504
  if ((int )sock->state == 1) {
#line 504
    goto case_1;
  } else {

  }
#line 508
  if ((int )sock->state == -2) {
#line 508
    goto case_neg_2;
  } else {

  }
#line 509
  if ((int )sock->state == 3) {
#line 509
    goto case_3;
  } else {

  }
#line 513
  if ((int )sock->state == 2) {
#line 513
    goto case_2;
  } else {

  }
#line 514
  if ((int )sock->state == -1) {
#line 514
    goto case_neg_1;
  } else {

  }
#line 518
  if ((int )sock->state == 4) {
#line 518
    goto case_4;
  } else {

  }
#line 503
  goto switch_break;
  case_1: /* CIL Label */ ;
#line 505
  if ((((struct tipc_sock *)sk)->p)->congested == 0U) {
#line 506
    mask = mask | 4U;
  } else {

  }
#line 507
  goto ldv_43752;
  case_neg_2: /* CIL Label */ ;
  case_3: /* CIL Label */ ;
#line 510
  if ((((struct tipc_sock *)sk)->p)->congested == 0U) {
#line 511
    mask = mask | 4U;
  } else {

  }
  case_2: /* CIL Label */ ;
  case_neg_1: /* CIL Label */ 
  {
#line 515
  tmp___0 = skb_queue_empty((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
  }
#line 515
  if (tmp___0 == 0) {
#line 516
    mask = mask | 65U;
  } else {

  }
#line 517
  goto ldv_43752;
  case_4: /* CIL Label */ 
#line 519
  mask = 81U;
#line 520
  goto ldv_43752;
  switch_break: /* CIL Label */ ;
  }
  ldv_43752: ;
#line 523
  return (mask);
}
}
#line 536 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int dest_name_check(struct sockaddr_tipc *dest , struct msghdr *m ) 
{ 
  struct tipc_cfg_msg_hdr hdr ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;
  __u16 tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;

  {
  {
#line 540
  tmp = __builtin_expect(dest->addr.name.name.type > 63U, 1L);
  }
#line 540
  if (tmp != 0L) {
#line 541
    return (0);
  } else {

  }
  {
#line 542
  tmp___0 = __builtin_expect(dest->addr.name.name.type == 1U, 1L);
  }
#line 542
  if (tmp___0 != 0L) {
#line 543
    return (0);
  } else {

  }
  {
#line 544
  tmp___1 = __builtin_expect(dest->addr.name.name.type != 0U, 1L);
  }
#line 544
  if (tmp___1 != 0L) {
#line 545
    return (-13);
  } else {

  }
#line 547
  if (m->msg_iovlen == 0UL || (m->msg_iov)->iov_len <= 15UL) {
#line 548
    return (-90);
  } else {

  }
  {
#line 549
  tmp___2 = copy_from_user((void *)(& hdr), (void const   *)(m->msg_iov)->iov_base,
                           16UL);
  }
#line 549
  if (tmp___2 != 0UL) {
#line 550
    return (-14);
  } else {

  }
  {
#line 551
  tmp___3 = __fswab16((int )hdr.tcm_type);
  }
#line 551
  if (((int )tmp___3 & 49152) != 0) {
    {
#line 551
    tmp___4 = capable(12);
    }
#line 551
    if (tmp___4) {
#line 551
      tmp___5 = 0;
    } else {
#line 551
      tmp___5 = 1;
    }
#line 551
    if (tmp___5) {
#line 552
      return (-13);
    } else {

    }
  } else {

  }
#line 554
  return (0);
}
}
#line 571 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int send_msg(struct kiocb *iocb , struct socket *sock , struct msghdr *m ,
                    size_t total_len ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  struct sockaddr_tipc *dest ;
  int needs_conn ;
  long timeout_val ;
  int res ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  wait_queue_head_t *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  wait_queue_head_t *tmp___8 ;

  {
  {
#line 574
  sk = sock->sk;
#line 575
  tport = ((struct tipc_sock *)sk)->p;
#line 576
  dest = (struct sockaddr_tipc *)m->msg_name;
#line 579
  res = -22;
#line 581
  tmp = __builtin_expect((unsigned long )dest == (unsigned long )((struct sockaddr_tipc *)0),
                         0L);
  }
#line 581
  if (tmp != 0L) {
#line 582
    return (-89);
  } else {

  }
  {
#line 583
  tmp___0 = __builtin_expect((unsigned int )m->msg_namelen <= 15U, 0L);
  }
#line 583
  if (tmp___0 != 0L) {
#line 585
    return (-22);
  } else {
    {
#line 583
    tmp___1 = __builtin_expect((unsigned int )dest->family != 30U, 0L);
    }
#line 583
    if (tmp___1 != 0L) {
#line 585
      return (-22);
    } else {

    }
  }
#line 586
  if (total_len > 66000UL) {
#line 587
    return (-90);
  } else {

  }
#line 589
  if ((unsigned long )iocb != (unsigned long )((struct kiocb *)0)) {
    {
#line 590
    lock_sock(sk);
    }
  } else {

  }
  {
#line 592
  needs_conn = (unsigned int )sock->state != 4294967294U;
#line 593
  tmp___2 = __builtin_expect(needs_conn != 0, 0L);
  }
#line 593
  if (tmp___2 != 0L) {
#line 594
    if ((unsigned int )sock->state == 4294967295U) {
#line 595
      res = -32;
#line 596
      goto exit;
    } else {

    }
#line 598
    if ((unsigned int )sock->state != 1U) {
#line 599
      res = -106;
#line 600
      goto exit;
    } else {

    }
#line 602
    if (tport->published != 0) {
#line 603
      res = -95;
#line 604
      goto exit;
    } else {

    }
#line 606
    if ((unsigned int )dest->addrtype == 2U) {
#line 607
      tport->conn_type = dest->addr.name.name.type;
#line 608
      tport->conn_instance = dest->addr.name.name.instance;
    } else {

    }
    {
#line 612
    reject_rx_queue(sk);
    }
  } else {

  }
  {
#line 615
  timeout_val = sock_sndtimeo((struct sock  const  *)sk, (m->msg_flags & 64U) != 0U);
  }
  ldv_43783: ;
#line 618
  if ((unsigned int )dest->addrtype == 2U) {
    {
#line 619
    res = dest_name_check(dest, m);
    }
#line 620
    if (res != 0) {
#line 621
      goto ldv_43776;
    } else {

    }
    {
#line 622
    res = tipc_send2name(tport->ref, (struct tipc_name  const  *)(& dest->addr.name.name),
                         dest->addr.name.domain, (unsigned int )m->msg_iovlen, (struct iovec  const  *)m->msg_iov,
                         (unsigned int )total_len);
    }
  } else
#line 628
  if ((unsigned int )dest->addrtype == 3U) {
    {
#line 629
    res = tipc_send2port(tport->ref, (struct tipc_portid  const  *)(& dest->addr.id),
                         (unsigned int )m->msg_iovlen, (struct iovec  const  *)m->msg_iov,
                         (unsigned int )total_len);
    }
  } else
#line 634
  if ((unsigned int )dest->addrtype == 1U) {
#line 635
    if (needs_conn != 0) {
#line 636
      res = -95;
#line 637
      goto ldv_43776;
    } else {

    }
    {
#line 639
    res = dest_name_check(dest, m);
    }
#line 640
    if (res != 0) {
#line 641
      goto ldv_43776;
    } else {

    }
    {
#line 642
    res = tipc_multicast(tport->ref, (struct tipc_name_seq  const  *)(& dest->addr.nameseq),
                         (unsigned int )m->msg_iovlen, (struct iovec  const  *)m->msg_iov,
                         (unsigned int )total_len);
    }
  } else {

  }
  {
#line 648
  tmp___3 = __builtin_expect(res != -11, 1L);
  }
#line 648
  if (tmp___3 != 0L) {
#line 649
    if (needs_conn != 0 && res >= 0) {
#line 650
      sock->state = 2;
    } else {

    }
#line 651
    goto ldv_43776;
  } else {

  }
#line 653
  if (timeout_val <= 0L) {
#line 654
    res = timeout_val != 0L ? (int )timeout_val : -11;
#line 655
    goto ldv_43776;
  } else {

  }
  {
#line 657
  release_sock(sk);
#line 658
  __ret = timeout_val;
  }
#line 658
  if (tport->congested != 0U) {
    {
#line 658
    tmp___4 = get_current();
#line 658
    __wait.flags = 0U;
#line 658
    __wait.private = (void *)tmp___4;
#line 658
    __wait.func = & autoremove_wake_function;
#line 658
    __wait.task_list.next = & __wait.task_list;
#line 658
    __wait.task_list.prev = & __wait.task_list;
    }
    ldv_43781: 
    {
#line 658
    tmp___5 = sk_sleep(sk);
#line 658
    prepare_to_wait(tmp___5, & __wait, 1);
    }
#line 658
    if (tport->congested == 0U) {
#line 658
      goto ldv_43779;
    } else {

    }
    {
#line 658
    tmp___6 = get_current();
#line 658
    tmp___7 = signal_pending(tmp___6);
    }
#line 658
    if (tmp___7 == 0) {
      {
#line 658
      __ret = schedule_timeout(__ret);
      }
#line 658
      if (__ret == 0L) {
#line 658
        goto ldv_43779;
      } else {

      }
#line 658
      goto ldv_43780;
    } else {

    }
#line 658
    __ret = -512L;
#line 658
    goto ldv_43779;
    ldv_43780: ;
#line 658
    goto ldv_43781;
    ldv_43779: ;
#line 658
    if (__ret == 0L && tport->congested == 0U) {
#line 658
      __ret = 1L;
    } else {

    }
    {
#line 658
    tmp___8 = sk_sleep(sk);
#line 658
    finish_wait(tmp___8, & __wait);
    }
  } else {

  }
  {
#line 658
  timeout_val = __ret;
#line 660
  lock_sock(sk);
  }
#line 661
  goto ldv_43783;
  ldv_43776: ;
  exit: ;
#line 664
  if ((unsigned long )iocb != (unsigned long )((struct kiocb *)0)) {
    {
#line 665
    release_sock(sk);
    }
  } else {

  }
#line 666
  return (res);
}
}
#line 680 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int send_packet(struct kiocb *iocb , struct socket *sock , struct msghdr *m ,
                       size_t total_len ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  struct sockaddr_tipc *dest ;
  long timeout_val ;
  int res ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  wait_queue_head_t *tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  wait_queue_head_t *tmp___7 ;

  {
  {
#line 683
  sk = sock->sk;
#line 684
  tport = ((struct tipc_sock *)sk)->p;
#line 685
  dest = (struct sockaddr_tipc *)m->msg_name;
#line 690
  tmp___0 = __builtin_expect((unsigned long )dest != (unsigned long )((struct sockaddr_tipc *)0),
                             0L);
  }
#line 690
  if (tmp___0 != 0L) {
    {
#line 691
    tmp = send_msg(iocb, sock, m, total_len);
    }
#line 691
    return (tmp);
  } else {

  }
#line 693
  if (total_len > 66000UL) {
#line 694
    return (-90);
  } else {

  }
#line 696
  if ((unsigned long )iocb != (unsigned long )((struct kiocb *)0)) {
    {
#line 697
    lock_sock(sk);
    }
  } else {

  }
  {
#line 699
  timeout_val = sock_sndtimeo((struct sock  const  *)sk, (m->msg_flags & 64U) != 0U);
  }
  ldv_43802: 
  {
#line 702
  tmp___1 = __builtin_expect((unsigned int )sock->state != 3U, 0L);
  }
#line 702
  if (tmp___1 != 0L) {
#line 703
    if ((unsigned int )sock->state == 4U) {
#line 704
      res = -32;
    } else {
#line 706
      res = -107;
    }
#line 707
    goto ldv_43795;
  } else {

  }
  {
#line 710
  res = tipc_send(tport->ref, (unsigned int )m->msg_iovlen, (struct iovec  const  *)m->msg_iov,
                  (unsigned int )total_len);
#line 712
  tmp___2 = __builtin_expect(res != -11, 1L);
  }
#line 712
  if (tmp___2 != 0L) {
#line 713
    goto ldv_43795;
  } else {

  }
#line 714
  if (timeout_val <= 0L) {
#line 715
    res = timeout_val != 0L ? (int )timeout_val : -11;
#line 716
    goto ldv_43795;
  } else {

  }
  {
#line 718
  release_sock(sk);
#line 719
  __ret = timeout_val;
  }
#line 719
  if (tport->congested != 0U && tport->connected != 0) {
    {
#line 719
    tmp___3 = get_current();
#line 719
    __wait.flags = 0U;
#line 719
    __wait.private = (void *)tmp___3;
#line 719
    __wait.func = & autoremove_wake_function;
#line 719
    __wait.task_list.next = & __wait.task_list;
#line 719
    __wait.task_list.prev = & __wait.task_list;
    }
    ldv_43800: 
    {
#line 719
    tmp___4 = sk_sleep(sk);
#line 719
    prepare_to_wait(tmp___4, & __wait, 1);
    }
#line 719
    if (tport->congested == 0U || tport->connected == 0) {
#line 719
      goto ldv_43798;
    } else {

    }
    {
#line 719
    tmp___5 = get_current();
#line 719
    tmp___6 = signal_pending(tmp___5);
    }
#line 719
    if (tmp___6 == 0) {
      {
#line 719
      __ret = schedule_timeout(__ret);
      }
#line 719
      if (__ret == 0L) {
#line 719
        goto ldv_43798;
      } else {

      }
#line 719
      goto ldv_43799;
    } else {

    }
#line 719
    __ret = -512L;
#line 719
    goto ldv_43798;
    ldv_43799: ;
#line 719
    goto ldv_43800;
    ldv_43798: ;
#line 719
    if (__ret == 0L && (tport->congested == 0U || tport->connected == 0)) {
#line 719
      __ret = 1L;
    } else {

    }
    {
#line 719
    tmp___7 = sk_sleep(sk);
#line 719
    finish_wait(tmp___7, & __wait);
    }
  } else {

  }
  {
#line 719
  timeout_val = __ret;
#line 721
  lock_sock(sk);
  }
#line 722
  goto ldv_43802;
  ldv_43795: ;
#line 724
  if ((unsigned long )iocb != (unsigned long )((struct kiocb *)0)) {
    {
#line 725
    release_sock(sk);
    }
  } else {

  }
#line 726
  return (res);
}
}
#line 741 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int send_stream(struct kiocb *iocb , struct socket *sock , struct msghdr *m ,
                       size_t total_len ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  struct msghdr my_msg ;
  struct iovec my_iov ;
  struct iovec *curr_iov ;
  int curr_iovlen ;
  char *curr_start ;
  u32 hdr_size ;
  int curr_left ;
  int bytes_to_send ;
  int bytes_sent ;
  int res ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 744
  sk = sock->sk;
#line 745
  tport = ((struct tipc_sock *)sk)->p;
#line 757
  lock_sock(sk);
#line 760
  tmp = __builtin_expect((unsigned int )sock->state != 3U, 0L);
  }
#line 760
  if (tmp != 0L) {
#line 761
    if ((unsigned int )sock->state == 1U) {
      {
#line 762
      res = send_packet((struct kiocb *)0, sock, m, total_len);
      }
#line 763
      goto exit;
    } else
#line 764
    if ((unsigned int )sock->state == 4U) {
#line 765
      res = -32;
#line 766
      goto exit;
    } else {
#line 768
      res = -107;
#line 769
      goto exit;
    }
  } else {

  }
  {
#line 773
  tmp___0 = __builtin_expect((unsigned long )m->msg_name != (unsigned long )((void *)0),
                             0L);
  }
#line 773
  if (tmp___0 != 0L) {
#line 774
    res = -106;
#line 775
    goto exit;
  } else {

  }
#line 778
  if (total_len > 2147483647UL) {
#line 779
    res = -90;
#line 780
    goto exit;
  } else {

  }
  {
#line 790
  curr_iov = m->msg_iov;
#line 791
  curr_iovlen = (int )m->msg_iovlen;
#line 792
  my_msg.msg_iov = & my_iov;
#line 793
  my_msg.msg_iovlen = 1UL;
#line 794
  my_msg.msg_flags = m->msg_flags;
#line 795
  my_msg.msg_name = (void *)0;
#line 796
  bytes_sent = 0;
#line 798
  hdr_size = msg_hdr_sz(& tport->phdr);
  }
#line 800
  goto ldv_43826;
  ldv_43825: 
#line 801
  curr_start = (char *)curr_iov->iov_base;
#line 802
  curr_left = (int )curr_iov->iov_len;
#line 804
  goto ldv_43823;
  ldv_43822: 
#line 805
  bytes_to_send = (int )(tport->max_pkt - hdr_size);
#line 806
  if ((unsigned int )bytes_to_send > 66000U) {
#line 807
    bytes_to_send = 66000;
  } else {

  }
#line 808
  if (curr_left < bytes_to_send) {
#line 809
    bytes_to_send = curr_left;
  } else {

  }
  {
#line 810
  my_iov.iov_base = (void *)curr_start;
#line 811
  my_iov.iov_len = (__kernel_size_t )bytes_to_send;
#line 812
  res = send_packet((struct kiocb *)0, sock, & my_msg, (size_t )bytes_to_send);
  }
#line 813
  if (res < 0) {
#line 814
    if (bytes_sent != 0) {
#line 815
      res = bytes_sent;
    } else {

    }
#line 816
    goto exit;
  } else {

  }
#line 818
  curr_left = curr_left - bytes_to_send;
#line 819
  curr_start = curr_start + (unsigned long )bytes_to_send;
#line 820
  bytes_sent = bytes_sent + bytes_to_send;
  ldv_43823: ;
#line 804
  if (curr_left != 0) {
#line 806
    goto ldv_43822;
  } else {

  }
#line 823
  curr_iov = curr_iov + 1;
  ldv_43826: 
#line 800
  tmp___1 = curr_iovlen;
#line 800
  curr_iovlen = curr_iovlen - 1;
#line 800
  if (tmp___1 != 0) {
#line 802
    goto ldv_43825;
  } else {

  }
#line 825
  res = bytes_sent;
  exit: 
  {
#line 827
  release_sock(sk);
  }
#line 828
  return (res);
}
}
#line 838 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int auto_connect(struct socket *sock , struct tipc_msg *msg ) 
{ 
  struct tipc_sock *tsock ;
  struct tipc_port *p_ptr ;
  u32 tmp ;
  u32 tmp___0 ;

  {
  {
#line 840
  tsock = (struct tipc_sock *)sock->sk;
#line 843
  tsock->peer_name.ref = msg_origport(msg);
#line 844
  tsock->peer_name.node = msg_orignode(msg);
#line 845
  p_ptr = tipc_port_deref((tsock->p)->ref);
  }
#line 846
  if ((unsigned long )p_ptr == (unsigned long )((struct tipc_port *)0)) {
#line 847
    return (-22);
  } else {

  }
  {
#line 849
  __tipc_connect((tsock->p)->ref, p_ptr, (struct tipc_portid  const  *)(& tsock->peer_name));
#line 851
  tmp = msg_user(msg);
  }
#line 851
  if (tmp > 3U) {
#line 852
    return (-22);
  } else {

  }
  {
#line 853
  tmp___0 = msg_user(msg);
#line 853
  msg_set_importance(& p_ptr->phdr, tmp___0);
#line 854
  sock->state = 3;
  }
#line 855
  return (0);
}
}
#line 865 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static void set_orig_addr(struct msghdr *m , struct tipc_msg *msg ) 
{ 
  struct sockaddr_tipc *addr ;

  {
#line 867
  addr = (struct sockaddr_tipc *)m->msg_name;
#line 869
  if ((unsigned long )addr != (unsigned long )((struct sockaddr_tipc *)0)) {
    {
#line 870
    addr->family = 30U;
#line 871
    addr->addrtype = 3U;
#line 872
    memset((void *)(& addr->addr), 0, 12UL);
#line 873
    addr->addr.id.ref = msg_origport(msg);
#line 874
    addr->addr.id.node = msg_orignode(msg);
#line 875
    addr->addr.name.domain = 0U;
#line 876
    addr->scope = 0;
#line 877
    m->msg_namelen = 16;
    }
  } else {

  }
#line 879
  return;
}
}
#line 891 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int anc_data_recv(struct msghdr *m , struct tipc_msg *msg , struct tipc_port *tport ) 
{ 
  u32 anc_data[3U] ;
  u32 err ;
  u32 dest_type ;
  int has_name ;
  int res ;
  long tmp ;
  u32 tmp___0 ;
  unchar *tmp___1 ;
  long tmp___2 ;
  u32 tmp___3 ;

  {
  {
#line 900
  tmp = __builtin_expect(m->msg_controllen == 0UL, 1L);
  }
#line 900
  if (tmp != 0L) {
#line 901
    return (0);
  } else {

  }
#line 904
  if ((unsigned long )msg != (unsigned long )((struct tipc_msg *)0)) {
    {
#line 904
    tmp___0 = msg_errcode(msg);
#line 904
    err = tmp___0;
    }
  } else {
#line 904
    err = 0U;
  }
  {
#line 905
  tmp___2 = __builtin_expect(err != 0U, 0L);
  }
#line 905
  if (tmp___2 != 0L) {
    {
#line 906
    anc_data[0] = err;
#line 907
    anc_data[1] = msg_data_sz(msg);
#line 908
    res = put_cmsg(m, 271, 1, 8, (void *)(& anc_data));
    }
#line 909
    if (res != 0) {
#line 910
      return (res);
    } else {

    }
#line 911
    if (anc_data[1] != 0U) {
      {
#line 912
      tmp___1 = msg_data(msg);
#line 912
      res = put_cmsg(m, 271, 2, (int )anc_data[1], (void *)tmp___1);
      }
#line 914
      if (res != 0) {
#line 915
        return (res);
      } else {

      }
    } else {

    }
  } else {

  }
#line 920
  if ((unsigned long )msg != (unsigned long )((struct tipc_msg *)0)) {
    {
#line 920
    tmp___3 = msg_type(msg);
#line 920
    dest_type = tmp___3;
    }
  } else {
#line 920
    dest_type = 3U;
  }
  {
#line 922
  if (dest_type == 2U) {
#line 922
    goto case_2;
  } else {

  }
#line 928
  if (dest_type == 1U) {
#line 928
    goto case_1;
  } else {

  }
#line 934
  if (dest_type == 0U) {
#line 934
    goto case_0;
  } else {

  }
#line 940
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 923
  has_name = 1;
#line 924
  anc_data[0] = msg_nametype(msg);
#line 925
  anc_data[1] = msg_namelower(msg);
#line 926
  anc_data[2] = msg_namelower(msg);
  }
#line 927
  goto ldv_43850;
  case_1: /* CIL Label */ 
  {
#line 929
  has_name = 1;
#line 930
  anc_data[0] = msg_nametype(msg);
#line 931
  anc_data[1] = msg_namelower(msg);
#line 932
  anc_data[2] = msg_nameupper(msg);
  }
#line 933
  goto ldv_43850;
  case_0: /* CIL Label */ 
#line 935
  has_name = tport->conn_type != 0U;
#line 936
  anc_data[0] = tport->conn_type;
#line 937
  anc_data[1] = tport->conn_instance;
#line 938
  anc_data[2] = tport->conn_instance;
#line 939
  goto ldv_43850;
  switch_default: /* CIL Label */ 
#line 941
  has_name = 0;
  switch_break: /* CIL Label */ ;
  }
  ldv_43850: ;
#line 943
  if (has_name != 0) {
    {
#line 944
    res = put_cmsg(m, 271, 3, 12, (void *)(& anc_data));
    }
#line 945
    if (res != 0) {
#line 946
      return (res);
    } else {

    }
  } else {

  }
#line 949
  return (0);
}
}
#line 964 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int recv_msg(struct kiocb *iocb , struct socket *sock , struct msghdr *m ,
                    size_t buf_len , int flags ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  struct sk_buff *buf ;
  struct tipc_msg *msg ;
  long timeout ;
  unsigned int sz ;
  u32 err ;
  int res ;
  long tmp ;
  long tmp___0 ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  wait_queue_head_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  wait_queue_head_t *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  u32 tmp___11 ;
  long tmp___12 ;

  {
  {
#line 967
  sk = sock->sk;
#line 968
  tport = ((struct tipc_sock *)sk)->p;
#line 977
  tmp = __builtin_expect(buf_len == 0UL, 0L);
  }
#line 977
  if (tmp != 0L) {
#line 978
    return (-22);
  } else {

  }
  {
#line 980
  lock_sock(sk);
#line 982
  tmp___0 = __builtin_expect((unsigned int )sock->state == 1U, 0L);
  }
#line 982
  if (tmp___0 != 0L) {
#line 983
    res = -107;
#line 984
    goto exit;
  } else {

  }
  {
#line 987
  timeout = sock_rcvtimeo((struct sock  const  *)sk, (flags & 64) != 0);
  }
  restart: ;
#line 991
  goto ldv_43878;
  ldv_43877: ;
#line 992
  if ((unsigned int )sock->state == 4U) {
#line 993
    res = -107;
#line 994
    goto exit;
  } else {

  }
#line 996
  if (timeout <= 0L) {
#line 997
    res = timeout != 0L ? (int )timeout : -11;
#line 998
    goto exit;
  } else {

  }
  {
#line 1000
  release_sock(sk);
#line 1001
  __ret = timeout;
#line 1001
  tmp___8 = skb_queue_empty((struct sk_buff_head  const  *)(& (sock->sk)->sk_receive_queue));
  }
#line 1001
  if (tmp___8 != 0 && (unsigned int )sock->state != 4U) {
    {
#line 1001
    tmp___1 = get_current();
#line 1001
    __wait.flags = 0U;
#line 1001
    __wait.private = (void *)tmp___1;
#line 1001
    __wait.func = & autoremove_wake_function;
#line 1001
    __wait.task_list.next = & __wait.task_list;
#line 1001
    __wait.task_list.prev = & __wait.task_list;
    }
    ldv_43875: 
    {
#line 1001
    tmp___2 = sk_sleep(sk);
#line 1001
    prepare_to_wait(tmp___2, & __wait, 1);
#line 1001
    tmp___3 = skb_queue_empty((struct sk_buff_head  const  *)(& (sock->sk)->sk_receive_queue));
    }
#line 1001
    if (tmp___3 == 0 || (unsigned int )sock->state == 4U) {
#line 1001
      goto ldv_43873;
    } else {

    }
    {
#line 1001
    tmp___4 = get_current();
#line 1001
    tmp___5 = signal_pending(tmp___4);
    }
#line 1001
    if (tmp___5 == 0) {
      {
#line 1001
      __ret = schedule_timeout(__ret);
      }
#line 1001
      if (__ret == 0L) {
#line 1001
        goto ldv_43873;
      } else {

      }
#line 1001
      goto ldv_43874;
    } else {

    }
#line 1001
    __ret = -512L;
#line 1001
    goto ldv_43873;
    ldv_43874: ;
#line 1001
    goto ldv_43875;
    ldv_43873: ;
#line 1001
    if (__ret == 0L) {
      {
#line 1001
      tmp___6 = skb_queue_empty((struct sk_buff_head  const  *)(& (sock->sk)->sk_receive_queue));
      }
#line 1001
      if (tmp___6 == 0 || (unsigned int )sock->state == 4U) {
#line 1001
        __ret = 1L;
      } else {

      }
    } else {

    }
    {
#line 1001
    tmp___7 = sk_sleep(sk);
#line 1001
    finish_wait(tmp___7, & __wait);
    }
  } else {

  }
  {
#line 1001
  timeout = __ret;
#line 1004
  lock_sock(sk);
  }
  ldv_43878: 
  {
#line 991
  tmp___9 = skb_queue_empty((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
  }
#line 991
  if (tmp___9 != 0) {
#line 993
    goto ldv_43877;
  } else {

  }
  {
#line 1008
  buf = skb_peek((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
#line 1009
  msg = buf_msg(buf);
#line 1010
  sz = msg_data_sz(msg);
#line 1011
  err = msg_errcode(msg);
  }
#line 1014
  if (sz == 0U && err == 0U) {
    {
#line 1015
    advance_rx_queue(sk);
    }
#line 1016
    goto restart;
  } else {

  }
  {
#line 1020
  set_orig_addr(m, msg);
#line 1023
  res = anc_data_recv(m, msg, tport);
  }
#line 1024
  if (res != 0) {
#line 1025
    goto exit;
  } else {

  }
#line 1028
  if (err == 0U) {
    {
#line 1029
    tmp___10 = __builtin_expect(buf_len < (size_t )sz, 0L);
    }
#line 1029
    if (tmp___10 != 0L) {
#line 1030
      sz = (unsigned int )buf_len;
#line 1031
      m->msg_flags = m->msg_flags | 32U;
    } else {

    }
    {
#line 1033
    tmp___11 = msg_hdr_sz(msg);
#line 1033
    res = skb_copy_datagram_iovec((struct sk_buff  const  *)buf, (int )tmp___11, m->msg_iov,
                                  (int )sz);
    }
#line 1035
    if (res != 0) {
#line 1036
      goto exit;
    } else {

    }
#line 1037
    res = (int )sz;
  } else
#line 1039
  if ((unsigned int )sock->state == 4294967294U || (err == 5U || (unsigned long )m->msg_control != (unsigned long )((void *)0))) {
#line 1041
    res = 0;
  } else {
#line 1043
    res = -104;
  }
  {
#line 1047
  tmp___12 = __builtin_expect((flags & 2) == 0, 1L);
  }
#line 1047
  if (tmp___12 != 0L) {
#line 1048
    if ((unsigned int )sock->state != 4294967294U) {
#line 1048
      tport->conn_unacked = tport->conn_unacked + 1U;
#line 1048
      if (tport->conn_unacked > 511U) {
        {
#line 1050
        tipc_acknowledge(tport->ref, tport->conn_unacked);
        }
      } else {

      }
    } else {

    }
    {
#line 1051
    advance_rx_queue(sk);
    }
  } else {

  }
  exit: 
  {
#line 1054
  release_sock(sk);
  }
#line 1055
  return (res);
}
}
#line 1070 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int recv_stream(struct kiocb *iocb , struct socket *sock , struct msghdr *m ,
                       size_t buf_len , int flags ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  struct sk_buff *buf ;
  struct tipc_msg *msg ;
  long timeout ;
  unsigned int sz ;
  int sz_to_copy ;
  int target ;
  int needed ;
  int sz_copied ;
  u32 err ;
  int res ;
  long tmp ;
  long tmp___0 ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  wait_queue_head_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  wait_queue_head_t *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  u32 offset ;
  u32 tmp___10 ;
  long tmp___11 ;
  long tmp___12 ;
  int tmp___13 ;

  {
  {
#line 1073
  sk = sock->sk;
#line 1074
  tport = ((struct tipc_sock *)sk)->p;
#line 1080
  sz_copied = 0;
#line 1082
  res = 0;
#line 1085
  tmp = __builtin_expect(buf_len == 0UL, 0L);
  }
#line 1085
  if (tmp != 0L) {
#line 1086
    return (-22);
  } else {

  }
  {
#line 1088
  lock_sock(sk);
#line 1090
  tmp___0 = __builtin_expect((unsigned int )sock->state == 1U, 0L);
  }
#line 1090
  if (tmp___0 != 0L) {
#line 1091
    res = -107;
#line 1092
    goto exit;
  } else {

  }
  {
#line 1095
  target = sock_rcvlowat((struct sock  const  *)sk, flags & 256, (int )buf_len);
#line 1096
  timeout = sock_rcvtimeo((struct sock  const  *)sk, (flags & 64) != 0);
  }
  restart: ;
#line 1100
  goto ldv_43908;
  ldv_43907: ;
#line 1101
  if ((unsigned int )sock->state == 4U) {
#line 1102
    res = -107;
#line 1103
    goto exit;
  } else {

  }
#line 1105
  if (timeout <= 0L) {
#line 1106
    res = timeout != 0L ? (int )timeout : -11;
#line 1107
    goto exit;
  } else {

  }
  {
#line 1109
  release_sock(sk);
#line 1110
  __ret = timeout;
#line 1110
  tmp___8 = skb_queue_empty((struct sk_buff_head  const  *)(& (sock->sk)->sk_receive_queue));
  }
#line 1110
  if (tmp___8 != 0 && (unsigned int )sock->state != 4U) {
    {
#line 1110
    tmp___1 = get_current();
#line 1110
    __wait.flags = 0U;
#line 1110
    __wait.private = (void *)tmp___1;
#line 1110
    __wait.func = & autoremove_wake_function;
#line 1110
    __wait.task_list.next = & __wait.task_list;
#line 1110
    __wait.task_list.prev = & __wait.task_list;
    }
    ldv_43905: 
    {
#line 1110
    tmp___2 = sk_sleep(sk);
#line 1110
    prepare_to_wait(tmp___2, & __wait, 1);
#line 1110
    tmp___3 = skb_queue_empty((struct sk_buff_head  const  *)(& (sock->sk)->sk_receive_queue));
    }
#line 1110
    if (tmp___3 == 0 || (unsigned int )sock->state == 4U) {
#line 1110
      goto ldv_43903;
    } else {

    }
    {
#line 1110
    tmp___4 = get_current();
#line 1110
    tmp___5 = signal_pending(tmp___4);
    }
#line 1110
    if (tmp___5 == 0) {
      {
#line 1110
      __ret = schedule_timeout(__ret);
      }
#line 1110
      if (__ret == 0L) {
#line 1110
        goto ldv_43903;
      } else {

      }
#line 1110
      goto ldv_43904;
    } else {

    }
#line 1110
    __ret = -512L;
#line 1110
    goto ldv_43903;
    ldv_43904: ;
#line 1110
    goto ldv_43905;
    ldv_43903: ;
#line 1110
    if (__ret == 0L) {
      {
#line 1110
      tmp___6 = skb_queue_empty((struct sk_buff_head  const  *)(& (sock->sk)->sk_receive_queue));
      }
#line 1110
      if (tmp___6 == 0 || (unsigned int )sock->state == 4U) {
#line 1110
        __ret = 1L;
      } else {

      }
    } else {

    }
    {
#line 1110
    tmp___7 = sk_sleep(sk);
#line 1110
    finish_wait(tmp___7, & __wait);
    }
  } else {

  }
  {
#line 1110
  timeout = __ret;
#line 1113
  lock_sock(sk);
  }
  ldv_43908: 
  {
#line 1100
  tmp___9 = skb_queue_empty((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
  }
#line 1100
  if (tmp___9 != 0) {
#line 1102
    goto ldv_43907;
  } else {

  }
  {
#line 1117
  buf = skb_peek((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
#line 1118
  msg = buf_msg(buf);
#line 1119
  sz = msg_data_sz(msg);
#line 1120
  err = msg_errcode(msg);
  }
#line 1123
  if (sz == 0U && err == 0U) {
    {
#line 1124
    advance_rx_queue(sk);
    }
#line 1125
    goto restart;
  } else {

  }
#line 1129
  if (sz_copied == 0) {
    {
#line 1130
    set_orig_addr(m, msg);
#line 1131
    res = anc_data_recv(m, msg, tport);
    }
#line 1132
    if (res != 0) {
#line 1133
      goto exit;
    } else {

    }
  } else {

  }
#line 1137
  if (err == 0U) {
    {
#line 1138
    offset = (unsigned int )((long )((struct tipc_skb_cb *)(& buf->cb))->handle);
#line 1140
    sz = sz - offset;
#line 1141
    needed = (int )((unsigned int )buf_len - (unsigned int )sz_copied);
#line 1142
    sz_to_copy = (int )((unsigned int )needed < sz ? (unsigned int )needed : sz);
#line 1144
    tmp___10 = msg_hdr_sz(msg);
#line 1144
    res = skb_copy_datagram_iovec((struct sk_buff  const  *)buf, (int )(tmp___10 + offset),
                                  m->msg_iov, sz_to_copy);
    }
#line 1146
    if (res != 0) {
#line 1147
      goto exit;
    } else {

    }
#line 1149
    sz_copied = sz_copied + sz_to_copy;
#line 1151
    if ((unsigned int )sz_to_copy < sz) {
#line 1152
      if ((flags & 2) == 0) {
#line 1153
        ((struct tipc_skb_cb *)(& buf->cb))->handle = (void *)((unsigned long )(offset + (u32 )sz_to_copy));
      } else {

      }
#line 1155
      goto exit;
    } else {

    }
  } else {
#line 1158
    if (sz_copied != 0) {
#line 1159
      goto exit;
    } else {

    }
#line 1161
    if (err == 5U || (unsigned long )m->msg_control != (unsigned long )((void *)0)) {
#line 1162
      res = 0;
    } else {
#line 1164
      res = -104;
    }
  }
  {
#line 1168
  tmp___12 = __builtin_expect((flags & 2) == 0, 1L);
  }
#line 1168
  if (tmp___12 != 0L) {
    {
#line 1169
    tport->conn_unacked = tport->conn_unacked + 1U;
#line 1169
    tmp___11 = __builtin_expect(tport->conn_unacked > 511U, 0L);
    }
#line 1169
    if (tmp___11 != 0L) {
      {
#line 1170
      tipc_acknowledge(tport->ref, tport->conn_unacked);
      }
    } else {

    }
    {
#line 1171
    advance_rx_queue(sk);
    }
  } else {

  }
#line 1175
  if ((size_t )sz_copied < buf_len) {
    {
#line 1175
    tmp___13 = skb_queue_empty((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
    }
#line 1175
    if (tmp___13 == 0 || sz_copied < target) {
#line 1175
      if ((flags & 2) == 0 && err == 0U) {
#line 1180
        goto restart;
      } else {

      }
    } else {

    }
  } else {

  }
  exit: 
  {
#line 1183
  release_sock(sk);
  }
#line 1184
  return (sz_copied != 0 ? sz_copied : res);
}
}
#line 1191 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static void tipc_write_space(struct sock *sk ) 
{ 
  struct socket_wq *wq ;
  struct socket_wq *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 1195
  rcu_read_lock();
#line 1196
  _________p1 = *((struct socket_wq * volatile  *)(& sk->sk_wq));
#line 1196
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1196
  if (tmp != 0 && ! __warned) {
    {
#line 1196
    tmp___0 = rcu_read_lock_held();
    }
#line 1196
    if (tmp___0 == 0) {
      {
#line 1196
      __warned = 1;
#line 1196
      lockdep_rcu_suspicious("net/tipc/socket.c", 1196, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1196
  wq = _________p1;
#line 1197
  tmp___1 = wq_has_sleeper(wq);
  }
#line 1197
  if ((int )tmp___1) {
    {
#line 1198
    __wake_up_sync_key(& wq->wait, 1U, 1, (void *)772);
    }
  } else {

  }
  {
#line 1200
  rcu_read_unlock();
  }
#line 1201
  return;
}
}
#line 1208 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static void tipc_data_ready(struct sock *sk , int len ) 
{ 
  struct socket_wq *wq ;
  struct socket_wq *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 1212
  rcu_read_lock();
#line 1213
  _________p1 = *((struct socket_wq * volatile  *)(& sk->sk_wq));
#line 1213
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1213
  if (tmp != 0 && ! __warned) {
    {
#line 1213
    tmp___0 = rcu_read_lock_held();
    }
#line 1213
    if (tmp___0 == 0) {
      {
#line 1213
      __warned = 1;
#line 1213
      lockdep_rcu_suspicious("net/tipc/socket.c", 1213, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1213
  wq = _________p1;
#line 1214
  tmp___1 = wq_has_sleeper(wq);
  }
#line 1214
  if ((int )tmp___1) {
    {
#line 1215
    __wake_up_sync_key(& wq->wait, 1U, 1, (void *)193);
    }
  } else {

  }
  {
#line 1217
  rcu_read_unlock();
  }
#line 1218
  return;
}
}
#line 1228 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static u32 filter_connect(struct tipc_sock *tsock , struct sk_buff **buf ) 
{ 
  struct socket *sock ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  struct sock *sk ;
  u32 retval ;
  int res ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  long tmp___2 ;
  u32 tmp___3 ;
  int tmp___4 ;
  u32 tmp___5 ;
  long tmp___6 ;
  u32 tmp___7 ;
  long tmp___8 ;
  wait_queue_head_t *tmp___9 ;
  wait_queue_head_t *tmp___10 ;
  int tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;

  {
  {
#line 1230
  sock = tsock->sk.sk_socket;
#line 1231
  tmp = buf_msg(*buf);
#line 1231
  msg = tmp;
#line 1232
  sk = & tsock->sk;
#line 1233
  retval = 2U;
#line 1236
  tmp___0 = msg_mcast(msg);
  }
#line 1236
  if (tmp___0 != 0U) {
#line 1237
    return (retval);
  } else {

  }
  {
#line 1240
  if ((int )sock->state == 3) {
#line 1240
    goto case_3;
  } else {

  }
#line 1250
  if ((int )sock->state == 2) {
#line 1250
    goto case_2;
  } else {

  }
#line 1283
  if ((int )sock->state == -1) {
#line 1283
    goto case_neg_1;
  } else {

  }
#line 1284
  if ((int )sock->state == 1) {
#line 1284
    goto case_1;
  } else {

  }
#line 1289
  if ((int )sock->state == 4) {
#line 1289
    goto case_4;
  } else {

  }
#line 1291
  goto switch_default;
  case_3: /* CIL Label */ 
  {
#line 1242
  tmp___3 = msg_connected(msg);
  }
#line 1242
  if (tmp___3 != 0U) {
    {
#line 1242
    tmp___4 = tipc_port_peer_msg(tsock->p, msg);
    }
#line 1242
    if (tmp___4 != 0) {
      {
#line 1243
      tmp___1 = msg_errcode(msg);
#line 1243
      tmp___2 = __builtin_expect(tmp___1 != 0U, 0L);
      }
#line 1243
      if (tmp___2 != 0L) {
        {
#line 1244
        sock->state = 4;
#line 1245
        __tipc_disconnect(tsock->p);
        }
      } else {

      }
#line 1247
      retval = 0U;
    } else {

    }
  } else {

  }
#line 1249
  goto ldv_43936;
  case_2: /* CIL Label */ 
  {
#line 1252
  tmp___5 = msg_errcode(msg);
#line 1252
  tmp___6 = __builtin_expect(tmp___5 != 0U, 0L);
  }
#line 1252
  if (tmp___6 != 0L) {
#line 1253
    sock->state = 4;
#line 1254
    sk->sk_err = 111;
#line 1255
    retval = 0U;
#line 1256
    goto ldv_43936;
  } else {

  }
  {
#line 1259
  tmp___7 = msg_connected(msg);
#line 1259
  tmp___8 = __builtin_expect(tmp___7 == 0U, 0L);
  }
#line 1259
  if (tmp___8 != 0L) {
#line 1260
    goto ldv_43936;
  } else {

  }
  {
#line 1262
  res = auto_connect(sock, msg);
  }
#line 1263
  if (res != 0) {
#line 1264
    sock->state = 4;
#line 1265
    sk->sk_err = - res;
#line 1266
    retval = 0U;
#line 1267
    goto ldv_43936;
  } else {

  }
  {
#line 1275
  tmp___12 = msg_data_sz(msg);
  }
#line 1275
  if (tmp___12 == 0U) {
    {
#line 1276
    kfree_skb(*buf);
#line 1277
    *buf = (struct sk_buff *)0;
#line 1278
    tmp___10 = sk_sleep(sk);
#line 1278
    tmp___11 = waitqueue_active(tmp___10);
    }
#line 1278
    if (tmp___11 != 0) {
      {
#line 1279
      tmp___9 = sk_sleep(sk);
#line 1279
      __wake_up(tmp___9, 1U, 1, (void *)0);
      }
    } else {

    }
  } else {

  }
#line 1281
  retval = 0U;
#line 1282
  goto ldv_43936;
  case_neg_1: /* CIL Label */ ;
  case_1: /* CIL Label */ 
  {
#line 1286
  tmp___13 = msg_connected(msg);
  }
#line 1286
  if (tmp___13 == 0U) {
    {
#line 1286
    tmp___14 = msg_errcode(msg);
    }
#line 1286
    if (tmp___14 == 0U) {
#line 1287
      retval = 0U;
    } else {

    }
  } else {

  }
#line 1288
  goto ldv_43936;
  case_4: /* CIL Label */ ;
#line 1290
  goto ldv_43936;
  switch_default: /* CIL Label */ 
  {
#line 1292
  printk("\vtipc: Unknown socket state %u\n", (unsigned int )sock->state);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_43936: ;
#line 1294
  return (retval);
}
}
#line 1315 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static unsigned int rcvbuf_limit(struct sock *sk , struct sk_buff *buf ) 
{ 
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  unsigned int limit ;
  u32 tmp___0 ;
  u32 tmp___1 ;

  {
  {
#line 1317
  tmp = buf_msg(buf);
#line 1317
  msg = tmp;
#line 1320
  tmp___1 = msg_connected(msg);
  }
#line 1320
  if (tmp___1 != 0U) {
#line 1321
    limit = (unsigned int )sysctl_tipc_rmem[2];
  } else {
    {
#line 1323
    tmp___0 = msg_user(msg);
#line 1323
    limit = (unsigned int )((sk->sk_rcvbuf >> 3) << (int )tmp___0);
    }
  }
#line 1325
  return (limit);
}
}
#line 1340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static u32 filter_rcv(struct sock *sk , struct sk_buff *buf ) 
{ 
  struct socket *sock ;
  struct tipc_msg *msg ;
  struct tipc_msg *tmp ;
  unsigned int limit ;
  unsigned int tmp___0 ;
  u32 res ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  int tmp___3 ;

  {
  {
#line 1342
  sock = sk->sk_socket;
#line 1343
  tmp = buf_msg(buf);
#line 1343
  msg = tmp;
#line 1344
  tmp___0 = rcvbuf_limit(sk, buf);
#line 1344
  limit = tmp___0;
#line 1345
  res = 0U;
#line 1348
  tmp___1 = msg_type(msg);
  }
#line 1348
  if (tmp___1 > 3U) {
#line 1349
    return (2U);
  } else {

  }
#line 1351
  if ((unsigned int )sock->state == 4294967294U) {
    {
#line 1352
    tmp___2 = msg_connected(msg);
    }
#line 1352
    if (tmp___2 != 0U) {
#line 1353
      return (2U);
    } else {

    }
  } else {
    {
#line 1355
    res = filter_connect((struct tipc_sock *)sk, & buf);
    }
#line 1356
    if (res != 0U || (unsigned long )buf == (unsigned long )((struct sk_buff *)0)) {
#line 1357
      return (res);
    } else {

    }
  }
  {
#line 1361
  tmp___3 = sk_rmem_alloc_get((struct sock  const  *)sk);
  }
#line 1361
  if ((unsigned int )tmp___3 + buf->truesize >= limit) {
#line 1362
    return (4U);
  } else {

  }
  {
#line 1365
  ((struct tipc_skb_cb *)(& buf->cb))->handle = (void *)0;
#line 1366
  __skb_queue_tail(& sk->sk_receive_queue, buf);
#line 1367
  skb_set_owner_r(buf, sk);
#line 1369
  (*(sk->sk_data_ready))(sk, 0);
  }
#line 1370
  return (0U);
}
}
#line 1382 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int backlog_rcv(struct sock *sk , struct sk_buff *buf ) 
{ 
  u32 res ;

  {
  {
#line 1386
  res = filter_rcv(sk, buf);
  }
#line 1387
  if (res != 0U) {
    {
#line 1388
    tipc_reject_msg(buf, res);
    }
  } else {

  }
#line 1389
  return (0);
}
}
#line 1401 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static u32 dispatch(struct tipc_port *tport , struct sk_buff *buf ) 
{ 
  struct sock *sk ;
  u32 res ;
  unsigned int tmp ;
  int tmp___0 ;

  {
  {
#line 1403
  sk = tport->sk;
#line 1412
  ldv_spin_lock_77(& sk->sk_lock.slock);
  }
#line 1413
  if (sk->sk_lock.owned == 0) {
    {
#line 1414
    res = filter_rcv(sk, buf);
    }
  } else {
    {
#line 1416
    tmp = rcvbuf_limit(sk, buf);
#line 1416
    tmp___0 = sk_add_backlog(sk, buf, tmp);
    }
#line 1416
    if (tmp___0 != 0) {
#line 1417
      res = 4U;
    } else {
#line 1419
      res = 0U;
    }
  }
  {
#line 1421
  ldv_spin_unlock_78(& sk->sk_lock.slock);
  }
#line 1423
  return (res);
}
}
#line 1432 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static void wakeupdispatch(struct tipc_port *tport ) 
{ 
  struct sock *sk ;

  {
  {
#line 1434
  sk = tport->sk;
#line 1436
  (*(sk->sk_write_space))(sk);
  }
#line 1437
  return;
}
}
#line 1448 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int connect(struct socket *sock , struct sockaddr *dest , int destlen , int flags ) 
{ 
  struct sock *sk ;
  struct sockaddr_tipc *dst ;
  struct msghdr m ;
  unsigned int timeout ;
  int res ;
  long __ret ;
  unsigned long tmp ;
  long tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  wait_queue_head_t *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  wait_queue_head_t *tmp___5 ;
  long tmp___6 ;

  {
  {
#line 1451
  sk = sock->sk;
#line 1452
  dst = (struct sockaddr_tipc *)dest;
#line 1453
  m.msg_name = (void *)0;
#line 1453
  m.msg_namelen = 0;
#line 1453
  m.msg_iov = 0;
#line 1453
  m.msg_iovlen = 0UL;
#line 1453
  m.msg_control = 0;
#line 1453
  m.msg_controllen = 0UL;
#line 1453
  m.msg_flags = 0U;
#line 1457
  lock_sock(sk);
  }
#line 1460
  if ((unsigned int )sock->state == 4294967294U) {
#line 1461
    res = -95;
#line 1462
    goto exit;
  } else {

  }
#line 1471
  if ((unsigned int )dst->addrtype == 1U) {
#line 1472
    res = -22;
#line 1473
    goto exit;
  } else {

  }
#line 1476
  timeout = (flags & 2048) == 0 ? ((struct tipc_sock *)sk)->conn_timeout : 0U;
  {
#line 1479
  if ((unsigned int )sock->state == 1U) {
#line 1479
    goto case_1;
  } else {

  }
#line 1500
  if ((unsigned int )sock->state == 2U) {
#line 1500
    goto case_2;
  } else {

  }
#line 1503
  if ((unsigned int )sock->state == 3U) {
#line 1503
    goto case_3;
  } else {

  }
#line 1506
  goto switch_default;
  case_1: /* CIL Label */ 
#line 1481
  m.msg_name = (void *)dest;
#line 1482
  m.msg_namelen = destlen;
#line 1487
  if (timeout == 0U) {
#line 1488
    m.msg_flags = 64U;
  } else {

  }
  {
#line 1490
  res = send_msg((struct kiocb *)0, sock, & m, 0UL);
  }
#line 1491
  if (res < 0 && res != -11) {
#line 1492
    goto exit;
  } else {

  }
#line 1498
  res = -115;
#line 1499
  goto ldv_43984;
  case_2: /* CIL Label */ 
#line 1501
  res = -114;
#line 1502
  goto ldv_43984;
  case_3: /* CIL Label */ 
#line 1504
  res = -106;
#line 1505
  goto ldv_43984;
  switch_default: /* CIL Label */ 
#line 1507
  res = -22;
#line 1508
  goto exit;
  switch_break: /* CIL Label */ ;
  }
  ldv_43984: ;
#line 1511
  if ((unsigned int )sock->state == 2U) {
#line 1512
    if (timeout == 0U) {
#line 1513
      goto exit;
    } else {

    }
    {
#line 1516
    release_sock(sk);
    }
#line 1517
    if (timeout != 0U) {
      {
#line 1517
      tmp = msecs_to_jiffies(timeout);
#line 1517
      tmp___0 = (long )tmp;
      }
    } else {
#line 1517
      tmp___0 = 9223372036854775807L;
    }
#line 1517
    __ret = tmp___0;
#line 1517
    if ((unsigned int )sock->state == 2U) {
      {
#line 1517
      tmp___1 = get_current();
#line 1517
      __wait.flags = 0U;
#line 1517
      __wait.private = (void *)tmp___1;
#line 1517
      __wait.func = & autoremove_wake_function;
#line 1517
      __wait.task_list.next = & __wait.task_list;
#line 1517
      __wait.task_list.prev = & __wait.task_list;
      }
      ldv_43992: 
      {
#line 1517
      tmp___2 = sk_sleep(sk);
#line 1517
      prepare_to_wait(tmp___2, & __wait, 1);
      }
#line 1517
      if ((unsigned int )sock->state != 2U) {
#line 1517
        goto ldv_43990;
      } else {

      }
      {
#line 1517
      tmp___3 = get_current();
#line 1517
      tmp___4 = signal_pending(tmp___3);
      }
#line 1517
      if (tmp___4 == 0) {
        {
#line 1517
        __ret = schedule_timeout(__ret);
        }
#line 1517
        if (__ret == 0L) {
#line 1517
          goto ldv_43990;
        } else {

        }
#line 1517
        goto ldv_43991;
      } else {

      }
#line 1517
      __ret = -512L;
#line 1517
      goto ldv_43990;
      ldv_43991: ;
#line 1517
      goto ldv_43992;
      ldv_43990: ;
#line 1517
      if (__ret == 0L && (unsigned int )sock->state != 2U) {
#line 1517
        __ret = 1L;
      } else {

      }
      {
#line 1517
      tmp___5 = sk_sleep(sk);
#line 1517
      finish_wait(tmp___5, & __wait);
      }
    } else {

    }
    {
#line 1517
    res = (int )__ret;
#line 1521
    lock_sock(sk);
    }
#line 1522
    if (res <= 0) {
#line 1523
      if (res == 0) {
#line 1524
        res = -110;
      } else {

      }
#line 1527
      goto exit;
    } else {

    }
  } else {

  }
  {
#line 1531
  tmp___6 = __builtin_expect((unsigned int )sock->state == 4U, 0L);
  }
#line 1531
  if (tmp___6 != 0L) {
    {
#line 1532
    res = sock_error(sk);
    }
  } else {
#line 1534
    res = 0;
  }
  exit: 
  {
#line 1537
  release_sock(sk);
  }
#line 1538
  return (res);
}
}
#line 1548 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int listen(struct socket *sock , int len ) 
{ 
  struct sock *sk ;
  int res ;

  {
  {
#line 1550
  sk = sock->sk;
#line 1553
  lock_sock(sk);
  }
#line 1555
  if ((unsigned int )sock->state != 1U) {
#line 1556
    res = -22;
  } else {
#line 1558
    sock->state = 4294967295L;
#line 1559
    res = 0;
  }
  {
#line 1562
  release_sock(sk);
  }
#line 1563
  return (res);
}
}
#line 1574 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int accept(struct socket *sock , struct socket *new_sock , int flags ) 
{ 
  struct sock *new_sk ;
  struct sock *sk ;
  struct sk_buff *buf ;
  struct tipc_sock *new_tsock ;
  struct tipc_port *new_tport ;
  struct tipc_msg *msg ;
  u32 new_ref ;
  int res ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  wait_queue_head_t *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  wait_queue_head_t *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct net *tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  struct msghdr m ;
  u32 tmp___10 ;

  {
  {
#line 1576
  sk = sock->sk;
#line 1585
  lock_sock(sk);
  }
#line 1587
  if ((unsigned int )sock->state != 4294967295U) {
#line 1588
    res = -22;
#line 1589
    goto exit;
  } else {

  }
#line 1592
  goto ldv_44021;
  ldv_44020: ;
#line 1593
  if ((flags & 2048) != 0) {
#line 1594
    res = -11;
#line 1595
    goto exit;
  } else {

  }
  {
#line 1597
  release_sock(sk);
#line 1598
  __ret = 0;
#line 1598
  tmp___5 = skb_queue_empty((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
  }
#line 1598
  if (tmp___5 != 0) {
    {
#line 1598
    tmp = get_current();
#line 1598
    __wait.flags = 0U;
#line 1598
    __wait.private = (void *)tmp;
#line 1598
    __wait.func = & autoremove_wake_function;
#line 1598
    __wait.task_list.next = & __wait.task_list;
#line 1598
    __wait.task_list.prev = & __wait.task_list;
    }
    ldv_44018: 
    {
#line 1598
    tmp___0 = sk_sleep(sk);
#line 1598
    prepare_to_wait(tmp___0, & __wait, 1);
#line 1598
    tmp___1 = skb_queue_empty((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
    }
#line 1598
    if (tmp___1 == 0) {
#line 1598
      goto ldv_44016;
    } else {

    }
    {
#line 1598
    tmp___2 = get_current();
#line 1598
    tmp___3 = signal_pending(tmp___2);
    }
#line 1598
    if (tmp___3 == 0) {
      {
#line 1598
      schedule();
      }
#line 1598
      goto ldv_44017;
    } else {

    }
#line 1598
    __ret = -512;
#line 1598
    goto ldv_44016;
    ldv_44017: ;
#line 1598
    goto ldv_44018;
    ldv_44016: 
    {
#line 1598
    tmp___4 = sk_sleep(sk);
#line 1598
    finish_wait(tmp___4, & __wait);
    }
  } else {

  }
  {
#line 1598
  res = __ret;
#line 1600
  lock_sock(sk);
  }
#line 1601
  if (res != 0) {
#line 1602
    goto exit;
  } else {

  }
  ldv_44021: 
  {
#line 1592
  tmp___6 = skb_queue_empty((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
  }
#line 1592
  if (tmp___6 != 0) {
#line 1594
    goto ldv_44020;
  } else {

  }
  {
#line 1605
  buf = skb_peek((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
#line 1607
  tmp___7 = sock_net((struct sock  const  *)sock->sk);
#line 1607
  res = tipc_sk_create(tmp___7, new_sock, 0, 1);
  }
#line 1608
  if (res != 0) {
#line 1609
    goto exit;
  } else {

  }
  {
#line 1611
  new_sk = new_sock->sk;
#line 1612
  new_tsock = (struct tipc_sock *)new_sk;
#line 1613
  new_tport = new_tsock->p;
#line 1614
  new_ref = new_tport->ref;
#line 1615
  msg = buf_msg(buf);
#line 1618
  lock_sock_nested(new_sk, 1);
#line 1624
  reject_rx_queue(new_sk);
#line 1627
  new_tsock->peer_name.ref = msg_origport(msg);
#line 1628
  new_tsock->peer_name.node = msg_orignode(msg);
#line 1629
  tipc_connect(new_ref, (struct tipc_portid  const  *)(& new_tsock->peer_name));
#line 1630
  new_sock->state = 3;
#line 1632
  tmp___8 = msg_user(msg);
#line 1632
  tipc_set_portimportance(new_ref, tmp___8);
#line 1633
  tmp___9 = msg_named(msg);
  }
#line 1633
  if (tmp___9 != 0U) {
    {
#line 1634
    new_tport->conn_type = msg_nametype(msg);
#line 1635
    new_tport->conn_instance = msg_nameinst(msg);
    }
  } else {

  }
  {
#line 1642
  tmp___10 = msg_data_sz(msg);
  }
#line 1642
  if (tmp___10 == 0U) {
    {
#line 1643
    m.msg_name = (void *)0;
#line 1643
    m.msg_namelen = 0;
#line 1643
    m.msg_iov = 0;
#line 1643
    m.msg_iovlen = 0UL;
#line 1643
    m.msg_control = 0;
#line 1643
    m.msg_controllen = 0UL;
#line 1643
    m.msg_flags = 0U;
#line 1645
    advance_rx_queue(sk);
#line 1646
    send_packet((struct kiocb *)0, new_sock, & m, 0UL);
    }
  } else {
    {
#line 1648
    __skb_dequeue(& sk->sk_receive_queue);
#line 1649
    __skb_queue_head(& new_sk->sk_receive_queue, buf);
#line 1650
    skb_set_owner_r(buf, new_sk);
    }
  }
  {
#line 1652
  release_sock(new_sk);
  }
  exit: 
  {
#line 1655
  release_sock(sk);
  }
#line 1656
  return (res);
}
}
#line 1668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int shutdown(struct socket *sock , int how ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  struct sk_buff *buf ;
  int res ;

  {
#line 1670
  sk = sock->sk;
#line 1671
  tport = ((struct tipc_sock *)sk)->p;
#line 1675
  if (how != 2) {
#line 1676
    return (-22);
  } else {

  }
  {
#line 1678
  lock_sock(sk);
  }
  {
#line 1681
  if ((unsigned int )sock->state == 2U) {
#line 1681
    goto case_2;
  } else {

  }
#line 1682
  if ((unsigned int )sock->state == 3U) {
#line 1682
    goto case_3;
  } else {

  }
#line 1702
  if ((unsigned int )sock->state == 4U) {
#line 1702
    goto case_4;
  } else {

  }
#line 1712
  goto switch_default;
  case_2: /* CIL Label */ ;
  case_3: /* CIL Label */ ;
  restart: 
  {
#line 1686
  buf = __skb_dequeue(& sk->sk_receive_queue);
  }
#line 1687
  if ((unsigned long )buf != (unsigned long )((struct sk_buff *)0)) {
#line 1688
    if ((unsigned long )((struct tipc_skb_cb *)(& buf->cb))->handle != (unsigned long )((void *)0)) {
      {
#line 1689
      kfree_skb(buf);
      }
#line 1690
      goto restart;
    } else {

    }
    {
#line 1692
    tipc_disconnect(tport->ref);
#line 1693
    tipc_reject_msg(buf, 5U);
    }
  } else {
    {
#line 1695
    tipc_shutdown(tport->ref);
    }
  }
#line 1698
  sock->state = 4;
  case_4: /* CIL Label */ 
  {
#line 1705
  __skb_queue_purge(& sk->sk_receive_queue);
#line 1708
  (*(sk->sk_state_change))(sk);
#line 1709
  res = 0;
  }
#line 1710
  goto ldv_44036;
  switch_default: /* CIL Label */ 
#line 1713
  res = -107;
  switch_break: /* CIL Label */ ;
  }
  ldv_44036: 
  {
#line 1716
  release_sock(sk);
  }
#line 1717
  return (res);
}
}
#line 1733 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int setsockopt(struct socket *sock , int lvl , int opt , char *ov , unsigned int ol ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  u32 value ;
  int res ;
  int __ret_gu ;
  register unsigned long __val_gu ;

  {
#line 1736
  sk = sock->sk;
#line 1737
  tport = ((struct tipc_sock *)sk)->p;
#line 1741
  if (lvl == 6 && (int )sock->type == 1) {
#line 1742
    return (0);
  } else {

  }
#line 1743
  if (lvl != 271) {
#line 1744
    return (-92);
  } else {

  }
#line 1745
  if (ol <= 3U) {
#line 1746
    return (-22);
  } else {

  }
  {
#line 1747
  might_fault();
#line 1747
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" ((u32 *)ov),
                       "i" (4UL));
#line 1747
  value = (unsigned int )__val_gu;
#line 1747
  res = __ret_gu;
  }
#line 1748
  if (res != 0) {
#line 1749
    return (res);
  } else {

  }
  {
#line 1751
  lock_sock(sk);
  }
  {
#line 1754
  if (opt == 127) {
#line 1754
    goto case_127;
  } else {

  }
#line 1757
  if (opt == 128) {
#line 1757
    goto case_128;
  } else {

  }
#line 1763
  if (opt == 129) {
#line 1763
    goto case_129;
  } else {

  }
#line 1766
  if (opt == 130) {
#line 1766
    goto case_130;
  } else {

  }
#line 1770
  goto switch_default;
  case_127: /* CIL Label */ 
  {
#line 1755
  res = tipc_set_portimportance(tport->ref, value);
  }
#line 1756
  goto ldv_44053;
  case_128: /* CIL Label */ ;
#line 1758
  if ((int )sock->type != 1) {
    {
#line 1759
    res = tipc_set_portunreliable(tport->ref, value);
    }
  } else {
#line 1761
    res = -92;
  }
#line 1762
  goto ldv_44053;
  case_129: /* CIL Label */ 
  {
#line 1764
  res = tipc_set_portunreturnable(tport->ref, value);
  }
#line 1765
  goto ldv_44053;
  case_130: /* CIL Label */ 
#line 1767
  ((struct tipc_sock *)sk)->conn_timeout = value;
#line 1769
  goto ldv_44053;
  switch_default: /* CIL Label */ 
#line 1771
  res = -22;
  switch_break: /* CIL Label */ ;
  }
  ldv_44053: 
  {
#line 1774
  release_sock(sk);
  }
#line 1776
  return (res);
}
}
#line 1792 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static int getsockopt(struct socket *sock , int lvl , int opt , char *ov , int *ol ) 
{ 
  struct sock *sk ;
  struct tipc_port *tport ;
  int len ;
  u32 value ;
  int res ;
  int __ret_pu ;
  int __pu_val ;
  int __ret_gu ;
  register unsigned long __val_gu ;
  int tmp ;
  int __ret_pu___0 ;
  int __pu_val___0 ;

  {
#line 1795
  sk = sock->sk;
#line 1796
  tport = ((struct tipc_sock *)sk)->p;
#line 1801
  if (lvl == 6 && (int )sock->type == 1) {
    {
#line 1802
    might_fault();
#line 1802
    __pu_val = 0;
    }
    {
#line 1802
    if (4UL == 1UL) {
#line 1802
      goto case_1;
    } else {

    }
#line 1802
    if (4UL == 2UL) {
#line 1802
      goto case_2;
    } else {

    }
#line 1802
    if (4UL == 4UL) {
#line 1802
      goto case_4;
    } else {

    }
#line 1802
    if (4UL == 8UL) {
#line 1802
      goto case_8;
    } else {

    }
#line 1802
    goto switch_default;
    case_1: /* CIL Label */ 
#line 1802
    __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (ol): "ebx");
#line 1802
    goto ldv_44073;
    case_2: /* CIL Label */ 
#line 1802
    __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (ol): "ebx");
#line 1802
    goto ldv_44073;
    case_4: /* CIL Label */ 
#line 1802
    __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (ol): "ebx");
#line 1802
    goto ldv_44073;
    case_8: /* CIL Label */ 
#line 1802
    __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (ol): "ebx");
#line 1802
    goto ldv_44073;
    switch_default: /* CIL Label */ 
#line 1802
    __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (ol): "ebx");
#line 1802
    goto ldv_44073;
    switch_break: /* CIL Label */ ;
    }
    ldv_44073: ;
#line 1802
    return (__ret_pu);
  } else {

  }
#line 1803
  if (lvl != 271) {
#line 1804
    return (-92);
  } else {

  }
  {
#line 1805
  might_fault();
#line 1805
  __asm__  volatile   ("call __get_user_%P3": "=a" (__ret_gu), "=r" (__val_gu): "0" (ol),
                       "i" (4UL));
#line 1805
  len = (int )__val_gu;
#line 1805
  res = __ret_gu;
  }
#line 1806
  if (res != 0) {
#line 1807
    return (res);
  } else {

  }
  {
#line 1809
  lock_sock(sk);
  }
  {
#line 1812
  if (opt == 127) {
#line 1812
    goto case_127;
  } else {

  }
#line 1815
  if (opt == 128) {
#line 1815
    goto case_128;
  } else {

  }
#line 1818
  if (opt == 129) {
#line 1818
    goto case_129;
  } else {

  }
#line 1821
  if (opt == 130) {
#line 1821
    goto case_130;
  } else {

  }
#line 1825
  if (opt == 131) {
#line 1825
    goto case_131;
  } else {

  }
#line 1828
  if (opt == 132) {
#line 1828
    goto case_132;
  } else {

  }
#line 1831
  goto switch_default___0;
  case_127: /* CIL Label */ 
  {
#line 1813
  res = tipc_portimportance(tport->ref, & value);
  }
#line 1814
  goto ldv_44083;
  case_128: /* CIL Label */ 
  {
#line 1816
  res = tipc_portunreliable(tport->ref, & value);
  }
#line 1817
  goto ldv_44083;
  case_129: /* CIL Label */ 
  {
#line 1819
  res = tipc_portunreturnable(tport->ref, & value);
  }
#line 1820
  goto ldv_44083;
  case_130: /* CIL Label */ 
#line 1822
  value = ((struct tipc_sock *)sk)->conn_timeout;
#line 1824
  goto ldv_44083;
  case_131: /* CIL Label */ 
#line 1826
  value = 0U;
#line 1827
  goto ldv_44083;
  case_132: /* CIL Label */ 
  {
#line 1829
  value = skb_queue_len((struct sk_buff_head  const  *)(& sk->sk_receive_queue));
  }
#line 1830
  goto ldv_44083;
  switch_default___0: /* CIL Label */ 
#line 1832
  res = -22;
  switch_break___0: /* CIL Label */ ;
  }
  ldv_44083: 
  {
#line 1835
  release_sock(sk);
  }
#line 1837
  if (res != 0) {
#line 1838
    return (res);
  } else {

  }
#line 1840
  if ((unsigned int )len <= 3U) {
#line 1841
    return (-22);
  } else {

  }
  {
#line 1843
  tmp = copy_to_user((void *)ov, (void const   *)(& value), 4U);
  }
#line 1843
  if (tmp != 0) {
#line 1844
    return (-14);
  } else {

  }
  {
#line 1846
  might_fault();
#line 1846
  __pu_val___0 = 4;
  }
  {
#line 1846
  if (4UL == 1UL) {
#line 1846
    goto case_1___0;
  } else {

  }
#line 1846
  if (4UL == 2UL) {
#line 1846
    goto case_2___0;
  } else {

  }
#line 1846
  if (4UL == 4UL) {
#line 1846
    goto case_4___0;
  } else {

  }
#line 1846
  if (4UL == 8UL) {
#line 1846
    goto case_8___0;
  } else {

  }
#line 1846
  goto switch_default___1;
  case_1___0: /* CIL Label */ 
#line 1846
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (ol): "ebx");
#line 1846
  goto ldv_44093;
  case_2___0: /* CIL Label */ 
#line 1846
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (ol): "ebx");
#line 1846
  goto ldv_44093;
  case_4___0: /* CIL Label */ 
#line 1846
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (ol): "ebx");
#line 1846
  goto ldv_44093;
  case_8___0: /* CIL Label */ 
#line 1846
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (ol): "ebx");
#line 1846
  goto ldv_44093;
  switch_default___1: /* CIL Label */ 
#line 1846
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (ol): "ebx");
#line 1846
  goto ldv_44093;
  switch_break___1: /* CIL Label */ ;
  }
  ldv_44093: ;
#line 1846
  return (__ret_pu___0);
}
}
#line 1851 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static struct proto_ops  const  msg_ops  = 
#line 1851
     {30, & __this_module, & release, & bind, & connect, & sock_no_socketpair, & sock_no_accept,
    & get_name, & poll, & sock_no_ioctl, 0, & sock_no_listen, & shutdown, & setsockopt,
    & getsockopt, 0, 0, & send_msg, & recv_msg, & sock_no_mmap, & sock_no_sendpage,
    0, 0};
#line 1872 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static struct proto_ops  const  packet_ops  = 
#line 1872
     {30, & __this_module, & release, & bind, & connect, & sock_no_socketpair, & accept,
    & get_name, & poll, & sock_no_ioctl, 0, & listen, & shutdown, & setsockopt, & getsockopt,
    0, 0, & send_packet, & recv_msg, & sock_no_mmap, & sock_no_sendpage, 0, 0};
#line 1893 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static struct proto_ops  const  stream_ops  = 
#line 1893
     {30, & __this_module, & release, & bind, & connect, & sock_no_socketpair, & accept,
    & get_name, & poll, & sock_no_ioctl, 0, & listen, & shutdown, & setsockopt, & getsockopt,
    0, 0, & send_stream, & recv_stream, & sock_no_mmap, & sock_no_sendpage, 0, 0};
#line 1914 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static struct net_proto_family  const  tipc_family_ops  =    {30, & tipc_sk_create, & __this_module};
#line 1920 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static struct proto tipc_proto  = 
#line 1920
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0U,
    0, 0, 0, 0, 0, 0, 0, (int *)(& sysctl_tipc_rmem), 0, (_Bool)0, 0, 1256U, 0, 0,
    0, 0, {0}, & __this_module, {'T', 'I', 'P', 'C', '\000'}, {0, 0}, 0, 0, 0};
#line 1927 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
static struct proto tipc_proto_kern  = 
#line 1927
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0U,
    0, 0, 0, 0, 0, 0, 0, (int *)(& sysctl_tipc_rmem), 0, (_Bool)0, 0, 1256U, 0, 0,
    0, 0, {0}, 0, {'T', 'I', 'P', 'C', '\000'}, {0, 0}, 0, 0, 0};
#line 1938 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
int tipc_socket_init(void) 
{ 
  int res ;

  {
  {
#line 1942
  res = proto_register(& tipc_proto, 1);
  }
#line 1943
  if (res != 0) {
    {
#line 1944
    printk("\vtipc: Failed to register TIPC protocol type\n");
    }
#line 1945
    goto out;
  } else {

  }
  {
#line 1948
  res = ldv_sock_register_79(& tipc_family_ops);
  }
#line 1949
  if (res != 0) {
    {
#line 1950
    printk("\vtipc: Failed to register TIPC socket type\n");
#line 1951
    proto_unregister(& tipc_proto);
    }
#line 1952
    goto out;
  } else {

  }
#line 1955
  sockets_enabled = 1;
  out: ;
#line 1957
  return (res);
}
}
#line 1963 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/socket.c"
void tipc_socket_stop(void) 
{ 


  {
#line 1965
  if (sockets_enabled == 0) {
#line 1966
    return;
  } else {

  }
  {
#line 1968
  sockets_enabled = 0;
#line 1969
  ldv_sock_unregister_80(tipc_family_ops.family);
#line 1970
  proto_unregister(& tipc_proto);
  }
#line 1971
  return;
}
}
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_dispatch_register_8_4(struct socket *arg0 , int arg1 ) ;
#line 265
int ldv_emg_sock_register(struct net_proto_family *arg0 ) ;
#line 266
extern void ldv_emg_sock_unregister(int  ) ;
#line 267
void ldv_proto_scenario_2(void *arg0 ) ;
#line 268
void ldv_proto_scenario_3(void *arg0 ) ;
#line 269
void ldv_proto_scenario_4(void *arg0 ) ;
#line 270
int ldv_proto_scenario_bind_2_7(int (*arg0)(struct socket * , struct sockaddr * ,
                                            int  ) , struct socket *arg1 , struct sockaddr *arg2 ,
                                int arg3 ) ;
#line 271
int ldv_proto_scenario_bind_3_7(int (*arg0)(struct socket * , struct sockaddr * ,
                                            int  ) , struct socket *arg1 , struct sockaddr *arg2 ,
                                int arg3 ) ;
#line 272
int ldv_proto_scenario_bind_4_7(int (*arg0)(struct socket * , struct sockaddr * ,
                                            int  ) , struct socket *arg1 , struct sockaddr *arg2 ,
                                int arg3 ) ;
#line 273
void ldv_proto_scenario_callback_2_12(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int  , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int arg3 , int arg4 ) ;
#line 274
void ldv_proto_scenario_callback_2_15(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int * , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int *arg3 , int arg4 ) ;
#line 275
void ldv_proto_scenario_callback_2_18(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , int * ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , int *arg5 ) ;
#line 276
void ldv_proto_scenario_callback_2_21(int (*arg0)(struct socket * , u32  , size_t  ) ,
                                      struct socket *arg1 , unsigned int arg2 , unsigned long arg3 ) ;
#line 277
void ldv_proto_scenario_callback_2_24(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) ;
#line 278
void ldv_proto_scenario_callback_2_27(int (*arg0)(struct file * , struct socket * ,
                                                  struct vm_area_struct * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct vm_area_struct *arg3 ) ;
#line 279
void ldv_proto_scenario_callback_2_30(u32 (*arg0)(struct file * , struct socket * ,
                                                  poll_table * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct poll_table_struct *arg3 ) ;
#line 280
void ldv_proto_scenario_callback_2_33(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  , int  ) ,
                                      struct kiocb *arg1 , struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 , int arg5 ) ;
#line 281
void ldv_proto_scenario_callback_2_36(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  ) , struct kiocb *arg1 ,
                                      struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 ) ;
#line 282
void ldv_proto_scenario_callback_2_39(ssize_t (*arg0)(struct socket * , struct page * ,
                                                      int  , size_t  , int  ) , struct socket *arg1 ,
                                      struct page *arg2 , int arg3 , unsigned long arg4 ,
                                      int arg5 ) ;
#line 283
void ldv_proto_scenario_callback_2_42(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , u32  ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , unsigned int arg5 ) ;
#line 284
void ldv_proto_scenario_callback_2_45(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) ;
#line 285
void ldv_proto_scenario_callback_2_48(int (*arg0)(struct socket * , struct socket * ) ,
                                      struct socket *arg1 , struct socket *arg2 ) ;
#line 286
void ldv_proto_scenario_callback_2_5(int (*arg0)(struct socket * , struct socket * ,
                                                 int  ) , struct socket *arg1 , struct socket *arg2 ,
                                     int arg3 ) ;
#line 287
void ldv_proto_scenario_callback_3_12(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int  , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int arg3 , int arg4 ) ;
#line 288
void ldv_proto_scenario_callback_3_15(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int * , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int *arg3 , int arg4 ) ;
#line 289
void ldv_proto_scenario_callback_3_18(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , int * ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , int *arg5 ) ;
#line 290
void ldv_proto_scenario_callback_3_21(int (*arg0)(struct socket * , u32  , size_t  ) ,
                                      struct socket *arg1 , unsigned int arg2 , unsigned long arg3 ) ;
#line 291
void ldv_proto_scenario_callback_3_24(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) ;
#line 292
void ldv_proto_scenario_callback_3_27(int (*arg0)(struct file * , struct socket * ,
                                                  struct vm_area_struct * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct vm_area_struct *arg3 ) ;
#line 293
void ldv_proto_scenario_callback_3_30(u32 (*arg0)(struct file * , struct socket * ,
                                                  poll_table * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct poll_table_struct *arg3 ) ;
#line 294
void ldv_proto_scenario_callback_3_33(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  , int  ) ,
                                      struct kiocb *arg1 , struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 , int arg5 ) ;
#line 295
void ldv_proto_scenario_callback_3_36(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  ) , struct kiocb *arg1 ,
                                      struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 ) ;
#line 296
void ldv_proto_scenario_callback_3_39(ssize_t (*arg0)(struct socket * , struct page * ,
                                                      int  , size_t  , int  ) , struct socket *arg1 ,
                                      struct page *arg2 , int arg3 , unsigned long arg4 ,
                                      int arg5 ) ;
#line 297
void ldv_proto_scenario_callback_3_42(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , u32  ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , unsigned int arg5 ) ;
#line 298
void ldv_proto_scenario_callback_3_45(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) ;
#line 299
void ldv_proto_scenario_callback_3_48(int (*arg0)(struct socket * , struct socket * ) ,
                                      struct socket *arg1 , struct socket *arg2 ) ;
#line 300
void ldv_proto_scenario_callback_3_5(int (*arg0)(struct socket * , struct socket * ,
                                                 int  ) , struct socket *arg1 , struct socket *arg2 ,
                                     int arg3 ) ;
#line 301
void ldv_proto_scenario_callback_4_12(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int  , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int arg3 , int arg4 ) ;
#line 302
void ldv_proto_scenario_callback_4_15(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int * , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int *arg3 , int arg4 ) ;
#line 303
void ldv_proto_scenario_callback_4_18(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , int * ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , int *arg5 ) ;
#line 304
void ldv_proto_scenario_callback_4_21(int (*arg0)(struct socket * , u32  , size_t  ) ,
                                      struct socket *arg1 , unsigned int arg2 , unsigned long arg3 ) ;
#line 305
void ldv_proto_scenario_callback_4_24(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) ;
#line 306
void ldv_proto_scenario_callback_4_27(int (*arg0)(struct file * , struct socket * ,
                                                  struct vm_area_struct * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct vm_area_struct *arg3 ) ;
#line 307
void ldv_proto_scenario_callback_4_30(u32 (*arg0)(struct file * , struct socket * ,
                                                  poll_table * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct poll_table_struct *arg3 ) ;
#line 308
void ldv_proto_scenario_callback_4_33(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  , int  ) ,
                                      struct kiocb *arg1 , struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 , int arg5 ) ;
#line 309
void ldv_proto_scenario_callback_4_36(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  ) , struct kiocb *arg1 ,
                                      struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 ) ;
#line 310
void ldv_proto_scenario_callback_4_39(ssize_t (*arg0)(struct socket * , struct page * ,
                                                      int  , size_t  , int  ) , struct socket *arg1 ,
                                      struct page *arg2 , int arg3 , unsigned long arg4 ,
                                      int arg5 ) ;
#line 311
void ldv_proto_scenario_callback_4_42(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , u32  ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , unsigned int arg5 ) ;
#line 312
void ldv_proto_scenario_callback_4_45(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) ;
#line 313
void ldv_proto_scenario_callback_4_48(int (*arg0)(struct socket * , struct socket * ) ,
                                      struct socket *arg1 , struct socket *arg2 ) ;
#line 314
void ldv_proto_scenario_callback_4_5(int (*arg0)(struct socket * , struct socket * ,
                                                 int  ) , struct socket *arg1 , struct socket *arg2 ,
                                     int arg3 ) ;
#line 315
void ldv_proto_scenario_release_2_4(int (*arg0)(struct socket * ) , struct socket *arg1 ) ;
#line 316
void ldv_proto_scenario_release_3_4(int (*arg0)(struct socket * ) , struct socket *arg1 ) ;
#line 317
void ldv_proto_scenario_release_4_4(int (*arg0)(struct socket * ) , struct socket *arg1 ) ;
#line 318
int ldv_sock_register_create_8_6(int (*arg0)(struct net * , struct socket * , int  ,
                                             int  ) , struct net *arg1 , struct socket *arg2 ,
                                 int arg3 , int arg4 ) ;
#line 326 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_dispatch_register_8_4(struct socket *arg0 , int arg1 ) 
{ 
  struct ldv_struct_proto_scenario_2 *cf_arg_2 ;
  struct ldv_struct_proto_scenario_2 *cf_arg_3 ;
  struct ldv_struct_proto_scenario_2 *cf_arg_4 ;
  int tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
  {
#line 330
  tmp = ldv_undef_int();
  }
  {
#line 331
  if (tmp == 0) {
#line 331
    goto case_0;
  } else {

  }
#line 338
  if (tmp == 1) {
#line 338
    goto case_1;
  } else {

  }
#line 345
  if (tmp == 2) {
#line 345
    goto case_2;
  } else {

  }
#line 352
  goto switch_default;
  case_0: /* CIL Label */ 
  {
#line 332
  tmp___0 = ldv_xmalloc(16UL);
#line 332
  cf_arg_2 = (struct ldv_struct_proto_scenario_2 *)tmp___0;
#line 333
  cf_arg_2->arg0 = arg0;
#line 334
  cf_arg_2->arg1 = arg1;
#line 335
  ldv_proto_scenario_2((void *)cf_arg_2);
  }
#line 336
  goto ldv_44578;
  case_1: /* CIL Label */ 
  {
#line 339
  tmp___1 = ldv_xmalloc(16UL);
#line 339
  cf_arg_3 = (struct ldv_struct_proto_scenario_2 *)tmp___1;
#line 340
  cf_arg_3->arg0 = arg0;
#line 341
  cf_arg_3->arg1 = arg1;
#line 342
  ldv_proto_scenario_3((void *)cf_arg_3);
  }
#line 343
  goto ldv_44578;
  case_2: /* CIL Label */ 
  {
#line 346
  tmp___2 = ldv_xmalloc(16UL);
#line 346
  cf_arg_4 = (struct ldv_struct_proto_scenario_2 *)tmp___2;
#line 347
  cf_arg_4->arg0 = arg0;
#line 348
  cf_arg_4->arg1 = arg1;
#line 349
  ldv_proto_scenario_4((void *)cf_arg_4);
  }
#line 350
  goto ldv_44578;
  switch_default: /* CIL Label */ 
  {
#line 352
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_44578: ;
#line 354
  return;
}
}
#line 358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
int ldv_emg_sock_register(struct net_proto_family *arg0 ) 
{ 
  int ldv_8_family_family ;
  struct net *ldv_8_ldv_param_6_0_default ;
  int ldv_8_ldv_param_6_2_default ;
  int ldv_8_ldv_param_6_3_default ;
  struct net_proto_family *ldv_8_ops_family_ops ;
  int ldv_8_ret_default ;
  struct socket *ldv_8_socket_socket ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 370
  ldv_8_family_family = 30;
#line 371
  ldv_8_ret_default = ldv_undef_int();
#line 374
  tmp___3 = ldv_undef_int();
  }
#line 374
  if (tmp___3 != 0) {
    {
#line 376
    ldv_8_ops_family_ops = arg0;
#line 377
    ldv_8_family_family = ldv_8_ops_family_ops->family;
#line 378
    tmp = ldv_xmalloc(48UL);
#line 378
    ldv_8_socket_socket = (struct socket *)tmp;
#line 382
    tmp___0 = ldv_xmalloc_unknown_size(0UL);
#line 382
    ldv_8_ldv_param_6_0_default = (struct net *)tmp___0;
#line 387
    ldv_8_ret_default = ldv_sock_register_create_8_6(ldv_8_ops_family_ops->create,
                                                     ldv_8_ldv_param_6_0_default,
                                                     ldv_8_socket_socket, ldv_8_ldv_param_6_2_default,
                                                     ldv_8_ldv_param_6_3_default);
#line 391
    ldv_free((void *)ldv_8_ldv_param_6_0_default);
#line 394
    tmp___1 = ldv_undef_int();
    }
#line 394
    if (tmp___1 != 0) {
      {
#line 396
      __VERIFIER_assume(ldv_8_ret_default == 0);
#line 400
      ldv_dispatch_register_8_4(ldv_8_socket_socket, ldv_8_family_family);
      }
#line 404
      return (0);
    } else {
      {
#line 411
      __VERIFIER_assume(ldv_8_ret_default != 0);
#line 412
      ldv_free((void *)ldv_8_socket_socket);
      }
#line 413
      return (ldv_8_ret_default);
    }
  } else {
    {
#line 421
    tmp___2 = ldv_undef_int_negative();
    }
#line 421
    return (tmp___2);
  }
}
}
#line 431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_2(void *arg0 ) 
{ 
  int (*ldv_2_callback_accept)(struct socket * , struct socket * , int  ) ;
  int (*ldv_2_callback_connect)(struct socket * , struct sockaddr * , int  , int  ) ;
  int (*ldv_2_callback_getname)(struct socket * , struct sockaddr * , int * , int  ) ;
  int (*ldv_2_callback_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
  int (*ldv_2_callback_ioctl)(struct socket * , u32  , size_t  ) ;
  int (*ldv_2_callback_listen)(struct socket * , int  ) ;
  int (*ldv_2_callback_mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
  u32 (*ldv_2_callback_poll)(struct file * , struct socket * , poll_table * ) ;
  int (*ldv_2_callback_recvmsg)(struct kiocb * , struct socket * , struct msghdr * ,
                                size_t  , int  ) ;
  int (*ldv_2_callback_sendmsg)(struct kiocb * , struct socket * , struct msghdr * ,
                                size_t  ) ;
  ssize_t (*ldv_2_callback_sendpage)(struct socket * , struct page * , int  , size_t  ,
                                     int  ) ;
  int (*ldv_2_callback_setsockopt)(struct socket * , int  , int  , char * , u32  ) ;
  int (*ldv_2_callback_shutdown)(struct socket * , int  ) ;
  int (*ldv_2_callback_socketpair)(struct socket * , struct socket * ) ;
  int ldv_2_family_family ;
  struct socket *ldv_2_ldv_param_12_0_default ;
  struct sockaddr *ldv_2_ldv_param_12_1_default ;
  int ldv_2_ldv_param_12_2_default ;
  int ldv_2_ldv_param_12_3_default ;
  struct socket *ldv_2_ldv_param_15_0_default ;
  struct sockaddr *ldv_2_ldv_param_15_1_default ;
  int *ldv_2_ldv_param_15_2_default ;
  int ldv_2_ldv_param_15_3_default ;
  struct socket *ldv_2_ldv_param_18_0_default ;
  int ldv_2_ldv_param_18_1_default ;
  int ldv_2_ldv_param_18_2_default ;
  char *ldv_2_ldv_param_18_3_default ;
  int *ldv_2_ldv_param_18_4_default ;
  struct socket *ldv_2_ldv_param_21_0_default ;
  unsigned int ldv_2_ldv_param_21_1_default ;
  unsigned long ldv_2_ldv_param_21_2_default ;
  struct socket *ldv_2_ldv_param_24_0_default ;
  int ldv_2_ldv_param_24_1_default ;
  struct file *ldv_2_ldv_param_27_0_default ;
  struct socket *ldv_2_ldv_param_27_1_default ;
  struct vm_area_struct *ldv_2_ldv_param_27_2_default ;
  struct file *ldv_2_ldv_param_30_0_default ;
  struct socket *ldv_2_ldv_param_30_1_default ;
  struct poll_table_struct *ldv_2_ldv_param_30_2_default ;
  struct kiocb *ldv_2_ldv_param_33_0_default ;
  struct socket *ldv_2_ldv_param_33_1_default ;
  struct msghdr *ldv_2_ldv_param_33_2_default ;
  unsigned long ldv_2_ldv_param_33_3_default ;
  int ldv_2_ldv_param_33_4_default ;
  struct kiocb *ldv_2_ldv_param_36_0_default ;
  struct socket *ldv_2_ldv_param_36_1_default ;
  struct msghdr *ldv_2_ldv_param_36_2_default ;
  unsigned long ldv_2_ldv_param_36_3_default ;
  struct socket *ldv_2_ldv_param_39_0_default ;
  struct page *ldv_2_ldv_param_39_1_default ;
  int ldv_2_ldv_param_39_2_default ;
  unsigned long ldv_2_ldv_param_39_3_default ;
  int ldv_2_ldv_param_39_4_default ;
  struct socket *ldv_2_ldv_param_42_0_default ;
  int ldv_2_ldv_param_42_1_default ;
  int ldv_2_ldv_param_42_2_default ;
  char *ldv_2_ldv_param_42_3_default ;
  unsigned int ldv_2_ldv_param_42_4_default ;
  struct socket *ldv_2_ldv_param_45_0_default ;
  int ldv_2_ldv_param_45_1_default ;
  struct socket *ldv_2_ldv_param_48_0_default ;
  struct socket *ldv_2_ldv_param_48_1_default ;
  struct socket *ldv_2_ldv_param_5_0_default ;
  struct socket *ldv_2_ldv_param_5_1_default ;
  int ldv_2_ldv_param_5_2_default ;
  struct sockaddr *ldv_2_ldv_param_7_1_default ;
  int ldv_2_ldv_param_7_2_default ;
  struct proto_ops *ldv_2_proto_ops_proto_ops ;
  int ldv_2_ret_default ;
  struct socket *ldv_2_socket_socket ;
  struct ldv_struct_proto_scenario_2 *data ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  void *tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;
  void *tmp___18 ;
  void *tmp___19 ;
  void *tmp___20 ;
  void *tmp___21 ;
  void *tmp___22 ;
  void *tmp___23 ;
  void *tmp___24 ;
  void *tmp___25 ;
  void *tmp___26 ;
  void *tmp___27 ;
  void *tmp___28 ;
  void *tmp___29 ;
  void *tmp___30 ;
  void *tmp___31 ;
  int tmp___32 ;

  {
  {
#line 505
  data = (struct ldv_struct_proto_scenario_2 *)arg0;
#line 509
  ldv_2_family_family = 30;
#line 510
  ldv_2_ret_default = ldv_undef_int();
  }
#line 513
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_proto_scenario_2 *)0)) {
    {
#line 514
    ldv_2_socket_socket = data->arg0;
#line 515
    ldv_2_family_family = data->arg1;
#line 516
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 521
  ldv_2_socket_socket->ops = (struct proto_ops  const  *)ldv_2_proto_ops_proto_ops;
#line 525
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 525
  ldv_2_ldv_param_7_1_default = (struct sockaddr *)tmp;
#line 530
  ldv_2_ret_default = ldv_proto_scenario_bind_2_7(ldv_2_proto_ops_proto_ops->bind,
                                                  ldv_2_socket_socket, ldv_2_ldv_param_7_1_default,
                                                  ldv_2_ldv_param_7_2_default);
#line 534
  ldv_free((void *)ldv_2_ldv_param_7_1_default);
#line 537
  tmp___32 = ldv_undef_int();
  }
#line 537
  if (tmp___32 != 0) {
    {
#line 539
    __VERIFIER_assume(ldv_2_ret_default == 0);
#line 543
    tmp___0 = ldv_xmalloc_unknown_size(0UL);
#line 543
    ldv_2_ldv_param_5_0_default = (struct socket *)tmp___0;
#line 544
    tmp___1 = ldv_xmalloc_unknown_size(0UL);
#line 544
    ldv_2_ldv_param_5_1_default = (struct socket *)tmp___1;
#line 547
    tmp___2 = ldv_undef_int();
    }
    {
#line 548
    if (tmp___2 == 1) {
#line 548
      goto case_1;
    } else {

    }
#line 566
    if (tmp___2 == 2) {
#line 566
      goto case_2;
    } else {

    }
#line 582
    if (tmp___2 == 3) {
#line 582
      goto case_3;
    } else {

    }
#line 600
    if (tmp___2 == 4) {
#line 600
      goto case_4;
    } else {

    }
#line 618
    if (tmp___2 == 5) {
#line 618
      goto case_5;
    } else {

    }
#line 638
    if (tmp___2 == 6) {
#line 638
      goto case_6;
    } else {

    }
#line 658
    if (tmp___2 == 7) {
#line 658
      goto case_7;
    } else {

    }
#line 678
    if (tmp___2 == 8) {
#line 678
      goto case_8;
    } else {

    }
#line 698
    if (tmp___2 == 9) {
#line 698
      goto case_9;
    } else {

    }
#line 714
    if (tmp___2 == 10) {
#line 714
      goto case_10;
    } else {

    }
#line 730
    if (tmp___2 == 11) {
#line 730
      goto case_11;
    } else {

    }
#line 750
    if (tmp___2 == 12) {
#line 750
      goto case_12;
    } else {

    }
#line 770
    if (tmp___2 == 13) {
#line 770
      goto case_13;
    } else {

    }
#line 788
    if (tmp___2 == 14) {
#line 788
      goto case_14;
    } else {

    }
#line 796
    goto switch_default;
    case_1: /* CIL Label */ 
    {
#line 550
    tmp___3 = ldv_xmalloc_unknown_size(0UL);
#line 550
    ldv_2_ldv_param_48_0_default = (struct socket *)tmp___3;
#line 551
    tmp___4 = ldv_xmalloc_unknown_size(0UL);
#line 551
    ldv_2_ldv_param_48_1_default = (struct socket *)tmp___4;
#line 556
    ldv_proto_scenario_callback_2_48(ldv_2_callback_socketpair, ldv_2_ldv_param_48_0_default,
                                     ldv_2_ldv_param_48_1_default);
#line 560
    ldv_free((void *)ldv_2_ldv_param_48_0_default);
#line 561
    ldv_free((void *)ldv_2_ldv_param_48_1_default);
    }
#line 564
    goto ldv_44717;
    case_2: /* CIL Label */ 
    {
#line 568
    tmp___5 = ldv_xmalloc_unknown_size(0UL);
#line 568
    ldv_2_ldv_param_45_0_default = (struct socket *)tmp___5;
#line 573
    ldv_proto_scenario_callback_2_45(ldv_2_callback_shutdown, ldv_2_ldv_param_45_0_default,
                                     ldv_2_ldv_param_45_1_default);
#line 577
    ldv_free((void *)ldv_2_ldv_param_45_0_default);
    }
#line 580
    goto ldv_44717;
    case_3: /* CIL Label */ 
    {
#line 584
    tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 584
    ldv_2_ldv_param_42_0_default = (struct socket *)tmp___6;
#line 585
    tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 585
    ldv_2_ldv_param_42_3_default = (char *)tmp___7;
#line 590
    ldv_proto_scenario_callback_2_42(ldv_2_callback_setsockopt, ldv_2_ldv_param_42_0_default,
                                     ldv_2_ldv_param_42_1_default, ldv_2_ldv_param_42_2_default,
                                     ldv_2_ldv_param_42_3_default, ldv_2_ldv_param_42_4_default);
#line 594
    ldv_free((void *)ldv_2_ldv_param_42_0_default);
#line 595
    ldv_free((void *)ldv_2_ldv_param_42_3_default);
    }
#line 598
    goto ldv_44717;
    case_4: /* CIL Label */ 
    {
#line 602
    tmp___8 = ldv_xmalloc_unknown_size(0UL);
#line 602
    ldv_2_ldv_param_39_0_default = (struct socket *)tmp___8;
#line 603
    tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 603
    ldv_2_ldv_param_39_1_default = (struct page *)tmp___9;
#line 608
    ldv_proto_scenario_callback_2_39(ldv_2_callback_sendpage, ldv_2_ldv_param_39_0_default,
                                     ldv_2_ldv_param_39_1_default, ldv_2_ldv_param_39_2_default,
                                     ldv_2_ldv_param_39_3_default, ldv_2_ldv_param_39_4_default);
#line 612
    ldv_free((void *)ldv_2_ldv_param_39_0_default);
#line 613
    ldv_free((void *)ldv_2_ldv_param_39_1_default);
    }
#line 616
    goto ldv_44717;
    case_5: /* CIL Label */ 
    {
#line 620
    tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 620
    ldv_2_ldv_param_36_0_default = (struct kiocb *)tmp___10;
#line 621
    tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 621
    ldv_2_ldv_param_36_1_default = (struct socket *)tmp___11;
#line 622
    tmp___12 = ldv_xmalloc_unknown_size(0UL);
#line 622
    ldv_2_ldv_param_36_2_default = (struct msghdr *)tmp___12;
#line 627
    ldv_proto_scenario_callback_2_36(ldv_2_callback_sendmsg, ldv_2_ldv_param_36_0_default,
                                     ldv_2_ldv_param_36_1_default, ldv_2_ldv_param_36_2_default,
                                     ldv_2_ldv_param_36_3_default);
#line 631
    ldv_free((void *)ldv_2_ldv_param_36_0_default);
#line 632
    ldv_free((void *)ldv_2_ldv_param_36_1_default);
#line 633
    ldv_free((void *)ldv_2_ldv_param_36_2_default);
    }
#line 636
    goto ldv_44717;
    case_6: /* CIL Label */ 
    {
#line 640
    tmp___13 = ldv_xmalloc_unknown_size(0UL);
#line 640
    ldv_2_ldv_param_33_0_default = (struct kiocb *)tmp___13;
#line 641
    tmp___14 = ldv_xmalloc_unknown_size(0UL);
#line 641
    ldv_2_ldv_param_33_1_default = (struct socket *)tmp___14;
#line 642
    tmp___15 = ldv_xmalloc_unknown_size(0UL);
#line 642
    ldv_2_ldv_param_33_2_default = (struct msghdr *)tmp___15;
#line 647
    ldv_proto_scenario_callback_2_33(ldv_2_callback_recvmsg, ldv_2_ldv_param_33_0_default,
                                     ldv_2_ldv_param_33_1_default, ldv_2_ldv_param_33_2_default,
                                     ldv_2_ldv_param_33_3_default, ldv_2_ldv_param_33_4_default);
#line 651
    ldv_free((void *)ldv_2_ldv_param_33_0_default);
#line 652
    ldv_free((void *)ldv_2_ldv_param_33_1_default);
#line 653
    ldv_free((void *)ldv_2_ldv_param_33_2_default);
    }
#line 656
    goto ldv_44717;
    case_7: /* CIL Label */ 
    {
#line 660
    tmp___16 = ldv_xmalloc_unknown_size(0UL);
#line 660
    ldv_2_ldv_param_30_0_default = (struct file *)tmp___16;
#line 661
    tmp___17 = ldv_xmalloc_unknown_size(0UL);
#line 661
    ldv_2_ldv_param_30_1_default = (struct socket *)tmp___17;
#line 662
    tmp___18 = ldv_xmalloc_unknown_size(0UL);
#line 662
    ldv_2_ldv_param_30_2_default = (struct poll_table_struct *)tmp___18;
#line 667
    ldv_proto_scenario_callback_2_30(ldv_2_callback_poll, ldv_2_ldv_param_30_0_default,
                                     ldv_2_ldv_param_30_1_default, ldv_2_ldv_param_30_2_default);
#line 671
    ldv_free((void *)ldv_2_ldv_param_30_0_default);
#line 672
    ldv_free((void *)ldv_2_ldv_param_30_1_default);
#line 673
    ldv_free((void *)ldv_2_ldv_param_30_2_default);
    }
#line 676
    goto ldv_44717;
    case_8: /* CIL Label */ 
    {
#line 680
    tmp___19 = ldv_xmalloc_unknown_size(0UL);
#line 680
    ldv_2_ldv_param_27_0_default = (struct file *)tmp___19;
#line 681
    tmp___20 = ldv_xmalloc_unknown_size(0UL);
#line 681
    ldv_2_ldv_param_27_1_default = (struct socket *)tmp___20;
#line 682
    tmp___21 = ldv_xmalloc_unknown_size(0UL);
#line 682
    ldv_2_ldv_param_27_2_default = (struct vm_area_struct *)tmp___21;
#line 687
    ldv_proto_scenario_callback_2_27(ldv_2_callback_mmap, ldv_2_ldv_param_27_0_default,
                                     ldv_2_ldv_param_27_1_default, ldv_2_ldv_param_27_2_default);
#line 691
    ldv_free((void *)ldv_2_ldv_param_27_0_default);
#line 692
    ldv_free((void *)ldv_2_ldv_param_27_1_default);
#line 693
    ldv_free((void *)ldv_2_ldv_param_27_2_default);
    }
#line 696
    goto ldv_44717;
    case_9: /* CIL Label */ 
    {
#line 700
    tmp___22 = ldv_xmalloc_unknown_size(0UL);
#line 700
    ldv_2_ldv_param_24_0_default = (struct socket *)tmp___22;
#line 705
    ldv_proto_scenario_callback_2_24(ldv_2_callback_listen, ldv_2_ldv_param_24_0_default,
                                     ldv_2_ldv_param_24_1_default);
#line 709
    ldv_free((void *)ldv_2_ldv_param_24_0_default);
    }
#line 712
    goto ldv_44717;
    case_10: /* CIL Label */ 
    {
#line 716
    tmp___23 = ldv_xmalloc_unknown_size(0UL);
#line 716
    ldv_2_ldv_param_21_0_default = (struct socket *)tmp___23;
#line 721
    ldv_proto_scenario_callback_2_21(ldv_2_callback_ioctl, ldv_2_ldv_param_21_0_default,
                                     ldv_2_ldv_param_21_1_default, ldv_2_ldv_param_21_2_default);
#line 725
    ldv_free((void *)ldv_2_ldv_param_21_0_default);
    }
#line 728
    goto ldv_44717;
    case_11: /* CIL Label */ 
    {
#line 732
    tmp___24 = ldv_xmalloc_unknown_size(0UL);
#line 732
    ldv_2_ldv_param_18_0_default = (struct socket *)tmp___24;
#line 733
    tmp___25 = ldv_xmalloc_unknown_size(0UL);
#line 733
    ldv_2_ldv_param_18_3_default = (char *)tmp___25;
#line 734
    tmp___26 = ldv_xmalloc_unknown_size(0UL);
#line 734
    ldv_2_ldv_param_18_4_default = (int *)tmp___26;
#line 739
    ldv_proto_scenario_callback_2_18(ldv_2_callback_getsockopt, ldv_2_ldv_param_18_0_default,
                                     ldv_2_ldv_param_18_1_default, ldv_2_ldv_param_18_2_default,
                                     ldv_2_ldv_param_18_3_default, ldv_2_ldv_param_18_4_default);
#line 743
    ldv_free((void *)ldv_2_ldv_param_18_0_default);
#line 744
    ldv_free((void *)ldv_2_ldv_param_18_3_default);
#line 745
    ldv_free((void *)ldv_2_ldv_param_18_4_default);
    }
#line 748
    goto ldv_44717;
    case_12: /* CIL Label */ 
    {
#line 752
    tmp___27 = ldv_xmalloc_unknown_size(0UL);
#line 752
    ldv_2_ldv_param_15_0_default = (struct socket *)tmp___27;
#line 753
    tmp___28 = ldv_xmalloc_unknown_size(0UL);
#line 753
    ldv_2_ldv_param_15_1_default = (struct sockaddr *)tmp___28;
#line 754
    tmp___29 = ldv_xmalloc_unknown_size(0UL);
#line 754
    ldv_2_ldv_param_15_2_default = (int *)tmp___29;
#line 759
    ldv_proto_scenario_callback_2_15(ldv_2_callback_getname, ldv_2_ldv_param_15_0_default,
                                     ldv_2_ldv_param_15_1_default, ldv_2_ldv_param_15_2_default,
                                     ldv_2_ldv_param_15_3_default);
#line 763
    ldv_free((void *)ldv_2_ldv_param_15_0_default);
#line 764
    ldv_free((void *)ldv_2_ldv_param_15_1_default);
#line 765
    ldv_free((void *)ldv_2_ldv_param_15_2_default);
    }
#line 768
    goto ldv_44717;
    case_13: /* CIL Label */ 
    {
#line 772
    tmp___30 = ldv_xmalloc_unknown_size(0UL);
#line 772
    ldv_2_ldv_param_12_0_default = (struct socket *)tmp___30;
#line 773
    tmp___31 = ldv_xmalloc_unknown_size(0UL);
#line 773
    ldv_2_ldv_param_12_1_default = (struct sockaddr *)tmp___31;
#line 778
    ldv_proto_scenario_callback_2_12(ldv_2_callback_connect, ldv_2_ldv_param_12_0_default,
                                     ldv_2_ldv_param_12_1_default, ldv_2_ldv_param_12_2_default,
                                     ldv_2_ldv_param_12_3_default);
#line 782
    ldv_free((void *)ldv_2_ldv_param_12_0_default);
#line 783
    ldv_free((void *)ldv_2_ldv_param_12_1_default);
    }
#line 786
    goto ldv_44717;
    case_14: /* CIL Label */ 
    {
#line 791
    ldv_proto_scenario_callback_2_5(ldv_2_callback_accept, ldv_2_ldv_param_5_0_default,
                                    ldv_2_ldv_param_5_1_default, ldv_2_ldv_param_5_2_default);
    }
#line 794
    goto ldv_44717;
    switch_default: /* CIL Label */ 
    {
#line 796
    __VERIFIER_assume(0);
    }
    switch_break: /* CIL Label */ ;
    }
    ldv_44717: 
    {
#line 799
    ldv_free((void *)ldv_2_ldv_param_5_0_default);
#line 800
    ldv_free((void *)ldv_2_ldv_param_5_1_default);
#line 805
    ldv_proto_scenario_release_2_4(ldv_2_proto_ops_proto_ops->release, ldv_2_socket_socket);
    }
  } else {
    {
#line 811
    __VERIFIER_assume(ldv_2_ret_default != 0);
    }
  }
  {
#line 816
  ldv_free((void *)ldv_2_socket_socket);
  }
#line 824
  return;
#line 826
  return;
}
}
#line 831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_3(void *arg0 ) 
{ 
  int (*ldv_3_callback_accept)(struct socket * , struct socket * , int  ) ;
  int (*ldv_3_callback_connect)(struct socket * , struct sockaddr * , int  , int  ) ;
  int (*ldv_3_callback_getname)(struct socket * , struct sockaddr * , int * , int  ) ;
  int (*ldv_3_callback_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
  int (*ldv_3_callback_ioctl)(struct socket * , u32  , size_t  ) ;
  int (*ldv_3_callback_listen)(struct socket * , int  ) ;
  int (*ldv_3_callback_mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
  u32 (*ldv_3_callback_poll)(struct file * , struct socket * , poll_table * ) ;
  int (*ldv_3_callback_recvmsg)(struct kiocb * , struct socket * , struct msghdr * ,
                                size_t  , int  ) ;
  int (*ldv_3_callback_sendmsg)(struct kiocb * , struct socket * , struct msghdr * ,
                                size_t  ) ;
  ssize_t (*ldv_3_callback_sendpage)(struct socket * , struct page * , int  , size_t  ,
                                     int  ) ;
  int (*ldv_3_callback_setsockopt)(struct socket * , int  , int  , char * , u32  ) ;
  int (*ldv_3_callback_shutdown)(struct socket * , int  ) ;
  int (*ldv_3_callback_socketpair)(struct socket * , struct socket * ) ;
  int ldv_3_family_family ;
  struct socket *ldv_3_ldv_param_12_0_default ;
  struct sockaddr *ldv_3_ldv_param_12_1_default ;
  int ldv_3_ldv_param_12_2_default ;
  int ldv_3_ldv_param_12_3_default ;
  struct socket *ldv_3_ldv_param_15_0_default ;
  struct sockaddr *ldv_3_ldv_param_15_1_default ;
  int *ldv_3_ldv_param_15_2_default ;
  int ldv_3_ldv_param_15_3_default ;
  struct socket *ldv_3_ldv_param_18_0_default ;
  int ldv_3_ldv_param_18_1_default ;
  int ldv_3_ldv_param_18_2_default ;
  char *ldv_3_ldv_param_18_3_default ;
  int *ldv_3_ldv_param_18_4_default ;
  struct socket *ldv_3_ldv_param_21_0_default ;
  unsigned int ldv_3_ldv_param_21_1_default ;
  unsigned long ldv_3_ldv_param_21_2_default ;
  struct socket *ldv_3_ldv_param_24_0_default ;
  int ldv_3_ldv_param_24_1_default ;
  struct file *ldv_3_ldv_param_27_0_default ;
  struct socket *ldv_3_ldv_param_27_1_default ;
  struct vm_area_struct *ldv_3_ldv_param_27_2_default ;
  struct file *ldv_3_ldv_param_30_0_default ;
  struct socket *ldv_3_ldv_param_30_1_default ;
  struct poll_table_struct *ldv_3_ldv_param_30_2_default ;
  struct kiocb *ldv_3_ldv_param_33_0_default ;
  struct socket *ldv_3_ldv_param_33_1_default ;
  struct msghdr *ldv_3_ldv_param_33_2_default ;
  unsigned long ldv_3_ldv_param_33_3_default ;
  int ldv_3_ldv_param_33_4_default ;
  struct kiocb *ldv_3_ldv_param_36_0_default ;
  struct socket *ldv_3_ldv_param_36_1_default ;
  struct msghdr *ldv_3_ldv_param_36_2_default ;
  unsigned long ldv_3_ldv_param_36_3_default ;
  struct socket *ldv_3_ldv_param_39_0_default ;
  struct page *ldv_3_ldv_param_39_1_default ;
  int ldv_3_ldv_param_39_2_default ;
  unsigned long ldv_3_ldv_param_39_3_default ;
  int ldv_3_ldv_param_39_4_default ;
  struct socket *ldv_3_ldv_param_42_0_default ;
  int ldv_3_ldv_param_42_1_default ;
  int ldv_3_ldv_param_42_2_default ;
  char *ldv_3_ldv_param_42_3_default ;
  unsigned int ldv_3_ldv_param_42_4_default ;
  struct socket *ldv_3_ldv_param_45_0_default ;
  int ldv_3_ldv_param_45_1_default ;
  struct socket *ldv_3_ldv_param_48_0_default ;
  struct socket *ldv_3_ldv_param_48_1_default ;
  struct socket *ldv_3_ldv_param_5_0_default ;
  struct socket *ldv_3_ldv_param_5_1_default ;
  int ldv_3_ldv_param_5_2_default ;
  struct sockaddr *ldv_3_ldv_param_7_1_default ;
  int ldv_3_ldv_param_7_2_default ;
  struct proto_ops *ldv_3_proto_ops_proto_ops ;
  int ldv_3_ret_default ;
  struct socket *ldv_3_socket_socket ;
  struct ldv_struct_proto_scenario_2 *data ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  void *tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;
  void *tmp___18 ;
  void *tmp___19 ;
  void *tmp___20 ;
  void *tmp___21 ;
  void *tmp___22 ;
  void *tmp___23 ;
  void *tmp___24 ;
  void *tmp___25 ;
  void *tmp___26 ;
  void *tmp___27 ;
  void *tmp___28 ;
  void *tmp___29 ;
  void *tmp___30 ;
  void *tmp___31 ;
  int tmp___32 ;

  {
  {
#line 905
  data = (struct ldv_struct_proto_scenario_2 *)arg0;
#line 909
  ldv_3_family_family = 30;
#line 910
  ldv_3_ret_default = ldv_undef_int();
  }
#line 913
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_proto_scenario_2 *)0)) {
    {
#line 914
    ldv_3_socket_socket = data->arg0;
#line 915
    ldv_3_family_family = data->arg1;
#line 916
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 921
  ldv_3_socket_socket->ops = (struct proto_ops  const  *)ldv_3_proto_ops_proto_ops;
#line 925
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 925
  ldv_3_ldv_param_7_1_default = (struct sockaddr *)tmp;
#line 930
  ldv_3_ret_default = ldv_proto_scenario_bind_3_7(ldv_3_proto_ops_proto_ops->bind,
                                                  ldv_3_socket_socket, ldv_3_ldv_param_7_1_default,
                                                  ldv_3_ldv_param_7_2_default);
#line 934
  ldv_free((void *)ldv_3_ldv_param_7_1_default);
#line 937
  tmp___32 = ldv_undef_int();
  }
#line 937
  if (tmp___32 != 0) {
    {
#line 939
    __VERIFIER_assume(ldv_3_ret_default == 0);
#line 943
    tmp___0 = ldv_xmalloc_unknown_size(0UL);
#line 943
    ldv_3_ldv_param_5_0_default = (struct socket *)tmp___0;
#line 944
    tmp___1 = ldv_xmalloc_unknown_size(0UL);
#line 944
    ldv_3_ldv_param_5_1_default = (struct socket *)tmp___1;
#line 947
    tmp___2 = ldv_undef_int();
    }
    {
#line 948
    if (tmp___2 == 1) {
#line 948
      goto case_1;
    } else {

    }
#line 966
    if (tmp___2 == 2) {
#line 966
      goto case_2;
    } else {

    }
#line 982
    if (tmp___2 == 3) {
#line 982
      goto case_3;
    } else {

    }
#line 1000
    if (tmp___2 == 4) {
#line 1000
      goto case_4;
    } else {

    }
#line 1018
    if (tmp___2 == 5) {
#line 1018
      goto case_5;
    } else {

    }
#line 1038
    if (tmp___2 == 6) {
#line 1038
      goto case_6;
    } else {

    }
#line 1058
    if (tmp___2 == 7) {
#line 1058
      goto case_7;
    } else {

    }
#line 1078
    if (tmp___2 == 8) {
#line 1078
      goto case_8;
    } else {

    }
#line 1098
    if (tmp___2 == 9) {
#line 1098
      goto case_9;
    } else {

    }
#line 1114
    if (tmp___2 == 10) {
#line 1114
      goto case_10;
    } else {

    }
#line 1130
    if (tmp___2 == 11) {
#line 1130
      goto case_11;
    } else {

    }
#line 1150
    if (tmp___2 == 12) {
#line 1150
      goto case_12;
    } else {

    }
#line 1170
    if (tmp___2 == 13) {
#line 1170
      goto case_13;
    } else {

    }
#line 1188
    if (tmp___2 == 14) {
#line 1188
      goto case_14;
    } else {

    }
#line 1196
    goto switch_default;
    case_1: /* CIL Label */ 
    {
#line 950
    tmp___3 = ldv_xmalloc_unknown_size(0UL);
#line 950
    ldv_3_ldv_param_48_0_default = (struct socket *)tmp___3;
#line 951
    tmp___4 = ldv_xmalloc_unknown_size(0UL);
#line 951
    ldv_3_ldv_param_48_1_default = (struct socket *)tmp___4;
#line 956
    ldv_proto_scenario_callback_3_48(ldv_3_callback_socketpair, ldv_3_ldv_param_48_0_default,
                                     ldv_3_ldv_param_48_1_default);
#line 960
    ldv_free((void *)ldv_3_ldv_param_48_0_default);
#line 961
    ldv_free((void *)ldv_3_ldv_param_48_1_default);
    }
#line 964
    goto ldv_44857;
    case_2: /* CIL Label */ 
    {
#line 968
    tmp___5 = ldv_xmalloc_unknown_size(0UL);
#line 968
    ldv_3_ldv_param_45_0_default = (struct socket *)tmp___5;
#line 973
    ldv_proto_scenario_callback_3_45(ldv_3_callback_shutdown, ldv_3_ldv_param_45_0_default,
                                     ldv_3_ldv_param_45_1_default);
#line 977
    ldv_free((void *)ldv_3_ldv_param_45_0_default);
    }
#line 980
    goto ldv_44857;
    case_3: /* CIL Label */ 
    {
#line 984
    tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 984
    ldv_3_ldv_param_42_0_default = (struct socket *)tmp___6;
#line 985
    tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 985
    ldv_3_ldv_param_42_3_default = (char *)tmp___7;
#line 990
    ldv_proto_scenario_callback_3_42(ldv_3_callback_setsockopt, ldv_3_ldv_param_42_0_default,
                                     ldv_3_ldv_param_42_1_default, ldv_3_ldv_param_42_2_default,
                                     ldv_3_ldv_param_42_3_default, ldv_3_ldv_param_42_4_default);
#line 994
    ldv_free((void *)ldv_3_ldv_param_42_0_default);
#line 995
    ldv_free((void *)ldv_3_ldv_param_42_3_default);
    }
#line 998
    goto ldv_44857;
    case_4: /* CIL Label */ 
    {
#line 1002
    tmp___8 = ldv_xmalloc_unknown_size(0UL);
#line 1002
    ldv_3_ldv_param_39_0_default = (struct socket *)tmp___8;
#line 1003
    tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 1003
    ldv_3_ldv_param_39_1_default = (struct page *)tmp___9;
#line 1008
    ldv_proto_scenario_callback_3_39(ldv_3_callback_sendpage, ldv_3_ldv_param_39_0_default,
                                     ldv_3_ldv_param_39_1_default, ldv_3_ldv_param_39_2_default,
                                     ldv_3_ldv_param_39_3_default, ldv_3_ldv_param_39_4_default);
#line 1012
    ldv_free((void *)ldv_3_ldv_param_39_0_default);
#line 1013
    ldv_free((void *)ldv_3_ldv_param_39_1_default);
    }
#line 1016
    goto ldv_44857;
    case_5: /* CIL Label */ 
    {
#line 1020
    tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 1020
    ldv_3_ldv_param_36_0_default = (struct kiocb *)tmp___10;
#line 1021
    tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 1021
    ldv_3_ldv_param_36_1_default = (struct socket *)tmp___11;
#line 1022
    tmp___12 = ldv_xmalloc_unknown_size(0UL);
#line 1022
    ldv_3_ldv_param_36_2_default = (struct msghdr *)tmp___12;
#line 1027
    ldv_proto_scenario_callback_3_36(ldv_3_callback_sendmsg, ldv_3_ldv_param_36_0_default,
                                     ldv_3_ldv_param_36_1_default, ldv_3_ldv_param_36_2_default,
                                     ldv_3_ldv_param_36_3_default);
#line 1031
    ldv_free((void *)ldv_3_ldv_param_36_0_default);
#line 1032
    ldv_free((void *)ldv_3_ldv_param_36_1_default);
#line 1033
    ldv_free((void *)ldv_3_ldv_param_36_2_default);
    }
#line 1036
    goto ldv_44857;
    case_6: /* CIL Label */ 
    {
#line 1040
    tmp___13 = ldv_xmalloc_unknown_size(0UL);
#line 1040
    ldv_3_ldv_param_33_0_default = (struct kiocb *)tmp___13;
#line 1041
    tmp___14 = ldv_xmalloc_unknown_size(0UL);
#line 1041
    ldv_3_ldv_param_33_1_default = (struct socket *)tmp___14;
#line 1042
    tmp___15 = ldv_xmalloc_unknown_size(0UL);
#line 1042
    ldv_3_ldv_param_33_2_default = (struct msghdr *)tmp___15;
#line 1047
    ldv_proto_scenario_callback_3_33(ldv_3_callback_recvmsg, ldv_3_ldv_param_33_0_default,
                                     ldv_3_ldv_param_33_1_default, ldv_3_ldv_param_33_2_default,
                                     ldv_3_ldv_param_33_3_default, ldv_3_ldv_param_33_4_default);
#line 1051
    ldv_free((void *)ldv_3_ldv_param_33_0_default);
#line 1052
    ldv_free((void *)ldv_3_ldv_param_33_1_default);
#line 1053
    ldv_free((void *)ldv_3_ldv_param_33_2_default);
    }
#line 1056
    goto ldv_44857;
    case_7: /* CIL Label */ 
    {
#line 1060
    tmp___16 = ldv_xmalloc_unknown_size(0UL);
#line 1060
    ldv_3_ldv_param_30_0_default = (struct file *)tmp___16;
#line 1061
    tmp___17 = ldv_xmalloc_unknown_size(0UL);
#line 1061
    ldv_3_ldv_param_30_1_default = (struct socket *)tmp___17;
#line 1062
    tmp___18 = ldv_xmalloc_unknown_size(0UL);
#line 1062
    ldv_3_ldv_param_30_2_default = (struct poll_table_struct *)tmp___18;
#line 1067
    ldv_proto_scenario_callback_3_30(ldv_3_callback_poll, ldv_3_ldv_param_30_0_default,
                                     ldv_3_ldv_param_30_1_default, ldv_3_ldv_param_30_2_default);
#line 1071
    ldv_free((void *)ldv_3_ldv_param_30_0_default);
#line 1072
    ldv_free((void *)ldv_3_ldv_param_30_1_default);
#line 1073
    ldv_free((void *)ldv_3_ldv_param_30_2_default);
    }
#line 1076
    goto ldv_44857;
    case_8: /* CIL Label */ 
    {
#line 1080
    tmp___19 = ldv_xmalloc_unknown_size(0UL);
#line 1080
    ldv_3_ldv_param_27_0_default = (struct file *)tmp___19;
#line 1081
    tmp___20 = ldv_xmalloc_unknown_size(0UL);
#line 1081
    ldv_3_ldv_param_27_1_default = (struct socket *)tmp___20;
#line 1082
    tmp___21 = ldv_xmalloc_unknown_size(0UL);
#line 1082
    ldv_3_ldv_param_27_2_default = (struct vm_area_struct *)tmp___21;
#line 1087
    ldv_proto_scenario_callback_3_27(ldv_3_callback_mmap, ldv_3_ldv_param_27_0_default,
                                     ldv_3_ldv_param_27_1_default, ldv_3_ldv_param_27_2_default);
#line 1091
    ldv_free((void *)ldv_3_ldv_param_27_0_default);
#line 1092
    ldv_free((void *)ldv_3_ldv_param_27_1_default);
#line 1093
    ldv_free((void *)ldv_3_ldv_param_27_2_default);
    }
#line 1096
    goto ldv_44857;
    case_9: /* CIL Label */ 
    {
#line 1100
    tmp___22 = ldv_xmalloc_unknown_size(0UL);
#line 1100
    ldv_3_ldv_param_24_0_default = (struct socket *)tmp___22;
#line 1105
    ldv_proto_scenario_callback_3_24(ldv_3_callback_listen, ldv_3_ldv_param_24_0_default,
                                     ldv_3_ldv_param_24_1_default);
#line 1109
    ldv_free((void *)ldv_3_ldv_param_24_0_default);
    }
#line 1112
    goto ldv_44857;
    case_10: /* CIL Label */ 
    {
#line 1116
    tmp___23 = ldv_xmalloc_unknown_size(0UL);
#line 1116
    ldv_3_ldv_param_21_0_default = (struct socket *)tmp___23;
#line 1121
    ldv_proto_scenario_callback_3_21(ldv_3_callback_ioctl, ldv_3_ldv_param_21_0_default,
                                     ldv_3_ldv_param_21_1_default, ldv_3_ldv_param_21_2_default);
#line 1125
    ldv_free((void *)ldv_3_ldv_param_21_0_default);
    }
#line 1128
    goto ldv_44857;
    case_11: /* CIL Label */ 
    {
#line 1132
    tmp___24 = ldv_xmalloc_unknown_size(0UL);
#line 1132
    ldv_3_ldv_param_18_0_default = (struct socket *)tmp___24;
#line 1133
    tmp___25 = ldv_xmalloc_unknown_size(0UL);
#line 1133
    ldv_3_ldv_param_18_3_default = (char *)tmp___25;
#line 1134
    tmp___26 = ldv_xmalloc_unknown_size(0UL);
#line 1134
    ldv_3_ldv_param_18_4_default = (int *)tmp___26;
#line 1139
    ldv_proto_scenario_callback_3_18(ldv_3_callback_getsockopt, ldv_3_ldv_param_18_0_default,
                                     ldv_3_ldv_param_18_1_default, ldv_3_ldv_param_18_2_default,
                                     ldv_3_ldv_param_18_3_default, ldv_3_ldv_param_18_4_default);
#line 1143
    ldv_free((void *)ldv_3_ldv_param_18_0_default);
#line 1144
    ldv_free((void *)ldv_3_ldv_param_18_3_default);
#line 1145
    ldv_free((void *)ldv_3_ldv_param_18_4_default);
    }
#line 1148
    goto ldv_44857;
    case_12: /* CIL Label */ 
    {
#line 1152
    tmp___27 = ldv_xmalloc_unknown_size(0UL);
#line 1152
    ldv_3_ldv_param_15_0_default = (struct socket *)tmp___27;
#line 1153
    tmp___28 = ldv_xmalloc_unknown_size(0UL);
#line 1153
    ldv_3_ldv_param_15_1_default = (struct sockaddr *)tmp___28;
#line 1154
    tmp___29 = ldv_xmalloc_unknown_size(0UL);
#line 1154
    ldv_3_ldv_param_15_2_default = (int *)tmp___29;
#line 1159
    ldv_proto_scenario_callback_3_15(ldv_3_callback_getname, ldv_3_ldv_param_15_0_default,
                                     ldv_3_ldv_param_15_1_default, ldv_3_ldv_param_15_2_default,
                                     ldv_3_ldv_param_15_3_default);
#line 1163
    ldv_free((void *)ldv_3_ldv_param_15_0_default);
#line 1164
    ldv_free((void *)ldv_3_ldv_param_15_1_default);
#line 1165
    ldv_free((void *)ldv_3_ldv_param_15_2_default);
    }
#line 1168
    goto ldv_44857;
    case_13: /* CIL Label */ 
    {
#line 1172
    tmp___30 = ldv_xmalloc_unknown_size(0UL);
#line 1172
    ldv_3_ldv_param_12_0_default = (struct socket *)tmp___30;
#line 1173
    tmp___31 = ldv_xmalloc_unknown_size(0UL);
#line 1173
    ldv_3_ldv_param_12_1_default = (struct sockaddr *)tmp___31;
#line 1178
    ldv_proto_scenario_callback_3_12(ldv_3_callback_connect, ldv_3_ldv_param_12_0_default,
                                     ldv_3_ldv_param_12_1_default, ldv_3_ldv_param_12_2_default,
                                     ldv_3_ldv_param_12_3_default);
#line 1182
    ldv_free((void *)ldv_3_ldv_param_12_0_default);
#line 1183
    ldv_free((void *)ldv_3_ldv_param_12_1_default);
    }
#line 1186
    goto ldv_44857;
    case_14: /* CIL Label */ 
    {
#line 1191
    ldv_proto_scenario_callback_3_5(ldv_3_callback_accept, ldv_3_ldv_param_5_0_default,
                                    ldv_3_ldv_param_5_1_default, ldv_3_ldv_param_5_2_default);
    }
#line 1194
    goto ldv_44857;
    switch_default: /* CIL Label */ 
    {
#line 1196
    __VERIFIER_assume(0);
    }
    switch_break: /* CIL Label */ ;
    }
    ldv_44857: 
    {
#line 1199
    ldv_free((void *)ldv_3_ldv_param_5_0_default);
#line 1200
    ldv_free((void *)ldv_3_ldv_param_5_1_default);
#line 1205
    ldv_proto_scenario_release_3_4(ldv_3_proto_ops_proto_ops->release, ldv_3_socket_socket);
    }
  } else {
    {
#line 1211
    __VERIFIER_assume(ldv_3_ret_default != 0);
    }
  }
  {
#line 1216
  ldv_free((void *)ldv_3_socket_socket);
  }
#line 1224
  return;
#line 1226
  return;
}
}
#line 1231 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_4(void *arg0 ) 
{ 
  int (*ldv_4_callback_accept)(struct socket * , struct socket * , int  ) ;
  int (*ldv_4_callback_connect)(struct socket * , struct sockaddr * , int  , int  ) ;
  int (*ldv_4_callback_getname)(struct socket * , struct sockaddr * , int * , int  ) ;
  int (*ldv_4_callback_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
  int (*ldv_4_callback_ioctl)(struct socket * , u32  , size_t  ) ;
  int (*ldv_4_callback_listen)(struct socket * , int  ) ;
  int (*ldv_4_callback_mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
  u32 (*ldv_4_callback_poll)(struct file * , struct socket * , poll_table * ) ;
  int (*ldv_4_callback_recvmsg)(struct kiocb * , struct socket * , struct msghdr * ,
                                size_t  , int  ) ;
  int (*ldv_4_callback_sendmsg)(struct kiocb * , struct socket * , struct msghdr * ,
                                size_t  ) ;
  ssize_t (*ldv_4_callback_sendpage)(struct socket * , struct page * , int  , size_t  ,
                                     int  ) ;
  int (*ldv_4_callback_setsockopt)(struct socket * , int  , int  , char * , u32  ) ;
  int (*ldv_4_callback_shutdown)(struct socket * , int  ) ;
  int (*ldv_4_callback_socketpair)(struct socket * , struct socket * ) ;
  int ldv_4_family_family ;
  struct socket *ldv_4_ldv_param_12_0_default ;
  struct sockaddr *ldv_4_ldv_param_12_1_default ;
  int ldv_4_ldv_param_12_2_default ;
  int ldv_4_ldv_param_12_3_default ;
  struct socket *ldv_4_ldv_param_15_0_default ;
  struct sockaddr *ldv_4_ldv_param_15_1_default ;
  int *ldv_4_ldv_param_15_2_default ;
  int ldv_4_ldv_param_15_3_default ;
  struct socket *ldv_4_ldv_param_18_0_default ;
  int ldv_4_ldv_param_18_1_default ;
  int ldv_4_ldv_param_18_2_default ;
  char *ldv_4_ldv_param_18_3_default ;
  int *ldv_4_ldv_param_18_4_default ;
  struct socket *ldv_4_ldv_param_21_0_default ;
  unsigned int ldv_4_ldv_param_21_1_default ;
  unsigned long ldv_4_ldv_param_21_2_default ;
  struct socket *ldv_4_ldv_param_24_0_default ;
  int ldv_4_ldv_param_24_1_default ;
  struct file *ldv_4_ldv_param_27_0_default ;
  struct socket *ldv_4_ldv_param_27_1_default ;
  struct vm_area_struct *ldv_4_ldv_param_27_2_default ;
  struct file *ldv_4_ldv_param_30_0_default ;
  struct socket *ldv_4_ldv_param_30_1_default ;
  struct poll_table_struct *ldv_4_ldv_param_30_2_default ;
  struct kiocb *ldv_4_ldv_param_33_0_default ;
  struct socket *ldv_4_ldv_param_33_1_default ;
  struct msghdr *ldv_4_ldv_param_33_2_default ;
  unsigned long ldv_4_ldv_param_33_3_default ;
  int ldv_4_ldv_param_33_4_default ;
  struct kiocb *ldv_4_ldv_param_36_0_default ;
  struct socket *ldv_4_ldv_param_36_1_default ;
  struct msghdr *ldv_4_ldv_param_36_2_default ;
  unsigned long ldv_4_ldv_param_36_3_default ;
  struct socket *ldv_4_ldv_param_39_0_default ;
  struct page *ldv_4_ldv_param_39_1_default ;
  int ldv_4_ldv_param_39_2_default ;
  unsigned long ldv_4_ldv_param_39_3_default ;
  int ldv_4_ldv_param_39_4_default ;
  struct socket *ldv_4_ldv_param_42_0_default ;
  int ldv_4_ldv_param_42_1_default ;
  int ldv_4_ldv_param_42_2_default ;
  char *ldv_4_ldv_param_42_3_default ;
  unsigned int ldv_4_ldv_param_42_4_default ;
  struct socket *ldv_4_ldv_param_45_0_default ;
  int ldv_4_ldv_param_45_1_default ;
  struct socket *ldv_4_ldv_param_48_0_default ;
  struct socket *ldv_4_ldv_param_48_1_default ;
  struct socket *ldv_4_ldv_param_5_0_default ;
  struct socket *ldv_4_ldv_param_5_1_default ;
  int ldv_4_ldv_param_5_2_default ;
  struct sockaddr *ldv_4_ldv_param_7_1_default ;
  int ldv_4_ldv_param_7_2_default ;
  struct proto_ops *ldv_4_proto_ops_proto_ops ;
  int ldv_4_ret_default ;
  struct socket *ldv_4_socket_socket ;
  struct ldv_struct_proto_scenario_2 *data ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  void *tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;
  void *tmp___18 ;
  void *tmp___19 ;
  void *tmp___20 ;
  void *tmp___21 ;
  void *tmp___22 ;
  void *tmp___23 ;
  void *tmp___24 ;
  void *tmp___25 ;
  void *tmp___26 ;
  void *tmp___27 ;
  void *tmp___28 ;
  void *tmp___29 ;
  void *tmp___30 ;
  void *tmp___31 ;
  int tmp___32 ;

  {
  {
#line 1305
  data = (struct ldv_struct_proto_scenario_2 *)arg0;
#line 1309
  ldv_4_family_family = 30;
#line 1310
  ldv_4_ret_default = ldv_undef_int();
  }
#line 1313
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_proto_scenario_2 *)0)) {
    {
#line 1314
    ldv_4_socket_socket = data->arg0;
#line 1315
    ldv_4_family_family = data->arg1;
#line 1316
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 1321
  ldv_4_socket_socket->ops = (struct proto_ops  const  *)ldv_4_proto_ops_proto_ops;
#line 1325
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 1325
  ldv_4_ldv_param_7_1_default = (struct sockaddr *)tmp;
#line 1330
  ldv_4_ret_default = ldv_proto_scenario_bind_4_7(ldv_4_proto_ops_proto_ops->bind,
                                                  ldv_4_socket_socket, ldv_4_ldv_param_7_1_default,
                                                  ldv_4_ldv_param_7_2_default);
#line 1334
  ldv_free((void *)ldv_4_ldv_param_7_1_default);
#line 1337
  tmp___32 = ldv_undef_int();
  }
#line 1337
  if (tmp___32 != 0) {
    {
#line 1339
    __VERIFIER_assume(ldv_4_ret_default == 0);
#line 1343
    tmp___0 = ldv_xmalloc_unknown_size(0UL);
#line 1343
    ldv_4_ldv_param_5_0_default = (struct socket *)tmp___0;
#line 1344
    tmp___1 = ldv_xmalloc_unknown_size(0UL);
#line 1344
    ldv_4_ldv_param_5_1_default = (struct socket *)tmp___1;
#line 1347
    tmp___2 = ldv_undef_int();
    }
    {
#line 1348
    if (tmp___2 == 1) {
#line 1348
      goto case_1;
    } else {

    }
#line 1366
    if (tmp___2 == 2) {
#line 1366
      goto case_2;
    } else {

    }
#line 1382
    if (tmp___2 == 3) {
#line 1382
      goto case_3;
    } else {

    }
#line 1400
    if (tmp___2 == 4) {
#line 1400
      goto case_4;
    } else {

    }
#line 1418
    if (tmp___2 == 5) {
#line 1418
      goto case_5;
    } else {

    }
#line 1438
    if (tmp___2 == 6) {
#line 1438
      goto case_6;
    } else {

    }
#line 1458
    if (tmp___2 == 7) {
#line 1458
      goto case_7;
    } else {

    }
#line 1478
    if (tmp___2 == 8) {
#line 1478
      goto case_8;
    } else {

    }
#line 1498
    if (tmp___2 == 9) {
#line 1498
      goto case_9;
    } else {

    }
#line 1514
    if (tmp___2 == 10) {
#line 1514
      goto case_10;
    } else {

    }
#line 1530
    if (tmp___2 == 11) {
#line 1530
      goto case_11;
    } else {

    }
#line 1550
    if (tmp___2 == 12) {
#line 1550
      goto case_12;
    } else {

    }
#line 1570
    if (tmp___2 == 13) {
#line 1570
      goto case_13;
    } else {

    }
#line 1588
    if (tmp___2 == 14) {
#line 1588
      goto case_14;
    } else {

    }
#line 1596
    goto switch_default;
    case_1: /* CIL Label */ 
    {
#line 1350
    tmp___3 = ldv_xmalloc_unknown_size(0UL);
#line 1350
    ldv_4_ldv_param_48_0_default = (struct socket *)tmp___3;
#line 1351
    tmp___4 = ldv_xmalloc_unknown_size(0UL);
#line 1351
    ldv_4_ldv_param_48_1_default = (struct socket *)tmp___4;
#line 1356
    ldv_proto_scenario_callback_4_48(ldv_4_callback_socketpair, ldv_4_ldv_param_48_0_default,
                                     ldv_4_ldv_param_48_1_default);
#line 1360
    ldv_free((void *)ldv_4_ldv_param_48_0_default);
#line 1361
    ldv_free((void *)ldv_4_ldv_param_48_1_default);
    }
#line 1364
    goto ldv_44997;
    case_2: /* CIL Label */ 
    {
#line 1368
    tmp___5 = ldv_xmalloc_unknown_size(0UL);
#line 1368
    ldv_4_ldv_param_45_0_default = (struct socket *)tmp___5;
#line 1373
    ldv_proto_scenario_callback_4_45(ldv_4_callback_shutdown, ldv_4_ldv_param_45_0_default,
                                     ldv_4_ldv_param_45_1_default);
#line 1377
    ldv_free((void *)ldv_4_ldv_param_45_0_default);
    }
#line 1380
    goto ldv_44997;
    case_3: /* CIL Label */ 
    {
#line 1384
    tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 1384
    ldv_4_ldv_param_42_0_default = (struct socket *)tmp___6;
#line 1385
    tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 1385
    ldv_4_ldv_param_42_3_default = (char *)tmp___7;
#line 1390
    ldv_proto_scenario_callback_4_42(ldv_4_callback_setsockopt, ldv_4_ldv_param_42_0_default,
                                     ldv_4_ldv_param_42_1_default, ldv_4_ldv_param_42_2_default,
                                     ldv_4_ldv_param_42_3_default, ldv_4_ldv_param_42_4_default);
#line 1394
    ldv_free((void *)ldv_4_ldv_param_42_0_default);
#line 1395
    ldv_free((void *)ldv_4_ldv_param_42_3_default);
    }
#line 1398
    goto ldv_44997;
    case_4: /* CIL Label */ 
    {
#line 1402
    tmp___8 = ldv_xmalloc_unknown_size(0UL);
#line 1402
    ldv_4_ldv_param_39_0_default = (struct socket *)tmp___8;
#line 1403
    tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 1403
    ldv_4_ldv_param_39_1_default = (struct page *)tmp___9;
#line 1408
    ldv_proto_scenario_callback_4_39(ldv_4_callback_sendpage, ldv_4_ldv_param_39_0_default,
                                     ldv_4_ldv_param_39_1_default, ldv_4_ldv_param_39_2_default,
                                     ldv_4_ldv_param_39_3_default, ldv_4_ldv_param_39_4_default);
#line 1412
    ldv_free((void *)ldv_4_ldv_param_39_0_default);
#line 1413
    ldv_free((void *)ldv_4_ldv_param_39_1_default);
    }
#line 1416
    goto ldv_44997;
    case_5: /* CIL Label */ 
    {
#line 1420
    tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 1420
    ldv_4_ldv_param_36_0_default = (struct kiocb *)tmp___10;
#line 1421
    tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 1421
    ldv_4_ldv_param_36_1_default = (struct socket *)tmp___11;
#line 1422
    tmp___12 = ldv_xmalloc_unknown_size(0UL);
#line 1422
    ldv_4_ldv_param_36_2_default = (struct msghdr *)tmp___12;
#line 1427
    ldv_proto_scenario_callback_4_36(ldv_4_callback_sendmsg, ldv_4_ldv_param_36_0_default,
                                     ldv_4_ldv_param_36_1_default, ldv_4_ldv_param_36_2_default,
                                     ldv_4_ldv_param_36_3_default);
#line 1431
    ldv_free((void *)ldv_4_ldv_param_36_0_default);
#line 1432
    ldv_free((void *)ldv_4_ldv_param_36_1_default);
#line 1433
    ldv_free((void *)ldv_4_ldv_param_36_2_default);
    }
#line 1436
    goto ldv_44997;
    case_6: /* CIL Label */ 
    {
#line 1440
    tmp___13 = ldv_xmalloc_unknown_size(0UL);
#line 1440
    ldv_4_ldv_param_33_0_default = (struct kiocb *)tmp___13;
#line 1441
    tmp___14 = ldv_xmalloc_unknown_size(0UL);
#line 1441
    ldv_4_ldv_param_33_1_default = (struct socket *)tmp___14;
#line 1442
    tmp___15 = ldv_xmalloc_unknown_size(0UL);
#line 1442
    ldv_4_ldv_param_33_2_default = (struct msghdr *)tmp___15;
#line 1447
    ldv_proto_scenario_callback_4_33(ldv_4_callback_recvmsg, ldv_4_ldv_param_33_0_default,
                                     ldv_4_ldv_param_33_1_default, ldv_4_ldv_param_33_2_default,
                                     ldv_4_ldv_param_33_3_default, ldv_4_ldv_param_33_4_default);
#line 1451
    ldv_free((void *)ldv_4_ldv_param_33_0_default);
#line 1452
    ldv_free((void *)ldv_4_ldv_param_33_1_default);
#line 1453
    ldv_free((void *)ldv_4_ldv_param_33_2_default);
    }
#line 1456
    goto ldv_44997;
    case_7: /* CIL Label */ 
    {
#line 1460
    tmp___16 = ldv_xmalloc_unknown_size(0UL);
#line 1460
    ldv_4_ldv_param_30_0_default = (struct file *)tmp___16;
#line 1461
    tmp___17 = ldv_xmalloc_unknown_size(0UL);
#line 1461
    ldv_4_ldv_param_30_1_default = (struct socket *)tmp___17;
#line 1462
    tmp___18 = ldv_xmalloc_unknown_size(0UL);
#line 1462
    ldv_4_ldv_param_30_2_default = (struct poll_table_struct *)tmp___18;
#line 1467
    ldv_proto_scenario_callback_4_30(ldv_4_callback_poll, ldv_4_ldv_param_30_0_default,
                                     ldv_4_ldv_param_30_1_default, ldv_4_ldv_param_30_2_default);
#line 1471
    ldv_free((void *)ldv_4_ldv_param_30_0_default);
#line 1472
    ldv_free((void *)ldv_4_ldv_param_30_1_default);
#line 1473
    ldv_free((void *)ldv_4_ldv_param_30_2_default);
    }
#line 1476
    goto ldv_44997;
    case_8: /* CIL Label */ 
    {
#line 1480
    tmp___19 = ldv_xmalloc_unknown_size(0UL);
#line 1480
    ldv_4_ldv_param_27_0_default = (struct file *)tmp___19;
#line 1481
    tmp___20 = ldv_xmalloc_unknown_size(0UL);
#line 1481
    ldv_4_ldv_param_27_1_default = (struct socket *)tmp___20;
#line 1482
    tmp___21 = ldv_xmalloc_unknown_size(0UL);
#line 1482
    ldv_4_ldv_param_27_2_default = (struct vm_area_struct *)tmp___21;
#line 1487
    ldv_proto_scenario_callback_4_27(ldv_4_callback_mmap, ldv_4_ldv_param_27_0_default,
                                     ldv_4_ldv_param_27_1_default, ldv_4_ldv_param_27_2_default);
#line 1491
    ldv_free((void *)ldv_4_ldv_param_27_0_default);
#line 1492
    ldv_free((void *)ldv_4_ldv_param_27_1_default);
#line 1493
    ldv_free((void *)ldv_4_ldv_param_27_2_default);
    }
#line 1496
    goto ldv_44997;
    case_9: /* CIL Label */ 
    {
#line 1500
    tmp___22 = ldv_xmalloc_unknown_size(0UL);
#line 1500
    ldv_4_ldv_param_24_0_default = (struct socket *)tmp___22;
#line 1505
    ldv_proto_scenario_callback_4_24(ldv_4_callback_listen, ldv_4_ldv_param_24_0_default,
                                     ldv_4_ldv_param_24_1_default);
#line 1509
    ldv_free((void *)ldv_4_ldv_param_24_0_default);
    }
#line 1512
    goto ldv_44997;
    case_10: /* CIL Label */ 
    {
#line 1516
    tmp___23 = ldv_xmalloc_unknown_size(0UL);
#line 1516
    ldv_4_ldv_param_21_0_default = (struct socket *)tmp___23;
#line 1521
    ldv_proto_scenario_callback_4_21(ldv_4_callback_ioctl, ldv_4_ldv_param_21_0_default,
                                     ldv_4_ldv_param_21_1_default, ldv_4_ldv_param_21_2_default);
#line 1525
    ldv_free((void *)ldv_4_ldv_param_21_0_default);
    }
#line 1528
    goto ldv_44997;
    case_11: /* CIL Label */ 
    {
#line 1532
    tmp___24 = ldv_xmalloc_unknown_size(0UL);
#line 1532
    ldv_4_ldv_param_18_0_default = (struct socket *)tmp___24;
#line 1533
    tmp___25 = ldv_xmalloc_unknown_size(0UL);
#line 1533
    ldv_4_ldv_param_18_3_default = (char *)tmp___25;
#line 1534
    tmp___26 = ldv_xmalloc_unknown_size(0UL);
#line 1534
    ldv_4_ldv_param_18_4_default = (int *)tmp___26;
#line 1539
    ldv_proto_scenario_callback_4_18(ldv_4_callback_getsockopt, ldv_4_ldv_param_18_0_default,
                                     ldv_4_ldv_param_18_1_default, ldv_4_ldv_param_18_2_default,
                                     ldv_4_ldv_param_18_3_default, ldv_4_ldv_param_18_4_default);
#line 1543
    ldv_free((void *)ldv_4_ldv_param_18_0_default);
#line 1544
    ldv_free((void *)ldv_4_ldv_param_18_3_default);
#line 1545
    ldv_free((void *)ldv_4_ldv_param_18_4_default);
    }
#line 1548
    goto ldv_44997;
    case_12: /* CIL Label */ 
    {
#line 1552
    tmp___27 = ldv_xmalloc_unknown_size(0UL);
#line 1552
    ldv_4_ldv_param_15_0_default = (struct socket *)tmp___27;
#line 1553
    tmp___28 = ldv_xmalloc_unknown_size(0UL);
#line 1553
    ldv_4_ldv_param_15_1_default = (struct sockaddr *)tmp___28;
#line 1554
    tmp___29 = ldv_xmalloc_unknown_size(0UL);
#line 1554
    ldv_4_ldv_param_15_2_default = (int *)tmp___29;
#line 1559
    ldv_proto_scenario_callback_4_15(ldv_4_callback_getname, ldv_4_ldv_param_15_0_default,
                                     ldv_4_ldv_param_15_1_default, ldv_4_ldv_param_15_2_default,
                                     ldv_4_ldv_param_15_3_default);
#line 1563
    ldv_free((void *)ldv_4_ldv_param_15_0_default);
#line 1564
    ldv_free((void *)ldv_4_ldv_param_15_1_default);
#line 1565
    ldv_free((void *)ldv_4_ldv_param_15_2_default);
    }
#line 1568
    goto ldv_44997;
    case_13: /* CIL Label */ 
    {
#line 1572
    tmp___30 = ldv_xmalloc_unknown_size(0UL);
#line 1572
    ldv_4_ldv_param_12_0_default = (struct socket *)tmp___30;
#line 1573
    tmp___31 = ldv_xmalloc_unknown_size(0UL);
#line 1573
    ldv_4_ldv_param_12_1_default = (struct sockaddr *)tmp___31;
#line 1578
    ldv_proto_scenario_callback_4_12(ldv_4_callback_connect, ldv_4_ldv_param_12_0_default,
                                     ldv_4_ldv_param_12_1_default, ldv_4_ldv_param_12_2_default,
                                     ldv_4_ldv_param_12_3_default);
#line 1582
    ldv_free((void *)ldv_4_ldv_param_12_0_default);
#line 1583
    ldv_free((void *)ldv_4_ldv_param_12_1_default);
    }
#line 1586
    goto ldv_44997;
    case_14: /* CIL Label */ 
    {
#line 1591
    ldv_proto_scenario_callback_4_5(ldv_4_callback_accept, ldv_4_ldv_param_5_0_default,
                                    ldv_4_ldv_param_5_1_default, ldv_4_ldv_param_5_2_default);
    }
#line 1594
    goto ldv_44997;
    switch_default: /* CIL Label */ 
    {
#line 1596
    __VERIFIER_assume(0);
    }
    switch_break: /* CIL Label */ ;
    }
    ldv_44997: 
    {
#line 1599
    ldv_free((void *)ldv_4_ldv_param_5_0_default);
#line 1600
    ldv_free((void *)ldv_4_ldv_param_5_1_default);
#line 1605
    ldv_proto_scenario_release_4_4(ldv_4_proto_ops_proto_ops->release, ldv_4_socket_socket);
    }
  } else {
    {
#line 1611
    __VERIFIER_assume(ldv_4_ret_default != 0);
    }
  }
  {
#line 1616
  ldv_free((void *)ldv_4_socket_socket);
  }
#line 1624
  return;
#line 1626
  return;
}
}
#line 1631 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
int ldv_proto_scenario_bind_2_7(int (*arg0)(struct socket * , struct sockaddr * ,
                                            int  ) , struct socket *arg1 , struct sockaddr *arg2 ,
                                int arg3 ) 
{ 
  int tmp ;

  {
  {
#line 1632
  tmp = bind(arg1, arg2, arg3);
  }
#line 1632
  return (tmp);
}
}
#line 1636 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
int ldv_proto_scenario_bind_3_7(int (*arg0)(struct socket * , struct sockaddr * ,
                                            int  ) , struct socket *arg1 , struct sockaddr *arg2 ,
                                int arg3 ) 
{ 
  int tmp ;

  {
  {
#line 1637
  tmp = bind(arg1, arg2, arg3);
  }
#line 1637
  return (tmp);
}
}
#line 1641 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
int ldv_proto_scenario_bind_4_7(int (*arg0)(struct socket * , struct sockaddr * ,
                                            int  ) , struct socket *arg1 , struct sockaddr *arg2 ,
                                int arg3 ) 
{ 
  int tmp ;

  {
  {
#line 1642
  tmp = bind(arg1, arg2, arg3);
  }
#line 1642
  return (tmp);
}
}
#line 1646 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_12(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int  , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int arg3 , int arg4 ) 
{ 


  {
  {
#line 1647
  connect(arg1, arg2, arg3, arg4);
  }
#line 1648
  return;
}
}
#line 1651 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_15(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int * , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int *arg3 , int arg4 ) 
{ 


  {
  {
#line 1652
  get_name(arg1, arg2, arg3, arg4);
  }
#line 1653
  return;
}
}
#line 1656 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_18(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , int * ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , int *arg5 ) 
{ 


  {
  {
#line 1657
  getsockopt(arg1, arg2, arg3, arg4, arg5);
  }
#line 1658
  return;
}
}
#line 1661 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_21(int (*arg0)(struct socket * , u32  , size_t  ) ,
                                      struct socket *arg1 , unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1662
  sock_no_ioctl(arg1, arg2, arg3);
  }
#line 1663
  return;
}
}
#line 1666 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_24(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) 
{ 


  {
  {
#line 1667
  sock_no_listen(arg1, arg2);
  }
#line 1668
  return;
}
}
#line 1671 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_27(int (*arg0)(struct file * , struct socket * ,
                                                  struct vm_area_struct * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct vm_area_struct *arg3 ) 
{ 


  {
  {
#line 1672
  sock_no_mmap(arg1, arg2, arg3);
  }
#line 1673
  return;
}
}
#line 1676 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_30(u32 (*arg0)(struct file * , struct socket * ,
                                                  poll_table * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct poll_table_struct *arg3 ) 
{ 


  {
  {
#line 1677
  poll(arg1, arg2, arg3);
  }
#line 1678
  return;
}
}
#line 1681 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_33(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  , int  ) ,
                                      struct kiocb *arg1 , struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 , int arg5 ) 
{ 


  {
  {
#line 1682
  recv_msg(arg1, arg2, arg3, arg4, arg5);
  }
#line 1683
  return;
}
}
#line 1686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_36(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  ) , struct kiocb *arg1 ,
                                      struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 ) 
{ 


  {
  {
#line 1687
  send_msg(arg1, arg2, arg3, arg4);
  }
#line 1688
  return;
}
}
#line 1691 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_39(ssize_t (*arg0)(struct socket * , struct page * ,
                                                      int  , size_t  , int  ) , struct socket *arg1 ,
                                      struct page *arg2 , int arg3 , unsigned long arg4 ,
                                      int arg5 ) 
{ 


  {
  {
#line 1692
  sock_no_sendpage(arg1, arg2, arg3, arg4, arg5);
  }
#line 1693
  return;
}
}
#line 1696 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_42(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , u32  ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , unsigned int arg5 ) 
{ 


  {
  {
#line 1697
  setsockopt(arg1, arg2, arg3, arg4, arg5);
  }
#line 1698
  return;
}
}
#line 1701 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_45(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) 
{ 


  {
  {
#line 1702
  shutdown(arg1, arg2);
  }
#line 1703
  return;
}
}
#line 1706 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_48(int (*arg0)(struct socket * , struct socket * ) ,
                                      struct socket *arg1 , struct socket *arg2 ) 
{ 


  {
  {
#line 1707
  sock_no_socketpair(arg1, arg2);
  }
#line 1708
  return;
}
}
#line 1711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_2_5(int (*arg0)(struct socket * , struct socket * ,
                                                 int  ) , struct socket *arg1 , struct socket *arg2 ,
                                     int arg3 ) 
{ 


  {
  {
#line 1712
  sock_no_accept(arg1, arg2, arg3);
  }
#line 1713
  return;
}
}
#line 1716 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_12(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int  , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int arg3 , int arg4 ) 
{ 


  {
  {
#line 1717
  connect(arg1, arg2, arg3, arg4);
  }
#line 1718
  return;
}
}
#line 1721 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_15(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int * , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int *arg3 , int arg4 ) 
{ 


  {
  {
#line 1722
  get_name(arg1, arg2, arg3, arg4);
  }
#line 1723
  return;
}
}
#line 1726 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_18(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , int * ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , int *arg5 ) 
{ 


  {
  {
#line 1727
  getsockopt(arg1, arg2, arg3, arg4, arg5);
  }
#line 1728
  return;
}
}
#line 1731 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_21(int (*arg0)(struct socket * , u32  , size_t  ) ,
                                      struct socket *arg1 , unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1732
  sock_no_ioctl(arg1, arg2, arg3);
  }
#line 1733
  return;
}
}
#line 1736 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_24(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) 
{ 


  {
  {
#line 1737
  listen(arg1, arg2);
  }
#line 1738
  return;
}
}
#line 1741 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_27(int (*arg0)(struct file * , struct socket * ,
                                                  struct vm_area_struct * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct vm_area_struct *arg3 ) 
{ 


  {
  {
#line 1742
  sock_no_mmap(arg1, arg2, arg3);
  }
#line 1743
  return;
}
}
#line 1746 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_30(u32 (*arg0)(struct file * , struct socket * ,
                                                  poll_table * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct poll_table_struct *arg3 ) 
{ 


  {
  {
#line 1747
  poll(arg1, arg2, arg3);
  }
#line 1748
  return;
}
}
#line 1751 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_33(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  , int  ) ,
                                      struct kiocb *arg1 , struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 , int arg5 ) 
{ 


  {
  {
#line 1752
  recv_msg(arg1, arg2, arg3, arg4, arg5);
  }
#line 1753
  return;
}
}
#line 1756 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_36(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  ) , struct kiocb *arg1 ,
                                      struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 ) 
{ 


  {
  {
#line 1757
  send_packet(arg1, arg2, arg3, arg4);
  }
#line 1758
  return;
}
}
#line 1761 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_39(ssize_t (*arg0)(struct socket * , struct page * ,
                                                      int  , size_t  , int  ) , struct socket *arg1 ,
                                      struct page *arg2 , int arg3 , unsigned long arg4 ,
                                      int arg5 ) 
{ 


  {
  {
#line 1762
  sock_no_sendpage(arg1, arg2, arg3, arg4, arg5);
  }
#line 1763
  return;
}
}
#line 1766 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_42(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , u32  ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , unsigned int arg5 ) 
{ 


  {
  {
#line 1767
  setsockopt(arg1, arg2, arg3, arg4, arg5);
  }
#line 1768
  return;
}
}
#line 1771 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_45(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) 
{ 


  {
  {
#line 1772
  shutdown(arg1, arg2);
  }
#line 1773
  return;
}
}
#line 1776 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_48(int (*arg0)(struct socket * , struct socket * ) ,
                                      struct socket *arg1 , struct socket *arg2 ) 
{ 


  {
  {
#line 1777
  sock_no_socketpair(arg1, arg2);
  }
#line 1778
  return;
}
}
#line 1781 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_3_5(int (*arg0)(struct socket * , struct socket * ,
                                                 int  ) , struct socket *arg1 , struct socket *arg2 ,
                                     int arg3 ) 
{ 


  {
  {
#line 1782
  accept(arg1, arg2, arg3);
  }
#line 1783
  return;
}
}
#line 1786 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_12(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int  , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int arg3 , int arg4 ) 
{ 


  {
  {
#line 1787
  connect(arg1, arg2, arg3, arg4);
  }
#line 1788
  return;
}
}
#line 1791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_15(int (*arg0)(struct socket * , struct sockaddr * ,
                                                  int * , int  ) , struct socket *arg1 ,
                                      struct sockaddr *arg2 , int *arg3 , int arg4 ) 
{ 


  {
  {
#line 1792
  get_name(arg1, arg2, arg3, arg4);
  }
#line 1793
  return;
}
}
#line 1796 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_18(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , int * ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , int *arg5 ) 
{ 


  {
  {
#line 1797
  getsockopt(arg1, arg2, arg3, arg4, arg5);
  }
#line 1798
  return;
}
}
#line 1801 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_21(int (*arg0)(struct socket * , u32  , size_t  ) ,
                                      struct socket *arg1 , unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1802
  sock_no_ioctl(arg1, arg2, arg3);
  }
#line 1803
  return;
}
}
#line 1806 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_24(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) 
{ 


  {
  {
#line 1807
  listen(arg1, arg2);
  }
#line 1808
  return;
}
}
#line 1811 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_27(int (*arg0)(struct file * , struct socket * ,
                                                  struct vm_area_struct * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct vm_area_struct *arg3 ) 
{ 


  {
  {
#line 1812
  sock_no_mmap(arg1, arg2, arg3);
  }
#line 1813
  return;
}
}
#line 1816 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_30(u32 (*arg0)(struct file * , struct socket * ,
                                                  poll_table * ) , struct file *arg1 ,
                                      struct socket *arg2 , struct poll_table_struct *arg3 ) 
{ 


  {
  {
#line 1817
  poll(arg1, arg2, arg3);
  }
#line 1818
  return;
}
}
#line 1821 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_33(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  , int  ) ,
                                      struct kiocb *arg1 , struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 , int arg5 ) 
{ 


  {
  {
#line 1822
  recv_stream(arg1, arg2, arg3, arg4, arg5);
  }
#line 1823
  return;
}
}
#line 1826 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_36(int (*arg0)(struct kiocb * , struct socket * ,
                                                  struct msghdr * , size_t  ) , struct kiocb *arg1 ,
                                      struct socket *arg2 , struct msghdr *arg3 ,
                                      unsigned long arg4 ) 
{ 


  {
  {
#line 1827
  send_stream(arg1, arg2, arg3, arg4);
  }
#line 1828
  return;
}
}
#line 1831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_39(ssize_t (*arg0)(struct socket * , struct page * ,
                                                      int  , size_t  , int  ) , struct socket *arg1 ,
                                      struct page *arg2 , int arg3 , unsigned long arg4 ,
                                      int arg5 ) 
{ 


  {
  {
#line 1832
  sock_no_sendpage(arg1, arg2, arg3, arg4, arg5);
  }
#line 1833
  return;
}
}
#line 1836 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_42(int (*arg0)(struct socket * , int  , int  ,
                                                  char * , u32  ) , struct socket *arg1 ,
                                      int arg2 , int arg3 , char *arg4 , unsigned int arg5 ) 
{ 


  {
  {
#line 1837
  setsockopt(arg1, arg2, arg3, arg4, arg5);
  }
#line 1838
  return;
}
}
#line 1841 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_45(int (*arg0)(struct socket * , int  ) , struct socket *arg1 ,
                                      int arg2 ) 
{ 


  {
  {
#line 1842
  shutdown(arg1, arg2);
  }
#line 1843
  return;
}
}
#line 1846 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_48(int (*arg0)(struct socket * , struct socket * ) ,
                                      struct socket *arg1 , struct socket *arg2 ) 
{ 


  {
  {
#line 1847
  sock_no_socketpair(arg1, arg2);
  }
#line 1848
  return;
}
}
#line 1851 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_callback_4_5(int (*arg0)(struct socket * , struct socket * ,
                                                 int  ) , struct socket *arg1 , struct socket *arg2 ,
                                     int arg3 ) 
{ 


  {
  {
#line 1852
  accept(arg1, arg2, arg3);
  }
#line 1853
  return;
}
}
#line 1856 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_release_2_4(int (*arg0)(struct socket * ) , struct socket *arg1 ) 
{ 


  {
  {
#line 1857
  release(arg1);
  }
#line 1858
  return;
}
}
#line 1861 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_release_3_4(int (*arg0)(struct socket * ) , struct socket *arg1 ) 
{ 


  {
  {
#line 1862
  release(arg1);
  }
#line 1863
  return;
}
}
#line 1866 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
void ldv_proto_scenario_release_4_4(int (*arg0)(struct socket * ) , struct socket *arg1 ) 
{ 


  {
  {
#line 1867
  release(arg1);
  }
#line 1868
  return;
}
}
#line 1871 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
int ldv_sock_register_create_8_6(int (*arg0)(struct net * , struct socket * , int  ,
                                             int  ) , struct net *arg1 , struct socket *arg2 ,
                                 int arg3 , int arg4 ) 
{ 
  int tmp ;

  {
  {
#line 1872
  tmp = tipc_sk_create(arg1, arg2, arg3, arg4);
  }
#line 1872
  return (tmp);
}
}
#line 2548 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
__inline static void ldv_spin_lock_77(spinlock_t *lock ) 
{ 


  {
  {
#line 2551
  ldv_spin_lock_slock_of_NOT_ARG_SIGN();
#line 2553
  spin_lock(lock);
  }
#line 2554
  return;
}
}
#line 2557 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
__inline static void ldv_spin_unlock_78(spinlock_t *lock ) 
{ 


  {
  {
#line 2560
  ldv_spin_unlock_slock_of_NOT_ARG_SIGN();
#line 2562
  spin_unlock(lock);
  }
#line 2563
  return;
}
}
#line 2566 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
static int ldv_sock_register_79(struct net_proto_family  const  *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 2570
  tmp = ldv_emg_sock_register((struct net_proto_family *)ldv_func_arg1);
  }
#line 2570
  return (tmp);
}
}
#line 2574 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_socket.c.aux"
static void ldv_sock_unregister_80(int ldv_func_arg1 ) 
{ 


  {
  {
#line 2578
  ldv_emg_sock_unregister(ldv_func_arg1);
  }
#line 2579
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_va_end(__builtin_va_list  ) ;
#line 1
void __builtin_va_start(__builtin_va_list  ) ;
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kernel.h"
extern int vscnprintf(char * , size_t  , char const   * , __va_list_tag * ) ;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/log.c"
int tipc_snprintf(char *buf , int len , char const   *fmt  , ...) 
{ 
  int i ;
  va_list args ;

  {
  {
#line 51
  __builtin_va_start((__va_list_tag *)(& args));
#line 52
  i = vscnprintf(buf, (size_t )len, fmt, (__va_list_tag *)(& args));
#line 53
  __builtin_va_end((__va_list_tag *)(& args));
  }
#line 54
  return (i);
}
}
#line 326 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 328
  return ((int )((unsigned long )*(addr + (unsigned long )(nr >> 6)) >> ((int )nr & 63)) & 1);
}
}
#line 279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/workqueue.h"
extern void __init_work(struct work_struct * , int  ) ;
#line 375
extern struct workqueue_struct *system_wq ;
#line 467
extern bool queue_work_on(int  , struct workqueue_struct * , struct work_struct * ) ;
#line 476
extern void flush_scheduled_work(void) ;
#line 507 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/workqueue.h"
__inline static bool queue_work(struct workqueue_struct *wq , struct work_struct *work ) 
{ 
  bool tmp ;

  {
  {
#line 510
  tmp = queue_work_on(4096, wq, work);
  }
#line 510
  return (tmp);
}
}
#line 566 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/workqueue.h"
__inline static bool schedule_work(struct work_struct *work ) 
{ 
  bool tmp ;

  {
  {
#line 568
  tmp = queue_work(system_wq, work);
  }
#line 568
  return (tmp);
}
}
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 669 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
extern int pskb_expand_head(struct sk_buff * , int  , int  , gfp_t  ) ;
#line 1609 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/skbuff.h"
__inline static void skb_reset_network_header(struct sk_buff *skb ) 
{ 


  {
#line 1611
  skb->network_header = (int )((__u16 )((long )skb->data)) - (int )((__u16 )((long )skb->head));
#line 1612
  return;
}
}
#line 189 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/net_namespace.h"
__inline static int net_eq(struct net  const  *net1 , struct net  const  *net2 ) 
{ 


  {
#line 191
  return ((unsigned long )net1 == (unsigned long )net2);
}
}
#line 1498 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
__inline static struct net *dev_net(struct net_device  const  *dev ) 
{ 
  struct net *tmp ;

  {
  {
#line 1500
  tmp = read_pnet(& dev->nd_net);
  }
#line 1500
  return (tmp);
}
}
#line 1676
extern int register_netdevice_notifier(struct notifier_block * ) ;
#line 1677
extern int unregister_netdevice_notifier(struct notifier_block * ) ;
#line 1695 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info  const  *info ) 
{ 


  {
#line 1697
  return ((struct net_device *)info->dev);
}
}
#line 1763
extern void dev_add_pack(struct packet_type * ) ;
#line 1764
extern void dev_remove_pack(struct packet_type * ) ;
#line 1772
extern struct net_device *dev_get_by_name(struct net * , char const   * ) ;
#line 1780
extern int dev_queue_xmit(struct sk_buff * ) ;
#line 1854 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
__inline static int dev_hard_header(struct sk_buff *skb , struct net_device *dev ,
                                    unsigned short type , void const   *daddr , void const   *saddr ,
                                    unsigned int len ) 
{ 
  int tmp ;

  {
#line 1859
  if ((unsigned long )dev->header_ops == (unsigned long )((struct header_ops  const  *)0) || (unsigned long )(dev->header_ops)->create == (unsigned long )((int (*/* const  */)(struct sk_buff * ,
                                                                                                                                                                                struct net_device * ,
                                                                                                                                                                                unsigned short  ,
                                                                                                                                                                                void const   * ,
                                                                                                                                                                                void const   * ,
                                                                                                                                                                                unsigned int  ))0)) {
#line 1860
    return (0);
  } else {

  }
  {
#line 1862
  tmp = (*((dev->header_ops)->create))(skb, dev, (int )type, daddr, saddr, len);
  }
#line 1862
  return (tmp);
}
}
#line 2411 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
__inline static void dev_put(struct net_device *dev ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 2413
  __vpp_verify = (void const   *)0;
  {
#line 2413
  if (4UL == 1UL) {
#line 2413
    goto case_1;
  } else {

  }
#line 2413
  if (4UL == 2UL) {
#line 2413
    goto case_2___0;
  } else {

  }
#line 2413
  if (4UL == 4UL) {
#line 2413
    goto case_4___1;
  } else {

  }
#line 2413
  if (4UL == 8UL) {
#line 2413
    goto case_8___2;
  } else {

  }
#line 2413
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 2413
  pao_ID__ = -1;
  {
#line 2413
  if (4UL == 1UL) {
#line 2413
    goto case_1___0;
  } else {

  }
#line 2413
  if (4UL == 2UL) {
#line 2413
    goto case_2;
  } else {

  }
#line 2413
  if (4UL == 4UL) {
#line 2413
    goto case_4;
  } else {

  }
#line 2413
  if (4UL == 8UL) {
#line 2413
    goto case_8;
  } else {

  }
#line 2413
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 2413
  __asm__  ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38278;
  case_2: /* CIL Label */ 
#line 2413
  __asm__  ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38278;
  case_4: /* CIL Label */ 
#line 2413
  __asm__  ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38278;
  case_8: /* CIL Label */ 
#line 2413
  __asm__  ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38278;
  switch_default: /* CIL Label */ 
  {
#line 2413
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_38278: ;
#line 2413
  goto ldv_38283;
  case_2___0: /* CIL Label */ 
#line 2413
  pao_ID_____0 = -1;
  {
#line 2413
  if (4UL == 1UL) {
#line 2413
    goto case_1___1;
  } else {

  }
#line 2413
  if (4UL == 2UL) {
#line 2413
    goto case_2___1;
  } else {

  }
#line 2413
  if (4UL == 4UL) {
#line 2413
    goto case_4___0;
  } else {

  }
#line 2413
  if (4UL == 8UL) {
#line 2413
    goto case_8___0;
  } else {

  }
#line 2413
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 2413
  __asm__  ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38289;
  case_2___1: /* CIL Label */ 
#line 2413
  __asm__  ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38289;
  case_4___0: /* CIL Label */ 
#line 2413
  __asm__  ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38289;
  case_8___0: /* CIL Label */ 
#line 2413
  __asm__  ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38289;
  switch_default___0: /* CIL Label */ 
  {
#line 2413
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_38289: ;
#line 2413
  goto ldv_38283;
  case_4___1: /* CIL Label */ 
#line 2413
  pao_ID_____1 = -1;
  {
#line 2413
  if (4UL == 1UL) {
#line 2413
    goto case_1___2;
  } else {

  }
#line 2413
  if (4UL == 2UL) {
#line 2413
    goto case_2___2;
  } else {

  }
#line 2413
  if (4UL == 4UL) {
#line 2413
    goto case_4___2;
  } else {

  }
#line 2413
  if (4UL == 8UL) {
#line 2413
    goto case_8___1;
  } else {

  }
#line 2413
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 2413
  __asm__  ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38299;
  case_2___2: /* CIL Label */ 
#line 2413
  __asm__  ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38299;
  case_4___2: /* CIL Label */ 
#line 2413
  __asm__  ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38299;
  case_8___1: /* CIL Label */ 
#line 2413
  __asm__  ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38299;
  switch_default___1: /* CIL Label */ 
  {
#line 2413
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_38299: ;
#line 2413
  goto ldv_38283;
  case_8___2: /* CIL Label */ 
#line 2413
  pao_ID_____2 = -1;
  {
#line 2413
  if (4UL == 1UL) {
#line 2413
    goto case_1___3;
  } else {

  }
#line 2413
  if (4UL == 2UL) {
#line 2413
    goto case_2___3;
  } else {

  }
#line 2413
  if (4UL == 4UL) {
#line 2413
    goto case_4___3;
  } else {

  }
#line 2413
  if (4UL == 8UL) {
#line 2413
    goto case_8___3;
  } else {

  }
#line 2413
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 2413
  __asm__  ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38309;
  case_2___3: /* CIL Label */ 
#line 2413
  __asm__  ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38309;
  case_4___3: /* CIL Label */ 
#line 2413
  __asm__  ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38309;
  case_8___3: /* CIL Label */ 
#line 2413
  __asm__  ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2413
  goto ldv_38309;
  switch_default___2: /* CIL Label */ 
  {
#line 2413
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_38309: ;
#line 2413
  goto ldv_38283;
  switch_default___3: /* CIL Label */ 
  {
#line 2413
  __bad_size_call_parameter();
  }
#line 2413
  goto ldv_38283;
  switch_break: /* CIL Label */ ;
  }
  ldv_38283: ;
#line 2414
  return;
}
}
#line 2446 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device  const  *dev ) 
{ 
  int tmp ;

  {
  {
#line 2448
  tmp = constant_test_bit(2L, (unsigned long const volatile   *)(& dev->state));
  }
#line 2448
  return (tmp == 0);
}
}
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static struct tipc_media eth_media_info ;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static struct eth_bearer eth_bearers[2U]  ;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static int eth_started  ;
#line 64
static int recv_notification(struct notifier_block *nb , unsigned long evt , void *ptr ) ;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static struct notifier_block notifier  =    {& recv_notification, 0, 0};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static void eth_media_addr_set(struct tipc_bearer  const  *tb_ptr , struct tipc_media_addr *a ,
                               char *mac ) 
{ 
  int tmp ;

  {
  {
#line 83
  memcpy((void *)(& a->value), (void const   *)mac, 6UL);
#line 84
  memset((void *)((u8 *)(& a->value) + 6UL), 0, 14UL);
#line 85
  a->media_id = 1U;
#line 86
  tmp = memcmp((void const   *)mac, (void const   *)(& tb_ptr->bcast_addr.value),
               6UL);
#line 86
  a->broadcast = tmp == 0;
  }
#line 87
  return;
}
}
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static int send_msg___0(struct sk_buff *buf , struct tipc_bearer *tb_ptr , struct tipc_media_addr *dest ) 
{ 
  struct sk_buff *clone ;
  struct net_device *dev ;
  int delta ;
  unsigned int tmp ;
  int tmp___0 ;

  {
  {
#line 99
  clone = skb_clone(buf, 32U);
  }
#line 100
  if ((unsigned long )clone == (unsigned long )((struct sk_buff *)0)) {
#line 101
    return (0);
  } else {

  }
  {
#line 103
  dev = ((struct eth_bearer *)tb_ptr->usr_handle)->dev;
#line 104
  tmp = skb_headroom((struct sk_buff  const  *)buf);
#line 104
  delta = (int )((unsigned int )dev->hard_header_len - tmp);
  }
#line 106
  if (delta > 0) {
    {
#line 106
    tmp___0 = pskb_expand_head(clone, (delta + 63) & -64, 0, 32U);
    }
#line 106
    if (tmp___0 != 0) {
      {
#line 108
      kfree_skb(clone);
      }
#line 109
      return (0);
    } else {

    }
  } else {

  }
  {
#line 112
  skb_reset_network_header(clone);
#line 113
  clone->dev = dev;
#line 114
  clone->protocol = 51848U;
#line 115
  dev_hard_header(clone, dev, 35018, (void const   *)(& dest->value), (void const   *)dev->dev_addr,
                  clone->len);
#line 117
  dev_queue_xmit(clone);
  }
#line 118
  return (0);
}
}
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static int recv_msg___0(struct sk_buff *buf , struct net_device *dev , struct packet_type *pt ,
                        struct net_device *orig_dev ) 
{ 
  struct eth_bearer *eb_ptr ;
  struct net *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 131
  eb_ptr = (struct eth_bearer *)pt->af_packet_priv;
#line 133
  tmp = dev_net((struct net_device  const  *)dev);
#line 133
  tmp___0 = net_eq((struct net  const  *)tmp, (struct net  const  *)(& init_net));
  }
#line 133
  if (tmp___0 == 0) {
    {
#line 134
    kfree_skb(buf);
    }
#line 135
    return (0);
  } else {

  }
  {
#line 138
  tmp___2 = __builtin_expect((unsigned long )eb_ptr->bearer != (unsigned long )((struct tipc_bearer *)0),
                             1L);
  }
#line 138
  if (tmp___2 != 0L) {
    {
#line 139
    tmp___1 = __builtin_expect((int )buf->pkt_type <= 1, 1L);
    }
#line 139
    if (tmp___1 != 0L) {
      {
#line 140
      buf->next = (struct sk_buff *)0;
#line 141
      tipc_recv_msg(buf, eb_ptr->bearer);
      }
#line 142
      return (0);
    } else {

    }
  } else {

  }
  {
#line 145
  kfree_skb(buf);
  }
#line 146
  return (0);
}
}
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static void setup_bearer(struct work_struct *work ) 
{ 
  struct eth_bearer *eb_ptr ;
  struct work_struct  const  *__mptr ;

  {
  {
#line 155
  __mptr = (struct work_struct  const  *)work;
#line 155
  eb_ptr = (struct eth_bearer *)((char *)__mptr + 0xffffffffffffffb8UL);
#line 157
  dev_add_pack(& eb_ptr->tipc_packet_type);
  }
#line 158
  return;
}
}
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static int enable_bearer(struct tipc_bearer *tb_ptr ) 
{ 
  struct net_device *dev ;
  struct eth_bearer *eb_ptr ;
  struct eth_bearer *stop ;
  char *driver_name ;
  char *tmp ;
  int pending_dev ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
  {
#line 166
  eb_ptr = (struct eth_bearer *)(& eth_bearers);
#line 167
  stop = (struct eth_bearer *)(& eth_bearers) + 2UL;
#line 168
  tmp = strchr((char const   *)(& tb_ptr->name), 58);
#line 168
  driver_name = tmp + 1UL;
#line 169
  pending_dev = 0;
  }
#line 172
  goto ldv_39793;
  ldv_39792: ;
#line 173
  if ((unsigned long )eb_ptr->bearer == (unsigned long )((struct tipc_bearer *)0)) {
#line 174
    pending_dev = pending_dev + 1;
  } else {

  }
#line 175
  eb_ptr = eb_ptr + 1;
#line 175
  if ((unsigned long )eb_ptr == (unsigned long )stop) {
#line 176
    return (pending_dev != 0 ? -11 : -122);
  } else {

  }
  ldv_39793: ;
#line 172
  if ((unsigned long )eb_ptr->dev != (unsigned long )((struct net_device *)0)) {
#line 174
    goto ldv_39792;
  } else {

  }
  {
#line 180
  dev = dev_get_by_name(& init_net, (char const   *)driver_name);
  }
#line 181
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
#line 182
    return (-19);
  } else {

  }
  {
#line 185
  eb_ptr->dev = dev;
#line 186
  eb_ptr->tipc_packet_type.type = 51848U;
#line 187
  eb_ptr->tipc_packet_type.dev = dev;
#line 188
  eb_ptr->tipc_packet_type.func = & recv_msg___0;
#line 189
  eb_ptr->tipc_packet_type.af_packet_priv = (void *)eb_ptr;
#line 190
  INIT_LIST_HEAD(& eb_ptr->tipc_packet_type.list);
#line 191
  __init_work(& eb_ptr->setup, 0);
#line 191
  __constr_expr_0.counter = 137438953408L;
#line 191
  eb_ptr->setup.data = __constr_expr_0;
#line 191
  lockdep_init_map(& eb_ptr->setup.lockdep_map, "(&eb_ptr->setup)", & __key, 0);
#line 191
  INIT_LIST_HEAD(& eb_ptr->setup.entry);
#line 191
  eb_ptr->setup.func = & setup_bearer;
#line 192
  schedule_work(& eb_ptr->setup);
#line 195
  eb_ptr->bearer = tb_ptr;
#line 196
  tb_ptr->usr_handle = (void *)eb_ptr;
#line 197
  memset((void *)(& tb_ptr->bcast_addr.value), 0, 20UL);
#line 198
  memcpy((void *)(& tb_ptr->bcast_addr.value), (void const   *)(& dev->broadcast),
         6UL);
#line 199
  tb_ptr->bcast_addr.media_id = 1U;
#line 200
  tb_ptr->bcast_addr.broadcast = 1U;
#line 201
  tb_ptr->mtu = dev->mtu;
#line 202
  tb_ptr->blocked = 0;
#line 203
  eth_media_addr_set((struct tipc_bearer  const  *)tb_ptr, & tb_ptr->addr, (char *)dev->dev_addr);
  }
#line 204
  return (0);
}
}
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static void cleanup_bearer(struct work_struct *work ) 
{ 
  struct eth_bearer *eb_ptr ;
  struct work_struct  const  *__mptr ;

  {
  {
#line 215
  __mptr = (struct work_struct  const  *)work;
#line 215
  eb_ptr = (struct eth_bearer *)((char *)__mptr + 0xffffffffffffff68UL);
#line 217
  dev_remove_pack(& eb_ptr->tipc_packet_type);
#line 218
  dev_put(eb_ptr->dev);
#line 219
  eb_ptr->dev = (struct net_device *)0;
  }
#line 220
  return;
}
}
#line 229 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static void disable_bearer(struct tipc_bearer *tb_ptr ) 
{ 
  struct eth_bearer *eb_ptr ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
  {
#line 231
  eb_ptr = (struct eth_bearer *)tb_ptr->usr_handle;
#line 233
  eb_ptr->bearer = (struct tipc_bearer *)0;
#line 234
  __init_work(& eb_ptr->cleanup, 0);
#line 234
  __constr_expr_0.counter = 137438953408L;
#line 234
  eb_ptr->cleanup.data = __constr_expr_0;
#line 234
  lockdep_init_map(& eb_ptr->cleanup.lockdep_map, "(&eb_ptr->cleanup)", & __key, 0);
#line 234
  INIT_LIST_HEAD(& eb_ptr->cleanup.entry);
#line 234
  eb_ptr->cleanup.func = & cleanup_bearer;
#line 235
  schedule_work(& eb_ptr->cleanup);
  }
#line 236
  return;
}
}
#line 244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static int recv_notification(struct notifier_block *nb , unsigned long evt , void *ptr ) 
{ 
  struct net_device *dev ;
  struct net_device *tmp ;
  struct eth_bearer *eb_ptr ;
  struct eth_bearer *stop ;
  struct net *tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
  {
#line 247
  tmp = netdev_notifier_info_to_dev((struct netdev_notifier_info  const  *)ptr);
#line 247
  dev = tmp;
#line 248
  eb_ptr = (struct eth_bearer *)(& eth_bearers);
#line 249
  stop = (struct eth_bearer *)(& eth_bearers) + 2UL;
#line 251
  tmp___0 = dev_net((struct net_device  const  *)dev);
#line 251
  tmp___1 = net_eq((struct net  const  *)tmp___0, (struct net  const  *)(& init_net));
  }
#line 251
  if (tmp___1 == 0) {
#line 252
    return (0);
  } else {

  }
#line 254
  goto ldv_39818;
  ldv_39817: 
#line 255
  eb_ptr = eb_ptr + 1;
#line 255
  if ((unsigned long )eb_ptr == (unsigned long )stop) {
#line 256
    return (0);
  } else {

  }
  ldv_39818: ;
#line 254
  if ((unsigned long )eb_ptr->dev != (unsigned long )dev) {
#line 256
    goto ldv_39817;
  } else {

  }

#line 258
  if ((unsigned long )eb_ptr->bearer == (unsigned long )((struct tipc_bearer *)0)) {
#line 259
    return (0);
  } else {

  }
#line 261
  (eb_ptr->bearer)->mtu = dev->mtu;
  {
#line 264
  if (evt == 4UL) {
#line 264
    goto case_4;
  } else {

  }
#line 270
  if (evt == 1UL) {
#line 270
    goto case_1;
  } else {

  }
#line 273
  if (evt == 2UL) {
#line 273
    goto case_2;
  } else {

  }
#line 276
  if (evt == 7UL) {
#line 276
    goto case_7;
  } else {

  }
#line 277
  if (evt == 8UL) {
#line 277
    goto case_8;
  } else {

  }
#line 281
  if (evt == 6UL) {
#line 281
    goto case_6;
  } else {

  }
#line 282
  if (evt == 10UL) {
#line 282
    goto case_10;
  } else {

  }
#line 263
  goto switch_break;
  case_4: /* CIL Label */ 
  {
#line 265
  tmp___2 = netif_carrier_ok((struct net_device  const  *)dev);
  }
#line 265
  if ((int )tmp___2) {
    {
#line 266
    tipc_continue(eb_ptr->bearer);
    }
  } else {
    {
#line 268
    tipc_block_bearer((char const   *)(& (eb_ptr->bearer)->name));
    }
  }
#line 269
  goto ldv_39821;
  case_1: /* CIL Label */ 
  {
#line 271
  tipc_continue(eb_ptr->bearer);
  }
#line 272
  goto ldv_39821;
  case_2: /* CIL Label */ 
  {
#line 274
  tipc_block_bearer((char const   *)(& (eb_ptr->bearer)->name));
  }
#line 275
  goto ldv_39821;
  case_7: /* CIL Label */ ;
  case_8: /* CIL Label */ 
  {
#line 278
  tipc_block_bearer((char const   *)(& (eb_ptr->bearer)->name));
#line 279
  tipc_continue(eb_ptr->bearer);
  }
#line 280
  goto ldv_39821;
  case_6: /* CIL Label */ ;
  case_10: /* CIL Label */ 
  {
#line 283
  tipc_disable_bearer((char const   *)(& (eb_ptr->bearer)->name));
  }
#line 284
  goto ldv_39821;
  switch_break: /* CIL Label */ ;
  }
  ldv_39821: ;
#line 286
  return (1);
}
}
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static int eth_addr2str(struct tipc_media_addr *a , char *str_buf , int str_size ) 
{ 


  {
#line 294
  if (str_size <= 17) {
#line 295
    return (1);
  } else {

  }
  {
#line 297
  sprintf(str_buf, "%pM", (u8 *)(& a->value));
  }
#line 298
  return (0);
}
}
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static int eth_addr2msg(struct tipc_media_addr *a , char *msg_area ) 
{ 


  {
  {
#line 306
  memset((void *)msg_area, 0, 20UL);
#line 307
  *(msg_area + 3UL) = 1;
#line 308
  memcpy((void *)(msg_area + 4UL), (void const   *)(& a->value), 6UL);
  }
#line 309
  return (0);
}
}
#line 315 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static int eth_msg2addr(struct tipc_bearer  const  *tb_ptr , struct tipc_media_addr *a ,
                        char *msg_area ) 
{ 


  {
#line 318
  if ((int )((signed char )*(msg_area + 3UL)) != 1) {
#line 319
    return (1);
  } else {

  }
  {
#line 321
  eth_media_addr_set(tb_ptr, a, msg_area + 4UL);
  }
#line 322
  return (0);
}
}
#line 328 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
static struct tipc_media eth_media_info  = 
#line 328
     {& send_msg___0, & enable_bearer, & disable_bearer, & eth_addr2str, & eth_addr2msg,
    & eth_msg2addr, 10U, 1500U, 50U, 1U, {'e', 't', 'h', '\000'}};
#line 348 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
int tipc_eth_media_start(void) 
{ 
  int res ;

  {
#line 352
  if (eth_started != 0) {
#line 353
    return (-22);
  } else {

  }
  {
#line 355
  res = tipc_register_media(& eth_media_info);
  }
#line 356
  if (res != 0) {
#line 357
    return (res);
  } else {

  }
  {
#line 359
  res = register_netdevice_notifier(& notifier);
  }
#line 360
  if (res == 0) {
#line 361
    eth_started = 1;
  } else {

  }
#line 362
  return (res);
}
}
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/eth_media.c"
void tipc_eth_media_stop(void) 
{ 


  {
#line 370
  if (eth_started == 0) {
#line 371
    return;
  } else {

  }
  {
#line 373
  flush_scheduled_work();
#line 374
  unregister_netdevice_notifier(& notifier);
#line 375
  eth_started = 0;
  }
#line 376
  return;
}
}
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/err.h"
long ldv_is_err(void const   *ptr ) ;
#line 29
void *ldv_err_ptr(long error ) ;
#line 30
long ldv_ptr_err(void const   *ptr ) ;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
#line 78
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 80
  return;
}
}
#line 256 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(long nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 260
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 264
  return (oldbit);
}
}
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 81
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
#line 84
  return ((int )c);
}
}
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 175
  __ret = i;
  {
#line 175
  if (4UL == 1UL) {
#line 175
    goto case_1;
  } else {

  }
#line 175
  if (4UL == 2UL) {
#line 175
    goto case_2;
  } else {

  }
#line 175
  if (4UL == 4UL) {
#line 175
    goto case_4;
  } else {

  }
#line 175
  if (4UL == 8UL) {
#line 175
    goto case_8;
  } else {

  }
#line 175
  goto switch_default;
  case_1: /* CIL Label */ 
#line 175
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 175
  goto ldv_5450;
  case_2: /* CIL Label */ 
#line 175
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 175
  goto ldv_5450;
  case_4: /* CIL Label */ 
#line 175
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 175
  goto ldv_5450;
  case_8: /* CIL Label */ 
#line 175
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 175
  goto ldv_5450;
  switch_default: /* CIL Label */ 
  {
#line 175
  __xadd_wrong_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_5450: ;
#line 175
  return (i + __ret);
}
}
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_server.c.aux"
void ldv_spin_lock_idr_lock_of_tipc_server(void) ;
#line 110
void ldv_spin_unlock_idr_lock_of_tipc_server(void) ;
#line 213
void ldv_spin_lock_outqueue_lock_of_tipc_conn(void) ;
#line 214
void ldv_spin_unlock_outqueue_lock_of_tipc_conn(void) ;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 376 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_bh_75___0(spinlock_t *lock ) ;
#line 380
__inline static void ldv_spin_lock_bh_75___0(spinlock_t *lock ) ;
#line 384
__inline static void ldv_spin_lock_bh_75___0(spinlock_t *lock ) ;
#line 388
__inline static void ldv_spin_lock_bh_82(spinlock_t *lock ) ;
#line 392
__inline static void ldv_spin_lock_bh_82(spinlock_t *lock ) ;
#line 396
__inline static void ldv_spin_lock_bh_82(spinlock_t *lock ) ;
#line 400
__inline static void ldv_spin_lock_bh_82(spinlock_t *lock ) ;
#line 404
__inline static void ldv_spin_lock_bh_75___0(spinlock_t *lock ) ;
#line 408
__inline static void ldv_spin_lock_bh_75___0(spinlock_t *lock ) ;
#line 428
__inline static void ldv_spin_unlock_bh_76___1(spinlock_t *lock ) ;
#line 432
__inline static void ldv_spin_unlock_bh_76___1(spinlock_t *lock ) ;
#line 436
__inline static void ldv_spin_unlock_bh_76___1(spinlock_t *lock ) ;
#line 440
__inline static void ldv_spin_unlock_bh_76___1(spinlock_t *lock ) ;
#line 444
__inline static void ldv_spin_unlock_bh_83(spinlock_t *lock ) ;
#line 448
__inline static void ldv_spin_unlock_bh_83(spinlock_t *lock ) ;
#line 452
__inline static void ldv_spin_unlock_bh_83(spinlock_t *lock ) ;
#line 456
__inline static void ldv_spin_unlock_bh_83(spinlock_t *lock ) ;
#line 460
__inline static void ldv_spin_unlock_bh_76___1(spinlock_t *lock ) ;
#line 464
__inline static void ldv_spin_unlock_bh_76___1(spinlock_t *lock ) ;
#line 397 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/workqueue.h"
extern struct workqueue_struct *__alloc_workqueue_key(char const   * , unsigned int  ,
                                                      int  , struct lock_class_key * ,
                                                      char const   *  , ...) ;
#line 460
extern void destroy_workqueue(struct workqueue_struct * ) ;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kref.h"
__inline static void kref_init(struct kref *kref ) 
{ 


  {
  {
#line 34
  atomic_set(& kref->refcount, 1);
  }
#line 35
  return;
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kref.h"
__inline static void kref_get(struct kref *kref ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 47
  tmp = atomic_add_return(1, & kref->refcount);
#line 47
  __ret_warn_once = tmp <= 1;
#line 47
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 47
  if (tmp___2 != 0L) {
    {
#line 47
    __ret_warn_on = ! __warned;
#line 47
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 47
    if (tmp___0 != 0L) {
      {
#line 47
      warn_slowpath_null("include/linux/kref.h", 47);
      }
    } else {

    }
    {
#line 47
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 47
    if (tmp___1 != 0L) {
#line 47
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 47
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 49
  return;
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release___0)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 71
  __ret_warn_on = (unsigned long )release___0 == (unsigned long )((void (*)(struct kref * ))0);
#line 71
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 71
  if (tmp != 0L) {
    {
#line 71
    warn_slowpath_null("include/linux/kref.h", 71);
    }
  } else {

  }
  {
#line 71
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 73
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
  }
#line 73
  if (tmp___0 != 0) {
    {
#line 74
    (*release___0)(kref);
    }
#line 75
    return (1);
  } else {

  }
#line 77
  return (0);
}
}
#line 97 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release___0)(struct kref * ) ) 
{ 
  int tmp ;

  {
  {
#line 99
  tmp = kref_sub(kref, 1U, release___0);
  }
#line 99
  return (tmp);
}
}
#line 2420 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sched.h"
extern int _cond_resched(void) ;
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 256
extern int kernel_recvmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  , int  ) ;
#line 260
extern int kernel_bind(struct socket * , struct sockaddr * , int  ) ;
#line 262
extern int kernel_listen(struct socket * , int  ) ;
#line 273
extern int kernel_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 278
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/slab.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 636
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/idr.h"
extern void *idr_find_slowpath(struct idr * , int  ) ;
#line 78
extern int idr_alloc(struct idr * , void * , int  , int  , gfp_t  ) ;
#line 84
extern void idr_remove(struct idr * , int  ) ;
#line 86
extern void idr_destroy(struct idr * ) ;
#line 87
extern void idr_init(struct idr * ) ;
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/idr.h"
__inline static void *idr_find(struct idr *idr , int id ) 
{ 
  struct idr_layer *hint ;
  struct idr_layer *_________p1 ;
  bool __warned ;
  int tmp ;
  struct idr_layer *_________p1___0 ;
  bool __warned___0 ;
  int tmp___0 ;
  void *tmp___1 ;

  {
  {
#line 114
  _________p1 = *((struct idr_layer * volatile  *)(& idr->hint));
#line 114
  tmp = debug_lockdep_rcu_enabled();
  }
#line 114
  if (tmp != 0 && ! __warned) {
    {
#line 114
    rcu_read_lock_held();
    }
  } else {

  }
#line 114
  hint = _________p1;
#line 116
  if ((unsigned long )hint != (unsigned long )((struct idr_layer *)0) && (id & -256) == hint->prefix) {
    {
#line 117
    _________p1___0 = *((struct idr_layer * volatile  *)((struct idr_layer **)(& hint->ary) + ((unsigned long )id & 255UL)));
#line 117
    tmp___0 = debug_lockdep_rcu_enabled();
    }
#line 117
    if (tmp___0 != 0 && ! __warned___0) {
      {
#line 117
      rcu_read_lock_held();
      }
    } else {

    }
#line 117
    return ((void *)_________p1___0);
  } else {

  }
  {
#line 119
  tmp___1 = idr_find_slowpath(idr, id);
  }
#line 119
  return (tmp___1);
}
}
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_recv_work(struct work_struct *work ) ;
#line 84
static void tipc_send_work(struct work_struct *work ) ;
#line 85
static void tipc_clean_outqueues(struct tipc_conn *con ) ;
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_conn_kref_release(struct kref *kref ) 
{ 
  struct tipc_conn *con ;
  struct kref  const  *__mptr ;

  {
#line 89
  __mptr = (struct kref  const  *)kref;
#line 89
  con = (struct tipc_conn *)__mptr;
#line 91
  if ((unsigned long )con->sock != (unsigned long )((struct socket *)0)) {
    {
#line 92
    tipc_sock_release_local(con->sock);
#line 93
    con->sock = (struct socket *)0;
    }
  } else {

  }
  {
#line 96
  tipc_clean_outqueues(con);
#line 97
  kfree((void const   *)con);
  }
#line 98
  return;
}
}
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void conn_put(struct tipc_conn *con ) 
{ 


  {
  {
#line 102
  kref_put(& con->kref, & tipc_conn_kref_release);
  }
#line 103
  return;
}
}
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void conn_get(struct tipc_conn *con ) 
{ 


  {
  {
#line 107
  kref_get(& con->kref);
  }
#line 108
  return;
}
}
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static struct tipc_conn *tipc_conn_lookup(struct tipc_server *s , int conid ) 
{ 
  struct tipc_conn *con ;
  void *tmp ;

  {
  {
#line 114
  ldv_spin_lock_bh_75___0(& s->idr_lock);
#line 115
  tmp = idr_find(& s->conn_idr, conid);
#line 115
  con = (struct tipc_conn *)tmp;
  }
#line 116
  if ((unsigned long )con != (unsigned long )((struct tipc_conn *)0)) {
    {
#line 117
    conn_get(con);
    }
  } else {

  }
  {
#line 118
  ldv_spin_unlock_bh_76___1(& s->idr_lock);
  }
#line 119
  return (con);
}
}
#line 122 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void sock_data_ready(struct sock *sk , int unused ) 
{ 
  struct tipc_conn *con ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 126
  _raw_read_lock(& sk->sk_callback_lock);
#line 127
  con = (struct tipc_conn *)sk->sk_user_data;
  }
#line 128
  if ((unsigned long )con != (unsigned long )((struct tipc_conn *)0)) {
    {
#line 128
    tmp___1 = constant_test_bit(1L, (unsigned long const volatile   *)(& con->flags));
    }
#line 128
    if (tmp___1 != 0) {
      {
#line 129
      conn_get(con);
#line 130
      tmp = queue_work((con->server)->rcv_wq, & con->rwork);
      }
#line 130
      if (tmp) {
#line 130
        tmp___0 = 0;
      } else {
#line 130
        tmp___0 = 1;
      }
#line 130
      if (tmp___0) {
        {
#line 131
        conn_put(con);
        }
      } else {

      }
    } else {

    }
  } else {

  }
  {
#line 133
  _raw_read_unlock(& sk->sk_callback_lock);
  }
#line 134
  return;
}
}
#line 136 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void sock_write_space(struct sock *sk ) 
{ 
  struct tipc_conn *con ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 140
  _raw_read_lock(& sk->sk_callback_lock);
#line 141
  con = (struct tipc_conn *)sk->sk_user_data;
  }
#line 142
  if ((unsigned long )con != (unsigned long )((struct tipc_conn *)0)) {
    {
#line 142
    tmp___1 = constant_test_bit(1L, (unsigned long const volatile   *)(& con->flags));
    }
#line 142
    if (tmp___1 != 0) {
      {
#line 143
      conn_get(con);
#line 144
      tmp = queue_work((con->server)->send_wq, & con->swork);
      }
#line 144
      if (tmp) {
#line 144
        tmp___0 = 0;
      } else {
#line 144
        tmp___0 = 1;
      }
#line 144
      if (tmp___0) {
        {
#line 145
        conn_put(con);
        }
      } else {

      }
    } else {

    }
  } else {

  }
  {
#line 147
  _raw_read_unlock(& sk->sk_callback_lock);
  }
#line 148
  return;
}
}
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_register_callbacks(struct socket *sock , struct tipc_conn *con ) 
{ 
  struct sock *sk ;

  {
  {
#line 152
  sk = sock->sk;
#line 154
  _raw_write_lock_bh(& sk->sk_callback_lock);
#line 156
  sk->sk_data_ready = & sock_data_ready;
#line 157
  sk->sk_write_space = & sock_write_space;
#line 158
  sk->sk_user_data = (void *)con;
#line 160
  con->sock = sock;
#line 162
  _raw_write_unlock_bh(& sk->sk_callback_lock);
  }
#line 163
  return;
}
}
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_unregister_callbacks(struct tipc_conn *con ) 
{ 
  struct sock *sk ;

  {
  {
#line 167
  sk = (con->sock)->sk;
#line 169
  _raw_write_lock_bh(& sk->sk_callback_lock);
#line 170
  sk->sk_user_data = (void *)0;
#line 171
  _raw_write_unlock_bh(& sk->sk_callback_lock);
  }
#line 172
  return;
}
}
#line 174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_close_conn(struct tipc_conn *con ) 
{ 
  struct tipc_server *s ;
  int tmp ;

  {
  {
#line 176
  s = con->server;
#line 178
  tmp = test_and_clear_bit(1L, (unsigned long volatile   *)(& con->flags));
  }
#line 178
  if (tmp != 0) {
#line 179
    if (con->conid != 0) {
      {
#line 180
      (*(s->tipc_conn_shutdown))(con->conid, con->usr_data);
      }
    } else {

    }
    {
#line 182
    ldv_spin_lock_bh_75___0(& s->idr_lock);
#line 183
    idr_remove(& s->conn_idr, con->conid);
#line 184
    s->idr_in_use = s->idr_in_use - 1;
#line 185
    ldv_spin_unlock_bh_76___1(& s->idr_lock);
#line 187
    tipc_unregister_callbacks(con);
#line 195
    kernel_sock_shutdown(con->sock, 2);
#line 197
    conn_put(con);
    }
  } else {

  }
#line 199
  return;
}
}
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static struct tipc_conn *tipc_alloc_conn(struct tipc_server *s ) 
{ 
  struct tipc_conn *con ;
  int ret ;
  void *tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___1 ;
  atomic_long_t __constr_expr_1 ;
  void *tmp___1 ;

  {
  {
#line 206
  tmp = kzalloc(296UL, 32U);
#line 206
  con = (struct tipc_conn *)tmp;
  }
#line 207
  if ((unsigned long )con == (unsigned long )((struct tipc_conn *)0)) {
    {
#line 208
    tmp___0 = ERR_PTR(-12L);
    }
#line 208
    return ((struct tipc_conn *)tmp___0);
  } else {

  }
  {
#line 210
  kref_init(& con->kref);
#line 211
  INIT_LIST_HEAD(& con->outqueue);
#line 212
  spinlock_check(& con->outqueue_lock);
#line 212
  __raw_spin_lock_init(& con->outqueue_lock.__annonCompField19.rlock, "&(&con->outqueue_lock)->rlock",
                       & __key);
#line 213
  __init_work(& con->swork, 0);
#line 213
  __constr_expr_0.counter = 137438953408L;
#line 213
  con->swork.data = __constr_expr_0;
#line 213
  lockdep_init_map(& con->swork.lockdep_map, "(&con->swork)", & __key___0, 0);
#line 213
  INIT_LIST_HEAD(& con->swork.entry);
#line 213
  con->swork.func = & tipc_send_work;
#line 214
  __init_work(& con->rwork, 0);
#line 214
  __constr_expr_1.counter = 137438953408L;
#line 214
  con->rwork.data = __constr_expr_1;
#line 214
  lockdep_init_map(& con->rwork.lockdep_map, "(&con->rwork)", & __key___1, 0);
#line 214
  INIT_LIST_HEAD(& con->rwork.entry);
#line 214
  con->rwork.func = & tipc_recv_work;
#line 216
  ldv_spin_lock_bh_75___0(& s->idr_lock);
#line 217
  ret = idr_alloc(& s->conn_idr, (void *)con, 0, 0, 32U);
  }
#line 218
  if (ret < 0) {
    {
#line 219
    kfree((void const   *)con);
#line 220
    ldv_spin_unlock_bh_76___1(& s->idr_lock);
#line 221
    tmp___1 = ERR_PTR(-12L);
    }
#line 221
    return ((struct tipc_conn *)tmp___1);
  } else {

  }
  {
#line 223
  con->conid = ret;
#line 224
  s->idr_in_use = s->idr_in_use + 1;
#line 225
  ldv_spin_unlock_bh_76___1(& s->idr_lock);
#line 227
  set_bit(1L, (unsigned long volatile   *)(& con->flags));
#line 228
  con->server = s;
  }
#line 230
  return (con);
}
}
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static int tipc_receive_from_sock(struct tipc_conn *con ) 
{ 
  struct msghdr msg ;
  struct tipc_server *s ;
  struct sockaddr_tipc addr ;
  struct kvec iov ;
  void *buf ;
  int ret ;

  {
  {
#line 235
  msg.msg_name = 0;
#line 235
  msg.msg_namelen = 0;
#line 235
  msg.msg_iov = 0;
#line 235
  msg.msg_iovlen = 0UL;
#line 235
  msg.msg_control = 0;
#line 235
  msg.msg_controllen = 0UL;
#line 235
  msg.msg_flags = 0U;
#line 236
  s = con->server;
#line 242
  buf = kmem_cache_alloc(s->rcvbuf_cache, 32U);
  }
#line 243
  if ((unsigned long )buf == (unsigned long )((void *)0)) {
#line 244
    ret = -12;
#line 245
    goto out_close;
  } else {

  }
  {
#line 248
  iov.iov_base = buf;
#line 249
  iov.iov_len = (size_t )s->max_rcvbuf_size;
#line 250
  msg.msg_name = (void *)(& addr);
#line 251
  ret = kernel_recvmsg(con->sock, & msg, & iov, 1UL, iov.iov_len, 64);
  }
#line 253
  if (ret <= 0) {
    {
#line 254
    kmem_cache_free(s->rcvbuf_cache, buf);
    }
#line 255
    goto out_close;
  } else {

  }
  {
#line 258
  (*(s->tipc_conn_recvmsg))(con->conid, & addr, con->usr_data, buf, (size_t )ret);
#line 260
  kmem_cache_free(s->rcvbuf_cache, buf);
  }
#line 262
  return (0);
  out_close: ;
#line 265
  if (ret != -11) {
    {
#line 266
    tipc_close_conn(con);
    }
  } else
#line 267
  if (ret == 0) {
#line 269
    ret = -11;
  } else {

  }
#line 271
  return (ret);
}
}
#line 274 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static int tipc_accept_from_sock(struct tipc_conn *con ) 
{ 
  struct tipc_server *s ;
  struct socket *sock ;
  struct socket *newsock ;
  struct tipc_conn *newcon ;
  int ret ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 276
  s = con->server;
#line 277
  sock = con->sock;
#line 282
  ret = tipc_sock_accept_local(sock, & newsock, 2048);
  }
#line 283
  if (ret < 0) {
#line 284
    return (ret);
  } else {

  }
  {
#line 286
  newcon = tipc_alloc_conn(con->server);
#line 287
  tmp___0 = IS_ERR((void const   *)newcon);
  }
#line 287
  if (tmp___0 != 0L) {
    {
#line 288
    tmp = PTR_ERR((void const   *)newcon);
#line 288
    ret = (int )tmp;
#line 289
    sock_release(newsock);
    }
#line 290
    return (ret);
  } else {

  }
  {
#line 293
  newcon->rx_action = & tipc_receive_from_sock;
#line 294
  tipc_register_callbacks(newsock, newcon);
#line 297
  newcon->usr_data = (*(s->tipc_conn_new))(newcon->conid);
#line 300
  (*((newsock->sk)->sk_data_ready))(newsock->sk, 0);
  }
#line 301
  return (ret);
}
}
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static struct socket *tipc_create_listen_sock(struct tipc_conn *con ) 
{ 
  struct tipc_server *s ;
  struct socket *sock ;
  int ret ;

  {
  {
#line 306
  s = con->server;
#line 307
  sock = (struct socket *)0;
#line 310
  ret = tipc_sock_create_local(s->type, & sock);
  }
#line 311
  if (ret < 0) {
#line 312
    return ((struct socket *)0);
  } else {

  }
  {
#line 313
  ret = kernel_setsockopt(sock, 271, 127, (char *)(& s->imp), 4U);
  }
#line 315
  if (ret < 0) {
#line 316
    goto create_err;
  } else {

  }
  {
#line 317
  ret = kernel_bind(sock, (struct sockaddr *)s->saddr, 16);
  }
#line 318
  if (ret < 0) {
#line 319
    goto create_err;
  } else {

  }
  {
#line 322
  if (s->type == 1) {
#line 322
    goto case_1;
  } else {

  }
#line 323
  if (s->type == 5) {
#line 323
    goto case_5;
  } else {

  }
#line 330
  if (s->type == 2) {
#line 330
    goto case_2;
  } else {

  }
#line 331
  if (s->type == 4) {
#line 331
    goto case_4;
  } else {

  }
#line 334
  goto switch_default;
  case_1: /* CIL Label */ ;
  case_5: /* CIL Label */ 
  {
#line 324
  con->rx_action = & tipc_accept_from_sock;
#line 326
  ret = kernel_listen(sock, 0);
  }
#line 327
  if (ret < 0) {
#line 328
    goto create_err;
  } else {

  }
#line 329
  goto ldv_43080;
  case_2: /* CIL Label */ ;
  case_4: /* CIL Label */ 
#line 332
  con->rx_action = & tipc_receive_from_sock;
#line 333
  goto ldv_43080;
  switch_default: /* CIL Label */ 
  {
#line 335
  printk("\vtipc: Unknown socket type %d\n", s->type);
  }
#line 336
  goto create_err;
  switch_break: /* CIL Label */ ;
  }
  ldv_43080: ;
#line 338
  return (sock);
  create_err: 
  {
#line 341
  sock_release(sock);
#line 342
  con->sock = (struct socket *)0;
  }
#line 343
  return ((struct socket *)0);
}
}
#line 346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static int tipc_open_listening_sock(struct tipc_server *s ) 
{ 
  struct socket *sock ;
  struct tipc_conn *con ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 351
  con = tipc_alloc_conn(s);
#line 352
  tmp___0 = IS_ERR((void const   *)con);
  }
#line 352
  if (tmp___0 != 0L) {
    {
#line 353
    tmp = PTR_ERR((void const   *)con);
    }
#line 353
    return ((int )tmp);
  } else {

  }
  {
#line 355
  sock = tipc_create_listen_sock(con);
  }
#line 356
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
    {
#line 357
    idr_remove(& s->conn_idr, con->conid);
#line 358
    s->idr_in_use = s->idr_in_use - 1;
#line 359
    kfree((void const   *)con);
    }
#line 360
    return (-22);
  } else {

  }
  {
#line 363
  tipc_register_callbacks(sock, con);
  }
#line 364
  return (0);
}
}
#line 367 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static struct outqueue_entry *tipc_alloc_entry(void *data , int len ) 
{ 
  struct outqueue_entry *entry ;
  void *buf ;
  void *tmp ;

  {
  {
#line 372
  tmp = kmalloc(48UL, 32U);
#line 372
  entry = (struct outqueue_entry *)tmp;
  }
#line 373
  if ((unsigned long )entry == (unsigned long )((struct outqueue_entry *)0)) {
#line 374
    return ((struct outqueue_entry *)0);
  } else {

  }
  {
#line 376
  buf = kmalloc((size_t )len, 32U);
  }
#line 377
  if ((unsigned long )buf == (unsigned long )((void *)0)) {
    {
#line 378
    kfree((void const   *)entry);
    }
#line 379
    return ((struct outqueue_entry *)0);
  } else {

  }
  {
#line 382
  memcpy(buf, (void const   *)data, (size_t )len);
#line 383
  entry->iov.iov_base = buf;
#line 384
  entry->iov.iov_len = (size_t )len;
  }
#line 386
  return (entry);
}
}
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_free_entry(struct outqueue_entry *e ) 
{ 


  {
  {
#line 391
  kfree((void const   *)e->iov.iov_base);
#line 392
  kfree((void const   *)e);
  }
#line 393
  return;
}
}
#line 395 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_clean_outqueues(struct tipc_conn *con ) 
{ 
  struct outqueue_entry *e ;
  struct outqueue_entry *safe ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
  {
#line 399
  ldv_spin_lock_bh_82(& con->outqueue_lock);
#line 400
  __mptr = (struct list_head  const  *)con->outqueue.next;
#line 400
  e = (struct outqueue_entry *)__mptr;
#line 400
  __mptr___0 = (struct list_head  const  *)e->list.next;
#line 400
  safe = (struct outqueue_entry *)__mptr___0;
  }
#line 400
  goto ldv_43110;
  ldv_43109: 
  {
#line 401
  list_del(& e->list);
#line 402
  tipc_free_entry(e);
#line 400
  e = safe;
#line 400
  __mptr___1 = (struct list_head  const  *)safe->list.next;
#line 400
  safe = (struct outqueue_entry *)__mptr___1;
  }
  ldv_43110: ;
#line 400
  if ((unsigned long )(& e->list) != (unsigned long )(& con->outqueue)) {
#line 402
    goto ldv_43109;
  } else {

  }
  {
#line 404
  ldv_spin_unlock_bh_83(& con->outqueue_lock);
  }
#line 405
  return;
}
}
#line 407 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
int tipc_conn_sendmsg(struct tipc_server *s , int conid , struct sockaddr_tipc *addr ,
                      void *data , size_t len ) 
{ 
  struct outqueue_entry *e ;
  struct tipc_conn *con ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 413
  con = tipc_conn_lookup(s, conid);
  }
#line 414
  if ((unsigned long )con == (unsigned long )((struct tipc_conn *)0)) {
#line 415
    return (-22);
  } else {

  }
  {
#line 417
  e = tipc_alloc_entry(data, (int )len);
  }
#line 418
  if ((unsigned long )e == (unsigned long )((struct outqueue_entry *)0)) {
    {
#line 419
    conn_put(con);
    }
#line 420
    return (-12);
  } else {

  }
#line 423
  if ((unsigned long )addr != (unsigned long )((struct sockaddr_tipc *)0)) {
    {
#line 424
    memcpy((void *)(& e->dest), (void const   *)addr, 16UL);
    }
  } else {

  }
  {
#line 426
  ldv_spin_lock_bh_82(& con->outqueue_lock);
#line 427
  list_add_tail(& e->list, & con->outqueue);
#line 428
  ldv_spin_unlock_bh_83(& con->outqueue_lock);
#line 430
  tmp___1 = constant_test_bit(1L, (unsigned long const volatile   *)(& con->flags));
  }
#line 430
  if (tmp___1 != 0) {
    {
#line 431
    tmp = queue_work(s->send_wq, & con->swork);
    }
#line 431
    if (tmp) {
#line 431
      tmp___0 = 0;
    } else {
#line 431
      tmp___0 = 1;
    }
#line 431
    if (tmp___0) {
      {
#line 432
      conn_put(con);
      }
    } else {

    }
  } else {
    {
#line 434
    conn_put(con);
    }
  }
#line 436
  return (0);
}
}
#line 439 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
void tipc_conn_terminate(struct tipc_server *s , int conid ) 
{ 
  struct tipc_conn *con ;

  {
  {
#line 443
  con = tipc_conn_lookup(s, conid);
  }
#line 444
  if ((unsigned long )con != (unsigned long )((struct tipc_conn *)0)) {
    {
#line 445
    tipc_close_conn(con);
#line 446
    conn_put(con);
    }
  } else {

  }
#line 448
  return;
}
}
#line 450 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_send_to_sock(struct tipc_conn *con ) 
{ 
  int count ;
  struct tipc_server *s ;
  struct outqueue_entry *e ;
  struct msghdr msg ;
  int ret ;
  struct list_head  const  *__mptr ;

  {
  {
#line 452
  count = 0;
#line 453
  s = con->server;
#line 458
  ldv_spin_lock_bh_82(& con->outqueue_lock);
  }
  ldv_43141: 
#line 460
  __mptr = (struct list_head  const  *)con->outqueue.next;
#line 460
  e = (struct outqueue_entry *)__mptr;
#line 462
  if ((unsigned long )((struct list_head *)e) == (unsigned long )(& con->outqueue)) {
#line 463
    goto ldv_43136;
  } else {

  }
  {
#line 464
  ldv_spin_unlock_bh_83(& con->outqueue_lock);
#line 466
  memset((void *)(& msg), 0, 56UL);
#line 467
  msg.msg_flags = 64U;
  }
#line 469
  if (s->type == 2 || s->type == 4) {
#line 470
    msg.msg_name = (void *)(& e->dest);
#line 471
    msg.msg_namelen = 16;
  } else {

  }
  {
#line 473
  ret = kernel_sendmsg(con->sock, & msg, & e->iov, 1UL, e->iov.iov_len);
  }
#line 475
  if (ret == -11 || ret == 0) {
    {
#line 476
    __might_sleep("net/tipc/server.c", 476, 0);
#line 476
    _cond_resched();
    }
#line 477
    goto out;
  } else
#line 478
  if (ret < 0) {
#line 479
    goto send_err;
  } else {

  }
#line 483
  count = count + 1;
#line 483
  if (count > 24) {
    {
#line 484
    __might_sleep("net/tipc/server.c", 484, 0);
#line 484
    _cond_resched();
#line 485
    count = 0;
    }
  } else {

  }
  {
#line 488
  ldv_spin_lock_bh_82(& con->outqueue_lock);
#line 489
  list_del(& e->list);
#line 490
  tipc_free_entry(e);
  }
#line 491
  goto ldv_43141;
  ldv_43136: 
  {
#line 492
  ldv_spin_unlock_bh_83(& con->outqueue_lock);
  }
  out: ;
#line 494
  return;
  send_err: 
  {
#line 497
  tipc_close_conn(con);
  }
#line 498
  return;
}
}
#line 500 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_recv_work(struct work_struct *work ) 
{ 
  struct tipc_conn *con ;
  struct work_struct  const  *__mptr ;
  int count ;
  int tmp ;
  int tmp___0 ;

  {
#line 502
  __mptr = (struct work_struct  const  *)work;
#line 502
  con = (struct tipc_conn *)((char *)__mptr + 0xffffffffffffffe0UL);
#line 503
  count = 0;
#line 505
  goto ldv_43152;
  ldv_43151: 
  {
#line 506
  tmp = (*(con->rx_action))(con);
  }
#line 506
  if (tmp != 0) {
#line 507
    goto ldv_43149;
  } else {

  }
#line 510
  count = count + 1;
#line 510
  if (count > 24) {
    {
#line 511
    __might_sleep("net/tipc/server.c", 511, 0);
#line 511
    _cond_resched();
#line 512
    count = 0;
    }
  } else {

  }
  ldv_43152: 
  {
#line 505
  tmp___0 = constant_test_bit(1L, (unsigned long const volatile   *)(& con->flags));
  }
#line 505
  if (tmp___0 != 0) {
#line 507
    goto ldv_43151;
  } else {

  }
  ldv_43149: 
  {
#line 515
  conn_put(con);
  }
#line 516
  return;
}
}
#line 518 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_send_work(struct work_struct *work ) 
{ 
  struct tipc_conn *con ;
  struct work_struct  const  *__mptr ;
  int tmp ;

  {
  {
#line 520
  __mptr = (struct work_struct  const  *)work;
#line 520
  con = (struct tipc_conn *)((char *)__mptr + 0xffffffffffffff28UL);
#line 522
  tmp = constant_test_bit(1L, (unsigned long const volatile   *)(& con->flags));
  }
#line 522
  if (tmp != 0) {
    {
#line 523
    tipc_send_to_sock(con);
    }
  } else {

  }
  {
#line 525
  conn_put(con);
  }
#line 526
  return;
}
}
#line 528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static void tipc_work_stop(struct tipc_server *s ) 
{ 


  {
  {
#line 530
  destroy_workqueue(s->rcv_wq);
#line 531
  destroy_workqueue(s->send_wq);
  }
#line 532
  return;
}
}
#line 534 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
static int tipc_work_start(struct tipc_server *s ) 
{ 
  struct lock_class_key __key ;
  char const   *__lock_name ;
  struct workqueue_struct *tmp ;
  struct lock_class_key __key___0 ;
  char const   *__lock_name___0 ;
  struct workqueue_struct *tmp___0 ;

  {
  {
#line 536
  __lock_name = "tipc_rcv";
#line 536
  tmp = __alloc_workqueue_key("tipc_rcv", 2U, 1, & __key, __lock_name);
#line 536
  s->rcv_wq = tmp;
  }
#line 537
  if ((unsigned long )s->rcv_wq == (unsigned long )((struct workqueue_struct *)0)) {
    {
#line 538
    printk("\vtipc: can\'t start tipc receive workqueue\n");
    }
#line 539
    return (-12);
  } else {

  }
  {
#line 542
  __lock_name___0 = "tipc_send";
#line 542
  tmp___0 = __alloc_workqueue_key("tipc_send", 2U, 1, & __key___0, __lock_name___0);
#line 542
  s->send_wq = tmp___0;
  }
#line 543
  if ((unsigned long )s->send_wq == (unsigned long )((struct workqueue_struct *)0)) {
    {
#line 544
    printk("\vtipc: can\'t start tipc send workqueue\n");
#line 545
    destroy_workqueue(s->rcv_wq);
    }
#line 546
    return (-12);
  } else {

  }
#line 549
  return (0);
}
}
#line 552 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
int tipc_server_start(struct tipc_server *s ) 
{ 
  int ret ;
  struct lock_class_key __key ;

  {
  {
#line 556
  spinlock_check(& s->idr_lock);
#line 556
  __raw_spin_lock_init(& s->idr_lock.__annonCompField19.rlock, "&(&s->idr_lock)->rlock",
                       & __key);
#line 557
  idr_init(& s->conn_idr);
#line 558
  s->idr_in_use = 0;
#line 560
  s->rcvbuf_cache = kmem_cache_create((char const   *)(& s->name), (size_t )s->max_rcvbuf_size,
                                      0UL, 8192UL, (void (*)(void * ))0);
  }
#line 562
  if ((unsigned long )s->rcvbuf_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 563
    return (-12);
  } else {

  }
  {
#line 565
  ret = tipc_work_start(s);
  }
#line 566
  if (ret < 0) {
    {
#line 567
    kmem_cache_destroy(s->rcvbuf_cache);
    }
#line 568
    return (ret);
  } else {

  }
  {
#line 570
  ret = tipc_open_listening_sock(s);
  }
#line 571
  if (ret < 0) {
    {
#line 572
    tipc_work_stop(s);
#line 573
    kmem_cache_destroy(s->rcvbuf_cache);
    }
#line 574
    return (ret);
  } else {

  }
#line 576
  s->enabled = 1;
#line 577
  return (ret);
}
}
#line 580 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/server.c"
void tipc_server_stop(struct tipc_server *s ) 
{ 
  struct tipc_conn *con ;
  int total ;
  int id ;
  void *tmp ;

  {
#line 583
  total = 0;
#line 586
  if (s->enabled == 0) {
#line 587
    return;
  } else {

  }
  {
#line 589
  s->enabled = 0;
#line 590
  ldv_spin_lock_bh_75___0(& s->idr_lock);
#line 591
  id = 0;
  }
#line 591
  goto ldv_43183;
  ldv_43182: 
  {
#line 592
  tmp = idr_find(& s->conn_idr, id);
#line 592
  con = (struct tipc_conn *)tmp;
  }
#line 593
  if ((unsigned long )con != (unsigned long )((struct tipc_conn *)0)) {
    {
#line 594
    total = total + 1;
#line 595
    ldv_spin_unlock_bh_76___1(& s->idr_lock);
#line 596
    tipc_close_conn(con);
#line 597
    ldv_spin_lock_bh_75___0(& s->idr_lock);
    }
  } else {

  }
#line 591
  id = id + 1;
  ldv_43183: ;
#line 591
  if (total < s->idr_in_use) {
#line 593
    goto ldv_43182;
  } else {

  }
  {
#line 600
  ldv_spin_unlock_bh_76___1(& s->idr_lock);
#line 602
  tipc_work_stop(s);
#line 603
  kmem_cache_destroy(s->rcvbuf_cache);
#line 604
  idr_destroy(& s->conn_idr);
  }
#line 605
  return;
}
}
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_server.c.aux"
__inline static void *ERR_PTR(long error ) 
{ 
  void *tmp ;

  {
  {
#line 276
  tmp = ldv_err_ptr(error);
  }
#line 276
  return (tmp);
}
}
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_server.c.aux"
__inline static long PTR_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 283
  tmp = ldv_ptr_err(ptr);
  }
#line 283
  return (tmp);
}
}
#line 287 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_server.c.aux"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 290
  tmp = ldv_is_err(ptr);
  }
#line 290
  return (tmp);
}
}
#line 926 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_server.c.aux"
__inline static void ldv_spin_lock_bh_75___0(spinlock_t *lock ) 
{ 


  {
  {
#line 929
  ldv_spin_lock_idr_lock_of_tipc_server();
#line 931
  spin_lock_bh(lock);
  }
#line 932
  return;
}
}
#line 935 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_server.c.aux"
__inline static void ldv_spin_unlock_bh_76___1(spinlock_t *lock ) 
{ 


  {
  {
#line 938
  ldv_spin_unlock_idr_lock_of_tipc_server();
#line 940
  spin_unlock_bh(lock);
  }
#line 941
  return;
}
}
#line 989 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_server.c.aux"
__inline static void ldv_spin_lock_bh_82(spinlock_t *lock ) 
{ 


  {
  {
#line 992
  ldv_spin_lock_outqueue_lock_of_tipc_conn();
#line 994
  spin_lock_bh(lock);
  }
#line 995
  return;
}
}
#line 998 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/weaver/.tmp_server.c.aux"
__inline static void ldv_spin_unlock_bh_83(spinlock_t *lock ) 
{ 


  {
  {
#line 1001
  ldv_spin_unlock_outqueue_lock_of_tipc_conn();
#line 1003
  spin_unlock_bh(lock);
  }
#line 1004
  return;
}
}
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static struct tipc_media ib_media_info ;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static struct ib_bearer ib_bearers[2U]  ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static int ib_started  ;
#line 76
extern void __compiletime_assert_76(void) ;
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static void ib_media_addr_set(struct tipc_bearer  const  *tb_ptr , struct tipc_media_addr *a ,
                              char *mac ) 
{ 
  bool __cond ;
  int tmp ;

  {
#line 76
  __cond = 0;
#line 76
  if ((int )__cond) {
    {
#line 76
    __compiletime_assert_76();
    }
  } else {

  }
  {
#line 77
  memcpy((void *)(& a->value), (void const   *)mac, 20UL);
#line 78
  a->media_id = 2U;
#line 79
  tmp = memcmp((void const   *)mac, (void const   *)(& tb_ptr->bcast_addr.value),
               20UL);
#line 79
  a->broadcast = tmp == 0;
  }
#line 80
  return;
}
}
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static int send_msg___1(struct sk_buff *buf , struct tipc_bearer *tb_ptr , struct tipc_media_addr *dest ) 
{ 
  struct sk_buff *clone ;
  struct net_device *dev ;
  int delta ;
  unsigned int tmp ;
  int tmp___0 ;

  {
  {
#line 92
  clone = skb_clone(buf, 32U);
  }
#line 93
  if ((unsigned long )clone == (unsigned long )((struct sk_buff *)0)) {
#line 94
    return (0);
  } else {

  }
  {
#line 96
  dev = ((struct ib_bearer *)tb_ptr->usr_handle)->dev;
#line 97
  tmp = skb_headroom((struct sk_buff  const  *)buf);
#line 97
  delta = (int )((unsigned int )dev->hard_header_len - tmp);
  }
#line 99
  if (delta > 0) {
    {
#line 99
    tmp___0 = pskb_expand_head(clone, (delta + 63) & -64, 0, 32U);
    }
#line 99
    if (tmp___0 != 0) {
      {
#line 101
      kfree_skb(clone);
      }
#line 102
      return (0);
    } else {

    }
  } else {

  }
  {
#line 105
  skb_reset_network_header(clone);
#line 106
  clone->dev = dev;
#line 107
  clone->protocol = 51848U;
#line 108
  dev_hard_header(clone, dev, 35018, (void const   *)(& dest->value), (void const   *)dev->dev_addr,
                  clone->len);
#line 110
  dev_queue_xmit(clone);
  }
#line 111
  return (0);
}
}
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static int recv_msg___1(struct sk_buff *buf , struct net_device *dev , struct packet_type *pt ,
                        struct net_device *orig_dev ) 
{ 
  struct ib_bearer *ib_ptr ;
  struct net *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 124
  ib_ptr = (struct ib_bearer *)pt->af_packet_priv;
#line 126
  tmp = dev_net((struct net_device  const  *)dev);
#line 126
  tmp___0 = net_eq((struct net  const  *)tmp, (struct net  const  *)(& init_net));
  }
#line 126
  if (tmp___0 == 0) {
    {
#line 127
    kfree_skb(buf);
    }
#line 128
    return (0);
  } else {

  }
  {
#line 131
  tmp___2 = __builtin_expect((unsigned long )ib_ptr->bearer != (unsigned long )((struct tipc_bearer *)0),
                             1L);
  }
#line 131
  if (tmp___2 != 0L) {
    {
#line 132
    tmp___1 = __builtin_expect((int )buf->pkt_type <= 1, 1L);
    }
#line 132
    if (tmp___1 != 0L) {
      {
#line 133
      buf->next = (struct sk_buff *)0;
#line 134
      tipc_recv_msg(buf, ib_ptr->bearer);
      }
#line 135
      return (0);
    } else {

    }
  } else {

  }
  {
#line 138
  kfree_skb(buf);
  }
#line 139
  return (0);
}
}
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static void setup_bearer___0(struct work_struct *work ) 
{ 
  struct ib_bearer *ib_ptr ;
  struct work_struct  const  *__mptr ;

  {
  {
#line 148
  __mptr = (struct work_struct  const  *)work;
#line 148
  ib_ptr = (struct ib_bearer *)((char *)__mptr + 0xffffffffffffffb8UL);
#line 150
  dev_add_pack(& ib_ptr->tipc_packet_type);
  }
#line 151
  return;
}
}
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static int enable_bearer___0(struct tipc_bearer *tb_ptr ) 
{ 
  struct net_device *dev ;
  struct ib_bearer *ib_ptr ;
  struct ib_bearer *stop ;
  char *driver_name ;
  char *tmp ;
  int pending_dev ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
  {
#line 159
  ib_ptr = (struct ib_bearer *)(& ib_bearers);
#line 160
  stop = (struct ib_bearer *)(& ib_bearers) + 2UL;
#line 161
  tmp = strchr((char const   *)(& tb_ptr->name), 58);
#line 161
  driver_name = tmp + 1UL;
#line 162
  pending_dev = 0;
  }
#line 165
  goto ldv_39792;
  ldv_39791: ;
#line 166
  if ((unsigned long )ib_ptr->bearer == (unsigned long )((struct tipc_bearer *)0)) {
#line 167
    pending_dev = pending_dev + 1;
  } else {

  }
#line 168
  ib_ptr = ib_ptr + 1;
#line 168
  if ((unsigned long )ib_ptr == (unsigned long )stop) {
#line 169
    return (pending_dev != 0 ? -11 : -122);
  } else {

  }
  ldv_39792: ;
#line 165
  if ((unsigned long )ib_ptr->dev != (unsigned long )((struct net_device *)0)) {
#line 167
    goto ldv_39791;
  } else {

  }
  {
#line 173
  dev = dev_get_by_name(& init_net, (char const   *)driver_name);
  }
#line 174
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
#line 175
    return (-19);
  } else {

  }
  {
#line 178
  ib_ptr->dev = dev;
#line 179
  ib_ptr->tipc_packet_type.type = 51848U;
#line 180
  ib_ptr->tipc_packet_type.dev = dev;
#line 181
  ib_ptr->tipc_packet_type.func = & recv_msg___1;
#line 182
  ib_ptr->tipc_packet_type.af_packet_priv = (void *)ib_ptr;
#line 183
  INIT_LIST_HEAD(& ib_ptr->tipc_packet_type.list);
#line 184
  __init_work(& ib_ptr->setup, 0);
#line 184
  __constr_expr_0.counter = 137438953408L;
#line 184
  ib_ptr->setup.data = __constr_expr_0;
#line 184
  lockdep_init_map(& ib_ptr->setup.lockdep_map, "(&ib_ptr->setup)", & __key, 0);
#line 184
  INIT_LIST_HEAD(& ib_ptr->setup.entry);
#line 184
  ib_ptr->setup.func = & setup_bearer___0;
#line 185
  schedule_work(& ib_ptr->setup);
#line 188
  ib_ptr->bearer = tb_ptr;
#line 189
  tb_ptr->usr_handle = (void *)ib_ptr;
#line 190
  memset((void *)(& tb_ptr->bcast_addr.value), 0, 20UL);
#line 191
  memcpy((void *)(& tb_ptr->bcast_addr.value), (void const   *)(& dev->broadcast),
         20UL);
#line 192
  tb_ptr->bcast_addr.media_id = 2U;
#line 193
  tb_ptr->bcast_addr.broadcast = 1U;
#line 194
  tb_ptr->mtu = dev->mtu;
#line 195
  tb_ptr->blocked = 0;
#line 196
  ib_media_addr_set((struct tipc_bearer  const  *)tb_ptr, & tb_ptr->addr, (char *)dev->dev_addr);
  }
#line 197
  return (0);
}
}
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static void cleanup_bearer___0(struct work_struct *work ) 
{ 
  struct ib_bearer *ib_ptr ;
  struct work_struct  const  *__mptr ;

  {
  {
#line 208
  __mptr = (struct work_struct  const  *)work;
#line 208
  ib_ptr = (struct ib_bearer *)((char *)__mptr + 0xffffffffffffff68UL);
#line 210
  dev_remove_pack(& ib_ptr->tipc_packet_type);
#line 211
  dev_put(ib_ptr->dev);
#line 212
  ib_ptr->dev = (struct net_device *)0;
  }
#line 213
  return;
}
}
#line 222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static void disable_bearer___0(struct tipc_bearer *tb_ptr ) 
{ 
  struct ib_bearer *ib_ptr ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
  {
#line 224
  ib_ptr = (struct ib_bearer *)tb_ptr->usr_handle;
#line 226
  ib_ptr->bearer = (struct tipc_bearer *)0;
#line 227
  __init_work(& ib_ptr->cleanup, 0);
#line 227
  __constr_expr_0.counter = 137438953408L;
#line 227
  ib_ptr->cleanup.data = __constr_expr_0;
#line 227
  lockdep_init_map(& ib_ptr->cleanup.lockdep_map, "(&ib_ptr->cleanup)", & __key, 0);
#line 227
  INIT_LIST_HEAD(& ib_ptr->cleanup.entry);
#line 227
  ib_ptr->cleanup.func = & cleanup_bearer___0;
#line 228
  schedule_work(& ib_ptr->cleanup);
  }
#line 229
  return;
}
}
#line 237 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static int recv_notification___0(struct notifier_block *nb , unsigned long evt , void *ptr ) 
{ 
  struct net_device *dev ;
  struct net_device *tmp ;
  struct ib_bearer *ib_ptr ;
  struct ib_bearer *stop ;
  struct net *tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
  {
#line 240
  tmp = netdev_notifier_info_to_dev((struct netdev_notifier_info  const  *)ptr);
#line 240
  dev = tmp;
#line 241
  ib_ptr = (struct ib_bearer *)(& ib_bearers);
#line 242
  stop = (struct ib_bearer *)(& ib_bearers) + 2UL;
#line 244
  tmp___0 = dev_net((struct net_device  const  *)dev);
#line 244
  tmp___1 = net_eq((struct net  const  *)tmp___0, (struct net  const  *)(& init_net));
  }
#line 244
  if (tmp___1 == 0) {
#line 245
    return (0);
  } else {

  }
#line 247
  goto ldv_39817;
  ldv_39816: 
#line 248
  ib_ptr = ib_ptr + 1;
#line 248
  if ((unsigned long )ib_ptr == (unsigned long )stop) {
#line 249
    return (0);
  } else {

  }
  ldv_39817: ;
#line 247
  if ((unsigned long )ib_ptr->dev != (unsigned long )dev) {
#line 249
    goto ldv_39816;
  } else {

  }

#line 251
  if ((unsigned long )ib_ptr->bearer == (unsigned long )((struct tipc_bearer *)0)) {
#line 252
    return (0);
  } else {

  }
#line 254
  (ib_ptr->bearer)->mtu = dev->mtu;
  {
#line 257
  if (evt == 4UL) {
#line 257
    goto case_4;
  } else {

  }
#line 263
  if (evt == 1UL) {
#line 263
    goto case_1;
  } else {

  }
#line 266
  if (evt == 2UL) {
#line 266
    goto case_2;
  } else {

  }
#line 269
  if (evt == 7UL) {
#line 269
    goto case_7;
  } else {

  }
#line 270
  if (evt == 8UL) {
#line 270
    goto case_8;
  } else {

  }
#line 274
  if (evt == 6UL) {
#line 274
    goto case_6;
  } else {

  }
#line 275
  if (evt == 10UL) {
#line 275
    goto case_10;
  } else {

  }
#line 256
  goto switch_break;
  case_4: /* CIL Label */ 
  {
#line 258
  tmp___2 = netif_carrier_ok((struct net_device  const  *)dev);
  }
#line 258
  if ((int )tmp___2) {
    {
#line 259
    tipc_continue(ib_ptr->bearer);
    }
  } else {
    {
#line 261
    tipc_block_bearer((char const   *)(& (ib_ptr->bearer)->name));
    }
  }
#line 262
  goto ldv_39820;
  case_1: /* CIL Label */ 
  {
#line 264
  tipc_continue(ib_ptr->bearer);
  }
#line 265
  goto ldv_39820;
  case_2: /* CIL Label */ 
  {
#line 267
  tipc_block_bearer((char const   *)(& (ib_ptr->bearer)->name));
  }
#line 268
  goto ldv_39820;
  case_7: /* CIL Label */ ;
  case_8: /* CIL Label */ 
  {
#line 271
  tipc_block_bearer((char const   *)(& (ib_ptr->bearer)->name));
#line 272
  tipc_continue(ib_ptr->bearer);
  }
#line 273
  goto ldv_39820;
  case_6: /* CIL Label */ ;
  case_10: /* CIL Label */ 
  {
#line 276
  tipc_disable_bearer((char const   *)(& (ib_ptr->bearer)->name));
  }
#line 277
  goto ldv_39820;
  switch_break: /* CIL Label */ ;
  }
  ldv_39820: ;
#line 279
  return (1);
}
}
#line 282 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static struct notifier_block notifier___0  =    {& recv_notification___0, 0, 0};
#line 290 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static int ib_addr2str(struct tipc_media_addr *a , char *str_buf , int str_size ) 
{ 


  {
#line 292
  if (str_size <= 59) {
#line 293
    return (1);
  } else {

  }
  {
#line 295
  sprintf(str_buf, "%20phC", (u8 *)(& a->value));
  }
#line 297
  return (0);
}
}
#line 303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static int ib_addr2msg(struct tipc_media_addr *a , char *msg_area ) 
{ 


  {
  {
#line 305
  memset((void *)msg_area, 0, 20UL);
#line 306
  *(msg_area + 3UL) = 2;
#line 307
  memcpy((void *)msg_area, (void const   *)(& a->value), 20UL);
  }
#line 308
  return (0);
}
}
#line 314 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static int ib_msg2addr(struct tipc_bearer  const  *tb_ptr , struct tipc_media_addr *a ,
                       char *msg_area ) 
{ 


  {
  {
#line 317
  ib_media_addr_set(tb_ptr, a, msg_area);
  }
#line 318
  return (0);
}
}
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
static struct tipc_media ib_media_info  = 
#line 324
     {& send_msg___1, & enable_bearer___0, & disable_bearer___0, & ib_addr2str, & ib_addr2msg,
    & ib_msg2addr, 10U, 1500U, 50U, 2U, {'i', 'b', '\000'}};
#line 344 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
int tipc_ib_media_start(void) 
{ 
  int res ;

  {
#line 348
  if (ib_started != 0) {
#line 349
    return (-22);
  } else {

  }
  {
#line 351
  res = tipc_register_media(& ib_media_info);
  }
#line 352
  if (res != 0) {
#line 353
    return (res);
  } else {

  }
  {
#line 355
  res = register_netdevice_notifier(& notifier___0);
  }
#line 356
  if (res == 0) {
#line 357
    ib_started = 1;
  } else {

  }
#line 358
  return (res);
}
}
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/ib_media.c"
void tipc_ib_media_stop(void) 
{ 


  {
#line 366
  if (ib_started == 0) {
#line 367
    return;
  } else {

  }
  {
#line 369
  flush_scheduled_work();
#line 370
  unregister_netdevice_notifier(& notifier___0);
#line 371
  ib_started = 0;
  }
#line 372
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/linux/sysctl.h"
extern int proc_dointvec(struct ctl_table * , int  , void * , size_t * , loff_t * ) ;
#line 321 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/include/net/net_namespace.h"
extern struct ctl_table_header *register_net_sysctl(struct net * , char const   * ,
                                                    struct ctl_table * ) ;
#line 323
extern void unregister_net_sysctl_table(struct ctl_table_header * ) ;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/sysctl.c"
static struct ctl_table_header *tipc_ctl_hdr  ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/sysctl.c"
static struct ctl_table tipc_table[2U]  = {      {"tipc_rmem", (void *)(& sysctl_tipc_rmem), 12, 420U, 0, & proc_dointvec, 0,
      0, 0}};
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/sysctl.c"
int tipc_register_sysctl(void) 
{ 


  {
  {
#line 55
  tipc_ctl_hdr = register_net_sysctl(& init_net, "net/tipc", (struct ctl_table *)(& tipc_table));
  }
#line 56
  if ((unsigned long )tipc_ctl_hdr == (unsigned long )((struct ctl_table_header *)0)) {
#line 57
    return (-12);
  } else {

  }
#line 58
  return (0);
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/lkbce/net/tipc/sysctl.c"
void tipc_unregister_sysctl(void) 
{ 


  {
  {
#line 63
  unregister_net_sysctl_table(tipc_ctl_hdr);
  }
#line 64
  return;
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device  const  *dev ) ;
#line 24
int ldv_dev_set_drvdata(struct device *dev , void *data ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_xzalloc(size_t size ) ;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 29
  if ((unsigned long )dev != (unsigned long )((struct device  const  *)0) && (unsigned long )dev->p != (unsigned long )((struct device_private */* const  */)0)) {
#line 30
    return ((dev->p)->driver_data);
  } else {

  }
#line 32
  return ((void *)0);
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev , void *data ) 
{ 
  void *tmp ;

  {
  {
#line 43
  tmp = ldv_xzalloc(8UL);
#line 43
  dev->p = (struct device_private *)tmp;
#line 44
  (dev->p)->driver_data = data;
  }
#line 46
  return (0);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_zalloc(size_t size ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host , unsigned int size ) 
{ 
  struct spi_master *master ;
  void *tmp ;

  {
  {
#line 27
  tmp = ldv_zalloc((unsigned long )size + 2072UL);
#line 27
  master = (struct spi_master *)tmp;
  }
#line 29
  if ((unsigned long )master == (unsigned long )((struct spi_master *)0)) {
#line 30
    return ((struct spi_master *)0);
  } else {

  }
  {
#line 32
  ldv_dev_set_drvdata(& master->dev, (void *)(master + 1UL));
  }
#line 34
  return (master);
}
}
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/err.h"
long ldv_is_err_or_null(void const   *ptr ) ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/err.c"
long ldv_is_err(void const   *ptr ) 
{ 


  {
#line 22
  return ((unsigned long )ptr > 4294967295UL);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/err.c"
void *ldv_err_ptr(long error ) 
{ 


  {
#line 27
  return ((void *)(4294967295L - error));
}
}
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/err.c"
long ldv_ptr_err(void const   *ptr ) 
{ 


  {
#line 32
  return ((long )(4294967295UL - (unsigned long )ptr));
}
}
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/err.c"
long ldv_is_err_or_null(void const   *ptr ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 37
  if ((unsigned long )ptr == (unsigned long )((void const   *)0)) {
#line 37
    tmp___0 = 1;
  } else {
    {
#line 37
    tmp = ldv_is_err(ptr);
    }
#line 37
    if (tmp != 0L) {
#line 37
      tmp___0 = 1;
    } else {
#line 37
      tmp___0 = 0;
    }
  }
#line 37
  return ((long )tmp___0);
}
}
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.h"
bool ldv_in_interrupt_context(void) ;
#line 133
int ldv_post_probe(int probe_ret_val ) ;
#line 141
int ldv_filter_err_code(int ret_val ) ;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
static bool __ldv_in_interrupt_context  =    0;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void) 
{ 


  {
#line 30
  __ldv_in_interrupt_context = 1;
#line 31
  return;
}
}
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
void ldv_switch_to_process_context(void) 
{ 


  {
#line 36
  __ldv_in_interrupt_context = 0;
#line 37
  return;
}
}
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
bool ldv_in_interrupt_context(void) 
{ 


  {
#line 41
  return (__ldv_in_interrupt_context);
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
static int ldv_filter_positive_int(int val ) 
{ 


  {
  {
#line 46
  __VERIFIER_assume(val <= 0);
  }
#line 47
  return (val);
}
}
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_post_init(int init_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 56
  tmp = ldv_filter_positive_int(init_ret_val);
  }
#line 56
  return (tmp);
}
}
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 62
  tmp = ldv_filter_positive_int(probe_ret_val);
  }
#line 62
  return (tmp);
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val ) 
{ 
  int tmp ;

  {
  {
#line 68
  tmp = ldv_filter_positive_int(ret_val);
  }
#line 68
  return (tmp);
}
}
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n , size_t size , gfp_t flags ) ;
#line 28
extern void ldv_check_alloc_flags(gfp_t  ) ;
#line 29
extern void ldv_after_alloc(void * ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_malloc(size_t size ) ;
#line 24
void *ldv_calloc(size_t nmemb , size_t size ) ;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kmalloc(size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 25
  ldv_check_alloc_flags(flags);
#line 26
  res = ldv_malloc(size);
#line 27
  ldv_after_alloc(res);
  }
#line 29
  return (res);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 36
  ldv_check_alloc_flags(flags);
#line 37
  res = ldv_calloc(n, size);
#line 38
  ldv_after_alloc(res);
  }
#line 40
  return (res);
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kzalloc(size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 47
  ldv_check_alloc_flags(flags);
#line 48
  res = ldv_zalloc(size);
#line 49
  ldv_after_alloc(res);
  }
#line 51
  return (res);
}
}
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n , size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 58
  ldv_check_alloc_flags(flags);
#line 59
  res = ldv_malloc(n * size);
#line 60
  ldv_after_alloc(res);
  }
#line 62
  return (res);
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/common.h"
extern void __VERIFIER_error(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/gcc.c"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 26
  return (exp);
}
}
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/gcc.c"
void __builtin_trap(void) 
{ 


  {
  {
#line 37
  __VERIFIER_error();
  }
#line 38
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
extern void *external_allocated_data(void) ;
#line 33
void *ldv_malloc_unknown_size(void) ;
#line 34
void *ldv_calloc_unknown_size(void) ;
#line 35
void *ldv_zalloc_unknown_size(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
extern void *malloc(size_t  ) ;
#line 25
extern void *calloc(size_t  , size_t  ) ;
#line 26
extern void free(void * ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_malloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 31
  tmp___1 = ldv_undef_int();
  }
#line 31
  if (tmp___1 != 0) {
    {
#line 32
    tmp = malloc(size);
#line 32
    res = tmp;
#line 34
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 35
    tmp___0 = ldv_is_err((void const   *)res);
#line 35
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 37
    return (res);
  } else {
#line 40
    return ((void *)0);
  }
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_calloc(size_t nmemb , size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 45
  tmp___1 = ldv_undef_int();
  }
#line 45
  if (tmp___1 != 0) {
    {
#line 46
    tmp = calloc(nmemb, size);
#line 46
    res = tmp;
#line 48
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 49
    tmp___0 = ldv_is_err((void const   *)res);
#line 49
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 51
    return (res);
  } else {
#line 54
    return ((void *)0);
  }
}
}
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_zalloc(size_t size ) 
{ 
  void *tmp ;

  {
  {
#line 59
  tmp = ldv_calloc(1UL, size);
  }
#line 59
  return (tmp);
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void ldv_free(void *s ) 
{ 


  {
  {
#line 64
  free(s);
  }
#line 65
  return;
}
}
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xmalloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 69
  tmp = malloc(size);
#line 69
  res = tmp;
#line 71
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 72
  tmp___0 = ldv_is_err((void const   *)res);
#line 72
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 74
  return (res);
}
}
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xzalloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 79
  tmp = calloc(1UL, size);
#line 79
  res = tmp;
#line 81
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 82
  tmp___0 = ldv_is_err((void const   *)res);
#line 82
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 84
  return (res);
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_malloc_unknown_size(void) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 89
  tmp___1 = ldv_undef_int();
  }
#line 89
  if (tmp___1 != 0) {
    {
#line 90
    tmp = external_allocated_data();
#line 90
    res = tmp;
#line 92
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 93
    tmp___0 = ldv_is_err((void const   *)res);
#line 93
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 95
    return (res);
  } else {
#line 98
    return ((void *)0);
  }
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_calloc_unknown_size(void) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 103
  tmp___1 = ldv_undef_int();
  }
#line 103
  if (tmp___1 != 0) {
    {
#line 104
    tmp = external_allocated_data();
#line 104
    res = tmp;
#line 106
    memset(res, 0, 8UL);
#line 107
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 108
    tmp___0 = ldv_is_err((void const   *)res);
#line 108
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 110
    return (res);
  } else {
#line 113
    return ((void *)0);
  }
}
}
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_zalloc_unknown_size(void) 
{ 
  void *tmp ;

  {
  {
#line 118
  tmp = ldv_calloc_unknown_size();
  }
#line 118
  return (tmp);
}
}
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 123
  tmp = external_allocated_data();
#line 123
  res = tmp;
#line 125
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 126
  tmp___0 = ldv_is_err((void const   *)res);
#line 126
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 128
  return (res);
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_long(void) ;
#line 24
unsigned int ldv_undef_uint(void) ;
#line 25
unsigned long ldv_undef_ulong(void) ;
#line 26
unsigned long long ldv_undef_ulonglong(void) ;
#line 27
void *ldv_undef_ptr(void) ;
#line 30
int ldv_undef_int_positive(void) ;
#line 36
int ldv_undef_int_nonpositive(void) ;
#line 39
void *ldv_undef_ptr_non_null(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
extern int __VERIFIER_nondet_int(void) ;
#line 26
extern long __VERIFIER_nondet_long(void) ;
#line 33
extern unsigned int __VERIFIER_nondet_uint(void) ;
#line 36
extern unsigned long __VERIFIER_nondet_ulong(void) ;
#line 37
extern unsigned long long __VERIFIER_nondet_ulonglong(void) ;
#line 38
extern void *__VERIFIER_nondet_pointer(void) ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int(void) 
{ 
  int tmp ;

  {
  {
#line 43
  tmp = __VERIFIER_nondet_int();
  }
#line 43
  return (tmp);
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_long(void) 
{ 
  long tmp ;

  {
  {
#line 48
  tmp = __VERIFIER_nondet_long();
  }
#line 48
  return ((int )tmp);
}
}
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned int ldv_undef_uint(void) 
{ 
  unsigned int tmp ;

  {
  {
#line 53
  tmp = __VERIFIER_nondet_uint();
  }
#line 53
  return (tmp);
}
}
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
void *ldv_undef_ptr(void) 
{ 
  void *tmp ;

  {
  {
#line 58
  tmp = __VERIFIER_nondet_pointer();
  }
#line 58
  return (tmp);
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned long ldv_undef_ulong(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 63
  tmp = __VERIFIER_nondet_ulong();
  }
#line 63
  return (tmp);
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void) 
{ 
  unsigned long long tmp ;

  {
  {
#line 68
  tmp = __VERIFIER_nondet_ulonglong();
  }
#line 68
  return (tmp);
}
}
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_positive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 73
  tmp = ldv_undef_int();
#line 73
  ret = tmp;
#line 75
  __VERIFIER_assume(ret > 0);
  }
#line 77
  return (ret);
}
}
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_negative(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 82
  tmp = ldv_undef_int();
#line 82
  ret = tmp;
#line 84
  __VERIFIER_assume(ret < 0);
  }
#line 86
  return (ret);
}
}
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_nonpositive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 91
  tmp = ldv_undef_int();
#line 91
  ret = tmp;
#line 93
  __VERIFIER_assume(ret <= 0);
  }
#line 95
  return (ret);
}
}
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void) 
{ 
  void *ret ;
  int tmp ;

  {
  {
#line 100
  tmp = ldv_undef_int();
#line 100
  ret = (void *)((long )tmp);
#line 102
  __VERIFIER_assume((unsigned long )ret != (unsigned long )((void *)0));
  }
#line 104
  return (ret);
}
}
#line 1 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/rsg/models/spinlock.bk.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(int expr ) ;
#line 2
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(int expr ) ;
#line 3
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(int expr ) ;
#line 4
void ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(int expr ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin__xmit_lock_of_netdev_queue  =    1;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 28
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 30
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 32
  ldv_spin__xmit_lock_of_netdev_queue = 2;
  }
#line 33
  return;
}
}
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 39
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin__xmit_lock_of_netdev_queue == 2);
#line 41
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 2);
#line 43
  ldv_spin__xmit_lock_of_netdev_queue = 1;
  }
#line 44
  return;
}
}
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 52
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 54
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 57
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 60
  if (is_spin_held_by_another_thread != 0) {
#line 62
    return (0);
  } else {
#line 66
    ldv_spin__xmit_lock_of_netdev_queue = 2;
#line 68
    return (1);
  }
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 76
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 78
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 1);
  }
#line 79
  return;
}
}
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 87
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 90
  if (ldv_spin__xmit_lock_of_netdev_queue == 1 && is_spin_held_by_another_thread == 0) {
#line 92
    return (0);
  } else {
#line 96
    return (1);
  }
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;

  {
  {
#line 104
  tmp = ldv_spin_is_locked__xmit_lock_of_netdev_queue();
  }
#line 104
  return (tmp == 0);
}
}
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 113
  is_spin_contended = ldv_undef_int();
  }
#line 116
  if (is_spin_contended != 0) {
#line 118
    return (0);
  } else {
#line 122
    return (1);
  }
}
}
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 132
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 134
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 137
  atomic_value_after_dec = ldv_undef_int();
  }
#line 140
  if (atomic_value_after_dec == 0) {
#line 142
    ldv_spin__xmit_lock_of_netdev_queue = 2;
#line 144
    return (1);
  } else {

  }
#line 148
  return (0);
}
}
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_addr_list_lock_of_net_device  =    1;
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 156
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_addr_list_lock_of_net_device == 1);
#line 158
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 1);
#line 160
  ldv_spin_addr_list_lock_of_net_device = 2;
  }
#line 161
  return;
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 167
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_addr_list_lock_of_net_device == 2);
#line 169
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 2);
#line 171
  ldv_spin_addr_list_lock_of_net_device = 1;
  }
#line 172
  return;
}
}
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 180
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_addr_list_lock_of_net_device == 1);
#line 182
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 1);
#line 185
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 188
  if (is_spin_held_by_another_thread != 0) {
#line 190
    return (0);
  } else {
#line 194
    ldv_spin_addr_list_lock_of_net_device = 2;
#line 196
    return (1);
  }
}
}
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 204
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_addr_list_lock_of_net_device == 1);
#line 206
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 1);
  }
#line 207
  return;
}
}
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 215
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 218
  if (ldv_spin_addr_list_lock_of_net_device == 1 && is_spin_held_by_another_thread == 0) {
#line 220
    return (0);
  } else {
#line 224
    return (1);
  }
}
}
#line 229 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 232
  tmp = ldv_spin_is_locked_addr_list_lock_of_net_device();
  }
#line 232
  return (tmp == 0);
}
}
#line 236 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 241
  is_spin_contended = ldv_undef_int();
  }
#line 244
  if (is_spin_contended != 0) {
#line 246
    return (0);
  } else {
#line 250
    return (1);
  }
}
}
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_addr_list_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 260
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_addr_list_lock_of_net_device == 1);
#line 262
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 1);
#line 265
  atomic_value_after_dec = ldv_undef_int();
  }
#line 268
  if (atomic_value_after_dec == 0) {
#line 270
    ldv_spin_addr_list_lock_of_net_device = 2;
#line 272
    return (1);
  } else {

  }
#line 276
  return (0);
}
}
#line 278 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_alloc_lock_of_task_struct  =    1;
#line 281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 284
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_alloc_lock_of_task_struct == 1);
#line 286
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 1);
#line 288
  ldv_spin_alloc_lock_of_task_struct = 2;
  }
#line 289
  return;
}
}
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 295
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_alloc_lock_of_task_struct == 2);
#line 297
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 2);
#line 299
  ldv_spin_alloc_lock_of_task_struct = 1;
  }
#line 300
  return;
}
}
#line 303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 308
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_alloc_lock_of_task_struct == 1);
#line 310
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 1);
#line 313
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 316
  if (is_spin_held_by_another_thread != 0) {
#line 318
    return (0);
  } else {
#line 322
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 324
    return (1);
  }
}
}
#line 329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 332
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_alloc_lock_of_task_struct == 1);
#line 334
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 1);
  }
#line 335
  return;
}
}
#line 338 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 343
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 346
  if (ldv_spin_alloc_lock_of_task_struct == 1 && is_spin_held_by_another_thread == 0) {
#line 348
    return (0);
  } else {
#line 352
    return (1);
  }
}
}
#line 357 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 360
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
  }
#line 360
  return (tmp == 0);
}
}
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 369
  is_spin_contended = ldv_undef_int();
  }
#line 372
  if (is_spin_contended != 0) {
#line 374
    return (0);
  } else {
#line 378
    return (1);
  }
}
}
#line 383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 388
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_alloc_lock_of_task_struct == 1);
#line 390
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 1);
#line 393
  atomic_value_after_dec = ldv_undef_int();
  }
#line 396
  if (atomic_value_after_dec == 0) {
#line 398
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 400
    return (1);
  } else {

  }
#line 404
  return (0);
}
}
#line 406 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_bc_lock  =    1;
#line 409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_bc_lock(void) 
{ 


  {
  {
#line 412
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_bc_lock == 1);
#line 414
  __VERIFIER_assume(ldv_spin_bc_lock == 1);
#line 416
  ldv_spin_bc_lock = 2;
  }
#line 417
  return;
}
}
#line 420 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_bc_lock(void) 
{ 


  {
  {
#line 423
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_bc_lock == 2);
#line 425
  __VERIFIER_assume(ldv_spin_bc_lock == 2);
#line 427
  ldv_spin_bc_lock = 1;
  }
#line 428
  return;
}
}
#line 431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_bc_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 436
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_bc_lock == 1);
#line 438
  __VERIFIER_assume(ldv_spin_bc_lock == 1);
#line 441
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 444
  if (is_spin_held_by_another_thread != 0) {
#line 446
    return (0);
  } else {
#line 450
    ldv_spin_bc_lock = 2;
#line 452
    return (1);
  }
}
}
#line 457 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_bc_lock(void) 
{ 


  {
  {
#line 460
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_bc_lock == 1);
#line 462
  __VERIFIER_assume(ldv_spin_bc_lock == 1);
  }
#line 463
  return;
}
}
#line 466 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_bc_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 471
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 474
  if (ldv_spin_bc_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 476
    return (0);
  } else {
#line 480
    return (1);
  }
}
}
#line 485 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_bc_lock(void) 
{ 
  int tmp ;

  {
  {
#line 488
  tmp = ldv_spin_is_locked_bc_lock();
  }
#line 488
  return (tmp == 0);
}
}
#line 492 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_bc_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 497
  is_spin_contended = ldv_undef_int();
  }
#line 500
  if (is_spin_contended != 0) {
#line 502
    return (0);
  } else {
#line 506
    return (1);
  }
}
}
#line 511 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_bc_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 516
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_bc_lock == 1);
#line 518
  __VERIFIER_assume(ldv_spin_bc_lock == 1);
#line 521
  atomic_value_after_dec = ldv_undef_int();
  }
#line 524
  if (atomic_value_after_dec == 0) {
#line 526
    ldv_spin_bc_lock = 2;
#line 528
    return (1);
  } else {

  }
#line 532
  return (0);
}
}
#line 534 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_i_lock_of_inode  =    1;
#line 537 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
  {
#line 540
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_i_lock_of_inode == 1);
#line 542
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 1);
#line 544
  ldv_spin_i_lock_of_inode = 2;
  }
#line 545
  return;
}
}
#line 548 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
  {
#line 551
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_i_lock_of_inode == 2);
#line 553
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 2);
#line 555
  ldv_spin_i_lock_of_inode = 1;
  }
#line 556
  return;
}
}
#line 559 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 564
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_i_lock_of_inode == 1);
#line 566
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 1);
#line 569
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 572
  if (is_spin_held_by_another_thread != 0) {
#line 574
    return (0);
  } else {
#line 578
    ldv_spin_i_lock_of_inode = 2;
#line 580
    return (1);
  }
}
}
#line 585 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
  {
#line 588
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_i_lock_of_inode == 1);
#line 590
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 1);
  }
#line 591
  return;
}
}
#line 594 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 599
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 602
  if (ldv_spin_i_lock_of_inode == 1 && is_spin_held_by_another_thread == 0) {
#line 604
    return (0);
  } else {
#line 608
    return (1);
  }
}
}
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;

  {
  {
#line 616
  tmp = ldv_spin_is_locked_i_lock_of_inode();
  }
#line 616
  return (tmp == 0);
}
}
#line 620 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 625
  is_spin_contended = ldv_undef_int();
  }
#line 628
  if (is_spin_contended != 0) {
#line 630
    return (0);
  } else {
#line 634
    return (1);
  }
}
}
#line 639 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 644
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_i_lock_of_inode == 1);
#line 646
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 1);
#line 649
  atomic_value_after_dec = ldv_undef_int();
  }
#line 652
  if (atomic_value_after_dec == 0) {
#line 654
    ldv_spin_i_lock_of_inode = 2;
#line 656
    return (1);
  } else {

  }
#line 660
  return (0);
}
}
#line 662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_idr_lock_of_tipc_server  =    1;
#line 665 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_idr_lock_of_tipc_server(void) 
{ 


  {
  {
#line 668
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_idr_lock_of_tipc_server == 1);
#line 670
  __VERIFIER_assume(ldv_spin_idr_lock_of_tipc_server == 1);
#line 672
  ldv_spin_idr_lock_of_tipc_server = 2;
  }
#line 673
  return;
}
}
#line 676 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_idr_lock_of_tipc_server(void) 
{ 


  {
  {
#line 679
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_idr_lock_of_tipc_server == 2);
#line 681
  __VERIFIER_assume(ldv_spin_idr_lock_of_tipc_server == 2);
#line 683
  ldv_spin_idr_lock_of_tipc_server = 1;
  }
#line 684
  return;
}
}
#line 687 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_idr_lock_of_tipc_server(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 692
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_idr_lock_of_tipc_server == 1);
#line 694
  __VERIFIER_assume(ldv_spin_idr_lock_of_tipc_server == 1);
#line 697
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 700
  if (is_spin_held_by_another_thread != 0) {
#line 702
    return (0);
  } else {
#line 706
    ldv_spin_idr_lock_of_tipc_server = 2;
#line 708
    return (1);
  }
}
}
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_idr_lock_of_tipc_server(void) 
{ 


  {
  {
#line 716
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_idr_lock_of_tipc_server == 1);
#line 718
  __VERIFIER_assume(ldv_spin_idr_lock_of_tipc_server == 1);
  }
#line 719
  return;
}
}
#line 722 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_idr_lock_of_tipc_server(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 727
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 730
  if (ldv_spin_idr_lock_of_tipc_server == 1 && is_spin_held_by_another_thread == 0) {
#line 732
    return (0);
  } else {
#line 736
    return (1);
  }
}
}
#line 741 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_idr_lock_of_tipc_server(void) 
{ 
  int tmp ;

  {
  {
#line 744
  tmp = ldv_spin_is_locked_idr_lock_of_tipc_server();
  }
#line 744
  return (tmp == 0);
}
}
#line 748 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_idr_lock_of_tipc_server(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 753
  is_spin_contended = ldv_undef_int();
  }
#line 756
  if (is_spin_contended != 0) {
#line 758
    return (0);
  } else {
#line 762
    return (1);
  }
}
}
#line 767 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_idr_lock_of_tipc_server(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 772
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_idr_lock_of_tipc_server == 1);
#line 774
  __VERIFIER_assume(ldv_spin_idr_lock_of_tipc_server == 1);
#line 777
  atomic_value_after_dec = ldv_undef_int();
  }
#line 780
  if (atomic_value_after_dec == 0) {
#line 782
    ldv_spin_idr_lock_of_tipc_server = 2;
#line 784
    return (1);
  } else {

  }
#line 788
  return (0);
}
}
#line 790 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock  =    1;
#line 793 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock(void) 
{ 


  {
  {
#line 796
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock == 1);
#line 798
  __VERIFIER_assume(ldv_spin_lock == 1);
#line 800
  ldv_spin_lock = 2;
  }
#line 801
  return;
}
}
#line 804 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock(void) 
{ 


  {
  {
#line 807
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock == 2);
#line 809
  __VERIFIER_assume(ldv_spin_lock == 2);
#line 811
  ldv_spin_lock = 1;
  }
#line 812
  return;
}
}
#line 815 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 820
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock == 1);
#line 822
  __VERIFIER_assume(ldv_spin_lock == 1);
#line 825
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 828
  if (is_spin_held_by_another_thread != 0) {
#line 830
    return (0);
  } else {
#line 834
    ldv_spin_lock = 2;
#line 836
    return (1);
  }
}
}
#line 841 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock(void) 
{ 


  {
  {
#line 844
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock == 1);
#line 846
  __VERIFIER_assume(ldv_spin_lock == 1);
  }
#line 847
  return;
}
}
#line 850 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 855
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 858
  if (ldv_spin_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 860
    return (0);
  } else {
#line 864
    return (1);
  }
}
}
#line 869 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock(void) 
{ 
  int tmp ;

  {
  {
#line 872
  tmp = ldv_spin_is_locked_lock();
  }
#line 872
  return (tmp == 0);
}
}
#line 876 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 881
  is_spin_contended = ldv_undef_int();
  }
#line 884
  if (is_spin_contended != 0) {
#line 886
    return (0);
  } else {
#line 890
    return (1);
  }
}
}
#line 895 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 900
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock == 1);
#line 902
  __VERIFIER_assume(ldv_spin_lock == 1);
#line 905
  atomic_value_after_dec = ldv_undef_int();
  }
#line 908
  if (atomic_value_after_dec == 0) {
#line 910
    ldv_spin_lock = 2;
#line 912
    return (1);
  } else {

  }
#line 916
  return (0);
}
}
#line 918 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  =    1;
#line 921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 924
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 926
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 928
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
  }
#line 929
  return;
}
}
#line 932 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 935
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_NOT_ARG_SIGN == 2);
#line 937
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 2);
#line 939
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
  }
#line 940
  return;
}
}
#line 943 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 948
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 950
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 953
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 956
  if (is_spin_held_by_another_thread != 0) {
#line 958
    return (0);
  } else {
#line 962
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 964
    return (1);
  }
}
}
#line 969 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 972
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 974
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
  }
#line 975
  return;
}
}
#line 978 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 983
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 986
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && is_spin_held_by_another_thread == 0) {
#line 988
    return (0);
  } else {
#line 992
    return (1);
  }
}
}
#line 997 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 1000
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
  }
#line 1000
  return (tmp == 0);
}
}
#line 1004 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1009
  is_spin_contended = ldv_undef_int();
  }
#line 1012
  if (is_spin_contended != 0) {
#line 1014
    return (0);
  } else {
#line 1018
    return (1);
  }
}
}
#line 1023 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1028
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 1030
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 1033
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1036
  if (atomic_value_after_dec == 0) {
#line 1038
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 1040
    return (1);
  } else {

  }
#line 1044
  return (0);
}
}
#line 1046 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_name_seq  =    1;
#line 1049 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_name_seq(void) 
{ 


  {
  {
#line 1052
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_name_seq == 1);
#line 1054
  __VERIFIER_assume(ldv_spin_lock_of_name_seq == 1);
#line 1056
  ldv_spin_lock_of_name_seq = 2;
  }
#line 1057
  return;
}
}
#line 1060 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_name_seq(void) 
{ 


  {
  {
#line 1063
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_name_seq == 2);
#line 1065
  __VERIFIER_assume(ldv_spin_lock_of_name_seq == 2);
#line 1067
  ldv_spin_lock_of_name_seq = 1;
  }
#line 1068
  return;
}
}
#line 1071 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_name_seq(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1076
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_name_seq == 1);
#line 1078
  __VERIFIER_assume(ldv_spin_lock_of_name_seq == 1);
#line 1081
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1084
  if (is_spin_held_by_another_thread != 0) {
#line 1086
    return (0);
  } else {
#line 1090
    ldv_spin_lock_of_name_seq = 2;
#line 1092
    return (1);
  }
}
}
#line 1097 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_name_seq(void) 
{ 


  {
  {
#line 1100
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_name_seq == 1);
#line 1102
  __VERIFIER_assume(ldv_spin_lock_of_name_seq == 1);
  }
#line 1103
  return;
}
}
#line 1106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_name_seq(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1111
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1114
  if (ldv_spin_lock_of_name_seq == 1 && is_spin_held_by_another_thread == 0) {
#line 1116
    return (0);
  } else {
#line 1120
    return (1);
  }
}
}
#line 1125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_name_seq(void) 
{ 
  int tmp ;

  {
  {
#line 1128
  tmp = ldv_spin_is_locked_lock_of_name_seq();
  }
#line 1128
  return (tmp == 0);
}
}
#line 1132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_name_seq(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1137
  is_spin_contended = ldv_undef_int();
  }
#line 1140
  if (is_spin_contended != 0) {
#line 1142
    return (0);
  } else {
#line 1146
    return (1);
  }
}
}
#line 1151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_name_seq(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1156
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_name_seq == 1);
#line 1158
  __VERIFIER_assume(ldv_spin_lock_of_name_seq == 1);
#line 1161
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1164
  if (atomic_value_after_dec == 0) {
#line 1166
    ldv_spin_lock_of_name_seq = 2;
#line 1168
    return (1);
  } else {

  }
#line 1172
  return (0);
}
}
#line 1174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_reference  =    1;
#line 1177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_reference(void) 
{ 


  {
  {
#line 1180
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_reference == 1);
#line 1182
  __VERIFIER_assume(ldv_spin_lock_of_reference == 1);
#line 1184
  ldv_spin_lock_of_reference = 2;
  }
#line 1185
  return;
}
}
#line 1188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_reference(void) 
{ 


  {
  {
#line 1191
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_reference == 2);
#line 1193
  __VERIFIER_assume(ldv_spin_lock_of_reference == 2);
#line 1195
  ldv_spin_lock_of_reference = 1;
  }
#line 1196
  return;
}
}
#line 1199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_reference(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1204
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_reference == 1);
#line 1206
  __VERIFIER_assume(ldv_spin_lock_of_reference == 1);
#line 1209
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1212
  if (is_spin_held_by_another_thread != 0) {
#line 1214
    return (0);
  } else {
#line 1218
    ldv_spin_lock_of_reference = 2;
#line 1220
    return (1);
  }
}
}
#line 1225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_reference(void) 
{ 


  {
  {
#line 1228
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_reference == 1);
#line 1230
  __VERIFIER_assume(ldv_spin_lock_of_reference == 1);
  }
#line 1231
  return;
}
}
#line 1234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_reference(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1239
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1242
  if (ldv_spin_lock_of_reference == 1 && is_spin_held_by_another_thread == 0) {
#line 1244
    return (0);
  } else {
#line 1248
    return (1);
  }
}
}
#line 1253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_reference(void) 
{ 
  int tmp ;

  {
  {
#line 1256
  tmp = ldv_spin_is_locked_lock_of_reference();
  }
#line 1256
  return (tmp == 0);
}
}
#line 1260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_reference(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1265
  is_spin_contended = ldv_undef_int();
  }
#line 1268
  if (is_spin_contended != 0) {
#line 1270
    return (0);
  } else {
#line 1274
    return (1);
  }
}
}
#line 1279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_reference(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1284
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_reference == 1);
#line 1286
  __VERIFIER_assume(ldv_spin_lock_of_reference == 1);
#line 1289
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1292
  if (atomic_value_after_dec == 0) {
#line 1294
    ldv_spin_lock_of_reference = 2;
#line 1296
    return (1);
  } else {

  }
#line 1300
  return (0);
}
}
#line 1302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_res_counter  =    1;
#line 1305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_res_counter(void) 
{ 


  {
  {
#line 1308
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_res_counter == 1);
#line 1310
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 1);
#line 1312
  ldv_spin_lock_of_res_counter = 2;
  }
#line 1313
  return;
}
}
#line 1316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_res_counter(void) 
{ 


  {
  {
#line 1319
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_res_counter == 2);
#line 1321
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 2);
#line 1323
  ldv_spin_lock_of_res_counter = 1;
  }
#line 1324
  return;
}
}
#line 1327 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_res_counter(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1332
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_res_counter == 1);
#line 1334
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 1);
#line 1337
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1340
  if (is_spin_held_by_another_thread != 0) {
#line 1342
    return (0);
  } else {
#line 1346
    ldv_spin_lock_of_res_counter = 2;
#line 1348
    return (1);
  }
}
}
#line 1353 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_res_counter(void) 
{ 


  {
  {
#line 1356
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_res_counter == 1);
#line 1358
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 1);
  }
#line 1359
  return;
}
}
#line 1362 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_res_counter(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1367
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1370
  if (ldv_spin_lock_of_res_counter == 1 && is_spin_held_by_another_thread == 0) {
#line 1372
    return (0);
  } else {
#line 1376
    return (1);
  }
}
}
#line 1381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_res_counter(void) 
{ 
  int tmp ;

  {
  {
#line 1384
  tmp = ldv_spin_is_locked_lock_of_res_counter();
  }
#line 1384
  return (tmp == 0);
}
}
#line 1388 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_res_counter(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1393
  is_spin_contended = ldv_undef_int();
  }
#line 1396
  if (is_spin_contended != 0) {
#line 1398
    return (0);
  } else {
#line 1402
    return (1);
  }
}
}
#line 1407 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_res_counter(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1412
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_res_counter == 1);
#line 1414
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 1);
#line 1417
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1420
  if (atomic_value_after_dec == 0) {
#line 1422
    ldv_spin_lock_of_res_counter = 2;
#line 1424
    return (1);
  } else {

  }
#line 1428
  return (0);
}
}
#line 1430 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_tipc_bearer  =    1;
#line 1433 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_tipc_bearer(void) 
{ 


  {
  {
#line 1436
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_tipc_bearer == 1);
#line 1438
  __VERIFIER_assume(ldv_spin_lock_of_tipc_bearer == 1);
#line 1440
  ldv_spin_lock_of_tipc_bearer = 2;
  }
#line 1441
  return;
}
}
#line 1444 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_tipc_bearer(void) 
{ 


  {
  {
#line 1447
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_tipc_bearer == 2);
#line 1449
  __VERIFIER_assume(ldv_spin_lock_of_tipc_bearer == 2);
#line 1451
  ldv_spin_lock_of_tipc_bearer = 1;
  }
#line 1452
  return;
}
}
#line 1455 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_tipc_bearer(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1460
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_bearer == 1);
#line 1462
  __VERIFIER_assume(ldv_spin_lock_of_tipc_bearer == 1);
#line 1465
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1468
  if (is_spin_held_by_another_thread != 0) {
#line 1470
    return (0);
  } else {
#line 1474
    ldv_spin_lock_of_tipc_bearer = 2;
#line 1476
    return (1);
  }
}
}
#line 1481 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_tipc_bearer(void) 
{ 


  {
  {
#line 1484
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_bearer == 1);
#line 1486
  __VERIFIER_assume(ldv_spin_lock_of_tipc_bearer == 1);
  }
#line 1487
  return;
}
}
#line 1490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_tipc_bearer(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1495
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1498
  if (ldv_spin_lock_of_tipc_bearer == 1 && is_spin_held_by_another_thread == 0) {
#line 1500
    return (0);
  } else {
#line 1504
    return (1);
  }
}
}
#line 1509 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_tipc_bearer(void) 
{ 
  int tmp ;

  {
  {
#line 1512
  tmp = ldv_spin_is_locked_lock_of_tipc_bearer();
  }
#line 1512
  return (tmp == 0);
}
}
#line 1516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_tipc_bearer(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1521
  is_spin_contended = ldv_undef_int();
  }
#line 1524
  if (is_spin_contended != 0) {
#line 1526
    return (0);
  } else {
#line 1530
    return (1);
  }
}
}
#line 1535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_tipc_bearer(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1540
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_bearer == 1);
#line 1542
  __VERIFIER_assume(ldv_spin_lock_of_tipc_bearer == 1);
#line 1545
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1548
  if (atomic_value_after_dec == 0) {
#line 1550
    ldv_spin_lock_of_tipc_bearer = 2;
#line 1552
    return (1);
  } else {

  }
#line 1556
  return (0);
}
}
#line 1558 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_tipc_node  =    1;
#line 1561 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_tipc_node(void) 
{ 


  {
  {
#line 1564
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_tipc_node == 1);
#line 1566
  __VERIFIER_assume(ldv_spin_lock_of_tipc_node == 1);
#line 1568
  ldv_spin_lock_of_tipc_node = 2;
  }
#line 1569
  return;
}
}
#line 1572 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_tipc_node(void) 
{ 


  {
  {
#line 1575
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_tipc_node == 2);
#line 1577
  __VERIFIER_assume(ldv_spin_lock_of_tipc_node == 2);
#line 1579
  ldv_spin_lock_of_tipc_node = 1;
  }
#line 1580
  return;
}
}
#line 1583 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_tipc_node(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1588
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_node == 1);
#line 1590
  __VERIFIER_assume(ldv_spin_lock_of_tipc_node == 1);
#line 1593
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1596
  if (is_spin_held_by_another_thread != 0) {
#line 1598
    return (0);
  } else {
#line 1602
    ldv_spin_lock_of_tipc_node = 2;
#line 1604
    return (1);
  }
}
}
#line 1609 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_tipc_node(void) 
{ 


  {
  {
#line 1612
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_node == 1);
#line 1614
  __VERIFIER_assume(ldv_spin_lock_of_tipc_node == 1);
  }
#line 1615
  return;
}
}
#line 1618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_tipc_node(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1623
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1626
  if (ldv_spin_lock_of_tipc_node == 1 && is_spin_held_by_another_thread == 0) {
#line 1628
    return (0);
  } else {
#line 1632
    return (1);
  }
}
}
#line 1637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_tipc_node(void) 
{ 
  int tmp ;

  {
  {
#line 1640
  tmp = ldv_spin_is_locked_lock_of_tipc_node();
  }
#line 1640
  return (tmp == 0);
}
}
#line 1644 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_tipc_node(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1649
  is_spin_contended = ldv_undef_int();
  }
#line 1652
  if (is_spin_contended != 0) {
#line 1654
    return (0);
  } else {
#line 1658
    return (1);
  }
}
}
#line 1663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_tipc_node(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1668
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_node == 1);
#line 1670
  __VERIFIER_assume(ldv_spin_lock_of_tipc_node == 1);
#line 1673
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1676
  if (atomic_value_after_dec == 0) {
#line 1678
    ldv_spin_lock_of_tipc_node = 2;
#line 1680
    return (1);
  } else {

  }
#line 1684
  return (0);
}
}
#line 1686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_tipc_port  =    1;
#line 1689 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_tipc_port(void) 
{ 


  {
  {
#line 1692
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_tipc_port == 1);
#line 1694
  __VERIFIER_assume(ldv_spin_lock_of_tipc_port == 1);
#line 1696
  ldv_spin_lock_of_tipc_port = 2;
  }
#line 1697
  return;
}
}
#line 1700 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_tipc_port(void) 
{ 


  {
  {
#line 1703
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_tipc_port == 2);
#line 1705
  __VERIFIER_assume(ldv_spin_lock_of_tipc_port == 2);
#line 1707
  ldv_spin_lock_of_tipc_port = 1;
  }
#line 1708
  return;
}
}
#line 1711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_tipc_port(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1716
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_port == 1);
#line 1718
  __VERIFIER_assume(ldv_spin_lock_of_tipc_port == 1);
#line 1721
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1724
  if (is_spin_held_by_another_thread != 0) {
#line 1726
    return (0);
  } else {
#line 1730
    ldv_spin_lock_of_tipc_port = 2;
#line 1732
    return (1);
  }
}
}
#line 1737 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_tipc_port(void) 
{ 


  {
  {
#line 1740
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_port == 1);
#line 1742
  __VERIFIER_assume(ldv_spin_lock_of_tipc_port == 1);
  }
#line 1743
  return;
}
}
#line 1746 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_tipc_port(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1751
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1754
  if (ldv_spin_lock_of_tipc_port == 1 && is_spin_held_by_another_thread == 0) {
#line 1756
    return (0);
  } else {
#line 1760
    return (1);
  }
}
}
#line 1765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_tipc_port(void) 
{ 
  int tmp ;

  {
  {
#line 1768
  tmp = ldv_spin_is_locked_lock_of_tipc_port();
  }
#line 1768
  return (tmp == 0);
}
}
#line 1772 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_tipc_port(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1777
  is_spin_contended = ldv_undef_int();
  }
#line 1780
  if (is_spin_contended != 0) {
#line 1782
    return (0);
  } else {
#line 1786
    return (1);
  }
}
}
#line 1791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_tipc_port(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1796
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_port == 1);
#line 1798
  __VERIFIER_assume(ldv_spin_lock_of_tipc_port == 1);
#line 1801
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1804
  if (atomic_value_after_dec == 0) {
#line 1806
    ldv_spin_lock_of_tipc_port = 2;
#line 1808
    return (1);
  } else {

  }
#line 1812
  return (0);
}
}
#line 1814 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_tipc_subscriber  =    1;
#line 1817 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_tipc_subscriber(void) 
{ 


  {
  {
#line 1820
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_tipc_subscriber == 1);
#line 1822
  __VERIFIER_assume(ldv_spin_lock_of_tipc_subscriber == 1);
#line 1824
  ldv_spin_lock_of_tipc_subscriber = 2;
  }
#line 1825
  return;
}
}
#line 1828 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_tipc_subscriber(void) 
{ 


  {
  {
#line 1831
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_tipc_subscriber == 2);
#line 1833
  __VERIFIER_assume(ldv_spin_lock_of_tipc_subscriber == 2);
#line 1835
  ldv_spin_lock_of_tipc_subscriber = 1;
  }
#line 1836
  return;
}
}
#line 1839 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_tipc_subscriber(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1844
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_subscriber == 1);
#line 1846
  __VERIFIER_assume(ldv_spin_lock_of_tipc_subscriber == 1);
#line 1849
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1852
  if (is_spin_held_by_another_thread != 0) {
#line 1854
    return (0);
  } else {
#line 1858
    ldv_spin_lock_of_tipc_subscriber = 2;
#line 1860
    return (1);
  }
}
}
#line 1865 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_tipc_subscriber(void) 
{ 


  {
  {
#line 1868
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_subscriber == 1);
#line 1870
  __VERIFIER_assume(ldv_spin_lock_of_tipc_subscriber == 1);
  }
#line 1871
  return;
}
}
#line 1874 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_tipc_subscriber(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1879
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1882
  if (ldv_spin_lock_of_tipc_subscriber == 1 && is_spin_held_by_another_thread == 0) {
#line 1884
    return (0);
  } else {
#line 1888
    return (1);
  }
}
}
#line 1893 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_tipc_subscriber(void) 
{ 
  int tmp ;

  {
  {
#line 1896
  tmp = ldv_spin_is_locked_lock_of_tipc_subscriber();
  }
#line 1896
  return (tmp == 0);
}
}
#line 1900 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_tipc_subscriber(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1905
  is_spin_contended = ldv_undef_int();
  }
#line 1908
  if (is_spin_contended != 0) {
#line 1910
    return (0);
  } else {
#line 1914
    return (1);
  }
}
}
#line 1919 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_tipc_subscriber(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1924
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_tipc_subscriber == 1);
#line 1926
  __VERIFIER_assume(ldv_spin_lock_of_tipc_subscriber == 1);
#line 1929
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1932
  if (atomic_value_after_dec == 0) {
#line 1934
    ldv_spin_lock_of_tipc_subscriber = 2;
#line 1936
    return (1);
  } else {

  }
#line 1940
  return (0);
}
}
#line 1942 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lru_lock_of_netns_frags  =    1;
#line 1945 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 1948
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1950
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1952
  ldv_spin_lru_lock_of_netns_frags = 2;
  }
#line 1953
  return;
}
}
#line 1956 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 1959
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lru_lock_of_netns_frags == 2);
#line 1961
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 2);
#line 1963
  ldv_spin_lru_lock_of_netns_frags = 1;
  }
#line 1964
  return;
}
}
#line 1967 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lru_lock_of_netns_frags(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1972
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1974
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1977
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1980
  if (is_spin_held_by_another_thread != 0) {
#line 1982
    return (0);
  } else {
#line 1986
    ldv_spin_lru_lock_of_netns_frags = 2;
#line 1988
    return (1);
  }
}
}
#line 1993 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 1996
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1998
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 1);
  }
#line 1999
  return;
}
}
#line 2002 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lru_lock_of_netns_frags(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2007
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2010
  if (ldv_spin_lru_lock_of_netns_frags == 1 && is_spin_held_by_another_thread == 0) {
#line 2012
    return (0);
  } else {
#line 2016
    return (1);
  }
}
}
#line 2021 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lru_lock_of_netns_frags(void) 
{ 
  int tmp ;

  {
  {
#line 2024
  tmp = ldv_spin_is_locked_lru_lock_of_netns_frags();
  }
#line 2024
  return (tmp == 0);
}
}
#line 2028 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lru_lock_of_netns_frags(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2033
  is_spin_contended = ldv_undef_int();
  }
#line 2036
  if (is_spin_contended != 0) {
#line 2038
    return (0);
  } else {
#line 2042
    return (1);
  }
}
}
#line 2047 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lru_lock_of_netns_frags(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2052
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lru_lock_of_netns_frags == 1);
#line 2054
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 1);
#line 2057
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2060
  if (atomic_value_after_dec == 0) {
#line 2062
    ldv_spin_lru_lock_of_netns_frags = 2;
#line 2064
    return (1);
  } else {

  }
#line 2068
  return (0);
}
}
#line 2070 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_node_create_lock  =    1;
#line 2073 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_node_create_lock(void) 
{ 


  {
  {
#line 2076
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_node_create_lock == 1);
#line 2078
  __VERIFIER_assume(ldv_spin_node_create_lock == 1);
#line 2080
  ldv_spin_node_create_lock = 2;
  }
#line 2081
  return;
}
}
#line 2084 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_node_create_lock(void) 
{ 


  {
  {
#line 2087
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_node_create_lock == 2);
#line 2089
  __VERIFIER_assume(ldv_spin_node_create_lock == 2);
#line 2091
  ldv_spin_node_create_lock = 1;
  }
#line 2092
  return;
}
}
#line 2095 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_node_create_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2100
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_create_lock == 1);
#line 2102
  __VERIFIER_assume(ldv_spin_node_create_lock == 1);
#line 2105
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2108
  if (is_spin_held_by_another_thread != 0) {
#line 2110
    return (0);
  } else {
#line 2114
    ldv_spin_node_create_lock = 2;
#line 2116
    return (1);
  }
}
}
#line 2121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_node_create_lock(void) 
{ 


  {
  {
#line 2124
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_create_lock == 1);
#line 2126
  __VERIFIER_assume(ldv_spin_node_create_lock == 1);
  }
#line 2127
  return;
}
}
#line 2130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_node_create_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2135
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2138
  if (ldv_spin_node_create_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 2140
    return (0);
  } else {
#line 2144
    return (1);
  }
}
}
#line 2149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_node_create_lock(void) 
{ 
  int tmp ;

  {
  {
#line 2152
  tmp = ldv_spin_is_locked_node_create_lock();
  }
#line 2152
  return (tmp == 0);
}
}
#line 2156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_node_create_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2161
  is_spin_contended = ldv_undef_int();
  }
#line 2164
  if (is_spin_contended != 0) {
#line 2166
    return (0);
  } else {
#line 2170
    return (1);
  }
}
}
#line 2175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_node_create_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2180
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_create_lock == 1);
#line 2182
  __VERIFIER_assume(ldv_spin_node_create_lock == 1);
#line 2185
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2188
  if (atomic_value_after_dec == 0) {
#line 2190
    ldv_spin_node_create_lock = 2;
#line 2192
    return (1);
  } else {

  }
#line 2196
  return (0);
}
}
#line 2198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_node_size_lock_of_pglist_data  =    1;
#line 2201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 2204
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2206
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2208
  ldv_spin_node_size_lock_of_pglist_data = 2;
  }
#line 2209
  return;
}
}
#line 2212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 2215
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_node_size_lock_of_pglist_data == 2);
#line 2217
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 2);
#line 2219
  ldv_spin_node_size_lock_of_pglist_data = 1;
  }
#line 2220
  return;
}
}
#line 2223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2228
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2230
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2233
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2236
  if (is_spin_held_by_another_thread != 0) {
#line 2238
    return (0);
  } else {
#line 2242
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 2244
    return (1);
  }
}
}
#line 2249 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 2252
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2254
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 1);
  }
#line 2255
  return;
}
}
#line 2258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2263
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2266
  if (ldv_spin_node_size_lock_of_pglist_data == 1 && is_spin_held_by_another_thread == 0) {
#line 2268
    return (0);
  } else {
#line 2272
    return (1);
  }
}
}
#line 2277 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 2280
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
  }
#line 2280
  return (tmp == 0);
}
}
#line 2284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2289
  is_spin_contended = ldv_undef_int();
  }
#line 2292
  if (is_spin_contended != 0) {
#line 2294
    return (0);
  } else {
#line 2298
    return (1);
  }
}
}
#line 2303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2308
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2310
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2313
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2316
  if (atomic_value_after_dec == 0) {
#line 2318
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 2320
    return (1);
  } else {

  }
#line 2324
  return (0);
}
}
#line 2326 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_outqueue_lock_of_tipc_conn  =    1;
#line 2329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_outqueue_lock_of_tipc_conn(void) 
{ 


  {
  {
#line 2332
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_outqueue_lock_of_tipc_conn == 1);
#line 2334
  __VERIFIER_assume(ldv_spin_outqueue_lock_of_tipc_conn == 1);
#line 2336
  ldv_spin_outqueue_lock_of_tipc_conn = 2;
  }
#line 2337
  return;
}
}
#line 2340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_outqueue_lock_of_tipc_conn(void) 
{ 


  {
  {
#line 2343
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_outqueue_lock_of_tipc_conn == 2);
#line 2345
  __VERIFIER_assume(ldv_spin_outqueue_lock_of_tipc_conn == 2);
#line 2347
  ldv_spin_outqueue_lock_of_tipc_conn = 1;
  }
#line 2348
  return;
}
}
#line 2351 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_outqueue_lock_of_tipc_conn(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2356
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_outqueue_lock_of_tipc_conn == 1);
#line 2358
  __VERIFIER_assume(ldv_spin_outqueue_lock_of_tipc_conn == 1);
#line 2361
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2364
  if (is_spin_held_by_another_thread != 0) {
#line 2366
    return (0);
  } else {
#line 2370
    ldv_spin_outqueue_lock_of_tipc_conn = 2;
#line 2372
    return (1);
  }
}
}
#line 2377 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_outqueue_lock_of_tipc_conn(void) 
{ 


  {
  {
#line 2380
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_outqueue_lock_of_tipc_conn == 1);
#line 2382
  __VERIFIER_assume(ldv_spin_outqueue_lock_of_tipc_conn == 1);
  }
#line 2383
  return;
}
}
#line 2386 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_outqueue_lock_of_tipc_conn(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2391
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2394
  if (ldv_spin_outqueue_lock_of_tipc_conn == 1 && is_spin_held_by_another_thread == 0) {
#line 2396
    return (0);
  } else {
#line 2400
    return (1);
  }
}
}
#line 2405 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_outqueue_lock_of_tipc_conn(void) 
{ 
  int tmp ;

  {
  {
#line 2408
  tmp = ldv_spin_is_locked_outqueue_lock_of_tipc_conn();
  }
#line 2408
  return (tmp == 0);
}
}
#line 2412 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_outqueue_lock_of_tipc_conn(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2417
  is_spin_contended = ldv_undef_int();
  }
#line 2420
  if (is_spin_contended != 0) {
#line 2422
    return (0);
  } else {
#line 2426
    return (1);
  }
}
}
#line 2431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_outqueue_lock_of_tipc_conn(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2436
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_outqueue_lock_of_tipc_conn == 1);
#line 2438
  __VERIFIER_assume(ldv_spin_outqueue_lock_of_tipc_conn == 1);
#line 2441
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2444
  if (atomic_value_after_dec == 0) {
#line 2446
    ldv_spin_outqueue_lock_of_tipc_conn = 2;
#line 2448
    return (1);
  } else {

  }
#line 2452
  return (0);
}
}
#line 2454 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_qitem_lock  =    1;
#line 2457 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_qitem_lock(void) 
{ 


  {
  {
#line 2460
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_qitem_lock == 1);
#line 2462
  __VERIFIER_assume(ldv_spin_qitem_lock == 1);
#line 2464
  ldv_spin_qitem_lock = 2;
  }
#line 2465
  return;
}
}
#line 2468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_qitem_lock(void) 
{ 


  {
  {
#line 2471
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_qitem_lock == 2);
#line 2473
  __VERIFIER_assume(ldv_spin_qitem_lock == 2);
#line 2475
  ldv_spin_qitem_lock = 1;
  }
#line 2476
  return;
}
}
#line 2479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_qitem_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2484
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_qitem_lock == 1);
#line 2486
  __VERIFIER_assume(ldv_spin_qitem_lock == 1);
#line 2489
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2492
  if (is_spin_held_by_another_thread != 0) {
#line 2494
    return (0);
  } else {
#line 2498
    ldv_spin_qitem_lock = 2;
#line 2500
    return (1);
  }
}
}
#line 2505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_qitem_lock(void) 
{ 


  {
  {
#line 2508
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_qitem_lock == 1);
#line 2510
  __VERIFIER_assume(ldv_spin_qitem_lock == 1);
  }
#line 2511
  return;
}
}
#line 2514 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_qitem_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2519
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2522
  if (ldv_spin_qitem_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 2524
    return (0);
  } else {
#line 2528
    return (1);
  }
}
}
#line 2533 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_qitem_lock(void) 
{ 
  int tmp ;

  {
  {
#line 2536
  tmp = ldv_spin_is_locked_qitem_lock();
  }
#line 2536
  return (tmp == 0);
}
}
#line 2540 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_qitem_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2545
  is_spin_contended = ldv_undef_int();
  }
#line 2548
  if (is_spin_contended != 0) {
#line 2550
    return (0);
  } else {
#line 2554
    return (1);
  }
}
}
#line 2559 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_qitem_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2564
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_qitem_lock == 1);
#line 2566
  __VERIFIER_assume(ldv_spin_qitem_lock == 1);
#line 2569
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2572
  if (atomic_value_after_dec == 0) {
#line 2574
    ldv_spin_qitem_lock = 2;
#line 2576
    return (1);
  } else {

  }
#line 2580
  return (0);
}
}
#line 2582 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_siglock_of_sighand_struct  =    1;
#line 2585 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 2588
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_siglock_of_sighand_struct == 1);
#line 2590
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 1);
#line 2592
  ldv_spin_siglock_of_sighand_struct = 2;
  }
#line 2593
  return;
}
}
#line 2596 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 2599
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_siglock_of_sighand_struct == 2);
#line 2601
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 2);
#line 2603
  ldv_spin_siglock_of_sighand_struct = 1;
  }
#line 2604
  return;
}
}
#line 2607 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2612
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_siglock_of_sighand_struct == 1);
#line 2614
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 1);
#line 2617
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2620
  if (is_spin_held_by_another_thread != 0) {
#line 2622
    return (0);
  } else {
#line 2626
    ldv_spin_siglock_of_sighand_struct = 2;
#line 2628
    return (1);
  }
}
}
#line 2633 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 2636
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_siglock_of_sighand_struct == 1);
#line 2638
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 1);
  }
#line 2639
  return;
}
}
#line 2642 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2647
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2650
  if (ldv_spin_siglock_of_sighand_struct == 1 && is_spin_held_by_another_thread == 0) {
#line 2652
    return (0);
  } else {
#line 2656
    return (1);
  }
}
}
#line 2661 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 2664
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
  }
#line 2664
  return (tmp == 0);
}
}
#line 2668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2673
  is_spin_contended = ldv_undef_int();
  }
#line 2676
  if (is_spin_contended != 0) {
#line 2678
    return (0);
  } else {
#line 2682
    return (1);
  }
}
}
#line 2687 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2692
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_siglock_of_sighand_struct == 1);
#line 2694
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 1);
#line 2697
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2700
  if (atomic_value_after_dec == 0) {
#line 2702
    ldv_spin_siglock_of_sighand_struct = 2;
#line 2704
    return (1);
  } else {

  }
#line 2708
  return (0);
}
}
#line 2710 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_sk_dst_lock_of_sock  =    1;
#line 2713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_sk_dst_lock_of_sock(void) 
{ 


  {
  {
#line 2716
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_sk_dst_lock_of_sock == 1);
#line 2718
  __VERIFIER_assume(ldv_spin_sk_dst_lock_of_sock == 1);
#line 2720
  ldv_spin_sk_dst_lock_of_sock = 2;
  }
#line 2721
  return;
}
}
#line 2724 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_sk_dst_lock_of_sock(void) 
{ 


  {
  {
#line 2727
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_sk_dst_lock_of_sock == 2);
#line 2729
  __VERIFIER_assume(ldv_spin_sk_dst_lock_of_sock == 2);
#line 2731
  ldv_spin_sk_dst_lock_of_sock = 1;
  }
#line 2732
  return;
}
}
#line 2735 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_sk_dst_lock_of_sock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2740
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_sk_dst_lock_of_sock == 1);
#line 2742
  __VERIFIER_assume(ldv_spin_sk_dst_lock_of_sock == 1);
#line 2745
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2748
  if (is_spin_held_by_another_thread != 0) {
#line 2750
    return (0);
  } else {
#line 2754
    ldv_spin_sk_dst_lock_of_sock = 2;
#line 2756
    return (1);
  }
}
}
#line 2761 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_sk_dst_lock_of_sock(void) 
{ 


  {
  {
#line 2764
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_sk_dst_lock_of_sock == 1);
#line 2766
  __VERIFIER_assume(ldv_spin_sk_dst_lock_of_sock == 1);
  }
#line 2767
  return;
}
}
#line 2770 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_sk_dst_lock_of_sock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2775
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2778
  if (ldv_spin_sk_dst_lock_of_sock == 1 && is_spin_held_by_another_thread == 0) {
#line 2780
    return (0);
  } else {
#line 2784
    return (1);
  }
}
}
#line 2789 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_sk_dst_lock_of_sock(void) 
{ 
  int tmp ;

  {
  {
#line 2792
  tmp = ldv_spin_is_locked_sk_dst_lock_of_sock();
  }
#line 2792
  return (tmp == 0);
}
}
#line 2796 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_sk_dst_lock_of_sock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2801
  is_spin_contended = ldv_undef_int();
  }
#line 2804
  if (is_spin_contended != 0) {
#line 2806
    return (0);
  } else {
#line 2810
    return (1);
  }
}
}
#line 2815 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_sk_dst_lock_of_sock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2820
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_sk_dst_lock_of_sock == 1);
#line 2822
  __VERIFIER_assume(ldv_spin_sk_dst_lock_of_sock == 1);
#line 2825
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2828
  if (atomic_value_after_dec == 0) {
#line 2830
    ldv_spin_sk_dst_lock_of_sock = 2;
#line 2832
    return (1);
  } else {

  }
#line 2836
  return (0);
}
}
#line 2838 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_slock_of_NOT_ARG_SIGN  =    1;
#line 2841 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_slock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 2844
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2846
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2848
  ldv_spin_slock_of_NOT_ARG_SIGN = 2;
  }
#line 2849
  return;
}
}
#line 2852 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_slock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 2855
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_slock_of_NOT_ARG_SIGN == 2);
#line 2857
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 2);
#line 2859
  ldv_spin_slock_of_NOT_ARG_SIGN = 1;
  }
#line 2860
  return;
}
}
#line 2863 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_slock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2868
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2870
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2873
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2876
  if (is_spin_held_by_another_thread != 0) {
#line 2878
    return (0);
  } else {
#line 2882
    ldv_spin_slock_of_NOT_ARG_SIGN = 2;
#line 2884
    return (1);
  }
}
}
#line 2889 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_slock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 2892
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2894
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
  }
#line 2895
  return;
}
}
#line 2898 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_slock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2903
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2906
  if (ldv_spin_slock_of_NOT_ARG_SIGN == 1 && is_spin_held_by_another_thread == 0) {
#line 2908
    return (0);
  } else {
#line 2912
    return (1);
  }
}
}
#line 2917 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_slock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 2920
  tmp = ldv_spin_is_locked_slock_of_NOT_ARG_SIGN();
  }
#line 2920
  return (tmp == 0);
}
}
#line 2924 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_slock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2929
  is_spin_contended = ldv_undef_int();
  }
#line 2932
  if (is_spin_contended != 0) {
#line 2934
    return (0);
  } else {
#line 2938
    return (1);
  }
}
}
#line 2943 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_slock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2948
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2950
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2953
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2956
  if (atomic_value_after_dec == 0) {
#line 2958
    ldv_spin_slock_of_NOT_ARG_SIGN = 2;
#line 2960
    return (1);
  } else {

  }
#line 2964
  return (0);
}
}
#line 2966 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_tipc_port_list_lock  =    1;
#line 2969 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_tipc_port_list_lock(void) 
{ 


  {
  {
#line 2972
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_tipc_port_list_lock == 1);
#line 2974
  __VERIFIER_assume(ldv_spin_tipc_port_list_lock == 1);
#line 2976
  ldv_spin_tipc_port_list_lock = 2;
  }
#line 2977
  return;
}
}
#line 2980 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_tipc_port_list_lock(void) 
{ 


  {
  {
#line 2983
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_tipc_port_list_lock == 2);
#line 2985
  __VERIFIER_assume(ldv_spin_tipc_port_list_lock == 2);
#line 2987
  ldv_spin_tipc_port_list_lock = 1;
  }
#line 2988
  return;
}
}
#line 2991 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_tipc_port_list_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2996
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tipc_port_list_lock == 1);
#line 2998
  __VERIFIER_assume(ldv_spin_tipc_port_list_lock == 1);
#line 3001
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 3004
  if (is_spin_held_by_another_thread != 0) {
#line 3006
    return (0);
  } else {
#line 3010
    ldv_spin_tipc_port_list_lock = 2;
#line 3012
    return (1);
  }
}
}
#line 3017 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_tipc_port_list_lock(void) 
{ 


  {
  {
#line 3020
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tipc_port_list_lock == 1);
#line 3022
  __VERIFIER_assume(ldv_spin_tipc_port_list_lock == 1);
  }
#line 3023
  return;
}
}
#line 3026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_tipc_port_list_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 3031
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 3034
  if (ldv_spin_tipc_port_list_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 3036
    return (0);
  } else {
#line 3040
    return (1);
  }
}
}
#line 3045 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_tipc_port_list_lock(void) 
{ 
  int tmp ;

  {
  {
#line 3048
  tmp = ldv_spin_is_locked_tipc_port_list_lock();
  }
#line 3048
  return (tmp == 0);
}
}
#line 3052 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_tipc_port_list_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 3057
  is_spin_contended = ldv_undef_int();
  }
#line 3060
  if (is_spin_contended != 0) {
#line 3062
    return (0);
  } else {
#line 3066
    return (1);
  }
}
}
#line 3071 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_tipc_port_list_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 3076
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tipc_port_list_lock == 1);
#line 3078
  __VERIFIER_assume(ldv_spin_tipc_port_list_lock == 1);
#line 3081
  atomic_value_after_dec = ldv_undef_int();
  }
#line 3084
  if (atomic_value_after_dec == 0) {
#line 3086
    ldv_spin_tipc_port_list_lock = 2;
#line 3088
    return (1);
  } else {

  }
#line 3092
  return (0);
}
}
#line 3094 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_tx_global_lock_of_net_device  =    1;
#line 3097 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 3100
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_tx_global_lock_of_net_device == 1);
#line 3102
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 1);
#line 3104
  ldv_spin_tx_global_lock_of_net_device = 2;
  }
#line 3105
  return;
}
}
#line 3108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 3111
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_tx_global_lock_of_net_device == 2);
#line 3113
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 2);
#line 3115
  ldv_spin_tx_global_lock_of_net_device = 1;
  }
#line 3116
  return;
}
}
#line 3119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 3124
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tx_global_lock_of_net_device == 1);
#line 3126
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 1);
#line 3129
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 3132
  if (is_spin_held_by_another_thread != 0) {
#line 3134
    return (0);
  } else {
#line 3138
    ldv_spin_tx_global_lock_of_net_device = 2;
#line 3140
    return (1);
  }
}
}
#line 3145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 3148
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tx_global_lock_of_net_device == 1);
#line 3150
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 1);
  }
#line 3151
  return;
}
}
#line 3154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 3159
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 3162
  if (ldv_spin_tx_global_lock_of_net_device == 1 && is_spin_held_by_another_thread == 0) {
#line 3164
    return (0);
  } else {
#line 3168
    return (1);
  }
}
}
#line 3173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 3176
  tmp = ldv_spin_is_locked_tx_global_lock_of_net_device();
  }
#line 3176
  return (tmp == 0);
}
}
#line 3180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 3185
  is_spin_contended = ldv_undef_int();
  }
#line 3188
  if (is_spin_contended != 0) {
#line 3190
    return (0);
  } else {
#line 3194
    return (1);
  }
}
}
#line 3199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_tx_global_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 3204
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tx_global_lock_of_net_device == 1);
#line 3206
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 1);
#line 3209
  atomic_value_after_dec = ldv_undef_int();
  }
#line 3212
  if (atomic_value_after_dec == 0) {
#line 3214
    ldv_spin_tx_global_lock_of_net_device = 2;
#line 3216
    return (1);
  } else {

  }
#line 3220
  return (0);
}
}
#line 3223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_check_final_state(void) 
{ 


  {
  {
#line 3226
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 3228
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_addr_list_lock_of_net_device == 1);
#line 3230
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_alloc_lock_of_task_struct == 1);
#line 3232
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_bc_lock == 1);
#line 3234
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_i_lock_of_inode == 1);
#line 3236
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_idr_lock_of_tipc_server == 1);
#line 3238
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock == 1);
#line 3240
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 3242
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_name_seq == 1);
#line 3244
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_reference == 1);
#line 3246
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_res_counter == 1);
#line 3248
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_tipc_bearer == 1);
#line 3250
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_tipc_node == 1);
#line 3252
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_tipc_port == 1);
#line 3254
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_tipc_subscriber == 1);
#line 3256
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lru_lock_of_netns_frags == 1);
#line 3258
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_node_create_lock == 1);
#line 3260
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 3262
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_outqueue_lock_of_tipc_conn == 1);
#line 3264
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_qitem_lock == 1);
#line 3266
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_siglock_of_sighand_struct == 1);
#line 3268
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_sk_dst_lock_of_sock == 1);
#line 3270
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 3272
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_tipc_port_list_lock == 1);
#line 3274
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_tx_global_lock_of_net_device == 1);
  }
#line 3275
  return;
}
}
#line 3278 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_exclusive_spin_is_locked(void) 
{ 


  {
#line 3281
  if (ldv_spin__xmit_lock_of_netdev_queue == 2) {
#line 3283
    return (1);
  } else {

  }
#line 3286
  if (ldv_spin_addr_list_lock_of_net_device == 2) {
#line 3288
    return (1);
  } else {

  }
#line 3291
  if (ldv_spin_alloc_lock_of_task_struct == 2) {
#line 3293
    return (1);
  } else {

  }
#line 3296
  if (ldv_spin_bc_lock == 2) {
#line 3298
    return (1);
  } else {

  }
#line 3301
  if (ldv_spin_i_lock_of_inode == 2) {
#line 3303
    return (1);
  } else {

  }
#line 3306
  if (ldv_spin_idr_lock_of_tipc_server == 2) {
#line 3308
    return (1);
  } else {

  }
#line 3311
  if (ldv_spin_lock == 2) {
#line 3313
    return (1);
  } else {

  }
#line 3316
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {
#line 3318
    return (1);
  } else {

  }
#line 3321
  if (ldv_spin_lock_of_name_seq == 2) {
#line 3323
    return (1);
  } else {

  }
#line 3326
  if (ldv_spin_lock_of_reference == 2) {
#line 3328
    return (1);
  } else {

  }
#line 3331
  if (ldv_spin_lock_of_res_counter == 2) {
#line 3333
    return (1);
  } else {

  }
#line 3336
  if (ldv_spin_lock_of_tipc_bearer == 2) {
#line 3338
    return (1);
  } else {

  }
#line 3341
  if (ldv_spin_lock_of_tipc_node == 2) {
#line 3343
    return (1);
  } else {

  }
#line 3346
  if (ldv_spin_lock_of_tipc_port == 2) {
#line 3348
    return (1);
  } else {

  }
#line 3351
  if (ldv_spin_lock_of_tipc_subscriber == 2) {
#line 3353
    return (1);
  } else {

  }
#line 3356
  if (ldv_spin_lru_lock_of_netns_frags == 2) {
#line 3358
    return (1);
  } else {

  }
#line 3361
  if (ldv_spin_node_create_lock == 2) {
#line 3363
    return (1);
  } else {

  }
#line 3366
  if (ldv_spin_node_size_lock_of_pglist_data == 2) {
#line 3368
    return (1);
  } else {

  }
#line 3371
  if (ldv_spin_outqueue_lock_of_tipc_conn == 2) {
#line 3373
    return (1);
  } else {

  }
#line 3376
  if (ldv_spin_qitem_lock == 2) {
#line 3378
    return (1);
  } else {

  }
#line 3381
  if (ldv_spin_siglock_of_sighand_struct == 2) {
#line 3383
    return (1);
  } else {

  }
#line 3386
  if (ldv_spin_sk_dst_lock_of_sock == 2) {
#line 3388
    return (1);
  } else {

  }
#line 3391
  if (ldv_spin_slock_of_NOT_ARG_SIGN == 2) {
#line 3393
    return (1);
  } else {

  }
#line 3396
  if (ldv_spin_tipc_port_list_lock == 2) {
#line 3398
    return (1);
  } else {

  }
#line 3401
  if (ldv_spin_tx_global_lock_of_net_device == 2) {
#line 3403
    return (1);
  } else {

  }
#line 3406
  return (0);
}
}
#line 3 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(int expr ) 
{ 


  {
#line 4
  if (! expr) {
    {
#line 5
    __VERIFIER_error();
    }
  } else {

  }
#line 6
  return;
}
}
#line 7 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(int expr ) 
{ 


  {
#line 8
  if (! expr) {
    {
#line 9
    __VERIFIER_error();
    }
  } else {

  }
#line 10
  return;
}
}
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(int expr ) 
{ 


  {
#line 12
  if (! expr) {
    {
#line 13
    __VERIFIER_error();
    }
  } else {

  }
#line 14
  return;
}
}
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/16/vtg/net/tipc/tipc.ko/linux:kernel:locking:spinlock/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(int expr ) 
{ 


  {
#line 16
  if (! expr) {
    {
#line 17
    __VERIFIER_error();
    }
  } else {

  }
#line 18
  return;
}
}
