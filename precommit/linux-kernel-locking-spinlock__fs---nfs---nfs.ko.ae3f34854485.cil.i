/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 7 ".tmp_client.c"
struct device;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
struct __anonstruct___kernel_fsid_t_5 {
   int val[2U] ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef struct __anonstruct___kernel_fsid_t_5 __kernel_fsid_t;
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef unsigned short umode_t;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef _Bool bool;
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __s32 int32_t;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __u8 uint8_t;
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __u16 uint16_t;
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __u32 uint32_t;
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __u64 uint64_t;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef u64 dma_addr_t;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef unsigned int gfp_t;
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef unsigned int fmode_t;
#line 160 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef unsigned int oom_flags_t;
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 184 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 189
struct hlist_node;
#line 189 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 193 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 204 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/spinlock_types.h"
union __anonunion____missing_field_name_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion____missing_field_name_8 __annonCompField4 ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/spinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 15
struct task_struct;
#line 16
struct lockdep_map;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockdep.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/export.h"
struct module;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/ptrace.h"
struct __anonstruct____missing_field_name_10 {
   unsigned int a ;
   unsigned int b ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/ptrace.h"
struct __anonstruct____missing_field_name_11 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/ptrace.h"
union __anonunion____missing_field_name_9 {
   struct __anonstruct____missing_field_name_10 __annonCompField5 ;
   struct __anonstruct____missing_field_name_11 __annonCompField6 ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion____missing_field_name_9 __annonCompField7 ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_12 {
   pteval_t pte ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_12 pte_t;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 242 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_13 {
   pgdval_t pgd ;
};
#line 244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_13 pgd_t;
#line 332
struct page;
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 340
struct file;
#line 353
struct seq_file;
#line 390
struct thread_struct;
#line 392
struct mm_struct;
#line 393
struct cpumask;
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dynamic_debug.h"
struct net_device;
#line 400 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/printk.h"
struct file_operations;
#line 412
struct completion;
#line 416 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernel.h"
struct pid;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/vm86.h"
union __anonunion____missing_field_name_16 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_16 __annonCompField8 ;
};
#line 306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/bug.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 671 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 294 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_21 {
   u64 rip ;
   u64 rdp ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_22 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_20 {
   struct __anonstruct____missing_field_name_21 __annonCompField12 ;
   struct __anonstruct____missing_field_name_22 __annonCompField13 ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_23 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_20 __annonCompField14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion____missing_field_name_23 __annonCompField15 ;
};
#line 346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 367 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct lwp_struct {
   u8 reserved[128U] ;
};
#line 377 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct bndregs_struct {
   u64 bndregs[8U] ;
};
#line 381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct bndcsr_struct {
   u64 cfg_reg_u ;
   u64 status_reg ;
};
#line 386 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 392 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
   struct lwp_struct lwp ;
   struct bndregs_struct bndregs ;
   struct bndcsr_struct bndcsr ;
};
#line 401 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 465
struct kmem_cache;
#line 466
struct perf_event;
#line 467 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned char fpu_counter ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
};
#line 530 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock_types.h"
struct __anonstruct____missing_field_name_27 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock_types.h"
union __anonunion____missing_field_name_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct____missing_field_name_27 __annonCompField17 ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion____missing_field_name_26 __annonCompField18 ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/thread.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 178
struct timespec;
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
typedef int pao_T__;
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
typedef int pao_T_____0;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/jump_label.h"
struct jump_entry;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};
#line 412 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_33 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_33 seqlock_t;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
struct __wait_queue;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 920 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
struct notifier_block;
#line 1085 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
union __anonunion____missing_field_name_34 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};
#line 1085 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion____missing_field_name_34 __annonCompField20 ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};
#line 185 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/idr.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 87
struct dentry;
#line 88
struct iattr;
#line 89
struct vm_area_struct;
#line 90
struct super_block;
#line 91
struct file_system_type;
#line 92
struct kernfs_open_node;
#line 93
struct kernfs_iattrs;
#line 116
struct kernfs_root;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rbtree.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kernfs_node;
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 89
struct kernfs_ops;
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops  const  *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 96 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
union __anonunion____missing_field_name_35 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 96 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const   *name ;
   struct rb_node rb ;
   void const   *ns ;
   unsigned int hash ;
   union __anonunion____missing_field_name_35 __annonCompField21 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root * , int * , char * ) ;
   int (*show_options)(struct seq_file * , struct kernfs_root * ) ;
   int (*mkdir)(struct kernfs_node * , char const   * , umode_t  ) ;
   int (*rmdir)(struct kernfs_node * ) ;
   int (*rename)(struct kernfs_node * , struct kernfs_node * , char const   * ) ;
};
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 171
struct vm_operations_struct;
#line 171 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct  const  *vm_ops ;
};
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   ssize_t (*read)(struct kernfs_open_file * , char * , size_t  , loff_t  ) ;
   size_t atomic_write_len ;
   ssize_t (*write)(struct kernfs_open_file * , char * , size_t  , loff_t  ) ;
   int (*mmap)(struct kernfs_open_file * , struct vm_area_struct * ) ;
   struct lock_class_key lockdep_key ;
};
#line 464
struct sock;
#line 465
struct kobject;
#line 466
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 472 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/uapi/asm/stat.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highuid.h"
struct user_namespace;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
struct __anonstruct_kuid_t_36 {
   uid_t val ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_36 kuid_t;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
struct __anonstruct_kgid_t_37 {
   gid_t val ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_37 kgid_t;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/stat.h"
struct bin_attribute;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/stat.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 470 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/ktime.h"
typedef union ktime ktime_t;
#line 412
struct tvec_base;
#line 413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 266
struct workqueue_struct;
#line 267
struct work_struct;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kobject.h"
struct kset;
#line 52
struct kobj_type;
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 122 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kdev_t.h"
struct inode;
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kdev_t.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cdev.h"
struct backing_dev_info;
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/bit_spinlock.h"
struct hlist_bl_node;
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/bit_spinlock.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rculist_bl.h"
struct __anonstruct____missing_field_name_39 {
   spinlock_t lock ;
   unsigned int count ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rculist_bl.h"
union __anonunion____missing_field_name_38 {
   struct __anonstruct____missing_field_name_39 __annonCompField22 ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion____missing_field_name_38 __annonCompField23 ;
};
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockref.h"
struct nameidata;
#line 50
struct path;
#line 51
struct vfsmount;
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockref.h"
struct __anonstruct____missing_field_name_41 {
   u32 hash ;
   u32 len ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockref.h"
union __anonunion____missing_field_name_40 {
   struct __anonstruct____missing_field_name_41 __annonCompField24 ;
   u64 hash_len ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockref.h"
struct qstr {
   union __anonunion____missing_field_name_40 __annonCompField25 ;
   unsigned char const   *name ;
};
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
struct dentry_operations;
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
union __anonunion_d_u_42 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_42 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_weak_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct dentry  const  * , unsigned int  ,
                    char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_43 {
   unsigned long bits[16U] ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_43 nodemask_t;
#line 530 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nodemask.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_head list ;
   long nr_items ;
};
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   nodemask_t active_nodes ;
};
#line 137
struct llist_node;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/radix-tree.h"
struct __anonstruct____missing_field_name_45 {
   struct radix_tree_node *parent ;
   void *private_data ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/radix-tree.h"
union __anonunion____missing_field_name_44 {
   struct __anonstruct____missing_field_name_45 __annonCompField26 ;
   struct callback_head callback_head ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion____missing_field_name_44 __annonCompField27 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 428
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 435
struct pid_namespace;
#line 435 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/fiemap.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   nodemask_t nodes_to_scan ;
   int nid ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker * , struct shrink_control * ) ;
   unsigned long (*scan_objects)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};
#line 70
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 76
struct rw_semaphore;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/shrinker.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 320
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 327
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 335
struct wakeup_source;
#line 546 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};
#line 553
struct dev_pm_qos;
#line 553 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool ignore_children : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int run_wake : 1 ;
   unsigned int runtime_auto : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device * , s32  ) ;
   struct dev_pm_qos *qos ;
};
#line 614 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_111 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_111 mm_context_t;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/xen/features.h"
struct bio_vec;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/percpu-rwsem.h"
struct block_device;
#line 31
struct io_context;
#line 32
struct cgroup_subsys_state;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/fs.h"
struct export_operations;
#line 61
struct iovec;
#line 62
struct kiocb;
#line 63
struct pipe_inode_info;
#line 64
struct poll_table_struct;
#line 65
struct kstatfs;
#line 66
struct cred;
#line 67
struct swap_info_struct;
#line 68
struct iov_iter;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 166 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
   __u32 qfs_pad ;
};
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_statv {
   __s8 qs_version ;
   __u8 qs_pad1 ;
   __u16 qs_flags ;
   __u32 qs_incoredqs ;
   struct fs_qfilestatv qs_uquota ;
   struct fs_qfilestatv qs_gquota ;
   struct fs_qfilestatv qs_pquota ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
   __u64 qs_pad2[8U] ;
};
#line 212
struct dquot;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/projid.h"
struct __anonstruct_kprojid_t_138 {
   projid_t val ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_138 kprojid_t;
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
typedef long long qsize_t;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
union __anonunion____missing_field_name_139 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct kqid {
   union __anonunion____missing_field_name_139 __annonCompField38 ;
   enum quota_type type ;
};
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xstatev)(struct super_block * , struct fs_quota_statv * ) ;
   int (*rm_xquota)(struct super_block * , unsigned int  ) ;
};
#line 334 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 380 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 411
struct address_space;
#line 412
struct writeback_control;
#line 323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned int  , unsigned int  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iov_iter * , loff_t  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , unsigned long  , unsigned long  ) ;
   void (*is_dirty_writeback)(struct page * , bool * , bool * ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 382 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 405
struct request_queue;
#line 406
struct hd_struct;
#line 406
struct gendisk;
#line 406 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 478
struct posix_acl;
#line 479
struct inode_operations;
#line 479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_142 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_143 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 479
struct file_lock;
#line 479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_144 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion____missing_field_name_142 __annonCompField39 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion____missing_field_name_143 __annonCompField40 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_144 __annonCompField41 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};
#line 715 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 723 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 746 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
union __anonunion_f_u_145 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 746 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct file {
   union __anonunion_f_u_145 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};
#line 836
struct files_struct;
#line 836 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 837 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 842 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   unsigned long (*lm_owner_key)(struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 855
struct net;
#line 860
struct nlm_lockowner;
#line 861 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_147 {
   struct list_head link ;
   int state ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_146 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_147 afs ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_146 fl_u ;
};
#line 963 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1173
struct super_operations;
#line 1173
struct xattr_handler;
#line 1173
struct mtd_info;
#line 1173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
};
#line 1403 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct dir_context {
   int (*actor)(void * , char const   * , int  , loff_t  , u64  , unsigned int  ) ;
   loff_t pos ;
};
#line 1446 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   ssize_t (*read_iter)(struct kiocb * , struct iov_iter * ) ;
   ssize_t (*write_iter)(struct kiocb * , struct iov_iter * ) ;
   int (*iterate)(struct file * , struct dir_context * ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
#line 1488 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*rename2)(struct inode * , struct dentry * , struct inode * , struct dentry * ,
                  unsigned int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
   int (*tmpfile)(struct inode * , struct dentry * , umode_t  ) ;
   int (*set_acl)(struct inode * , struct posix_acl * , int  ) ;
};
#line 1535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   long (*nr_cached_objects)(struct super_block * , int  ) ;
   long (*free_cached_objects)(struct super_block * , long  , int  ) ;
};
#line 1749 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 2706
struct ctl_table;
#line 2771 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 66
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/uprobes.h"
struct __anonstruct____missing_field_name_153 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/uprobes.h"
struct __anonstruct____missing_field_name_154 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/uprobes.h"
union __anonunion____missing_field_name_152 {
   struct __anonstruct____missing_field_name_153 __annonCompField44 ;
   struct __anonstruct____missing_field_name_154 __annonCompField45 ;
};
#line 73
struct uprobe;
#line 73
struct return_instance;
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion____missing_field_name_152 __annonCompField46 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
struct xol_area;
#line 95 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_155 {
   struct address_space *mapping ;
   void *s_mem ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_157 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_161 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_160 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_161 __annonCompField49 ;
   int units ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_159 {
   union __anonunion____missing_field_name_160 __annonCompField50 ;
   atomic_t _count ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_158 {
   unsigned long counters ;
   struct __anonstruct____missing_field_name_159 __annonCompField51 ;
   unsigned int active ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_156 {
   union __anonunion____missing_field_name_157 __annonCompField48 ;
   union __anonunion____missing_field_name_158 __annonCompField52 ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_163 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 133
struct slab;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_162 {
   struct list_head lru ;
   struct __anonstruct____missing_field_name_163 __annonCompField54 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   pgtable_t pmd_huge_pte ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_164 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   union __anonunion____missing_field_name_155 __annonCompField47 ;
   struct __anonstruct____missing_field_name_156 __annonCompField53 ;
   union __anonunion____missing_field_name_162 __annonCompField55 ;
   union __anonunion____missing_field_name_164 __annonCompField56 ;
   unsigned long debug_flags ;
};
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
struct __anonstruct_linear_166 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
union __anonunion_shared_165 {
   struct __anonstruct_linear_166 linear ;
   struct list_head nonlinear ;
};
#line 239
struct anon_vma;
#line 239
struct mempolicy;
#line 239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_165 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 330 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};
#line 338 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 343
struct kioctx_table;
#line 344
struct linux_binfmt;
#line 344
struct mmu_notifier_mm;
#line 344 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
};
#line 519
struct user_struct;
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};
#line 221 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   void (*map_pages)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   char const   *(*name)(struct vm_area_struct * ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1200
struct kvec;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 359 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/irq.h"
struct proc_dir_entry;
#line 835 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct __anonstruct____missing_field_name_170 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
union __anonunion____missing_field_name_169 {
   struct __anonstruct____missing_field_name_170 __annonCompField58 ;
   struct callback_head rcu ;
};
#line 124
struct ctl_table_set;
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion____missing_field_name_169 __annonCompField59 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_header * , struct ctl_table * ) ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/elf.h"
struct kernel_param;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/elf.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/moduleparam.h"
struct kparam_string;
#line 58
struct kparam_array;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/moduleparam.h"
union __anonunion____missing_field_name_176 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion____missing_field_name_176 __annonCompField60 ;
};
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 461 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/moduleparam.h"
struct mod_arch_specific {

};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/module.h"
struct module_param_attrs;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 205
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
} ;
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 226
struct module_sect_attrs;
#line 226
struct module_notes_attrs;
#line 226
struct tracepoint;
#line 226
struct ftrace_event_call;
#line 226 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 4 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sem.h"
struct sem_undo_list;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_177 {
   unsigned long sig[1U] ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_177 sigset_t;
#line 25
struct siginfo;
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_179 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_180 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_181 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_182 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_183 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_184 {
   long _band ;
   int _fd ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_185 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_178 {
   int _pad[28U] ;
   struct __anonstruct__kill_179 _kill ;
   struct __anonstruct__timer_180 _timer ;
   struct __anonstruct__rt_181 _rt ;
   struct __anonstruct__sigchld_182 _sigchld ;
   struct __anonstruct__sigfault_183 _sigfault ;
   struct __anonstruct__sigpoll_184 _sigpoll ;
   struct __anonstruct__sigsys_185 _sigsys ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_178 _sifields ;
};
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 246 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};
#line 463 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/latencytop.h"
struct assoc_array_ptr;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
typedef int32_t key_serial_t;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 35
struct key;
#line 36
struct signal_struct;
#line 37
struct key_type;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const   *description ;
   size_t desc_len ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_188 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 123
struct key_user;
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_189 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
struct __anonstruct____missing_field_name_191 {
   struct key_type *type ;
   char *description ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_190 {
   struct keyring_index_key index_key ;
   struct __anonstruct____missing_field_name_191 __annonCompField63 ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
union __anonunion_type_data_192 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
union __anonunion_payload_194 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_193 {
   union __anonunion_payload_194 payload ;
   struct assoc_array keys ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion____missing_field_name_188 __annonCompField61 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_189 __annonCompField62 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion____missing_field_name_190 __annonCompField64 ;
   union __anonunion_type_data_192 type_data ;
   union __anonunion____missing_field_name_193 __annonCompField65 ;
};
#line 356
struct audit_context;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct futex_pi_state;
#line 126
struct robust_list_head;
#line 127
struct bio_list;
#line 128
struct fs_struct;
#line 129
struct perf_event_context;
#line 130
struct blk_plug;
#line 180
struct cfs_rq;
#line 181
struct task_group;
#line 426 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 465 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 473 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 480 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 492 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 512 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 554
struct autogroup;
#line 555
struct tty_struct;
#line 555
struct taskstats;
#line 555
struct tty_audit_buf;
#line 555 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 735 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 778
struct reclaim_state;
#line 779 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 794 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1060
struct uts_namespace;
#line 1061 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 1069 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 1081 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 1148
struct rt_rq;
#line 1148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};
#line 1222
struct mem_cgroup;
#line 1222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1643 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int may_oom : 1 ;
};
#line 1650
struct sched_class;
#line 1650
struct css_set;
#line 1650
struct compat_robust_list_head;
#line 1650
struct numa_group;
#line 1650
struct ftrace_ret_stack;
#line 1650 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned int brk_randomized : 1 ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int no_new_privs : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct task_struct *pi_top_task ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults_memory ;
   unsigned long total_numa_faults ;
   unsigned long *numa_faults_buffer_memory ;
   unsigned long *numa_faults_cpu ;
   unsigned long *numa_faults_buffer_cpu ;
   unsigned long numa_faults_locality[2U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
};
#line 2998 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uio.h"
union __anonunion____missing_field_name_196 {
   struct iovec  const  *iov ;
   struct bio_vec  const  *bvec ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion____missing_field_name_196 __annonCompField67 ;
   unsigned long nr_segs ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/socket.h"
struct __kernel_sockaddr_storage {
   __kernel_sa_family_t ss_family ;
   char __data[126U] ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 355 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/socket.h"
struct in_addr {
   __be32 s_addr ;
};
#line 214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/in.h"
union __anonunion_in6_u_197 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_197 in6_u ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/msg_prot.h"
typedef u32 rpc_authflavor_t;
#line 9 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/unaligned/generic.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 351 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/scatterlist.h"
struct xdr_netobj {
   unsigned int len ;
   u8 *data ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xdr.h"
struct xdr_buf {
   struct kvec head[1U] ;
   struct kvec tail[1U] ;
   struct page **pages ;
   unsigned int page_base ;
   unsigned int page_len ;
   unsigned int flags ;
   unsigned int buflen ;
   unsigned int len ;
};
#line 159
struct sk_buff;
#line 194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xdr.h"
struct xdr_stream {
   __be32 *p ;
   struct xdr_buf *buf ;
   __be32 *end ;
   struct kvec *iov ;
   struct kvec scratch ;
   struct page **page_ptr ;
   unsigned int nwords ;
};
#line 232
struct rpc_procinfo;
#line 233
struct rpc_cred;
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xdr.h"
struct rpc_message {
   struct rpc_procinfo *rpc_proc ;
   void *rpc_argp ;
   void *rpc_resp ;
   struct rpc_cred *rpc_cred ;
};
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
struct rpc_call_ops;
#line 31
struct rpc_wait_queue;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
struct rpc_wait {
   struct list_head list ;
   struct list_head links ;
   struct list_head timer_list ;
   unsigned long expires ;
};
#line 39
struct rpc_clnt;
#line 39
struct rpc_rqst;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
union __anonunion_u_198 {
   struct work_struct tk_work ;
   struct rpc_wait tk_wait ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
struct rpc_task {
   atomic_t tk_count ;
   struct list_head tk_task ;
   struct rpc_clnt *tk_client ;
   struct rpc_rqst *tk_rqstp ;
   struct rpc_message tk_msg ;
   void (*tk_callback)(struct rpc_task * ) ;
   void (*tk_action)(struct rpc_task * ) ;
   struct rpc_call_ops  const  *tk_ops ;
   void *tk_calldata ;
   unsigned long tk_timeout ;
   unsigned long tk_runstate ;
   struct workqueue_struct *tk_workqueue ;
   struct rpc_wait_queue *tk_waitqueue ;
   union __anonunion_u_198 u ;
   ktime_t tk_start ;
   pid_t tk_owner ;
   int tk_status ;
   unsigned short tk_flags ;
   unsigned short tk_timeouts ;
   unsigned short tk_pid ;
   unsigned char tk_priority : 2 ;
   unsigned char tk_garb_retry : 2 ;
   unsigned char tk_cred_retry : 2 ;
   unsigned char tk_rebind_retry : 2 ;
};
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
struct rpc_call_ops {
   void (*rpc_call_prepare)(struct rpc_task * , void * ) ;
   void (*rpc_call_done)(struct rpc_task * , void * ) ;
   void (*rpc_count_stats)(struct rpc_task * , void * ) ;
   void (*rpc_release)(void * ) ;
};
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
struct rpc_task_setup {
   struct rpc_task *task ;
   struct rpc_clnt *rpc_client ;
   struct rpc_message  const  *rpc_message ;
   struct rpc_call_ops  const  *callback_ops ;
   void *callback_data ;
   struct workqueue_struct *workqueue ;
   unsigned short flags ;
   signed char priority ;
};
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
struct rpc_timer {
   struct timer_list timer ;
   struct list_head list ;
   unsigned long expires ;
};
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
struct rpc_wait_queue {
   spinlock_t lock ;
   struct list_head tasks[4U] ;
   pid_t owner ;
   unsigned char maxpriority ;
   unsigned char priority ;
   unsigned char nr ;
   unsigned short qlen ;
   struct rpc_timer timer_list ;
   char const   *name ;
};
#line 265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
struct rpc_timeout {
   unsigned long to_initval ;
   unsigned long to_maxval ;
   unsigned long to_increment ;
   unsigned int to_retries ;
   unsigned char to_exponential ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprt.h"
enum rpc_display_format_t {
    RPC_DISPLAY_ADDR = 0,
    RPC_DISPLAY_PORT = 1,
    RPC_DISPLAY_PROTO = 2,
    RPC_DISPLAY_HEX_ADDR = 3,
    RPC_DISPLAY_HEX_PORT = 4,
    RPC_DISPLAY_NETID = 5,
    RPC_DISPLAY_MAX = 6
} ;
#line 53
struct rpc_xprt;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprt.h"
struct rpc_rqst {
   struct rpc_xprt *rq_xprt ;
   struct xdr_buf rq_snd_buf ;
   struct xdr_buf rq_rcv_buf ;
   struct rpc_task *rq_task ;
   struct rpc_cred *rq_cred ;
   __be32 rq_xid ;
   int rq_cong ;
   u32 rq_seqno ;
   int rq_enc_pages_num ;
   struct page **rq_enc_pages ;
   void (*rq_release_snd_buf)(struct rpc_rqst * ) ;
   struct list_head rq_list ;
   __u32 *rq_buffer ;
   size_t rq_callsize ;
   size_t rq_rcvsize ;
   size_t rq_xmit_bytes_sent ;
   size_t rq_reply_bytes_recvd ;
   struct xdr_buf rq_private_buf ;
   unsigned long rq_majortimeo ;
   unsigned long rq_timeout ;
   ktime_t rq_rtt ;
   unsigned int rq_retries ;
   unsigned int rq_connect_cookie ;
   u32 rq_bytes_sent ;
   ktime_t rq_xtime ;
   int rq_ntrans ;
   struct list_head rq_bc_list ;
   unsigned long rq_bc_pa_state ;
   struct list_head rq_bc_pa_list ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprt.h"
struct rpc_xprt_ops {
   void (*set_buffer_size)(struct rpc_xprt * , size_t  , size_t  ) ;
   int (*reserve_xprt)(struct rpc_xprt * , struct rpc_task * ) ;
   void (*release_xprt)(struct rpc_xprt * , struct rpc_task * ) ;
   void (*alloc_slot)(struct rpc_xprt * , struct rpc_task * ) ;
   void (*rpcbind)(struct rpc_task * ) ;
   void (*set_port)(struct rpc_xprt * , unsigned short  ) ;
   void (*connect)(struct rpc_xprt * , struct rpc_task * ) ;
   void *(*buf_alloc)(struct rpc_task * , size_t  ) ;
   void (*buf_free)(void * ) ;
   int (*send_request)(struct rpc_task * ) ;
   void (*set_retrans_timeout)(struct rpc_task * ) ;
   void (*timer)(struct rpc_xprt * , struct rpc_task * ) ;
   void (*release_request)(struct rpc_task * ) ;
   void (*close)(struct rpc_xprt * ) ;
   void (*destroy)(struct rpc_xprt * ) ;
   void (*print_stats)(struct rpc_xprt * , struct seq_file * ) ;
};
#line 145
struct svc_xprt;
#line 145
struct svc_serv;
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprt.h"
struct __anonstruct_stat_199 {
   unsigned long bind_count ;
   unsigned long connect_count ;
   unsigned long connect_start ;
   unsigned long connect_time ;
   unsigned long sends ;
   unsigned long recvs ;
   unsigned long bad_xids ;
   unsigned long max_slots ;
   unsigned long long req_u ;
   unsigned long long bklog_u ;
   unsigned long long sending_u ;
   unsigned long long pending_u ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprt.h"
struct rpc_xprt {
   atomic_t count ;
   struct rpc_xprt_ops *ops ;
   struct rpc_timeout  const  *timeout ;
   struct __kernel_sockaddr_storage addr ;
   size_t addrlen ;
   int prot ;
   unsigned long cong ;
   unsigned long cwnd ;
   size_t max_payload ;
   unsigned int tsh_size ;
   struct rpc_wait_queue binding ;
   struct rpc_wait_queue sending ;
   struct rpc_wait_queue pending ;
   struct rpc_wait_queue backlog ;
   struct list_head free ;
   unsigned int max_reqs ;
   unsigned int min_reqs ;
   atomic_t num_reqs ;
   unsigned long state ;
   unsigned char resvport : 1 ;
   unsigned int swapper ;
   unsigned int bind_index ;
   unsigned long bind_timeout ;
   unsigned long reestablish_timeout ;
   unsigned int connect_cookie ;
   struct work_struct task_cleanup ;
   struct timer_list timer ;
   unsigned long last_used ;
   unsigned long idle_timeout ;
   spinlock_t transport_lock ;
   spinlock_t reserve_lock ;
   u32 xid ;
   struct rpc_task *snd_task ;
   struct svc_xprt *bc_xprt ;
   struct svc_serv *bc_serv ;
   unsigned int bc_alloc_count ;
   spinlock_t bc_pa_lock ;
   struct list_head bc_pa_list ;
   struct list_head recv ;
   struct __anonstruct_stat_199 stat ;
   struct net *xprt_net ;
   char const   *servername ;
   char const   *address_strings[6U] ;
};
#line 429
struct rpcsec_gss_info;
#line 436 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprt.h"
struct auth_cred {
   kuid_t uid ;
   kgid_t gid ;
   struct group_info *group_info ;
   char const   *principal ;
   unsigned long ac_flags ;
   unsigned char machine_cred : 1 ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
struct rpc_auth;
#line 45
struct rpc_credops;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
struct rpc_cred {
   struct hlist_node cr_hash ;
   struct list_head cr_lru ;
   struct callback_head cr_rcu ;
   struct rpc_auth *cr_auth ;
   struct rpc_credops  const  *cr_ops ;
   unsigned long cr_magic ;
   unsigned long cr_expire ;
   unsigned long cr_flags ;
   atomic_t cr_count ;
   kuid_t cr_uid ;
};
#line 65
struct rpc_cred_cache;
#line 66
struct rpc_authops;
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
struct rpc_auth {
   unsigned int au_cslack ;
   unsigned int au_rslack ;
   unsigned int au_verfsize ;
   unsigned int au_flags ;
   struct rpc_authops  const  *au_ops ;
   rpc_authflavor_t au_flavor ;
   atomic_t au_count ;
   struct rpc_cred_cache *au_credcache ;
};
#line 97 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
struct rpc_auth_create_args {
   rpc_authflavor_t pseudoflavor ;
   char const   *target_name ;
};
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
struct rpc_authops {
   struct module *owner ;
   rpc_authflavor_t au_flavor ;
   char *au_name ;
   struct rpc_auth *(*create)(struct rpc_auth_create_args * , struct rpc_clnt * ) ;
   void (*destroy)(struct rpc_auth * ) ;
   struct rpc_cred *(*lookup_cred)(struct rpc_auth * , struct auth_cred * , int  ) ;
   struct rpc_cred *(*crcreate)(struct rpc_auth * , struct auth_cred * , int  ) ;
   int (*list_pseudoflavors)(rpc_authflavor_t * , int  ) ;
   rpc_authflavor_t (*info2flavor)(struct rpcsec_gss_info * ) ;
   int (*flavor2info)(rpc_authflavor_t  , struct rpcsec_gss_info * ) ;
   int (*key_timeout)(struct rpc_auth * , struct rpc_cred * ) ;
};
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
struct rpc_credops {
   char const   *cr_name ;
   int (*cr_init)(struct rpc_auth * , struct rpc_cred * ) ;
   void (*crdestroy)(struct rpc_cred * ) ;
   int (*crmatch)(struct auth_cred * , struct rpc_cred * , int  ) ;
   struct rpc_cred *(*crbind)(struct rpc_task * , struct rpc_cred * , int  ) ;
   __be32 *(*crmarshal)(struct rpc_task * , __be32 * ) ;
   int (*crrefresh)(struct rpc_task * ) ;
   __be32 *(*crvalidate)(struct rpc_task * , __be32 * ) ;
   int (*crwrap_req)(struct rpc_task * , void (*)(void * , struct xdr_stream * , void * ) ,
                     void * , __be32 * , void * ) ;
   int (*crunwrap_resp)(struct rpc_task * , int (*)(void * , struct xdr_stream * ,
                                                    void * ) , void * , __be32 * ,
                        void * ) ;
   int (*crkey_timeout)(struct rpc_cred * ) ;
   bool (*crkey_to_expire)(struct rpc_cred * ) ;
};
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/proc_fs.h"
struct rpc_program;
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/proc_fs.h"
struct rpc_stat {
   struct rpc_program  const  *program ;
   unsigned int netcnt ;
   unsigned int netudpcnt ;
   unsigned int nettcpcnt ;
   unsigned int nettcpconn ;
   unsigned int netreconn ;
   unsigned int rpccnt ;
   unsigned int rpcretrans ;
   unsigned int rpcauthrefresh ;
   unsigned int rpcgarbage ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/stats.h"
struct svc_program;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/stats.h"
struct svc_stat {
   struct svc_program *program ;
   unsigned int netcnt ;
   unsigned int netudpcnt ;
   unsigned int nettcpcnt ;
   unsigned int nettcpconn ;
   unsigned int rpccnt ;
   unsigned int rpcbadfmt ;
   unsigned int rpcbadauth ;
   unsigned int rpcbadclnt ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/stats.h"
struct rpc_rtt {
   unsigned long timeo ;
   unsigned long srtt[5U] ;
   unsigned long sdrtt[5U] ;
   int ntimeouts[5U] ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/timer.h"
struct rpc_pipe_dir_head {
   struct list_head pdh_entries ;
   struct dentry *pdh_dentry ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
struct rpc_pipe_msg {
   struct list_head list ;
   void *data ;
   size_t len ;
   size_t copied ;
   int errno ;
};
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
struct rpc_pipe_ops {
   ssize_t (*upcall)(struct file * , struct rpc_pipe_msg * , char * , size_t  ) ;
   ssize_t (*downcall)(struct file * , char const   * , size_t  ) ;
   void (*release_pipe)(struct inode * ) ;
   int (*open_pipe)(struct inode * ) ;
   void (*destroy_msg)(struct rpc_pipe_msg * ) ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
struct rpc_pipe {
   struct list_head pipe ;
   struct list_head in_upcall ;
   struct list_head in_downcall ;
   int pipelen ;
   int nreaders ;
   int nwriters ;
   int flags ;
   struct delayed_work queue_timeout ;
   struct rpc_pipe_ops  const  *ops ;
   spinlock_t lock ;
   struct dentry *dentry ;
};
#line 111
struct cache_detail;
#line 166 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   void *sysctl ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/random.h"
enum ldv_23993 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/net.h"
typedef enum ldv_23993 socket_state;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/net.h"
struct proto_ops;
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   int (*set_peek_off)(struct sock * , int  ) ;
};
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 58
struct memcg_cache_params;
#line 58
struct kmem_cache_node;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   struct kset *memcg_kset ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
struct __anonstruct____missing_field_name_201 {
   struct callback_head callback_head ;
   struct kmem_cache *memcg_caches[0U] ;
};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
struct __anonstruct____missing_field_name_202 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   atomic_t nr_pages ;
};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
union __anonunion____missing_field_name_200 {
   struct __anonstruct____missing_field_name_201 __annonCompField68 ;
   struct __anonstruct____missing_field_name_202 __annonCompField69 ;
};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion____missing_field_name_200 __annonCompField70 ;
};
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/checksum.h"
struct klist_node;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct pinctrl;
#line 68
struct pinctrl_state;
#line 194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct device_driver;
#line 16
struct driver_private;
#line 17
struct class;
#line 18
struct subsys_private;
#line 19
struct bus_type;
#line 20
struct device_node;
#line 21
struct iommu_ops;
#line 22
struct iommu_group;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct device_attribute;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group  const  **bus_groups ;
   struct attribute_group  const  **dev_groups ;
   struct attribute_group  const  **drv_groups ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*online)(struct device * ) ;
   int (*offline)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};
#line 138
struct device_type;
#line 195
struct of_device_id;
#line 195
struct acpi_device_id;
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 321
struct class_attribute;
#line 321 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group  const  **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 482 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * , kuid_t * , kgid_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 640 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 649
struct acpi_device;
#line 650 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct acpi_dev_node {
   struct acpi_device *companion ;
};
#line 656
struct dma_coherent_mem;
#line 656
struct cma;
#line 656 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
};
#line 803 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dmaengine.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/flow_keys.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 360 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 361 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
struct __anonstruct____missing_field_name_207 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};
#line 361 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_206 {
   u64 v64 ;
   struct __anonstruct____missing_field_name_207 __annonCompField72 ;
};
#line 361 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion____missing_field_name_206 __annonCompField73 ;
};
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_208 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};
#line 414
struct sec_path;
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
struct __anonstruct____missing_field_name_210 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_209 {
   __wsum csum ;
   struct __anonstruct____missing_field_name_210 __annonCompField75 ;
};
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_211 {
   unsigned int napi_id ;
   dma_cookie_t dma_cookie ;
};
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_212 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 reserved_tailroom ;
};
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion____missing_field_name_208 __annonCompField74 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion____missing_field_name_209 __annonCompField76 ;
   __u32 priority ;
   __u8 ignore_df : 1 ;
   __u8 cloned : 1 ;
   __u8 ip_summed : 2 ;
   __u8 nohdr : 1 ;
   __u8 nfctinfo : 3 ;
   __u8 pkt_type : 3 ;
   __u8 fclone : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 peeked : 1 ;
   __u8 nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   __u8 ndisc_nodetype : 2 ;
   __u8 pfmemalloc : 1 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 head_frag : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 csum_complete_sw : 1 ;
   union __anonunion____missing_field_name_211 __annonCompField77 ;
   __u32 secmark ;
   union __anonunion____missing_field_name_212 __annonCompField78 ;
   __be16 inner_protocol ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 641
struct dst_entry;
#line 709
struct rtable;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/icmpv6.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm_qos.h"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
#line 53
enum dev_pm_qos_req_type {
    DEV_PM_QOS_RESUME_LATENCY = 1,
    DEV_PM_QOS_LATENCY_TOLERANCE = 2,
    DEV_PM_QOS_FLAGS = 3
} ;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm_qos.h"
union __anonunion_data_214 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm_qos.h"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_214 data ;
   struct device *dev ;
};
#line 68
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   s32 no_constraint_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm_qos.h"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pm_qos.h"
struct dev_pm_qos {
   struct pm_qos_constraints resume_latency ;
   struct pm_qos_constraints latency_tolerance ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *resume_latency_req ;
   struct dev_pm_qos_request *latency_tolerance_req ;
   struct dev_pm_qos_request *flags_req ;
};
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/delay.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_215 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_215 sync_serial_settings;
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_216 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_216 te1_settings;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_217 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_217 raw_hdlc_proto;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_218 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_218 fr_proto;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_219 {
   unsigned int dlci ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_219 fr_proto_pvc;
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_220 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_220 fr_proto_pvc_info;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_221 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_221 cisco_proto;
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_222 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_222 ifs_ifsu ;
};
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_223 {
   char ifrn_name[16U] ;
};
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_224 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_223 ifr_ifrn ;
   union __anonunion_ifr_ifru_224 ifr_ifru ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 276 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 703 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/compat.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 288 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 469 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 568 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 600 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 642 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 675 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 691 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 722 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 741 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 767 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 933 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 941 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1017 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_key_size)(struct net_device * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh)(struct net_device * , u32 * , u8 * ) ;
   int (*set_rxfh)(struct net_device * , u32 const   * , u8 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/flow.h"
struct prot_inuse;
#line 236 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct u64_stats_sync {

};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[8U] ;
};
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[103U] ;
};
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   struct list_head lru_list ;
   spinlock_t lru_lock ;
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/inet_frag.h"
struct tcpm_hash_bucket;
#line 181
struct ipv4_devconf;
#line 182
struct fib_rules_ops;
#line 183
struct fib_table;
#line 184 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 27
struct inet_peer_base;
#line 27
struct xt_table;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};
#line 102
struct neighbour;
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
};
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ipv6.h"
struct rt6_info;
#line 35
struct rt6_statistics;
#line 35
struct fib6_table;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t rt_genid ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
   int max_dsize ;
};
#line 21
struct sctp_mib;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netfilter.h"
struct nlattr;
#line 337
struct nf_logger;
#line 338 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger  const  *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/netfilter.h"
struct ebt_table;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
   bool ulog_warn_deprecated ;
   bool ebt_ulog_warn_deprecated ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/x_tables.h"
struct hlist_nulls_node;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct hlist_nulls_head tmpl ;
};
#line 72
struct ip_conntrack_stat;
#line 72
struct nf_ct_event_notifier;
#line 72
struct nf_exp_event_notifier;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};
#line 111
struct nft_af_info;
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   unsigned int base_seq ;
   u8 gencursor ;
};
#line 450 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long  ) ;
   unsigned long data ;
};
#line 663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};
#line 74
struct net_generic;
#line 75
struct netns_ipvs;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   unsigned int proc_inum ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};
#line 400 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/cgroupstats.h"
struct percpu_ref;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref * );
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_t count ;
   unsigned int *pcpu_count ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_kill ;
   struct callback_head rcu ;
};
#line 205
struct cgroup_root;
#line 206
struct cgroup_subsys;
#line 207
struct cgroup;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cgroup.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *populated_kn ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
};
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cgroup.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 355 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};
#line 438 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup_subsys_state * , struct cftype * ) ;
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   int (*write_u64)(struct cgroup_subsys_state * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup_subsys_state * , struct cftype * , s64  ) ;
   ssize_t (*write)(struct kernfs_open_file * , char * , size_t  , loff_t  ) ;
   struct lock_class_key lockdep_key ;
};
#line 609
struct cgroup_taskset;
#line 617 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state * ) ;
   int (*css_online)(struct cgroup_subsys_state * ) ;
   void (*css_offline)(struct cgroup_subsys_state * ) ;
   void (*css_free)(struct cgroup_subsys_state * ) ;
   int (*can_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup_subsys_state * , struct cgroup_subsys_state * , struct task_struct * ) ;
   void (*bind)(struct cgroup_subsys_state * ) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const   *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *base_cftypes ;
};
#line 919 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
struct xfrm_policy;
#line 104
struct xfrm_state;
#line 124
struct request_sock;
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
struct security_mnt_opts {
   char **mnt_opts ;
   int *mnt_opts_flags ;
   int num_mnt_opts ;
};
#line 3161
struct mnt_namespace;
#line 3162
struct ipc_namespace;
#line 3163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 547 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
};
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/if_link.h"
struct netpoll_info;
#line 29
struct phy_device;
#line 30
struct wireless_dev;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 186
struct neigh_parms;
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 241 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct * , int  ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 336
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 384 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 385 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 522
struct Qdisc;
#line 522 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 591 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 603 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 615 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 666 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 689 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 702 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 724 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 740 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct netdev_phys_port_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 753 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * , void * , u16 (*)(struct net_device * ,
                                                                                     struct sk_buff * ) ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , __be16  , u16  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , __be16  , u16  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_busy_poll)(struct napi_struct * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_rate)(struct net_device * , int  , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_link_state)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
   int (*ndo_bridge_setlink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_bridge_getlink)(struct sk_buff * , u32  , u32  , struct net_device * ,
                             u32  ) ;
   int (*ndo_bridge_dellink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_change_carrier)(struct net_device * , bool  ) ;
   int (*ndo_get_phys_port_id)(struct net_device * , struct netdev_phys_port_id * ) ;
   void (*ndo_add_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void (*ndo_del_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void *(*ndo_dfwd_add_station)(struct net_device * , struct net_device * ) ;
   void (*ndo_dfwd_del_station)(struct net_device * , void * ) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff * , struct net_device * , void * ) ;
   int (*ndo_get_lock_subclass)(struct net_device * ) ;
};
#line 1173
enum ldv_30971 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 1182
enum ldv_30972 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
} ;
#line 1187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct __anonstruct_adj_list_250 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_251 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1187
struct iw_handler_def;
#line 1187
struct iw_public_data;
#line 1187
struct forwarding_accel_ops;
#line 1187
struct vlan_info;
#line 1187
struct tipc_bearer;
#line 1187
struct in_device;
#line 1187
struct dn_dev;
#line 1187
struct inet6_dev;
#line 1187
struct cpu_rmap;
#line 1187
struct pcpu_lstats;
#line 1187
struct pcpu_sw_netstats;
#line 1187
struct pcpu_dstats;
#line 1187
struct pcpu_vstats;
#line 1187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
union __anonunion____missing_field_name_252 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};
#line 1187
struct garp_port;
#line 1187
struct mrp_port;
#line 1187
struct rtnl_link_ops;
#line 1187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct __anonstruct_adj_list_250 adj_list ;
   struct __anonstruct_all_adj_list_251 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_t carrier_changes ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct forwarding_accel_ops  const  *fwd_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   unsigned char broadcast[32U] ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   struct cpu_rmap *rx_cpu_rmap ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   enum ldv_30971 reg_state : 8 ;
   bool dismantle ;
   enum ldv_30972 rtnl_link_state : 16 ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion____missing_field_name_252 __annonCompField81 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct attribute_group  const  *sysfs_rx_queue_group ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 1806 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};
#line 600 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/res_counter.h"
struct kioctx;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/aio.h"
typedef int kiocb_cancel_fn(struct kiocb * );
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/aio.h"
union __anonunion_ki_obj_253 {
   void *user ;
   struct task_struct *tsk ;
};
#line 31
struct eventfd_ctx;
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/aio.h"
struct kiocb {
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   kiocb_cancel_fn *ki_cancel ;
   void *private ;
   union __anonunion_ki_obj_253 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   size_t ki_nbytes ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/aio.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/filter.h"
struct sock_filter_int {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 314 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 320 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/filter.h"
union __anonunion____missing_field_name_254 {
   struct sock_filter insns[0U] ;
   struct sock_filter_int insnsi[0U] ;
   struct work_struct work ;
};
#line 320 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   u32 jited : 1 ;
   u32 len : 31 ;
   struct sock_fprog_kern *orig_prog ;
   struct callback_head rcu ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter_int  const  * ) ;
   union __anonunion____missing_field_name_254 __annonCompField82 ;
};
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy  const  *slave_policy ;
   int (*slave_validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*slave_changelink)(struct net_device * , struct net_device * , struct nlattr ** ,
                           struct nlattr ** ) ;
   size_t (*get_slave_size)(struct net_device  const  * , struct net_device  const  * ) ;
   int (*fill_slave_info)(struct sk_buff * , struct net_device  const  * , struct net_device  const  * ) ;
};
#line 167
struct neigh_table;
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[12U] ;
   unsigned long data_state[1U] ;
};
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 130
struct neigh_ops;
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 461
struct dn_route;
#line 461 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/neighbour.h"
union __anonunion____missing_field_name_258 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 461 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sock * , struct sk_buff * ) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion____missing_field_name_258 __annonCompField83 ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
struct __anonstruct_socket_lock_t_259 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_259 socket_lock_t;
#line 123
struct proto;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
typedef __u32 __portpair;
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
typedef __u64 __addrpair;
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
struct __anonstruct____missing_field_name_261 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_260 {
   __addrpair skc_addrpair ;
   struct __anonstruct____missing_field_name_261 __annonCompField84 ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_262 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
struct __anonstruct____missing_field_name_264 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_263 {
   __portpair skc_portpair ;
   struct __anonstruct____missing_field_name_264 __annonCompField87 ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_265 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_266 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
struct sock_common {
   union __anonunion____missing_field_name_260 __annonCompField85 ;
   union __anonunion____missing_field_name_262 __annonCompField86 ;
   union __anonunion____missing_field_name_263 __annonCompField88 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 4 ;
   int skc_bound_dev_if ;
   union __anonunion____missing_field_name_265 __annonCompField89 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion____missing_field_name_266 __annonCompField90 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 216
struct cg_proto;
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
struct __anonstruct_sk_backlog_267 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_267 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int sk_shutdown : 2 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 903
struct request_sock_ops;
#line 904
struct timewait_sock_ops;
#line 905
struct inet_hashinfo;
#line 906
struct raw_hashinfo;
#line 921
struct udp_table;
#line 921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
union __anonunion_h_268 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*release_cb)(struct sock * ) ;
   void (*mtu_reduced)(struct sock * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock  const  * ) ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_268 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 1046 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/sock.h"
struct cg_proto {
   struct res_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 872 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/ipv6.h"
struct rpc_iostats;
#line 872 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/ipv6.h"
struct rpc_clnt {
   atomic_t cl_count ;
   unsigned int cl_clid ;
   struct list_head cl_clients ;
   struct list_head cl_tasks ;
   spinlock_t cl_lock ;
   struct rpc_xprt *cl_xprt ;
   struct rpc_procinfo *cl_procinfo ;
   u32 cl_prog ;
   u32 cl_vers ;
   u32 cl_maxproc ;
   struct rpc_auth *cl_auth ;
   struct rpc_stat *cl_stats ;
   struct rpc_iostats *cl_metrics ;
   unsigned int cl_softrtry : 1 ;
   unsigned int cl_discrtry : 1 ;
   unsigned int cl_noretranstimeo : 1 ;
   unsigned int cl_autobind : 1 ;
   unsigned int cl_chatty : 1 ;
   struct rpc_rtt *cl_rtt ;
   struct rpc_timeout  const  *cl_timeout ;
   int cl_nodelen ;
   char cl_nodename[32U] ;
   struct rpc_pipe_dir_head cl_pipedir_objects ;
   struct rpc_clnt *cl_parent ;
   struct rpc_rtt cl_rtt_default ;
   struct rpc_timeout cl_timeout_default ;
   struct rpc_program  const  *cl_program ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_version;
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_program {
   char const   *name ;
   u32 number ;
   unsigned int nrvers ;
   struct rpc_version  const  **version ;
   struct rpc_stat *stats ;
   char const   *pipe_dir_name ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_version {
   u32 number ;
   unsigned int nrprocs ;
   struct rpc_procinfo *procs ;
};
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_procinfo {
   u32 p_proc ;
   void (*p_encode)(void * , struct xdr_stream * , void * ) ;
   int (*p_decode)(void * , struct xdr_stream * , void * ) ;
   unsigned int p_arglen ;
   unsigned int p_replen ;
   unsigned int p_count ;
   unsigned int p_timer ;
   u32 p_statidx ;
   char const   *p_name ;
};
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_create_args {
   struct net *net ;
   int protocol ;
   struct sockaddr *address ;
   size_t addrsize ;
   struct sockaddr *saddress ;
   struct rpc_timeout  const  *timeout ;
   char const   *servername ;
   struct rpc_program  const  *program ;
   u32 prognumber ;
   u32 version ;
   rpc_authflavor_t authflavor ;
   unsigned long flags ;
   char *client_name ;
   struct svc_xprt *bc_xprt ;
};
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_iostats {
   unsigned long om_ops ;
   unsigned long om_ntrans ;
   unsigned long om_timeouts ;
   unsigned long long om_bytes_sent ;
   unsigned long long om_bytes_recv ;
   ktime_t om_queue ;
   ktime_t om_rtt ;
   ktime_t om_execute ;
};
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprtsock.h"
struct nfs_fh {
   unsigned short size ;
   unsigned char data[128U] ;
};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs.h"
enum nfs3_stable_how {
    NFS_UNSTABLE = 0,
    NFS_DATA_SYNC = 1,
    NFS_FILE_SYNC = 2,
    NFS_INVALID_STABLE_HOW = -1
} ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
struct nfs4_label {
   uint32_t lfs ;
   uint32_t pi ;
   u32 len ;
   char *label ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
struct __anonstruct_nfs4_verifier_280 {
   char data[8U] ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
typedef struct __anonstruct_nfs4_verifier_280 nfs4_verifier;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
struct nfs_stateid4 {
   __be32 seqid ;
   char other[12U] ;
};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
typedef struct nfs_stateid4 nfs4_stateid;
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
struct nfs4_deviceid {
   char data[16U] ;
};
#line 537 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
union __anonunion____missing_field_name_281 {
   kuid_t e_uid ;
   kgid_t e_gid ;
};
#line 537 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
struct posix_acl_entry {
   short e_tag ;
   unsigned short e_perm ;
   union __anonunion____missing_field_name_281 __annonCompField92 ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/posix_acl.h"
union __anonunion____missing_field_name_282 {
   atomic_t a_refcount ;
   struct callback_head a_rcu ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/posix_acl.h"
struct posix_acl {
   union __anonunion____missing_field_name_282 __annonCompField93 ;
   unsigned int a_count ;
   struct posix_acl_entry a_entries[0U] ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfsacl.h"
struct gss_api_mech;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfsacl.h"
struct gss_ctx {
   struct gss_api_mech *mech_type ;
   void *internal_ctx_id ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/gss_api.h"
struct rpcsec_gss_oid {
   unsigned int len ;
   u8 data[32U] ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/gss_api.h"
struct rpcsec_gss_info {
   struct rpcsec_gss_oid oid ;
   u32 qop ;
   u32 service ;
};
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/gss_api.h"
struct pf_desc {
   u32 pseudoflavor ;
   u32 qop ;
   u32 service ;
   char *name ;
   char *auth_domain_name ;
};
#line 85
struct gss_api_ops;
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/gss_api.h"
struct gss_api_mech {
   struct list_head gm_list ;
   struct module *gm_owner ;
   struct rpcsec_gss_oid gm_oid ;
   char *gm_name ;
   struct gss_api_ops  const  *gm_ops ;
   int gm_pf_num ;
   struct pf_desc *gm_pfs ;
   char const   *gm_upcall_enctypes ;
};
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/gss_api.h"
struct gss_api_ops {
   int (*gss_import_sec_context)(void const   * , size_t  , struct gss_ctx * , time_t * ,
                                 gfp_t  ) ;
   u32 (*gss_get_mic)(struct gss_ctx * , struct xdr_buf * , struct xdr_netobj * ) ;
   u32 (*gss_verify_mic)(struct gss_ctx * , struct xdr_buf * , struct xdr_netobj * ) ;
   u32 (*gss_wrap)(struct gss_ctx * , int  , struct xdr_buf * , struct page ** ) ;
   u32 (*gss_unwrap)(struct gss_ctx * , int  , struct xdr_buf * ) ;
   void (*gss_delete_sec_context)(void * ) ;
};
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/gss_api.h"
struct nfs4_string {
   unsigned int len ;
   char *data ;
};
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_fsid {
   uint64_t major ;
   uint64_t minor ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_threshold {
   __u32 bm ;
   __u32 l_type ;
   __u64 rd_sz ;
   __u64 wr_sz ;
   __u64 rd_io_sz ;
   __u64 wr_io_sz ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct __anonstruct_nfs2_284 {
   __u32 blocksize ;
   __u32 blocks ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct __anonstruct_nfs3_285 {
   __u64 used ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
union __anonunion_du_283 {
   struct __anonstruct_nfs2_284 nfs2 ;
   struct __anonstruct_nfs3_285 nfs3 ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_fattr {
   unsigned int valid ;
   umode_t mode ;
   __u32 nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   __u64 size ;
   union __anonunion_du_283 du ;
   struct nfs_fsid fsid ;
   __u64 fileid ;
   __u64 mounted_on_fileid ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   __u64 change_attr ;
   __u64 pre_change_attr ;
   __u64 pre_size ;
   struct timespec pre_mtime ;
   struct timespec pre_ctime ;
   unsigned long time_start ;
   unsigned long gencount ;
   struct nfs4_string *owner_name ;
   struct nfs4_string *group_name ;
   struct nfs4_threshold *mdsthreshold ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_fsinfo {
   struct nfs_fattr *fattr ;
   __u32 rtmax ;
   __u32 rtpref ;
   __u32 rtmult ;
   __u32 wtmax ;
   __u32 wtpref ;
   __u32 wtmult ;
   __u32 dtpref ;
   __u64 maxfilesize ;
   struct timespec time_delta ;
   __u32 lease_time ;
   __u32 layouttype ;
   __u32 blksize ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_fsstat {
   struct nfs_fattr *fattr ;
   __u64 tbytes ;
   __u64 fbytes ;
   __u64 abytes ;
   __u64 tfiles ;
   __u64 ffiles ;
   __u64 afiles ;
};
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_pathconf {
   struct nfs_fattr *fattr ;
   __u32 max_link ;
   __u32 max_namelen ;
};
#line 169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_change_info {
   u32 atomic ;
   u64 before ;
   u64 after ;
};
#line 186
struct nfs4_slot;
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_sequence_args {
   struct nfs4_slot *sa_slot ;
   u8 sa_cache_this : 1 ;
   u8 sa_privileged : 1 ;
};
#line 193 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_sequence_res {
   struct nfs4_slot *sr_slot ;
   unsigned long sr_timestamp ;
   int sr_status ;
   u32 sr_status_flags ;
   u32 sr_highest_slotid ;
   u32 sr_target_highest_slotid ;
};
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_layoutdriver_data {
   struct page **pages ;
   __u32 pglen ;
   __u32 len ;
};
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct pnfs_layout_range {
   u32 iomode ;
   u64 offset ;
   u64 length ;
};
#line 225
struct nfs_open_context;
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_layoutget_res {
   struct nfs4_sequence_res seq_res ;
   __u32 return_on_close ;
   struct pnfs_layout_range range ;
   __u32 type ;
   nfs4_stateid stateid ;
   struct nfs4_layoutdriver_data *layoutp ;
};
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_layoutcommit_args {
   struct nfs4_sequence_args seq_args ;
   nfs4_stateid stateid ;
   __u64 lastbytewritten ;
   struct inode *inode ;
   u32 const   *bitmask ;
};
#line 283
struct nfs_server;
#line 283 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_layoutcommit_res {
   struct nfs4_sequence_res seq_res ;
   struct nfs_fattr *fattr ;
   struct nfs_server  const  *server ;
   int status ;
};
#line 290 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_layoutcommit_data {
   struct rpc_task task ;
   struct nfs_fattr fattr ;
   struct list_head lseg_list ;
   struct rpc_cred *cred ;
   struct nfs4_layoutcommit_args args ;
   struct nfs4_layoutcommit_res res ;
};
#line 299
struct pnfs_layout_hdr;
#line 299 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_layoutreturn_args {
   struct nfs4_sequence_args seq_args ;
   struct pnfs_layout_hdr *layout ;
   struct inode *inode ;
   nfs4_stateid stateid ;
   __u32 layout_type ;
};
#line 313
struct nfs_client;
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_write_verifier {
   char data[8U] ;
};
#line 497 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_writeverf {
   struct nfs_write_verifier verifier ;
   enum nfs3_stable_how committed ;
};
#line 502
struct nfs_lock_context;
#line 502 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_pgio_args {
   struct nfs4_sequence_args seq_args ;
   struct nfs_fh *fh ;
   struct nfs_open_context *context ;
   struct nfs_lock_context *lock_context ;
   nfs4_stateid stateid ;
   __u64 offset ;
   __u32 count ;
   unsigned int pgbase ;
   struct page **pages ;
   u32 const   *bitmask ;
   enum nfs3_stable_how stable ;
};
#line 519 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_pgio_res {
   struct nfs4_sequence_res seq_res ;
   struct nfs_fattr *fattr ;
   __u32 count ;
   int eof ;
   struct nfs_writeverf *verf ;
   struct nfs_server  const  *server ;
};
#line 528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_commitargs {
   struct nfs4_sequence_args seq_args ;
   struct nfs_fh *fh ;
   __u64 offset ;
   __u32 count ;
   u32 const   *bitmask ;
};
#line 540 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_commitres {
   struct nfs4_sequence_res seq_res ;
   struct nfs_fattr *fattr ;
   struct nfs_writeverf *verf ;
   struct nfs_server  const  *server ;
};
#line 547 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_removeargs {
   struct nfs4_sequence_args seq_args ;
   struct nfs_fh  const  *fh ;
   struct qstr name ;
};
#line 556 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_removeres {
   struct nfs4_sequence_res seq_res ;
   struct nfs_server  const  *server ;
   struct nfs_fattr *dir_attr ;
   struct nfs4_change_info cinfo ;
};
#line 563 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_renameargs {
   struct nfs4_sequence_args seq_args ;
   struct nfs_fh  const  *old_dir ;
   struct nfs_fh  const  *new_dir ;
   struct qstr  const  *old_name ;
   struct qstr  const  *new_name ;
};
#line 574 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_renameres {
   struct nfs4_sequence_res seq_res ;
   struct nfs_server  const  *server ;
   struct nfs4_change_info old_cinfo ;
   struct nfs_fattr *old_fattr ;
   struct nfs4_change_info new_cinfo ;
   struct nfs_fattr *new_fattr ;
};
#line 583 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_auth_info {
   unsigned int flavor_len ;
   rpc_authflavor_t flavors[12U] ;
};
#line 590 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_entry {
   __u64 ino ;
   __u64 cookie ;
   __u64 prev_cookie ;
   char const   *name ;
   unsigned int len ;
   int eof ;
   struct nfs_fh *fh ;
   struct nfs_fattr *fattr ;
   struct nfs4_label *label ;
   unsigned char d_type ;
   struct nfs_server *server ;
};
#line 1027 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_pathname {
   unsigned int ncomponents ;
   struct nfs4_string components[512U] ;
};
#line 1033 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_fs_location {
   unsigned int nservers ;
   struct nfs4_string servers[10U] ;
   struct nfs4_pathname rootpath ;
};
#line 1040 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_fs_locations {
   struct nfs_fattr fattr ;
   struct nfs_server  const  *server ;
   struct nfs4_pathname fs_path ;
   int nlocations ;
   struct nfs4_fs_location locations[10U] ;
};
#line 1100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfstime4 {
   u64 seconds ;
   u32 nseconds ;
};
#line 1107
struct pnfs_layout_segment;
#line 1107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct pnfs_commit_bucket {
   struct list_head written ;
   struct list_head committing ;
   struct pnfs_layout_segment *wlseg ;
   struct pnfs_layout_segment *clseg ;
   struct nfs_writeverf direct_verf ;
};
#line 1117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct pnfs_ds_commit_info {
   int nwritten ;
   int ncommitting ;
   int nbuckets ;
   struct pnfs_commit_bucket *buckets ;
};
#line 1151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs41_server_owner {
   uint64_t minor_id ;
   uint32_t major_id_sz ;
   char major_id[1024U] ;
};
#line 1157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs41_server_scope {
   uint32_t server_scope_sz ;
   char server_scope[1024U] ;
};
#line 1162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs41_impl_id {
   char domain[1025U] ;
   char name[1025U] ;
   struct nfstime4 date ;
};
#line 1168
struct nfs4_session;
#line 1233
struct nfs_page;
#line 1234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_page_array {
   struct page **pagevec ;
   unsigned int npages ;
   struct page *page_array[8U] ;
};
#line 1258
struct nfs_pgio_completion_ops;
#line 1258
struct nfs_rw_ops;
#line 1258
struct nfs_direct_req;
#line 1258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_pgio_header {
   struct inode *inode ;
   struct rpc_cred *cred ;
   struct list_head pages ;
   struct nfs_page *req ;
   struct nfs_writeverf verf ;
   struct pnfs_layout_segment *lseg ;
   loff_t io_start ;
   struct rpc_call_ops  const  *mds_ops ;
   void (*release)(struct nfs_pgio_header * ) ;
   struct nfs_pgio_completion_ops  const  *completion_ops ;
   struct nfs_rw_ops  const  *rw_ops ;
   struct nfs_direct_req *dreq ;
   void *layout_private ;
   spinlock_t lock ;
   int pnfs_error ;
   int error ;
   unsigned long good_bytes ;
   unsigned long flags ;
   struct rpc_task task ;
   struct nfs_fattr fattr ;
   struct nfs_writeverf writeverf ;
   struct nfs_pgio_args args ;
   struct nfs_pgio_res res ;
   unsigned long timestamp ;
   int (*pgio_done_cb)(struct rpc_task * , struct nfs_pgio_header * ) ;
   __u64 mds_offset ;
   struct nfs_page_array page_array ;
   struct nfs_client *ds_clp ;
   int ds_idx ;
};
#line 1296 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_mds_commit_info {
   atomic_t rpcs_out ;
   unsigned long ncommit ;
   struct list_head list ;
};
#line 1302
struct nfs_commit_data;
#line 1303
struct nfs_inode;
#line 1304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_commit_completion_ops {
   void (*error_cleanup)(struct nfs_inode * ) ;
   void (*completion)(struct nfs_commit_data * ) ;
};
#line 1309 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_commit_info {
   spinlock_t *lock ;
   struct nfs_mds_commit_info *mds ;
   struct pnfs_ds_commit_info *ds ;
   struct nfs_direct_req *dreq ;
   struct nfs_commit_completion_ops  const  *completion_ops ;
};
#line 1317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_commit_data {
   struct rpc_task task ;
   struct inode *inode ;
   struct rpc_cred *cred ;
   struct nfs_fattr fattr ;
   struct nfs_writeverf verf ;
   struct list_head pages ;
   struct list_head list ;
   struct nfs_direct_req *dreq ;
   struct nfs_commitargs args ;
   struct nfs_commitres res ;
   struct nfs_open_context *context ;
   struct pnfs_layout_segment *lseg ;
   struct nfs_client *ds_clp ;
   int ds_commit_index ;
   struct rpc_call_ops  const  *mds_ops ;
   struct nfs_commit_completion_ops  const  *completion_ops ;
   int (*commit_done_cb)(struct rpc_task * , struct nfs_commit_data * ) ;
};
#line 1337 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_pgio_completion_ops {
   void (*error_cleanup)(struct list_head * ) ;
   void (*init_hdr)(struct nfs_pgio_header * ) ;
   void (*completion)(struct nfs_pgio_header * ) ;
};
#line 1343 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_unlinkdata {
   struct hlist_node list ;
   struct nfs_removeargs args ;
   struct nfs_removeres res ;
   struct inode *dir ;
   struct rpc_cred *cred ;
   struct nfs_fattr dir_attr ;
};
#line 1352 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_renamedata {
   struct nfs_renameargs args ;
   struct nfs_renameres res ;
   struct rpc_cred *cred ;
   struct inode *old_dir ;
   struct dentry *old_dentry ;
   struct nfs_fattr old_fattr ;
   struct inode *new_dir ;
   struct dentry *new_dentry ;
   struct nfs_fattr new_fattr ;
   void (*complete)(struct rpc_task * , struct nfs_renamedata * ) ;
};
#line 1365
struct nfs_access_entry;
#line 1366
struct nfs_subversion;
#line 1367
struct nfs_mount_info;
#line 1368
struct nfs_client_initdata;
#line 1369
struct nfs_pageio_descriptor;
#line 1370 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs_rpc_ops {
   u32 version ;
   struct dentry_operations  const  *dentry_ops ;
   struct inode_operations  const  *dir_inode_ops ;
   struct inode_operations  const  *file_inode_ops ;
   struct file_operations  const  *file_ops ;
   int (*getroot)(struct nfs_server * , struct nfs_fh * , struct nfs_fsinfo * ) ;
   struct vfsmount *(*submount)(struct nfs_server * , struct dentry * , struct nfs_fh * ,
                                struct nfs_fattr * ) ;
   struct dentry *(*try_mount)(int  , char const   * , struct nfs_mount_info * , struct nfs_subversion * ) ;
   int (*getattr)(struct nfs_server * , struct nfs_fh * , struct nfs_fattr * , struct nfs4_label * ) ;
   int (*setattr)(struct dentry * , struct nfs_fattr * , struct iattr * ) ;
   int (*lookup)(struct inode * , struct qstr * , struct nfs_fh * , struct nfs_fattr * ,
                 struct nfs4_label * ) ;
   int (*access)(struct inode * , struct nfs_access_entry * ) ;
   int (*readlink)(struct inode * , struct page * , unsigned int  , unsigned int  ) ;
   int (*create)(struct inode * , struct dentry * , struct iattr * , int  ) ;
   int (*remove)(struct inode * , struct qstr * ) ;
   void (*unlink_setup)(struct rpc_message * , struct inode * ) ;
   void (*unlink_rpc_prepare)(struct rpc_task * , struct nfs_unlinkdata * ) ;
   int (*unlink_done)(struct rpc_task * , struct inode * ) ;
   void (*rename_setup)(struct rpc_message * , struct inode * ) ;
   void (*rename_rpc_prepare)(struct rpc_task * , struct nfs_renamedata * ) ;
   int (*rename_done)(struct rpc_task * , struct inode * , struct inode * ) ;
   int (*link)(struct inode * , struct inode * , struct qstr * ) ;
   int (*symlink)(struct inode * , struct dentry * , struct page * , unsigned int  ,
                  struct iattr * ) ;
   int (*mkdir)(struct inode * , struct dentry * , struct iattr * ) ;
   int (*rmdir)(struct inode * , struct qstr * ) ;
   int (*readdir)(struct dentry * , struct rpc_cred * , u64  , struct page ** , unsigned int  ,
                  int  ) ;
   int (*mknod)(struct inode * , struct dentry * , struct iattr * , dev_t  ) ;
   int (*statfs)(struct nfs_server * , struct nfs_fh * , struct nfs_fsstat * ) ;
   int (*fsinfo)(struct nfs_server * , struct nfs_fh * , struct nfs_fsinfo * ) ;
   int (*pathconf)(struct nfs_server * , struct nfs_fh * , struct nfs_pathconf * ) ;
   int (*set_capabilities)(struct nfs_server * , struct nfs_fh * ) ;
   int (*decode_dirent)(struct xdr_stream * , struct nfs_entry * , int  ) ;
   int (*pgio_rpc_prepare)(struct rpc_task * , struct nfs_pgio_header * ) ;
   void (*read_setup)(struct nfs_pgio_header * , struct rpc_message * ) ;
   int (*read_done)(struct rpc_task * , struct nfs_pgio_header * ) ;
   void (*write_setup)(struct nfs_pgio_header * , struct rpc_message * ) ;
   int (*write_done)(struct rpc_task * , struct nfs_pgio_header * ) ;
   void (*commit_setup)(struct nfs_commit_data * , struct rpc_message * ) ;
   void (*commit_rpc_prepare)(struct rpc_task * , struct nfs_commit_data * ) ;
   int (*commit_done)(struct rpc_task * , struct nfs_commit_data * ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   int (*lock_check_bounds)(struct file_lock  const  * ) ;
   void (*clear_acl_cache)(struct inode * ) ;
   void (*close_context)(struct nfs_open_context * , int  ) ;
   struct inode *(*open_context)(struct inode * , struct nfs_open_context * , int  ,
                                 struct iattr * , int * ) ;
   int (*have_delegation)(struct inode * , fmode_t  ) ;
   int (*return_delegation)(struct inode * ) ;
   struct nfs_client *(*alloc_client)(struct nfs_client_initdata  const  * ) ;
   struct nfs_client *(*init_client)(struct nfs_client * , struct rpc_timeout  const  * ,
                                     char const   * ) ;
   void (*free_client)(struct nfs_client * ) ;
   struct nfs_server *(*create_server)(struct nfs_mount_info * , struct nfs_subversion * ) ;
   struct nfs_server *(*clone_server)(struct nfs_server * , struct nfs_fh * , struct nfs_fattr * ,
                                      rpc_authflavor_t  ) ;
};
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
};
#line 88
struct bdi_writeback;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   struct delayed_work dwork ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 361
struct nfs_iostats;
#line 362
struct nlm_host;
#line 363
struct nfs4_minor_version_ops;
#line 364
struct idmap;
#line 364
struct nfs4_slot_table;
#line 364
struct fscache_cookie;
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
struct nfs_client {
   atomic_t cl_count ;
   atomic_t cl_mds_count ;
   int cl_cons_state ;
   unsigned long cl_res_state ;
   unsigned long cl_flags ;
   struct __kernel_sockaddr_storage cl_addr ;
   size_t cl_addrlen ;
   char *cl_hostname ;
   struct list_head cl_share_link ;
   struct list_head cl_superblocks ;
   struct rpc_clnt *cl_rpcclient ;
   struct nfs_rpc_ops  const  *rpc_ops ;
   int cl_proto ;
   struct nfs_subversion *cl_nfs_mod ;
   u32 cl_minorversion ;
   struct rpc_cred *cl_machine_cred ;
   struct list_head cl_ds_clients ;
   u64 cl_clientid ;
   nfs4_verifier cl_confirm ;
   unsigned long cl_state ;
   spinlock_t cl_lock ;
   unsigned long cl_lease_time ;
   unsigned long cl_last_renewal ;
   struct delayed_work cl_renewd ;
   struct rpc_wait_queue cl_rpcwaitq ;
   struct idmap *cl_idmap ;
   char cl_ipaddr[48U] ;
   u32 cl_cb_ident ;
   struct nfs4_minor_version_ops  const  *cl_mvops ;
   unsigned long cl_mig_gen ;
   struct nfs4_slot_table *cl_slot_tbl ;
   u32 cl_seqid ;
   u32 cl_exchange_flags ;
   struct nfs4_session *cl_session ;
   bool cl_preserve_clid ;
   struct nfs41_server_owner *cl_serverowner ;
   struct nfs41_server_scope *cl_serverscope ;
   struct nfs41_impl_id *cl_implid ;
   unsigned long cl_sp4_flags ;
   struct fscache_cookie *fscache ;
   struct net *cl_net ;
};
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs_sb.h"
struct nfs_fscache_key;
#line 113
struct pnfs_layoutdriver_type;
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs_sb.h"
struct nfs_server {
   struct nfs_client *nfs_client ;
   struct list_head client_link ;
   struct list_head master_link ;
   struct rpc_clnt *client ;
   struct rpc_clnt *client_acl ;
   struct nlm_host *nlm_host ;
   struct nfs_iostats *io_stats ;
   struct backing_dev_info backing_dev_info ;
   atomic_long_t writeback ;
   int flags ;
   unsigned int caps ;
   unsigned int rsize ;
   unsigned int rpages ;
   unsigned int wsize ;
   unsigned int wpages ;
   unsigned int wtmult ;
   unsigned int dtsize ;
   unsigned short port ;
   unsigned int bsize ;
   unsigned int acregmin ;
   unsigned int acregmax ;
   unsigned int acdirmin ;
   unsigned int acdirmax ;
   unsigned int namelen ;
   unsigned int options ;
   struct nfs_fsid fsid ;
   __u64 maxfilesize ;
   struct timespec time_delta ;
   unsigned long mount_time ;
   struct super_block *super ;
   dev_t s_dev ;
   struct nfs_auth_info auth_info ;
   struct nfs_fscache_key *fscache_key ;
   struct fscache_cookie *fscache ;
   u32 pnfs_blksize ;
   u32 attr_bitmask[3U] ;
   u32 attr_bitmask_nl[3U] ;
   u32 cache_consistency_bitmask[3U] ;
   u32 acl_bitmask ;
   u32 fh_expire_type ;
   struct pnfs_layoutdriver_type *pnfs_curr_ld ;
   struct rpc_wait_queue roc_rpcwaitq ;
   void *pnfs_ld_data ;
   struct rb_root state_owners ;
   struct ida openowner_id ;
   struct ida lockowner_id ;
   struct list_head state_owners_lru ;
   struct list_head layouts ;
   struct list_head delegations ;
   unsigned long mig_gen ;
   unsigned long mig_status ;
   void (*destroy)(struct nfs_server * ) ;
   atomic_t active ;
   struct __kernel_sockaddr_storage mountd_address ;
   size_t mountd_addrlen ;
   u32 mountd_version ;
   unsigned short mountd_port ;
   unsigned short mountd_protocol ;
};
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mempool.h"
struct nfs_access_entry {
   struct rb_node rb_node ;
   struct list_head lru ;
   unsigned long jiffies ;
   struct rpc_cred *cred ;
   int mask ;
};
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
struct nfs_lockowner {
   fl_owner_t l_owner ;
   pid_t l_pid ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
struct nfs_io_counter {
   unsigned long flags ;
   atomic_t io_count ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
struct nfs_lock_context {
   atomic_t count ;
   struct list_head list ;
   struct nfs_open_context *open_context ;
   struct nfs_lockowner lockowner ;
   struct nfs_io_counter io_count ;
};
#line 75
struct nfs4_state;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
struct nfs_open_context {
   struct nfs_lock_context lock_context ;
   struct dentry *dentry ;
   struct rpc_cred *cred ;
   struct nfs4_state *state ;
   fmode_t mode ;
   unsigned long flags ;
   int error ;
   struct list_head list ;
   struct nfs4_threshold *mdsthreshold ;
};
#line 102
struct nfs_delegation;
#line 103
struct nfs4_cached_acl;
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
struct nfs_inode {
   __u64 fileid ;
   struct nfs_fh fh ;
   unsigned long flags ;
   unsigned long cache_validity ;
   unsigned long read_cache_jiffies ;
   unsigned long attrtimeo ;
   unsigned long attrtimeo_timestamp ;
   unsigned long attr_gencount ;
   unsigned long cache_change_attribute ;
   struct rb_root access_cache ;
   struct list_head access_cache_entry_lru ;
   struct list_head access_cache_inode_lru ;
   __be32 cookieverf[2U] ;
   unsigned long npages ;
   struct nfs_mds_commit_info commit_info ;
   struct list_head open_files ;
   atomic_t silly_count ;
   struct hlist_head silly_list ;
   wait_queue_head_t waitqueue ;
   struct nfs4_cached_acl *nfs4_acl ;
   struct list_head open_states ;
   struct nfs_delegation *delegation ;
   fmode_t delegation_state ;
   struct rw_semaphore rwsem ;
   struct pnfs_layout_hdr *layout ;
   __u64 write_io ;
   __u64 read_io ;
   struct fscache_cookie *fscache ;
   struct inode vfs_inode ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockd/xdr.h"
struct svc_rqst;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockd/bind.h"
struct nlmclnt_initdata {
   char const   *hostname ;
   struct sockaddr  const  *address ;
   size_t addrlen ;
   unsigned short protocol ;
   u32 nfs_version ;
   int noresvport ;
   struct net *net ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockd/bind.h"
struct vfsmount {
   struct dentry *mnt_root ;
   struct super_block *mnt_sb ;
   int mnt_flags ;
};
#line 7 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/statfs.h"
struct kstatfs {
   long f_type ;
   long f_bsize ;
   u64 f_blocks ;
   u64 f_bfree ;
   u64 f_bavail ;
   u64 f_files ;
   u64 f_ffree ;
   __kernel_fsid_t f_fsid ;
   long f_namelen ;
   long f_frsize ;
   long f_flags ;
   long f_spare[4U] ;
};
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/statfs.h"
struct cache_head {
   struct cache_head *next ;
   time_t expiry_time ;
   time_t last_refresh ;
   struct kref ref ;
   unsigned long flags ;
};
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/cache.h"
struct cache_detail_procfs {
   struct proc_dir_entry *proc_ent ;
   struct proc_dir_entry *flush_ent ;
   struct proc_dir_entry *channel_ent ;
   struct proc_dir_entry *content_ent ;
};
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/cache.h"
struct cache_detail_pipefs {
   struct dentry *dir ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/cache.h"
union __anonunion_u_292 {
   struct cache_detail_procfs procfs ;
   struct cache_detail_pipefs pipefs ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/cache.h"
struct cache_detail {
   struct module *owner ;
   int hash_size ;
   struct cache_head **hash_table ;
   rwlock_t hash_lock ;
   atomic_t inuse ;
   char *name ;
   void (*cache_put)(struct kref * ) ;
   int (*cache_upcall)(struct cache_detail * , struct cache_head * ) ;
   void (*cache_request)(struct cache_detail * , struct cache_head * , char ** , int * ) ;
   int (*cache_parse)(struct cache_detail * , char * , int  ) ;
   int (*cache_show)(struct seq_file * , struct cache_detail * , struct cache_head * ) ;
   void (*warn_no_listener)(struct cache_detail * , int  ) ;
   struct cache_head *(*alloc)(void) ;
   int (*match)(struct cache_head * , struct cache_head * ) ;
   void (*init)(struct cache_head * , struct cache_head * ) ;
   void (*update)(struct cache_head * , struct cache_head * ) ;
   time_t flush_time ;
   struct list_head others ;
   time_t nextcheck ;
   int entries ;
   struct list_head queue ;
   atomic_t readers ;
   time_t last_close ;
   time_t last_warn ;
   union __anonunion_u_292 u ;
   struct net *net ;
};
#line 127
struct cache_deferred_req;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/cache.h"
struct cache_req {
   struct cache_deferred_req *(*defer)(struct cache_req * ) ;
   int thread_wait ;
};
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/cache.h"
struct cache_deferred_req {
   struct hlist_node hash ;
   struct list_head recent ;
   struct cache_head *item ;
   void *owner ;
   void (*revisit)(struct cache_deferred_req * , int  ) ;
};
#line 297 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/cache.h"
struct svc_cred {
   kuid_t cr_uid ;
   kgid_t cr_gid ;
   struct group_info *cr_group_info ;
   u32 cr_flavor ;
   char *cr_principal ;
   struct gss_api_mech *cr_gss_mech ;
};
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svcauth.h"
struct auth_ops;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svcauth.h"
struct auth_domain {
   struct kref ref ;
   struct hlist_node hash ;
   char *name ;
   struct auth_ops *flavour ;
};
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svcauth.h"
struct auth_ops {
   char *name ;
   struct module *owner ;
   int flavour ;
   int (*accept)(struct svc_rqst * , __be32 * ) ;
   int (*release)(struct svc_rqst * ) ;
   void (*domain_release)(struct auth_domain * ) ;
   int (*set_client)(struct svc_rqst * ) ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_pool_stats {
   unsigned long packets ;
   unsigned long sockets_queued ;
   unsigned long threads_woken ;
   unsigned long threads_timedout ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_pool {
   unsigned int sp_id ;
   spinlock_t sp_lock ;
   struct list_head sp_threads ;
   struct list_head sp_sockets ;
   unsigned int sp_nrthreads ;
   struct list_head sp_all_threads ;
   struct svc_pool_stats sp_stats ;
   int sp_task_pending ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_serv {
   struct svc_program *sv_program ;
   struct svc_stat *sv_stats ;
   spinlock_t sv_lock ;
   unsigned int sv_nrthreads ;
   unsigned int sv_maxconn ;
   unsigned int sv_max_payload ;
   unsigned int sv_max_mesg ;
   unsigned int sv_xdrsize ;
   struct list_head sv_permsocks ;
   struct list_head sv_tempsocks ;
   int sv_tmpcnt ;
   struct timer_list sv_temptimer ;
   char *sv_name ;
   unsigned int sv_nrpools ;
   struct svc_pool *sv_pools ;
   void (*sv_shutdown)(struct svc_serv * , struct net * ) ;
   struct module *sv_module ;
   int (*sv_function)(void * ) ;
   struct list_head sv_cb_list ;
   spinlock_t sv_cb_lock ;
   wait_queue_head_t sv_cb_waitq ;
   struct svc_xprt *sv_bc_xprt ;
};
#line 216
struct svc_procedure;
#line 216
struct svc_deferred_req;
#line 216
struct svc_cacherep;
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_rqst {
   struct list_head rq_list ;
   struct list_head rq_all ;
   struct svc_xprt *rq_xprt ;
   struct __kernel_sockaddr_storage rq_addr ;
   size_t rq_addrlen ;
   struct __kernel_sockaddr_storage rq_daddr ;
   size_t rq_daddrlen ;
   struct svc_serv *rq_server ;
   struct svc_pool *rq_pool ;
   struct svc_procedure *rq_procinfo ;
   struct auth_ops *rq_authop ;
   struct svc_cred rq_cred ;
   void *rq_xprt_ctxt ;
   struct svc_deferred_req *rq_deferred ;
   int rq_usedeferral ;
   size_t rq_xprt_hlen ;
   struct xdr_buf rq_arg ;
   struct xdr_buf rq_res ;
   struct page *rq_pages[259U] ;
   struct page **rq_respages ;
   struct page **rq_next_page ;
   struct page **rq_page_end ;
   struct kvec rq_vec[259U] ;
   __be32 rq_xid ;
   u32 rq_prog ;
   u32 rq_vers ;
   u32 rq_proc ;
   u32 rq_prot ;
   unsigned short rq_secure : 1 ;
   unsigned short rq_local : 1 ;
   void *rq_argp ;
   void *rq_resp ;
   void *rq_auth_data ;
   int rq_auth_slack ;
   int rq_reserved ;
   struct cache_req rq_chandle ;
   bool rq_dropme ;
   struct auth_domain *rq_client ;
   struct auth_domain *rq_gssclient ;
   int rq_cachetype ;
   struct svc_cacherep *rq_cacherep ;
   int rq_splice_ok ;
   wait_queue_head_t rq_wait ;
   struct task_struct *rq_task ;
};
#line 355 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_deferred_req {
   u32 prot ;
   struct svc_xprt *xprt ;
   struct __kernel_sockaddr_storage addr ;
   size_t addrlen ;
   struct __kernel_sockaddr_storage daddr ;
   size_t daddrlen ;
   struct cache_deferred_req handle ;
   size_t xprt_hlen ;
   int argslen ;
   __be32 args[0U] ;
};
#line 368
struct svc_version;
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_program {
   struct svc_program *pg_next ;
   u32 pg_prog ;
   unsigned int pg_lovers ;
   unsigned int pg_hivers ;
   unsigned int pg_nvers ;
   struct svc_version **pg_vers ;
   char *pg_name ;
   char *pg_class ;
   struct svc_stat *pg_stats ;
   int (*pg_authenticate)(struct svc_rqst * ) ;
};
#line 384 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_version {
   u32 vs_vers ;
   u32 vs_nproc ;
   struct svc_procedure *vs_proc ;
   u32 vs_xdrsize ;
   unsigned int vs_hidden : 1 ;
   unsigned int vs_rpcb_optnl : 1 ;
   int (*vs_dispatch)(struct svc_rqst * , __be32 * ) ;
};
#line 410 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_procedure {
   __be32 (*pc_func)(struct svc_rqst * , void * , void * ) ;
   int (*pc_decode)(void * , __be32 * , void * ) ;
   int (*pc_encode)(void * , __be32 * , void * ) ;
   int (*pc_release)(void * , __be32 * , void * ) ;
   unsigned int pc_argsize ;
   unsigned int pc_ressize ;
   unsigned int pc_count ;
   unsigned int pc_cachetype ;
   unsigned int pc_xdrressize ;
};
#line 464 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc.h"
struct svc_xprt_ops {
   struct svc_xprt *(*xpo_create)(struct svc_serv * , struct net * , struct sockaddr * ,
                                  int  , int  ) ;
   struct svc_xprt *(*xpo_accept)(struct svc_xprt * ) ;
   int (*xpo_has_wspace)(struct svc_xprt * ) ;
   int (*xpo_recvfrom)(struct svc_rqst * ) ;
   void (*xpo_prep_reply_hdr)(struct svc_rqst * ) ;
   int (*xpo_sendto)(struct svc_rqst * ) ;
   void (*xpo_release_rqst)(struct svc_rqst * ) ;
   void (*xpo_detach)(struct svc_xprt * ) ;
   void (*xpo_free)(struct svc_xprt * ) ;
   int (*xpo_secure_port)(struct svc_rqst * ) ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc_xprt.h"
struct svc_xprt_class {
   char const   *xcl_name ;
   struct module *xcl_owner ;
   struct svc_xprt_ops *xcl_ops ;
   struct list_head xcl_list ;
   u32 xcl_max_payload ;
   int xcl_ident ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/svc_xprt.h"
struct svc_xprt {
   struct svc_xprt_class *xpt_class ;
   struct svc_xprt_ops *xpt_ops ;
   struct kref xpt_ref ;
   struct list_head xpt_list ;
   struct list_head xpt_ready ;
   unsigned long xpt_flags ;
   struct svc_serv *xpt_server ;
   atomic_t xpt_reserved ;
   struct mutex xpt_mutex ;
   spinlock_t xpt_lock ;
   void *xpt_auth_cache ;
   struct list_head xpt_deferred ;
   struct __kernel_sockaddr_storage xpt_local ;
   size_t xpt_locallen ;
   struct __kernel_sockaddr_storage xpt_remote ;
   size_t xpt_remotelen ;
   struct rpc_wait_queue xpt_bc_pending ;
   struct list_head xpt_users ;
   struct net *xpt_net ;
   struct rpc_xprt *xpt_bc_xprt ;
};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/bc_xprt.h"
struct pidmap {
   atomic_t nr_free ;
   void *page ;
};
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pid_namespace.h"
struct bsd_acct_struct;
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pid_namespace.h"
struct pid_namespace {
   struct kref kref ;
   struct pidmap pidmap[128U] ;
   struct callback_head rcu ;
   int last_pid ;
   unsigned int nr_hashed ;
   struct task_struct *child_reaper ;
   struct kmem_cache *pid_cachep ;
   unsigned int level ;
   struct pid_namespace *parent ;
   struct vfsmount *proc_mnt ;
   struct dentry *proc_self ;
   struct bsd_acct_struct *bacct ;
   struct user_namespace *user_ns ;
   struct work_struct proc_work ;
   kgid_t pid_gid ;
   int hide_pid ;
   int reboot ;
   unsigned int proc_inum ;
};
#line 116
struct nfs4_state_recovery_ops;
#line 116
struct nfs4_state_maintenance_ops;
#line 116
struct nfs4_mig_recovery_ops;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pid_namespace.h"
struct nfs4_minor_version_ops {
   u32 minor_version ;
   unsigned int init_caps ;
   int (*init_client)(struct nfs_client * ) ;
   void (*shutdown_client)(struct nfs_client * ) ;
   bool (*match_stateid)(nfs4_stateid const   * , nfs4_stateid const   * ) ;
   int (*find_root_sec)(struct nfs_server * , struct nfs_fh * , struct nfs_fsinfo * ) ;
   int (*free_lock_state)(struct nfs_server * , struct nfs4_lock_state * ) ;
   struct rpc_call_ops  const  *call_sync_ops ;
   struct nfs4_state_recovery_ops  const  *reboot_recovery_ops ;
   struct nfs4_state_recovery_ops  const  *nograce_recovery_ops ;
   struct nfs4_state_maintenance_ops  const  *state_renewal_ops ;
   struct nfs4_mig_recovery_ops  const  *mig_recovery_ops ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct nfs_seqid_counter {
   ktime_t create_time ;
   int owner_id ;
   int flags ;
   u32 counter ;
   spinlock_t lock ;
   struct list_head list ;
   struct rpc_wait_queue wait ;
};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct nfs4_state_owner {
   struct nfs_server *so_server ;
   struct list_head so_lru ;
   unsigned long so_expires ;
   struct rb_node so_server_node ;
   struct rpc_cred *so_cred ;
   spinlock_t so_lock ;
   atomic_t so_count ;
   unsigned long so_flags ;
   struct list_head so_states ;
   struct nfs_seqid_counter so_seqid ;
   seqcount_t so_reclaim_seqcount ;
   struct mutex so_delegreturn_mutex ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
union __anonunion_lo_u_293 {
   fl_owner_t posix_owner ;
   pid_t flock_owner ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct nfs4_lock_owner {
   unsigned int lo_type ;
   union __anonunion_lo_u_293 lo_u ;
};
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct nfs4_lock_state {
   struct list_head ls_locks ;
   struct nfs4_state *ls_state ;
   unsigned long ls_flags ;
   struct nfs_seqid_counter ls_seqid ;
   nfs4_stateid ls_stateid ;
   atomic_t ls_count ;
   struct nfs4_lock_owner ls_owner ;
};
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct nfs4_state {
   struct list_head open_states ;
   struct list_head inode_states ;
   struct list_head lock_states ;
   struct nfs4_state_owner *owner ;
   struct inode *inode ;
   unsigned long flags ;
   spinlock_t state_lock ;
   seqlock_t seqlock ;
   nfs4_stateid stateid ;
   nfs4_stateid open_stateid ;
   unsigned int n_rdonly ;
   unsigned int n_wronly ;
   unsigned int n_rdwr ;
   fmode_t state ;
   atomic_t count ;
};
#line 199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct nfs4_state_recovery_ops {
   int owner_flag_bit ;
   int state_flag_bit ;
   int (*recover_open)(struct nfs4_state_owner * , struct nfs4_state * ) ;
   int (*recover_lock)(struct nfs4_state * , struct file_lock * ) ;
   int (*establish_clid)(struct nfs_client * , struct rpc_cred * ) ;
   int (*reclaim_complete)(struct nfs_client * , struct rpc_cred * ) ;
   int (*detect_trunking)(struct nfs_client * , struct nfs_client ** , struct rpc_cred * ) ;
};
#line 209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct nfs4_state_maintenance_ops {
   int (*sched_state_renewal)(struct nfs_client * , struct rpc_cred * , unsigned int  ) ;
   struct rpc_cred *(*get_state_renewal_cred_locked)(struct nfs_client * ) ;
   int (*renew_lease)(struct nfs_client * , struct rpc_cred * ) ;
};
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct nfs4_mig_recovery_ops {
   int (*get_locations)(struct inode * , struct nfs4_fs_locations * , struct page * ,
                        struct rpc_cred * ) ;
   int (*fsid_present)(struct inode * , struct rpc_cred * ) ;
};
#line 213 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/callback.h"
struct nfs_delegation {
   struct list_head super_list ;
   struct rpc_cred *cred ;
   struct inode *inode ;
   nfs4_stateid stateid ;
   fmode_t type ;
   loff_t maxsize ;
   __u64 change_attr ;
   unsigned long flags ;
   spinlock_t lock ;
   struct callback_head rcu ;
};
#line 122 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/delegation.h"
struct nfs_iostats {
   unsigned long long bytes[8U] ;
   unsigned long long fscache[5U] ;
   unsigned long events[27U] ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct nfs_clone_mount {
   struct super_block  const  *sb ;
   struct dentry  const  *dentry ;
   struct nfs_fh *fh ;
   struct nfs_fattr *fattr ;
   char *hostname ;
   char *mnt_path ;
   struct sockaddr *addr ;
   size_t addrlen ;
   rpc_authflavor_t authflavor ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct nfs_client_initdata {
   unsigned long init_flags ;
   char const   *hostname ;
   struct sockaddr  const  *addr ;
   size_t addrlen ;
   struct nfs_subversion *nfs_mod ;
   int proto ;
   u32 minorversion ;
   struct net *net ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct __anonstruct_mount_server_296 {
   struct __kernel_sockaddr_storage address ;
   size_t addrlen ;
   char *hostname ;
   u32 version ;
   int port ;
   unsigned short protocol ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct __anonstruct_nfs_server_297 {
   struct __kernel_sockaddr_storage address ;
   size_t addrlen ;
   char *hostname ;
   char *export_path ;
   int port ;
   unsigned short protocol ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct nfs_parsed_mount_data {
   int flags ;
   unsigned int rsize ;
   unsigned int wsize ;
   unsigned int timeo ;
   unsigned int retrans ;
   unsigned int acregmin ;
   unsigned int acregmax ;
   unsigned int acdirmin ;
   unsigned int acdirmax ;
   unsigned int namlen ;
   unsigned int options ;
   unsigned int bsize ;
   struct nfs_auth_info auth_info ;
   rpc_authflavor_t selected_flavor ;
   char *client_address ;
   unsigned int version ;
   unsigned int minorversion ;
   char *fscache_uniq ;
   bool need_mount ;
   struct __anonstruct_mount_server_296 mount_server ;
   struct __anonstruct_nfs_server_297 nfs_server ;
   struct security_mnt_opts lsm_opts ;
   struct net *net ;
};
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct nfs_mount_info {
   void (*fill_super)(struct super_block * , struct nfs_mount_info * ) ;
   int (*set_security)(struct super_block * , struct dentry * , struct nfs_mount_info * ) ;
   struct nfs_parsed_mount_data *parsed ;
   struct nfs_clone_mount *cloned ;
   struct nfs_fh *mntfh ;
};
#line 240
struct nfs_pageio_ops;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagevec.h"
struct fscache_cache_tag;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
enum fscache_checkaux {
    FSCACHE_CHECKAUX_OKAY = 0,
    FSCACHE_CHECKAUX_NEEDS_UPDATE = 1,
    FSCACHE_CHECKAUX_OBSOLETE = 2
} ;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
struct fscache_cookie_def {
   char name[16U] ;
   uint8_t type ;
   struct fscache_cache_tag *(*select_cache)(void const   * , void const   * ) ;
   uint16_t (*get_key)(void const   * , void * , uint16_t  ) ;
   void (*get_attr)(void const   * , uint64_t * ) ;
   uint16_t (*get_aux)(void const   * , void * , uint16_t  ) ;
   enum fscache_checkaux (*check_aux)(void * , void const   * , uint16_t  ) ;
   void (*get_context)(void * , void * ) ;
   void (*put_context)(void * , void * ) ;
   void (*mark_page_cached)(void * , struct address_space * , struct page * ) ;
   void (*now_uncached)(void * ) ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
struct fscache_cookie {
   atomic_t usage ;
   atomic_t n_children ;
   atomic_t n_active ;
   spinlock_t lock ;
   spinlock_t stores_lock ;
   struct hlist_head backing_objects ;
   struct fscache_cookie_def  const  *def ;
   struct fscache_cookie *parent ;
   void *netfs_data ;
   struct radix_tree_root stores ;
   unsigned long flags ;
};
#line 831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
struct __anonstruct_super_299 {
   unsigned long s_flags ;
};
#line 831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
struct __anonstruct_nfs_server_300 {
   struct nfs_fsid fsid ;
   int flags ;
   unsigned int rsize ;
   unsigned int wsize ;
   unsigned int acregmin ;
   unsigned int acregmax ;
   unsigned int acdirmin ;
   unsigned int acdirmax ;
};
#line 831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
struct __anonstruct_rpc_auth_301 {
   rpc_authflavor_t au_flavor ;
};
#line 831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
struct __anonstruct_key_298 {
   struct __anonstruct_super_299 super ;
   struct __anonstruct_nfs_server_300 nfs_server ;
   struct __anonstruct_rpc_auth_301 rpc_auth ;
   u8 uniq_len ;
   char uniquifier[0U] ;
};
#line 831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
struct nfs_fscache_key {
   struct rb_node node ;
   struct nfs_client *nfs_client ;
   struct __anonstruct_key_298 key ;
};
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
struct nfs_page {
   struct list_head wb_list ;
   struct page *wb_page ;
   struct nfs_open_context *wb_context ;
   struct nfs_lock_context *wb_lock_context ;
   unsigned long wb_index ;
   unsigned int wb_offset ;
   unsigned int wb_pgbase ;
   unsigned int wb_bytes ;
   struct kref wb_kref ;
   unsigned long wb_flags ;
   struct nfs_write_verifier wb_verf ;
   struct nfs_page *wb_this_page ;
   struct nfs_page *wb_head ;
};
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
struct nfs_pageio_ops {
   void (*pg_init)(struct nfs_pageio_descriptor * , struct nfs_page * ) ;
   size_t (*pg_test)(struct nfs_pageio_descriptor * , struct nfs_page * , struct nfs_page * ) ;
   int (*pg_doio)(struct nfs_pageio_descriptor * ) ;
};
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
struct nfs_rw_ops {
   fmode_t const   rw_mode ;
   struct nfs_pgio_header *(*rw_alloc_header)(void) ;
   void (*rw_free_header)(struct nfs_pgio_header * ) ;
   void (*rw_release)(struct nfs_pgio_header * ) ;
   int (*rw_done)(struct rpc_task * , struct nfs_pgio_header * , struct inode * ) ;
   void (*rw_result)(struct rpc_task * , struct nfs_pgio_header * ) ;
   void (*rw_initiate)(struct nfs_pgio_header * , struct rpc_message * , struct rpc_task_setup * ,
                       int  ) ;
};
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
struct nfs_pageio_descriptor {
   struct list_head pg_list ;
   unsigned long pg_bytes_written ;
   size_t pg_count ;
   size_t pg_bsize ;
   unsigned int pg_base ;
   unsigned char pg_moreio : 1 ;
   unsigned char pg_recoalesce : 1 ;
   struct inode *pg_inode ;
   struct nfs_pageio_ops  const  *pg_ops ;
   struct nfs_rw_ops  const  *pg_rw_ops ;
   int pg_ioflags ;
   int pg_error ;
   struct rpc_call_ops  const  *pg_rpc_callops ;
   struct nfs_pgio_completion_ops  const  *pg_completion_ops ;
   struct pnfs_layout_segment *pg_lseg ;
   struct nfs_direct_req *pg_dreq ;
   void *pg_layout_private ;
};
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
struct pnfs_layout_segment {
   struct list_head pls_list ;
   struct list_head pls_lc_list ;
   struct pnfs_layout_range pls_range ;
   atomic_t pls_refcount ;
   unsigned long pls_flags ;
   struct pnfs_layout_hdr *pls_layout ;
   struct work_struct pls_work ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
enum pnfs_try_status {
    PNFS_ATTEMPTED = 0,
    PNFS_NOT_ATTEMPTED = 1
} ;
#line 70
struct nfs4_deviceid_node;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
struct pnfs_layoutdriver_type {
   struct list_head pnfs_tblid ;
   u32 const   id ;
   char const   *name ;
   struct module *owner ;
   unsigned int flags ;
   int (*set_layoutdriver)(struct nfs_server * , struct nfs_fh  const  * ) ;
   int (*clear_layoutdriver)(struct nfs_server * ) ;
   struct pnfs_layout_hdr *(*alloc_layout_hdr)(struct inode * , gfp_t  ) ;
   void (*free_layout_hdr)(struct pnfs_layout_hdr * ) ;
   struct pnfs_layout_segment *(*alloc_lseg)(struct pnfs_layout_hdr * , struct nfs4_layoutget_res * ,
                                             gfp_t  ) ;
   void (*free_lseg)(struct pnfs_layout_segment * ) ;
   struct nfs_pageio_ops  const  *pg_read_ops ;
   struct nfs_pageio_ops  const  *pg_write_ops ;
   struct pnfs_ds_commit_info *(*get_ds_info)(struct inode * ) ;
   void (*mark_request_commit)(struct nfs_page * , struct pnfs_layout_segment * ,
                               struct nfs_commit_info * ) ;
   void (*clear_request_commit)(struct nfs_page * , struct nfs_commit_info * ) ;
   int (*scan_commit_lists)(struct nfs_commit_info * , int  ) ;
   void (*recover_commit_reqs)(struct list_head * , struct nfs_commit_info * ) ;
   int (*commit_pagelist)(struct inode * , struct list_head * , int  , struct nfs_commit_info * ) ;
   enum pnfs_try_status (*read_pagelist)(struct nfs_pgio_header * ) ;
   enum pnfs_try_status (*write_pagelist)(struct nfs_pgio_header * , int  ) ;
   void (*free_deviceid_node)(struct nfs4_deviceid_node * ) ;
   void (*encode_layoutreturn)(struct pnfs_layout_hdr * , struct xdr_stream * , struct nfs4_layoutreturn_args  const  * ) ;
   void (*cleanup_layoutcommit)(struct nfs4_layoutcommit_data * ) ;
   void (*encode_layoutcommit)(struct pnfs_layout_hdr * , struct xdr_stream * , struct nfs4_layoutcommit_args  const  * ) ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
struct pnfs_layout_hdr {
   atomic_t plh_refcount ;
   struct list_head plh_layouts ;
   struct list_head plh_bulk_destroy ;
   struct list_head plh_segs ;
   nfs4_stateid plh_stateid ;
   atomic_t plh_outstanding ;
   unsigned long plh_block_lgets ;
   u32 plh_barrier ;
   unsigned long plh_retry_timestamp ;
   unsigned long plh_flags ;
   loff_t plh_lwb ;
   struct rpc_cred *plh_lc_cred ;
   struct inode *plh_inode ;
};
#line 246 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
struct nfs4_deviceid_node {
   struct hlist_node node ;
   struct hlist_node tmpnode ;
   struct pnfs_layoutdriver_type  const  *ld ;
   struct nfs_client  const  *nfs_client ;
   unsigned long flags ;
   unsigned long timestamp_unavailable ;
   struct nfs4_deviceid deviceid ;
   atomic_t ref ;
};
#line 391 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
struct nfs_subversion {
   struct module *owner ;
   struct file_system_type *nfs_fs ;
   struct rpc_version  const  *rpc_vers ;
   struct nfs_rpc_ops  const  *rpc_ops ;
   struct super_operations  const  *sops ;
   struct xattr_handler  const  **xattr ;
   struct list_head list ;
};
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs.h"
struct net_generic {
   unsigned int len ;
   struct callback_head rcu ;
   void *ptr[0U] ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/generic.h"
struct bl_dev_msg {
   int32_t status ;
   uint32_t major ;
   uint32_t minor ;
};
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/netns.h"
struct nfs_net {
   struct cache_detail *nfs_dns_resolve ;
   struct rpc_pipe *bl_device_pipe ;
   struct bl_dev_msg bl_mount_reply ;
   wait_queue_head_t bl_wq ;
   struct list_head nfs_client_list ;
   struct list_head nfs_volume_list ;
   struct idr cb_ident_idr ;
   unsigned short nfs_callback_tcpport ;
   unsigned short nfs_callback_tcpport6 ;
   int cb_users[3U] ;
   spinlock_t nfs_client_lock ;
   struct timespec boot_time ;
};
#line 227 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
struct ldv_struct_traverse_kernel_items_scenario_6 {
   struct seq_file *arg0 ;
   struct seq_operations *arg1 ;
   int signal_pending ;
};
#line 2455 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
typedef int ldv_func_ret_type___0;
#line 394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/pgtable_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/jump_label.h"
struct static_key_mod;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
typedef int filler_t(void * , struct page * );
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
struct nfs_open_dir_context {
   struct list_head list ;
   struct rpc_cred *cred ;
   unsigned long attr_gencount ;
   __u64 dir_cookie ;
   __u64 dup_cookie ;
   signed char duped ;
};
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagevec.h"
struct nameidata {
   struct path path ;
   struct qstr last ;
   struct path root ;
   struct inode *inode ;
   unsigned int flags ;
   unsigned int seq ;
   unsigned int m_seq ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[9U] ;
};
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
struct reclaim_state {
   unsigned long reclaimed_slab ;
};
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
struct swap_extent {
   struct list_head list ;
   unsigned long start_page ;
   unsigned long nr_pages ;
   sector_t start_block ;
};
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
struct swap_cluster_info {
   unsigned int data : 24 ;
   unsigned int flags : 8 ;
};
#line 198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
struct percpu_cluster {
   struct swap_cluster_info index ;
   unsigned int next ;
};
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
struct swap_info_struct {
   unsigned long flags ;
   short prio ;
   struct plist_node list ;
   struct plist_node avail_list ;
   signed char type ;
   unsigned int max ;
   unsigned char *swap_map ;
   struct swap_cluster_info *cluster_info ;
   struct swap_cluster_info free_cluster_head ;
   struct swap_cluster_info free_cluster_tail ;
   unsigned int lowest_bit ;
   unsigned int highest_bit ;
   unsigned int pages ;
   unsigned int inuse_pages ;
   unsigned int cluster_next ;
   unsigned int cluster_nr ;
   struct percpu_cluster *percpu_cluster ;
   struct swap_extent *curr_swap_extent ;
   struct swap_extent first_swap_extent ;
   struct block_device *bdev ;
   struct file *swap_file ;
   unsigned int old_block_size ;
   unsigned long *frontswap_map ;
   atomic_t frontswap_pages ;
   spinlock_t lock ;
   struct work_struct discard_work ;
   struct swap_cluster_info discard_cluster_head ;
   struct swap_cluster_info discard_cluster_tail ;
};
#line 459 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t (*list)(struct dentry * , char * , size_t  , char const   * , size_t  ,
                  int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t  , int  ,
              int  ) ;
};
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/delegation.h"
enum nfs_stat_eventcounters {
    NFSIOS_INODEREVALIDATE = 0,
    NFSIOS_DENTRYREVALIDATE = 1,
    NFSIOS_DATAINVALIDATE = 2,
    NFSIOS_ATTRINVALIDATE = 3,
    NFSIOS_VFSOPEN = 4,
    NFSIOS_VFSLOOKUP = 5,
    NFSIOS_VFSACCESS = 6,
    NFSIOS_VFSUPDATEPAGE = 7,
    NFSIOS_VFSREADPAGE = 8,
    NFSIOS_VFSREADPAGES = 9,
    NFSIOS_VFSWRITEPAGE = 10,
    NFSIOS_VFSWRITEPAGES = 11,
    NFSIOS_VFSGETDENTS = 12,
    NFSIOS_VFSSETATTR = 13,
    NFSIOS_VFSFLUSH = 14,
    NFSIOS_VFSFSYNC = 15,
    NFSIOS_VFSLOCK = 16,
    NFSIOS_VFSRELEASE = 17,
    NFSIOS_CONGESTIONWAIT = 18,
    NFSIOS_SETATTRTRUNC = 19,
    NFSIOS_EXTENDWRITE = 20,
    NFSIOS_SILLYRENAME = 21,
    NFSIOS_SHORTREAD = 22,
    NFSIOS_SHORTWRITE = 23,
    NFSIOS_DELAY = 24,
    NFSIOS_PNFS_READ = 25,
    NFSIOS_PNFS_WRITE = 26,
    __NFSIOS_COUNTSMAX = 27
} ;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long pao_T_____41;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long pao_T_____42;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long pao_T_____43;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long pao_T_____44;
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct nfs_cache_array_entry {
   u64 cookie ;
   u64 ino ;
   struct qstr string ;
   unsigned char d_type ;
};
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct nfs_cache_array {
   int size ;
   int eof_index ;
   u64 last_cookie ;
   struct nfs_cache_array_entry array[0U] ;
};
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct __anonstruct_nfs_readdir_descriptor_t_302 {
   struct file *file ;
   struct page *page ;
   struct dir_context *ctx ;
   unsigned long page_index ;
   u64 *dir_cookie ;
   u64 last_cookie ;
   loff_t current_index ;
   int (*decode)(struct xdr_stream * , struct nfs_entry * , int  ) ;
   unsigned long timestamp ;
   unsigned long gencount ;
   unsigned int cache_entry_index ;
   unsigned int plus : 1 ;
   unsigned int eof : 1 ;
};
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
typedef struct __anonstruct_nfs_readdir_descriptor_t_302 nfs_readdir_descriptor_t;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
enum nfs_stat_bytecounters {
    NFSIOS_NORMALREADBYTES = 0,
    NFSIOS_NORMALWRITTENBYTES = 1,
    NFSIOS_DIRECTREADBYTES = 2,
    NFSIOS_DIRECTWRITTENBYTES = 3,
    NFSIOS_SERVERREADBYTES = 4,
    NFSIOS_SERVERWRITTENBYTES = 5,
    NFSIOS_READPAGES = 6,
    NFSIOS_WRITEPAGES = 7,
    __NFSIOS_BYTESMAX = 8
} ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long long pao_T_____45;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long long pao_T_____46;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long long pao_T_____47;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long long pao_T_____48;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_ino_t;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/types.h"
typedef __kernel_ino_t ino_t;
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/special_insns.h"
struct exec_domain;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/personality.h"
struct map_segment;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 617 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_25 {
   unsigned long seg ;
};
#line 617 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_25 mm_segment_t;
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mutex.h"
struct compat_timespec;
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mutex.h"
struct __anonstruct_futex_30 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mutex.h"
struct __anonstruct_nanosleep_31 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 180
struct pollfd;
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mutex.h"
struct __anonstruct_poll_32 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mutex.h"
union __anonunion____missing_field_name_29 {
   struct __anonstruct_futex_30 futex ;
   struct __anonstruct_nanosleep_31 nanosleep ;
   struct __anonstruct_poll_32 poll ;
};
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mutex.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_29 __annonCompField19 ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int saved_preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned int sig_on_uaccess_error : 1 ;
   unsigned int uaccess_err : 1 ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 193 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/compat.h"
typedef u32 compat_ulong_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 266 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/net_namespace.h"
struct pernet_operations {
   struct list_head list ;
   int (*init)(struct net * ) ;
   void (*exit)(struct net * ) ;
   void (*exit_batch)(struct list_head * ) ;
   int *id ;
   size_t size ;
};
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct nfs_find_desc {
   struct nfs_fh *fh ;
   struct nfs_fattr *fattr ;
};
#line 1957 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct ldv_struct_insmod_8 {
   int signal_pending ;
};
#line 1289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
typedef int ldv_func_ret_type___1;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs.h"
struct nfs2_fh {
   char data[32U] ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/nfs2.h"
struct nfs3_fh {
   unsigned short size ;
   unsigned char data[64U] ;
};
#line 383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs4.h"
struct nfs4_sessionid {
   unsigned char data[16U] ;
};
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
struct nfs4_channel_attrs {
   u32 max_rqst_sz ;
   u32 max_resp_sz ;
   u32 max_resp_sz_cached ;
   u32 max_ops ;
   u32 max_reqs ;
};
#line 593 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
struct nfs_mount_data {
   int version ;
   int fd ;
   struct nfs2_fh old_root ;
   int flags ;
   int rsize ;
   int wsize ;
   int timeo ;
   int retrans ;
   int acregmin ;
   int acregmax ;
   int acdirmin ;
   int acdirmax ;
   struct sockaddr_in addr ;
   char hostname[256U] ;
   int namlen ;
   unsigned int bsize ;
   struct nfs3_fh root ;
   int pseudoflavor ;
   char context[257U] ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/nfs_mount.h"
struct nfs_string {
   unsigned int len ;
   char const   *data ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/nfs4_mount.h"
struct nfs4_mount_data {
   int version ;
   int flags ;
   int rsize ;
   int wsize ;
   int timeo ;
   int retrans ;
   int acregmin ;
   int acregmax ;
   int acdirmin ;
   int acdirmax ;
   struct nfs_string client_addr ;
   struct nfs_string mnt_path ;
   struct nfs_string hostname ;
   unsigned int host_addrlen ;
   struct sockaddr *host_addr ;
   int proto ;
   int auth_flavourlen ;
   int *auth_flavours ;
};
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/statfs.h"
struct match_token {
   int token ;
   char const   *pattern ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/parser.h"
struct __anonstruct_substring_t_292 {
   char *from ;
   char *to ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/parser.h"
typedef struct __anonstruct_substring_t_292 substring_t;
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct nfs_mount_request {
   struct sockaddr *sap ;
   size_t salen ;
   char *hostname ;
   char *dirpath ;
   u32 version ;
   unsigned short protocol ;
   struct nfs_fh *fh ;
   int noresvport ;
   unsigned int *auth_flav_len ;
   rpc_authflavor_t *auth_flavs ;
   struct net *net ;
};
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
struct nfs4_slot {
   struct nfs4_slot_table *table ;
   struct nfs4_slot *next ;
   unsigned long generation ;
   u32 slot_nr ;
   u32 seq_nr ;
   unsigned int interrupted : 1 ;
};
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4session.h"
struct nfs4_slot_table {
   struct nfs4_session *session ;
   struct nfs4_slot *slots ;
   unsigned long used_slots[16U] ;
   spinlock_t slot_tbl_lock ;
   struct rpc_wait_queue slot_tbl_waitq ;
   u32 max_slots ;
   u32 max_slotid ;
   u32 highest_used_slotid ;
   u32 target_highest_slotid ;
   u32 server_highest_slotid ;
   s32 d_target_highest_slotid ;
   s32 d2_target_highest_slotid ;
   unsigned long generation ;
   struct completion complete ;
   unsigned long slot_tbl_state ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4session.h"
struct nfs4_session {
   struct nfs4_sessionid sess_id ;
   u32 flags ;
   unsigned long session_state ;
   u32 hash_alg ;
   u32 ssv_len ;
   struct nfs4_channel_attrs fc_attrs ;
   struct nfs4_slot_table fc_slot_table ;
   struct nfs4_channel_attrs bc_attrs ;
   struct nfs4_slot_table bc_slot_table ;
   struct nfs_client *clp ;
};
#line 500 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct __anonstruct_sec_flavours_304 {
   rpc_authflavor_t flavour ;
   char const   *str ;
};
#line 626 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct proc_nfs_info {
   int flag ;
   char const   *str ;
   char const   *nostr ;
};
#line 2395 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct nfs_sb_mountdata {
   struct nfs_server *server ;
   int mntflags ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
struct nfs_direct_req {
   struct kref kref ;
   struct nfs_open_context *ctx ;
   struct nfs_lock_context *l_ctx ;
   struct kiocb *iocb ;
   struct inode *inode ;
   atomic_t io_count ;
   spinlock_t lock ;
   ssize_t count ;
   ssize_t bytes_left ;
   ssize_t error ;
   struct completion completion ;
   struct nfs_mds_commit_info mds_cinfo ;
   struct pnfs_ds_commit_info ds_cinfo ;
   struct work_struct work ;
   int flags ;
   struct nfs_writeverf verf ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
struct wait_bit_key {
   void *flags ;
   int bit_nr ;
};
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
struct wait_bit_queue {
   struct wait_bit_key key ;
   wait_queue_t wait ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 320 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
struct nfs_readdesc {
   struct nfs_pageio_descriptor *pgio ;
   struct nfs_open_context *ctx ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mmzone.h"
enum zone_stat_item {
    NR_FREE_PAGES = 0,
    NR_ALLOC_BATCH = 1,
    NR_LRU_BASE = 2,
    NR_INACTIVE_ANON = 2,
    NR_ACTIVE_ANON = 3,
    NR_INACTIVE_FILE = 4,
    NR_ACTIVE_FILE = 5,
    NR_UNEVICTABLE = 6,
    NR_MLOCK = 7,
    NR_ANON_PAGES = 8,
    NR_FILE_MAPPED = 9,
    NR_FILE_PAGES = 10,
    NR_FILE_DIRTY = 11,
    NR_WRITEBACK = 12,
    NR_SLAB_RECLAIMABLE = 13,
    NR_SLAB_UNRECLAIMABLE = 14,
    NR_PAGETABLE = 15,
    NR_KERNEL_STACK = 16,
    NR_UNSTABLE_NFS = 17,
    NR_BOUNCE = 18,
    NR_VMSCAN_WRITE = 19,
    NR_VMSCAN_IMMEDIATE = 20,
    NR_WRITEBACK_TEMP = 21,
    NR_ISOLATED_ANON = 22,
    NR_ISOLATED_FILE = 23,
    NR_SHMEM = 24,
    NR_DIRTIED = 25,
    NR_WRITTEN = 26,
    NUMA_HIT = 27,
    NUMA_MISS = 28,
    NUMA_FOREIGN = 29,
    NUMA_INTERLEAVE_HIT = 30,
    NUMA_LOCAL = 31,
    NUMA_OTHER = 32,
    WORKINGSET_REFAULT = 33,
    WORKINGSET_ACTIVATE = 34,
    WORKINGSET_NODERECLAIM = 35,
    NR_ANON_TRANSPARENT_HUGEPAGES = 36,
    NR_FREE_CMA_PAGES = 37,
    NR_VM_ZONE_STAT_ITEMS = 38
} ;
#line 475 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
union __anonunion_v_197 {
   short preferred_node ;
   nodemask_t nodes ;
};
#line 475 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
union __anonunion_w_198 {
   nodemask_t cpuset_mems_allowed ;
   nodemask_t user_nodemask ;
};
#line 475 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
struct mempolicy {
   atomic_t refcnt ;
   unsigned short mode ;
   unsigned short flags ;
   union __anonunion_v_197 v ;
   union __anonunion_w_198 w ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
enum bdi_stat_item {
    BDI_RECLAIMABLE = 0,
    BDI_WRITEBACK = 1,
    BDI_DIRTIED = 2,
    BDI_WRITTEN = 3,
    NR_BDI_STAT_ITEMS = 4
} ;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
struct __anonstruct_mnt_errtbl_290 {
   u32 status ;
   int errno ;
};
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
struct __anonstruct_mnt3_errtbl_291 {
   u32 status ;
   int errno ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
struct mountres {
   int errno ;
   struct nfs_fh *fh ;
   unsigned int *auth_count ;
   rpc_authflavor_t *auth_flavors ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 667 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
enum nfs_stat_fscachecounters {
    NFSIOS_FSCACHE_PAGES_READ_OK = 0,
    NFSIOS_FSCACHE_PAGES_READ_FAIL = 1,
    NFSIOS_FSCACHE_PAGES_WRITTEN_OK = 2,
    NFSIOS_FSCACHE_PAGES_WRITTEN_FAIL = 3,
    NFSIOS_FSCACHE_PAGES_UNCACHED = 4,
    __NFSIOS_FSCACHEMAX = 5
} ;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long long pao_T_____49;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long long pao_T_____50;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long long pao_T_____51;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
typedef unsigned long long pao_T_____52;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagevec.h"
struct fscache_netfs;
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
struct fscache_netfs {
   uint32_t version ;
   char const   *name ;
   struct fscache_cookie *primary_index ;
   struct list_head link ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/nfs4_mount.h"
struct pagevec {
   unsigned long nr ;
   unsigned long cold ;
   struct page *pages[14U] ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
union __anonunion_addr_294 {
   struct in_addr ipv4_addr ;
   struct in6_addr ipv6_addr ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
struct nfs_server_key {
   uint16_t nfsversion ;
   uint16_t family ;
   uint16_t port ;
   union __anonunion_addr_294 addr[0U] ;
};
#line 148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
struct nfs_fscache_inode_auxdata {
   struct timespec mtime ;
   struct timespec ctime ;
   loff_t size ;
   u64 change_attr ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
};
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kthread.h"
struct kthread_work;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work * ) ;
   wait_queue_head_t done ;
   struct kthread_worker *worker ;
};
#line 351 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/scatterlist.h"
struct dma_chan;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spi/spi.h"
struct spi_master;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};
#line 155
struct spi_message;
#line 156
struct spi_transfer;
#line 213 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device * ) ;
   int (*transfer)(struct spi_device * , struct spi_message * ) ;
   void (*cleanup)(struct spi_device * ) ;
   bool (*can_dma)(struct spi_master * , struct spi_device * , struct spi_transfer * ) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master * ) ;
   int (*transfer_one_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_transfer_hardware)(struct spi_master * ) ;
   int (*prepare_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_message)(struct spi_master * , struct spi_message * ) ;
   void (*set_cs)(struct spi_device * , bool  ) ;
   int (*transfer_one)(struct spi_master * , struct spi_device * , struct spi_transfer * ) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};
#line 502 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spi/spi.h"
struct spi_transfer {
   void const   *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};
#line 626 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void * ) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/err.h"
long ldv_is_err_or_null(void const   *ptr ) ;
#line 29
void *ldv_err_ptr(long error ) ;
#line 30
long ldv_ptr_err(void const   *ptr ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size , gfp_t flags ) ;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/export.h"
extern struct module __this_module ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
  {
#line 62
  __list_add(new, head, head->next);
  }
#line 63
  return;
}
}
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
  {
#line 76
  __list_add(new, head->prev, head);
  }
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
#line 80
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 82
  return;
}
}
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
#line 117
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 119
  return;
}
}
#line 308 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 310
  return ((int )((unsigned long )*(addr + (unsigned long )(nr >> 6)) >> ((int )nr & 63)) & 1);
}
}
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 391 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/string_64.h"
extern void *memcpy(void * , void const   * , size_t  ) ;
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/string.h"
extern char *kstrdup(char const   * , gfp_t  ) ;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/paravirt.h"
extern int ( /* missing proto */  __builtin_unreachable)() ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static bool IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 43
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
  }
#line 43
  return (tmp != 0L);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 27
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 39
  v->counter = i;
#line 40
  return;
}
}
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 92
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 94
  return;
}
}
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 


  {
#line 118
  __asm__  volatile   ("":);
#line 118
  return (0);

#line 118
  return (1);
}
}
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 336
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 341
extern int lock_is_held(struct lockdep_map * ) ;
#line 529
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
extern int __ldv_atomic_dec_and_lock(spinlock_t * ) ;
#line 70
static int ldv___ldv_atomic_dec_and_lock_88(spinlock_t *ldv_func_arg1 ) ;
#line 177
void ldv_spin_lock_nfs_client_lock_of_nfs_net(void) ;
#line 178
void ldv_spin_unlock_nfs_client_lock_of_nfs_net(void) ;
#line 184
int ldv_atomic_dec_and_lock_nfs_client_lock_of_nfs_net(void) ;
#line 193
void ldv_spin_lock_nfs_version_lock(void) ;
#line 194
void ldv_spin_unlock_nfs_version_lock(void) ;
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.h"
int ldv_filter_err_code(int ret_val ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/common.h"
extern void __VERIFIER_assume(int  ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_int(void) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
void ldv_free(void *s ) ;
#line 28
void *ldv_xmalloc(size_t size ) ;
#line 41
void *ldv_xmalloc_unknown_size(size_t size ) ;
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mutex.h"
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 175
extern void mutex_unlock(struct mutex * ) ;
#line 8 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
extern int __preempt_count ;
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val ) 
{ 
  int pao_ID__ ;

  {
#line 75
  pao_ID__ = 0;
  {
#line 75
  if (4UL == 1UL) {
#line 75
    goto case_1;
  } else {

  }
#line 75
  if (4UL == 2UL) {
#line 75
    goto case_2;
  } else {

  }
#line 75
  if (4UL == 4UL) {
#line 75
    goto case_4;
  } else {

  }
#line 75
  if (4UL == 8UL) {
#line 75
    goto case_8;
  } else {

  }
#line 75
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val));
  }
#line 75
  goto ldv_6759;
  case_2: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
#line 75
  goto ldv_6759;
  case_4: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
#line 75
  goto ldv_6759;
  case_8: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val));
  }
#line 75
  goto ldv_6759;
  switch_default: /* CIL Label */ 
  {
#line 75
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6759: ;
#line 77
  return;
}
}
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val ) 
{ 
  int pao_ID__ ;

  {
#line 80
  pao_ID__ = 0;
  {
#line 80
  if (4UL == 1UL) {
#line 80
    goto case_1;
  } else {

  }
#line 80
  if (4UL == 2UL) {
#line 80
    goto case_2;
  } else {

  }
#line 80
  if (4UL == 4UL) {
#line 80
    goto case_4;
  } else {

  }
#line 80
  if (4UL == 8UL) {
#line 80
    goto case_8;
  } else {

  }
#line 80
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val));
  }
#line 80
  goto ldv_6771;
  case_2: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
#line 80
  goto ldv_6771;
  case_4: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
#line 80
  goto ldv_6771;
  case_8: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val));
  }
#line 80
  goto ldv_6771;
  switch_default: /* CIL Label */ 
  {
#line 80
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6771: ;
#line 82
  return;
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 290 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 292
  return (& lock->__annonCompField18.rlock);
}
}
#line 301 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
  {
#line 303
  _raw_spin_lock(& lock->__annonCompField18.rlock);
  }
#line 304
  return;
}
}
#line 381
__inline static void ldv_spin_lock_81(spinlock_t *lock ) ;
#line 385
__inline static void ldv_spin_lock_81(spinlock_t *lock ) ;
#line 389
__inline static void ldv_spin_lock_81(spinlock_t *lock ) ;
#line 393
__inline static void ldv_spin_lock_90(spinlock_t *lock ) ;
#line 397
__inline static void ldv_spin_lock_90(spinlock_t *lock ) ;
#line 401
__inline static void ldv_spin_lock_90(spinlock_t *lock ) ;
#line 405
__inline static void ldv_spin_lock_90(spinlock_t *lock ) ;
#line 409
__inline static void ldv_spin_lock_90(spinlock_t *lock ) ;
#line 349 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
  {
#line 351
  _raw_spin_unlock(& lock->__annonCompField18.rlock);
  }
#line 352
  return;
}
}
#line 429
__inline static void ldv_spin_unlock_82(spinlock_t *lock ) ;
#line 433
__inline static void ldv_spin_unlock_82(spinlock_t *lock ) ;
#line 437
__inline static void ldv_spin_unlock_82(spinlock_t *lock ) ;
#line 441
__inline static void ldv_spin_unlock_82(spinlock_t *lock ) ;
#line 445
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) ;
#line 449
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) ;
#line 453
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) ;
#line 457
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) ;
#line 461
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) ;
#line 465
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) ;
#line 469
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) ;
#line 473
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) ;
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 823
extern long prepare_to_wait_event(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 824
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
extern void synchronize_sched(void) ;
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 


  {
  {
#line 219
  __preempt_count_add(1);
#line 219
  __asm__  volatile   ("": : : "memory");
  }
#line 220
  return;
}
}
#line 222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void) 
{ 


  {
  {
#line 224
  __asm__  volatile   ("": : : "memory");
#line 224
  __preempt_count_sub(1);
  }
#line 225
  return;
}
}
#line 227 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void synchronize_rcu(void) 
{ 


  {
  {
#line 229
  synchronize_sched();
  }
#line 230
  return;
}
}
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcutree.h"
extern bool rcu_is_watching(void) ;
#line 348 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
extern bool rcu_lockdep_current_cpu_online(void) ;
#line 358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
  {
#line 360
  lock_acquire(map, 0U, 0, 2, 0, (struct lockdep_map *)0, (unsigned long )((void *)0));
  }
#line 362
  return;
}
}
#line 363 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
  {
#line 365
  lock_release(map, 1, (unsigned long )((void *)0));
  }
#line 367
  return;
}
}
#line 368
extern struct lockdep_map rcu_lock_map ;
#line 372
extern int debug_lockdep_rcu_enabled(void) ;
#line 394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static int rcu_read_lock_held(void) 
{ 
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 396
  tmp = debug_lockdep_rcu_enabled();
  }
#line 396
  if (tmp == 0) {
#line 397
    return (1);
  } else {

  }
  {
#line 398
  tmp___0 = rcu_is_watching();
  }
#line 398
  if (tmp___0) {
#line 398
    tmp___1 = 0;
  } else {
#line 398
    tmp___1 = 1;
  }
#line 398
  if (tmp___1) {
#line 399
    return (0);
  } else {

  }
  {
#line 400
  tmp___2 = rcu_lockdep_current_cpu_online();
  }
#line 400
  if (tmp___2) {
#line 400
    tmp___3 = 0;
  } else {
#line 400
    tmp___3 = 1;
  }
#line 400
  if (tmp___3) {
#line 401
    return (0);
  } else {

  }
  {
#line 402
  tmp___4 = lock_is_held(& rcu_lock_map);
  }
#line 402
  return (tmp___4);
}
}
#line 839 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 841
  __rcu_read_lock();
#line 843
  rcu_lock_acquire(& rcu_lock_map);
#line 844
  tmp = debug_lockdep_rcu_enabled();
  }
#line 844
  if (tmp != 0 && ! __warned) {
    {
#line 844
    tmp___0 = rcu_is_watching();
    }
#line 844
    if (tmp___0) {
#line 844
      tmp___1 = 0;
    } else {
#line 844
      tmp___1 = 1;
    }
#line 844
    if (tmp___1) {
      {
#line 844
      __warned = 1;
#line 844
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 845, "rcu_read_lock() used illegally while idle");
      }
    } else {

    }
  } else {

  }
#line 847
  return;
}
}
#line 863 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 865
  tmp = debug_lockdep_rcu_enabled();
  }
#line 865
  if (tmp != 0 && ! __warned) {
    {
#line 865
    tmp___0 = rcu_is_watching();
    }
#line 865
    if (tmp___0) {
#line 865
      tmp___1 = 0;
    } else {
#line 865
      tmp___1 = 1;
    }
#line 865
    if (tmp___1) {
      {
#line 865
      __warned = 1;
#line 865
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 866, "rcu_read_unlock() used illegally while idle");
      }
    } else {

    }
  } else {

  }
  {
#line 867
  rcu_lock_release(& rcu_lock_map);
#line 869
  __rcu_read_unlock();
  }
#line 870
  return;
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/idr.h"
extern void idr_remove(struct idr * , int  ) ;
#line 88
extern void idr_destroy(struct idr * ) ;
#line 89
extern void idr_init(struct idr * ) ;
#line 165
extern void ida_destroy(struct ida * ) ;
#line 166
extern void ida_init(struct ida * ) ;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/time.h"
extern struct timespec current_kernel_time(void) ;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rculist.h"
extern void __list_add_rcu(struct list_head * , struct list_head * , struct list_head * ) ;
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rculist.h"
__inline static void list_add_tail_rcu(struct list_head *new , struct list_head *head ) 
{ 


  {
  {
#line 102
  __list_add_rcu(new, head->prev, head);
  }
#line 103
  return;
}
}
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rculist.h"
__inline static void list_del_rcu(struct list_head *entry ) 
{ 


  {
  {
#line 131
  __list_del_entry(entry);
#line 132
  entry->prev = (struct list_head *)-2401263026316508672L;
  }
#line 133
  return;
}
}
#line 162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/percpu.h"
extern void *__alloc_percpu(size_t  , size_t  ) ;
#line 163
extern void free_percpu(void * ) ;
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seq_file.h"
static int ldv_seq_open_98(struct file *ldv_func_arg1 , struct seq_operations  const  *ldv_func_arg2 ) ;
#line 105
static int ldv_seq_open_101(struct file *ldv_func_arg1 , struct seq_operations  const  *ldv_func_arg2 ) ;
#line 107
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 108
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 109
extern int seq_release(struct inode * , struct file * ) ;
#line 112
extern int seq_puts(struct seq_file * , char const   * ) ;
#line 115
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 176
extern struct list_head *seq_list_start_head(struct list_head * , loff_t  ) ;
#line 178
extern struct list_head *seq_list_next(void * , struct list_head * , loff_t * ) ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kmod.h"
extern int __request_module(bool  , char const   *  , ...) ;
#line 465 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/module.h"
extern bool try_module_get(struct module * ) ;
#line 467
extern void module_put(struct module * ) ;
#line 381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
extern void schedule(void) ;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/debug.h"
extern unsigned int nfs_debug ;
#line 218 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
extern void rpc_init_wait_queue(struct rpc_wait_queue * , char const   * ) ;
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
extern struct rpc_cred *rpc_lookup_machine_cred(char const   * ) ;
#line 171
extern void put_rpccred(struct rpc_cred * ) ;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_mkdir(char const   * , struct proc_dir_entry * ) ;
#line 25
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/proc_fs.h"
__inline static struct proc_dir_entry *proc_create(char const   *name , umode_t mode ,
                                                   struct proc_dir_entry *parent ,
                                                   struct file_operations  const  *proc_fops ) 
{ 
  struct proc_dir_entry *tmp ;

  {
  {
#line 34
  tmp = proc_create_data(name, (int )mode, parent, proc_fops, (void *)0);
  }
#line 34
  return (tmp);
}
}
#line 42
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 637
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 171 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/net_namespace.h"
extern void __put_net(struct net * ) ;
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/net_namespace.h"
__inline static struct net *get_net(struct net *net ) 
{ 


  {
  {
#line 175
  atomic_inc(& net->count);
  }
#line 176
  return (net);
}
}
#line 191 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/net_namespace.h"
__inline static void put_net(struct net *net ) 
{ 
  int tmp ;

  {
  {
#line 193
  tmp = atomic_dec_and_test(& net->count);
  }
#line 193
  if (tmp != 0) {
    {
#line 194
    __put_net(net);
    }
  } else {

  }
#line 195
  return;
}
}
#line 316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/ipv6.h"
extern int __ipv6_addr_type(struct in6_addr  const  * ) ;
#line 317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/ipv6.h"
__inline static int ipv6_addr_type(struct in6_addr  const  *addr ) 
{ 
  int tmp ;

  {
  {
#line 319
  tmp = __ipv6_addr_type(addr);
  }
#line 319
  return (tmp & 65535);
}
}
#line 415 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/ipv6.h"
__inline static bool ipv6_addr_equal(struct in6_addr  const  *a1 , struct in6_addr  const  *a2 ) 
{ 
  unsigned long const   *ul1 ;
  unsigned long const   *ul2 ;

  {
#line 419
  ul1 = (unsigned long const   *)a1;
#line 420
  ul2 = (unsigned long const   *)a2;
#line 422
  return ((((unsigned long )*ul1 ^ (unsigned long )*ul2) | ((unsigned long )*(ul1 + 1UL) ^ (unsigned long )*(ul2 + 1UL))) == 0UL);
}
}
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
extern struct rpc_clnt *rpc_create(struct rpc_create_args * ) ;
#line 139
extern struct rpc_clnt *rpc_clone_client_set_auth(struct rpc_clnt * , rpc_authflavor_t  ) ;
#line 145
extern void rpc_shutdown_client(struct rpc_clnt * ) ;
#line 169
extern void rpc_setbufsize(struct rpc_clnt * , unsigned int  , unsigned int  ) ;
#line 172
extern size_t rpc_max_payload(struct rpc_clnt * ) ;
#line 176
extern char const   *rpc_peeraddr2str(struct rpc_clnt * , enum rpc_display_format_t  ) ;
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
extern int bdi_init(struct backing_dev_info * ) ;
#line 113
extern void bdi_destroy(struct backing_dev_info * ) ;
#line 370 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
void nfs_fattr_init(struct nfs_fattr *fattr ) ;
#line 373
struct nfs_fattr *nfs_alloc_fattr(void) ;
#line 375 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static void nfs_free_fattr(struct nfs_fattr  const  *fattr ) 
{ 


  {
  {
#line 377
  kfree((void const   *)fattr);
  }
#line 378
  return;
}
}
#line 504
void nfs_release_automount_timer(void) ;
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockd/bind.h"
extern struct nlm_host *nlmclnt_init(struct nlmclnt_initdata  const  * ) ;
#line 53
extern void nlmclnt_done(struct nlm_host * ) ;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static struct nfs_iostats *nfs_alloc_iostats(void) 
{ 
  void *tmp ;

  {
  {
#line 62
  tmp = __alloc_percpu(320UL, 64UL);
  }
#line 62
  return ((struct nfs_iostats *)tmp);
}
}
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_free_iostats(struct nfs_iostats *stats ) 
{ 


  {
#line 67
  if ((unsigned long )stats != (unsigned long )((struct nfs_iostats *)0)) {
    {
#line 68
    free_percpu((void *)stats);
    }
  } else {

  }
#line 69
  return;
}
}
#line 148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct rpc_program  const  nfs_program ;
#line 149
void nfs_clients_init(struct net *net ) ;
#line 150
struct nfs_client *nfs_alloc_client(struct nfs_client_initdata  const  *cl_init ) ;
#line 151
int nfs_create_rpc_client(struct nfs_client *clp , struct rpc_timeout  const  *timeparms ,
                          rpc_authflavor_t flavor ) ;
#line 152
struct nfs_client *nfs_get_client(struct nfs_client_initdata  const  *cl_init , struct rpc_timeout  const  *timeparms ,
                                  char const   *ip_addr , rpc_authflavor_t authflavour ) ;
#line 155
int nfs_probe_fsinfo(struct nfs_server *server , struct nfs_fh *mntfh , struct nfs_fattr *fattr ) ;
#line 156
void nfs_server_insert_lists(struct nfs_server *server ) ;
#line 157
void nfs_server_remove_lists(struct nfs_server *server ) ;
#line 158
void nfs_init_timeout_values(struct rpc_timeout *to , int proto , unsigned int timeo ,
                             unsigned int retrans ) ;
#line 159
int nfs_init_server_rpcclient(struct nfs_server *server , struct rpc_timeout  const  *timeo ,
                              rpc_authflavor_t pseudoflavour ) ;
#line 161
struct nfs_server *nfs_alloc_server(void) ;
#line 162
void nfs_server_copy_userdata(struct nfs_server *target , struct nfs_server *source ) ;
#line 164
void nfs_cleanup_cb_ident_idr(struct net *net ) ;
#line 165
void nfs_put_client(struct nfs_client *clp ) ;
#line 166
void nfs_free_client(struct nfs_client *clp ) ;
#line 171
struct nfs_server *nfs_create_server(struct nfs_mount_info *mount_info , struct nfs_subversion *nfs_mod ) ;
#line 181
void nfs_free_server(struct nfs_server *server ) ;
#line 182
struct nfs_server *nfs_clone_server(struct nfs_server *source , struct nfs_fh *fh ,
                                    struct nfs_fattr *fattr , rpc_authflavor_t flavor ) ;
#line 186
int nfs_wait_client_init_complete(struct nfs_client  const  *clp ) ;
#line 187
void nfs_mark_client_ready(struct nfs_client *clp , int state ) ;
#line 196
int nfs_fs_proc_init(void) ;
#line 197
void nfs_fs_proc_exit(void) ;
#line 209
int nfs_sockaddr_match_ipaddr(struct sockaddr  const  *sa1 , struct sockaddr  const  *sa2 ) ;
#line 307
struct nfs_client *nfs_init_client(struct nfs_client *clp , struct rpc_timeout  const  *timeparms ,
                                   char const   *ip_addr ) ;
#line 375
struct rpc_stat nfs_rpcstat ;
#line 510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static unsigned long nfs_block_bits(unsigned long bsize , unsigned char *nrbitsp ) 
{ 
  unsigned char nrbits ;

  {
#line 513
  if ((bsize & (bsize - 1UL)) != 0UL || (unsigned long )nrbitsp != (unsigned long )((unsigned char *)0U)) {
#line 516
    nrbits = 31U;
#line 516
    goto ldv_55203;
    ldv_55202: 
#line 516
    nrbits = (unsigned char )((int )nrbits - 1);
    ldv_55203: ;
#line 516
    if ((unsigned int )nrbits != 0U && (bsize & (unsigned long )(1 << (int )nrbits)) == 0UL) {
#line 518
      goto ldv_55202;
    } else {

    }
#line 518
    bsize = (unsigned long )(1 << (int )nrbits);
#line 519
    if ((unsigned long )nrbitsp != (unsigned long )((unsigned char *)0U)) {
#line 520
      *nrbitsp = nrbits;
    } else {

    }
  } else {

  }
#line 523
  return (bsize);
}
}
#line 539 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static unsigned long nfs_block_size(unsigned long bsize , unsigned char *nrbitsp ) 
{ 
  unsigned long tmp ;

  {
#line 541
  if (bsize <= 1023UL) {
#line 542
    bsize = 4096UL;
  } else
#line 543
  if (bsize > 1048575UL) {
#line 544
    bsize = 1048576UL;
  } else {

  }
  {
#line 546
  tmp = nfs_block_bits(bsize, nrbitsp);
  }
#line 546
  return (tmp);
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
void nfs_fscache_get_client_cookie(struct nfs_client *clp ) ;
#line 74
void nfs_fscache_release_client_cookie(struct nfs_client *clp ) ;
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
__inline static char const   *nfs_server_fscache_state(struct nfs_server *server ) 
{ 


  {
#line 174
  if ((unsigned long )server->fscache != (unsigned long )((struct fscache_cookie *)0) && (int )server->options & 1) {
#line 175
    return ("yes");
  } else {

  }
#line 176
  return ("no ");
}
}
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs.h"
struct nfs_subversion *get_nfs_version(unsigned int version ) ;
#line 25
void put_nfs_version(struct nfs_subversion *nfs ) ;
#line 26
void register_nfs_version(struct nfs_subversion *nfs ) ;
#line 27
void unregister_nfs_version(struct nfs_subversion *nfs ) ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/netns/generic.h"
__inline static void *net_generic(struct net  const  *net , int id ) 
{ 
  struct net_generic *ng ;
  void *ptr ;
  struct net_generic *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
  {
#line 39
  rcu_read_lock();
#line 40
  _________p1 = *((struct net_generic * const volatile  *)(& net->gen));
#line 40
  tmp = debug_lockdep_rcu_enabled();
  }
#line 40
  if (tmp != 0 && ! __warned) {
    {
#line 40
    tmp___0 = rcu_read_lock_held();
    }
#line 40
    if (tmp___0 == 0) {
      {
#line 40
      __warned = 1;
#line 40
      lockdep_rcu_suspicious("include/net/netns/generic.h", 40, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 40
  ng = _________p1;
#line 41
  tmp___1 = __builtin_expect(id == 0, 0L);
  }
#line 41
  if (tmp___1 != 0L) {
    {
#line 41
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/net/netns/generic.h"),
                         "i" (41), "i" (12UL));
#line 41
    __builtin_unreachable();
    }
  } else {
    {
#line 41
    tmp___2 = __builtin_expect((unsigned int )id > ng->len, 0L);
    }
#line 41
    if (tmp___2 != 0L) {
      {
#line 41
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/net/netns/generic.h"),
                           "i" (41), "i" (12UL));
#line 41
      __builtin_unreachable();
      }
    } else {

    }
  }
  {
#line 42
  ptr = ng->ptr[id + -1];
#line 43
  rcu_read_unlock();
#line 45
  tmp___3 = __builtin_expect((unsigned long )ptr == (unsigned long )((void *)0), 0L);
  }
#line 45
  if (tmp___3 != 0L) {
    {
#line 45
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/net/netns/generic.h"),
                         "i" (45), "i" (12UL));
#line 45
    __builtin_unreachable();
    }
  } else {

  }
#line 46
  return (ptr);
}
}
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/netns.h"
int nfs_net_id ;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static wait_queue_head_t nfs_client_active_wq  =    {{{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "nfs_client_active_wq.lock",
                                                      0, 0UL}}}}, {& nfs_client_active_wq.task_list,
                                                                   & nfs_client_active_wq.task_list}};
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static spinlock_t nfs_version_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "nfs_version_lock",
                                                     0, 0UL}}}};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct mutex nfs_version_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "nfs_version_mutex.wait_lock",
                                                           0, 0UL}}}}, {& nfs_version_mutex.wait_list,
                                                                        & nfs_version_mutex.wait_list},
    0, 0, (void *)(& nfs_version_mutex), {0, {0, 0}, "nfs_version_mutex", 0, 0UL}};
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct list_head nfs_versions  =    {& nfs_versions, & nfs_versions};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct rpc_version  const  *nfs_version[5U]  = {      0,      0,      (struct rpc_version  const  *)0,      (struct rpc_version  const  *)0, 
        (struct rpc_version  const  *)0};
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct rpc_program  const  nfs_program  =    {"nfs", 100003U, 5U, (struct rpc_version  const  **)(& nfs_version), & nfs_rpcstat,
    "nfs"};
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct rpc_stat nfs_rpcstat  = 
#line 82
     {& nfs_program, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U};
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct nfs_subversion *find_nfs_version(unsigned int version ) 
{ 
  struct nfs_subversion *nfs ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  void *tmp ;

  {
  {
#line 89
  ldv_spin_lock_81(& nfs_version_lock);
#line 91
  __mptr = (struct list_head  const  *)nfs_versions.next;
#line 91
  nfs = (struct nfs_subversion *)((char *)__mptr + 0xffffffffffffffd0UL);
  }
#line 91
  goto ldv_56145;
  ldv_56144: ;
#line 92
  if ((unsigned int )(nfs->rpc_ops)->version == version) {
    {
#line 93
    ldv_spin_unlock_82(& nfs_version_lock);
    }
#line 94
    return (nfs);
  } else {

  }
#line 91
  __mptr___0 = (struct list_head  const  *)nfs->list.next;
#line 91
  nfs = (struct nfs_subversion *)((char *)__mptr___0 + 0xffffffffffffffd0UL);
  ldv_56145: ;
#line 91
  if ((unsigned long )(& nfs->list) != (unsigned long )(& nfs_versions)) {
#line 93
    goto ldv_56144;
  } else {

  }
  {
#line 98
  ldv_spin_unlock_82(& nfs_version_lock);
#line 99
  tmp = ERR_PTR(-93L);
  }
#line 99
  return ((struct nfs_subversion *)tmp);
}
}
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct nfs_subversion *get_nfs_version(unsigned int version ) 
{ 
  struct nfs_subversion *nfs ;
  struct nfs_subversion *tmp ;
  bool tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
  {
#line 104
  tmp = find_nfs_version(version);
#line 104
  nfs = tmp;
#line 106
  tmp___0 = IS_ERR((void const   *)nfs);
  }
#line 106
  if ((int )tmp___0) {
    {
#line 107
    mutex_lock_nested(& nfs_version_mutex, 0U);
#line 108
    __request_module(1, "nfsv%d", version);
#line 109
    nfs = find_nfs_version(version);
#line 110
    mutex_unlock(& nfs_version_mutex);
    }
  } else {

  }
  {
#line 113
  tmp___1 = IS_ERR((void const   *)nfs);
  }
#line 113
  if (tmp___1) {
#line 113
    tmp___2 = 0;
  } else {
#line 113
    tmp___2 = 1;
  }
#line 113
  if (tmp___2) {
    {
#line 114
    try_module_get(nfs->owner);
    }
  } else {

  }
#line 115
  return (nfs);
}
}
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void put_nfs_version(struct nfs_subversion *nfs ) 
{ 


  {
  {
#line 120
  module_put(nfs->owner);
  }
#line 121
  return;
}
}
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void register_nfs_version(struct nfs_subversion *nfs ) 
{ 


  {
  {
#line 125
  ldv_spin_lock_81(& nfs_version_lock);
#line 127
  list_add(& nfs->list, & nfs_versions);
#line 128
  nfs_version[(nfs->rpc_ops)->version] = nfs->rpc_vers;
#line 130
  ldv_spin_unlock_82(& nfs_version_lock);
  }
#line 131
  return;
}
}
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_register_nfs_version[21U]  = 
#line 132
  {      'r',      'e',      'g',      'i', 
        's',      't',      'e',      'r', 
        '_',      'n',      'f',      's', 
        '_',      'v',      'e',      'r', 
        's',      'i',      'o',      'n', 
        '\000'};
#line 132
struct kernel_symbol  const  __ksymtab_register_nfs_version ;
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_register_nfs_version  =    {(unsigned long )(& register_nfs_version), (char const   *)(& __kstrtab_register_nfs_version)};
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void unregister_nfs_version(struct nfs_subversion *nfs ) 
{ 


  {
  {
#line 136
  ldv_spin_lock_81(& nfs_version_lock);
#line 138
  nfs_version[(nfs->rpc_ops)->version] = (struct rpc_version  const  *)0;
#line 139
  list_del(& nfs->list);
#line 141
  ldv_spin_unlock_82(& nfs_version_lock);
  }
#line 142
  return;
}
}
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_unregister_nfs_version[23U]  = 
#line 143
  {      'u',      'n',      'r',      'e', 
        'g',      'i',      's',      't', 
        'e',      'r',      '_',      'n', 
        'f',      's',      '_',      'v', 
        'e',      'r',      's',      'i', 
        'o',      'n',      '\000'};
#line 143
struct kernel_symbol  const  __ksymtab_unregister_nfs_version ;
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_unregister_nfs_version  =    {(unsigned long )(& unregister_nfs_version), (char const   *)(& __kstrtab_unregister_nfs_version)};
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct nfs_client *nfs_alloc_client(struct nfs_client_initdata  const  *cl_init ) 
{ 
  struct nfs_client *clp ;
  struct rpc_cred *cred ;
  int err ;
  void *tmp ;
  void *tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
  {
#line 155
  err = -12;
#line 157
  tmp = kzalloc(1080UL, 208U);
#line 157
  clp = (struct nfs_client *)tmp;
  }
#line 157
  if ((unsigned long )clp == (unsigned long )((struct nfs_client *)0)) {
#line 158
    goto error_0;
  } else {

  }
  {
#line 160
  clp->cl_nfs_mod = cl_init->nfs_mod;
#line 161
  try_module_get((clp->cl_nfs_mod)->owner);
#line 163
  clp->rpc_ops = (clp->cl_nfs_mod)->rpc_ops;
#line 165
  atomic_set(& clp->cl_count, 1);
#line 166
  clp->cl_cons_state = 1;
#line 168
  memcpy((void *)(& clp->cl_addr), (void const   *)cl_init->addr, cl_init->addrlen);
#line 169
  clp->cl_addrlen = cl_init->addrlen;
  }
#line 171
  if ((unsigned long )cl_init->hostname != (unsigned long )((char const   */* const  */)0)) {
    {
#line 172
    err = -12;
#line 173
    clp->cl_hostname = kstrdup(cl_init->hostname, 208U);
    }
#line 174
    if ((unsigned long )clp->cl_hostname == (unsigned long )((char *)0)) {
#line 175
      goto error_cleanup;
    } else {

    }
  } else {

  }
  {
#line 178
  INIT_LIST_HEAD(& clp->cl_superblocks);
#line 179
  tmp___0 = ERR_PTR(-22L);
#line 179
  clp->cl_rpcclient = (struct rpc_clnt *)tmp___0;
#line 181
  clp->cl_proto = cl_init->proto;
#line 182
  clp->cl_net = get_net(cl_init->net);
#line 184
  cred = rpc_lookup_machine_cred("*");
#line 185
  tmp___1 = IS_ERR((void const   *)cred);
  }
#line 185
  if (tmp___1) {
#line 185
    tmp___2 = 0;
  } else {
#line 185
    tmp___2 = 1;
  }
#line 185
  if (tmp___2) {
#line 186
    clp->cl_machine_cred = cred;
  } else {

  }
  {
#line 187
  nfs_fscache_get_client_cookie(clp);
  }
#line 189
  return (clp);
  error_cleanup: 
  {
#line 192
  put_nfs_version(clp->cl_nfs_mod);
#line 193
  kfree((void const   *)clp);
  }
  error_0: 
  {
#line 195
  tmp___3 = ERR_PTR((long )err);
  }
#line 195
  return ((struct nfs_client *)tmp___3);
}
}
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_alloc_client[17U]  = 
#line 197
  {      'n',      'f',      's',      '_', 
        'a',      'l',      'l',      'o', 
        'c',      '_',      'c',      'l', 
        'i',      'e',      'n',      't', 
        '\000'};
#line 197
struct kernel_symbol  const  __ksymtab_nfs_alloc_client ;
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_alloc_client  =    {(unsigned long )(& nfs_alloc_client), (char const   *)(& __kstrtab_nfs_alloc_client)};
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_cleanup_cb_ident_idr(struct net *net ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;

  {
  {
#line 202
  tmp = net_generic((struct net  const  *)net, nfs_net_id);
#line 202
  nn = (struct nfs_net *)tmp;
#line 204
  idr_destroy(& nn->cb_ident_idr);
  }
#line 205
  return;
}
}
#line 208 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void nfs_cb_idr_remove_locked(struct nfs_client *clp ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;

  {
  {
#line 210
  tmp = net_generic((struct net  const  *)clp->cl_net, nfs_net_id);
#line 210
  nn = (struct nfs_net *)tmp;
  }
#line 212
  if (clp->cl_cb_ident != 0U) {
    {
#line 213
    idr_remove(& nn->cb_ident_idr, (int )clp->cl_cb_ident);
    }
  } else {

  }
#line 214
  return;
}
}
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void pnfs_init_server(struct nfs_server *server ) 
{ 


  {
  {
#line 218
  rpc_init_wait_queue(& server->roc_rpcwaitq, "pNFS ROC");
  }
#line 219
  return;
}
}
#line 239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_free_client(struct nfs_client *clp ) 
{ 
  long tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
  {
#line 241
  tmp = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 241
  if (tmp != 0L) {
    {
#line 241
    printk("\001d--> nfs_free_client(%u)\n", (clp->rpc_ops)->version);
    }
  } else {

  }
  {
#line 243
  nfs_fscache_release_client_cookie(clp);
#line 246
  tmp___0 = IS_ERR((void const   *)clp->cl_rpcclient);
  }
#line 246
  if (tmp___0) {
#line 246
    tmp___1 = 0;
  } else {
#line 246
    tmp___1 = 1;
  }
#line 246
  if (tmp___1) {
    {
#line 247
    rpc_shutdown_client(clp->cl_rpcclient);
    }
  } else {

  }
#line 249
  if ((unsigned long )clp->cl_machine_cred != (unsigned long )((struct rpc_cred *)0)) {
    {
#line 250
    put_rpccred(clp->cl_machine_cred);
    }
  } else {

  }
  {
#line 252
  put_net(clp->cl_net);
#line 253
  put_nfs_version(clp->cl_nfs_mod);
#line 254
  kfree((void const   *)clp->cl_hostname);
#line 255
  kfree((void const   *)clp);
#line 257
  tmp___2 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 257
  if (tmp___2 != 0L) {
    {
#line 257
    printk("\001d<-- nfs_free_client()\n");
    }
  } else {

  }
#line 258
  return;
}
}
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_free_client[16U]  = 
#line 259
  {      'n',      'f',      's',      '_', 
        'f',      'r',      'e',      'e', 
        '_',      'c',      'l',      'i', 
        'e',      'n',      't',      '\000'};
#line 259
struct kernel_symbol  const  __ksymtab_nfs_free_client ;
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_free_client  =    {(unsigned long )(& nfs_free_client), (char const   *)(& __kstrtab_nfs_free_client)};
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_put_client(struct nfs_client *clp ) 
{ 
  struct nfs_net *nn ;
  int tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;

  {
#line 268
  if ((unsigned long )clp == (unsigned long )((struct nfs_client *)0)) {
#line 269
    return;
  } else {

  }
  {
#line 271
  tmp___0 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 271
  if (tmp___0 != 0L) {
    {
#line 271
    tmp = atomic_read((atomic_t const   *)(& clp->cl_count));
#line 271
    printk("\001d--> nfs_put_client({%d})\n", tmp);
    }
  } else {

  }
  {
#line 272
  tmp___1 = net_generic((struct net  const  *)clp->cl_net, nfs_net_id);
#line 272
  nn = (struct nfs_net *)tmp___1;
#line 274
  tmp___6 = ldv___ldv_atomic_dec_and_lock_88(& nn->nfs_client_lock);
  }
#line 274
  if (tmp___6 != 0) {
    {
#line 275
    list_del(& clp->cl_share_link);
#line 276
    nfs_cb_idr_remove_locked(clp);
#line 277
    ldv_spin_unlock_89(& nn->nfs_client_lock);
#line 279
    tmp___2 = list_empty((struct list_head  const  *)(& clp->cl_superblocks));
#line 279
    __ret_warn_once = tmp___2 == 0;
#line 279
    tmp___5 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 279
    if (tmp___5 != 0L) {
      {
#line 279
      __ret_warn_on = ! __warned;
#line 279
      tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 279
      if (tmp___3 != 0L) {
        {
#line 279
        warn_slowpath_null("fs/nfs/client.c", 279);
        }
      } else {

      }
      {
#line 279
      tmp___4 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 279
      if (tmp___4 != 0L) {
#line 279
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 279
    __builtin_expect(__ret_warn_once != 0, 0L);
#line 281
    (*((clp->rpc_ops)->free_client))(clp);
    }
  } else {

  }
#line 283
  return;
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_put_client[15U]  = 
#line 284
  {      'n',      'f',      's',      '_', 
        'p',      'u',      't',      '_', 
        'c',      'l',      'i',      'e', 
        'n',      't',      '\000'};
#line 284
struct kernel_symbol  const  __ksymtab_nfs_put_client ;
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_put_client  =    {(unsigned long )(& nfs_put_client), (char const   *)(& __kstrtab_nfs_put_client)};
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_sockaddr_match_ipaddr6(struct sockaddr  const  *sa1 , struct sockaddr  const  *sa2 ) 
{ 
  struct sockaddr_in6  const  *sin1 ;
  struct sockaddr_in6  const  *sin2 ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 301
  sin1 = (struct sockaddr_in6  const  *)sa1;
#line 302
  sin2 = (struct sockaddr_in6  const  *)sa2;
#line 304
  tmp___0 = ipv6_addr_equal(& sin1->sin6_addr, & sin2->sin6_addr);
  }
#line 304
  if (tmp___0) {
#line 304
    tmp___1 = 0;
  } else {
#line 304
    tmp___1 = 1;
  }
#line 304
  if (tmp___1) {
#line 305
    return (0);
  } else {
    {
#line 306
    tmp = ipv6_addr_type(& sin1->sin6_addr);
    }
#line 306
    if (((unsigned int )tmp & 32U) != 0U) {
#line 307
      return ((unsigned int )sin1->sin6_scope_id == (unsigned int )sin2->sin6_scope_id);
    } else {

    }
  }
#line 309
  return (1);
}
}
#line 326 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_sockaddr_match_ipaddr4(struct sockaddr  const  *sa1 , struct sockaddr  const  *sa2 ) 
{ 
  struct sockaddr_in  const  *sin1 ;
  struct sockaddr_in  const  *sin2 ;

  {
#line 329
  sin1 = (struct sockaddr_in  const  *)sa1;
#line 330
  sin2 = (struct sockaddr_in  const  *)sa2;
#line 332
  return ((unsigned int )sin1->sin_addr.s_addr == (unsigned int )sin2->sin_addr.s_addr);
}
}
#line 335 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_sockaddr_cmp_ip6(struct sockaddr  const  *sa1 , struct sockaddr  const  *sa2 ) 
{ 
  struct sockaddr_in6  const  *sin1 ;
  struct sockaddr_in6  const  *sin2 ;
  int tmp ;

  {
  {
#line 338
  sin1 = (struct sockaddr_in6  const  *)sa1;
#line 339
  sin2 = (struct sockaddr_in6  const  *)sa2;
#line 341
  tmp = nfs_sockaddr_match_ipaddr6(sa1, sa2);
  }
#line 341
  return (tmp != 0 && (int )((unsigned short )sin1->sin6_port) == (int )((unsigned short )sin2->sin6_port));
}
}
#line 345 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_sockaddr_cmp_ip4(struct sockaddr  const  *sa1 , struct sockaddr  const  *sa2 ) 
{ 
  struct sockaddr_in  const  *sin1 ;
  struct sockaddr_in  const  *sin2 ;
  int tmp ;

  {
  {
#line 348
  sin1 = (struct sockaddr_in  const  *)sa1;
#line 349
  sin2 = (struct sockaddr_in  const  *)sa2;
#line 351
  tmp = nfs_sockaddr_match_ipaddr4(sa1, sa2);
  }
#line 351
  return (tmp != 0 && (int )((unsigned short )sin1->sin_port) == (int )((unsigned short )sin2->sin_port));
}
}
#line 360 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
int nfs_sockaddr_match_ipaddr(struct sockaddr  const  *sa1 , struct sockaddr  const  *sa2 ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 363
  if ((int )((unsigned short )sa1->sa_family) != (int )((unsigned short )sa2->sa_family)) {
#line 364
    return (0);
  } else {

  }
  {
#line 367
  if ((int )sa1->sa_family == 2) {
#line 367
    goto case_2;
  } else {

  }
#line 369
  if ((int )sa1->sa_family == 10) {
#line 369
    goto case_10;
  } else {

  }
#line 366
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 368
  tmp = nfs_sockaddr_match_ipaddr4(sa1, sa2);
  }
#line 368
  return (tmp);
  case_10: /* CIL Label */ 
  {
#line 370
  tmp___0 = nfs_sockaddr_match_ipaddr6(sa1, sa2);
  }
#line 370
  return (tmp___0);
  switch_break: /* CIL Label */ ;
  }
#line 372
  return (0);
}
}
#line 374 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_sockaddr_match_ipaddr[26U]  = 
#line 374
  {      'n',      'f',      's',      '_', 
        's',      'o',      'c',      'k', 
        'a',      'd',      'd',      'r', 
        '_',      'm',      'a',      't', 
        'c',      'h',      '_',      'i', 
        'p',      'a',      'd',      'd', 
        'r',      '\000'};
#line 374
struct kernel_symbol  const  __ksymtab_nfs_sockaddr_match_ipaddr ;
#line 374 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_sockaddr_match_ipaddr  =    {(unsigned long )(& nfs_sockaddr_match_ipaddr), (char const   *)(& __kstrtab_nfs_sockaddr_match_ipaddr)};
#line 381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_sockaddr_cmp(struct sockaddr  const  *sa1 , struct sockaddr  const  *sa2 ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 384
  if ((int )((unsigned short )sa1->sa_family) != (int )((unsigned short )sa2->sa_family)) {
#line 385
    return (0);
  } else {

  }
  {
#line 388
  if ((int )sa1->sa_family == 2) {
#line 388
    goto case_2;
  } else {

  }
#line 390
  if ((int )sa1->sa_family == 10) {
#line 390
    goto case_10;
  } else {

  }
#line 387
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 389
  tmp = nfs_sockaddr_cmp_ip4(sa1, sa2);
  }
#line 389
  return (tmp);
  case_10: /* CIL Label */ 
  {
#line 391
  tmp___0 = nfs_sockaddr_cmp_ip6(sa1, sa2);
  }
#line 391
  return (tmp___0);
  switch_break: /* CIL Label */ ;
  }
#line 393
  return (0);
}
}
#line 400 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct nfs_client *nfs_match_client(struct nfs_client_initdata  const  *data ) 
{ 
  struct nfs_client *clp ;
  struct sockaddr  const  *sap ;
  struct nfs_net *nn ;
  void *tmp ;
  struct list_head  const  *__mptr ;
  struct sockaddr  const  *clap ;
  int tmp___0 ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 403
  sap = data->addr;
#line 404
  tmp = net_generic((struct net  const  *)data->net, nfs_net_id);
#line 404
  nn = (struct nfs_net *)tmp;
#line 406
  __mptr = (struct list_head  const  *)nn->nfs_client_list.next;
#line 406
  clp = (struct nfs_client *)((char *)__mptr + 0xffffffffffffff50UL);
  }
#line 406
  goto ldv_56283;
  ldv_56282: 
#line 407
  clap = (struct sockaddr  const  *)(& clp->cl_addr);
#line 409
  if (clp->cl_cons_state < 0) {
#line 410
    goto ldv_56281;
  } else {

  }
#line 413
  if ((unsigned long )clp->rpc_ops != (unsigned long )(data->nfs_mod)->rpc_ops) {
#line 414
    goto ldv_56281;
  } else {

  }
#line 416
  if (clp->cl_proto != (int )data->proto) {
#line 417
    goto ldv_56281;
  } else {

  }
#line 419
  if (clp->cl_minorversion != (u32 )data->minorversion) {
#line 420
    goto ldv_56281;
  } else {

  }
  {
#line 422
  tmp___0 = nfs_sockaddr_cmp(sap, clap);
  }
#line 422
  if (tmp___0 == 0) {
#line 423
    goto ldv_56281;
  } else {

  }
  {
#line 425
  atomic_inc(& clp->cl_count);
  }
#line 426
  return (clp);
  ldv_56281: 
#line 406
  __mptr___0 = (struct list_head  const  *)clp->cl_share_link.next;
#line 406
  clp = (struct nfs_client *)((char *)__mptr___0 + 0xffffffffffffff50UL);
  ldv_56283: ;
#line 406
  if ((unsigned long )(& clp->cl_share_link) != (unsigned long )(& nn->nfs_client_list)) {
#line 408
    goto ldv_56282;
  } else {

  }

#line 428
  return ((struct nfs_client *)0);
}
}
#line 431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static bool nfs_client_init_is_complete(struct nfs_client  const  *clp ) 
{ 


  {
#line 433
  return ((int )clp->cl_cons_state != 1);
}
}
#line 436 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
int nfs_wait_client_init_complete(struct nfs_client  const  *clp ) 
{ 
  int __ret ;
  wait_queue_t __wait ;
  long __ret___0 ;
  long __int ;
  long tmp ;
  bool tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
  {
#line 438
  __ret = 0;
#line 438
  tmp___1 = nfs_client_init_is_complete(clp);
  }
#line 438
  if (tmp___1) {
#line 438
    tmp___2 = 0;
  } else {
#line 438
    tmp___2 = 1;
  }
#line 438
  if (tmp___2) {
    {
#line 438
    __ret___0 = 0L;
#line 438
    INIT_LIST_HEAD(& __wait.task_list);
#line 438
    __wait.flags = 0U;
    }
    ldv_56297: 
    {
#line 438
    tmp = prepare_to_wait_event(& nfs_client_active_wq, & __wait, 130);
#line 438
    __int = tmp;
#line 438
    tmp___0 = nfs_client_init_is_complete(clp);
    }
#line 438
    if ((int )tmp___0) {
#line 438
      goto ldv_56296;
    } else {

    }
#line 438
    if (__int != 0L) {
#line 438
      __ret___0 = __int;
#line 438
      goto ldv_56296;
    } else {

    }
    {
#line 438
    schedule();
    }
#line 438
    goto ldv_56297;
    ldv_56296: 
    {
#line 438
    finish_wait(& nfs_client_active_wq, & __wait);
    }
#line 438
    __ret = (int )__ret___0;
  } else {

  }
#line 438
  return (__ret);
}
}
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_wait_client_init_complete[30U]  = 
#line 441
  {      'n',      'f',      's',      '_', 
        'w',      'a',      'i',      't', 
        '_',      'c',      'l',      'i', 
        'e',      'n',      't',      '_', 
        'i',      'n',      'i',      't', 
        '_',      'c',      'o',      'm', 
        'p',      'l',      'e',      't', 
        'e',      '\000'};
#line 441
struct kernel_symbol  const  __ksymtab_nfs_wait_client_init_complete ;
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_wait_client_init_complete  =    {(unsigned long )(& nfs_wait_client_init_complete), (char const   *)(& __kstrtab_nfs_wait_client_init_complete)};
#line 447 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct nfs_client *nfs_found_client(struct nfs_client_initdata  const  *cl_init ,
                                           struct nfs_client *clp ) 
{ 
  int error ;
  void *tmp ;
  void *tmp___0 ;
  long tmp___1 ;

  {
  {
#line 452
  error = nfs_wait_client_init_complete((struct nfs_client  const  *)clp);
  }
#line 453
  if (error < 0) {
    {
#line 454
    nfs_put_client(clp);
#line 455
    tmp = ERR_PTR(-512L);
    }
#line 455
    return ((struct nfs_client *)tmp);
  } else {

  }
#line 458
  if (clp->cl_cons_state < 0) {
    {
#line 459
    error = clp->cl_cons_state;
#line 460
    nfs_put_client(clp);
#line 461
    tmp___0 = ERR_PTR((long )error);
    }
#line 461
    return ((struct nfs_client *)tmp___0);
  } else {

  }
  {
#line 464
  __asm__  volatile   ("": : : "memory");
#line 466
  tmp___1 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 466
  if (tmp___1 != 0L) {
    {
#line 466
    printk("\001d<-- %s found nfs_client %p for %s\n", "nfs_found_client", clp, (unsigned long )cl_init->hostname != (unsigned long )((char const   */* const  */)0) ? cl_init->hostname : (char const   */* const  */)"");
    }
  } else {

  }
#line 468
  return (clp);
}
}
#line 476 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct nfs_client *nfs_get_client(struct nfs_client_initdata  const  *cl_init , struct rpc_timeout  const  *timeparms ,
                                  char const   *ip_addr , rpc_authflavor_t authflavour ) 
{ 
  struct nfs_client *clp ;
  struct nfs_client *new ;
  struct nfs_net *nn ;
  void *tmp ;
  struct nfs_rpc_ops  const  *rpc_ops ;
  long tmp___0 ;
  struct nfs_client *tmp___1 ;
  struct nfs_client *tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
  {
#line 481
  new = (struct nfs_client *)0;
#line 482
  tmp = net_generic((struct net  const  *)cl_init->net, nfs_net_id);
#line 482
  nn = (struct nfs_net *)tmp;
#line 483
  rpc_ops = (cl_init->nfs_mod)->rpc_ops;
#line 485
  tmp___0 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 485
  if (tmp___0 != 0L) {
    {
#line 485
    printk("\001d--> nfs_get_client(%s,v%u)\n", (unsigned long )cl_init->hostname != (unsigned long )((char const   */* const  */)0) ? cl_init->hostname : (char const   */* const  */)"",
           rpc_ops->version);
    }
  } else {

  }
  ldv_56323: 
  {
#line 490
  ldv_spin_lock_90(& nn->nfs_client_lock);
#line 492
  clp = nfs_match_client(cl_init);
  }
#line 493
  if ((unsigned long )clp != (unsigned long )((struct nfs_client *)0)) {
    {
#line 494
    ldv_spin_unlock_89(& nn->nfs_client_lock);
    }
#line 495
    if ((unsigned long )new != (unsigned long )((struct nfs_client *)0)) {
      {
#line 496
      (*((new->rpc_ops)->free_client))(new);
      }
    } else {

    }
    {
#line 497
    tmp___1 = nfs_found_client(cl_init, clp);
    }
#line 497
    return (tmp___1);
  } else {

  }
#line 499
  if ((unsigned long )new != (unsigned long )((struct nfs_client *)0)) {
    {
#line 500
    list_add_tail(& new->cl_share_link, & nn->nfs_client_list);
#line 502
    ldv_spin_unlock_89(& nn->nfs_client_lock);
#line 503
    new->cl_flags = cl_init->init_flags;
#line 504
    tmp___2 = (*(rpc_ops->init_client))(new, timeparms, ip_addr);
    }
#line 504
    return (tmp___2);
  } else {

  }
  {
#line 507
  ldv_spin_unlock_89(& nn->nfs_client_lock);
#line 509
  new = (*(rpc_ops->alloc_client))(cl_init);
#line 510
  tmp___3 = IS_ERR((void const   *)new);
  }
#line 510
  if (tmp___3) {
#line 510
    tmp___4 = 0;
  } else {
#line 510
    tmp___4 = 1;
  }
#line 510
  if (tmp___4) {
#line 512
    goto ldv_56323;
  } else {

  }
  {
#line 512
  tmp___6 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 512
  if (tmp___6 != 0L) {
    {
#line 512
    tmp___5 = PTR_ERR((void const   *)new);
#line 512
    printk("\001d<-- nfs_get_client() Failed to find %s (%ld)\n", (unsigned long )cl_init->hostname != (unsigned long )((char const   */* const  */)0) ? cl_init->hostname : (char const   */* const  */)"",
           tmp___5);
    }
  } else {

  }
#line 514
  return (new);
}
}
#line 516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_get_client[15U]  = 
#line 516
  {      'n',      'f',      's',      '_', 
        'g',      'e',      't',      '_', 
        'c',      'l',      'i',      'e', 
        'n',      't',      '\000'};
#line 516
struct kernel_symbol  const  __ksymtab_nfs_get_client ;
#line 516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_get_client  =    {(unsigned long )(& nfs_get_client), (char const   *)(& __kstrtab_nfs_get_client)};
#line 521 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_mark_client_ready(struct nfs_client *clp , int state ) 
{ 


  {
  {
#line 523
  __asm__  volatile   ("": : : "memory");
#line 524
  clp->cl_cons_state = state;
#line 525
  __wake_up(& nfs_client_active_wq, 3U, 0, (void *)0);
  }
#line 526
  return;
}
}
#line 527 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_mark_client_ready[22U]  = 
#line 527
  {      'n',      'f',      's',      '_', 
        'm',      'a',      'r',      'k', 
        '_',      'c',      'l',      'i', 
        'e',      'n',      't',      '_', 
        'r',      'e',      'a',      'd', 
        'y',      '\000'};
#line 527
struct kernel_symbol  const  __ksymtab_nfs_mark_client_ready ;
#line 527 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_mark_client_ready  =    {(unsigned long )(& nfs_mark_client_ready), (char const   *)(& __kstrtab_nfs_mark_client_ready)};
#line 532 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_init_timeout_values(struct rpc_timeout *to , int proto , unsigned int timeo ,
                             unsigned int retrans ) 
{ 


  {
#line 535
  to->to_initval = (unsigned long )((timeo * 250U) / 10U);
#line 536
  to->to_retries = retrans;
  {
#line 539
  if (proto == 6) {
#line 539
    goto case_6;
  } else {

  }
#line 540
  if (proto == 256) {
#line 540
    goto case_256;
  } else {

  }
#line 555
  if (proto == 17) {
#line 555
    goto case_17;
  } else {

  }
#line 565
  goto switch_default;
  case_6: /* CIL Label */ ;
  case_256: /* CIL Label */ ;
#line 541
  if (to->to_retries == 0U) {
#line 542
    to->to_retries = 2U;
  } else {

  }
#line 543
  if (to->to_initval == 0UL) {
#line 544
    to->to_initval = 15000UL;
  } else {

  }
#line 545
  if (to->to_initval > 150000UL) {
#line 546
    to->to_initval = 150000UL;
  } else {

  }
#line 547
  to->to_increment = to->to_initval;
#line 548
  to->to_maxval = to->to_initval + to->to_increment * (unsigned long )to->to_retries;
#line 549
  if (to->to_maxval > 150000UL) {
#line 550
    to->to_maxval = 150000UL;
  } else {

  }
#line 551
  if (to->to_maxval < to->to_initval) {
#line 552
    to->to_maxval = to->to_initval;
  } else {

  }
#line 553
  to->to_exponential = 0U;
#line 554
  goto ldv_56355;
  case_17: /* CIL Label */ ;
#line 556
  if (to->to_retries == 0U) {
#line 557
    to->to_retries = 3U;
  } else {

  }
#line 558
  if (to->to_initval == 0UL) {
#line 559
    to->to_initval = 275UL;
  } else {

  }
#line 560
  if (to->to_initval > 15000UL) {
#line 561
    to->to_initval = 15000UL;
  } else {

  }
#line 562
  to->to_maxval = 15000UL;
#line 563
  to->to_exponential = 1U;
#line 564
  goto ldv_56355;
  switch_default: /* CIL Label */ 
  {
#line 566
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/client.c"),
                       "i" (566), "i" (12UL));
#line 566
  __builtin_unreachable();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_56355: ;
#line 569
  return;
}
}
#line 569 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_init_timeout_values[24U]  = 
#line 569
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'i',      't', 
        '_',      't',      'i',      'm', 
        'e',      'o',      'u',      't', 
        '_',      'v',      'a',      'l', 
        'u',      'e',      's',      '\000'};
#line 569
struct kernel_symbol  const  __ksymtab_nfs_init_timeout_values ;
#line 569 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_init_timeout_values  =    {(unsigned long )(& nfs_init_timeout_values), (char const   *)(& __kstrtab_nfs_init_timeout_values)};
#line 574 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
int nfs_create_rpc_client(struct nfs_client *clp , struct rpc_timeout  const  *timeparms ,
                          rpc_authflavor_t flavor ) 
{ 
  struct rpc_clnt *clnt ;
  struct rpc_create_args args ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  bool tmp___8 ;

  {
  {
#line 578
  clnt = (struct rpc_clnt *)0;
#line 579
  args.net = clp->cl_net;
#line 579
  args.protocol = clp->cl_proto;
#line 579
  args.address = (struct sockaddr *)(& clp->cl_addr);
#line 579
  args.addrsize = clp->cl_addrlen;
#line 579
  args.saddress = 0;
#line 579
  args.timeout = timeparms;
#line 579
  args.servername = (char const   *)clp->cl_hostname;
#line 579
  args.program = & nfs_program;
#line 579
  args.prognumber = 0U;
#line 579
  args.version = (clp->rpc_ops)->version;
#line 579
  args.authflavor = flavor;
#line 579
  args.flags = 0UL;
#line 579
  args.client_name = 0;
#line 579
  args.bc_xprt = 0;
#line 591
  tmp = constant_test_bit(1L, (unsigned long const volatile   *)(& clp->cl_flags));
  }
#line 591
  if (tmp != 0) {
#line 592
    args.flags = args.flags | 32UL;
  } else {

  }
  {
#line 593
  tmp___0 = constant_test_bit(4L, (unsigned long const volatile   *)(& clp->cl_flags));
  }
#line 593
  if (tmp___0 != 0) {
#line 594
    args.flags = args.flags | 512UL;
  } else {

  }
  {
#line 595
  tmp___1 = constant_test_bit(0L, (unsigned long const volatile   *)(& clp->cl_flags));
  }
#line 595
  if (tmp___1 != 0) {
#line 596
    args.flags = args.flags | 8UL;
  } else {

  }
  {
#line 597
  tmp___2 = constant_test_bit(3L, (unsigned long const volatile   *)(& clp->cl_flags));
  }
#line 597
  if (tmp___2 != 0) {
#line 598
    args.flags = args.flags | 128UL;
  } else {

  }
  {
#line 600
  tmp___3 = IS_ERR((void const   *)clp->cl_rpcclient);
  }
#line 600
  if (tmp___3) {
#line 600
    tmp___4 = 0;
  } else {
#line 600
    tmp___4 = 1;
  }
#line 600
  if (tmp___4) {
#line 601
    return (0);
  } else {

  }
  {
#line 603
  clnt = rpc_create(& args);
#line 604
  tmp___8 = IS_ERR((void const   *)clnt);
  }
#line 604
  if ((int )tmp___8) {
    {
#line 605
    tmp___6 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
    }
#line 605
    if (tmp___6 != 0L) {
      {
#line 605
      tmp___5 = PTR_ERR((void const   *)clnt);
#line 605
      printk("\001d%s: cannot create RPC client. Error = %ld\n", "nfs_create_rpc_client",
             tmp___5);
      }
    } else {

    }
    {
#line 607
    tmp___7 = PTR_ERR((void const   *)clnt);
    }
#line 607
    return ((int )tmp___7);
  } else {

  }
#line 610
  clp->cl_rpcclient = clnt;
#line 611
  return (0);
}
}
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_create_rpc_client[22U]  = 
#line 613
  {      'n',      'f',      's',      '_', 
        'c',      'r',      'e',      'a', 
        't',      'e',      '_',      'r', 
        'p',      'c',      '_',      'c', 
        'l',      'i',      'e',      'n', 
        't',      '\000'};
#line 613
struct kernel_symbol  const  __ksymtab_nfs_create_rpc_client ;
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_create_rpc_client  =    {(unsigned long )(& nfs_create_rpc_client), (char const   *)(& __kstrtab_nfs_create_rpc_client)};
#line 618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void nfs_destroy_server(struct nfs_server *server ) 
{ 


  {
#line 620
  if ((unsigned long )server->nlm_host != (unsigned long )((struct nlm_host *)0)) {
    {
#line 621
    nlmclnt_done(server->nlm_host);
    }
  } else {

  }
#line 622
  return;
}
}
#line 627 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_start_lockd(struct nfs_server *server ) 
{ 
  struct nlm_host *host ;
  struct nfs_client *clp ;
  struct nlmclnt_initdata nlm_init ;
  long tmp ;
  bool tmp___0 ;

  {
#line 630
  clp = server->nfs_client;
#line 631
  nlm_init.hostname = (char const   *)clp->cl_hostname;
#line 631
  nlm_init.address = (struct sockaddr  const  *)(& clp->cl_addr);
#line 631
  nlm_init.addrlen = clp->cl_addrlen;
#line 631
  nlm_init.protocol = (unsigned short)0;
#line 631
  nlm_init.nfs_version = (clp->rpc_ops)->version;
#line 631
  nlm_init.noresvport = (server->flags & 262144) != 0;
#line 631
  nlm_init.net = clp->cl_net;
#line 641
  if (nlm_init.nfs_version > 3U) {
#line 642
    return (0);
  } else {

  }
#line 643
  if (*((unsigned int *)server + 356UL) == 3145728U) {
#line 645
    return (0);
  } else {

  }
  {
#line 651
  if (clp->cl_proto == 17) {
#line 651
    goto case_17;
  } else {

  }
#line 648
  goto switch_default;
  switch_default: /* CIL Label */ 
#line 649
  nlm_init.protocol = 6U;
#line 650
  goto ldv_56395;
  case_17: /* CIL Label */ 
#line 652
  nlm_init.protocol = 17U;
  switch_break: /* CIL Label */ ;
  }
  ldv_56395: 
  {
#line 655
  host = nlmclnt_init((struct nlmclnt_initdata  const  *)(& nlm_init));
#line 656
  tmp___0 = IS_ERR((void const   *)host);
  }
#line 656
  if ((int )tmp___0) {
    {
#line 657
    tmp = PTR_ERR((void const   *)host);
    }
#line 657
    return ((int )tmp);
  } else {

  }
#line 659
  server->nlm_host = host;
#line 660
  server->destroy = & nfs_destroy_server;
#line 661
  return (0);
}
}
#line 667 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
int nfs_init_server_rpcclient(struct nfs_server *server , struct rpc_timeout  const  *timeo ,
                              rpc_authflavor_t pseudoflavour ) 
{ 
  struct nfs_client *clp ;
  long tmp ;
  long tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 671
  clp = server->nfs_client;
#line 673
  server->client = rpc_clone_client_set_auth(clp->cl_rpcclient, pseudoflavour);
#line 675
  tmp___1 = IS_ERR((void const   *)server->client);
  }
#line 675
  if ((int )tmp___1) {
    {
#line 676
    tmp = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
    }
#line 676
    if (tmp != 0L) {
      {
#line 676
      printk("\001d%s: couldn\'t create rpc_client!\n", "nfs_init_server_rpcclient");
      }
    } else {

    }
    {
#line 677
    tmp___0 = PTR_ERR((void const   *)server->client);
    }
#line 677
    return ((int )tmp___0);
  } else {

  }
  {
#line 680
  memcpy((void *)(& (server->client)->cl_timeout_default), (void const   *)timeo,
         32UL);
#line 683
  (server->client)->cl_timeout = (struct rpc_timeout  const  *)(& (server->client)->cl_timeout_default);
#line 684
  (server->client)->cl_softrtry = 0U;
  }
#line 685
  if (server->flags & 1) {
#line 686
    (server->client)->cl_softrtry = 1U;
  } else {

  }
#line 688
  return (0);
}
}
#line 690 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_init_server_rpcclient[26U]  = 
#line 690
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'i',      't', 
        '_',      's',      'e',      'r', 
        'v',      'e',      'r',      '_', 
        'r',      'p',      'c',      'c', 
        'l',      'i',      'e',      'n', 
        't',      '\000'};
#line 690
struct kernel_symbol  const  __ksymtab_nfs_init_server_rpcclient ;
#line 690 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_init_server_rpcclient  =    {(unsigned long )(& nfs_init_server_rpcclient), (char const   *)(& __kstrtab_nfs_init_server_rpcclient)};
#line 701 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct nfs_client *nfs_init_client(struct nfs_client *clp , struct rpc_timeout  const  *timeparms ,
                                   char const   *ip_addr ) 
{ 
  int error ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;

  {
#line 707
  if (clp->cl_cons_state == 0) {
    {
#line 709
    tmp = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
    }
#line 709
    if (tmp != 0L) {
      {
#line 709
      printk("\001d<-- nfs_init_client() = 0 [already %p]\n", clp);
      }
    } else {

    }
#line 710
    return (clp);
  } else {

  }
  {
#line 717
  error = nfs_create_rpc_client(clp, timeparms, 1U);
  }
#line 718
  if (error < 0) {
#line 719
    goto error;
  } else {

  }
  {
#line 720
  nfs_mark_client_ready(clp, 0);
  }
#line 721
  return (clp);
  error: 
  {
#line 724
  nfs_mark_client_ready(clp, error);
#line 725
  nfs_put_client(clp);
#line 726
  tmp___0 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 726
  if (tmp___0 != 0L) {
    {
#line 726
    printk("\001d<-- nfs_init_client() = xerror %d\n", error);
    }
  } else {

  }
  {
#line 727
  tmp___1 = ERR_PTR((long )error);
  }
#line 727
  return ((struct nfs_client *)tmp___1);
}
}
#line 729 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_init_client[16U]  = 
#line 729
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'i',      't', 
        '_',      'c',      'l',      'i', 
        'e',      'n',      't',      '\000'};
#line 729
struct kernel_symbol  const  __ksymtab_nfs_init_client ;
#line 729 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_init_client  =    {(unsigned long )(& nfs_init_client), (char const   *)(& __kstrtab_nfs_init_client)};
#line 734 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_init_server(struct nfs_server *server , struct nfs_parsed_mount_data  const  *data ,
                           struct nfs_subversion *nfs_mod ) 
{ 
  struct nfs_client_initdata cl_init ;
  struct rpc_timeout timeparms ;
  struct nfs_client *clp ;
  int error ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  bool tmp___3 ;
  unsigned long tmp___4 ;
  unsigned long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;

  {
  {
#line 738
  cl_init.init_flags = 0UL;
#line 738
  cl_init.hostname = (char const   *)data->nfs_server.hostname;
#line 738
  cl_init.addr = (struct sockaddr  const  *)(& data->nfs_server.address);
#line 738
  cl_init.addrlen = data->nfs_server.addrlen;
#line 738
  cl_init.nfs_mod = nfs_mod;
#line 738
  cl_init.proto = (int )data->nfs_server.protocol;
#line 738
  cl_init.minorversion = 0U;
#line 738
  cl_init.net = data->net;
#line 750
  tmp = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 750
  if (tmp != 0L) {
    {
#line 750
    printk("\001d--> nfs_init_server()\n");
    }
  } else {

  }
  {
#line 752
  nfs_init_timeout_values(& timeparms, (int )data->nfs_server.protocol, data->timeo,
                          data->retrans);
  }
#line 754
  if (((int )data->flags & 262144) != 0) {
    {
#line 755
    set_bit(0L, (unsigned long volatile   *)(& cl_init.init_flags));
    }
  } else {

  }
  {
#line 758
  clp = nfs_get_client((struct nfs_client_initdata  const  *)(& cl_init), (struct rpc_timeout  const  *)(& timeparms),
                       (char const   *)0, 1U);
#line 759
  tmp___3 = IS_ERR((void const   *)clp);
  }
#line 759
  if ((int )tmp___3) {
    {
#line 760
    tmp___1 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
    }
#line 760
    if (tmp___1 != 0L) {
      {
#line 760
      tmp___0 = PTR_ERR((void const   *)clp);
#line 760
      printk("\001d<-- nfs_init_server() = error %ld\n", tmp___0);
      }
    } else {

    }
    {
#line 761
    tmp___2 = PTR_ERR((void const   *)clp);
    }
#line 761
    return ((int )tmp___2);
  } else {

  }
#line 764
  server->nfs_client = clp;
#line 767
  server->flags = data->flags;
#line 768
  server->options = data->options;
#line 769
  server->caps = server->caps | 16358U;
#line 773
  if ((unsigned int )data->rsize != 0U) {
    {
#line 774
    tmp___4 = nfs_block_size((unsigned long )data->rsize, (unsigned char *)0U);
#line 774
    server->rsize = (unsigned int )tmp___4;
    }
  } else {

  }
#line 775
  if ((unsigned int )data->wsize != 0U) {
    {
#line 776
    tmp___5 = nfs_block_size((unsigned long )data->wsize, (unsigned char *)0U);
#line 776
    server->wsize = (unsigned int )tmp___5;
    }
  } else {

  }
  {
#line 778
  server->acregmin = (unsigned int )data->acregmin * 250U;
#line 779
  server->acregmax = (unsigned int )data->acregmax * 250U;
#line 780
  server->acdirmin = (unsigned int )data->acdirmin * 250U;
#line 781
  server->acdirmax = (unsigned int )data->acdirmax * 250U;
#line 784
  error = nfs_start_lockd(server);
  }
#line 785
  if (error < 0) {
#line 786
    goto error;
  } else {

  }
  {
#line 788
  server->port = (unsigned short )data->nfs_server.port;
#line 789
  server->auth_info = data->auth_info;
#line 791
  error = nfs_init_server_rpcclient(server, (struct rpc_timeout  const  *)(& timeparms),
                                    data->selected_flavor);
  }
#line 793
  if (error < 0) {
#line 794
    goto error;
  } else {

  }
#line 797
  if ((unsigned long )data->mount_server.addrlen != 0UL) {
    {
#line 798
    memcpy((void *)(& server->mountd_address), (void const   *)(& data->mount_server.address),
           data->mount_server.addrlen);
#line 800
    server->mountd_addrlen = data->mount_server.addrlen;
    }
  } else {

  }
  {
#line 802
  server->mountd_version = data->mount_server.version;
#line 803
  server->mountd_port = (unsigned short )data->mount_server.port;
#line 804
  server->mountd_protocol = data->mount_server.protocol;
#line 806
  server->namelen = data->namlen;
#line 807
  tmp___6 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 807
  if (tmp___6 != 0L) {
    {
#line 807
    printk("\001d<-- nfs_init_server() = 0 [new %p]\n", clp);
    }
  } else {

  }
#line 808
  return (0);
  error: 
  {
#line 811
  server->nfs_client = (struct nfs_client *)0;
#line 812
  nfs_put_client(clp);
#line 813
  tmp___7 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 813
  if (tmp___7 != 0L) {
    {
#line 813
    printk("\001d<-- nfs_init_server() = xerror %d\n", error);
    }
  } else {

  }
#line 814
  return (error);
}
}
#line 820 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void nfs_server_set_fsinfo(struct nfs_server *server , struct nfs_fh *mntfh ,
                                  struct nfs_fsinfo *fsinfo ) 
{ 
  unsigned long max_rpc_payload ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  size_t tmp___3 ;
  unsigned long tmp___4 ;
  unsigned long tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;

  {
#line 827
  if (server->rsize == 0U) {
    {
#line 828
    tmp = nfs_block_size((unsigned long )fsinfo->rtpref, (unsigned char *)0U);
#line 828
    server->rsize = (unsigned int )tmp;
    }
  } else {

  }
#line 829
  if (server->wsize == 0U) {
    {
#line 830
    tmp___0 = nfs_block_size((unsigned long )fsinfo->wtpref, (unsigned char *)0U);
#line 830
    server->wsize = (unsigned int )tmp___0;
    }
  } else {

  }
#line 832
  if (fsinfo->rtmax > 511U && server->rsize > fsinfo->rtmax) {
    {
#line 833
    tmp___1 = nfs_block_size((unsigned long )fsinfo->rtmax, (unsigned char *)0U);
#line 833
    server->rsize = (unsigned int )tmp___1;
    }
  } else {

  }
#line 834
  if (fsinfo->wtmax > 511U && server->wsize > fsinfo->wtmax) {
    {
#line 835
    tmp___2 = nfs_block_size((unsigned long )fsinfo->wtmax, (unsigned char *)0U);
#line 835
    server->wsize = (unsigned int )tmp___2;
    }
  } else {

  }
  {
#line 837
  tmp___3 = rpc_max_payload(server->client);
#line 837
  max_rpc_payload = nfs_block_size(tmp___3, (unsigned char *)0U);
  }
#line 838
  if ((unsigned long )server->rsize > max_rpc_payload) {
#line 839
    server->rsize = (unsigned int )max_rpc_payload;
  } else {

  }
#line 840
  if (server->rsize > 1048576U) {
#line 841
    server->rsize = 1048576U;
  } else {

  }
#line 842
  server->rpages = (unsigned int )(((unsigned long )server->rsize + 4095UL) >> 12);
#line 844
  server->backing_dev_info.name = (char *)"nfs";
#line 845
  server->backing_dev_info.ra_pages = (unsigned long )(server->rpages * 15U);
#line 847
  if ((unsigned long )server->wsize > max_rpc_payload) {
#line 848
    server->wsize = (unsigned int )max_rpc_payload;
  } else {

  }
#line 849
  if (server->wsize > 1048576U) {
#line 850
    server->wsize = 1048576U;
  } else {

  }
  {
#line 851
  server->wpages = (unsigned int )(((unsigned long )server->wsize + 4095UL) >> 12);
#line 853
  tmp___4 = nfs_block_bits((unsigned long )fsinfo->wtmult, (unsigned char *)0U);
#line 853
  server->wtmult = (unsigned int )tmp___4;
#line 855
  tmp___5 = nfs_block_size((unsigned long )fsinfo->dtpref, (unsigned char *)0U);
#line 855
  server->dtsize = (unsigned int )tmp___5;
  }
#line 856
  if (server->dtsize > 32768U) {
#line 857
    server->dtsize = 32768U;
  } else {

  }
#line 858
  if (server->dtsize > server->rsize) {
#line 859
    server->dtsize = server->rsize;
  } else {

  }
#line 861
  if ((server->flags & 32) != 0) {
#line 862
    tmp___6 = 0U;
#line 862
    server->acregmax = tmp___6;
#line 862
    server->acregmin = tmp___6;
#line 863
    tmp___7 = 0U;
#line 863
    server->acdirmax = tmp___7;
#line 863
    server->acdirmin = tmp___7;
  } else {

  }
  {
#line 866
  server->maxfilesize = fsinfo->maxfilesize;
#line 868
  server->time_delta = fsinfo->time_delta;
#line 871
  rpc_setbufsize(server->client, server->wsize + 100U, server->rsize + 100U);
  }
#line 872
  return;
}
}
#line 877 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
int nfs_probe_fsinfo(struct nfs_server *server , struct nfs_fh *mntfh , struct nfs_fattr *fattr ) 
{ 
  struct nfs_fsinfo fsinfo ;
  struct nfs_client *clp ;
  int error ;
  long tmp ;
  struct nfs_pathconf pathinfo ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 880
  clp = server->nfs_client;
#line 883
  tmp = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 883
  if (tmp != 0L) {
    {
#line 883
    printk("\001d--> nfs_probe_fsinfo()\n");
    }
  } else {

  }
#line 885
  if ((unsigned long )(clp->rpc_ops)->set_capabilities != (unsigned long )((int (*/* const  */)(struct nfs_server * ,
                                                                                                struct nfs_fh * ))0)) {
    {
#line 886
    error = (*((clp->rpc_ops)->set_capabilities))(server, mntfh);
    }
#line 887
    if (error < 0) {
#line 888
      goto out_error;
    } else {

    }
  } else {

  }
  {
#line 891
  fsinfo.fattr = fattr;
#line 892
  fsinfo.layouttype = 0U;
#line 893
  error = (*((clp->rpc_ops)->fsinfo))(server, mntfh, & fsinfo);
  }
#line 894
  if (error < 0) {
#line 895
    goto out_error;
  } else {

  }
  {
#line 897
  nfs_server_set_fsinfo(server, mntfh, & fsinfo);
  }
#line 900
  if (server->namelen == 0U) {
    {
#line 903
    pathinfo.fattr = fattr;
#line 904
    nfs_fattr_init(fattr);
#line 906
    tmp___0 = (*((clp->rpc_ops)->pathconf))(server, mntfh, & pathinfo);
    }
#line 906
    if (tmp___0 >= 0) {
#line 907
      server->namelen = pathinfo.max_namelen;
    } else {

    }
  } else {

  }
  {
#line 910
  tmp___1 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 910
  if (tmp___1 != 0L) {
    {
#line 910
    printk("\001d<-- nfs_probe_fsinfo() = 0\n");
    }
  } else {

  }
#line 911
  return (0);
  out_error: 
  {
#line 914
  tmp___2 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 914
  if (tmp___2 != 0L) {
    {
#line 914
    printk("\001dnfs_probe_fsinfo: error = %d\n", - error);
    }
  } else {

  }
#line 915
  return (error);
}
}
#line 917 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_probe_fsinfo[17U]  = 
#line 917
  {      'n',      'f',      's',      '_', 
        'p',      'r',      'o',      'b', 
        'e',      '_',      'f',      's', 
        'i',      'n',      'f',      'o', 
        '\000'};
#line 917
struct kernel_symbol  const  __ksymtab_nfs_probe_fsinfo ;
#line 917 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_probe_fsinfo  =    {(unsigned long )(& nfs_probe_fsinfo), (char const   *)(& __kstrtab_nfs_probe_fsinfo)};
#line 922 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_server_copy_userdata(struct nfs_server *target , struct nfs_server *source ) 
{ 


  {
#line 924
  target->flags = source->flags;
#line 925
  target->rsize = source->rsize;
#line 926
  target->wsize = source->wsize;
#line 927
  target->acregmin = source->acregmin;
#line 928
  target->acregmax = source->acregmax;
#line 929
  target->acdirmin = source->acdirmin;
#line 930
  target->acdirmax = source->acdirmax;
#line 931
  target->caps = source->caps;
#line 932
  target->options = source->options;
#line 933
  target->auth_info = source->auth_info;
#line 934
  return;
}
}
#line 935 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_server_copy_userdata[25U]  = 
#line 935
  {      'n',      'f',      's',      '_', 
        's',      'e',      'r',      'v', 
        'e',      'r',      '_',      'c', 
        'o',      'p',      'y',      '_', 
        'u',      's',      'e',      'r', 
        'd',      'a',      't',      'a', 
        '\000'};
#line 935
struct kernel_symbol  const  __ksymtab_nfs_server_copy_userdata ;
#line 935 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_server_copy_userdata  =    {(unsigned long )(& nfs_server_copy_userdata), (char const   *)(& __kstrtab_nfs_server_copy_userdata)};
#line 937 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_server_insert_lists(struct nfs_server *server ) 
{ 
  struct nfs_client *clp ;
  struct nfs_net *nn ;
  void *tmp ;

  {
  {
#line 939
  clp = server->nfs_client;
#line 940
  tmp = net_generic((struct net  const  *)clp->cl_net, nfs_net_id);
#line 940
  nn = (struct nfs_net *)tmp;
#line 942
  ldv_spin_lock_90(& nn->nfs_client_lock);
#line 943
  list_add_tail_rcu(& server->client_link, & clp->cl_superblocks);
#line 944
  list_add_tail(& server->master_link, & nn->nfs_volume_list);
#line 945
  clear_bit(4L, (unsigned long volatile   *)(& clp->cl_res_state));
#line 946
  ldv_spin_unlock_89(& nn->nfs_client_lock);
  }
#line 947
  return;
}
}
#line 949 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_server_insert_lists[24U]  = 
#line 949
  {      'n',      'f',      's',      '_', 
        's',      'e',      'r',      'v', 
        'e',      'r',      '_',      'i', 
        'n',      's',      'e',      'r', 
        't',      '_',      'l',      'i', 
        's',      't',      's',      '\000'};
#line 949
struct kernel_symbol  const  __ksymtab_nfs_server_insert_lists ;
#line 949 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_server_insert_lists  =    {(unsigned long )(& nfs_server_insert_lists), (char const   *)(& __kstrtab_nfs_server_insert_lists)};
#line 951 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_server_remove_lists(struct nfs_server *server ) 
{ 
  struct nfs_client *clp ;
  struct nfs_net *nn ;
  void *tmp ;
  int tmp___0 ;

  {
#line 953
  clp = server->nfs_client;
#line 956
  if ((unsigned long )clp == (unsigned long )((struct nfs_client *)0)) {
#line 957
    return;
  } else {

  }
  {
#line 958
  tmp = net_generic((struct net  const  *)clp->cl_net, nfs_net_id);
#line 958
  nn = (struct nfs_net *)tmp;
#line 959
  ldv_spin_lock_90(& nn->nfs_client_lock);
#line 960
  list_del_rcu(& server->client_link);
#line 961
  tmp___0 = list_empty((struct list_head  const  *)(& clp->cl_superblocks));
  }
#line 961
  if (tmp___0 != 0) {
    {
#line 962
    set_bit(4L, (unsigned long volatile   *)(& clp->cl_res_state));
    }
  } else {

  }
  {
#line 963
  list_del(& server->master_link);
#line 964
  ldv_spin_unlock_89(& nn->nfs_client_lock);
#line 966
  synchronize_rcu();
  }
#line 967
  return;
}
}
#line 968 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_server_remove_lists[24U]  = 
#line 968
  {      'n',      'f',      's',      '_', 
        's',      'e',      'r',      'v', 
        'e',      'r',      '_',      'r', 
        'e',      'm',      'o',      'v', 
        'e',      '_',      'l',      'i', 
        's',      't',      's',      '\000'};
#line 968
struct kernel_symbol  const  __ksymtab_nfs_server_remove_lists ;
#line 968 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_server_remove_lists  =    {(unsigned long )(& nfs_server_remove_lists), (char const   *)(& __kstrtab_nfs_server_remove_lists)};
#line 973 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct nfs_server *nfs_alloc_server(void) 
{ 
  struct nfs_server *server ;
  void *tmp ;
  struct rpc_clnt *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;

  {
  {
#line 977
  tmp = kzalloc(2464UL, 208U);
#line 977
  server = (struct nfs_server *)tmp;
  }
#line 978
  if ((unsigned long )server == (unsigned long )((struct nfs_server *)0)) {
#line 979
    return ((struct nfs_server *)0);
  } else {

  }
  {
#line 981
  tmp___1 = ERR_PTR(-22L);
#line 981
  tmp___0 = (struct rpc_clnt *)tmp___1;
#line 981
  server->client_acl = tmp___0;
#line 981
  server->client = tmp___0;
#line 984
  INIT_LIST_HEAD(& server->client_link);
#line 985
  INIT_LIST_HEAD(& server->master_link);
#line 986
  INIT_LIST_HEAD(& server->delegations);
#line 987
  INIT_LIST_HEAD(& server->layouts);
#line 988
  INIT_LIST_HEAD(& server->state_owners_lru);
#line 990
  atomic_set(& server->active, 0);
#line 992
  server->io_stats = nfs_alloc_iostats();
  }
#line 993
  if ((unsigned long )server->io_stats == (unsigned long )((struct nfs_iostats *)0)) {
    {
#line 994
    kfree((void const   *)server);
    }
#line 995
    return ((struct nfs_server *)0);
  } else {

  }
  {
#line 998
  tmp___2 = bdi_init(& server->backing_dev_info);
  }
#line 998
  if (tmp___2 != 0) {
    {
#line 999
    nfs_free_iostats(server->io_stats);
#line 1000
    kfree((void const   *)server);
    }
#line 1001
    return ((struct nfs_server *)0);
  } else {

  }
  {
#line 1004
  ida_init(& server->openowner_id);
#line 1005
  ida_init(& server->lockowner_id);
#line 1006
  pnfs_init_server(server);
  }
#line 1008
  return (server);
}
}
#line 1010 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_alloc_server[17U]  = 
#line 1010
  {      'n',      'f',      's',      '_', 
        'a',      'l',      'l',      'o', 
        'c',      '_',      's',      'e', 
        'r',      'v',      'e',      'r', 
        '\000'};
#line 1010
struct kernel_symbol  const  __ksymtab_nfs_alloc_server ;
#line 1010 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_alloc_server  =    {(unsigned long )(& nfs_alloc_server), (char const   *)(& __kstrtab_nfs_alloc_server)};
#line 1015 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_free_server(struct nfs_server *server ) 
{ 
  long tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;

  {
  {
#line 1017
  tmp = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 1017
  if (tmp != 0L) {
    {
#line 1017
    printk("\001d--> nfs_free_server()\n");
    }
  } else {

  }
  {
#line 1019
  nfs_server_remove_lists(server);
  }
#line 1021
  if ((unsigned long )server->destroy != (unsigned long )((void (*)(struct nfs_server * ))0)) {
    {
#line 1022
    (*(server->destroy))(server);
    }
  } else {

  }
  {
#line 1024
  tmp___0 = IS_ERR((void const   *)server->client_acl);
  }
#line 1024
  if (tmp___0) {
#line 1024
    tmp___1 = 0;
  } else {
#line 1024
    tmp___1 = 1;
  }
#line 1024
  if (tmp___1) {
    {
#line 1025
    rpc_shutdown_client(server->client_acl);
    }
  } else {

  }
  {
#line 1026
  tmp___2 = IS_ERR((void const   *)server->client);
  }
#line 1026
  if (tmp___2) {
#line 1026
    tmp___3 = 0;
  } else {
#line 1026
    tmp___3 = 1;
  }
#line 1026
  if (tmp___3) {
    {
#line 1027
    rpc_shutdown_client(server->client);
    }
  } else {

  }
  {
#line 1029
  nfs_put_client(server->nfs_client);
#line 1031
  ida_destroy(& server->lockowner_id);
#line 1032
  ida_destroy(& server->openowner_id);
#line 1033
  nfs_free_iostats(server->io_stats);
#line 1034
  bdi_destroy(& server->backing_dev_info);
#line 1035
  kfree((void const   *)server);
#line 1036
  nfs_release_automount_timer();
#line 1037
  tmp___4 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 1037
  if (tmp___4 != 0L) {
    {
#line 1037
    printk("\001d<-- nfs_free_server()\n");
    }
  } else {

  }
#line 1038
  return;
}
}
#line 1039 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_free_server[16U]  = 
#line 1039
  {      'n',      'f',      's',      '_', 
        'f',      'r',      'e',      'e', 
        '_',      's',      'e',      'r', 
        'v',      'e',      'r',      '\000'};
#line 1039
struct kernel_symbol  const  __ksymtab_nfs_free_server ;
#line 1039 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_free_server  =    {(unsigned long )(& nfs_free_server), (char const   *)(& __kstrtab_nfs_free_server)};
#line 1045 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct nfs_server *nfs_create_server(struct nfs_mount_info *mount_info , struct nfs_subversion *nfs_mod ) 
{ 
  struct nfs_server *server ;
  struct nfs_fattr *fattr ;
  int error ;
  void *tmp ;
  long tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;

  {
  {
#line 1052
  server = nfs_alloc_server();
  }
#line 1053
  if ((unsigned long )server == (unsigned long )((struct nfs_server *)0)) {
    {
#line 1054
    tmp = ERR_PTR(-12L);
    }
#line 1054
    return ((struct nfs_server *)tmp);
  } else {

  }
  {
#line 1056
  error = -12;
#line 1057
  fattr = nfs_alloc_fattr();
  }
#line 1058
  if ((unsigned long )fattr == (unsigned long )((struct nfs_fattr *)0)) {
#line 1059
    goto error;
  } else {

  }
  {
#line 1062
  error = nfs_init_server(server, (struct nfs_parsed_mount_data  const  *)mount_info->parsed,
                          nfs_mod);
  }
#line 1063
  if (error < 0) {
#line 1064
    goto error;
  } else {

  }
  {
#line 1067
  error = nfs_probe_fsinfo(server, mount_info->mntfh, fattr);
  }
#line 1068
  if (error < 0) {
#line 1069
    goto error;
  } else {

  }
#line 1070
  if ((unsigned int )((server->nfs_client)->rpc_ops)->version == 3U) {
#line 1071
    if (server->namelen - 1U > 254U) {
#line 1072
      server->namelen = 255U;
    } else {

    }
#line 1073
    if (((mount_info->parsed)->flags & 16384) == 0) {
#line 1074
      server->caps = server->caps | 1U;
    } else {

    }
  } else
#line 1076
  if (server->namelen - 1U > 254U) {
#line 1077
    server->namelen = 255U;
  } else {

  }
#line 1080
  if ((fattr->valid & 162943U) == 0U) {
    {
#line 1081
    error = (*((nfs_mod->rpc_ops)->getattr))(server, mount_info->mntfh, fattr, (struct nfs4_label *)0);
    }
#line 1082
    if (error < 0) {
      {
#line 1083
      tmp___0 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
      }
#line 1083
      if (tmp___0 != 0L) {
        {
#line 1083
        printk("\001dnfs_create_server: getattr error = %d\n", - error);
        }
      } else {

      }
#line 1084
      goto error;
    } else {

    }
  } else {

  }
  {
#line 1087
  memcpy((void *)(& server->fsid), (void const   *)(& fattr->fsid), 16UL);
#line 1089
  tmp___1 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 1089
  if (tmp___1 != 0L) {
    {
#line 1089
    printk("\001dServer FSID: %llx:%llx\n", server->fsid.major, server->fsid.minor);
    }
  } else {

  }
  {
#line 1093
  nfs_server_insert_lists(server);
#line 1094
  server->mount_time = jiffies;
#line 1095
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
  }
#line 1096
  return (server);
  error: 
  {
#line 1099
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
#line 1100
  nfs_free_server(server);
#line 1101
  tmp___2 = ERR_PTR((long )error);
  }
#line 1101
  return ((struct nfs_server *)tmp___2);
}
}
#line 1103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_create_server[18U]  = 
#line 1103
  {      'n',      'f',      's',      '_', 
        'c',      'r',      'e',      'a', 
        't',      'e',      '_',      's', 
        'e',      'r',      'v',      'e', 
        'r',      '\000'};
#line 1103
struct kernel_symbol  const  __ksymtab_nfs_create_server ;
#line 1103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_create_server  =    {(unsigned long )(& nfs_create_server), (char const   *)(& __kstrtab_nfs_create_server)};
#line 1108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct nfs_server *nfs_clone_server(struct nfs_server *source , struct nfs_fh *fh ,
                                    struct nfs_fattr *fattr , rpc_authflavor_t flavor ) 
{ 
  struct nfs_server *server ;
  struct nfs_fattr *fattr_fsinfo ;
  int error ;
  long tmp ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;

  {
  {
#line 1117
  tmp = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 1117
  if (tmp != 0L) {
    {
#line 1117
    printk("\001d--> nfs_clone_server(,%llx:%llx,)\n", fattr->fsid.major, fattr->fsid.minor);
    }
  } else {

  }
  {
#line 1121
  server = nfs_alloc_server();
  }
#line 1122
  if ((unsigned long )server == (unsigned long )((struct nfs_server *)0)) {
    {
#line 1123
    tmp___0 = ERR_PTR(-12L);
    }
#line 1123
    return ((struct nfs_server *)tmp___0);
  } else {

  }
  {
#line 1125
  error = -12;
#line 1126
  fattr_fsinfo = nfs_alloc_fattr();
  }
#line 1127
  if ((unsigned long )fattr_fsinfo == (unsigned long )((struct nfs_fattr *)0)) {
#line 1128
    goto out_free_server;
  } else {

  }
  {
#line 1131
  server->nfs_client = source->nfs_client;
#line 1132
  server->destroy = source->destroy;
#line 1133
  atomic_inc(& (server->nfs_client)->cl_count);
#line 1134
  nfs_server_copy_userdata(server, source);
#line 1136
  server->fsid = fattr->fsid;
#line 1138
  error = nfs_init_server_rpcclient(server, (source->client)->cl_timeout, flavor);
  }
#line 1141
  if (error < 0) {
#line 1142
    goto out_free_server;
  } else {

  }
  {
#line 1145
  error = nfs_probe_fsinfo(server, fh, fattr_fsinfo);
  }
#line 1146
  if (error < 0) {
#line 1147
    goto out_free_server;
  } else {

  }
#line 1149
  if (server->namelen - 1U > 254U) {
#line 1150
    server->namelen = 255U;
  } else {

  }
  {
#line 1152
  tmp___1 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 1152
  if (tmp___1 != 0L) {
    {
#line 1152
    printk("\001dCloned FSID: %llx:%llx\n", server->fsid.major, server->fsid.minor);
    }
  } else {

  }
  {
#line 1156
  error = nfs_start_lockd(server);
  }
#line 1157
  if (error < 0) {
#line 1158
    goto out_free_server;
  } else {

  }
  {
#line 1160
  nfs_server_insert_lists(server);
#line 1161
  server->mount_time = jiffies;
#line 1163
  nfs_free_fattr((struct nfs_fattr  const  *)fattr_fsinfo);
#line 1164
  tmp___2 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 1164
  if (tmp___2 != 0L) {
    {
#line 1164
    printk("\001d<-- nfs_clone_server() = %p\n", server);
    }
  } else {

  }
#line 1165
  return (server);
  out_free_server: 
  {
#line 1168
  nfs_free_fattr((struct nfs_fattr  const  *)fattr_fsinfo);
#line 1169
  nfs_free_server(server);
#line 1170
  tmp___3 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
  }
#line 1170
  if (tmp___3 != 0L) {
    {
#line 1170
    printk("\001d<-- nfs_clone_server() = error %d\n", error);
    }
  } else {

  }
  {
#line 1171
  tmp___4 = ERR_PTR((long )error);
  }
#line 1171
  return ((struct nfs_server *)tmp___4);
}
}
#line 1173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static char const   __kstrtab_nfs_clone_server[17U]  = 
#line 1173
  {      'n',      'f',      's',      '_', 
        'c',      'l',      'o',      'n', 
        'e',      '_',      's',      'e', 
        'r',      'v',      'e',      'r', 
        '\000'};
#line 1173
struct kernel_symbol  const  __ksymtab_nfs_clone_server ;
#line 1173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
struct kernel_symbol  const  __ksymtab_nfs_clone_server  =    {(unsigned long )(& nfs_clone_server), (char const   *)(& __kstrtab_nfs_clone_server)};
#line 1175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_clients_init(struct net *net ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;
  struct lock_class_key __key ;

  {
  {
#line 1177
  tmp = net_generic((struct net  const  *)net, nfs_net_id);
#line 1177
  nn = (struct nfs_net *)tmp;
#line 1179
  INIT_LIST_HEAD(& nn->nfs_client_list);
#line 1180
  INIT_LIST_HEAD(& nn->nfs_volume_list);
#line 1182
  idr_init(& nn->cb_ident_idr);
#line 1184
  spinlock_check(& nn->nfs_client_lock);
#line 1184
  __raw_spin_lock_init(& nn->nfs_client_lock.__annonCompField18.rlock, "&(&nn->nfs_client_lock)->rlock",
                       & __key);
#line 1185
  nn->boot_time = current_kernel_time();
  }
#line 1186
  return;
}
}
#line 1189 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct proc_dir_entry *proc_fs_nfs  ;
#line 1191
static int nfs_server_list_open(struct inode *inode , struct file *file ) ;
#line 1192
static void *nfs_server_list_start(struct seq_file *m , loff_t *_pos ) ;
#line 1193
static void *nfs_server_list_next(struct seq_file *p , void *v , loff_t *pos ) ;
#line 1194
static void nfs_server_list_stop(struct seq_file *p , void *v ) ;
#line 1195
static int nfs_server_list_show(struct seq_file *m , void *v ) ;
#line 1197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct seq_operations  const  nfs_server_list_ops  =    {& nfs_server_list_start, & nfs_server_list_stop, & nfs_server_list_next, & nfs_server_list_show};
#line 1204 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct file_operations  const  nfs_server_list_fops  = 
#line 1204
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, & nfs_server_list_open,
    0, & seq_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 1212
static int nfs_volume_list_open(struct inode *inode , struct file *file ) ;
#line 1213
static void *nfs_volume_list_start(struct seq_file *m , loff_t *_pos ) ;
#line 1214
static void *nfs_volume_list_next(struct seq_file *p , void *v , loff_t *pos ) ;
#line 1215
static void nfs_volume_list_stop(struct seq_file *p , void *v ) ;
#line 1216
static int nfs_volume_list_show(struct seq_file *m , void *v ) ;
#line 1218 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct seq_operations  const  nfs_volume_list_ops  =    {& nfs_volume_list_start, & nfs_volume_list_stop, & nfs_volume_list_next, & nfs_volume_list_show};
#line 1225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static struct file_operations  const  nfs_volume_list_fops  = 
#line 1225
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, & nfs_volume_list_open,
    0, & seq_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 1237 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_server_list_open(struct inode *inode , struct file *file ) 
{ 
  struct seq_file *m ;
  int ret ;
  struct pid_namespace *pid_ns ;
  struct net *net ;

  {
  {
#line 1241
  pid_ns = (struct pid_namespace *)((file->f_path.dentry)->d_sb)->s_fs_info;
#line 1242
  net = ((pid_ns->child_reaper)->nsproxy)->net_ns;
#line 1244
  ret = ldv_seq_open_98(file, & nfs_server_list_ops);
  }
#line 1245
  if (ret < 0) {
#line 1246
    return (ret);
  } else {

  }
#line 1248
  m = (struct seq_file *)file->private_data;
#line 1249
  m->private = (void *)net;
#line 1251
  return (0);
}
}
#line 1257 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void *nfs_server_list_start(struct seq_file *m , loff_t *_pos ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;
  struct list_head *tmp___0 ;

  {
  {
#line 1259
  tmp = net_generic((struct net  const  *)m->private, nfs_net_id);
#line 1259
  nn = (struct nfs_net *)tmp;
#line 1262
  ldv_spin_lock_90(& nn->nfs_client_lock);
#line 1263
  tmp___0 = seq_list_start_head(& nn->nfs_client_list, *_pos);
  }
#line 1263
  return ((void *)tmp___0);
}
}
#line 1269 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void *nfs_server_list_next(struct seq_file *p , void *v , loff_t *pos ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;
  struct list_head *tmp___0 ;

  {
  {
#line 1271
  tmp = net_generic((struct net  const  *)p->private, nfs_net_id);
#line 1271
  nn = (struct nfs_net *)tmp;
#line 1273
  tmp___0 = seq_list_next(v, & nn->nfs_client_list, pos);
  }
#line 1273
  return ((void *)tmp___0);
}
}
#line 1279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void nfs_server_list_stop(struct seq_file *p , void *v ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;

  {
  {
#line 1281
  tmp = net_generic((struct net  const  *)p->private, nfs_net_id);
#line 1281
  nn = (struct nfs_net *)tmp;
#line 1283
  ldv_spin_unlock_89(& nn->nfs_client_lock);
  }
#line 1284
  return;
}
}
#line 1289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_server_list_show(struct seq_file *m , void *v ) 
{ 
  struct nfs_client *clp ;
  struct nfs_net *nn ;
  void *tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
  {
#line 1292
  tmp = net_generic((struct net  const  *)m->private, nfs_net_id);
#line 1292
  nn = (struct nfs_net *)tmp;
  }
#line 1295
  if ((unsigned long )v == (unsigned long )((void *)(& nn->nfs_client_list))) {
    {
#line 1296
    seq_puts(m, "NV SERVER   PORT USE HOSTNAME\n");
    }
#line 1297
    return (0);
  } else {

  }
#line 1301
  __mptr = (struct list_head  const  *)v;
#line 1301
  clp = (struct nfs_client *)((char *)__mptr + 0xffffffffffffff50UL);
#line 1304
  if (clp->cl_cons_state != 0) {
#line 1305
    return (0);
  } else {

  }
  {
#line 1307
  rcu_read_lock();
#line 1308
  tmp___0 = atomic_read((atomic_t const   *)(& clp->cl_count));
#line 1308
  tmp___1 = rpc_peeraddr2str(clp->cl_rpcclient, 4);
#line 1308
  tmp___2 = rpc_peeraddr2str(clp->cl_rpcclient, 3);
#line 1308
  seq_printf(m, "v%u %s %s %3d %s\n", (clp->rpc_ops)->version, tmp___2, tmp___1, tmp___0,
             clp->cl_hostname);
#line 1314
  rcu_read_unlock();
  }
#line 1316
  return (0);
}
}
#line 1322 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_volume_list_open(struct inode *inode , struct file *file ) 
{ 
  struct seq_file *m ;
  int ret ;
  struct pid_namespace *pid_ns ;
  struct net *net ;

  {
  {
#line 1326
  pid_ns = (struct pid_namespace *)((file->f_path.dentry)->d_sb)->s_fs_info;
#line 1327
  net = ((pid_ns->child_reaper)->nsproxy)->net_ns;
#line 1329
  ret = ldv_seq_open_101(file, & nfs_volume_list_ops);
  }
#line 1330
  if (ret < 0) {
#line 1331
    return (ret);
  } else {

  }
#line 1333
  m = (struct seq_file *)file->private_data;
#line 1334
  m->private = (void *)net;
#line 1336
  return (0);
}
}
#line 1342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void *nfs_volume_list_start(struct seq_file *m , loff_t *_pos ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;
  struct list_head *tmp___0 ;

  {
  {
#line 1344
  tmp = net_generic((struct net  const  *)m->private, nfs_net_id);
#line 1344
  nn = (struct nfs_net *)tmp;
#line 1347
  ldv_spin_lock_90(& nn->nfs_client_lock);
#line 1348
  tmp___0 = seq_list_start_head(& nn->nfs_volume_list, *_pos);
  }
#line 1348
  return ((void *)tmp___0);
}
}
#line 1354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void *nfs_volume_list_next(struct seq_file *p , void *v , loff_t *pos ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;
  struct list_head *tmp___0 ;

  {
  {
#line 1356
  tmp = net_generic((struct net  const  *)p->private, nfs_net_id);
#line 1356
  nn = (struct nfs_net *)tmp;
#line 1358
  tmp___0 = seq_list_next(v, & nn->nfs_volume_list, pos);
  }
#line 1358
  return ((void *)tmp___0);
}
}
#line 1364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static void nfs_volume_list_stop(struct seq_file *p , void *v ) 
{ 
  struct nfs_net *nn ;
  void *tmp ;

  {
  {
#line 1366
  tmp = net_generic((struct net  const  *)p->private, nfs_net_id);
#line 1366
  nn = (struct nfs_net *)tmp;
#line 1368
  ldv_spin_unlock_89(& nn->nfs_client_lock);
  }
#line 1369
  return;
}
}
#line 1374 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
static int nfs_volume_list_show(struct seq_file *m , void *v ) 
{ 
  struct nfs_server *server ;
  struct nfs_client *clp ;
  char dev[8U] ;
  char fsid[17U] ;
  struct nfs_net *nn ;
  void *tmp ;
  struct list_head  const  *__mptr ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
  {
#line 1379
  tmp = net_generic((struct net  const  *)m->private, nfs_net_id);
#line 1379
  nn = (struct nfs_net *)tmp;
  }
#line 1382
  if ((unsigned long )v == (unsigned long )((void *)(& nn->nfs_volume_list))) {
    {
#line 1383
    seq_puts(m, "NV SERVER   PORT DEV     FSID              FSC\n");
    }
#line 1384
    return (0);
  } else {

  }
  {
#line 1387
  __mptr = (struct list_head  const  *)v;
#line 1387
  server = (struct nfs_server *)((char *)__mptr + 0xffffffffffffffe8UL);
#line 1388
  clp = server->nfs_client;
#line 1390
  snprintf((char *)(& dev), 8UL, "%u:%u", server->s_dev >> 20, server->s_dev & 1048575U);
#line 1393
  snprintf((char *)(& fsid), 17UL, "%llx:%llx", server->fsid.major, server->fsid.minor);
#line 1397
  rcu_read_lock();
#line 1398
  tmp___0 = nfs_server_fscache_state(server);
#line 1398
  tmp___1 = rpc_peeraddr2str(clp->cl_rpcclient, 4);
#line 1398
  tmp___2 = rpc_peeraddr2str(clp->cl_rpcclient, 3);
#line 1398
  seq_printf(m, "v%u %s %s %-7s %-17s %s\n", (clp->rpc_ops)->version, tmp___2, tmp___1,
             (char *)(& dev), (char *)(& fsid), tmp___0);
#line 1405
  rcu_read_unlock();
  }
#line 1407
  return (0);
}
}
#line 1413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
int nfs_fs_proc_init(void) 
{ 
  struct proc_dir_entry *p ;

  {
  {
#line 1417
  proc_fs_nfs = proc_mkdir("fs/nfsfs", (struct proc_dir_entry *)0);
  }
#line 1418
  if ((unsigned long )proc_fs_nfs == (unsigned long )((struct proc_dir_entry *)0)) {
#line 1419
    goto error_0;
  } else {

  }
  {
#line 1422
  p = proc_create("servers", 33060, proc_fs_nfs, & nfs_server_list_fops);
  }
#line 1424
  if ((unsigned long )p == (unsigned long )((struct proc_dir_entry *)0)) {
#line 1425
    goto error_1;
  } else {

  }
  {
#line 1428
  p = proc_create("volumes", 33060, proc_fs_nfs, & nfs_volume_list_fops);
  }
#line 1430
  if ((unsigned long )p == (unsigned long )((struct proc_dir_entry *)0)) {
#line 1431
    goto error_2;
  } else {

  }
#line 1432
  return (0);
  error_2: 
  {
#line 1435
  remove_proc_entry("servers", proc_fs_nfs);
  }
  error_1: 
  {
#line 1437
  remove_proc_entry("fs/nfsfs", (struct proc_dir_entry *)0);
  }
  error_0: ;
#line 1439
  return (-12);
}
}
#line 1445 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/client.c"
void nfs_fs_proc_exit(void) 
{ 


  {
  {
#line 1447
  remove_proc_entry("volumes", proc_fs_nfs);
#line 1448
  remove_proc_entry("servers", proc_fs_nfs);
#line 1449
  remove_proc_entry("fs/nfsfs", (struct proc_dir_entry *)0);
  }
#line 1450
  return;
}
}
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_4(void *arg0 ) ;
#line 236
void ldv_character_driver_scenario_5(void *arg0 ) ;
#line 237
void ldv_character_driver_scenario_callback_4_22(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) ;
#line 238
void ldv_character_driver_scenario_callback_4_25(int (*arg0)(struct file * , fl_owner_t  ) ,
                                                 struct file *arg1 , struct files_struct *arg2 ) ;
#line 239
void ldv_character_driver_scenario_callback_4_28(int (*arg0)(struct file * , loff_t  ,
                                                             loff_t  , int  ) , struct file *arg1 ,
                                                 long long arg2 , long long arg3 ,
                                                 int arg4 ) ;
#line 240
void ldv_character_driver_scenario_callback_4_31(int (*arg0)(struct file * , struct dir_context * ) ,
                                                 struct file *arg1 , struct dir_context *arg2 ) ;
#line 241
void ldv_character_driver_scenario_callback_4_34(loff_t (*arg0)(struct file * , loff_t  ,
                                                                int  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) ;
#line 242
void ldv_character_driver_scenario_callback_4_37(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) ;
#line 243
void ldv_character_driver_scenario_callback_4_40(int (*arg0)(struct file * , struct vm_area_struct * ) ,
                                                 struct file *arg1 , struct vm_area_struct *arg2 ) ;
#line 244
void ldv_character_driver_scenario_callback_4_43(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 245
void ldv_character_driver_scenario_callback_4_46(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) ;
#line 246
void ldv_character_driver_scenario_callback_4_47(int (*arg0)(struct file * , ssize_t  ,
                                                             struct file_lock ** ) ,
                                                 struct file *arg1 , long arg2 , struct file_lock **arg3 ) ;
#line 247
void ldv_character_driver_scenario_callback_4_5(int (*arg0)(int  ) , int arg1 ) ;
#line 248
void ldv_character_driver_scenario_callback_4_50(ssize_t (*arg0)(struct file * , loff_t * ,
                                                                 struct pipe_inode_info * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct file *arg1 , long long *arg2 ,
                                                 struct pipe_inode_info *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) ;
#line 249
void ldv_character_driver_scenario_callback_4_53(ssize_t (*arg0)(struct pipe_inode_info * ,
                                                                 struct file * , loff_t * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct pipe_inode_info *arg1 , struct file *arg2 ,
                                                 long long *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) ;
#line 250
void ldv_character_driver_scenario_callback_4_56(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) ;
#line 251
void ldv_character_driver_scenario_callback_5_22(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) ;
#line 252
void ldv_character_driver_scenario_callback_5_25(int (*arg0)(struct file * , fl_owner_t  ) ,
                                                 struct file *arg1 , struct files_struct *arg2 ) ;
#line 253
void ldv_character_driver_scenario_callback_5_28(int (*arg0)(struct file * , loff_t  ,
                                                             loff_t  , int  ) , struct file *arg1 ,
                                                 long long arg2 , long long arg3 ,
                                                 int arg4 ) ;
#line 254
void ldv_character_driver_scenario_callback_5_31(int (*arg0)(struct file * , struct dir_context * ) ,
                                                 struct file *arg1 , struct dir_context *arg2 ) ;
#line 255
void ldv_character_driver_scenario_callback_5_34(loff_t (*arg0)(struct file * , loff_t  ,
                                                                int  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) ;
#line 256
void ldv_character_driver_scenario_callback_5_37(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) ;
#line 257
void ldv_character_driver_scenario_callback_5_40(int (*arg0)(struct file * , struct vm_area_struct * ) ,
                                                 struct file *arg1 , struct vm_area_struct *arg2 ) ;
#line 258
void ldv_character_driver_scenario_callback_5_43(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 259
void ldv_character_driver_scenario_callback_5_46(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) ;
#line 260
void ldv_character_driver_scenario_callback_5_47(int (*arg0)(struct file * , ssize_t  ,
                                                             struct file_lock ** ) ,
                                                 struct file *arg1 , long arg2 , struct file_lock **arg3 ) ;
#line 261
void ldv_character_driver_scenario_callback_5_5(int (*arg0)(int  ) , int arg1 ) ;
#line 262
void ldv_character_driver_scenario_callback_5_50(ssize_t (*arg0)(struct file * , loff_t * ,
                                                                 struct pipe_inode_info * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct file *arg1 , long long *arg2 ,
                                                 struct pipe_inode_info *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) ;
#line 263
void ldv_character_driver_scenario_callback_5_53(ssize_t (*arg0)(struct pipe_inode_info * ,
                                                                 struct file * , loff_t * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct pipe_inode_info *arg1 , struct file *arg2 ,
                                                 long long *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) ;
#line 264
void ldv_character_driver_scenario_callback_5_56(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) ;
#line 265
int ldv_character_driver_scenario_probe_4_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 266
int ldv_character_driver_scenario_probe_5_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 267
void ldv_character_driver_scenario_release_4_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 268
void ldv_character_driver_scenario_release_5_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 269
void ldv_character_driver_scenario_write_4_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 270
void ldv_character_driver_scenario_write_5_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 271
void ldv_dispatch_register_9_1(struct seq_file *arg0 , struct seq_operations *arg1 ) ;
#line 272
int ldv_emg_seq_open(struct file *arg0 , struct seq_operations *arg1 ) ;
#line 273
void ldv_traverse_kernel_items_scenario_6(void *arg0 ) ;
#line 274
void ldv_traverse_kernel_items_scenario_7(void *arg0 ) ;
#line 275
void *ldv_traverse_kernel_items_scenario_next_6_7(void *(*arg0)(struct seq_file * ,
                                                                void * , loff_t * ) ,
                                                  struct seq_file *arg1 , void *arg2 ,
                                                  long long *arg3 ) ;
#line 276
void *ldv_traverse_kernel_items_scenario_next_7_7(void *(*arg0)(struct seq_file * ,
                                                                void * , loff_t * ) ,
                                                  struct seq_file *arg1 , void *arg2 ,
                                                  long long *arg3 ) ;
#line 277
int ldv_traverse_kernel_items_scenario_show_6_9(int (*arg0)(struct seq_file * , void * ) ,
                                                struct seq_file *arg1 , void *arg2 ) ;
#line 278
int ldv_traverse_kernel_items_scenario_show_7_9(int (*arg0)(struct seq_file * , void * ) ,
                                                struct seq_file *arg1 , void *arg2 ) ;
#line 279
void *ldv_traverse_kernel_items_scenario_start_6_14(void *(*arg0)(struct seq_file * ,
                                                                  loff_t * ) , struct seq_file *arg1 ,
                                                    long long *arg2 ) ;
#line 280
void *ldv_traverse_kernel_items_scenario_start_7_14(void *(*arg0)(struct seq_file * ,
                                                                  loff_t * ) , struct seq_file *arg1 ,
                                                    long long *arg2 ) ;
#line 281
void ldv_traverse_kernel_items_scenario_stop_6_2(void (*arg0)(struct seq_file * ,
                                                              void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) ;
#line 282
void ldv_traverse_kernel_items_scenario_stop_6_5(void (*arg0)(struct seq_file * ,
                                                              void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) ;
#line 283
void ldv_traverse_kernel_items_scenario_stop_7_2(void (*arg0)(struct seq_file * ,
                                                              void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) ;
#line 284
void ldv_traverse_kernel_items_scenario_stop_7_5(void (*arg0)(struct seq_file * ,
                                                              void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) ;
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_4(void *arg0 ) 
{ 
  int (*ldv_4_callback_check_flags)(int  ) ;
  int (*ldv_4_callback_flock)(struct file * , int  , struct file_lock * ) ;
  int (*ldv_4_callback_flush)(struct file * , struct files_struct * ) ;
  int (*ldv_4_callback_fsync)(struct file * , long long  , long long  , int  ) ;
  int (*ldv_4_callback_iterate)(struct file * , struct dir_context * ) ;
  loff_t (*ldv_4_callback_llseek)(struct file * , loff_t  , int  ) ;
  int (*ldv_4_callback_lock)(struct file * , int  , struct file_lock * ) ;
  int (*ldv_4_callback_mmap)(struct file * , struct vm_area_struct * ) ;
  ssize_t (*ldv_4_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_4_callback_read_iter)(struct kiocb * , struct iov_iter * ) ;
  int (*ldv_4_callback_setlease)(struct file * , long  , struct file_lock ** ) ;
  long (*ldv_4_callback_splice_read)(struct file * , long long * , struct pipe_inode_info * ,
                                     unsigned long  , unsigned int  ) ;
  long (*ldv_4_callback_splice_write)(struct pipe_inode_info * , struct file * , long long * ,
                                      unsigned long  , unsigned int  ) ;
  long (*ldv_4_callback_write_iter)(struct kiocb * , struct iov_iter * ) ;
  struct file_operations *ldv_4_container_file_operations ;
  int ldv_4_ldv_param_22_1_default ;
  struct files_struct *ldv_4_ldv_param_25_1_default ;
  long long ldv_4_ldv_param_28_1_default ;
  long long ldv_4_ldv_param_28_2_default ;
  int ldv_4_ldv_param_28_3_default ;
  struct dir_context *ldv_4_ldv_param_31_1_default ;
  long long ldv_4_ldv_param_34_1_default ;
  int ldv_4_ldv_param_34_2_default ;
  int ldv_4_ldv_param_37_1_default ;
  struct vm_area_struct *ldv_4_ldv_param_40_1_default ;
  char *ldv_4_ldv_param_43_1_default ;
  long long *ldv_4_ldv_param_43_3_default ;
  long ldv_4_ldv_param_47_1_default ;
  char *ldv_4_ldv_param_4_1_default ;
  long long *ldv_4_ldv_param_4_3_default ;
  long long *ldv_4_ldv_param_50_1_default ;
  unsigned int ldv_4_ldv_param_50_4_default ;
  struct pipe_inode_info *ldv_4_ldv_param_53_0_default ;
  long long *ldv_4_ldv_param_53_2_default ;
  unsigned int ldv_4_ldv_param_53_4_default ;
  int ldv_4_ldv_param_5_0_default ;
  struct file *ldv_4_resource_file ;
  struct inode *ldv_4_resource_inode ;
  struct kiocb *ldv_4_resource_struct_kiocb_ptr ;
  int ldv_4_ret_default ;
  struct file_lock *ldv_4_size_cnt_struct_file_lock_ptr ;
  struct iov_iter *ldv_4_size_cnt_struct_iov_iter_ptr ;
  struct pipe_inode_info *ldv_4_size_cnt_struct_pipe_inode_info_ptr ;
  size_t ldv_4_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  void *tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;

  {
  {
#line 341
  ldv_4_ret_default = ldv_undef_int();
#line 343
  ldv_free(arg0);
#line 347
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 347
  ldv_4_container_file_operations = (struct file_operations *)tmp;
#line 351
  tmp___0 = ldv_xmalloc(512UL);
#line 351
  ldv_4_resource_file = (struct file *)tmp___0;
#line 352
  tmp___1 = ldv_xmalloc(1032UL);
#line 352
  ldv_4_resource_inode = (struct inode *)tmp___1;
#line 353
  tmp___2 = ldv_xmalloc_unknown_size(0UL);
#line 353
  ldv_4_resource_struct_kiocb_ptr = (struct kiocb *)tmp___2;
#line 354
  tmp___3 = ldv_undef_int();
#line 354
  ldv_4_size_cnt_struct_file_lock_ptr = (struct file_lock *)((long )tmp___3);
  }
#line 361
  goto ldv_main_4;
#line 363
  return;
  ldv_main_4: 
  {
#line 369
  tmp___5 = ldv_undef_int();
  }
#line 369
  if (tmp___5 != 0) {
    {
#line 372
    ldv_4_ret_default = ldv_character_driver_scenario_probe_4_13(ldv_4_container_file_operations->open,
                                                                 ldv_4_resource_inode,
                                                                 ldv_4_resource_file);
#line 374
    ldv_4_ret_default = ldv_filter_err_code(ldv_4_ret_default);
#line 377
    tmp___4 = ldv_undef_int();
    }
#line 377
    if (tmp___4 != 0) {
      {
#line 379
      __VERIFIER_assume(ldv_4_ret_default == 0);
      }
#line 386
      goto ldv_call_4;
    } else {
      {
#line 390
      __VERIFIER_assume(ldv_4_ret_default != 0);
      }
#line 397
      goto ldv_main_4;
    }
  } else {
    {
#line 402
    ldv_free((void *)ldv_4_resource_file);
#line 403
    ldv_free((void *)ldv_4_resource_inode);
#line 404
    ldv_free((void *)ldv_4_resource_struct_kiocb_ptr);
#line 408
    ldv_free((void *)ldv_4_container_file_operations);
    }
#line 416
    return;
  }
#line 419
  return;
  ldv_call_4: 
  {
#line 425
  tmp___6 = ldv_undef_int();
  }
  {
#line 426
  if (tmp___6 == 1) {
#line 426
    goto case_1;
  } else {

  }
#line 457
  if (tmp___6 == 2) {
#line 457
    goto case_2;
  } else {

  }
#line 470
  if (tmp___6 == 3) {
#line 470
    goto case_3;
  } else {

  }
#line 697
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 428
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 428
  ldv_4_ldv_param_4_1_default = (char *)tmp___7;
#line 429
  tmp___8 = ldv_xmalloc_unknown_size(0UL);
#line 429
  ldv_4_ldv_param_4_3_default = (long long *)tmp___8;
#line 438
  __VERIFIER_assume((unsigned long )ldv_4_size_cnt_struct_file_lock_ptr <= (unsigned long )((struct file_lock *)2147479552));
  }
#line 439
  if ((unsigned long )ldv_4_container_file_operations->write != (unsigned long )((ssize_t (*)(struct file * ,
                                                                                              char const   * ,
                                                                                              size_t  ,
                                                                                              loff_t * ))0)) {
    {
#line 441
    ldv_character_driver_scenario_write_4_4((ssize_t (*)(struct file * , char * ,
                                                         size_t  , loff_t * ))ldv_4_container_file_operations->write,
                                            ldv_4_resource_file, ldv_4_ldv_param_4_1_default,
                                            ldv_4_size_cnt_write_size, ldv_4_ldv_param_4_3_default);
    }
  } else {

  }
  {
#line 446
  ldv_free((void *)ldv_4_ldv_param_4_1_default);
#line 447
  ldv_free((void *)ldv_4_ldv_param_4_3_default);
  }
#line 454
  goto ldv_call_4;
  case_2: /* CIL Label */ 
  {
#line 460
  ldv_character_driver_scenario_release_4_2(ldv_4_container_file_operations->release,
                                            ldv_4_resource_inode, ldv_4_resource_file);
  }
#line 467
  goto ldv_main_4;
  case_3: /* CIL Label */ 
  {
#line 474
  tmp___9 = ldv_undef_int();
  }
  {
#line 475
  if (tmp___9 == 1) {
#line 475
    goto case_1___0;
  } else {

  }
#line 485
  if (tmp___9 == 2) {
#line 485
    goto case_2___0;
  } else {

  }
#line 505
  if (tmp___9 == 3) {
#line 505
    goto case_3___0;
  } else {

  }
#line 523
  if (tmp___9 == 4) {
#line 523
    goto case_4;
  } else {

  }
#line 539
  if (tmp___9 == 5) {
#line 539
    goto case_5;
  } else {

  }
#line 549
  if (tmp___9 == 6) {
#line 549
    goto case_6;
  } else {

  }
#line 567
  if (tmp___9 == 7) {
#line 567
    goto case_7;
  } else {

  }
#line 585
  if (tmp___9 == 8) {
#line 585
    goto case_8;
  } else {

  }
#line 601
  if (tmp___9 == 9) {
#line 601
    goto case_9;
  } else {

  }
#line 615
  if (tmp___9 == 10) {
#line 615
    goto case_10;
  } else {

  }
#line 633
  if (tmp___9 == 11) {
#line 633
    goto case_11;
  } else {

  }
#line 649
  if (tmp___9 == 12) {
#line 649
    goto case_12;
  } else {

  }
#line 667
  if (tmp___9 == 13) {
#line 667
    goto case_13;
  } else {

  }
#line 683
  if (tmp___9 == 14) {
#line 683
    goto case_14;
  } else {

  }
#line 693
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 477
  if ((unsigned long )ldv_4_callback_write_iter != (unsigned long )((long (*)(struct kiocb * ,
                                                                              struct iov_iter * ))0)) {
    {
#line 479
    ldv_character_driver_scenario_callback_4_56(ldv_4_callback_write_iter, ldv_4_resource_struct_kiocb_ptr,
                                                ldv_4_size_cnt_struct_iov_iter_ptr);
    }
  } else {

  }
#line 483
  goto ldv_57117;
  case_2___0: /* CIL Label */ 
  {
#line 487
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 487
  ldv_4_ldv_param_53_0_default = (struct pipe_inode_info *)tmp___10;
#line 488
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 488
  ldv_4_ldv_param_53_2_default = (long long *)tmp___11;
  }
#line 492
  if ((unsigned long )ldv_4_callback_splice_write != (unsigned long )((long (*)(struct pipe_inode_info * ,
                                                                                struct file * ,
                                                                                long long * ,
                                                                                unsigned long  ,
                                                                                unsigned int  ))0)) {
    {
#line 494
    ldv_character_driver_scenario_callback_4_53(ldv_4_callback_splice_write, ldv_4_ldv_param_53_0_default,
                                                ldv_4_resource_file, ldv_4_ldv_param_53_2_default,
                                                ldv_4_size_cnt_write_size, ldv_4_ldv_param_53_4_default);
    }
  } else {

  }
  {
#line 499
  ldv_free((void *)ldv_4_ldv_param_53_0_default);
#line 500
  ldv_free((void *)ldv_4_ldv_param_53_2_default);
  }
#line 503
  goto ldv_57117;
  case_3___0: /* CIL Label */ 
  {
#line 507
  tmp___12 = ldv_xmalloc_unknown_size(0UL);
#line 507
  ldv_4_ldv_param_50_1_default = (long long *)tmp___12;
  }
#line 511
  if ((unsigned long )ldv_4_callback_splice_read != (unsigned long )((long (*)(struct file * ,
                                                                               long long * ,
                                                                               struct pipe_inode_info * ,
                                                                               unsigned long  ,
                                                                               unsigned int  ))0)) {
    {
#line 513
    ldv_character_driver_scenario_callback_4_50(ldv_4_callback_splice_read, ldv_4_resource_file,
                                                ldv_4_ldv_param_50_1_default, ldv_4_size_cnt_struct_pipe_inode_info_ptr,
                                                ldv_4_size_cnt_write_size, ldv_4_ldv_param_50_4_default);
    }
  } else {

  }
  {
#line 518
  ldv_free((void *)ldv_4_ldv_param_50_1_default);
  }
#line 521
  goto ldv_57117;
  case_4: /* CIL Label */ ;
#line 528
  if ((unsigned long )ldv_4_callback_setlease != (unsigned long )((int (*)(struct file * ,
                                                                           long  ,
                                                                           struct file_lock ** ))0)) {
    {
#line 530
    ldv_character_driver_scenario_callback_4_47(ldv_4_callback_setlease, ldv_4_resource_file,
                                                ldv_4_ldv_param_47_1_default, (struct file_lock **)ldv_4_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 537
  goto ldv_57117;
  case_5: /* CIL Label */ ;
#line 541
  if ((unsigned long )ldv_4_callback_read_iter != (unsigned long )((long (*)(struct kiocb * ,
                                                                             struct iov_iter * ))0)) {
    {
#line 543
    ldv_character_driver_scenario_callback_4_46(ldv_4_callback_read_iter, ldv_4_resource_struct_kiocb_ptr,
                                                ldv_4_size_cnt_struct_iov_iter_ptr);
    }
  } else {

  }
#line 547
  goto ldv_57117;
  case_6: /* CIL Label */ 
  {
#line 551
  tmp___13 = ldv_xmalloc_unknown_size(0UL);
#line 551
  ldv_4_ldv_param_43_1_default = (char *)tmp___13;
#line 552
  tmp___14 = ldv_xmalloc_unknown_size(0UL);
#line 552
  ldv_4_ldv_param_43_3_default = (long long *)tmp___14;
#line 557
  ldv_character_driver_scenario_callback_4_43(ldv_4_callback_read, ldv_4_resource_file,
                                              ldv_4_ldv_param_43_1_default, ldv_4_size_cnt_write_size,
                                              ldv_4_ldv_param_43_3_default);
#line 561
  ldv_free((void *)ldv_4_ldv_param_43_1_default);
#line 562
  ldv_free((void *)ldv_4_ldv_param_43_3_default);
  }
#line 565
  goto ldv_57117;
  case_7: /* CIL Label */ 
  {
#line 569
  tmp___15 = ldv_xmalloc_unknown_size(0UL);
#line 569
  ldv_4_ldv_param_40_1_default = (struct vm_area_struct *)tmp___15;
  }
#line 573
  if ((unsigned long )ldv_4_callback_mmap != (unsigned long )((int (*)(struct file * ,
                                                                       struct vm_area_struct * ))0)) {
    {
#line 575
    ldv_character_driver_scenario_callback_4_40(ldv_4_callback_mmap, ldv_4_resource_file,
                                                ldv_4_ldv_param_40_1_default);
    }
  } else {

  }
  {
#line 580
  ldv_free((void *)ldv_4_ldv_param_40_1_default);
  }
#line 583
  goto ldv_57117;
  case_8: /* CIL Label */ ;
#line 590
  if ((unsigned long )ldv_4_callback_lock != (unsigned long )((int (*)(struct file * ,
                                                                       int  , struct file_lock * ))0)) {
    {
#line 592
    ldv_character_driver_scenario_callback_4_37(ldv_4_callback_lock, ldv_4_resource_file,
                                                ldv_4_ldv_param_37_1_default, ldv_4_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 599
  goto ldv_57117;
  case_9: /* CIL Label */ 
  {
#line 607
  ldv_character_driver_scenario_callback_4_34(ldv_4_callback_llseek, ldv_4_resource_file,
                                              ldv_4_ldv_param_34_1_default, ldv_4_ldv_param_34_2_default);
  }
#line 613
  goto ldv_57117;
  case_10: /* CIL Label */ 
  {
#line 617
  tmp___16 = ldv_xmalloc_unknown_size(0UL);
#line 617
  ldv_4_ldv_param_31_1_default = (struct dir_context *)tmp___16;
  }
#line 621
  if ((unsigned long )ldv_4_callback_iterate != (unsigned long )((int (*)(struct file * ,
                                                                          struct dir_context * ))0)) {
    {
#line 623
    ldv_character_driver_scenario_callback_4_31(ldv_4_callback_iterate, ldv_4_resource_file,
                                                ldv_4_ldv_param_31_1_default);
    }
  } else {

  }
  {
#line 628
  ldv_free((void *)ldv_4_ldv_param_31_1_default);
  }
#line 631
  goto ldv_57117;
  case_11: /* CIL Label */ ;
#line 638
  if ((unsigned long )ldv_4_callback_fsync != (unsigned long )((int (*)(struct file * ,
                                                                        long long  ,
                                                                        long long  ,
                                                                        int  ))0)) {
    {
#line 640
    ldv_character_driver_scenario_callback_4_28(ldv_4_callback_fsync, ldv_4_resource_file,
                                                ldv_4_ldv_param_28_1_default, ldv_4_ldv_param_28_2_default,
                                                ldv_4_ldv_param_28_3_default);
    }
  } else {

  }
#line 647
  goto ldv_57117;
  case_12: /* CIL Label */ 
  {
#line 651
  tmp___17 = ldv_xmalloc_unknown_size(0UL);
#line 651
  ldv_4_ldv_param_25_1_default = (struct files_struct *)tmp___17;
  }
#line 655
  if ((unsigned long )ldv_4_callback_flush != (unsigned long )((int (*)(struct file * ,
                                                                        struct files_struct * ))0)) {
    {
#line 657
    ldv_character_driver_scenario_callback_4_25(ldv_4_callback_flush, ldv_4_resource_file,
                                                ldv_4_ldv_param_25_1_default);
    }
  } else {

  }
  {
#line 662
  ldv_free((void *)ldv_4_ldv_param_25_1_default);
  }
#line 665
  goto ldv_57117;
  case_13: /* CIL Label */ ;
#line 672
  if ((unsigned long )ldv_4_callback_flock != (unsigned long )((int (*)(struct file * ,
                                                                        int  , struct file_lock * ))0)) {
    {
#line 674
    ldv_character_driver_scenario_callback_4_22(ldv_4_callback_flock, ldv_4_resource_file,
                                                ldv_4_ldv_param_22_1_default, ldv_4_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 681
  goto ldv_57117;
  case_14: /* CIL Label */ ;
#line 685
  if ((unsigned long )ldv_4_callback_check_flags != (unsigned long )((int (*)(int  ))0)) {
    {
#line 687
    ldv_character_driver_scenario_callback_4_5(ldv_4_callback_check_flags, ldv_4_ldv_param_5_0_default);
    }
  } else {

  }
#line 691
  goto ldv_57117;
  switch_default: /* CIL Label */ 
  {
#line 693
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_57117: ;
#line 695
  goto ldv_57132;
  switch_default___0: /* CIL Label */ 
  {
#line 697
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_57132: ;
#line 706
  goto ldv_call_4;
#line 708
  return;
}
}
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_5(void *arg0 ) 
{ 
  int (*ldv_5_callback_check_flags)(int  ) ;
  int (*ldv_5_callback_flock)(struct file * , int  , struct file_lock * ) ;
  int (*ldv_5_callback_flush)(struct file * , struct files_struct * ) ;
  int (*ldv_5_callback_fsync)(struct file * , long long  , long long  , int  ) ;
  int (*ldv_5_callback_iterate)(struct file * , struct dir_context * ) ;
  loff_t (*ldv_5_callback_llseek)(struct file * , loff_t  , int  ) ;
  int (*ldv_5_callback_lock)(struct file * , int  , struct file_lock * ) ;
  int (*ldv_5_callback_mmap)(struct file * , struct vm_area_struct * ) ;
  ssize_t (*ldv_5_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_5_callback_read_iter)(struct kiocb * , struct iov_iter * ) ;
  int (*ldv_5_callback_setlease)(struct file * , long  , struct file_lock ** ) ;
  long (*ldv_5_callback_splice_read)(struct file * , long long * , struct pipe_inode_info * ,
                                     unsigned long  , unsigned int  ) ;
  long (*ldv_5_callback_splice_write)(struct pipe_inode_info * , struct file * , long long * ,
                                      unsigned long  , unsigned int  ) ;
  long (*ldv_5_callback_write_iter)(struct kiocb * , struct iov_iter * ) ;
  struct file_operations *ldv_5_container_file_operations ;
  int ldv_5_ldv_param_22_1_default ;
  struct files_struct *ldv_5_ldv_param_25_1_default ;
  long long ldv_5_ldv_param_28_1_default ;
  long long ldv_5_ldv_param_28_2_default ;
  int ldv_5_ldv_param_28_3_default ;
  struct dir_context *ldv_5_ldv_param_31_1_default ;
  long long ldv_5_ldv_param_34_1_default ;
  int ldv_5_ldv_param_34_2_default ;
  int ldv_5_ldv_param_37_1_default ;
  struct vm_area_struct *ldv_5_ldv_param_40_1_default ;
  char *ldv_5_ldv_param_43_1_default ;
  long long *ldv_5_ldv_param_43_3_default ;
  long ldv_5_ldv_param_47_1_default ;
  char *ldv_5_ldv_param_4_1_default ;
  long long *ldv_5_ldv_param_4_3_default ;
  long long *ldv_5_ldv_param_50_1_default ;
  unsigned int ldv_5_ldv_param_50_4_default ;
  struct pipe_inode_info *ldv_5_ldv_param_53_0_default ;
  long long *ldv_5_ldv_param_53_2_default ;
  unsigned int ldv_5_ldv_param_53_4_default ;
  int ldv_5_ldv_param_5_0_default ;
  struct file *ldv_5_resource_file ;
  struct inode *ldv_5_resource_inode ;
  struct kiocb *ldv_5_resource_struct_kiocb_ptr ;
  int ldv_5_ret_default ;
  struct file_lock *ldv_5_size_cnt_struct_file_lock_ptr ;
  struct iov_iter *ldv_5_size_cnt_struct_iov_iter_ptr ;
  struct pipe_inode_info *ldv_5_size_cnt_struct_pipe_inode_info_ptr ;
  size_t ldv_5_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  void *tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;

  {
  {
#line 762
  ldv_5_ret_default = ldv_undef_int();
#line 764
  ldv_free(arg0);
#line 768
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 768
  ldv_5_container_file_operations = (struct file_operations *)tmp;
#line 772
  tmp___0 = ldv_xmalloc(512UL);
#line 772
  ldv_5_resource_file = (struct file *)tmp___0;
#line 773
  tmp___1 = ldv_xmalloc(1032UL);
#line 773
  ldv_5_resource_inode = (struct inode *)tmp___1;
#line 774
  tmp___2 = ldv_xmalloc_unknown_size(0UL);
#line 774
  ldv_5_resource_struct_kiocb_ptr = (struct kiocb *)tmp___2;
#line 775
  tmp___3 = ldv_undef_int();
#line 775
  ldv_5_size_cnt_struct_file_lock_ptr = (struct file_lock *)((long )tmp___3);
  }
#line 782
  goto ldv_main_5;
#line 784
  return;
  ldv_main_5: 
  {
#line 790
  tmp___5 = ldv_undef_int();
  }
#line 790
  if (tmp___5 != 0) {
    {
#line 793
    ldv_5_ret_default = ldv_character_driver_scenario_probe_5_13(ldv_5_container_file_operations->open,
                                                                 ldv_5_resource_inode,
                                                                 ldv_5_resource_file);
#line 795
    ldv_5_ret_default = ldv_filter_err_code(ldv_5_ret_default);
#line 798
    tmp___4 = ldv_undef_int();
    }
#line 798
    if (tmp___4 != 0) {
      {
#line 800
      __VERIFIER_assume(ldv_5_ret_default == 0);
      }
#line 807
      goto ldv_call_5;
    } else {
      {
#line 811
      __VERIFIER_assume(ldv_5_ret_default != 0);
      }
#line 818
      goto ldv_main_5;
    }
  } else {
    {
#line 823
    ldv_free((void *)ldv_5_resource_file);
#line 824
    ldv_free((void *)ldv_5_resource_inode);
#line 825
    ldv_free((void *)ldv_5_resource_struct_kiocb_ptr);
#line 829
    ldv_free((void *)ldv_5_container_file_operations);
    }
#line 837
    return;
  }
#line 840
  return;
  ldv_call_5: 
  {
#line 846
  tmp___6 = ldv_undef_int();
  }
  {
#line 847
  if (tmp___6 == 1) {
#line 847
    goto case_1;
  } else {

  }
#line 878
  if (tmp___6 == 2) {
#line 878
    goto case_2;
  } else {

  }
#line 891
  if (tmp___6 == 3) {
#line 891
    goto case_3;
  } else {

  }
#line 1118
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 849
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 849
  ldv_5_ldv_param_4_1_default = (char *)tmp___7;
#line 850
  tmp___8 = ldv_xmalloc_unknown_size(0UL);
#line 850
  ldv_5_ldv_param_4_3_default = (long long *)tmp___8;
#line 859
  __VERIFIER_assume((unsigned long )ldv_5_size_cnt_struct_file_lock_ptr <= (unsigned long )((struct file_lock *)2147479552));
  }
#line 860
  if ((unsigned long )ldv_5_container_file_operations->write != (unsigned long )((ssize_t (*)(struct file * ,
                                                                                              char const   * ,
                                                                                              size_t  ,
                                                                                              loff_t * ))0)) {
    {
#line 862
    ldv_character_driver_scenario_write_5_4((ssize_t (*)(struct file * , char * ,
                                                         size_t  , loff_t * ))ldv_5_container_file_operations->write,
                                            ldv_5_resource_file, ldv_5_ldv_param_4_1_default,
                                            ldv_5_size_cnt_write_size, ldv_5_ldv_param_4_3_default);
    }
  } else {

  }
  {
#line 867
  ldv_free((void *)ldv_5_ldv_param_4_1_default);
#line 868
  ldv_free((void *)ldv_5_ldv_param_4_3_default);
  }
#line 875
  goto ldv_call_5;
  case_2: /* CIL Label */ 
  {
#line 881
  ldv_character_driver_scenario_release_5_2(ldv_5_container_file_operations->release,
                                            ldv_5_resource_inode, ldv_5_resource_file);
  }
#line 888
  goto ldv_main_5;
  case_3: /* CIL Label */ 
  {
#line 895
  tmp___9 = ldv_undef_int();
  }
  {
#line 896
  if (tmp___9 == 1) {
#line 896
    goto case_1___0;
  } else {

  }
#line 906
  if (tmp___9 == 2) {
#line 906
    goto case_2___0;
  } else {

  }
#line 926
  if (tmp___9 == 3) {
#line 926
    goto case_3___0;
  } else {

  }
#line 944
  if (tmp___9 == 4) {
#line 944
    goto case_4;
  } else {

  }
#line 960
  if (tmp___9 == 5) {
#line 960
    goto case_5;
  } else {

  }
#line 970
  if (tmp___9 == 6) {
#line 970
    goto case_6;
  } else {

  }
#line 988
  if (tmp___9 == 7) {
#line 988
    goto case_7;
  } else {

  }
#line 1006
  if (tmp___9 == 8) {
#line 1006
    goto case_8;
  } else {

  }
#line 1022
  if (tmp___9 == 9) {
#line 1022
    goto case_9;
  } else {

  }
#line 1036
  if (tmp___9 == 10) {
#line 1036
    goto case_10;
  } else {

  }
#line 1054
  if (tmp___9 == 11) {
#line 1054
    goto case_11;
  } else {

  }
#line 1070
  if (tmp___9 == 12) {
#line 1070
    goto case_12;
  } else {

  }
#line 1088
  if (tmp___9 == 13) {
#line 1088
    goto case_13;
  } else {

  }
#line 1104
  if (tmp___9 == 14) {
#line 1104
    goto case_14;
  } else {

  }
#line 1114
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 898
  if ((unsigned long )ldv_5_callback_write_iter != (unsigned long )((long (*)(struct kiocb * ,
                                                                              struct iov_iter * ))0)) {
    {
#line 900
    ldv_character_driver_scenario_callback_5_56(ldv_5_callback_write_iter, ldv_5_resource_struct_kiocb_ptr,
                                                ldv_5_size_cnt_struct_iov_iter_ptr);
    }
  } else {

  }
#line 904
  goto ldv_57228;
  case_2___0: /* CIL Label */ 
  {
#line 908
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 908
  ldv_5_ldv_param_53_0_default = (struct pipe_inode_info *)tmp___10;
#line 909
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 909
  ldv_5_ldv_param_53_2_default = (long long *)tmp___11;
  }
#line 913
  if ((unsigned long )ldv_5_callback_splice_write != (unsigned long )((long (*)(struct pipe_inode_info * ,
                                                                                struct file * ,
                                                                                long long * ,
                                                                                unsigned long  ,
                                                                                unsigned int  ))0)) {
    {
#line 915
    ldv_character_driver_scenario_callback_5_53(ldv_5_callback_splice_write, ldv_5_ldv_param_53_0_default,
                                                ldv_5_resource_file, ldv_5_ldv_param_53_2_default,
                                                ldv_5_size_cnt_write_size, ldv_5_ldv_param_53_4_default);
    }
  } else {

  }
  {
#line 920
  ldv_free((void *)ldv_5_ldv_param_53_0_default);
#line 921
  ldv_free((void *)ldv_5_ldv_param_53_2_default);
  }
#line 924
  goto ldv_57228;
  case_3___0: /* CIL Label */ 
  {
#line 928
  tmp___12 = ldv_xmalloc_unknown_size(0UL);
#line 928
  ldv_5_ldv_param_50_1_default = (long long *)tmp___12;
  }
#line 932
  if ((unsigned long )ldv_5_callback_splice_read != (unsigned long )((long (*)(struct file * ,
                                                                               long long * ,
                                                                               struct pipe_inode_info * ,
                                                                               unsigned long  ,
                                                                               unsigned int  ))0)) {
    {
#line 934
    ldv_character_driver_scenario_callback_5_50(ldv_5_callback_splice_read, ldv_5_resource_file,
                                                ldv_5_ldv_param_50_1_default, ldv_5_size_cnt_struct_pipe_inode_info_ptr,
                                                ldv_5_size_cnt_write_size, ldv_5_ldv_param_50_4_default);
    }
  } else {

  }
  {
#line 939
  ldv_free((void *)ldv_5_ldv_param_50_1_default);
  }
#line 942
  goto ldv_57228;
  case_4: /* CIL Label */ ;
#line 949
  if ((unsigned long )ldv_5_callback_setlease != (unsigned long )((int (*)(struct file * ,
                                                                           long  ,
                                                                           struct file_lock ** ))0)) {
    {
#line 951
    ldv_character_driver_scenario_callback_5_47(ldv_5_callback_setlease, ldv_5_resource_file,
                                                ldv_5_ldv_param_47_1_default, (struct file_lock **)ldv_5_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 958
  goto ldv_57228;
  case_5: /* CIL Label */ ;
#line 962
  if ((unsigned long )ldv_5_callback_read_iter != (unsigned long )((long (*)(struct kiocb * ,
                                                                             struct iov_iter * ))0)) {
    {
#line 964
    ldv_character_driver_scenario_callback_5_46(ldv_5_callback_read_iter, ldv_5_resource_struct_kiocb_ptr,
                                                ldv_5_size_cnt_struct_iov_iter_ptr);
    }
  } else {

  }
#line 968
  goto ldv_57228;
  case_6: /* CIL Label */ 
  {
#line 972
  tmp___13 = ldv_xmalloc_unknown_size(0UL);
#line 972
  ldv_5_ldv_param_43_1_default = (char *)tmp___13;
#line 973
  tmp___14 = ldv_xmalloc_unknown_size(0UL);
#line 973
  ldv_5_ldv_param_43_3_default = (long long *)tmp___14;
#line 978
  ldv_character_driver_scenario_callback_5_43(ldv_5_callback_read, ldv_5_resource_file,
                                              ldv_5_ldv_param_43_1_default, ldv_5_size_cnt_write_size,
                                              ldv_5_ldv_param_43_3_default);
#line 982
  ldv_free((void *)ldv_5_ldv_param_43_1_default);
#line 983
  ldv_free((void *)ldv_5_ldv_param_43_3_default);
  }
#line 986
  goto ldv_57228;
  case_7: /* CIL Label */ 
  {
#line 990
  tmp___15 = ldv_xmalloc_unknown_size(0UL);
#line 990
  ldv_5_ldv_param_40_1_default = (struct vm_area_struct *)tmp___15;
  }
#line 994
  if ((unsigned long )ldv_5_callback_mmap != (unsigned long )((int (*)(struct file * ,
                                                                       struct vm_area_struct * ))0)) {
    {
#line 996
    ldv_character_driver_scenario_callback_5_40(ldv_5_callback_mmap, ldv_5_resource_file,
                                                ldv_5_ldv_param_40_1_default);
    }
  } else {

  }
  {
#line 1001
  ldv_free((void *)ldv_5_ldv_param_40_1_default);
  }
#line 1004
  goto ldv_57228;
  case_8: /* CIL Label */ ;
#line 1011
  if ((unsigned long )ldv_5_callback_lock != (unsigned long )((int (*)(struct file * ,
                                                                       int  , struct file_lock * ))0)) {
    {
#line 1013
    ldv_character_driver_scenario_callback_5_37(ldv_5_callback_lock, ldv_5_resource_file,
                                                ldv_5_ldv_param_37_1_default, ldv_5_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 1020
  goto ldv_57228;
  case_9: /* CIL Label */ 
  {
#line 1028
  ldv_character_driver_scenario_callback_5_34(ldv_5_callback_llseek, ldv_5_resource_file,
                                              ldv_5_ldv_param_34_1_default, ldv_5_ldv_param_34_2_default);
  }
#line 1034
  goto ldv_57228;
  case_10: /* CIL Label */ 
  {
#line 1038
  tmp___16 = ldv_xmalloc_unknown_size(0UL);
#line 1038
  ldv_5_ldv_param_31_1_default = (struct dir_context *)tmp___16;
  }
#line 1042
  if ((unsigned long )ldv_5_callback_iterate != (unsigned long )((int (*)(struct file * ,
                                                                          struct dir_context * ))0)) {
    {
#line 1044
    ldv_character_driver_scenario_callback_5_31(ldv_5_callback_iterate, ldv_5_resource_file,
                                                ldv_5_ldv_param_31_1_default);
    }
  } else {

  }
  {
#line 1049
  ldv_free((void *)ldv_5_ldv_param_31_1_default);
  }
#line 1052
  goto ldv_57228;
  case_11: /* CIL Label */ ;
#line 1059
  if ((unsigned long )ldv_5_callback_fsync != (unsigned long )((int (*)(struct file * ,
                                                                        long long  ,
                                                                        long long  ,
                                                                        int  ))0)) {
    {
#line 1061
    ldv_character_driver_scenario_callback_5_28(ldv_5_callback_fsync, ldv_5_resource_file,
                                                ldv_5_ldv_param_28_1_default, ldv_5_ldv_param_28_2_default,
                                                ldv_5_ldv_param_28_3_default);
    }
  } else {

  }
#line 1068
  goto ldv_57228;
  case_12: /* CIL Label */ 
  {
#line 1072
  tmp___17 = ldv_xmalloc_unknown_size(0UL);
#line 1072
  ldv_5_ldv_param_25_1_default = (struct files_struct *)tmp___17;
  }
#line 1076
  if ((unsigned long )ldv_5_callback_flush != (unsigned long )((int (*)(struct file * ,
                                                                        struct files_struct * ))0)) {
    {
#line 1078
    ldv_character_driver_scenario_callback_5_25(ldv_5_callback_flush, ldv_5_resource_file,
                                                ldv_5_ldv_param_25_1_default);
    }
  } else {

  }
  {
#line 1083
  ldv_free((void *)ldv_5_ldv_param_25_1_default);
  }
#line 1086
  goto ldv_57228;
  case_13: /* CIL Label */ ;
#line 1093
  if ((unsigned long )ldv_5_callback_flock != (unsigned long )((int (*)(struct file * ,
                                                                        int  , struct file_lock * ))0)) {
    {
#line 1095
    ldv_character_driver_scenario_callback_5_22(ldv_5_callback_flock, ldv_5_resource_file,
                                                ldv_5_ldv_param_22_1_default, ldv_5_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 1102
  goto ldv_57228;
  case_14: /* CIL Label */ ;
#line 1106
  if ((unsigned long )ldv_5_callback_check_flags != (unsigned long )((int (*)(int  ))0)) {
    {
#line 1108
    ldv_character_driver_scenario_callback_5_5(ldv_5_callback_check_flags, ldv_5_ldv_param_5_0_default);
    }
  } else {

  }
#line 1112
  goto ldv_57228;
  switch_default: /* CIL Label */ 
  {
#line 1114
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_57228: ;
#line 1116
  goto ldv_57243;
  switch_default___0: /* CIL Label */ 
  {
#line 1118
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_57243: ;
#line 1127
  goto ldv_call_5;
#line 1129
  return;
}
}
#line 1134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_22(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) 
{ 


  {
  {
#line 1135
  (*arg0)(arg1, arg2, arg3);
  }
#line 1136
  return;
}
}
#line 1139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_25(int (*arg0)(struct file * , fl_owner_t  ) ,
                                                 struct file *arg1 , struct files_struct *arg2 ) 
{ 


  {
  {
#line 1140
  (*arg0)(arg1, arg2);
  }
#line 1141
  return;
}
}
#line 1144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_28(int (*arg0)(struct file * , loff_t  ,
                                                             loff_t  , int  ) , struct file *arg1 ,
                                                 long long arg2 , long long arg3 ,
                                                 int arg4 ) 
{ 


  {
  {
#line 1145
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 1146
  return;
}
}
#line 1149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_31(int (*arg0)(struct file * , struct dir_context * ) ,
                                                 struct file *arg1 , struct dir_context *arg2 ) 
{ 


  {
  {
#line 1150
  (*arg0)(arg1, arg2);
  }
#line 1151
  return;
}
}
#line 1154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_34(loff_t (*arg0)(struct file * , loff_t  ,
                                                                int  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) 
{ 


  {
  {
#line 1155
  seq_lseek(arg1, arg2, arg3);
  }
#line 1156
  return;
}
}
#line 1159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_37(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) 
{ 


  {
  {
#line 1160
  (*arg0)(arg1, arg2, arg3);
  }
#line 1161
  return;
}
}
#line 1164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_40(int (*arg0)(struct file * , struct vm_area_struct * ) ,
                                                 struct file *arg1 , struct vm_area_struct *arg2 ) 
{ 


  {
  {
#line 1165
  (*arg0)(arg1, arg2);
  }
#line 1166
  return;
}
}
#line 1169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_43(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 1170
  seq_read(arg1, arg2, arg3, arg4);
  }
#line 1171
  return;
}
}
#line 1174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_46(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) 
{ 


  {
  {
#line 1175
  (*arg0)(arg1, arg2);
  }
#line 1176
  return;
}
}
#line 1179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_47(int (*arg0)(struct file * , ssize_t  ,
                                                             struct file_lock ** ) ,
                                                 struct file *arg1 , long arg2 , struct file_lock **arg3 ) 
{ 


  {
  {
#line 1180
  (*arg0)(arg1, arg2, arg3);
  }
#line 1181
  return;
}
}
#line 1184 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_5(int (*arg0)(int  ) , int arg1 ) 
{ 


  {
  {
#line 1185
  (*arg0)(arg1);
  }
#line 1186
  return;
}
}
#line 1189 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_50(ssize_t (*arg0)(struct file * , loff_t * ,
                                                                 struct pipe_inode_info * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct file *arg1 , long long *arg2 ,
                                                 struct pipe_inode_info *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) 
{ 


  {
  {
#line 1190
  (*arg0)(arg1, arg2, arg3, arg4, arg5);
  }
#line 1191
  return;
}
}
#line 1194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_53(ssize_t (*arg0)(struct pipe_inode_info * ,
                                                                 struct file * , loff_t * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct pipe_inode_info *arg1 , struct file *arg2 ,
                                                 long long *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) 
{ 


  {
  {
#line 1195
  (*arg0)(arg1, arg2, arg3, arg4, arg5);
  }
#line 1196
  return;
}
}
#line 1199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_4_56(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) 
{ 


  {
  {
#line 1200
  (*arg0)(arg1, arg2);
  }
#line 1201
  return;
}
}
#line 1204 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_22(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) 
{ 


  {
  {
#line 1205
  (*arg0)(arg1, arg2, arg3);
  }
#line 1206
  return;
}
}
#line 1209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_25(int (*arg0)(struct file * , fl_owner_t  ) ,
                                                 struct file *arg1 , struct files_struct *arg2 ) 
{ 


  {
  {
#line 1210
  (*arg0)(arg1, arg2);
  }
#line 1211
  return;
}
}
#line 1214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_28(int (*arg0)(struct file * , loff_t  ,
                                                             loff_t  , int  ) , struct file *arg1 ,
                                                 long long arg2 , long long arg3 ,
                                                 int arg4 ) 
{ 


  {
  {
#line 1215
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 1216
  return;
}
}
#line 1219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_31(int (*arg0)(struct file * , struct dir_context * ) ,
                                                 struct file *arg1 , struct dir_context *arg2 ) 
{ 


  {
  {
#line 1220
  (*arg0)(arg1, arg2);
  }
#line 1221
  return;
}
}
#line 1224 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_34(loff_t (*arg0)(struct file * , loff_t  ,
                                                                int  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) 
{ 


  {
  {
#line 1225
  seq_lseek(arg1, arg2, arg3);
  }
#line 1226
  return;
}
}
#line 1229 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_37(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) 
{ 


  {
  {
#line 1230
  (*arg0)(arg1, arg2, arg3);
  }
#line 1231
  return;
}
}
#line 1234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_40(int (*arg0)(struct file * , struct vm_area_struct * ) ,
                                                 struct file *arg1 , struct vm_area_struct *arg2 ) 
{ 


  {
  {
#line 1235
  (*arg0)(arg1, arg2);
  }
#line 1236
  return;
}
}
#line 1239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_43(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 1240
  seq_read(arg1, arg2, arg3, arg4);
  }
#line 1241
  return;
}
}
#line 1244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_46(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) 
{ 


  {
  {
#line 1245
  (*arg0)(arg1, arg2);
  }
#line 1246
  return;
}
}
#line 1249 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_47(int (*arg0)(struct file * , ssize_t  ,
                                                             struct file_lock ** ) ,
                                                 struct file *arg1 , long arg2 , struct file_lock **arg3 ) 
{ 


  {
  {
#line 1250
  (*arg0)(arg1, arg2, arg3);
  }
#line 1251
  return;
}
}
#line 1254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_5(int (*arg0)(int  ) , int arg1 ) 
{ 


  {
  {
#line 1255
  (*arg0)(arg1);
  }
#line 1256
  return;
}
}
#line 1259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_50(ssize_t (*arg0)(struct file * , loff_t * ,
                                                                 struct pipe_inode_info * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct file *arg1 , long long *arg2 ,
                                                 struct pipe_inode_info *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) 
{ 


  {
  {
#line 1260
  (*arg0)(arg1, arg2, arg3, arg4, arg5);
  }
#line 1261
  return;
}
}
#line 1264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_53(ssize_t (*arg0)(struct pipe_inode_info * ,
                                                                 struct file * , loff_t * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct pipe_inode_info *arg1 , struct file *arg2 ,
                                                 long long *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) 
{ 


  {
  {
#line 1265
  (*arg0)(arg1, arg2, arg3, arg4, arg5);
  }
#line 1266
  return;
}
}
#line 1269 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_callback_5_56(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) 
{ 


  {
  {
#line 1270
  (*arg0)(arg1, arg2);
  }
#line 1271
  return;
}
}
#line 1274 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
int ldv_character_driver_scenario_probe_4_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1275
  tmp = nfs_server_list_open(arg1, arg2);
  }
#line 1275
  return (tmp);
}
}
#line 1279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
int ldv_character_driver_scenario_probe_5_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1280
  tmp = nfs_volume_list_open(arg1, arg2);
  }
#line 1280
  return (tmp);
}
}
#line 1284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_release_4_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 1285
  seq_release(arg1, arg2);
  }
#line 1286
  return;
}
}
#line 1289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_release_5_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 1290
  seq_release(arg1, arg2);
  }
#line 1291
  return;
}
}
#line 1294 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_write_4_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 1295
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 1296
  return;
}
}
#line 1299 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_character_driver_scenario_write_5_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 1300
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 1301
  return;
}
}
#line 1304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_dispatch_register_9_1(struct seq_file *arg0 , struct seq_operations *arg1 ) 
{ 
  struct ldv_struct_traverse_kernel_items_scenario_6 *cf_arg_6 ;
  struct ldv_struct_traverse_kernel_items_scenario_6 *cf_arg_7 ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1307
  tmp___1 = ldv_undef_int();
  }
#line 1307
  if (tmp___1 != 0) {
    {
#line 1308
    tmp = ldv_xmalloc(24UL);
#line 1308
    cf_arg_6 = (struct ldv_struct_traverse_kernel_items_scenario_6 *)tmp;
#line 1309
    cf_arg_6->arg0 = arg0;
#line 1310
    cf_arg_6->arg1 = arg1;
#line 1311
    ldv_traverse_kernel_items_scenario_6((void *)cf_arg_6);
    }
  } else {
    {
#line 1314
    tmp___0 = ldv_xmalloc(24UL);
#line 1314
    cf_arg_7 = (struct ldv_struct_traverse_kernel_items_scenario_6 *)tmp___0;
#line 1315
    cf_arg_7->arg0 = arg0;
#line 1316
    cf_arg_7->arg1 = arg1;
#line 1317
    ldv_traverse_kernel_items_scenario_7((void *)cf_arg_7);
    }
  }
#line 1319
  return;
}
}
#line 1323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
int ldv_emg_seq_open(struct file *arg0 , struct seq_operations *arg1 ) 
{ 
  struct file *ldv_9_file_file ;
  struct seq_operations *ldv_9_ops_seq_operations ;
  struct seq_file *ldv_9_seq_file_seq_file ;
  void *tmp ;

  {
  {
#line 1331
  tmp = ldv_xmalloc(264UL);
#line 1331
  ldv_9_seq_file_seq_file = (struct seq_file *)tmp;
#line 1332
  ldv_9_ops_seq_operations = arg1;
#line 1333
  ldv_9_file_file->private_data = (void *)ldv_9_seq_file_seq_file;
#line 1337
  ldv_dispatch_register_9_1(ldv_9_seq_file_seq_file, ldv_9_ops_seq_operations);
  }
#line 1338
  return (0);
}
}
#line 1346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_traverse_kernel_items_scenario_6(void *arg0 ) 
{ 
  loff_t *ldv_6_index_index ;
  struct seq_operations *ldv_6_ops_seq_operations ;
  loff_t *ldv_6_ret_index ;
  struct seq_file *ldv_6_seq_file_seq_file ;
  int ldv_6_show_ret_default ;
  struct ldv_struct_traverse_kernel_items_scenario_6 *data ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;

  {
  {
#line 1355
  data = (struct ldv_struct_traverse_kernel_items_scenario_6 *)arg0;
#line 1359
  ldv_6_show_ret_default = ldv_undef_int();
  }
#line 1362
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_traverse_kernel_items_scenario_6 *)0)) {
    {
#line 1363
    ldv_6_seq_file_seq_file = data->arg0;
#line 1364
    ldv_6_ops_seq_operations = data->arg1;
#line 1365
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 1370
  tmp = ldv_xmalloc(8UL);
#line 1370
  ldv_6_index_index = (loff_t *)tmp;
  }
#line 1377
  goto ldv_outer_loop_6;
#line 1379
  return;
  ldv_outer_loop_6: 
  {
#line 1385
  tmp___1 = ldv_undef_int();
  }
#line 1385
  if (tmp___1 != 0) {
    {
#line 1388
    *ldv_6_index_index = 0LL;
#line 1390
    tmp___0 = ldv_traverse_kernel_items_scenario_start_6_14(ldv_6_ops_seq_operations->start,
                                                            ldv_6_seq_file_seq_file,
                                                            ldv_6_index_index);
#line 1390
    ldv_6_ret_index = (loff_t *)tmp___0;
    }
#line 1397
    goto ldv_inner_loop_6;
  } else {
    {
#line 1401
    ldv_free((void *)ldv_6_index_index);
    }
#line 1409
    return;
  }
#line 1412
  return;
  ldv_inner_loop_6: 
  {
#line 1418
  tmp___6 = ldv_undef_int();
  }
#line 1418
  if (tmp___6 != 0) {
    {
#line 1420
    tmp___2 = ldv_is_err_or_null((void const   *)ldv_6_ret_index);
#line 1420
    __VERIFIER_assume(tmp___2 == 0L);
#line 1425
    ldv_6_show_ret_default = ldv_traverse_kernel_items_scenario_show_6_9(ldv_6_ops_seq_operations->show,
                                                                         ldv_6_seq_file_seq_file,
                                                                         (void *)ldv_6_ret_index);
#line 1428
    tmp___4 = ldv_undef_int();
    }
#line 1428
    if (tmp___4 != 0) {
      {
#line 1430
      __VERIFIER_assume(ldv_6_show_ret_default >= 0);
#line 1435
      tmp___3 = ldv_traverse_kernel_items_scenario_next_6_7(ldv_6_ops_seq_operations->next,
                                                            ldv_6_seq_file_seq_file,
                                                            (void *)ldv_6_ret_index,
                                                            ldv_6_index_index);
#line 1435
      ldv_6_ret_index = (loff_t *)tmp___3;
      }
#line 1442
      goto ldv_inner_loop_6;
    } else {
      {
#line 1447
      ldv_6_seq_file_seq_file->index = *ldv_6_index_index;
#line 1449
      ldv_traverse_kernel_items_scenario_stop_6_5(ldv_6_ops_seq_operations->stop,
                                                  ldv_6_seq_file_seq_file, (void *)ldv_6_ret_index);
#line 1451
      ldv_6_seq_file_seq_file->index = *ldv_6_index_index;
      }
#line 1458
      goto ldv_outer_loop_6;
    }
  } else {
    {
#line 1463
    tmp___5 = ldv_is_err_or_null((void const   *)ldv_6_ret_index);
#line 1463
    __VERIFIER_assume((int )tmp___5);
#line 1468
    ldv_6_seq_file_seq_file->index = *ldv_6_index_index;
#line 1470
    ldv_traverse_kernel_items_scenario_stop_6_2(ldv_6_ops_seq_operations->stop, ldv_6_seq_file_seq_file,
                                                (void *)ldv_6_ret_index);
#line 1472
    ldv_6_seq_file_seq_file->index = *ldv_6_index_index;
    }
#line 1479
    goto ldv_outer_loop_6;
  }
#line 1482
  return;
}
}
#line 1487 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_traverse_kernel_items_scenario_7(void *arg0 ) 
{ 
  loff_t *ldv_7_index_index ;
  struct seq_operations *ldv_7_ops_seq_operations ;
  loff_t *ldv_7_ret_index ;
  struct seq_file *ldv_7_seq_file_seq_file ;
  int ldv_7_show_ret_default ;
  struct ldv_struct_traverse_kernel_items_scenario_6 *data ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;

  {
  {
#line 1496
  data = (struct ldv_struct_traverse_kernel_items_scenario_6 *)arg0;
#line 1500
  ldv_7_show_ret_default = ldv_undef_int();
  }
#line 1503
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_traverse_kernel_items_scenario_6 *)0)) {
    {
#line 1504
    ldv_7_seq_file_seq_file = data->arg0;
#line 1505
    ldv_7_ops_seq_operations = data->arg1;
#line 1506
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 1511
  tmp = ldv_xmalloc(8UL);
#line 1511
  ldv_7_index_index = (loff_t *)tmp;
  }
#line 1518
  goto ldv_outer_loop_7;
#line 1520
  return;
  ldv_outer_loop_7: 
  {
#line 1526
  tmp___1 = ldv_undef_int();
  }
#line 1526
  if (tmp___1 != 0) {
    {
#line 1529
    *ldv_7_index_index = 0LL;
#line 1531
    tmp___0 = ldv_traverse_kernel_items_scenario_start_7_14(ldv_7_ops_seq_operations->start,
                                                            ldv_7_seq_file_seq_file,
                                                            ldv_7_index_index);
#line 1531
    ldv_7_ret_index = (loff_t *)tmp___0;
    }
#line 1538
    goto ldv_inner_loop_7;
  } else {
    {
#line 1542
    ldv_free((void *)ldv_7_index_index);
    }
#line 1550
    return;
  }
#line 1553
  return;
  ldv_inner_loop_7: 
  {
#line 1559
  tmp___6 = ldv_undef_int();
  }
#line 1559
  if (tmp___6 != 0) {
    {
#line 1561
    tmp___2 = ldv_is_err_or_null((void const   *)ldv_7_ret_index);
#line 1561
    __VERIFIER_assume(tmp___2 == 0L);
#line 1566
    ldv_7_show_ret_default = ldv_traverse_kernel_items_scenario_show_7_9(ldv_7_ops_seq_operations->show,
                                                                         ldv_7_seq_file_seq_file,
                                                                         (void *)ldv_7_ret_index);
#line 1569
    tmp___4 = ldv_undef_int();
    }
#line 1569
    if (tmp___4 != 0) {
      {
#line 1571
      __VERIFIER_assume(ldv_7_show_ret_default >= 0);
#line 1576
      tmp___3 = ldv_traverse_kernel_items_scenario_next_7_7(ldv_7_ops_seq_operations->next,
                                                            ldv_7_seq_file_seq_file,
                                                            (void *)ldv_7_ret_index,
                                                            ldv_7_index_index);
#line 1576
      ldv_7_ret_index = (loff_t *)tmp___3;
      }
#line 1583
      goto ldv_inner_loop_7;
    } else {
      {
#line 1588
      ldv_7_seq_file_seq_file->index = *ldv_7_index_index;
#line 1590
      ldv_traverse_kernel_items_scenario_stop_7_5(ldv_7_ops_seq_operations->stop,
                                                  ldv_7_seq_file_seq_file, (void *)ldv_7_ret_index);
#line 1592
      ldv_7_seq_file_seq_file->index = *ldv_7_index_index;
      }
#line 1599
      goto ldv_outer_loop_7;
    }
  } else {
    {
#line 1604
    tmp___5 = ldv_is_err_or_null((void const   *)ldv_7_ret_index);
#line 1604
    __VERIFIER_assume((int )tmp___5);
#line 1609
    ldv_7_seq_file_seq_file->index = *ldv_7_index_index;
#line 1611
    ldv_traverse_kernel_items_scenario_stop_7_2(ldv_7_ops_seq_operations->stop, ldv_7_seq_file_seq_file,
                                                (void *)ldv_7_ret_index);
#line 1613
    ldv_7_seq_file_seq_file->index = *ldv_7_index_index;
    }
#line 1620
    goto ldv_outer_loop_7;
  }
#line 1623
  return;
}
}
#line 1628 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void *ldv_traverse_kernel_items_scenario_next_6_7(void *(*arg0)(struct seq_file * ,
                                                                void * , loff_t * ) ,
                                                  struct seq_file *arg1 , void *arg2 ,
                                                  long long *arg3 ) 
{ 
  void *tmp ;

  {
  {
#line 1629
  tmp = nfs_server_list_next(arg1, arg2, arg3);
  }
#line 1629
  return (tmp);
}
}
#line 1633 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void *ldv_traverse_kernel_items_scenario_next_7_7(void *(*arg0)(struct seq_file * ,
                                                                void * , loff_t * ) ,
                                                  struct seq_file *arg1 , void *arg2 ,
                                                  long long *arg3 ) 
{ 
  void *tmp ;

  {
  {
#line 1634
  tmp = nfs_volume_list_next(arg1, arg2, arg3);
  }
#line 1634
  return (tmp);
}
}
#line 1638 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
int ldv_traverse_kernel_items_scenario_show_6_9(int (*arg0)(struct seq_file * , void * ) ,
                                                struct seq_file *arg1 , void *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1639
  tmp = nfs_server_list_show(arg1, arg2);
  }
#line 1639
  return (tmp);
}
}
#line 1643 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
int ldv_traverse_kernel_items_scenario_show_7_9(int (*arg0)(struct seq_file * , void * ) ,
                                                struct seq_file *arg1 , void *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1644
  tmp = nfs_volume_list_show(arg1, arg2);
  }
#line 1644
  return (tmp);
}
}
#line 1648 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void *ldv_traverse_kernel_items_scenario_start_6_14(void *(*arg0)(struct seq_file * ,
                                                                  loff_t * ) , struct seq_file *arg1 ,
                                                    long long *arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 1649
  tmp = nfs_server_list_start(arg1, arg2);
  }
#line 1649
  return (tmp);
}
}
#line 1653 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void *ldv_traverse_kernel_items_scenario_start_7_14(void *(*arg0)(struct seq_file * ,
                                                                  loff_t * ) , struct seq_file *arg1 ,
                                                    long long *arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 1654
  tmp = nfs_volume_list_start(arg1, arg2);
  }
#line 1654
  return (tmp);
}
}
#line 1658 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_traverse_kernel_items_scenario_stop_6_2(void (*arg0)(struct seq_file * ,
                                                              void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) 
{ 


  {
  {
#line 1659
  nfs_server_list_stop(arg1, arg2);
  }
#line 1660
  return;
}
}
#line 1663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_traverse_kernel_items_scenario_stop_6_5(void (*arg0)(struct seq_file * ,
                                                              void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) 
{ 


  {
  {
#line 1664
  nfs_server_list_stop(arg1, arg2);
  }
#line 1665
  return;
}
}
#line 1668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_traverse_kernel_items_scenario_stop_7_2(void (*arg0)(struct seq_file * ,
                                                              void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) 
{ 


  {
  {
#line 1669
  nfs_volume_list_stop(arg1, arg2);
  }
#line 1670
  return;
}
}
#line 1673 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
void ldv_traverse_kernel_items_scenario_stop_7_5(void (*arg0)(struct seq_file * ,
                                                              void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) 
{ 


  {
  {
#line 1674
  nfs_volume_list_stop(arg1, arg2);
  }
#line 1675
  return;
}
}
#line 1679 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
__inline static void *ERR_PTR(long error ) 
{ 
  void *tmp ;

  {
  {
#line 1682
  tmp = ldv_err_ptr(error);
  }
#line 1682
  return (tmp);
}
}
#line 1686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
__inline static long PTR_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 1689
  tmp = ldv_ptr_err(ptr);
  }
#line 1689
  return (tmp);
}
}
#line 2020 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 2023
  tmp = ldv_kzalloc(size, flags);
  }
#line 2023
  return (tmp);
}
}
#line 2390 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
__inline static void ldv_spin_lock_81(spinlock_t *lock ) 
{ 


  {
  {
#line 2393
  ldv_spin_lock_nfs_version_lock();
#line 2395
  spin_lock(lock);
  }
#line 2396
  return;
}
}
#line 2399 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
__inline static void ldv_spin_unlock_82(spinlock_t *lock ) 
{ 


  {
  {
#line 2402
  ldv_spin_unlock_nfs_version_lock();
#line 2404
  spin_unlock(lock);
  }
#line 2405
  return;
}
}
#line 2453 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
static int ldv___ldv_atomic_dec_and_lock_88(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 2457
  tmp = __ldv_atomic_dec_and_lock(ldv_func_arg1);
#line 2457
  ldv_func_res = tmp;
#line 2459
  tmp___0 = ldv_atomic_dec_and_lock_nfs_client_lock_of_nfs_net();
  }
#line 2459
  return (tmp___0);
#line 2461
  return (ldv_func_res);
}
}
#line 2465 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
__inline static void ldv_spin_unlock_89(spinlock_t *lock ) 
{ 


  {
  {
#line 2468
  ldv_spin_unlock_nfs_client_lock_of_nfs_net();
#line 2470
  spin_unlock(lock);
  }
#line 2471
  return;
}
}
#line 2474 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
__inline static void ldv_spin_lock_90(spinlock_t *lock ) 
{ 


  {
  {
#line 2477
  ldv_spin_lock_nfs_client_lock_of_nfs_net();
#line 2479
  spin_lock(lock);
  }
#line 2480
  return;
}
}
#line 2546 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
static int ldv_seq_open_98(struct file *ldv_func_arg1 , struct seq_operations  const  *ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 2550
  tmp = ldv_emg_seq_open(ldv_func_arg1, (struct seq_operations *)ldv_func_arg2);
  }
#line 2550
  return (tmp);
}
}
#line 2572 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_client.c.aux"
static int ldv_seq_open_101(struct file *ldv_func_arg1 , struct seq_operations  const  *ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 2576
  tmp = ldv_emg_seq_open(ldv_func_arg1, (struct seq_operations *)ldv_func_arg2);
  }
#line 2576
  return (tmp);
}
}
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size , gfp_t flags ) ;
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
  }
#line 146
  return;
}
}
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
  }
#line 157
  return;
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
  {
#line 167
  __list_del_entry(list);
#line 168
  list_add_tail(list, head);
  }
#line 169
  return;
}
}
#line 358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/paravirt_types.h"
extern struct pv_irq_ops pv_irq_ops ;
#line 204 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
#line 206
  __asm__  volatile   ("":);
#line 206
  return (0);

#line 206
  return (1);
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/printk.h"
extern int __printk_ratelimit(char const   * ) ;
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 60
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/string.h"
extern void *kmemdup(void const   * , size_t  , gfp_t  ) ;
#line 802 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_save_flags(void) 
{ 
  unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  {
#line 804
  __edi = __edi;
#line 804
  __esi = __esi;
#line 804
  __edx = __edx;
#line 804
  __ecx = __ecx;
#line 804
  __eax = __eax;
#line 804
  tmp = __builtin_expect((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0),
                         0L);
  }
#line 804
  if (tmp != 0L) {
    {
#line 804
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"./arch/x86/include/asm/paravirt.h"),
                         "i" (804), "i" (12UL));
#line 804
    __builtin_unreachable();
    }
  } else {

  }
#line 804
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (44UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 804
  __ret = __eax;
#line 804
  return (__ret);
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_CAST(void const   *ptr ) 
{ 


  {
#line 53
  return ((void *)ptr);
}
}
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/irqflags.h"
__inline static int arch_irqs_disabled_flags(unsigned long flags ) 
{ 


  {
#line 157
  return ((flags & 512UL) == 0UL);
}
}
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic64_64.h"
__inline static long atomic64_read(atomic64_t const   *v ) 
{ 


  {
#line 21
  return ((long )*((long volatile   *)(& v->counter)));
}
}
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic64_64.h"
__inline static void atomic64_inc(atomic64_t *v ) 
{ 


  {
#line 86
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incq %0": "=m" (v->counter): "m" (v->counter));
#line 89
  return;
}
}
#line 97 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic64_64.h"
__inline static void atomic64_dec(atomic64_t *v ) 
{ 


  {
#line 99
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decq %0": "=m" (v->counter): "m" (v->counter));
#line 102
  return;
}
}
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/atomic-long.h"
__inline static long atomic_long_read(atomic_long_t *l ) 
{ 
  atomic64_t *v ;
  long tmp ;

  {
  {
#line 29
  v = l;
#line 31
  tmp = atomic64_read((atomic64_t const   *)v);
  }
#line 31
  return (tmp);
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/atomic-long.h"
__inline static void atomic_long_inc(atomic_long_t *l ) 
{ 
  atomic64_t *v ;

  {
  {
#line 43
  v = l;
#line 45
  atomic64_inc(v);
  }
#line 46
  return;
}
}
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/atomic-long.h"
__inline static void atomic_long_dec(atomic_long_t *l ) 
{ 
  atomic64_t *v ;

  {
  {
#line 50
  v = l;
#line 52
  atomic64_dec(v);
  }
#line 53
  return;
}
}
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/debug_locks.h"
extern int debug_locks ;
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_spin_lock_i_lock_of_inode(void) ;
#line 102
void ldv_spin_unlock_i_lock_of_inode(void) ;
#line 117
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) ;
#line 118
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) ;
#line 165
void ldv_spin_lock_nfs_access_lru_lock(void) ;
#line 166
void ldv_spin_unlock_nfs_access_lru_lock(void) ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void) 
{ 
  int pfo_ret__ ;

  {
  {
#line 22
  if (4UL == 1UL) {
#line 22
    goto case_1;
  } else {

  }
#line 22
  if (4UL == 2UL) {
#line 22
    goto case_2;
  } else {

  }
#line 22
  if (4UL == 4UL) {
#line 22
    goto case_4;
  } else {

  }
#line 22
  if (4UL == 8UL) {
#line 22
    goto case_8;
  } else {

  }
#line 22
  goto switch_default;
  case_1: /* CIL Label */ 
#line 22
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
#line 22
  goto ldv_6698;
  case_2: /* CIL Label */ 
#line 22
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
#line 22
  goto ldv_6698;
  case_4: /* CIL Label */ 
#line 22
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
#line 22
  goto ldv_6698;
  case_8: /* CIL Label */ 
#line 22
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
#line 22
  goto ldv_6698;
  switch_default: /* CIL Label */ 
  {
#line 22
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6698: ;
#line 22
  return (pfo_ret__ & 2147483647);
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add___0(int val ) 
{ 
  int pao_ID__ ;

  {
#line 75
  pao_ID__ = 0;
  {
#line 75
  if (4UL == 1UL) {
#line 75
    goto case_1;
  } else {

  }
#line 75
  if (4UL == 2UL) {
#line 75
    goto case_2;
  } else {

  }
#line 75
  if (4UL == 4UL) {
#line 75
    goto case_4;
  } else {

  }
#line 75
  if (4UL == 8UL) {
#line 75
    goto case_8;
  } else {

  }
#line 75
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val));
  }
#line 75
  goto ldv_6755;
  case_2: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
#line 75
  goto ldv_6755;
  case_4: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
#line 75
  goto ldv_6755;
  case_8: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val));
  }
#line 75
  goto ldv_6755;
  switch_default: /* CIL Label */ 
  {
#line 75
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6755: ;
#line 77
  return;
}
}
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub___0(int val ) 
{ 
  int pao_ID__ ;

  {
#line 80
  pao_ID__ = 0;
  {
#line 80
  if (4UL == 1UL) {
#line 80
    goto case_1;
  } else {

  }
#line 80
  if (4UL == 2UL) {
#line 80
    goto case_2;
  } else {

  }
#line 80
  if (4UL == 4UL) {
#line 80
    goto case_4;
  } else {

  }
#line 80
  if (4UL == 8UL) {
#line 80
    goto case_8;
  } else {

  }
#line 80
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val));
  }
#line 80
  goto ldv_6767;
  case_2: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
#line 80
  goto ldv_6767;
  case_4: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
#line 80
  goto ldv_6767;
  case_8: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val));
  }
#line 80
  goto ldv_6767;
  switch_default: /* CIL Label */ 
  {
#line 80
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6767: ;
#line 82
  return;
}
}
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key ) 
{ 


  {
#line 21
  __asm__  volatile   ("":);
#line 28
  return (0);

#line 30
  return (1);
}
}
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key ) 
{ 
  bool tmp ;

  {
  {
#line 115
  tmp = arch_static_branch(key);
  }
#line 115
  return (tmp);
}
}
#line 365 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 373
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 377
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 381
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 385
__inline static void ldv_spin_lock_82(spinlock_t *lock ) ;
#line 389
__inline static void ldv_spin_lock_85(spinlock_t *lock ) ;
#line 393
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 397
__inline static void ldv_spin_lock_85(spinlock_t *lock ) ;
#line 401
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 405
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 409
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 413
__inline static void ldv_spin_lock_85(spinlock_t *lock ) ;
#line 409
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 429
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 433
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 437
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 441
__inline static void ldv_spin_unlock_88(spinlock_t *lock ) ;
#line 445
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 449
__inline static void ldv_spin_unlock_88(spinlock_t *lock ) ;
#line 453
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 457
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 461
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 465
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 469
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 473
__inline static void ldv_spin_unlock_88(spinlock_t *lock ) ;
#line 370 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
extern struct lockdep_map rcu_sched_lock_map ;
#line 443 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 
  int lockdep_opinion ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned long _flags ;
  int tmp___5 ;
  int tmp___6 ;

  {
  {
#line 445
  lockdep_opinion = 0;
#line 447
  tmp = debug_lockdep_rcu_enabled();
  }
#line 447
  if (tmp == 0) {
#line 448
    return (1);
  } else {

  }
  {
#line 449
  tmp___0 = rcu_is_watching();
  }
#line 449
  if (tmp___0) {
#line 449
    tmp___1 = 0;
  } else {
#line 449
    tmp___1 = 1;
  }
#line 449
  if (tmp___1) {
#line 450
    return (0);
  } else {

  }
  {
#line 451
  tmp___2 = rcu_lockdep_current_cpu_online();
  }
#line 451
  if (tmp___2) {
#line 451
    tmp___3 = 0;
  } else {
#line 451
    tmp___3 = 1;
  }
#line 451
  if (tmp___3) {
#line 452
    return (0);
  } else {

  }
#line 453
  if (debug_locks != 0) {
    {
#line 454
    lockdep_opinion = lock_is_held(& rcu_sched_lock_map);
    }
  } else {

  }
#line 455
  if (lockdep_opinion != 0) {
#line 455
    tmp___6 = 1;
  } else {
    {
#line 455
    tmp___4 = preempt_count();
    }
#line 455
    if (tmp___4 != 0) {
#line 455
      tmp___6 = 1;
    } else {
      {
#line 455
      _flags = arch_local_save_flags();
#line 455
      tmp___5 = arch_irqs_disabled_flags(_flags);
      }
#line 455
      if (tmp___5 != 0) {
#line 455
        tmp___6 = 1;
      } else {
#line 455
        tmp___6 = 0;
      }
    }
  }
#line 455
  return (tmp___6);
}
}
#line 935 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
  {
#line 937
  __preempt_count_add___0(1);
#line 937
  __asm__  volatile   ("": : : "memory");
  }
#line 939
  return;
}
}
#line 956 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace(void) 
{ 


  {
  {
#line 959
  __asm__  volatile   ("": : : "memory");
#line 959
  __preempt_count_sub___0(1);
  }
#line 960
  return;
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node * , struct rb_root * ) ;
#line 62
extern void rb_erase(struct rb_node * , struct rb_root * ) ;
#line 68
extern struct rb_node *rb_first(struct rb_root  const  * ) ;
#line 76
extern void rb_replace_node(struct rb_node * , struct rb_node * , struct rb_root * ) ;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rbtree.h"
__inline static void rb_link_node(struct rb_node *node , struct rb_node *parent ,
                                  struct rb_node **rb_link ) 
{ 
  struct rb_node *tmp ;

  {
#line 82
  node->__rb_parent_color = (unsigned long )parent;
#line 83
  tmp = (struct rb_node *)0;
#line 83
  node->rb_right = tmp;
#line 83
  node->rb_left = tmp;
#line 85
  *rb_link = node;
#line 86
  return;
}
}
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kdev_t.h"
__inline static int new_valid_dev(dev_t dev ) 
{ 


  {
#line 40
  return (1);
}
}
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list_bl.h"
__inline static int hlist_bl_unhashed(struct hlist_bl_node  const  *h ) 
{ 


  {
#line 53
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_bl_node **/* const  */)0));
}
}
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
extern unsigned int full_name_hash(unsigned char const   * , unsigned int  ) ;
#line 236
extern void d_instantiate(struct dentry * , struct inode * ) ;
#line 238
extern struct dentry *d_materialise_unique(struct dentry * , struct inode * ) ;
#line 240
extern void __d_drop(struct dentry * ) ;
#line 241
extern void d_drop(struct dentry * ) ;
#line 242
extern void d_delete(struct dentry * ) ;
#line 246
extern struct dentry *d_alloc(struct dentry * , struct qstr  const  * ) ;
#line 255
extern int d_invalidate(struct dentry * ) ;
#line 270
extern int check_submounts_and_drop(struct dentry * ) ;
#line 275
extern void d_rehash(struct dentry * ) ;
#line 286 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
__inline static void d_add(struct dentry *entry , struct inode *inode ) 
{ 


  {
  {
#line 288
  d_instantiate(entry, inode);
#line 289
  d_rehash(entry);
  }
#line 290
  return;
}
}
#line 312
extern void d_move(struct dentry * , struct dentry * ) ;
#line 317
extern struct dentry *d_lookup(struct dentry  const  * , struct qstr  const  * ) ;
#line 323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
__inline static unsigned int d_count(struct dentry  const  *dentry ) 
{ 


  {
#line 325
  return ((unsigned int )dentry->d_lockref.__annonCompField23.__annonCompField22.count);
}
}
#line 367
extern struct dentry *dget_parent(struct dentry * ) ;
#line 376 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
__inline static int d_unhashed(struct dentry  const  *dentry ) 
{ 
  int tmp ;

  {
  {
#line 378
  tmp = hlist_bl_unhashed(& dentry->d_hash);
  }
#line 378
  return (tmp);
}
}
#line 398
extern void dput(struct dentry * ) ;
#line 405 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
__inline static bool d_mountpoint(struct dentry  const  *dentry ) 
{ 


  {
#line 407
  return (((unsigned int )dentry->d_flags & 65536U) != 0U);
}
}
#line 470
extern int sysctl_vfs_cache_pressure ;
#line 472 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
__inline static unsigned long vfs_pressure_ratio(unsigned long val ) 
{ 
  unsigned long quot ;
  unsigned long rem ;

  {
#line 474
  quot = val / 100UL;
#line 474
  rem = val % 100UL;
#line 474
  return (quot * (unsigned long )sysctl_vfs_cache_pressure + (rem * (unsigned long )sysctl_vfs_cache_pressure) / 100UL);
}
}
#line 174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 1703 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
extern void clear_nlink(struct inode * ) ;
#line 1846
extern int current_umask(void) ;
#line 1848
extern void ihold(struct inode * ) ;
#line 1849
extern void iput(struct inode * ) ;
#line 1851 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static struct inode *file_inode(struct file *f ) 
{ 


  {
#line 1853
  return (f->f_inode);
}
}
#line 2044
extern int finish_open(struct file * , struct dentry * , int (*)(struct inode * ,
                                                                 struct file * ) ,
                       int * ) ;
#line 2047
extern int finish_no_open(struct file * , struct dentry * ) ;
#line 2184
extern int is_bad_inode(struct inode * ) ;
#line 2214
extern int invalidate_inode_pages2_range(struct address_space * , unsigned long  ,
                                         unsigned long  ) ;
#line 2216
extern int write_inode_now(struct inode * , int  ) ;
#line 2247
extern int generic_permission(struct inode * , int  ) ;
#line 2249 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static bool execute_ok(struct inode *inode ) 
{ 


  {
#line 2251
  return ((bool )(((int )inode->i_mode & 73) != 0 || ((int )inode->i_mode & 61440) == 16384));
}
}
#line 2590
extern ssize_t generic_read_dir(struct file * , char * , size_t  , loff_t * ) ;
#line 2735 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static bool dir_emit(struct dir_context *ctx , char const   *name , int namelen ,
                              u64 ino , unsigned int type ) 
{ 
  int tmp ;

  {
  {
#line 2739
  tmp = (*(ctx->actor))((void *)ctx, name, namelen, ctx->pos, ino, type);
  }
#line 2739
  return (tmp == 0);
}
}
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 334 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
  {
#line 336
  tmp = alloc_pages_current(gfp_mask, order);
  }
#line 336
  return (tmp);
}
}
#line 371
extern void __free_pages(struct page * , unsigned int  ) ;
#line 306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static void SetPageUptodate(struct page *page ) 
{ 


  {
  {
#line 313
  __asm__  volatile   ("": : : "memory");
#line 314
  set_bit(3L, (unsigned long volatile   *)(& page->flags));
  }
#line 315
  return;
}
}
#line 556 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 912 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 914
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
  {
#line 58
  __might_sleep("include/linux/highmem.h", 58, 0);
#line 59
  tmp = lowmem_page_address((struct page  const  *)page);
  }
#line 59
  return (tmp);
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 64
  return;
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
  {
#line 68
  rcu_read_lock_sched_notrace();
#line 69
  tmp = lowmem_page_address((struct page  const  *)page);
  }
#line 69
  return (tmp);
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
  {
#line 75
  rcu_read_unlock_sched_notrace();
  }
#line 76
  return;
}
}
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
extern struct page *read_cache_page(struct address_space * , unsigned long  , filler_t * ,
                                    void * ) ;
#line 444
extern void unlock_page(struct page * ) ;
#line 657
extern int add_to_page_cache_lru(struct page * , struct address_space * , unsigned long  ,
                                 gfp_t  ) ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kmemleak.h"
extern void kmemleak_not_leak(void const   * ) ;
#line 445 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xdr.h"
extern void xdr_init_decode_pages(struct xdr_stream * , struct xdr_buf * , struct page ** ,
                                  unsigned int  ) ;
#line 227
extern void xdr_set_scratch_buffer(struct xdr_stream * , void * , size_t  ) ;
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
extern void rpc_put_task(struct rpc_task * ) ;
#line 239
extern int __rpc_wait_for_completion_task(struct rpc_task * , int (*)(void * ) ) ;
#line 249 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
__inline static int rpc_wait_for_completion_task(struct rpc_task *task ) 
{ 
  int tmp ;

  {
  {
#line 251
  tmp = __rpc_wait_for_completion_task(task, (int (*)(void * ))0);
  }
#line 251
  return (tmp);
}
}
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
extern struct rpc_cred *rpc_lookup_cred(void) ;
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
__inline static struct rpc_cred *get_rpccred(struct rpc_cred *cred ) 
{ 


  {
  {
#line 189
  atomic_inc(& cred->cr_count);
  }
#line 190
  return (cred);
}
}
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs.h"
__inline static int nfs_compare_fh(struct nfs_fh  const  *a , struct nfs_fh  const  *b ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 29
  if ((int )((unsigned short )a->size) != (int )((unsigned short )b->size)) {
#line 29
    tmp___0 = 1;
  } else {
    {
#line 29
    tmp = memcmp((void const   *)(& a->data), (void const   *)(& b->data), (size_t )a->size);
    }
#line 29
    if (tmp != 0) {
#line 29
      tmp___0 = 1;
    } else {
#line 29
      tmp___0 = 0;
    }
  }
#line 29
  return (tmp___0);
}
}
#line 223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static struct nfs_inode *NFS_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 225
  __mptr = inode;
#line 225
  return ((struct nfs_inode *)((char *)__mptr + 0xfffffffffffffd80UL));
}
}
#line 228 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static struct nfs_server *NFS_SB(struct super_block  const  *s ) 
{ 


  {
#line 230
  return ((struct nfs_server *)s->s_fs_info);
}
}
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static struct nfs_fh *NFS_FH(struct inode  const  *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 235
  tmp = NFS_I(inode);
  }
#line 235
  return (& tmp->fh);
}
}
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static struct nfs_server *NFS_SERVER(struct inode  const  *inode ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 240
  tmp = NFS_SB((struct super_block  const  *)inode->i_sb);
  }
#line 240
  return (tmp);
}
}
#line 248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static struct nfs_rpc_ops  const  *NFS_PROTO(struct inode  const  *inode ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 250
  tmp = NFS_SERVER(inode);
  }
#line 250
  return ((tmp->nfs_client)->rpc_ops);
}
}
#line 265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static int NFS_STALE(struct inode  const  *inode ) 
{ 
  struct nfs_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 267
  tmp = NFS_I(inode);
#line 267
  tmp___0 = constant_test_bit(1L, (unsigned long const volatile   *)(& tmp->flags));
  }
#line 267
  return (tmp___0);
}
}
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static void nfs_mark_for_revalidate(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;

  {
  {
#line 291
  tmp = NFS_I((struct inode  const  *)inode);
#line 291
  nfsi = tmp;
#line 293
  ldv_spin_lock_72(& inode->i_lock);
#line 294
  nfsi->cache_validity = nfsi->cache_validity | 9UL;
  }
#line 295
  if (((int )inode->i_mode & 61440) == 16384) {
#line 296
    nfsi->cache_validity = nfsi->cache_validity | 34UL;
  } else {

  }
  {
#line 297
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 298
  return;
}
}
#line 300 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static int nfs_server_capable(struct inode *inode , int cap ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 302
  tmp = NFS_SERVER((struct inode  const  *)inode);
  }
#line 302
  return ((int )(tmp->caps & (unsigned int )cap));
}
}
#line 305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static void nfs_set_verifier(struct dentry *dentry , unsigned long verf ) 
{ 


  {
#line 307
  dentry->d_time = verf;
#line 308
  return;
}
}
#line 316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static unsigned long nfs_save_change_attribute(struct inode *dir ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 318
  tmp = NFS_I((struct inode  const  *)dir);
  }
#line 318
  return (tmp->cache_change_attribute);
}
}
#line 329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static int nfs_verify_change_attribute(struct inode *dir , unsigned long chattr ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 331
  tmp = NFS_I((struct inode  const  *)dir);
  }
#line 331
  return (chattr == tmp->cache_change_attribute);
}
}
#line 338
void nfs_zap_mapping(struct inode *inode , struct address_space *mapping ) ;
#line 339
void nfs_zap_caches(struct inode *inode ) ;
#line 341
struct inode *nfs_fhget(struct super_block *sb , struct nfs_fh *fh , struct nfs_fattr *fattr ,
                        struct nfs4_label *label ) ;
#line 343
int nfs_refresh_inode(struct inode *inode , struct nfs_fattr *fattr ) ;
#line 347
void nfs_access_add_cache(struct inode *inode , struct nfs_access_entry *set ) ;
#line 348
void nfs_access_set_mask(struct nfs_access_entry *entry , u32 access_result ) ;
#line 349
int nfs_permission(struct inode *inode , int mask ) ;
#line 353
int nfs_attribute_cache_expired(struct inode *inode ) ;
#line 354
int nfs_revalidate_inode(struct nfs_server *server , struct inode *inode ) ;
#line 355
int __nfs_revalidate_inode(struct nfs_server *server , struct inode *inode ) ;
#line 356
int nfs_revalidate_mapping(struct inode *inode , struct address_space *mapping ) ;
#line 359
void nfs_setsecurity(struct inode *inode , struct nfs_fattr *fattr , struct nfs4_label *label ) ;
#line 362
void put_nfs_open_context(struct nfs_open_context *ctx ) ;
#line 364
struct nfs_open_context *alloc_nfs_open_context(struct dentry *dentry , fmode_t f_mode ) ;
#line 366
void nfs_file_set_open_context(struct file *filp , struct nfs_open_context *ctx ) ;
#line 369
u64 nfs_compat_user_ino64(u64 fileid ) ;
#line 371
unsigned long nfs_inc_attr_generation_counter(void) ;
#line 380
struct nfs_fh *nfs_alloc_fhandle(void) ;
#line 382 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static void nfs_free_fhandle(struct nfs_fh  const  *fh ) 
{ 


  {
  {
#line 384
  kfree((void const   *)fh);
  }
#line 385
  return;
}
}
#line 425
struct address_space_operations  const  nfs_dir_aops ;
#line 473
struct file_operations  const  nfs_dir_operations ;
#line 474
struct dentry_operations  const  nfs_dentry_operations ;
#line 476
void nfs_force_lookup_revalidate(struct inode *dir ) ;
#line 477
int nfs_instantiate(struct dentry *dentry , struct nfs_fh *fhandle , struct nfs_fattr *fattr ,
                    struct nfs4_label *label ) ;
#line 479
int nfs_may_open(struct inode *inode , struct rpc_cred *cred , int openflags ) ;
#line 480
void nfs_access_zap_cache(struct inode *inode ) ;
#line 509
void nfs_complete_unlink(struct dentry *dentry , struct inode *inode ) ;
#line 510
void nfs_wait_on_sillyrename(struct dentry *dentry ) ;
#line 511
void nfs_block_sillyrename(struct dentry *dentry ) ;
#line 512
void nfs_unblock_sillyrename(struct dentry *dentry ) ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/delegation.h"
__inline static int nfs_have_delegated_attributes(struct inode *inode ) 
{ 
  struct nfs_rpc_ops  const  *tmp ;
  int tmp___0 ;
  struct nfs_inode *tmp___1 ;
  int tmp___2 ;

  {
  {
#line 67
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 67
  tmp___0 = (*(tmp->have_delegation))(inode, 1U);
  }
#line 67
  if (tmp___0 != 0) {
    {
#line 67
    tmp___1 = NFS_I((struct inode  const  *)inode);
    }
#line 67
    if ((tmp___1->cache_validity & 64UL) == 0UL) {
#line 67
      tmp___2 = 1;
    } else {
#line 67
      tmp___2 = 0;
    }
  } else {
#line 67
    tmp___2 = 0;
  }
#line 67
  return (tmp___2);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_server_stats(struct nfs_server  const  *server , enum nfs_stat_eventcounters stat ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 28
  __vpp_verify = (void const   *)0;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___0;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___1;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___2;
  } else {

  }
#line 28
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 28
  pao_ID__ = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___0;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8;
  } else {

  }
#line 28
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53276;
  case_2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53276;
  case_4: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53276;
  case_8: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53276;
  switch_default: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_53276: ;
#line 28
  goto ldv_53281;
  case_2___0: /* CIL Label */ 
#line 28
  pao_ID_____0 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___1;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___0;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___0;
  } else {

  }
#line 28
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53287;
  case_2___1: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53287;
  case_4___0: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53287;
  case_8___0: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53287;
  switch_default___0: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_53287: ;
#line 28
  goto ldv_53281;
  case_4___1: /* CIL Label */ 
#line 28
  pao_ID_____1 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___2;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___2;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___1;
  } else {

  }
#line 28
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53297;
  case_2___2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53297;
  case_4___2: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53297;
  case_8___1: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53297;
  switch_default___1: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_53297: ;
#line 28
  goto ldv_53281;
  case_8___2: /* CIL Label */ 
#line 28
  pao_ID_____2 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___3;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___3;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___3;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___3;
  } else {

  }
#line 28
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53307;
  case_2___3: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53307;
  case_4___3: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53307;
  case_8___3: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53307;
  switch_default___2: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_53307: ;
#line 28
  goto ldv_53281;
  switch_default___3: /* CIL Label */ 
  {
#line 28
  __bad_size_call_parameter();
  }
#line 28
  goto ldv_53281;
  switch_break: /* CIL Label */ ;
  }
  ldv_53281: ;
#line 29
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_stats(struct inode  const  *inode , enum nfs_stat_eventcounters stat ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 34
  tmp = NFS_SERVER(inode);
#line 34
  nfs_inc_server_stats((struct nfs_server  const  *)tmp, stat);
  }
#line 35
  return;
}
}
#line 223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct dentry_operations  const  nfs4_dentry_operations ;
#line 226
int nfs_atomic_open(struct inode *dir , struct dentry *dentry , struct file *file ,
                    unsigned int open_flags , umode_t mode , int *opened ) ;
#line 282 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct nfs4_label *nfs4_label_alloc(struct nfs_server *server , gfp_t flags ) ;
#line 283 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static void nfs4_label_free(struct nfs4_label *label ) 
{ 


  {
#line 285
  if ((unsigned long )label != (unsigned long )((struct nfs4_label *)0)) {
    {
#line 286
    kfree((void const   *)label->label);
#line 287
    kfree((void const   *)label);
    }
  } else {

  }
#line 289
  return;
}
}
#line 312
void nfs_force_use_readdirplus(struct inode *dir ) ;
#line 313
unsigned long nfs_access_cache_count(struct shrinker *shrink , struct shrink_control *sc ) ;
#line 315
unsigned long nfs_access_cache_scan(struct shrinker *shrink , struct shrink_control *sc ) ;
#line 317
struct dentry *nfs_lookup(struct inode *dir , struct dentry *dentry , unsigned int flags ) ;
#line 318
int nfs_create(struct inode *dir , struct dentry *dentry , umode_t mode , bool excl ) ;
#line 319
int nfs_mkdir(struct inode *dir , struct dentry *dentry , umode_t mode ) ;
#line 320
int nfs_rmdir(struct inode *dir , struct dentry *dentry ) ;
#line 321
int nfs_unlink(struct inode *dir , struct dentry *dentry ) ;
#line 322
int nfs_symlink(struct inode *dir , struct dentry *dentry , char const   *symname ) ;
#line 323
int nfs_link(struct dentry *old_dentry , struct inode *dir , struct dentry *dentry ) ;
#line 324
int nfs_mknod(struct inode *dir , struct dentry *dentry , umode_t mode , dev_t rdev ) ;
#line 325
int nfs_rename(struct inode *old_dir , struct dentry *old_dentry , struct inode *new_dir ,
               struct dentry *new_dentry ) ;
#line 339
int nfs_check_flags(int flags ) ;
#line 386
struct vfsmount *nfs_d_automount(struct path *path ) ;
#line 470
struct rpc_task *nfs_async_rename(struct inode *old_dir , struct inode *new_dir ,
                                  struct dentry *old_dentry , struct dentry *new_dentry ,
                                  void (*complete___0)(struct rpc_task * , struct nfs_renamedata * ) ) ;
#line 473
int nfs_sillyrename(struct inode *dir , struct dentry *dentry ) ;
#line 81 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
void nfs_fscache_open_file(struct inode *inode , struct file *filp ) ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_access_enter ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_access_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 158
  tmp___1 = static_key_false(& __tracepoint_nfs_access_enter.key);
  }
#line 158
  if ((int )tmp___1) {
    {
#line 158
    rcu_read_lock_sched_notrace();
#line 158
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_access_enter.funcs));
#line 158
    tmp = debug_lockdep_rcu_enabled();
    }
#line 158
    if (tmp != 0 && ! __warned) {
      {
#line 158
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 158
      if (tmp___0 == 0) {
        {
#line 158
        __warned = 1;
#line 158
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 158, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 158
    it_func_ptr = _________p1;
#line 158
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55565: 
      {
#line 158
      it_func = it_func_ptr->func;
#line 158
      __data = it_func_ptr->data;
#line 158
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 158
      it_func_ptr = it_func_ptr + 1;
      }
#line 158
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 160
        goto ldv_55565;
      } else {

      }

    } else {

    }
    {
#line 158
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 160
  return;
}
}
#line 159
struct tracepoint __tracepoint_nfs_access_exit ;
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_access_exit(struct inode  const  *inode , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 159
  tmp___1 = static_key_false(& __tracepoint_nfs_access_exit.key);
  }
#line 159
  if ((int )tmp___1) {
    {
#line 159
    rcu_read_lock_sched_notrace();
#line 159
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_access_exit.funcs));
#line 159
    tmp = debug_lockdep_rcu_enabled();
    }
#line 159
    if (tmp != 0 && ! __warned) {
      {
#line 159
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 159
      if (tmp___0 == 0) {
        {
#line 159
        __warned = 1;
#line 159
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 159, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 159
    it_func_ptr = _________p1;
#line 159
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55601: 
      {
#line 159
      it_func = it_func_ptr->func;
#line 159
      __data = it_func_ptr->data;
#line 159
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 159
      it_func_ptr = it_func_ptr + 1;
      }
#line 159
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 161
        goto ldv_55601;
      } else {

      }

    } else {

    }
    {
#line 159
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 161
  return;
}
}
#line 258
struct tracepoint __tracepoint_nfs_lookup_enter ;
#line 258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_lookup_enter(struct inode  const  *dir , struct dentry  const  *dentry ,
                                            unsigned int flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 258
  tmp___1 = static_key_false(& __tracepoint_nfs_lookup_enter.key);
  }
#line 258
  if ((int )tmp___1) {
    {
#line 258
    rcu_read_lock_sched_notrace();
#line 258
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_lookup_enter.funcs));
#line 258
    tmp = debug_lockdep_rcu_enabled();
    }
#line 258
    if (tmp != 0 && ! __warned) {
      {
#line 258
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 258
      if (tmp___0 == 0) {
        {
#line 258
        __warned = 1;
#line 258
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 258, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 258
    it_func_ptr = _________p1;
#line 258
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55642: 
      {
#line 258
      it_func = it_func_ptr->func;
#line 258
      __data = it_func_ptr->data;
#line 258
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , unsigned int  ))it_func))(__data,
                                                                                                         dir,
                                                                                                         dentry,
                                                                                                         flags);
#line 258
      it_func_ptr = it_func_ptr + 1;
      }
#line 258
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 260
        goto ldv_55642;
      } else {

      }

    } else {

    }
    {
#line 258
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 260
  return;
}
}
#line 259
struct tracepoint __tracepoint_nfs_lookup_exit ;
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_lookup_exit(struct inode  const  *dir , struct dentry  const  *dentry ,
                                           unsigned int flags , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 259
  tmp___1 = static_key_false(& __tracepoint_nfs_lookup_exit.key);
  }
#line 259
  if ((int )tmp___1) {
    {
#line 259
    rcu_read_lock_sched_notrace();
#line 259
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_lookup_exit.funcs));
#line 259
    tmp = debug_lockdep_rcu_enabled();
    }
#line 259
    if (tmp != 0 && ! __warned) {
      {
#line 259
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 259
      if (tmp___0 == 0) {
        {
#line 259
        __warned = 1;
#line 259
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 259, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 259
    it_func_ptr = _________p1;
#line 259
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55688: 
      {
#line 259
      it_func = it_func_ptr->func;
#line 259
      __data = it_func_ptr->data;
#line 259
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , unsigned int  ,
                   int  ))it_func))(__data, dir, dentry, flags, error);
#line 259
      it_func_ptr = it_func_ptr + 1;
      }
#line 259
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 261
        goto ldv_55688;
      } else {

      }

    } else {

    }
    {
#line 259
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 261
  return;
}
}
#line 260
struct tracepoint __tracepoint_nfs_lookup_revalidate_enter ;
#line 260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_lookup_revalidate_enter(struct inode  const  *dir ,
                                                       struct dentry  const  *dentry ,
                                                       unsigned int flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 260
  tmp___1 = static_key_false(& __tracepoint_nfs_lookup_revalidate_enter.key);
  }
#line 260
  if ((int )tmp___1) {
    {
#line 260
    rcu_read_lock_sched_notrace();
#line 260
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_lookup_revalidate_enter.funcs));
#line 260
    tmp = debug_lockdep_rcu_enabled();
    }
#line 260
    if (tmp != 0 && ! __warned) {
      {
#line 260
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 260
      if (tmp___0 == 0) {
        {
#line 260
        __warned = 1;
#line 260
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 260, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 260
    it_func_ptr = _________p1;
#line 260
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55735: 
      {
#line 260
      it_func = it_func_ptr->func;
#line 260
      __data = it_func_ptr->data;
#line 260
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , unsigned int  ))it_func))(__data,
                                                                                                         dir,
                                                                                                         dentry,
                                                                                                         flags);
#line 260
      it_func_ptr = it_func_ptr + 1;
      }
#line 260
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 262
        goto ldv_55735;
      } else {

      }

    } else {

    }
    {
#line 260
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 262
  return;
}
}
#line 261
struct tracepoint __tracepoint_nfs_lookup_revalidate_exit ;
#line 261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_lookup_revalidate_exit(struct inode  const  *dir ,
                                                      struct dentry  const  *dentry ,
                                                      unsigned int flags , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 261
  tmp___1 = static_key_false(& __tracepoint_nfs_lookup_revalidate_exit.key);
  }
#line 261
  if ((int )tmp___1) {
    {
#line 261
    rcu_read_lock_sched_notrace();
#line 261
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_lookup_revalidate_exit.funcs));
#line 261
    tmp = debug_lockdep_rcu_enabled();
    }
#line 261
    if (tmp != 0 && ! __warned) {
      {
#line 261
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 261
      if (tmp___0 == 0) {
        {
#line 261
        __warned = 1;
#line 261
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 261, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 261
    it_func_ptr = _________p1;
#line 261
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55781: 
      {
#line 261
      it_func = it_func_ptr->func;
#line 261
      __data = it_func_ptr->data;
#line 261
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , unsigned int  ,
                   int  ))it_func))(__data, dir, dentry, flags, error);
#line 261
      it_func_ptr = it_func_ptr + 1;
      }
#line 261
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 263
        goto ldv_55781;
      } else {

      }

    } else {

    }
    {
#line 261
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 263
  return;
}
}
#line 313
struct tracepoint __tracepoint_nfs_atomic_open_enter ;
#line 313 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_atomic_open_enter(struct inode  const  *dir , struct nfs_open_context  const  *ctx ,
                                                 unsigned int flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 279
  tmp___1 = static_key_false(& __tracepoint_nfs_atomic_open_enter.key);
  }
#line 279
  if ((int )tmp___1) {
    {
#line 279
    rcu_read_lock_sched_notrace();
#line 279
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_atomic_open_enter.funcs));
#line 279
    tmp = debug_lockdep_rcu_enabled();
    }
#line 279
    if (tmp != 0 && ! __warned) {
      {
#line 279
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 279
      if (tmp___0 == 0) {
        {
#line 279
        __warned = 1;
#line 279
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 313, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 279
    it_func_ptr = _________p1;
#line 279
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55828: 
      {
#line 279
      it_func = it_func_ptr->func;
#line 279
      __data = it_func_ptr->data;
#line 279
      (*((void (*)(void * , struct inode  const  * , struct nfs_open_context  const  * ,
                   unsigned int  ))it_func))(__data, dir, ctx, flags);
#line 279
      it_func_ptr = it_func_ptr + 1;
      }
#line 279
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 281
        goto ldv_55828;
      } else {

      }

    } else {

    }
    {
#line 279
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 281
  return;
}
}
#line 354
struct tracepoint __tracepoint_nfs_atomic_open_exit ;
#line 354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_atomic_open_exit(struct inode  const  *dir , struct nfs_open_context  const  *ctx ,
                                                unsigned int flags , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 315
  tmp___1 = static_key_false(& __tracepoint_nfs_atomic_open_exit.key);
  }
#line 315
  if ((int )tmp___1) {
    {
#line 315
    rcu_read_lock_sched_notrace();
#line 315
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_atomic_open_exit.funcs));
#line 315
    tmp = debug_lockdep_rcu_enabled();
    }
#line 315
    if (tmp != 0 && ! __warned) {
      {
#line 315
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 315
      if (tmp___0 == 0) {
        {
#line 315
        __warned = 1;
#line 315
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 354, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 315
    it_func_ptr = _________p1;
#line 315
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55874: 
      {
#line 315
      it_func = it_func_ptr->func;
#line 315
      __data = it_func_ptr->data;
#line 315
      (*((void (*)(void * , struct inode  const  * , struct nfs_open_context  const  * ,
                   unsigned int  , int  ))it_func))(__data, dir, ctx, flags, error);
#line 315
      it_func_ptr = it_func_ptr + 1;
      }
#line 315
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 317
        goto ldv_55874;
      } else {

      }

    } else {

    }
    {
#line 315
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 317
  return;
}
}
#line 387
struct tracepoint __tracepoint_nfs_create_enter ;
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_create_enter(struct inode  const  *dir , struct dentry  const  *dentry ,
                                            unsigned int flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 356
  tmp___1 = static_key_false(& __tracepoint_nfs_create_enter.key);
  }
#line 356
  if ((int )tmp___1) {
    {
#line 356
    rcu_read_lock_sched_notrace();
#line 356
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_create_enter.funcs));
#line 356
    tmp = debug_lockdep_rcu_enabled();
    }
#line 356
    if (tmp != 0 && ! __warned) {
      {
#line 356
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 356
      if (tmp___0 == 0) {
        {
#line 356
        __warned = 1;
#line 356
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 387, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 356
    it_func_ptr = _________p1;
#line 356
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55921: 
      {
#line 356
      it_func = it_func_ptr->func;
#line 356
      __data = it_func_ptr->data;
#line 356
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , unsigned int  ))it_func))(__data,
                                                                                                         dir,
                                                                                                         dentry,
                                                                                                         flags);
#line 356
      it_func_ptr = it_func_ptr + 1;
      }
#line 356
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 358
        goto ldv_55921;
      } else {

      }

    } else {

    }
    {
#line 356
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 358
  return;
}
}
#line 424
struct tracepoint __tracepoint_nfs_create_exit ;
#line 424 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_create_exit(struct inode  const  *dir , struct dentry  const  *dentry ,
                                           unsigned int flags , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 389
  tmp___1 = static_key_false(& __tracepoint_nfs_create_exit.key);
  }
#line 389
  if ((int )tmp___1) {
    {
#line 389
    rcu_read_lock_sched_notrace();
#line 389
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_create_exit.funcs));
#line 389
    tmp = debug_lockdep_rcu_enabled();
    }
#line 389
    if (tmp != 0 && ! __warned) {
      {
#line 389
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 389
      if (tmp___0 == 0) {
        {
#line 389
        __warned = 1;
#line 389
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 424, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 389
    it_func_ptr = _________p1;
#line 389
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55967: 
      {
#line 389
      it_func = it_func_ptr->func;
#line 389
      __data = it_func_ptr->data;
#line 389
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , unsigned int  ,
                   int  ))it_func))(__data, dir, dentry, flags, error);
#line 389
      it_func_ptr = it_func_ptr + 1;
      }
#line 389
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 391
        goto ldv_55967;
      } else {

      }

    } else {

    }
    {
#line 389
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 391
  return;
}
}
#line 503
struct tracepoint __tracepoint_nfs_mknod_enter ;
#line 503 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_mknod_enter(struct inode  const  *dir , struct dentry  const  *dentry ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 503
  tmp___1 = static_key_false(& __tracepoint_nfs_mknod_enter.key);
  }
#line 503
  if ((int )tmp___1) {
    {
#line 503
    rcu_read_lock_sched_notrace();
#line 503
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_mknod_enter.funcs));
#line 503
    tmp = debug_lockdep_rcu_enabled();
    }
#line 503
    if (tmp != 0 && ! __warned) {
      {
#line 503
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 503
      if (tmp___0 == 0) {
        {
#line 503
        __warned = 1;
#line 503
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 503, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 503
    it_func_ptr = _________p1;
#line 503
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56012: 
      {
#line 503
      it_func = it_func_ptr->func;
#line 503
      __data = it_func_ptr->data;
#line 503
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * ))it_func))(__data,
                                                                                         dir,
                                                                                         dentry);
#line 503
      it_func_ptr = it_func_ptr + 1;
      }
#line 503
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 505
        goto ldv_56012;
      } else {

      }

    } else {

    }
    {
#line 503
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 505
  return;
}
}
#line 504
struct tracepoint __tracepoint_nfs_mknod_exit ;
#line 504 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_mknod_exit(struct inode  const  *dir , struct dentry  const  *dentry ,
                                          int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 504
  tmp___1 = static_key_false(& __tracepoint_nfs_mknod_exit.key);
  }
#line 504
  if ((int )tmp___1) {
    {
#line 504
    rcu_read_lock_sched_notrace();
#line 504
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_mknod_exit.funcs));
#line 504
    tmp = debug_lockdep_rcu_enabled();
    }
#line 504
    if (tmp != 0 && ! __warned) {
      {
#line 504
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 504
      if (tmp___0 == 0) {
        {
#line 504
        __warned = 1;
#line 504
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 504, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 504
    it_func_ptr = _________p1;
#line 504
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56053: 
      {
#line 504
      it_func = it_func_ptr->func;
#line 504
      __data = it_func_ptr->data;
#line 504
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , int  ))it_func))(__data,
                                                                                                dir,
                                                                                                dentry,
                                                                                                error);
#line 504
      it_func_ptr = it_func_ptr + 1;
      }
#line 504
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 506
        goto ldv_56053;
      } else {

      }

    } else {

    }
    {
#line 504
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 506
  return;
}
}
#line 505
struct tracepoint __tracepoint_nfs_mkdir_enter ;
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_mkdir_enter(struct inode  const  *dir , struct dentry  const  *dentry ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 505
  tmp___1 = static_key_false(& __tracepoint_nfs_mkdir_enter.key);
  }
#line 505
  if ((int )tmp___1) {
    {
#line 505
    rcu_read_lock_sched_notrace();
#line 505
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_mkdir_enter.funcs));
#line 505
    tmp = debug_lockdep_rcu_enabled();
    }
#line 505
    if (tmp != 0 && ! __warned) {
      {
#line 505
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 505
      if (tmp___0 == 0) {
        {
#line 505
        __warned = 1;
#line 505
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 505, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 505
    it_func_ptr = _________p1;
#line 505
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56095: 
      {
#line 505
      it_func = it_func_ptr->func;
#line 505
      __data = it_func_ptr->data;
#line 505
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * ))it_func))(__data,
                                                                                         dir,
                                                                                         dentry);
#line 505
      it_func_ptr = it_func_ptr + 1;
      }
#line 505
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 507
        goto ldv_56095;
      } else {

      }

    } else {

    }
    {
#line 505
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 507
  return;
}
}
#line 506
struct tracepoint __tracepoint_nfs_mkdir_exit ;
#line 506 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_mkdir_exit(struct inode  const  *dir , struct dentry  const  *dentry ,
                                          int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 506
  tmp___1 = static_key_false(& __tracepoint_nfs_mkdir_exit.key);
  }
#line 506
  if ((int )tmp___1) {
    {
#line 506
    rcu_read_lock_sched_notrace();
#line 506
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_mkdir_exit.funcs));
#line 506
    tmp = debug_lockdep_rcu_enabled();
    }
#line 506
    if (tmp != 0 && ! __warned) {
      {
#line 506
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 506
      if (tmp___0 == 0) {
        {
#line 506
        __warned = 1;
#line 506
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 506, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 506
    it_func_ptr = _________p1;
#line 506
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56136: 
      {
#line 506
      it_func = it_func_ptr->func;
#line 506
      __data = it_func_ptr->data;
#line 506
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , int  ))it_func))(__data,
                                                                                                dir,
                                                                                                dentry,
                                                                                                error);
#line 506
      it_func_ptr = it_func_ptr + 1;
      }
#line 506
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 508
        goto ldv_56136;
      } else {

      }

    } else {

    }
    {
#line 506
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 508
  return;
}
}
#line 507
struct tracepoint __tracepoint_nfs_rmdir_enter ;
#line 507 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_rmdir_enter(struct inode  const  *dir , struct dentry  const  *dentry ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 507
  tmp___1 = static_key_false(& __tracepoint_nfs_rmdir_enter.key);
  }
#line 507
  if ((int )tmp___1) {
    {
#line 507
    rcu_read_lock_sched_notrace();
#line 507
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_rmdir_enter.funcs));
#line 507
    tmp = debug_lockdep_rcu_enabled();
    }
#line 507
    if (tmp != 0 && ! __warned) {
      {
#line 507
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 507
      if (tmp___0 == 0) {
        {
#line 507
        __warned = 1;
#line 507
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 507, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 507
    it_func_ptr = _________p1;
#line 507
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56178: 
      {
#line 507
      it_func = it_func_ptr->func;
#line 507
      __data = it_func_ptr->data;
#line 507
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * ))it_func))(__data,
                                                                                         dir,
                                                                                         dentry);
#line 507
      it_func_ptr = it_func_ptr + 1;
      }
#line 507
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 509
        goto ldv_56178;
      } else {

      }

    } else {

    }
    {
#line 507
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 509
  return;
}
}
#line 508
struct tracepoint __tracepoint_nfs_rmdir_exit ;
#line 508 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_rmdir_exit(struct inode  const  *dir , struct dentry  const  *dentry ,
                                          int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 508
  tmp___1 = static_key_false(& __tracepoint_nfs_rmdir_exit.key);
  }
#line 508
  if ((int )tmp___1) {
    {
#line 508
    rcu_read_lock_sched_notrace();
#line 508
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_rmdir_exit.funcs));
#line 508
    tmp = debug_lockdep_rcu_enabled();
    }
#line 508
    if (tmp != 0 && ! __warned) {
      {
#line 508
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 508
      if (tmp___0 == 0) {
        {
#line 508
        __warned = 1;
#line 508
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 508, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 508
    it_func_ptr = _________p1;
#line 508
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56219: 
      {
#line 508
      it_func = it_func_ptr->func;
#line 508
      __data = it_func_ptr->data;
#line 508
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , int  ))it_func))(__data,
                                                                                                dir,
                                                                                                dentry,
                                                                                                error);
#line 508
      it_func_ptr = it_func_ptr + 1;
      }
#line 508
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 510
        goto ldv_56219;
      } else {

      }

    } else {

    }
    {
#line 508
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 510
  return;
}
}
#line 509
struct tracepoint __tracepoint_nfs_remove_enter ;
#line 509 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_remove_enter(struct inode  const  *dir , struct dentry  const  *dentry ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 509
  tmp___1 = static_key_false(& __tracepoint_nfs_remove_enter.key);
  }
#line 509
  if ((int )tmp___1) {
    {
#line 509
    rcu_read_lock_sched_notrace();
#line 509
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_remove_enter.funcs));
#line 509
    tmp = debug_lockdep_rcu_enabled();
    }
#line 509
    if (tmp != 0 && ! __warned) {
      {
#line 509
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 509
      if (tmp___0 == 0) {
        {
#line 509
        __warned = 1;
#line 509
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 509, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 509
    it_func_ptr = _________p1;
#line 509
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56261: 
      {
#line 509
      it_func = it_func_ptr->func;
#line 509
      __data = it_func_ptr->data;
#line 509
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * ))it_func))(__data,
                                                                                         dir,
                                                                                         dentry);
#line 509
      it_func_ptr = it_func_ptr + 1;
      }
#line 509
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 511
        goto ldv_56261;
      } else {

      }

    } else {

    }
    {
#line 509
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 511
  return;
}
}
#line 510
struct tracepoint __tracepoint_nfs_remove_exit ;
#line 510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_remove_exit(struct inode  const  *dir , struct dentry  const  *dentry ,
                                           int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 510
  tmp___1 = static_key_false(& __tracepoint_nfs_remove_exit.key);
  }
#line 510
  if ((int )tmp___1) {
    {
#line 510
    rcu_read_lock_sched_notrace();
#line 510
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_remove_exit.funcs));
#line 510
    tmp = debug_lockdep_rcu_enabled();
    }
#line 510
    if (tmp != 0 && ! __warned) {
      {
#line 510
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 510
      if (tmp___0 == 0) {
        {
#line 510
        __warned = 1;
#line 510
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 510, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 510
    it_func_ptr = _________p1;
#line 510
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56302: 
      {
#line 510
      it_func = it_func_ptr->func;
#line 510
      __data = it_func_ptr->data;
#line 510
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , int  ))it_func))(__data,
                                                                                                dir,
                                                                                                dentry,
                                                                                                error);
#line 510
      it_func_ptr = it_func_ptr + 1;
      }
#line 510
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 512
        goto ldv_56302;
      } else {

      }

    } else {

    }
    {
#line 510
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 512
  return;
}
}
#line 511
struct tracepoint __tracepoint_nfs_unlink_enter ;
#line 511 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_unlink_enter(struct inode  const  *dir , struct dentry  const  *dentry ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 511
  tmp___1 = static_key_false(& __tracepoint_nfs_unlink_enter.key);
  }
#line 511
  if ((int )tmp___1) {
    {
#line 511
    rcu_read_lock_sched_notrace();
#line 511
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_unlink_enter.funcs));
#line 511
    tmp = debug_lockdep_rcu_enabled();
    }
#line 511
    if (tmp != 0 && ! __warned) {
      {
#line 511
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 511
      if (tmp___0 == 0) {
        {
#line 511
        __warned = 1;
#line 511
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 511, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 511
    it_func_ptr = _________p1;
#line 511
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56344: 
      {
#line 511
      it_func = it_func_ptr->func;
#line 511
      __data = it_func_ptr->data;
#line 511
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * ))it_func))(__data,
                                                                                         dir,
                                                                                         dentry);
#line 511
      it_func_ptr = it_func_ptr + 1;
      }
#line 511
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 513
        goto ldv_56344;
      } else {

      }

    } else {

    }
    {
#line 511
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 513
  return;
}
}
#line 512
struct tracepoint __tracepoint_nfs_unlink_exit ;
#line 512 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_unlink_exit(struct inode  const  *dir , struct dentry  const  *dentry ,
                                           int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 512
  tmp___1 = static_key_false(& __tracepoint_nfs_unlink_exit.key);
  }
#line 512
  if ((int )tmp___1) {
    {
#line 512
    rcu_read_lock_sched_notrace();
#line 512
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_unlink_exit.funcs));
#line 512
    tmp = debug_lockdep_rcu_enabled();
    }
#line 512
    if (tmp != 0 && ! __warned) {
      {
#line 512
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 512
      if (tmp___0 == 0) {
        {
#line 512
        __warned = 1;
#line 512
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 512, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 512
    it_func_ptr = _________p1;
#line 512
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56385: 
      {
#line 512
      it_func = it_func_ptr->func;
#line 512
      __data = it_func_ptr->data;
#line 512
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , int  ))it_func))(__data,
                                                                                                dir,
                                                                                                dentry,
                                                                                                error);
#line 512
      it_func_ptr = it_func_ptr + 1;
      }
#line 512
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 514
        goto ldv_56385;
      } else {

      }

    } else {

    }
    {
#line 512
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 514
  return;
}
}
#line 513
struct tracepoint __tracepoint_nfs_symlink_enter ;
#line 513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_symlink_enter(struct inode  const  *dir , struct dentry  const  *dentry ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 513
  tmp___1 = static_key_false(& __tracepoint_nfs_symlink_enter.key);
  }
#line 513
  if ((int )tmp___1) {
    {
#line 513
    rcu_read_lock_sched_notrace();
#line 513
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_symlink_enter.funcs));
#line 513
    tmp = debug_lockdep_rcu_enabled();
    }
#line 513
    if (tmp != 0 && ! __warned) {
      {
#line 513
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 513
      if (tmp___0 == 0) {
        {
#line 513
        __warned = 1;
#line 513
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 513, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 513
    it_func_ptr = _________p1;
#line 513
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56427: 
      {
#line 513
      it_func = it_func_ptr->func;
#line 513
      __data = it_func_ptr->data;
#line 513
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * ))it_func))(__data,
                                                                                         dir,
                                                                                         dentry);
#line 513
      it_func_ptr = it_func_ptr + 1;
      }
#line 513
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 515
        goto ldv_56427;
      } else {

      }

    } else {

    }
    {
#line 513
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 515
  return;
}
}
#line 514
struct tracepoint __tracepoint_nfs_symlink_exit ;
#line 514 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_symlink_exit(struct inode  const  *dir , struct dentry  const  *dentry ,
                                            int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 514
  tmp___1 = static_key_false(& __tracepoint_nfs_symlink_exit.key);
  }
#line 514
  if ((int )tmp___1) {
    {
#line 514
    rcu_read_lock_sched_notrace();
#line 514
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_symlink_exit.funcs));
#line 514
    tmp = debug_lockdep_rcu_enabled();
    }
#line 514
    if (tmp != 0 && ! __warned) {
      {
#line 514
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 514
      if (tmp___0 == 0) {
        {
#line 514
        __warned = 1;
#line 514
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 514, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 514
    it_func_ptr = _________p1;
#line 514
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56468: 
      {
#line 514
      it_func = it_func_ptr->func;
#line 514
      __data = it_func_ptr->data;
#line 514
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , int  ))it_func))(__data,
                                                                                                dir,
                                                                                                dentry,
                                                                                                error);
#line 514
      it_func_ptr = it_func_ptr + 1;
      }
#line 514
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 516
        goto ldv_56468;
      } else {

      }

    } else {

    }
    {
#line 514
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 516
  return;
}
}
#line 547
struct tracepoint __tracepoint_nfs_link_enter ;
#line 547 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_link_enter(struct inode  const  *inode , struct inode  const  *dir ,
                                          struct dentry  const  *dentry ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 516
  tmp___1 = static_key_false(& __tracepoint_nfs_link_enter.key);
  }
#line 516
  if ((int )tmp___1) {
    {
#line 516
    rcu_read_lock_sched_notrace();
#line 516
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_link_enter.funcs));
#line 516
    tmp = debug_lockdep_rcu_enabled();
    }
#line 516
    if (tmp != 0 && ! __warned) {
      {
#line 516
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 516
      if (tmp___0 == 0) {
        {
#line 516
        __warned = 1;
#line 516
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 547, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 516
    it_func_ptr = _________p1;
#line 516
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56512: 
      {
#line 516
      it_func = it_func_ptr->func;
#line 516
      __data = it_func_ptr->data;
#line 516
      (*((void (*)(void * , struct inode  const  * , struct inode  const  * , struct dentry  const  * ))it_func))(__data,
                                                                                                                  inode,
                                                                                                                  dir,
                                                                                                                  dentry);
#line 516
      it_func_ptr = it_func_ptr + 1;
      }
#line 516
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 518
        goto ldv_56512;
      } else {

      }

    } else {

    }
    {
#line 516
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 518
  return;
}
}
#line 584
struct tracepoint __tracepoint_nfs_link_exit ;
#line 584 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_link_exit(struct inode  const  *inode , struct inode  const  *dir ,
                                         struct dentry  const  *dentry , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 549
  tmp___1 = static_key_false(& __tracepoint_nfs_link_exit.key);
  }
#line 549
  if ((int )tmp___1) {
    {
#line 549
    rcu_read_lock_sched_notrace();
#line 549
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_link_exit.funcs));
#line 549
    tmp = debug_lockdep_rcu_enabled();
    }
#line 549
    if (tmp != 0 && ! __warned) {
      {
#line 549
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 549
      if (tmp___0 == 0) {
        {
#line 549
        __warned = 1;
#line 549
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 584, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 549
    it_func_ptr = _________p1;
#line 549
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56558: 
      {
#line 549
      it_func = it_func_ptr->func;
#line 549
      __data = it_func_ptr->data;
#line 549
      (*((void (*)(void * , struct inode  const  * , struct inode  const  * , struct dentry  const  * ,
                   int  ))it_func))(__data, inode, dir, dentry, error);
#line 549
      it_func_ptr = it_func_ptr + 1;
      }
#line 549
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 551
        goto ldv_56558;
      } else {

      }

    } else {

    }
    {
#line 549
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 551
  return;
}
}
#line 685
struct tracepoint __tracepoint_nfs_rename_enter ;
#line 685 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_rename_enter(struct inode  const  *old_dir , struct dentry  const  *old_dentry ,
                                            struct inode  const  *new_dir , struct dentry  const  *new_dentry ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 685
  tmp___1 = static_key_false(& __tracepoint_nfs_rename_enter.key);
  }
#line 685
  if ((int )tmp___1) {
    {
#line 685
    rcu_read_lock_sched_notrace();
#line 685
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_rename_enter.funcs));
#line 685
    tmp = debug_lockdep_rcu_enabled();
    }
#line 685
    if (tmp != 0 && ! __warned) {
      {
#line 685
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 685
      if (tmp___0 == 0) {
        {
#line 685
        __warned = 1;
#line 685
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 685, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 685
    it_func_ptr = _________p1;
#line 685
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56607: 
      {
#line 685
      it_func = it_func_ptr->func;
#line 685
      __data = it_func_ptr->data;
#line 685
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , struct inode  const  * ,
                   struct dentry  const  * ))it_func))(__data, old_dir, old_dentry,
                                                       new_dir, new_dentry);
#line 685
      it_func_ptr = it_func_ptr + 1;
      }
#line 685
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 687
        goto ldv_56607;
      } else {

      }

    } else {

    }
    {
#line 685
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 687
  return;
}
}
#line 686
struct tracepoint __tracepoint_nfs_rename_exit ;
#line 686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_rename_exit(struct inode  const  *old_dir , struct dentry  const  *old_dentry ,
                                           struct inode  const  *new_dir , struct dentry  const  *new_dentry ,
                                           int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 686
  tmp___1 = static_key_false(& __tracepoint_nfs_rename_exit.key);
  }
#line 686
  if ((int )tmp___1) {
    {
#line 686
    rcu_read_lock_sched_notrace();
#line 686
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_rename_exit.funcs));
#line 686
    tmp = debug_lockdep_rcu_enabled();
    }
#line 686
    if (tmp != 0 && ! __warned) {
      {
#line 686
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 686
      if (tmp___0 == 0) {
        {
#line 686
        __warned = 1;
#line 686
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 686, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 686
    it_func_ptr = _________p1;
#line 686
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56658: 
      {
#line 686
      it_func = it_func_ptr->func;
#line 686
      __data = it_func_ptr->data;
#line 686
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , struct inode  const  * ,
                   struct dentry  const  * , int  ))it_func))(__data, old_dir, old_dentry,
                                                              new_dir, new_dentry,
                                                              error);
#line 686
      it_func_ptr = it_func_ptr + 1;
      }
#line 686
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 688
        goto ldv_56658;
      } else {

      }

    } else {

    }
    {
#line 686
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 688
  return;
}
}
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_opendir(struct inode *inode , struct file *filp ) ;
#line 51
static int nfs_closedir(struct inode *inode , struct file *filp ) ;
#line 52
static int nfs_readdir(struct file *file , struct dir_context *ctx ) ;
#line 53
static int nfs_fsync_dir(struct file *filp , loff_t start , loff_t end , int datasync ) ;
#line 54
static loff_t nfs_llseek_dir(struct file *filp , loff_t offset , int whence ) ;
#line 55
static void nfs_readdir_clear_array(struct page *page ) ;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct file_operations  const  nfs_dir_operations  = 
#line 57
     {0, & nfs_llseek_dir, & generic_read_dir, 0, 0, 0, 0, 0, & nfs_readdir, 0, 0, 0,
    0, & nfs_opendir, 0, & nfs_closedir, & nfs_fsync_dir, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0};
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct address_space_operations  const  nfs_dir_aops  = 
#line 66
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, & nfs_readdir_clear_array, 0, 0, 0, 0, 0, 0, 0,
    0, 0};
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static struct nfs_open_dir_context *alloc_nfs_open_dir_context(struct inode *dir ,
                                                               struct rpc_cred *cred ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct nfs_open_dir_context *ctx ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
  {
#line 72
  tmp = NFS_I((struct inode  const  *)dir);
#line 72
  nfsi = tmp;
#line 74
  tmp___0 = kmalloc(56UL, 208U);
#line 74
  ctx = (struct nfs_open_dir_context *)tmp___0;
  }
#line 75
  if ((unsigned long )ctx != (unsigned long )((struct nfs_open_dir_context *)0)) {
    {
#line 76
    ctx->duped = 0;
#line 77
    ctx->attr_gencount = nfsi->attr_gencount;
#line 78
    ctx->dir_cookie = 0ULL;
#line 79
    ctx->dup_cookie = 0ULL;
#line 80
    ctx->cred = get_rpccred(cred);
#line 81
    ldv_spin_lock_72(& dir->i_lock);
#line 82
    list_add(& ctx->list, & nfsi->open_files);
#line 83
    ldv_spin_unlock_73(& dir->i_lock);
    }
#line 84
    return (ctx);
  } else {

  }
  {
#line 86
  tmp___1 = ERR_PTR(-12L);
  }
#line 86
  return ((struct nfs_open_dir_context *)tmp___1);
}
}
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void put_nfs_open_dir_context(struct inode *dir , struct nfs_open_dir_context *ctx ) 
{ 


  {
  {
#line 91
  ldv_spin_lock_72(& dir->i_lock);
#line 92
  list_del(& ctx->list);
#line 93
  ldv_spin_unlock_73(& dir->i_lock);
#line 94
  put_rpccred(ctx->cred);
#line 95
  kfree((void const   *)ctx);
  }
#line 96
  return;
}
}
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_opendir(struct inode *inode , struct file *filp ) 
{ 
  int res ;
  struct nfs_open_dir_context *ctx ;
  struct rpc_cred *cred ;
  long tmp ;
  long tmp___0 ;
  bool tmp___1 ;
  long tmp___2 ;
  bool tmp___3 ;
  struct nfs_server *tmp___4 ;

  {
  {
#line 104
  res = 0;
#line 108
  tmp = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 108
  if (tmp != 0L) {
    {
#line 108
    printk("\001dNFS: open dir(%pD2)\n", filp);
    }
  } else {

  }
  {
#line 110
  nfs_inc_stats((struct inode  const  *)inode, 4);
#line 112
  cred = rpc_lookup_cred();
#line 113
  tmp___1 = IS_ERR((void const   *)cred);
  }
#line 113
  if ((int )tmp___1) {
    {
#line 114
    tmp___0 = PTR_ERR((void const   *)cred);
    }
#line 114
    return ((int )tmp___0);
  } else {

  }
  {
#line 115
  ctx = alloc_nfs_open_dir_context(inode, cred);
#line 116
  tmp___3 = IS_ERR((void const   *)ctx);
  }
#line 116
  if ((int )tmp___3) {
    {
#line 117
    tmp___2 = PTR_ERR((void const   *)ctx);
#line 117
    res = (int )tmp___2;
    }
#line 118
    goto out;
  } else {

  }
#line 120
  filp->private_data = (void *)ctx;
#line 121
  if ((unsigned long )filp->f_path.dentry == (unsigned long )(filp->f_path.mnt)->mnt_root) {
    {
#line 126
    tmp___4 = NFS_SERVER((struct inode  const  *)inode);
#line 126
    __nfs_revalidate_inode(tmp___4, inode);
    }
  } else {

  }
  out: 
  {
#line 129
  put_rpccred(cred);
  }
#line 130
  return (res);
}
}
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_closedir(struct inode *inode , struct file *filp ) 
{ 


  {
  {
#line 136
  put_nfs_open_dir_context((filp->f_path.dentry)->d_inode, (struct nfs_open_dir_context *)filp->private_data);
  }
#line 137
  return (0);
}
}
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static struct nfs_cache_array *nfs_readdir_get_array(struct page *page ) 
{ 
  void *ptr ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 179
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
    {
#line 180
    tmp = ERR_PTR(-5L);
    }
#line 180
    return ((struct nfs_cache_array *)tmp);
  } else {

  }
  {
#line 181
  ptr = kmap(page);
  }
#line 182
  if ((unsigned long )ptr == (unsigned long )((void *)0)) {
    {
#line 183
    tmp___0 = ERR_PTR(-12L);
    }
#line 183
    return ((struct nfs_cache_array *)tmp___0);
  } else {

  }
#line 184
  return ((struct nfs_cache_array *)ptr);
}
}
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_readdir_release_array(struct page *page ) 
{ 


  {
  {
#line 190
  kunmap(page);
  }
#line 191
  return;
}
}
#line 205
extern void __compiletime_assert_205(void) ;
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_readdir_clear_array(struct page *page ) 
{ 
  struct nfs_cache_array *array ;
  int i ;
  void *tmp ;
  bool __cond ;

  {
  {
#line 202
  tmp = kmap_atomic(page);
#line 202
  array = (struct nfs_cache_array *)tmp;
#line 203
  i = 0;
  }
#line 203
  goto ldv_56871;
  ldv_56870: 
  {
#line 204
  kfree((void const   *)array->array[i].string.name);
#line 203
  i = i + 1;
  }
  ldv_56871: ;
#line 203
  if (i < array->size) {
#line 205
    goto ldv_56870;
  } else {

  }
#line 205
  __cond = 0;
#line 205
  if ((int )__cond) {
    {
#line 205
    __compiletime_assert_205();
    }
  } else {

  }
  {
#line 205
  __kunmap_atomic((void *)array);
  }
#line 206
  return;
}
}
#line 214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_make_qstr(struct qstr *string , char const   *name , unsigned int len ) 
{ 
  void *tmp ;

  {
  {
#line 216
  string->__annonCompField25.__annonCompField24.len = len;
#line 217
  tmp = kmemdup((void const   *)name, (size_t )len, 208U);
#line 217
  string->name = (unsigned char const   *)tmp;
  }
#line 218
  if ((unsigned long )string->name == (unsigned long )((unsigned char const   *)0U)) {
#line 219
    return (-12);
  } else {

  }
  {
#line 224
  kmemleak_not_leak((void const   *)string->name);
#line 225
  string->__annonCompField25.__annonCompField24.hash = full_name_hash((unsigned char const   *)name,
                                                                      len);
  }
#line 226
  return (0);
}
}
#line 230 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_add_to_array(struct nfs_entry *entry , struct page *page ) 
{ 
  struct nfs_cache_array *array ;
  struct nfs_cache_array *tmp ;
  struct nfs_cache_array_entry *cache_entry ;
  int ret ;
  long tmp___0 ;
  bool tmp___1 ;
  void *tmp___2 ;

  {
  {
#line 232
  tmp = nfs_readdir_get_array(page);
#line 232
  array = tmp;
#line 236
  tmp___1 = IS_ERR((void const   *)array);
  }
#line 236
  if ((int )tmp___1) {
    {
#line 237
    tmp___0 = PTR_ERR((void const   *)array);
    }
#line 237
    return ((int )tmp___0);
  } else {

  }
  {
#line 239
  cache_entry = (struct nfs_cache_array_entry *)(& array->array) + (unsigned long )array->size;
#line 242
  ret = -28;
#line 243
  tmp___2 = lowmem_page_address((struct page  const  *)page);
  }
#line 243
  if ((unsigned long )((long )(cache_entry + 1UL) - (long )tmp___2) > 4096UL) {
#line 244
    goto out;
  } else {

  }
  {
#line 246
  cache_entry->cookie = entry->prev_cookie;
#line 247
  cache_entry->ino = entry->ino;
#line 248
  cache_entry->d_type = entry->d_type;
#line 249
  ret = nfs_readdir_make_qstr(& cache_entry->string, entry->name, entry->len);
  }
#line 250
  if (ret != 0) {
#line 251
    goto out;
  } else {

  }
#line 252
  array->last_cookie = entry->cookie;
#line 253
  array->size = array->size + 1;
#line 254
  if (entry->eof != 0) {
#line 255
    array->eof_index = array->size;
  } else {

  }
  out: 
  {
#line 257
  nfs_readdir_release_array(page);
  }
#line 258
  return (ret);
}
}
#line 262 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_search_for_pos(struct nfs_cache_array *array , nfs_readdir_descriptor_t *desc ) 
{ 
  loff_t diff ;
  unsigned int index ;

  {
#line 264
  diff = (desc->ctx)->pos - desc->current_index;
#line 267
  if (diff < 0LL) {
#line 268
    goto out_eof;
  } else {

  }
#line 269
  if (diff >= (loff_t )array->size) {
#line 270
    if (array->eof_index >= 0) {
#line 271
      goto out_eof;
    } else {

    }
#line 272
    return (-11);
  } else {

  }
#line 275
  index = (unsigned int )diff;
#line 276
  *(desc->dir_cookie) = array->array[index].cookie;
#line 277
  desc->cache_entry_index = index;
#line 278
  return (0);
  out_eof: 
#line 280
  desc->eof = 1U;
#line 281
  return (-523);
}
}
#line 285 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static bool nfs_readdir_inode_mapping_valid(struct nfs_inode *nfsi ) 
{ 
  int tmp ;

  {
#line 287
  if ((nfsi->cache_validity & 3UL) != 0UL) {
#line 288
    return (0);
  } else {

  }
  {
#line 289
  __asm__  volatile   ("": : : "memory");
#line 290
  tmp = constant_test_bit(3L, (unsigned long const volatile   *)(& nfsi->flags));
  }
#line 290
  return (tmp == 0);
}
}
#line 294 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_search_for_cookie(struct nfs_cache_array *array , nfs_readdir_descriptor_t *desc ) 
{ 
  int i ;
  loff_t new_pos ;
  int status ;
  struct nfs_inode *nfsi ;
  struct inode *tmp ;
  struct nfs_inode *tmp___0 ;
  struct nfs_open_dir_context *ctx ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;

  {
#line 298
  status = -11;
#line 300
  i = 0;
#line 300
  goto ldv_56912;
  ldv_56911: ;
#line 301
  if (array->array[i].cookie == *(desc->dir_cookie)) {
    {
#line 302
    tmp = file_inode(desc->file);
#line 302
    tmp___0 = NFS_I((struct inode  const  *)tmp);
#line 302
    nfsi = tmp___0;
#line 303
    ctx = (struct nfs_open_dir_context *)(desc->file)->private_data;
#line 305
    new_pos = desc->current_index + (loff_t )i;
    }
#line 306
    if (ctx->attr_gencount != nfsi->attr_gencount) {
#line 308
      ctx->duped = 0;
#line 309
      ctx->attr_gencount = nfsi->attr_gencount;
    } else {
      {
#line 306
      tmp___2 = nfs_readdir_inode_mapping_valid(nfsi);
      }
#line 306
      if (tmp___2) {
#line 306
        tmp___3 = 0;
      } else {
#line 306
        tmp___3 = 1;
      }
#line 306
      if (tmp___3) {
#line 308
        ctx->duped = 0;
#line 309
        ctx->attr_gencount = nfsi->attr_gencount;
      } else
#line 310
      if (new_pos < (desc->ctx)->pos) {
#line 311
        if ((int )ctx->duped > 0 && ctx->dup_cookie == *(desc->dir_cookie)) {
          {
#line 313
          tmp___1 = __printk_ratelimit("nfs_readdir_search_for_cookie");
          }
#line 313
          if (tmp___1 != 0) {
            {
#line 314
            printk("\rNFS: directory %pD2 contains a readdir loop.Please contact your server vendor.  The file: %.*s has duplicate cookie %llu\n",
                   desc->file, array->array[i].string.__annonCompField25.__annonCompField24.len,
                   array->array[i].string.name, *(desc->dir_cookie));
            }
          } else {

          }
#line 320
          status = -40;
#line 321
          goto out;
        } else {

        }
#line 323
        ctx->dup_cookie = *(desc->dir_cookie);
#line 324
        ctx->duped = -1;
      } else {

      }
    }
#line 326
    (desc->ctx)->pos = new_pos;
#line 327
    desc->cache_entry_index = (unsigned int )i;
#line 328
    return (0);
  } else {

  }
#line 300
  i = i + 1;
  ldv_56912: ;
#line 300
  if (i < array->size) {
#line 302
    goto ldv_56911;
  } else {

  }

#line 331
  if (array->eof_index >= 0) {
#line 332
    status = -523;
#line 333
    if (*(desc->dir_cookie) == array->last_cookie) {
#line 334
      desc->eof = 1U;
    } else {

    }
  } else {

  }
  out: ;
#line 337
  return (status);
}
}
#line 341 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_search_array(nfs_readdir_descriptor_t *desc ) 
{ 
  struct nfs_cache_array *array ;
  int status ;
  long tmp ;
  bool tmp___0 ;

  {
  {
#line 346
  array = nfs_readdir_get_array(desc->page);
#line 347
  tmp___0 = IS_ERR((void const   *)array);
  }
#line 347
  if ((int )tmp___0) {
    {
#line 348
    tmp = PTR_ERR((void const   *)array);
#line 348
    status = (int )tmp;
    }
#line 349
    goto out;
  } else {

  }
#line 352
  if (*(desc->dir_cookie) == 0ULL) {
    {
#line 353
    status = nfs_readdir_search_for_pos(array, desc);
    }
  } else {
    {
#line 355
    status = nfs_readdir_search_for_cookie(array, desc);
    }
  }
#line 357
  if (status == -11) {
#line 358
    desc->last_cookie = array->last_cookie;
#line 359
    desc->current_index = desc->current_index + (loff_t )array->size;
#line 360
    desc->page_index = desc->page_index + 1UL;
  } else {

  }
  {
#line 362
  nfs_readdir_release_array(desc->page);
  }
  out: ;
#line 364
  return (status);
}
}
#line 369 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_xdr_filler(struct page **pages , nfs_readdir_descriptor_t *desc ,
                                  struct nfs_entry *entry , struct file *file , struct inode *inode ) 
{ 
  struct nfs_open_dir_context *ctx ;
  struct rpc_cred *cred ;
  unsigned long timestamp ;
  unsigned long gencount ;
  int error ;
  struct nfs_rpc_ops  const  *tmp ;
  struct nfs_server *tmp___0 ;
  struct nfs_server *tmp___1 ;
  struct nfs_inode *tmp___2 ;

  {
#line 372
  ctx = (struct nfs_open_dir_context *)file->private_data;
#line 373
  cred = ctx->cred;
  again: 
  {
#line 378
  timestamp = jiffies;
#line 379
  gencount = nfs_inc_attr_generation_counter();
#line 380
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 380
  tmp___0 = NFS_SERVER((struct inode  const  *)inode);
#line 380
  error = (*(tmp->readdir))(file->f_path.dentry, cred, entry->cookie, pages, tmp___0->dtsize,
                            (int )desc->plus);
  }
#line 382
  if (error < 0) {
#line 384
    if (error == -524 && (unsigned int )*((unsigned char *)desc + 84UL) != 0U) {
      {
#line 385
      tmp___1 = NFS_SERVER((struct inode  const  *)inode);
#line 385
      tmp___1->caps = tmp___1->caps & 4294967294U;
#line 386
      tmp___2 = NFS_I((struct inode  const  *)inode);
#line 386
      clear_bit(0L, (unsigned long volatile   *)(& tmp___2->flags));
#line 387
      desc->plus = 0U;
      }
#line 388
      goto again;
    } else {

    }
#line 390
    goto error;
  } else {

  }
#line 392
  desc->timestamp = timestamp;
#line 393
  desc->gencount = gencount;
  error: ;
#line 395
  return (error);
}
}
#line 398 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int xdr_decode(nfs_readdir_descriptor_t *desc , struct nfs_entry *entry , struct xdr_stream *xdr ) 
{ 
  int error ;

  {
  {
#line 403
  error = (*(desc->decode))(xdr, entry, (int )desc->plus);
  }
#line 404
  if (error != 0) {
#line 405
    return (error);
  } else {

  }
#line 406
  (entry->fattr)->time_start = desc->timestamp;
#line 407
  (entry->fattr)->gencount = desc->gencount;
#line 408
  return (0);
}
}
#line 412 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_same_file(struct dentry *dentry , struct nfs_entry *entry ) 
{ 
  struct nfs_fh *tmp ;
  int tmp___0 ;

  {
#line 414
  if ((unsigned long )dentry->d_inode == (unsigned long )((struct inode *)0)) {
#line 415
    goto different;
  } else {

  }
  {
#line 416
  tmp = NFS_FH((struct inode  const  *)dentry->d_inode);
#line 416
  tmp___0 = nfs_compare_fh((struct nfs_fh  const  *)entry->fh, (struct nfs_fh  const  *)tmp);
  }
#line 416
  if (tmp___0 != 0) {
#line 417
    goto different;
  } else {

  }
#line 418
  return (1);
  different: ;
#line 420
  return (0);
}
}
#line 424 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static bool nfs_use_readdirplus(struct inode *dir , struct dir_context *ctx ) 
{ 
  int tmp ;
  struct nfs_inode *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 426
  tmp = nfs_server_capable(dir, 1);
  }
#line 426
  if (tmp == 0) {
#line 427
    return (0);
  } else {

  }
  {
#line 428
  tmp___0 = NFS_I((struct inode  const  *)dir);
#line 428
  tmp___1 = test_and_set_bit(0L, (unsigned long volatile   *)(& tmp___0->flags));
  }
#line 428
  if (tmp___1 != 0) {
#line 429
    return (1);
  } else {

  }
#line 430
  if (ctx->pos == 0LL) {
#line 431
    return (1);
  } else {

  }
#line 432
  return (0);
}
}
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_advise_use_readdirplus(struct inode *dir ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 443
  tmp = NFS_I((struct inode  const  *)dir);
#line 443
  set_bit(0L, (unsigned long volatile   *)(& tmp->flags));
  }
#line 444
  return;
}
}
#line 454 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
void nfs_force_use_readdirplus(struct inode *dir ) 
{ 
  struct nfs_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 456
  tmp = NFS_I((struct inode  const  *)dir);
#line 456
  tmp___0 = list_empty((struct list_head  const  *)(& tmp->open_files));
  }
#line 456
  if (tmp___0 == 0) {
    {
#line 457
    nfs_advise_use_readdirplus(dir);
#line 458
    nfs_zap_mapping(dir, dir->i_mapping);
    }
  } else {

  }
#line 460
  return;
}
}
#line 463 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_prime_dcache(struct dentry *parent , struct nfs_entry *entry ) 
{ 
  struct qstr filename ;
  struct dentry *dentry ;
  struct dentry *alias ;
  struct inode *dir ;
  struct inode *inode ;
  int status ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  bool tmp___5 ;

  {
#line 465
  filename.__annonCompField25.__annonCompField24.hash = 0U;
#line 465
  filename.__annonCompField25.__annonCompField24.len = entry->len;
#line 465
  filename.name = (unsigned char const   *)entry->name;
#line 468
  dir = parent->d_inode;
#line 472
  if ((unsigned int )((unsigned char )*(filename.name)) == 46U) {
#line 473
    if (filename.__annonCompField25.__annonCompField24.len == 1U) {
#line 474
      return;
    } else {

    }
#line 475
    if (filename.__annonCompField25.__annonCompField24.len == 2U && (unsigned int )((unsigned char )*(filename.name + 1UL)) == 46U) {
#line 476
      return;
    } else {

    }
  } else {

  }
  {
#line 478
  filename.__annonCompField25.__annonCompField24.hash = full_name_hash(filename.name,
                                                                       filename.__annonCompField25.__annonCompField24.len);
#line 480
  dentry = d_lookup((struct dentry  const  *)parent, (struct qstr  const  *)(& filename));
  }
#line 481
  if ((unsigned long )dentry != (unsigned long )((struct dentry *)0)) {
    {
#line 482
    tmp___1 = nfs_same_file(dentry, entry);
    }
#line 482
    if (tmp___1 != 0) {
      {
#line 483
      tmp = nfs_save_change_attribute(dir);
#line 483
      nfs_set_verifier(dentry, tmp);
#line 484
      status = nfs_refresh_inode(dentry->d_inode, entry->fattr);
      }
#line 485
      if (status == 0) {
        {
#line 486
        nfs_setsecurity(dentry->d_inode, entry->fattr, entry->label);
        }
      } else {

      }
#line 487
      goto out;
    } else {
      {
#line 489
      tmp___0 = d_invalidate(dentry);
      }
#line 489
      if (tmp___0 != 0) {
#line 490
        goto out;
      } else {

      }
      {
#line 491
      dput(dentry);
      }
    }
  } else {

  }
  {
#line 495
  dentry = d_alloc(parent, (struct qstr  const  *)(& filename));
  }
#line 496
  if ((unsigned long )dentry == (unsigned long )((struct dentry *)0)) {
#line 497
    return;
  } else {

  }
  {
#line 499
  inode = nfs_fhget(dentry->d_sb, entry->fh, entry->fattr, entry->label);
#line 500
  tmp___2 = IS_ERR((void const   *)inode);
  }
#line 500
  if ((int )tmp___2) {
#line 501
    goto out;
  } else {

  }
  {
#line 503
  alias = d_materialise_unique(dentry, inode);
#line 504
  tmp___5 = IS_ERR((void const   *)alias);
  }
#line 504
  if ((int )tmp___5) {
#line 505
    goto out;
  } else
#line 506
  if ((unsigned long )alias != (unsigned long )((struct dentry *)0)) {
    {
#line 507
    tmp___3 = nfs_save_change_attribute(dir);
#line 507
    nfs_set_verifier(alias, tmp___3);
#line 508
    dput(alias);
    }
  } else {
    {
#line 510
    tmp___4 = nfs_save_change_attribute(dir);
#line 510
    nfs_set_verifier(dentry, tmp___4);
    }
  }
  out: 
  {
#line 513
  dput(dentry);
  }
#line 514
  return;
}
}
#line 518 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_page_filler(nfs_readdir_descriptor_t *desc , struct nfs_entry *entry ,
                                   struct page **xdr_pages , struct page *page , unsigned int buflen ) 
{ 
  struct xdr_stream stream ;
  struct xdr_buf buf ;
  struct page *scratch ;
  struct nfs_cache_array *array ;
  unsigned int count ;
  int status ;
  void *tmp ;
  long tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
  {
#line 525
  count = 0U;
#line 528
  scratch = alloc_pages(208U, 0U);
  }
#line 529
  if ((unsigned long )scratch == (unsigned long )((struct page *)0)) {
#line 530
    return (-12);
  } else {

  }
  {
#line 532
  xdr_init_decode_pages(& stream, & buf, xdr_pages, buflen);
#line 533
  tmp = lowmem_page_address((struct page  const  *)scratch);
#line 533
  xdr_set_scratch_buffer(& stream, tmp, 4096UL);
  }
  ldv_56980: 
  {
#line 536
  status = xdr_decode(desc, entry, & stream);
  }
#line 537
  if (status != 0) {
#line 538
    if (status == -11) {
#line 539
      status = 0;
    } else {

    }
#line 540
    goto ldv_56979;
  } else {

  }
#line 543
  count = count + 1U;
#line 545
  if ((unsigned int )*((unsigned char *)desc + 84UL) != 0U) {
    {
#line 546
    nfs_prime_dcache((desc->file)->f_path.dentry, entry);
    }
  } else {

  }
  {
#line 548
  status = nfs_readdir_add_to_array(entry, page);
  }
#line 549
  if (status != 0) {
#line 550
    goto ldv_56979;
  } else {

  }
#line 551
  if (entry->eof == 0) {
#line 553
    goto ldv_56980;
  } else {

  }
  ldv_56979: ;
#line 553
  if (count == 0U || (status == -523 && entry->eof != 0)) {
    {
#line 554
    array = nfs_readdir_get_array(page);
#line 555
    tmp___1 = IS_ERR((void const   *)array);
    }
#line 555
    if (tmp___1) {
#line 555
      tmp___2 = 0;
    } else {
#line 555
      tmp___2 = 1;
    }
#line 555
    if (tmp___2) {
      {
#line 556
      array->eof_index = array->size;
#line 557
      status = 0;
#line 558
      nfs_readdir_release_array(page);
      }
    } else {
      {
#line 560
      tmp___0 = PTR_ERR((void const   *)array);
#line 560
      status = (int )tmp___0;
      }
    }
  } else {

  }
  {
#line 563
  put_page(scratch);
  }
#line 564
  return (status);
}
}
#line 568 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_readdir_free_pagearray(struct page **pages , unsigned int npages ) 
{ 
  unsigned int i ;

  {
#line 571
  i = 0U;
#line 571
  goto ldv_56987;
  ldv_56986: 
  {
#line 572
  put_page(*(pages + (unsigned long )i));
#line 571
  i = i + 1U;
  }
  ldv_56987: ;
#line 571
  if (i < npages) {
#line 573
    goto ldv_56986;
  } else {

  }

#line 578
  return;
}
}
#line 576 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_readdir_free_large_page(void *ptr , struct page **pages , unsigned int npages ) 
{ 


  {
  {
#line 579
  nfs_readdir_free_pagearray(pages, npages);
  }
#line 580
  return;
}
}
#line 587 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_large_page(struct page **pages , unsigned int npages ) 
{ 
  unsigned int i ;
  struct page *page ;
  struct page *tmp ;

  {
#line 591
  i = 0U;
#line 591
  goto ldv_57002;
  ldv_57001: 
  {
#line 592
  tmp = alloc_pages(208U, 0U);
#line 592
  page = tmp;
  }
#line 593
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 594
    goto out_freepages;
  } else {

  }
#line 595
  *(pages + (unsigned long )i) = page;
#line 591
  i = i + 1U;
  ldv_57002: ;
#line 591
  if (i < npages) {
#line 593
    goto ldv_57001;
  } else {

  }

#line 597
  return (0);
  out_freepages: 
  {
#line 600
  nfs_readdir_free_pagearray(pages, i);
  }
#line 601
  return (-12);
}
}
#line 605 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_xdr_to_array(nfs_readdir_descriptor_t *desc , struct page *page ,
                                    struct inode *inode ) 
{ 
  struct page *pages[8U] ;
  void *pages_ptr ;
  struct nfs_entry entry ;
  struct file *file ;
  struct nfs_cache_array *array ;
  int status ;
  unsigned int array_size ;
  struct nfs_server *tmp ;
  long tmp___0 ;
  bool tmp___1 ;
  long tmp___2 ;
  bool tmp___3 ;
  unsigned int pglen ;

  {
  {
#line 608
  pages_ptr = (void *)0;
#line 610
  file = desc->file;
#line 612
  status = -12;
#line 613
  array_size = 8U;
#line 615
  entry.prev_cookie = 0ULL;
#line 616
  entry.cookie = desc->last_cookie;
#line 617
  entry.eof = 0;
#line 618
  entry.fh = nfs_alloc_fhandle();
#line 619
  entry.fattr = nfs_alloc_fattr();
#line 620
  entry.server = NFS_SERVER((struct inode  const  *)inode);
  }
#line 621
  if ((unsigned long )entry.fh == (unsigned long )((struct nfs_fh *)0) || (unsigned long )entry.fattr == (unsigned long )((struct nfs_fattr *)0)) {
#line 622
    goto out;
  } else {

  }
  {
#line 624
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 624
  entry.label = nfs4_label_alloc(tmp, 0U);
#line 625
  tmp___1 = IS_ERR((void const   *)entry.label);
  }
#line 625
  if ((int )tmp___1) {
    {
#line 626
    tmp___0 = PTR_ERR((void const   *)entry.label);
#line 626
    status = (int )tmp___0;
    }
#line 627
    goto out;
  } else {

  }
  {
#line 630
  array = nfs_readdir_get_array(page);
#line 631
  tmp___3 = IS_ERR((void const   *)array);
  }
#line 631
  if ((int )tmp___3) {
    {
#line 632
    tmp___2 = PTR_ERR((void const   *)array);
#line 632
    status = (int )tmp___2;
    }
#line 633
    goto out_label_free;
  } else {

  }
  {
#line 635
  memset((void *)array, 0, 16UL);
#line 636
  array->eof_index = -1;
#line 638
  status = nfs_readdir_large_page((struct page **)(& pages), array_size);
  }
#line 639
  if (status < 0) {
#line 640
    goto out_release_array;
  } else {

  }
  ldv_57023: 
  {
#line 643
  status = nfs_readdir_xdr_filler((struct page **)(& pages), desc, & entry, file,
                                  inode);
  }
#line 645
  if (status < 0) {
#line 646
    goto ldv_57022;
  } else {

  }
  {
#line 647
  pglen = (unsigned int )status;
#line 648
  status = nfs_readdir_page_filler(desc, & entry, (struct page **)(& pages), page,
                                   pglen);
  }
#line 649
  if (status < 0) {
#line 650
    if (status == -28) {
#line 651
      status = 0;
    } else {

    }
#line 652
    goto ldv_57022;
  } else {

  }
#line 654
  if (array->eof_index < 0) {
#line 656
    goto ldv_57023;
  } else {

  }
  ldv_57022: 
  {
#line 656
  nfs_readdir_free_large_page(pages_ptr, (struct page **)(& pages), array_size);
  }
  out_release_array: 
  {
#line 658
  nfs_readdir_release_array(page);
  }
  out_label_free: 
  {
#line 660
  nfs4_label_free(entry.label);
  }
  out: 
  {
#line 662
  nfs_free_fattr((struct nfs_fattr  const  *)entry.fattr);
#line 663
  nfs_free_fhandle((struct nfs_fh  const  *)entry.fh);
  }
#line 664
  return (status);
}
}
#line 674 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir_filler(nfs_readdir_descriptor_t *desc , struct page *page ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  int ret ;
  int tmp___0 ;

  {
  {
#line 676
  tmp = file_inode(desc->file);
#line 676
  inode = tmp;
#line 679
  ret = nfs_readdir_xdr_to_array(desc, page, inode);
  }
#line 680
  if (ret < 0) {
#line 681
    goto error;
  } else {

  }
  {
#line 682
  SetPageUptodate(page);
#line 684
  tmp___0 = invalidate_inode_pages2_range(inode->i_mapping, page->__annonCompField53.__annonCompField48.index + 1UL,
                                          0xffffffffffffffffUL);
  }
#line 684
  if (tmp___0 < 0) {
    {
#line 686
    nfs_zap_mapping(inode, inode->i_mapping);
    }
  } else {

  }
  {
#line 688
  unlock_page(page);
  }
#line 689
  return (0);
  error: 
  {
#line 691
  unlock_page(page);
  }
#line 692
  return (ret);
}
}
#line 696 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void cache_page_release(nfs_readdir_descriptor_t *desc ) 
{ 


  {
#line 698
  if ((unsigned long )(desc->page)->__annonCompField47.mapping == (unsigned long )((struct address_space *)0)) {
    {
#line 699
    nfs_readdir_clear_array(desc->page);
    }
  } else {

  }
  {
#line 700
  put_page(desc->page);
#line 701
  desc->page = (struct page *)0;
  }
#line 702
  return;
}
}
#line 705 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static struct page *get_cache_page(nfs_readdir_descriptor_t *desc ) 
{ 
  struct inode *tmp ;
  struct page *tmp___0 ;

  {
  {
#line 707
  tmp = file_inode(desc->file);
#line 707
  tmp___0 = read_cache_page(tmp->i_mapping, desc->page_index, (filler_t *)(& nfs_readdir_filler),
                            (void *)desc);
  }
#line 707
  return (tmp___0);
}
}
#line 715 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int find_cache_page(nfs_readdir_descriptor_t *desc ) 
{ 
  int res ;
  long tmp ;
  bool tmp___0 ;

  {
  {
#line 719
  desc->page = get_cache_page(desc);
#line 720
  tmp___0 = IS_ERR((void const   *)desc->page);
  }
#line 720
  if ((int )tmp___0) {
    {
#line 721
    tmp = PTR_ERR((void const   *)desc->page);
    }
#line 721
    return ((int )tmp);
  } else {

  }
  {
#line 723
  res = nfs_readdir_search_array(desc);
  }
#line 724
  if (res != 0) {
    {
#line 725
    cache_page_release(desc);
    }
  } else {

  }
#line 726
  return (res);
}
}
#line 731 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
__inline static int readdir_search_pagecache(nfs_readdir_descriptor_t *desc ) 
{ 
  int res ;

  {
#line 735
  if (desc->page_index == 0UL) {
#line 736
    desc->current_index = 0LL;
#line 737
    desc->last_cookie = 0ULL;
  } else {

  }
  ldv_57045: 
  {
#line 740
  res = find_cache_page(desc);
  }
#line 741
  if (res == -11) {
#line 743
    goto ldv_57045;
  } else {

  }

#line 742
  return (res);
}
}
#line 749 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_do_filldir(nfs_readdir_descriptor_t *desc ) 
{ 
  struct file *file ;
  int i ;
  int res ;
  struct nfs_cache_array *array ;
  struct nfs_open_dir_context *ctx ;
  long tmp ;
  bool tmp___0 ;
  struct nfs_cache_array_entry *ent ;
  u64 tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;

  {
  {
#line 751
  file = desc->file;
#line 752
  i = 0;
#line 753
  res = 0;
#line 754
  array = (struct nfs_cache_array *)0;
#line 755
  ctx = (struct nfs_open_dir_context *)file->private_data;
#line 757
  array = nfs_readdir_get_array(desc->page);
#line 758
  tmp___0 = IS_ERR((void const   *)array);
  }
#line 758
  if ((int )tmp___0) {
    {
#line 759
    tmp = PTR_ERR((void const   *)array);
#line 759
    res = (int )tmp;
    }
#line 760
    goto out;
  } else {

  }
#line 763
  i = (int )desc->cache_entry_index;
#line 763
  goto ldv_57059;
  ldv_57058: 
  {
#line 766
  ent = (struct nfs_cache_array_entry *)(& array->array) + (unsigned long )i;
#line 767
  tmp___1 = nfs_compat_user_ino64(ent->ino);
#line 767
  tmp___2 = dir_emit(desc->ctx, (char const   *)ent->string.name, (int )ent->string.__annonCompField25.__annonCompField24.len,
                     tmp___1, (unsigned int )ent->d_type);
  }
#line 767
  if (tmp___2) {
#line 767
    tmp___3 = 0;
  } else {
#line 767
    tmp___3 = 1;
  }
#line 767
  if (tmp___3) {
#line 769
    desc->eof = 1U;
#line 770
    goto ldv_57057;
  } else {

  }
#line 772
  (desc->ctx)->pos = (desc->ctx)->pos + 1LL;
#line 773
  if (i < array->size + -1) {
#line 774
    *(desc->dir_cookie) = array->array[i + 1].cookie;
  } else {
#line 776
    *(desc->dir_cookie) = array->last_cookie;
  }
#line 777
  if ((int )ctx->duped != 0) {
#line 778
    ctx->duped = 1;
  } else {

  }
#line 763
  i = i + 1;
  ldv_57059: ;
#line 763
  if (i < array->size) {
#line 765
    goto ldv_57058;
  } else {

  }
  ldv_57057: ;
#line 780
  if (array->eof_index >= 0) {
#line 781
    desc->eof = 1U;
  } else {

  }
  {
#line 783
  nfs_readdir_release_array(desc->page);
  }
  out: 
  {
#line 785
  cache_page_release(desc);
#line 786
  tmp___4 = __builtin_expect((nfs_debug & 2U) != 0U, 0L);
  }
#line 786
  if (tmp___4 != 0L) {
    {
#line 786
    printk("\001dNFS: nfs_do_filldir() filling ended @ cookie %Lu; returning = %d\n",
           *(desc->dir_cookie), res);
    }
  } else {

  }
#line 788
  return (res);
}
}
#line 804 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
__inline static int uncached_readdir(nfs_readdir_descriptor_t *desc ) 
{ 
  struct page *page ;
  int status ;
  struct inode *inode ;
  struct inode *tmp ;
  struct nfs_open_dir_context *ctx ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 806
  page = (struct page *)0;
#line 808
  tmp = file_inode(desc->file);
#line 808
  inode = tmp;
#line 809
  ctx = (struct nfs_open_dir_context *)(desc->file)->private_data;
#line 811
  tmp___0 = __builtin_expect((nfs_debug & 2U) != 0U, 0L);
  }
#line 811
  if (tmp___0 != 0L) {
    {
#line 811
    printk("\001dNFS: uncached_readdir() searching for cookie %Lu\n", *(desc->dir_cookie));
    }
  } else {

  }
  {
#line 814
  page = alloc_pages(131282U, 0U);
  }
#line 815
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 816
    status = -12;
#line 817
    goto out;
  } else {

  }
  {
#line 820
  desc->page_index = 0UL;
#line 821
  desc->last_cookie = *(desc->dir_cookie);
#line 822
  desc->page = page;
#line 823
  ctx->duped = 0;
#line 825
  status = nfs_readdir_xdr_to_array(desc, page, inode);
  }
#line 826
  if (status < 0) {
#line 827
    goto out_release;
  } else {

  }
  {
#line 829
  status = nfs_do_filldir(desc);
  }
  out: 
  {
#line 832
  tmp___1 = __builtin_expect((nfs_debug & 2U) != 0U, 0L);
  }
#line 832
  if (tmp___1 != 0L) {
    {
#line 832
    printk("\001dNFS: %s: returns %d\n", "uncached_readdir", status);
    }
  } else {

  }
#line 834
  return (status);
  out_release: 
  {
#line 836
  cache_page_release(desc);
  }
#line 837
  goto out;
}
}
#line 840 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static bool nfs_dir_mapping_need_revalidate(struct inode *dir ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 842
  tmp = NFS_I((struct inode  const  *)dir);
#line 842
  nfsi = tmp;
#line 844
  tmp___0 = nfs_attribute_cache_expired(dir);
  }
#line 844
  if (tmp___0 != 0) {
#line 845
    return (1);
  } else {

  }
#line 846
  if ((nfsi->cache_validity & 2UL) != 0UL) {
#line 847
    return (1);
  } else {

  }
#line 848
  return (0);
}
}
#line 855 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_readdir(struct file *file , struct dir_context *ctx ) 
{ 
  struct dentry *dentry ;
  struct inode *inode ;
  nfs_readdir_descriptor_t my_desc ;
  nfs_readdir_descriptor_t *desc ;
  struct nfs_open_dir_context *dir_ctx ;
  int res ;
  long tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  bool tmp___1 ;
  bool tmp___2 ;
  struct nfs_inode *tmp___3 ;
  long tmp___4 ;

  {
  {
#line 857
  dentry = file->f_path.dentry;
#line 858
  inode = dentry->d_inode;
#line 860
  desc = & my_desc;
#line 861
  dir_ctx = (struct nfs_open_dir_context *)file->private_data;
#line 862
  res = 0;
#line 864
  tmp = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 864
  if (tmp != 0L) {
    {
#line 864
    printk("\001dNFS: readdir(%pD2) starting at cookie %llu\n", file, ctx->pos);
    }
  } else {

  }
  {
#line 866
  nfs_inc_stats((struct inode  const  *)inode, 12);
#line 874
  memset((void *)desc, 0, 88UL);
#line 876
  desc->file = file;
#line 877
  desc->ctx = ctx;
#line 878
  desc->dir_cookie = & dir_ctx->dir_cookie;
#line 879
  tmp___0 = NFS_PROTO((struct inode  const  *)inode);
#line 879
  desc->decode = tmp___0->decode_dirent;
#line 880
  tmp___1 = nfs_use_readdirplus(inode, ctx);
#line 880
  desc->plus = (unsigned char )tmp___1;
#line 882
  nfs_block_sillyrename(dentry);
  }
#line 883
  if (ctx->pos == 0LL) {
    {
#line 884
    res = nfs_revalidate_mapping(inode, file->f_mapping);
    }
  } else {
    {
#line 883
    tmp___2 = nfs_dir_mapping_need_revalidate(inode);
    }
#line 883
    if ((int )tmp___2) {
      {
#line 884
      res = nfs_revalidate_mapping(inode, file->f_mapping);
      }
    } else {

    }
  }
#line 885
  if (res < 0) {
#line 886
    goto out;
  } else {

  }
  ldv_57087: 
  {
#line 889
  res = readdir_search_pagecache(desc);
  }
#line 891
  if (res == -523) {
#line 892
    res = 0;
#line 894
    if (*(desc->dir_cookie) != 0ULL && (unsigned int )*((unsigned char *)desc + 84UL) == 0U) {
      {
#line 896
      res = uncached_readdir(desc);
      }
#line 897
      if (res == 0) {
#line 898
        goto ldv_57085;
      } else {

      }
    } else {

    }
#line 900
    goto ldv_57086;
  } else {

  }
#line 902
  if (res == -525 && (unsigned int )*((unsigned char *)desc + 84UL) != 0U) {
    {
#line 903
    tmp___3 = NFS_I((struct inode  const  *)inode);
#line 903
    clear_bit(0L, (unsigned long volatile   *)(& tmp___3->flags));
#line 904
    nfs_zap_caches(inode);
#line 905
    desc->page_index = 0UL;
#line 906
    desc->plus = 0U;
#line 907
    desc->eof = 0U;
    }
#line 908
    goto ldv_57085;
  } else {

  }
#line 910
  if (res < 0) {
#line 911
    goto ldv_57086;
  } else {

  }
  {
#line 913
  res = nfs_do_filldir(desc);
  }
#line 914
  if (res < 0) {
#line 915
    goto ldv_57086;
  } else {

  }
  ldv_57085: ;
#line 916
  if ((unsigned int )*((unsigned char *)desc + 84UL) == 0U) {
#line 918
    goto ldv_57087;
  } else {

  }
  ldv_57086: ;
  out: 
  {
#line 918
  nfs_unblock_sillyrename(dentry);
  }
#line 919
  if (res > 0) {
#line 920
    res = 0;
  } else {

  }
  {
#line 921
  tmp___4 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 921
  if (tmp___4 != 0L) {
    {
#line 921
    printk("\001dNFS: readdir(%pD2) returns %d\n", file, res);
    }
  } else {

  }
#line 922
  return (res);
}
}
#line 925 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static loff_t nfs_llseek_dir(struct file *filp , loff_t offset , int whence ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  struct nfs_open_dir_context *dir_ctx ;
  long tmp___0 ;

  {
  {
#line 927
  tmp = file_inode(filp);
#line 927
  inode = tmp;
#line 928
  dir_ctx = (struct nfs_open_dir_context *)filp->private_data;
#line 930
  tmp___0 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 930
  if (tmp___0 != 0L) {
    {
#line 930
    printk("\001dNFS: llseek dir(%pD2, %lld, %d)\n", filp, offset, whence);
    }
  } else {

  }
  {
#line 933
  mutex_lock_nested(& inode->i_mutex, 0U);
  }
  {
#line 935
  if (whence == 1) {
#line 935
    goto case_1;
  } else {

  }
#line 937
  if (whence == 0) {
#line 937
    goto case_0;
  } else {

  }
#line 940
  goto switch_default;
  case_1: /* CIL Label */ 
#line 936
  offset = offset + filp->f_pos;
  case_0: /* CIL Label */ ;
#line 938
  if (offset >= 0LL) {
#line 939
    goto ldv_57097;
  } else {

  }
  switch_default: /* CIL Label */ 
#line 941
  offset = -22LL;
#line 942
  goto out;
  switch_break: /* CIL Label */ ;
  }
  ldv_57097: ;
#line 944
  if (offset != filp->f_pos) {
#line 945
    filp->f_pos = offset;
#line 946
    dir_ctx->dir_cookie = 0ULL;
#line 947
    dir_ctx->duped = 0;
  } else {

  }
  out: 
  {
#line 950
  mutex_unlock(& inode->i_mutex);
  }
#line 951
  return (offset);
}
}
#line 958 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_fsync_dir(struct file *filp , loff_t start , loff_t end , int datasync ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  long tmp___0 ;

  {
  {
#line 961
  tmp = file_inode(filp);
#line 961
  inode = tmp;
#line 963
  tmp___0 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 963
  if (tmp___0 != 0L) {
    {
#line 963
    printk("\001dNFS: fsync dir(%pD2) datasync %d\n", filp, datasync);
    }
  } else {

  }
  {
#line 965
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 966
  nfs_inc_stats((struct inode  const  *)inode, 15);
#line 967
  mutex_unlock(& inode->i_mutex);
  }
#line 968
  return (0);
}
}
#line 981 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
void nfs_force_lookup_revalidate(struct inode *dir ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 983
  tmp = NFS_I((struct inode  const  *)dir);
#line 983
  tmp->cache_change_attribute = tmp->cache_change_attribute + 1UL;
  }
#line 984
  return;
}
}
#line 985 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_force_lookup_revalidate[28U]  = 
#line 985
  {      'n',      'f',      's',      '_', 
        'f',      'o',      'r',      'c', 
        'e',      '_',      'l',      'o', 
        'o',      'k',      'u',      'p', 
        '_',      'r',      'e',      'v', 
        'a',      'l',      'i',      'd', 
        'a',      't',      'e',      '\000'};
#line 985
struct kernel_symbol  const  __ksymtab_nfs_force_lookup_revalidate ;
#line 985 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_force_lookup_revalidate  =    {(unsigned long )(& nfs_force_lookup_revalidate), (char const   *)(& __kstrtab_nfs_force_lookup_revalidate)};
#line 992 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_check_verifier(struct inode *dir , struct dentry *dentry ) 
{ 
  struct nfs_server *tmp ;
  int tmp___0 ;
  struct nfs_server *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 994
  if ((unsigned long )dentry == (unsigned long )dentry->d_parent) {
#line 995
    return (1);
  } else {

  }
  {
#line 996
  tmp = NFS_SERVER((struct inode  const  *)dir);
  }
#line 996
  if ((tmp->flags & 131072) != 0) {
#line 997
    return (0);
  } else {

  }
  {
#line 998
  tmp___0 = nfs_verify_change_attribute(dir, dentry->d_time);
  }
#line 998
  if (tmp___0 == 0) {
#line 999
    return (0);
  } else {

  }
  {
#line 1001
  tmp___1 = NFS_SERVER((struct inode  const  *)dir);
#line 1001
  tmp___2 = nfs_revalidate_inode(tmp___1, dir);
  }
#line 1001
  if (tmp___2 < 0) {
#line 1002
    return (0);
  } else {

  }
  {
#line 1003
  tmp___3 = nfs_verify_change_attribute(dir, dentry->d_time);
  }
#line 1003
  if (tmp___3 == 0) {
#line 1004
    return (0);
  } else {

  }
#line 1005
  return (1);
}
}
#line 1012 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_is_exclusive_create(struct inode *dir , unsigned int flags ) 
{ 
  struct nfs_rpc_ops  const  *tmp ;

  {
  {
#line 1014
  tmp = NFS_PROTO((struct inode  const  *)dir);
  }
#line 1014
  if ((unsigned int )tmp->version == 2U) {
#line 1015
    return (0);
  } else {

  }
#line 1016
  return ((int )flags & 1024);
}
}
#line 1028 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_lookup_verify_inode(struct inode *inode , unsigned int flags ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  int ret ;

  {
  {
#line 1030
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 1030
  server = tmp;
  }
#line 1033
  if ((inode->i_flags & 2048U) != 0U) {
#line 1034
    return (0);
  } else {

  }
#line 1036
  if ((flags & 32U) != 0U) {
#line 1037
    goto out_force;
  } else {

  }
#line 1039
  if (((flags & 256U) != 0U && (server->flags & 16) == 0) && (((int )inode->i_mode & 61440) == 32768 || ((int )inode->i_mode & 61440) == 16384)) {
#line 1041
    goto out_force;
  } else {

  }
  out: ;
#line 1043
  return ((unsigned int )inode->__annonCompField39.i_nlink == 0U ? -2 : 0);
  out_force: 
  {
#line 1045
  ret = __nfs_revalidate_inode(server, inode);
  }
#line 1046
  if (ret != 0) {
#line 1047
    return (ret);
  } else {

  }
#line 1048
  goto out;
}
}
#line 1059 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
__inline static int nfs_neg_need_reval(struct inode *dir , struct dentry *dentry ,
                                       unsigned int flags ) 
{ 
  struct nfs_server *tmp ;
  int tmp___0 ;

  {
#line 1063
  if ((flags & 512U) != 0U) {
#line 1064
    return (0);
  } else {

  }
  {
#line 1065
  tmp = NFS_SERVER((struct inode  const  *)dir);
  }
#line 1065
  if ((tmp->flags & 65536) != 0) {
#line 1066
    return (1);
  } else {

  }
  {
#line 1067
  tmp___0 = nfs_check_verifier(dir, dentry);
  }
#line 1067
  return (tmp___0 == 0);
}
}
#line 1081 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_lookup_revalidate(struct dentry *dentry , unsigned int flags ) 
{ 
  struct inode *dir ;
  struct inode *inode ;
  struct dentry *parent ;
  struct nfs_fh *fhandle ;
  struct nfs_fattr *fattr ;
  struct nfs4_label *label ;
  int error ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct nfs_rpc_ops  const  *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct nfs_server *tmp___8 ;
  bool tmp___9 ;
  struct nfs_rpc_ops  const  *tmp___10 ;
  struct nfs_fh *tmp___11 ;
  int tmp___12 ;
  unsigned long tmp___13 ;
  long tmp___14 ;
  int tmp___15 ;
  long tmp___16 ;
  long tmp___17 ;

  {
#line 1086
  fhandle = (struct nfs_fh *)0;
#line 1087
  fattr = (struct nfs_fattr *)0;
#line 1088
  label = (struct nfs4_label *)0;
#line 1091
  if ((flags & 64U) != 0U) {
#line 1092
    return (-10);
  } else {

  }
  {
#line 1094
  parent = dget_parent(dentry);
#line 1095
  dir = parent->d_inode;
#line 1096
  nfs_inc_stats((struct inode  const  *)dir, 1);
#line 1097
  inode = dentry->d_inode;
  }
#line 1099
  if ((unsigned long )inode == (unsigned long )((struct inode *)0)) {
    {
#line 1100
    tmp = nfs_neg_need_reval(dir, dentry, flags);
    }
#line 1100
    if (tmp != 0) {
#line 1101
      goto out_bad;
    } else {

    }
#line 1102
    goto out_valid_noent;
  } else {

  }
  {
#line 1105
  tmp___1 = is_bad_inode(inode);
  }
#line 1105
  if (tmp___1 != 0) {
    {
#line 1106
    tmp___0 = __builtin_expect((nfs_debug & 4U) != 0U, 0L);
    }
#line 1106
    if (tmp___0 != 0L) {
      {
#line 1106
      printk("\001d%s: %pd2 has dud inode\n", "nfs_lookup_revalidate", dentry);
      }
    } else {

    }
#line 1108
    goto out_bad;
  } else {

  }
  {
#line 1111
  tmp___2 = NFS_PROTO((struct inode  const  *)dir);
#line 1111
  tmp___3 = (*(tmp___2->have_delegation))(inode, 1U);
  }
#line 1111
  if (tmp___3 != 0) {
#line 1112
    goto out_set_verifier;
  } else {

  }
  {
#line 1115
  tmp___5 = nfs_is_exclusive_create(dir, flags);
  }
#line 1115
  if (tmp___5 == 0) {
    {
#line 1115
    tmp___6 = nfs_check_verifier(dir, dentry);
    }
#line 1115
    if (tmp___6 != 0) {
      {
#line 1116
      tmp___4 = nfs_lookup_verify_inode(inode, flags);
      }
#line 1116
      if (tmp___4 != 0) {
#line 1117
        goto out_zap_parent;
      } else {

      }
#line 1118
      goto out_valid;
    } else {

    }
  } else {

  }
  {
#line 1121
  tmp___7 = NFS_STALE((struct inode  const  *)inode);
  }
#line 1121
  if (tmp___7 != 0) {
#line 1122
    goto out_bad;
  } else {

  }
  {
#line 1124
  error = -12;
#line 1125
  fhandle = nfs_alloc_fhandle();
#line 1126
  fattr = nfs_alloc_fattr();
  }
#line 1127
  if ((unsigned long )fhandle == (unsigned long )((struct nfs_fh *)0) || (unsigned long )fattr == (unsigned long )((struct nfs_fattr *)0)) {
#line 1128
    goto out_error;
  } else {

  }
  {
#line 1130
  tmp___8 = NFS_SERVER((struct inode  const  *)inode);
#line 1130
  label = nfs4_label_alloc(tmp___8, 0U);
#line 1131
  tmp___9 = IS_ERR((void const   *)label);
  }
#line 1131
  if ((int )tmp___9) {
#line 1132
    goto out_error;
  } else {

  }
  {
#line 1134
  trace_nfs_lookup_revalidate_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                                    flags);
#line 1135
  tmp___10 = NFS_PROTO((struct inode  const  *)dir);
#line 1135
  error = (*(tmp___10->lookup))(dir, & dentry->d_name, fhandle, fattr, label);
#line 1136
  trace_nfs_lookup_revalidate_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                                   flags, error);
  }
#line 1137
  if (error != 0) {
#line 1138
    goto out_bad;
  } else {

  }
  {
#line 1139
  tmp___11 = NFS_FH((struct inode  const  *)inode);
#line 1139
  tmp___12 = nfs_compare_fh((struct nfs_fh  const  *)tmp___11, (struct nfs_fh  const  *)fhandle);
  }
#line 1139
  if (tmp___12 != 0) {
#line 1140
    goto out_bad;
  } else {

  }
  {
#line 1141
  error = nfs_refresh_inode(inode, fattr);
  }
#line 1141
  if (error != 0) {
#line 1142
    goto out_bad;
  } else {

  }
  {
#line 1144
  nfs_setsecurity(inode, fattr, label);
#line 1146
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
#line 1147
  nfs_free_fhandle((struct nfs_fh  const  *)fhandle);
#line 1148
  nfs4_label_free(label);
  }
  out_set_verifier: 
  {
#line 1151
  tmp___13 = nfs_save_change_attribute(dir);
#line 1151
  nfs_set_verifier(dentry, tmp___13);
  }
  out_valid: 
  {
#line 1154
  nfs_advise_use_readdirplus(dir);
  }
  out_valid_noent: 
  {
#line 1156
  dput(parent);
#line 1157
  tmp___14 = __builtin_expect((nfs_debug & 4U) != 0U, 0L);
  }
#line 1157
  if (tmp___14 != 0L) {
    {
#line 1157
    printk("\001dNFS: %s(%pd2) is valid\n", "nfs_lookup_revalidate", dentry);
    }
  } else {

  }
#line 1159
  return (1);
  out_zap_parent: 
  {
#line 1161
  nfs_zap_caches(dir);
  }
  out_bad: 
  {
#line 1163
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
#line 1164
  nfs_free_fhandle((struct nfs_fh  const  *)fhandle);
#line 1165
  nfs4_label_free(label);
#line 1166
  nfs_mark_for_revalidate(dir);
  }
#line 1167
  if ((unsigned long )inode != (unsigned long )((struct inode *)0) && ((int )inode->i_mode & 61440) == 16384) {
    {
#line 1169
    nfs_zap_caches(inode);
    }
#line 1176
    if ((unsigned long )dentry == (unsigned long )dentry->d_parent) {
#line 1177
      goto out_valid;
    } else {

    }
  } else {

  }
  {
#line 1180
  tmp___15 = check_submounts_and_drop(dentry);
  }
#line 1180
  if (tmp___15 != 0) {
#line 1181
    goto out_valid;
  } else {

  }
  {
#line 1183
  dput(parent);
#line 1184
  tmp___16 = __builtin_expect((nfs_debug & 4U) != 0U, 0L);
  }
#line 1184
  if (tmp___16 != 0L) {
    {
#line 1184
    printk("\001dNFS: %s(%pd2) is invalid\n", "nfs_lookup_revalidate", dentry);
    }
  } else {

  }
#line 1186
  return (0);
  out_error: 
  {
#line 1188
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
#line 1189
  nfs_free_fhandle((struct nfs_fh  const  *)fhandle);
#line 1190
  nfs4_label_free(label);
#line 1191
  dput(parent);
#line 1192
  tmp___17 = __builtin_expect((nfs_debug & 4U) != 0U, 0L);
  }
#line 1192
  if (tmp___17 != 0L) {
    {
#line 1192
    printk("\001dNFS: %s(%pd2) lookup returned error %d\n", "nfs_lookup_revalidate",
           dentry, error);
    }
  } else {

  }
#line 1194
  return (error);
}
}
#line 1206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_weak_revalidate(struct dentry *dentry , unsigned int flags ) 
{ 
  int error ;
  struct inode *inode ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct nfs_server *tmp___2 ;
  long tmp___3 ;

  {
#line 1209
  inode = dentry->d_inode;
#line 1216
  if ((unsigned long )inode == (unsigned long )((struct inode *)0)) {
    {
#line 1217
    tmp = __builtin_expect((nfs_debug & 4U) != 0U, 0L);
    }
#line 1217
    if (tmp != 0L) {
      {
#line 1217
      printk("\001d%s: %pd2 has negative inode\n", "nfs_weak_revalidate", dentry);
      }
    } else {

    }
#line 1219
    return (1);
  } else {

  }
  {
#line 1222
  tmp___1 = is_bad_inode(inode);
  }
#line 1222
  if (tmp___1 != 0) {
    {
#line 1223
    tmp___0 = __builtin_expect((nfs_debug & 4U) != 0U, 0L);
    }
#line 1223
    if (tmp___0 != 0L) {
      {
#line 1223
      printk("\001d%s: %pd2 has dud inode\n", "nfs_weak_revalidate", dentry);
      }
    } else {

    }
#line 1225
    return (0);
  } else {

  }
  {
#line 1228
  tmp___2 = NFS_SERVER((struct inode  const  *)inode);
#line 1228
  error = nfs_revalidate_inode(tmp___2, inode);
#line 1229
  tmp___3 = __builtin_expect((nfs_debug & 4U) != 0U, 0L);
  }
#line 1229
  if (tmp___3 != 0L) {
    {
#line 1229
    printk("\001dNFS: %s: inode %lu is %s\n", "nfs_weak_revalidate", inode->i_ino,
           error != 0 ? (char *)"invalid" : (char *)"valid");
    }
  } else {

  }
#line 1231
  return (error == 0);
}
}
#line 1237 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_dentry_delete(struct dentry  const  *dentry ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
  {
#line 1239
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1239
  if (tmp != 0L) {
    {
#line 1239
    printk("\001dNFS: dentry_delete(%pd2, %x)\n", dentry, dentry->d_flags);
    }
  } else {

  }
#line 1243
  if ((unsigned long )dentry->d_inode != (unsigned long )((struct inode */* const  */)0)) {
    {
#line 1243
    tmp___0 = NFS_STALE((struct inode  const  *)dentry->d_inode);
    }
#line 1243
    if (tmp___0 != 0) {
#line 1244
      return (1);
    } else {

    }
  } else {

  }
#line 1246
  if (((unsigned int )dentry->d_flags & 4096U) != 0U) {
#line 1248
    return (1);
  } else {

  }
#line 1250
  if (((dentry->d_sb)->s_flags & 1073741824UL) == 0UL) {
#line 1253
    return (1);
  } else {

  }
#line 1255
  return (0);
}
}
#line 1260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_drop_nlink(struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 1262
  ldv_spin_lock_72(& inode->i_lock);
  }
#line 1264
  if ((unsigned int )inode->__annonCompField39.i_nlink == 1U) {
    {
#line 1265
    clear_nlink(inode);
    }
  } else {

  }
  {
#line 1266
  tmp = NFS_I((struct inode  const  *)inode);
#line 1266
  tmp->cache_validity = tmp->cache_validity | 1UL;
#line 1267
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 1268
  return;
}
}
#line 1274 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_dentry_iput(struct dentry *dentry , struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
#line 1276
  if (((int )inode->i_mode & 61440) == 16384) {
    {
#line 1278
    tmp = NFS_I((struct inode  const  *)inode);
#line 1278
    tmp->cache_validity = tmp->cache_validity | 2UL;
    }
  } else {

  }
#line 1280
  if ((dentry->d_flags & 4096U) != 0U) {
    {
#line 1281
    nfs_complete_unlink(dentry, inode);
#line 1282
    nfs_drop_nlink(inode);
    }
  } else {

  }
  {
#line 1284
  iput(inode);
  }
#line 1285
  return;
}
}
#line 1287 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_d_release(struct dentry *dentry ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 1290
  tmp___0 = __builtin_expect((unsigned long )dentry->d_fsdata != (unsigned long )((void *)0),
                             0L);
  }
#line 1290
  if (tmp___0 != 0L) {
#line 1291
    if ((dentry->d_flags & 4096U) != 0U) {
      {
#line 1292
      __ret_warn_on = 1;
#line 1292
      tmp = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 1292
      if (tmp != 0L) {
        {
#line 1292
        warn_slowpath_null("fs/nfs/dir.c", 1292);
        }
      } else {

      }
      {
#line 1292
      __builtin_expect(__ret_warn_on != 0, 0L);
      }
    } else {
      {
#line 1294
      kfree((void const   *)dentry->d_fsdata);
      }
    }
  } else {

  }
#line 1295
  return;
}
}
#line 1298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct dentry_operations  const  nfs_dentry_operations  = 
#line 1298
     {& nfs_lookup_revalidate, & nfs_weak_revalidate, 0, 0, & nfs_dentry_delete, & nfs_d_release,
    0, & nfs_dentry_iput, 0, & nfs_d_automount, 0};
#line 1306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_dentry_operations[22U]  = 
#line 1306
  {      'n',      'f',      's',      '_', 
        'd',      'e',      'n',      't', 
        'r',      'y',      '_',      'o', 
        'p',      'e',      'r',      'a', 
        't',      'i',      'o',      'n', 
        's',      '\000'};
#line 1306
struct kernel_symbol  const  __ksymtab_nfs_dentry_operations ;
#line 1306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_dentry_operations  =    {(unsigned long )(& nfs_dentry_operations), (char const   *)(& __kstrtab_nfs_dentry_operations)};
#line 1308 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct dentry *nfs_lookup(struct inode *dir , struct dentry *dentry , unsigned int flags ) 
{ 
  struct dentry *res ;
  struct dentry *parent ;
  struct inode *inode ;
  struct nfs_fh *fhandle ;
  struct nfs_fattr *fattr ;
  struct nfs4_label *label ;
  int error ;
  long tmp ;
  void *tmp___0 ;
  struct nfs_server *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct nfs_server *tmp___4 ;
  bool tmp___5 ;
  struct nfs_rpc_ops  const  *tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  bool tmp___9 ;
  bool tmp___10 ;
  unsigned long tmp___11 ;

  {
  {
#line 1312
  inode = (struct inode *)0;
#line 1313
  fhandle = (struct nfs_fh *)0;
#line 1314
  fattr = (struct nfs_fattr *)0;
#line 1315
  label = (struct nfs4_label *)0;
#line 1318
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1318
  if (tmp != 0L) {
    {
#line 1318
    printk("\001dNFS: lookup(%pd2)\n", dentry);
    }
  } else {

  }
  {
#line 1319
  nfs_inc_stats((struct inode  const  *)dir, 5);
#line 1321
  tmp___0 = ERR_PTR(-36L);
#line 1321
  res = (struct dentry *)tmp___0;
#line 1322
  tmp___1 = NFS_SERVER((struct inode  const  *)dir);
  }
#line 1322
  if (dentry->d_name.__annonCompField25.__annonCompField24.len > tmp___1->namelen) {
#line 1323
    goto out;
  } else {

  }
  {
#line 1329
  tmp___2 = nfs_is_exclusive_create(dir, flags);
  }
#line 1329
  if (tmp___2 != 0) {
    {
#line 1330
    d_instantiate(dentry, (struct inode *)0);
#line 1331
    res = (struct dentry *)0;
    }
#line 1332
    goto out;
  } else {

  }
  {
#line 1335
  tmp___3 = ERR_PTR(-12L);
#line 1335
  res = (struct dentry *)tmp___3;
#line 1336
  fhandle = nfs_alloc_fhandle();
#line 1337
  fattr = nfs_alloc_fattr();
  }
#line 1338
  if ((unsigned long )fhandle == (unsigned long )((struct nfs_fh *)0) || (unsigned long )fattr == (unsigned long )((struct nfs_fattr *)0)) {
#line 1339
    goto out;
  } else {

  }
  {
#line 1341
  tmp___4 = NFS_SERVER((struct inode  const  *)dir);
#line 1341
  label = nfs4_label_alloc(tmp___4, 0U);
#line 1342
  tmp___5 = IS_ERR((void const   *)label);
  }
#line 1342
  if ((int )tmp___5) {
#line 1343
    goto out;
  } else {

  }
  {
#line 1345
  parent = dentry->d_parent;
#line 1347
  trace_nfs_lookup_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                         flags);
#line 1348
  nfs_block_sillyrename(parent);
#line 1349
  tmp___6 = NFS_PROTO((struct inode  const  *)dir);
#line 1349
  error = (*(tmp___6->lookup))(dir, & dentry->d_name, fhandle, fattr, label);
  }
#line 1350
  if (error == -2) {
#line 1351
    goto no_entry;
  } else {

  }
#line 1352
  if (error < 0) {
    {
#line 1353
    tmp___7 = ERR_PTR((long )error);
#line 1353
    res = (struct dentry *)tmp___7;
    }
#line 1354
    goto out_unblock_sillyrename;
  } else {

  }
  {
#line 1356
  inode = nfs_fhget(dentry->d_sb, fhandle, fattr, label);
#line 1357
  tmp___8 = ERR_CAST((void const   *)inode);
#line 1357
  res = (struct dentry *)tmp___8;
#line 1358
  tmp___9 = IS_ERR((void const   *)res);
  }
#line 1358
  if ((int )tmp___9) {
#line 1359
    goto out_unblock_sillyrename;
  } else {

  }
  {
#line 1362
  nfs_advise_use_readdirplus(dir);
  }
  no_entry: 
  {
#line 1365
  res = d_materialise_unique(dentry, inode);
  }
#line 1366
  if ((unsigned long )res != (unsigned long )((struct dentry *)0)) {
    {
#line 1367
    tmp___10 = IS_ERR((void const   *)res);
    }
#line 1367
    if ((int )tmp___10) {
#line 1368
      goto out_unblock_sillyrename;
    } else {

    }
#line 1369
    dentry = res;
  } else {

  }
  {
#line 1371
  tmp___11 = nfs_save_change_attribute(dir);
#line 1371
  nfs_set_verifier(dentry, tmp___11);
  }
  out_unblock_sillyrename: 
  {
#line 1373
  nfs_unblock_sillyrename(parent);
#line 1374
  trace_nfs_lookup_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                        flags, error);
#line 1375
  nfs4_label_free(label);
  }
  out: 
  {
#line 1377
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
#line 1378
  nfs_free_fhandle((struct nfs_fh  const  *)fhandle);
  }
#line 1379
  return (res);
}
}
#line 1381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_lookup[11U]  = 
#line 1381
  {      'n',      'f',      's',      '_', 
        'l',      'o',      'o',      'k', 
        'u',      'p',      '\000'};
#line 1381
struct kernel_symbol  const  __ksymtab_nfs_lookup ;
#line 1381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_lookup  =    {(unsigned long )(& nfs_lookup), (char const   *)(& __kstrtab_nfs_lookup)};
#line 1384
static int nfs4_lookup_revalidate(struct dentry *dentry , unsigned int flags ) ;
#line 1386 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct dentry_operations  const  nfs4_dentry_operations  = 
#line 1386
     {& nfs4_lookup_revalidate, 0, 0, 0, & nfs_dentry_delete, & nfs_d_release, 0, & nfs_dentry_iput,
    0, & nfs_d_automount, 0};
#line 1393 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs4_dentry_operations[23U]  = 
#line 1393
  {      'n',      'f',      's',      '4', 
        '_',      'd',      'e',      'n', 
        't',      'r',      'y',      '_', 
        'o',      'p',      'e',      'r', 
        'a',      't',      'i',      'o', 
        'n',      's',      '\000'};
#line 1393
struct kernel_symbol  const  __ksymtab_nfs4_dentry_operations ;
#line 1393 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs4_dentry_operations  =    {(unsigned long )(& nfs4_dentry_operations), (char const   *)(& __kstrtab_nfs4_dentry_operations)};
#line 1395 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static fmode_t flags_to_mode(int flags ) 
{ 
  fmode_t res ;

  {
#line 1397
  res = (unsigned int )flags & 32U;
#line 1398
  if ((flags & 3) != 1) {
#line 1399
    res = res | 1U;
  } else {

  }
#line 1400
  if ((flags & 3) != 0) {
#line 1401
    res = res | 2U;
  } else {

  }
#line 1402
  return (res);
}
}
#line 1405 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static struct nfs_open_context *create_nfs_open_context(struct dentry *dentry , int open_flags ) 
{ 
  fmode_t tmp ;
  struct nfs_open_context *tmp___0 ;

  {
  {
#line 1407
  tmp = flags_to_mode(open_flags);
#line 1407
  tmp___0 = alloc_nfs_open_context(dentry, tmp);
  }
#line 1407
  return (tmp___0);
}
}
#line 1410 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int do_open(struct inode *inode , struct file *filp ) 
{ 


  {
  {
#line 1412
  nfs_fscache_open_file(inode, filp);
  }
#line 1413
  return (0);
}
}
#line 1416 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_finish_open(struct nfs_open_context *ctx , struct dentry *dentry ,
                           struct file *file , unsigned int open_flags , int *opened ) 
{ 
  int err ;

  {
#line 1423
  if ((open_flags & 192U) == 192U) {
#line 1424
    *opened = *opened | 1;
  } else {

  }
  {
#line 1426
  err = finish_open(file, dentry, & do_open, opened);
  }
#line 1427
  if (err != 0) {
#line 1428
    goto out;
  } else {

  }
  {
#line 1429
  nfs_file_set_open_context(file, ctx);
  }
  out: ;
#line 1432
  return (err);
}
}
#line 1435 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_atomic_open(struct inode *dir , struct dentry *dentry , struct file *file ,
                    unsigned int open_flags , umode_t mode , int *opened ) 
{ 
  struct nfs_open_context *ctx ;
  struct dentry *res ;
  struct iattr attr ;
  struct inode *inode ;
  unsigned int lookup_flags ;
  int err ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct nfs_server *tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  bool tmp___5 ;
  struct nfs_rpc_ops  const  *tmp___6 ;
  long tmp___7 ;
  bool tmp___8 ;
  long tmp___9 ;
  bool tmp___10 ;
  int tmp___11 ;

  {
  {
#line 1441
  attr.ia_valid = 32768U;
#line 1441
  attr.ia_mode = (unsigned short)0;
#line 1441
  attr.ia_uid.val = 0U;
#line 1441
  attr.ia_gid.val = 0U;
#line 1441
  attr.ia_size = 0LL;
#line 1441
  attr.ia_atime.tv_sec = 0L;
#line 1441
  attr.ia_atime.tv_nsec = 0L;
#line 1441
  attr.ia_mtime.tv_sec = 0L;
#line 1441
  attr.ia_mtime.tv_nsec = 0L;
#line 1441
  attr.ia_ctime.tv_sec = 0L;
#line 1441
  attr.ia_ctime.tv_nsec = 0L;
#line 1441
  attr.ia_file = 0;
#line 1443
  lookup_flags = 0U;
#line 1447
  tmp = __builtin_expect((unsigned long )dentry->d_inode != (unsigned long )((struct inode *)0),
                         0L);
  }
#line 1447
  if (tmp != 0L) {
    {
#line 1447
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/dir.c"),
                         "i" (1447), "i" (12UL));
#line 1447
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 1449
  tmp___0 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1449
  if (tmp___0 != 0L) {
    {
#line 1449
    printk("\001dNFS: atomic_open(%s/%lu), %pd\n", (char *)(& (dir->i_sb)->s_id),
           dir->i_ino, dentry);
    }
  } else {

  }
  {
#line 1452
  err = nfs_check_flags((int )open_flags);
  }
#line 1453
  if (err != 0) {
#line 1454
    return (err);
  } else {

  }
#line 1457
  if ((open_flags & 65536U) != 0U) {
    {
#line 1458
    tmp___1 = d_unhashed((struct dentry  const  *)dentry);
    }
#line 1458
    if (tmp___1 == 0) {
#line 1464
      return (-2);
    } else {

    }
#line 1466
    lookup_flags = 258U;
#line 1467
    goto no_open;
  } else {

  }
  {
#line 1470
  tmp___2 = NFS_SERVER((struct inode  const  *)dir);
  }
#line 1470
  if (dentry->d_name.__annonCompField25.__annonCompField24.len > tmp___2->namelen) {
#line 1471
    return (-36);
  } else {

  }
#line 1473
  if ((open_flags & 64U) != 0U) {
    {
#line 1474
    attr.ia_valid = attr.ia_valid | 1U;
#line 1475
    tmp___3 = current_umask();
#line 1475
    attr.ia_mode = (umode_t )((int )((short )mode) & ~ ((int )((short )tmp___3)));
    }
  } else {

  }
#line 1477
  if ((open_flags & 512U) != 0U) {
#line 1478
    attr.ia_valid = attr.ia_valid | 8U;
#line 1479
    attr.ia_size = 0LL;
  } else {

  }
  {
#line 1482
  ctx = create_nfs_open_context(dentry, (int )open_flags);
#line 1483
  tmp___4 = PTR_ERR((void const   *)ctx);
#line 1483
  err = (int )tmp___4;
#line 1484
  tmp___5 = IS_ERR((void const   *)ctx);
  }
#line 1484
  if ((int )tmp___5) {
#line 1485
    goto out;
  } else {

  }
  {
#line 1487
  trace_nfs_atomic_open_enter((struct inode  const  *)dir, (struct nfs_open_context  const  *)ctx,
                              open_flags);
#line 1488
  nfs_block_sillyrename(dentry->d_parent);
#line 1489
  tmp___6 = NFS_PROTO((struct inode  const  *)dir);
#line 1489
  inode = (*(tmp___6->open_context))(dir, ctx, (int )open_flags, & attr, opened);
#line 1490
  nfs_unblock_sillyrename(dentry->d_parent);
#line 1491
  tmp___8 = IS_ERR((void const   *)inode);
  }
#line 1491
  if ((int )tmp___8) {
    {
#line 1492
    tmp___7 = PTR_ERR((void const   *)inode);
#line 1492
    err = (int )tmp___7;
#line 1493
    trace_nfs_atomic_open_exit((struct inode  const  *)dir, (struct nfs_open_context  const  *)ctx,
                               open_flags, err);
#line 1494
    put_nfs_open_context(ctx);
    }
    {
#line 1496
    if (err == -2) {
#line 1496
      goto case_neg_2;
    } else {

    }
#line 1500
    if (err == -21) {
#line 1500
      goto case_neg_21;
    } else {

    }
#line 1501
    if (err == -20) {
#line 1501
      goto case_neg_20;
    } else {

    }
#line 1503
    if (err == -40) {
#line 1503
      goto case_neg_40;
    } else {

    }
#line 1508
    goto switch_default;
    case_neg_2: /* CIL Label */ 
    {
#line 1497
    d_drop(dentry);
#line 1498
    d_add(dentry, (struct inode *)0);
    }
#line 1499
    goto ldv_57257;
    case_neg_21: /* CIL Label */ ;
    case_neg_20: /* CIL Label */ ;
#line 1502
    goto no_open;
    case_neg_40: /* CIL Label */ ;
#line 1504
    if ((open_flags & 131072U) == 0U) {
#line 1505
      goto no_open;
    } else {

    }
#line 1506
    goto ldv_57257;
    switch_default: /* CIL Label */ ;
#line 1509
    goto ldv_57257;
    switch_break: /* CIL Label */ ;
    }
    ldv_57257: ;
#line 1511
    goto out;
  } else {

  }
  {
#line 1514
  err = nfs_finish_open(ctx, ctx->dentry, file, open_flags, opened);
#line 1515
  trace_nfs_atomic_open_exit((struct inode  const  *)dir, (struct nfs_open_context  const  *)ctx,
                             open_flags, err);
#line 1516
  put_nfs_open_context(ctx);
  }
  out: ;
#line 1518
  return (err);
  no_open: 
  {
#line 1521
  res = nfs_lookup(dir, dentry, lookup_flags);
#line 1522
  tmp___9 = PTR_ERR((void const   *)res);
#line 1522
  err = (int )tmp___9;
#line 1523
  tmp___10 = IS_ERR((void const   *)res);
  }
#line 1523
  if ((int )tmp___10) {
#line 1524
    goto out;
  } else {

  }
  {
#line 1526
  tmp___11 = finish_no_open(file, res);
  }
#line 1526
  return (tmp___11);
}
}
#line 1528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_atomic_open[16U]  = 
#line 1528
  {      'n',      'f',      's',      '_', 
        'a',      't',      'o',      'm', 
        'i',      'c',      '_',      'o', 
        'p',      'e',      'n',      '\000'};
#line 1528
struct kernel_symbol  const  __ksymtab_nfs_atomic_open ;
#line 1528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_atomic_open  =    {(unsigned long )(& nfs_atomic_open), (char const   *)(& __kstrtab_nfs_atomic_open)};
#line 1530 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs4_lookup_revalidate(struct dentry *dentry , unsigned int flags ) 
{ 
  struct dentry *parent ;
  struct inode *inode ;
  struct inode *dir ;
  int ret ;
  bool tmp ;
  struct nfs_server *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1532
  parent = (struct dentry *)0;
#line 1535
  ret = 0;
#line 1537
  if ((flags & 64U) != 0U) {
#line 1538
    return (-10);
  } else {

  }
#line 1540
  if ((flags & 258U) != 256U) {
#line 1541
    goto no_open;
  } else {

  }
  {
#line 1542
  tmp = d_mountpoint((struct dentry  const  *)dentry);
  }
#line 1542
  if ((int )tmp) {
#line 1543
    goto no_open;
  } else {

  }
  {
#line 1544
  tmp___0 = NFS_SB((struct super_block  const  *)dentry->d_sb);
  }
#line 1544
  if ((tmp___0->caps & 131072U) != 0U) {
#line 1545
    goto no_open;
  } else {

  }
  {
#line 1547
  inode = dentry->d_inode;
#line 1548
  parent = dget_parent(dentry);
#line 1549
  dir = parent->d_inode;
  }
#line 1554
  if ((unsigned long )inode == (unsigned long )((struct inode *)0)) {
    {
#line 1555
    tmp___1 = nfs_neg_need_reval(dir, dentry, flags);
    }
#line 1555
    if (tmp___1 == 0) {
#line 1556
      ret = 1;
    } else {

    }
#line 1557
    goto out;
  } else {

  }
#line 1561
  if (((int )inode->i_mode & 61440) != 32768) {
#line 1562
    goto no_open_dput;
  } else {

  }
#line 1564
  if ((flags & 1024U) != 0U) {
#line 1565
    goto no_open_dput;
  } else {

  }
#line 1568
  ret = 1;
  out: 
  {
#line 1571
  dput(parent);
  }
#line 1572
  return (ret);
  no_open_dput: 
  {
#line 1575
  dput(parent);
  }
  no_open: 
  {
#line 1577
  tmp___2 = nfs_lookup_revalidate(dentry, flags);
  }
#line 1577
  return (tmp___2);
}
}
#line 1585 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_instantiate(struct dentry *dentry , struct nfs_fh *fhandle , struct nfs_fattr *fattr ,
                    struct nfs4_label *label ) 
{ 
  struct dentry *parent ;
  struct dentry *tmp ;
  struct inode *dir ;
  struct inode *inode ;
  int error ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  unsigned long tmp___1 ;
  struct nfs_server *server ;
  struct nfs_server *tmp___2 ;
  long tmp___3 ;
  bool tmp___4 ;

  {
  {
#line 1589
  tmp = dget_parent(dentry);
#line 1589
  parent = tmp;
#line 1590
  dir = parent->d_inode;
#line 1592
  error = -13;
#line 1594
  d_drop(dentry);
  }
#line 1597
  if ((unsigned long )dentry->d_inode != (unsigned long )((struct inode *)0)) {
#line 1598
    goto out;
  } else {

  }
#line 1599
  if ((unsigned int )fhandle->size == 0U) {
    {
#line 1600
    tmp___0 = NFS_PROTO((struct inode  const  *)dir);
#line 1600
    error = (*(tmp___0->lookup))(dir, & dentry->d_name, fhandle, fattr, (struct nfs4_label *)0);
    }
#line 1601
    if (error != 0) {
#line 1602
      goto out_error;
    } else {

    }
  } else {

  }
  {
#line 1604
  tmp___1 = nfs_save_change_attribute(dir);
#line 1604
  nfs_set_verifier(dentry, tmp___1);
  }
#line 1605
  if ((fattr->valid & 162943U) == 0U) {
    {
#line 1606
    tmp___2 = NFS_SB((struct super_block  const  *)dentry->d_sb);
#line 1606
    server = tmp___2;
#line 1607
    error = (*(((server->nfs_client)->rpc_ops)->getattr))(server, fhandle, fattr,
                                                          (struct nfs4_label *)0);
    }
#line 1608
    if (error < 0) {
#line 1609
      goto out_error;
    } else {

    }
  } else {

  }
  {
#line 1611
  inode = nfs_fhget(dentry->d_sb, fhandle, fattr, label);
#line 1612
  tmp___3 = PTR_ERR((void const   *)inode);
#line 1612
  error = (int )tmp___3;
#line 1613
  tmp___4 = IS_ERR((void const   *)inode);
  }
#line 1613
  if ((int )tmp___4) {
#line 1614
    goto out_error;
  } else {

  }
  {
#line 1615
  d_add(dentry, inode);
  }
  out: 
  {
#line 1617
  dput(parent);
  }
#line 1618
  return (0);
  out_error: 
  {
#line 1620
  nfs_mark_for_revalidate(dir);
#line 1621
  dput(parent);
  }
#line 1622
  return (error);
}
}
#line 1624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_instantiate[16U]  = 
#line 1624
  {      'n',      'f',      's',      '_', 
        'i',      'n',      's',      't', 
        'a',      'n',      't',      'i', 
        'a',      't',      'e',      '\000'};
#line 1624
struct kernel_symbol  const  __ksymtab_nfs_instantiate ;
#line 1624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_instantiate  =    {(unsigned long )(& nfs_instantiate), (char const   *)(& __kstrtab_nfs_instantiate)};
#line 1632 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_create(struct inode *dir , struct dentry *dentry , umode_t mode , bool excl ) 
{ 
  struct iattr attr ;
  int open_flags ;
  int error ;
  long tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;

  {
  {
#line 1636
  open_flags = (int )excl ? 192 : 64;
#line 1639
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1639
  if (tmp != 0L) {
    {
#line 1639
    printk("\001dNFS: create(%s/%lu), %pd\n", (char *)(& (dir->i_sb)->s_id), dir->i_ino,
           dentry);
    }
  } else {

  }
  {
#line 1642
  attr.ia_mode = mode;
#line 1643
  attr.ia_valid = 1U;
#line 1645
  trace_nfs_create_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                         (unsigned int )open_flags);
#line 1646
  tmp___0 = NFS_PROTO((struct inode  const  *)dir);
#line 1646
  error = (*(tmp___0->create))(dir, dentry, & attr, open_flags);
#line 1647
  trace_nfs_create_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                        (unsigned int )open_flags, error);
  }
#line 1648
  if (error != 0) {
#line 1649
    goto out_err;
  } else {

  }
#line 1650
  return (0);
  out_err: 
  {
#line 1652
  d_drop(dentry);
  }
#line 1653
  return (error);
}
}
#line 1655 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_create[11U]  = 
#line 1655
  {      'n',      'f',      's',      '_', 
        'c',      'r',      'e',      'a', 
        't',      'e',      '\000'};
#line 1655
struct kernel_symbol  const  __ksymtab_nfs_create ;
#line 1655 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_create  =    {(unsigned long )(& nfs_create), (char const   *)(& __kstrtab_nfs_create)};
#line 1661 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_mknod(struct inode *dir , struct dentry *dentry , umode_t mode , dev_t rdev ) 
{ 
  struct iattr attr ;
  int status ;
  long tmp ;
  int tmp___0 ;
  struct nfs_rpc_ops  const  *tmp___1 ;

  {
  {
#line 1666
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1666
  if (tmp != 0L) {
    {
#line 1666
    printk("\001dNFS: mknod(%s/%lu), %pd\n", (char *)(& (dir->i_sb)->s_id), dir->i_ino,
           dentry);
    }
  } else {

  }
  {
#line 1669
  tmp___0 = new_valid_dev(rdev);
  }
#line 1669
  if (tmp___0 == 0) {
#line 1670
    return (-22);
  } else {

  }
  {
#line 1672
  attr.ia_mode = mode;
#line 1673
  attr.ia_valid = 1U;
#line 1675
  trace_nfs_mknod_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry);
#line 1676
  tmp___1 = NFS_PROTO((struct inode  const  *)dir);
#line 1676
  status = (*(tmp___1->mknod))(dir, dentry, & attr, rdev);
#line 1677
  trace_nfs_mknod_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                       status);
  }
#line 1678
  if (status != 0) {
#line 1679
    goto out_err;
  } else {

  }
#line 1680
  return (0);
  out_err: 
  {
#line 1682
  d_drop(dentry);
  }
#line 1683
  return (status);
}
}
#line 1685 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_mknod[10U]  = 
#line 1685
  {      'n',      'f',      's',      '_', 
        'm',      'k',      'n',      'o', 
        'd',      '\000'};
#line 1685
struct kernel_symbol  const  __ksymtab_nfs_mknod ;
#line 1685 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_mknod  =    {(unsigned long )(& nfs_mknod), (char const   *)(& __kstrtab_nfs_mknod)};
#line 1690 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_mkdir(struct inode *dir , struct dentry *dentry , umode_t mode ) 
{ 
  struct iattr attr ;
  int error ;
  long tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;

  {
  {
#line 1695
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1695
  if (tmp != 0L) {
    {
#line 1695
    printk("\001dNFS: mkdir(%s/%lu), %pd\n", (char *)(& (dir->i_sb)->s_id), dir->i_ino,
           dentry);
    }
  } else {

  }
  {
#line 1698
  attr.ia_valid = 1U;
#line 1699
  attr.ia_mode = (umode_t )((unsigned int )mode | 16384U);
#line 1701
  trace_nfs_mkdir_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry);
#line 1702
  tmp___0 = NFS_PROTO((struct inode  const  *)dir);
#line 1702
  error = (*(tmp___0->mkdir))(dir, dentry, & attr);
#line 1703
  trace_nfs_mkdir_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                       error);
  }
#line 1704
  if (error != 0) {
#line 1705
    goto out_err;
  } else {

  }
#line 1706
  return (0);
  out_err: 
  {
#line 1708
  d_drop(dentry);
  }
#line 1709
  return (error);
}
}
#line 1711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_mkdir[10U]  = 
#line 1711
  {      'n',      'f',      's',      '_', 
        'm',      'k',      'd',      'i', 
        'r',      '\000'};
#line 1711
struct kernel_symbol  const  __ksymtab_nfs_mkdir ;
#line 1711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_mkdir  =    {(unsigned long )(& nfs_mkdir), (char const   *)(& __kstrtab_nfs_mkdir)};
#line 1713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_dentry_handle_enoent(struct dentry *dentry ) 
{ 
  int tmp ;

  {
#line 1715
  if ((unsigned long )dentry->d_inode != (unsigned long )((struct inode *)0)) {
    {
#line 1715
    tmp = d_unhashed((struct dentry  const  *)dentry);
    }
#line 1715
    if (tmp == 0) {
      {
#line 1716
      d_delete(dentry);
      }
    } else {

    }
  } else {

  }
#line 1717
  return;
}
}
#line 1719 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_rmdir(struct inode *dir , struct dentry *dentry ) 
{ 
  int error ;
  long tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  struct nfs_rpc_ops  const  *tmp___1 ;

  {
  {
#line 1723
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1723
  if (tmp != 0L) {
    {
#line 1723
    printk("\001dNFS: rmdir(%s/%lu), %pd\n", (char *)(& (dir->i_sb)->s_id), dir->i_ino,
           dentry);
    }
  } else {

  }
  {
#line 1726
  trace_nfs_rmdir_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry);
  }
#line 1727
  if ((unsigned long )dentry->d_inode != (unsigned long )((struct inode *)0)) {
    {
#line 1728
    nfs_wait_on_sillyrename(dentry);
#line 1729
    tmp___0 = NFS_PROTO((struct inode  const  *)dir);
#line 1729
    error = (*(tmp___0->rmdir))(dir, & dentry->d_name);
    }
    {
#line 1732
    if (error == 0) {
#line 1732
      goto case_0;
    } else {

    }
#line 1735
    if (error == -2) {
#line 1735
      goto case_neg_2;
    } else {

    }
#line 1731
    goto switch_break;
    case_0: /* CIL Label */ 
    {
#line 1733
    clear_nlink(dentry->d_inode);
    }
#line 1734
    goto ldv_57373;
    case_neg_2: /* CIL Label */ 
    {
#line 1736
    nfs_dentry_handle_enoent(dentry);
    }
    switch_break: /* CIL Label */ ;
    }
    ldv_57373: ;
  } else {
    {
#line 1739
    tmp___1 = NFS_PROTO((struct inode  const  *)dir);
#line 1739
    error = (*(tmp___1->rmdir))(dir, & dentry->d_name);
    }
  }
  {
#line 1740
  trace_nfs_rmdir_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                       error);
  }
#line 1742
  return (error);
}
}
#line 1744 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_rmdir[10U]  = 
#line 1744
  {      'n',      'f',      's',      '_', 
        'r',      'm',      'd',      'i', 
        'r',      '\000'};
#line 1744
struct kernel_symbol  const  __ksymtab_nfs_rmdir ;
#line 1744 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_rmdir  =    {(unsigned long )(& nfs_rmdir), (char const   *)(& __kstrtab_nfs_rmdir)};
#line 1753 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_safe_remove(struct dentry *dentry ) 
{ 
  struct inode *dir ;
  struct inode *inode ;
  int error ;
  long tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  struct nfs_rpc_ops  const  *tmp___1 ;
  struct nfs_rpc_ops  const  *tmp___2 ;

  {
  {
#line 1755
  dir = (dentry->d_parent)->d_inode;
#line 1756
  inode = dentry->d_inode;
#line 1757
  error = -16;
#line 1759
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1759
  if (tmp != 0L) {
    {
#line 1759
    printk("\001dNFS: safe_remove(%pd2)\n", dentry);
    }
  } else {

  }
#line 1762
  if ((dentry->d_flags & 4096U) != 0U) {
#line 1763
    error = 0;
#line 1764
    goto out;
  } else {

  }
  {
#line 1767
  trace_nfs_remove_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry);
  }
#line 1768
  if ((unsigned long )inode != (unsigned long )((struct inode *)0)) {
    {
#line 1769
    tmp___0 = NFS_PROTO((struct inode  const  *)inode);
#line 1769
    (*(tmp___0->return_delegation))(inode);
#line 1770
    tmp___1 = NFS_PROTO((struct inode  const  *)dir);
#line 1770
    error = (*(tmp___1->remove))(dir, & dentry->d_name);
    }
#line 1771
    if (error == 0) {
      {
#line 1772
      nfs_drop_nlink(inode);
      }
    } else {

    }
  } else {
    {
#line 1774
    tmp___2 = NFS_PROTO((struct inode  const  *)dir);
#line 1774
    error = (*(tmp___2->remove))(dir, & dentry->d_name);
    }
  }
#line 1775
  if (error == -2) {
    {
#line 1776
    nfs_dentry_handle_enoent(dentry);
    }
  } else {

  }
  {
#line 1777
  trace_nfs_remove_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                        error);
  }
  out: ;
#line 1779
  return (error);
}
}
#line 1787 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_unlink(struct inode *dir , struct dentry *dentry ) 
{ 
  int error ;
  int need_rehash ;
  long tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;

  {
  {
#line 1790
  need_rehash = 0;
#line 1792
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1792
  if (tmp != 0L) {
    {
#line 1792
    printk("\001dNFS: unlink(%s/%lu, %pd)\n", (char *)(& (dir->i_sb)->s_id), dir->i_ino,
           dentry);
    }
  } else {

  }
  {
#line 1795
  trace_nfs_unlink_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry);
#line 1796
  ldv_spin_lock_82(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 1797
  tmp___0 = d_count((struct dentry  const  *)dentry);
  }
#line 1797
  if (tmp___0 > 1U) {
    {
#line 1798
    ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 1800
    write_inode_now(dentry->d_inode, 0);
#line 1801
    error = nfs_sillyrename(dir, dentry);
    }
#line 1802
    goto out;
  } else {

  }
  {
#line 1804
  tmp___1 = d_unhashed((struct dentry  const  *)dentry);
  }
#line 1804
  if (tmp___1 == 0) {
    {
#line 1805
    __d_drop(dentry);
#line 1806
    need_rehash = 1;
    }
  } else {

  }
  {
#line 1808
  ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 1809
  error = nfs_safe_remove(dentry);
  }
#line 1810
  if (error == 0 || error == -2) {
    {
#line 1811
    tmp___2 = nfs_save_change_attribute(dir);
#line 1811
    nfs_set_verifier(dentry, tmp___2);
    }
  } else
#line 1812
  if (need_rehash != 0) {
    {
#line 1813
    d_rehash(dentry);
    }
  } else {

  }
  out: 
  {
#line 1815
  trace_nfs_unlink_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                        error);
  }
#line 1816
  return (error);
}
}
#line 1818 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_unlink[11U]  = 
#line 1818
  {      'n',      'f',      's',      '_', 
        'u',      'n',      'l',      'i', 
        'n',      'k',      '\000'};
#line 1818
struct kernel_symbol  const  __ksymtab_nfs_unlink ;
#line 1818 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_unlink  =    {(unsigned long )(& nfs_unlink), (char const   *)(& __kstrtab_nfs_unlink)};
#line 1860
extern void __compiletime_assert_1860(void) ;
#line 1835 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_symlink(struct inode *dir , struct dentry *dentry , char const   *symname ) 
{ 
  struct page *page ;
  char *kaddr ;
  struct iattr attr ;
  unsigned int pathlen ;
  size_t tmp ;
  int error ;
  long tmp___0 ;
  void *tmp___1 ;
  bool __cond ;
  struct nfs_rpc_ops  const  *tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;

  {
  {
#line 1840
  tmp = strlen(symname);
#line 1840
  pathlen = (unsigned int )tmp;
#line 1843
  tmp___0 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1843
  if (tmp___0 != 0L) {
    {
#line 1843
    printk("\001dNFS: symlink(%s/%lu, %pd, %s)\n", (char *)(& (dir->i_sb)->s_id),
           dir->i_ino, dentry, symname);
    }
  } else {

  }
#line 1846
  if (pathlen > 4096U) {
#line 1847
    return (-36);
  } else {

  }
  {
#line 1849
  attr.ia_mode = 41471U;
#line 1850
  attr.ia_valid = 1U;
#line 1852
  page = alloc_pages(131282U, 0U);
  }
#line 1853
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1854
    return (-12);
  } else {

  }
  {
#line 1856
  tmp___1 = kmap_atomic(page);
#line 1856
  kaddr = (char *)tmp___1;
#line 1857
  memcpy((void *)kaddr, (void const   *)symname, (size_t )pathlen);
  }
#line 1858
  if (pathlen <= 4095U) {
    {
#line 1859
    memset((void *)(kaddr + (unsigned long )pathlen), 0, 4096UL - (unsigned long )pathlen);
    }
  } else {

  }
#line 1860
  __cond = 0;
#line 1860
  if ((int )__cond) {
    {
#line 1860
    __compiletime_assert_1860();
    }
  } else {

  }
  {
#line 1860
  __kunmap_atomic((void *)kaddr);
#line 1862
  trace_nfs_symlink_enter((struct inode  const  *)dir, (struct dentry  const  *)dentry);
#line 1863
  tmp___2 = NFS_PROTO((struct inode  const  *)dir);
#line 1863
  error = (*(tmp___2->symlink))(dir, dentry, page, pathlen, & attr);
#line 1864
  trace_nfs_symlink_exit((struct inode  const  *)dir, (struct dentry  const  *)dentry,
                         error);
  }
#line 1865
  if (error != 0) {
    {
#line 1866
    tmp___3 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
    }
#line 1866
    if (tmp___3 != 0L) {
      {
#line 1866
      printk("\001dNFS: symlink(%s/%lu, %pd, %s) error %d\n", (char *)(& (dir->i_sb)->s_id),
             dir->i_ino, dentry, symname, error);
      }
    } else {

    }
    {
#line 1869
    d_drop(dentry);
#line 1870
    __free_pages(page, 0U);
    }
#line 1871
    return (error);
  } else {

  }
  {
#line 1878
  tmp___4 = add_to_page_cache_lru(page, (dentry->d_inode)->i_mapping, 0UL, 208U);
  }
#line 1878
  if (tmp___4 == 0) {
    {
#line 1880
    SetPageUptodate(page);
#line 1881
    unlock_page(page);
#line 1886
    put_page(page);
    }
  } else {
    {
#line 1888
    __free_pages(page, 0U);
    }
  }
#line 1890
  return (0);
}
}
#line 1892 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_symlink[12U]  = 
#line 1892
  {      'n',      'f',      's',      '_', 
        's',      'y',      'm',      'l', 
        'i',      'n',      'k',      '\000'};
#line 1892
struct kernel_symbol  const  __ksymtab_nfs_symlink ;
#line 1892 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_symlink  =    {(unsigned long )(& nfs_symlink), (char const   *)(& __kstrtab_nfs_symlink)};
#line 1895 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_link(struct dentry *old_dentry , struct inode *dir , struct dentry *dentry ) 
{ 
  struct inode *inode ;
  int error ;
  long tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  struct nfs_rpc_ops  const  *tmp___1 ;

  {
  {
#line 1897
  inode = old_dentry->d_inode;
#line 1900
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1900
  if (tmp != 0L) {
    {
#line 1900
    printk("\001dNFS: link(%pd2 -> %pd2)\n", old_dentry, dentry);
    }
  } else {

  }
  {
#line 1903
  trace_nfs_link_enter((struct inode  const  *)inode, (struct inode  const  *)dir,
                       (struct dentry  const  *)dentry);
#line 1904
  tmp___0 = NFS_PROTO((struct inode  const  *)inode);
#line 1904
  (*(tmp___0->return_delegation))(inode);
#line 1906
  d_drop(dentry);
#line 1907
  tmp___1 = NFS_PROTO((struct inode  const  *)dir);
#line 1907
  error = (*(tmp___1->link))(inode, dir, & dentry->d_name);
  }
#line 1908
  if (error == 0) {
    {
#line 1909
    ihold(inode);
#line 1910
    d_add(dentry, inode);
    }
  } else {

  }
  {
#line 1912
  trace_nfs_link_exit((struct inode  const  *)inode, (struct inode  const  *)dir,
                      (struct dentry  const  *)dentry, error);
  }
#line 1913
  return (error);
}
}
#line 1915 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_link[9U]  = 
#line 1915
  {      'n',      'f',      's',      '_', 
        'l',      'i',      'n',      'k', 
        '\000'};
#line 1915
struct kernel_symbol  const  __ksymtab_nfs_link ;
#line 1915 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_link  =    {(unsigned long )(& nfs_link), (char const   *)(& __kstrtab_nfs_link)};
#line 1941 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_rename(struct inode *old_dir , struct dentry *old_dentry , struct inode *new_dir ,
               struct dentry *new_dentry ) 
{ 
  struct inode *old_inode ;
  struct inode *new_inode___0 ;
  struct dentry *dentry ;
  struct dentry *rehash ;
  struct rpc_task *task ;
  int error ;
  unsigned int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int err ;
  unsigned int tmp___2 ;
  struct nfs_rpc_ops  const  *tmp___3 ;
  struct nfs_rpc_ops  const  *tmp___4 ;
  long tmp___5 ;
  bool tmp___6 ;
  unsigned long tmp___7 ;

  {
  {
#line 1944
  old_inode = old_dentry->d_inode;
#line 1945
  new_inode___0 = new_dentry->d_inode;
#line 1946
  dentry = (struct dentry *)0;
#line 1946
  rehash = (struct dentry *)0;
#line 1948
  error = -16;
#line 1950
  tmp___0 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1950
  if (tmp___0 != 0L) {
    {
#line 1950
    tmp = d_count((struct dentry  const  *)new_dentry);
#line 1950
    printk("\001dNFS: rename(%pd2 -> %pd2, ct=%d)\n", old_dentry, new_dentry, tmp);
    }
  } else {

  }
  {
#line 1954
  trace_nfs_rename_enter((struct inode  const  *)old_dir, (struct dentry  const  *)old_dentry,
                         (struct inode  const  *)new_dir, (struct dentry  const  *)new_dentry);
  }
#line 1961
  if ((unsigned long )new_inode___0 != (unsigned long )((struct inode *)0) && ((int )new_inode___0->i_mode & 61440) != 16384) {
    {
#line 1966
    tmp___1 = d_unhashed((struct dentry  const  *)new_dentry);
    }
#line 1966
    if (tmp___1 == 0) {
      {
#line 1967
      d_drop(new_dentry);
#line 1968
      rehash = new_dentry;
      }
    } else {

    }
    {
#line 1971
    tmp___2 = d_count((struct dentry  const  *)new_dentry);
    }
#line 1971
    if (tmp___2 > 2U) {
      {
#line 1975
      dentry = d_alloc(new_dentry->d_parent, (struct qstr  const  *)(& new_dentry->d_name));
      }
#line 1977
      if ((unsigned long )dentry == (unsigned long )((struct dentry *)0)) {
#line 1978
        goto out;
      } else {

      }
      {
#line 1981
      err = nfs_sillyrename(new_dir, new_dentry);
      }
#line 1982
      if (err != 0) {
#line 1983
        goto out;
      } else {

      }
#line 1985
      new_dentry = dentry;
#line 1986
      rehash = (struct dentry *)0;
#line 1987
      new_inode___0 = (struct inode *)0;
    } else {

    }
  } else {

  }
  {
#line 1991
  tmp___3 = NFS_PROTO((struct inode  const  *)old_inode);
#line 1991
  (*(tmp___3->return_delegation))(old_inode);
  }
#line 1992
  if ((unsigned long )new_inode___0 != (unsigned long )((struct inode *)0)) {
    {
#line 1993
    tmp___4 = NFS_PROTO((struct inode  const  *)new_inode___0);
#line 1993
    (*(tmp___4->return_delegation))(new_inode___0);
    }
  } else {

  }
  {
#line 1995
  task = nfs_async_rename(old_dir, new_dir, old_dentry, new_dentry, (void (*)(struct rpc_task * ,
                                                                              struct nfs_renamedata * ))0);
#line 1996
  tmp___6 = IS_ERR((void const   *)task);
  }
#line 1996
  if ((int )tmp___6) {
    {
#line 1997
    tmp___5 = PTR_ERR((void const   *)task);
#line 1997
    error = (int )tmp___5;
    }
#line 1998
    goto out;
  } else {

  }
  {
#line 2001
  error = rpc_wait_for_completion_task(task);
  }
#line 2002
  if (error == 0) {
#line 2003
    error = task->tk_status;
  } else {

  }
  {
#line 2004
  rpc_put_task(task);
#line 2005
  nfs_mark_for_revalidate(old_inode);
  }
  out: ;
#line 2007
  if ((unsigned long )rehash != (unsigned long )((struct dentry *)0)) {
    {
#line 2008
    d_rehash(rehash);
    }
  } else {

  }
  {
#line 2009
  trace_nfs_rename_exit((struct inode  const  *)old_dir, (struct dentry  const  *)old_dentry,
                        (struct inode  const  *)new_dir, (struct dentry  const  *)new_dentry,
                        error);
  }
#line 2011
  if (error == 0) {
#line 2012
    if ((unsigned long )new_inode___0 != (unsigned long )((struct inode *)0)) {
      {
#line 2013
      nfs_drop_nlink(new_inode___0);
      }
    } else {

    }
    {
#line 2014
    d_move(old_dentry, new_dentry);
#line 2015
    tmp___7 = nfs_save_change_attribute(new_dir);
#line 2015
    nfs_set_verifier(new_dentry, tmp___7);
    }
  } else
#line 2017
  if (error == -2) {
    {
#line 2018
    nfs_dentry_handle_enoent(old_dentry);
    }
  } else {

  }
#line 2021
  if ((unsigned long )dentry != (unsigned long )((struct dentry *)0)) {
    {
#line 2022
    dput(dentry);
    }
  } else {

  }
#line 2023
  return (error);
}
}
#line 2025 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_rename[11U]  = 
#line 2025
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'n',      'a', 
        'm',      'e',      '\000'};
#line 2025
struct kernel_symbol  const  __ksymtab_nfs_rename ;
#line 2025 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_rename  =    {(unsigned long )(& nfs_rename), (char const   *)(& __kstrtab_nfs_rename)};
#line 2027 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static spinlock_t nfs_access_lru_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "nfs_access_lru_lock",
                                                     0, 0UL}}}};
#line 2028 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static struct list_head nfs_access_lru_list  =    {& nfs_access_lru_list, & nfs_access_lru_list};
#line 2029 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static atomic_long_t nfs_access_nr_entries  ;
#line 2031 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_access_free_entry(struct nfs_access_entry *entry ) 
{ 


  {
  {
#line 2033
  put_rpccred(entry->cred);
#line 2034
  kfree((void const   *)entry);
#line 2035
  __asm__  volatile   ("": : : "memory");
#line 2036
  atomic_long_dec(& nfs_access_nr_entries);
#line 2037
  __asm__  volatile   ("": : : "memory");
  }
#line 2038
  return;
}
}
#line 2040 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_access_free_list(struct list_head *head ) 
{ 
  struct nfs_access_entry *cache ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 2044
  goto ldv_57482;
  ldv_57481: 
  {
#line 2045
  __mptr = (struct list_head  const  *)head->next;
#line 2045
  cache = (struct nfs_access_entry *)((char *)__mptr + 0xffffffffffffffe8UL);
#line 2046
  list_del(& cache->lru);
#line 2047
  nfs_access_free_entry(cache);
  }
  ldv_57482: 
  {
#line 2044
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 2044
  if (tmp == 0) {
#line 2046
    goto ldv_57481;
  } else {

  }

#line 2051
  return;
}
}
#line 2052 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
unsigned long nfs_access_cache_scan(struct shrinker *shrink , struct shrink_control *sc ) 
{ 
  struct list_head head ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *next ;
  struct nfs_access_entry *cache ;
  int nr_to_scan ;
  gfp_t gfp_mask ;
  long freed ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct inode *inode ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 2054
  head.next = & head;
#line 2054
  head.prev = & head;
#line 2057
  nr_to_scan = (int )sc->nr_to_scan;
#line 2058
  gfp_mask = sc->gfp_mask;
#line 2059
  freed = 0L;
#line 2061
  if ((gfp_mask & 208U) != 208U) {
#line 2062
    return (0xffffffffffffffffUL);
  } else {

  }
  {
#line 2064
  ldv_spin_lock_85(& nfs_access_lru_lock);
#line 2065
  __mptr = (struct list_head  const  *)nfs_access_lru_list.next;
#line 2065
  nfsi = (struct nfs_inode *)((char *)__mptr + 0xffffffffffffff20UL);
#line 2065
  __mptr___0 = (struct list_head  const  *)nfsi->access_cache_inode_lru.next;
#line 2065
  next = (struct nfs_inode *)((char *)__mptr___0 + 0xffffffffffffff20UL);
  }
#line 2065
  goto ldv_57507;
  ldv_57506: 
#line 2068
  tmp = nr_to_scan;
#line 2068
  nr_to_scan = nr_to_scan - 1;
#line 2068
  if (tmp == 0) {
#line 2069
    goto ldv_57502;
  } else {

  }
  {
#line 2070
  inode = & nfsi->vfs_inode;
#line 2071
  ldv_spin_lock_72(& inode->i_lock);
#line 2072
  tmp___0 = list_empty((struct list_head  const  *)(& nfsi->access_cache_entry_lru));
  }
#line 2072
  if (tmp___0 != 0) {
#line 2073
    goto remove_lru_entry;
  } else {

  }
  {
#line 2074
  __mptr___1 = (struct list_head  const  *)nfsi->access_cache_entry_lru.next;
#line 2074
  cache = (struct nfs_access_entry *)((char *)__mptr___1 + 0xffffffffffffffe8UL);
#line 2076
  list_move(& cache->lru, & head);
#line 2077
  rb_erase(& cache->rb_node, & nfsi->access_cache);
#line 2078
  freed = freed + 1L;
#line 2079
  tmp___1 = list_empty((struct list_head  const  *)(& nfsi->access_cache_entry_lru));
  }
#line 2079
  if (tmp___1 == 0) {
    {
#line 2080
    list_move_tail(& nfsi->access_cache_inode_lru, & nfs_access_lru_list);
    }
  } else {
    remove_lru_entry: 
    {
#line 2084
    list_del_init(& nfsi->access_cache_inode_lru);
#line 2085
    __asm__  volatile   ("": : : "memory");
#line 2086
    clear_bit(2L, (unsigned long volatile   *)(& nfsi->flags));
#line 2087
    __asm__  volatile   ("": : : "memory");
    }
  }
  {
#line 2089
  ldv_spin_unlock_73(& inode->i_lock);
#line 2065
  nfsi = next;
#line 2065
  __mptr___2 = (struct list_head  const  *)next->access_cache_inode_lru.next;
#line 2065
  next = (struct nfs_inode *)((char *)__mptr___2 + 0xffffffffffffff20UL);
  }
  ldv_57507: ;
#line 2065
  if ((unsigned long )(& nfsi->access_cache_inode_lru) != (unsigned long )(& nfs_access_lru_list)) {
#line 2067
    goto ldv_57506;
  } else {

  }
  ldv_57502: 
  {
#line 2091
  ldv_spin_unlock_88(& nfs_access_lru_lock);
#line 2092
  nfs_access_free_list(& head);
  }
#line 2093
  return ((unsigned long )freed);
}
}
#line 2097 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
unsigned long nfs_access_cache_count(struct shrinker *shrink , struct shrink_control *sc ) 
{ 
  long tmp ;
  unsigned long tmp___0 ;

  {
  {
#line 2099
  tmp = atomic_long_read(& nfs_access_nr_entries);
#line 2099
  tmp___0 = vfs_pressure_ratio((unsigned long )tmp);
  }
#line 2099
  return (tmp___0);
}
}
#line 2102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void __nfs_access_zap_cache(struct nfs_inode *nfsi , struct list_head *head ) 
{ 
  struct rb_root *root_node ;
  struct rb_node *n ;
  struct nfs_access_entry *entry ;
  struct rb_node  const  *__mptr ;

  {
#line 2104
  root_node = & nfsi->access_cache;
#line 2109
  goto ldv_57522;
  ldv_57521: 
  {
#line 2110
  __mptr = (struct rb_node  const  *)n;
#line 2110
  entry = (struct nfs_access_entry *)__mptr;
#line 2111
  rb_erase(n, root_node);
#line 2112
  list_move(& entry->lru, head);
  }
  ldv_57522: 
  {
#line 2109
  n = rb_first((struct rb_root  const  *)root_node);
  }
#line 2109
  if ((unsigned long )n != (unsigned long )((struct rb_node *)0)) {
#line 2111
    goto ldv_57521;
  } else {

  }
#line 2114
  nfsi->cache_validity = nfsi->cache_validity & 0xfffffffffffffff7UL;
#line 2115
  return;
}
}
#line 2117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
void nfs_access_zap_cache(struct inode *inode ) 
{ 
  struct list_head head ;
  struct nfs_inode *tmp ;
  int tmp___0 ;
  struct nfs_inode *tmp___1 ;
  struct nfs_inode *tmp___2 ;
  int tmp___3 ;
  struct nfs_inode *tmp___4 ;

  {
  {
#line 2119
  head.next = & head;
#line 2119
  head.prev = & head;
#line 2121
  tmp = NFS_I((struct inode  const  *)inode);
#line 2121
  tmp___0 = constant_test_bit(2L, (unsigned long const volatile   *)(& tmp->flags));
  }
#line 2121
  if (tmp___0 == 0) {
#line 2122
    return;
  } else {

  }
  {
#line 2124
  ldv_spin_lock_85(& nfs_access_lru_lock);
#line 2125
  tmp___2 = NFS_I((struct inode  const  *)inode);
#line 2125
  tmp___3 = test_and_set_bit(2L, (unsigned long volatile   *)(& tmp___2->flags));
  }
#line 2125
  if (tmp___3 != 0) {
    {
#line 2126
    tmp___1 = NFS_I((struct inode  const  *)inode);
#line 2126
    list_del_init(& tmp___1->access_cache_inode_lru);
    }
  } else {

  }
  {
#line 2128
  ldv_spin_lock_72(& inode->i_lock);
#line 2129
  tmp___4 = NFS_I((struct inode  const  *)inode);
#line 2129
  __nfs_access_zap_cache(tmp___4, & head);
#line 2130
  ldv_spin_unlock_73(& inode->i_lock);
#line 2131
  ldv_spin_unlock_88(& nfs_access_lru_lock);
#line 2132
  nfs_access_free_list(& head);
  }
#line 2133
  return;
}
}
#line 2134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_access_zap_cache[21U]  = 
#line 2134
  {      'n',      'f',      's',      '_', 
        'a',      'c',      'c',      'e', 
        's',      's',      '_',      'z', 
        'a',      'p',      '_',      'c', 
        'a',      'c',      'h',      'e', 
        '\000'};
#line 2134
struct kernel_symbol  const  __ksymtab_nfs_access_zap_cache ;
#line 2134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_access_zap_cache  =    {(unsigned long )(& nfs_access_zap_cache), (char const   *)(& __kstrtab_nfs_access_zap_cache)};
#line 2136 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static struct nfs_access_entry *nfs_access_search_rbtree(struct inode *inode , struct rpc_cred *cred ) 
{ 
  struct rb_node *n ;
  struct nfs_inode *tmp ;
  struct nfs_access_entry *entry ;
  struct rb_node  const  *__mptr ;

  {
  {
#line 2138
  tmp = NFS_I((struct inode  const  *)inode);
#line 2138
  n = tmp->access_cache.rb_node;
  }
#line 2141
  goto ldv_57544;
  ldv_57543: 
#line 2142
  __mptr = (struct rb_node  const  *)n;
#line 2142
  entry = (struct nfs_access_entry *)__mptr;
#line 2144
  if ((unsigned long )cred < (unsigned long )entry->cred) {
#line 2145
    n = n->rb_left;
  } else
#line 2146
  if ((unsigned long )cred > (unsigned long )entry->cred) {
#line 2147
    n = n->rb_right;
  } else {
#line 2149
    return (entry);
  }
  ldv_57544: ;
#line 2141
  if ((unsigned long )n != (unsigned long )((struct rb_node *)0)) {
#line 2143
    goto ldv_57543;
  } else {

  }

#line 2151
  return ((struct nfs_access_entry *)0);
}
}
#line 2154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_access_get_cached(struct inode *inode , struct rpc_cred *cred , struct nfs_access_entry *res ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct nfs_access_entry *cache ;
  int err ;
  int tmp___0 ;

  {
  {
#line 2156
  tmp = NFS_I((struct inode  const  *)inode);
#line 2156
  nfsi = tmp;
#line 2158
  err = -2;
#line 2160
  ldv_spin_lock_72(& inode->i_lock);
  }
#line 2161
  if ((nfsi->cache_validity & 8UL) != 0UL) {
#line 2162
    goto out_zap;
  } else {

  }
  {
#line 2163
  cache = nfs_access_search_rbtree(inode, cred);
  }
#line 2164
  if ((unsigned long )cache == (unsigned long )((struct nfs_access_entry *)0)) {
#line 2165
    goto out;
  } else {

  }
  {
#line 2166
  tmp___0 = nfs_have_delegated_attributes(inode);
  }
#line 2167
  if (tmp___0 == 0 && ((long )((unsigned long )jiffies - cache->jiffies) < 0L || (long )((unsigned long )jiffies - (cache->jiffies + nfsi->attrtimeo)) >= 0L)) {
#line 2168
    goto out_stale;
  } else {

  }
  {
#line 2169
  res->jiffies = cache->jiffies;
#line 2170
  res->cred = cache->cred;
#line 2171
  res->mask = cache->mask;
#line 2172
  list_move_tail(& cache->lru, & nfsi->access_cache_entry_lru);
#line 2173
  err = 0;
  }
  out: 
  {
#line 2175
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 2176
  return (err);
  out_stale: 
  {
#line 2178
  rb_erase(& cache->rb_node, & nfsi->access_cache);
#line 2179
  list_del(& cache->lru);
#line 2180
  ldv_spin_unlock_73(& inode->i_lock);
#line 2181
  nfs_access_free_entry(cache);
  }
#line 2182
  return (-2);
  out_zap: 
  {
#line 2184
  ldv_spin_unlock_73(& inode->i_lock);
#line 2185
  nfs_access_zap_cache(inode);
  }
#line 2186
  return (-2);
}
}
#line 2189 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static void nfs_access_add_rbtree(struct inode *inode , struct nfs_access_entry *set ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct rb_root *root_node ;
  struct rb_node **p ;
  struct rb_node *parent ;
  struct nfs_access_entry *entry ;
  struct rb_node  const  *__mptr ;

  {
  {
#line 2191
  tmp = NFS_I((struct inode  const  *)inode);
#line 2191
  nfsi = tmp;
#line 2192
  root_node = & nfsi->access_cache;
#line 2193
  p = & root_node->rb_node;
#line 2194
  parent = (struct rb_node *)0;
#line 2197
  ldv_spin_lock_72(& inode->i_lock);
  }
#line 2198
  goto ldv_57582;
  ldv_57581: 
#line 2199
  parent = *p;
#line 2200
  __mptr = (struct rb_node  const  *)parent;
#line 2200
  entry = (struct nfs_access_entry *)__mptr;
#line 2202
  if ((unsigned long )set->cred < (unsigned long )entry->cred) {
#line 2203
    p = & parent->rb_left;
  } else
#line 2204
  if ((unsigned long )set->cred > (unsigned long )entry->cred) {
#line 2205
    p = & parent->rb_right;
  } else {
#line 2207
    goto found;
  }
  ldv_57582: ;
#line 2198
  if ((unsigned long )*p != (unsigned long )((struct rb_node *)0)) {
#line 2200
    goto ldv_57581;
  } else {

  }
  {
#line 2209
  rb_link_node(& set->rb_node, parent, p);
#line 2210
  rb_insert_color(& set->rb_node, root_node);
#line 2211
  list_add_tail(& set->lru, & nfsi->access_cache_entry_lru);
#line 2212
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 2213
  return;
  found: 
  {
#line 2215
  rb_replace_node(parent, & set->rb_node, root_node);
#line 2216
  list_add_tail(& set->lru, & nfsi->access_cache_entry_lru);
#line 2217
  list_del(& entry->lru);
#line 2218
  ldv_spin_unlock_73(& inode->i_lock);
#line 2219
  nfs_access_free_entry(entry);
  }
#line 2220
  return;
}
}
#line 2222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
void nfs_access_add_cache(struct inode *inode , struct nfs_access_entry *set ) 
{ 
  struct nfs_access_entry *cache ;
  void *tmp ;
  struct nfs_inode *tmp___0 ;
  struct nfs_inode *tmp___1 ;
  int tmp___2 ;
  struct nfs_inode *tmp___3 ;
  int tmp___4 ;

  {
  {
#line 2224
  tmp = kmalloc(64UL, 208U);
#line 2224
  cache = (struct nfs_access_entry *)tmp;
  }
#line 2225
  if ((unsigned long )cache == (unsigned long )((struct nfs_access_entry *)0)) {
#line 2226
    return;
  } else {

  }
  {
#line 2227
  cache->rb_node.__rb_parent_color = (unsigned long )(& cache->rb_node);
#line 2228
  cache->jiffies = set->jiffies;
#line 2229
  cache->cred = get_rpccred(set->cred);
#line 2230
  cache->mask = set->mask;
#line 2232
  nfs_access_add_rbtree(inode, cache);
#line 2235
  __asm__  volatile   ("": : : "memory");
#line 2236
  atomic_long_inc(& nfs_access_nr_entries);
#line 2237
  __asm__  volatile   ("": : : "memory");
#line 2240
  tmp___3 = NFS_I((struct inode  const  *)inode);
#line 2240
  tmp___4 = constant_test_bit(2L, (unsigned long const volatile   *)(& tmp___3->flags));
  }
#line 2240
  if (tmp___4 == 0) {
    {
#line 2241
    ldv_spin_lock_85(& nfs_access_lru_lock);
#line 2242
    tmp___1 = NFS_I((struct inode  const  *)inode);
#line 2242
    tmp___2 = test_and_set_bit(2L, (unsigned long volatile   *)(& tmp___1->flags));
    }
#line 2242
    if (tmp___2 == 0) {
      {
#line 2243
      tmp___0 = NFS_I((struct inode  const  *)inode);
#line 2243
      list_add_tail(& tmp___0->access_cache_inode_lru, & nfs_access_lru_list);
      }
    } else {

    }
    {
#line 2245
    ldv_spin_unlock_88(& nfs_access_lru_lock);
    }
  } else {

  }
#line 2247
  return;
}
}
#line 2248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_access_add_cache[21U]  = 
#line 2248
  {      'n',      'f',      's',      '_', 
        'a',      'c',      'c',      'e', 
        's',      's',      '_',      'a', 
        'd',      'd',      '_',      'c', 
        'a',      'c',      'h',      'e', 
        '\000'};
#line 2248
struct kernel_symbol  const  __ksymtab_nfs_access_add_cache ;
#line 2248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_access_add_cache  =    {(unsigned long )(& nfs_access_add_cache), (char const   *)(& __kstrtab_nfs_access_add_cache)};
#line 2250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
void nfs_access_set_mask(struct nfs_access_entry *entry , u32 access_result ) 
{ 


  {
#line 2252
  entry->mask = 0;
#line 2253
  if ((int )access_result & 1) {
#line 2254
    entry->mask = entry->mask | 4;
  } else {

  }
#line 2255
  if ((access_result & 28U) != 0U) {
#line 2257
    entry->mask = entry->mask | 2;
  } else {

  }
#line 2258
  if ((access_result & 34U) != 0U) {
#line 2259
    entry->mask = entry->mask | 1;
  } else {

  }
#line 2260
  return;
}
}
#line 2261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_access_set_mask[20U]  = 
#line 2261
  {      'n',      'f',      's',      '_', 
        'a',      'c',      'c',      'e', 
        's',      's',      '_',      's', 
        'e',      't',      '_',      'm', 
        'a',      's',      'k',      '\000'};
#line 2261
struct kernel_symbol  const  __ksymtab_nfs_access_set_mask ;
#line 2261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_access_set_mask  =    {(unsigned long )(& nfs_access_set_mask), (char const   *)(& __kstrtab_nfs_access_set_mask)};
#line 2263 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_do_access(struct inode *inode , struct rpc_cred *cred , int mask ) 
{ 
  struct nfs_access_entry cache ;
  int status ;
  struct nfs_rpc_ops  const  *tmp ;
  struct nfs_inode *tmp___0 ;

  {
  {
#line 2268
  trace_nfs_access_enter((struct inode  const  *)inode);
#line 2270
  status = nfs_access_get_cached(inode, cred, & cache);
  }
#line 2271
  if (status == 0) {
#line 2272
    goto out_cached;
  } else {

  }
  {
#line 2275
  cache.mask = 7;
#line 2276
  cache.cred = cred;
#line 2277
  cache.jiffies = jiffies;
#line 2278
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 2278
  status = (*(tmp->access))(inode, & cache);
  }
#line 2279
  if (status != 0) {
#line 2280
    if (status == -116) {
      {
#line 2281
      nfs_zap_caches(inode);
      }
#line 2282
      if (((int )inode->i_mode & 61440) != 16384) {
        {
#line 2283
        tmp___0 = NFS_I((struct inode  const  *)inode);
#line 2283
        set_bit(1L, (unsigned long volatile   *)(& tmp___0->flags));
        }
      } else {

      }
    } else {

    }
#line 2285
    goto out;
  } else {

  }
  {
#line 2287
  nfs_access_add_cache(inode, & cache);
  }
  out_cached: ;
#line 2289
  if (((mask & ~ cache.mask) & 7) != 0) {
#line 2290
    status = -13;
  } else {

  }
  out: 
  {
#line 2292
  trace_nfs_access_exit((struct inode  const  *)inode, status);
  }
#line 2293
  return (status);
}
}
#line 2296 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static int nfs_open_permission_mask(int openflags ) 
{ 
  int mask ;

  {
#line 2298
  mask = 0;
#line 2300
  if ((openflags & 32) != 0) {
#line 2302
    mask = 1;
  } else {
#line 2304
    if ((openflags & 3) != 1) {
#line 2305
      mask = mask | 4;
    } else {

    }
#line 2306
    if ((openflags & 3) != 0) {
#line 2307
      mask = mask | 2;
    } else {

    }
  }
#line 2310
  return (mask);
}
}
#line 2313 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_may_open(struct inode *inode , struct rpc_cred *cred , int openflags ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 2315
  tmp = nfs_open_permission_mask(openflags);
#line 2315
  tmp___0 = nfs_do_access(inode, cred, tmp);
  }
#line 2315
  return (tmp___0);
}
}
#line 2317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_may_open[13U]  = 
#line 2317
  {      'n',      'f',      's',      '_', 
        'm',      'a',      'y',      '_', 
        'o',      'p',      'e',      'n', 
        '\000'};
#line 2317
struct kernel_symbol  const  __ksymtab_nfs_may_open ;
#line 2317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_may_open  =    {(unsigned long )(& nfs_may_open), (char const   *)(& __kstrtab_nfs_may_open)};
#line 2319 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
int nfs_permission(struct inode *inode , int mask ) 
{ 
  struct rpc_cred *cred ;
  int res ;
  struct nfs_rpc_ops  const  *tmp ;
  long tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct nfs_server *tmp___6 ;

  {
#line 2322
  res = 0;
#line 2324
  if ((mask & 128) != 0) {
#line 2325
    return (-10);
  } else {

  }
  {
#line 2327
  nfs_inc_stats((struct inode  const  *)inode, 6);
  }
#line 2329
  if ((mask & 7) == 0) {
#line 2330
    goto out;
  } else {

  }
#line 2332
  if ((mask & 80) != 0) {
#line 2333
    goto force_lookup;
  } else {

  }
  {
#line 2336
  if (((int )inode->i_mode & 61440) == 40960) {
#line 2336
    goto case_40960;
  } else {

  }
#line 2338
  if (((int )inode->i_mode & 61440) == 32768) {
#line 2338
    goto case_32768;
  } else {

  }
#line 2340
  if (((int )inode->i_mode & 61440) == 16384) {
#line 2340
    goto case_16384;
  } else {

  }
#line 2335
  goto switch_break;
  case_40960: /* CIL Label */ ;
#line 2337
  goto out;
  case_32768: /* CIL Label */ ;
#line 2339
  goto ldv_57646;
  case_16384: /* CIL Label */ ;
#line 2345
  if (((unsigned int )mask & 6U) == 2U) {
#line 2346
    goto out;
  } else {

  }
  switch_break: /* CIL Label */ ;
  }
  ldv_57646: ;
  force_lookup: 
  {
#line 2350
  tmp = NFS_PROTO((struct inode  const  *)inode);
  }
#line 2350
  if ((unsigned long )tmp->access == (unsigned long )((int (*/* const  */)(struct inode * ,
                                                                           struct nfs_access_entry * ))0)) {
#line 2351
    goto out_notsup;
  } else {

  }
  {
#line 2353
  cred = rpc_lookup_cred();
#line 2354
  tmp___1 = IS_ERR((void const   *)cred);
  }
#line 2354
  if (tmp___1) {
#line 2354
    tmp___2 = 0;
  } else {
#line 2354
    tmp___2 = 1;
  }
#line 2354
  if (tmp___2) {
    {
#line 2355
    res = nfs_do_access(inode, cred, mask);
#line 2356
    put_rpccred(cred);
    }
  } else {
    {
#line 2358
    tmp___0 = PTR_ERR((void const   *)cred);
#line 2358
    res = (int )tmp___0;
    }
  }
  out: ;
#line 2360
  if (res == 0 && mask & 1) {
    {
#line 2360
    tmp___3 = execute_ok(inode);
    }
#line 2360
    if (tmp___3) {
#line 2360
      tmp___4 = 0;
    } else {
#line 2360
      tmp___4 = 1;
    }
#line 2360
    if (tmp___4) {
#line 2361
      res = -13;
    } else {

    }
  } else {

  }
  {
#line 2363
  tmp___5 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 2363
  if (tmp___5 != 0L) {
    {
#line 2363
    printk("\001dNFS: permission(%s/%lu), mask=0x%x, res=%d\n", (char *)(& (inode->i_sb)->s_id),
           inode->i_ino, mask, res);
    }
  } else {

  }
#line 2365
  return (res);
  out_notsup: 
  {
#line 2367
  tmp___6 = NFS_SERVER((struct inode  const  *)inode);
#line 2367
  res = nfs_revalidate_inode(tmp___6, inode);
  }
#line 2368
  if (res == 0) {
    {
#line 2369
    res = generic_permission(inode, mask);
    }
  } else {

  }
#line 2370
  goto out;
}
}
#line 2372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
static char const   __kstrtab_nfs_permission[15U]  = 
#line 2372
  {      'n',      'f',      's',      '_', 
        'p',      'e',      'r',      'm', 
        'i',      's',      's',      'i', 
        'o',      'n',      '\000'};
#line 2372
struct kernel_symbol  const  __ksymtab_nfs_permission ;
#line 2372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/dir.c"
struct kernel_symbol  const  __ksymtab_nfs_permission  =    {(unsigned long )(& nfs_permission), (char const   *)(& __kstrtab_nfs_permission)};
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_2(void *arg0 ) ;
#line 236
void ldv_character_driver_scenario_callback_2_22(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) ;
#line 237
void ldv_character_driver_scenario_callback_2_25(int (*arg0)(struct file * , fl_owner_t  ) ,
                                                 struct file *arg1 , struct files_struct *arg2 ) ;
#line 238
void ldv_character_driver_scenario_callback_2_28(int (*arg0)(struct file * , loff_t  ,
                                                             loff_t  , int  ) , struct file *arg1 ,
                                                 long long arg2 , long long arg3 ,
                                                 int arg4 ) ;
#line 239
void ldv_character_driver_scenario_callback_2_31(int (*arg0)(struct file * , struct dir_context * ) ,
                                                 struct file *arg1 , struct dir_context *arg2 ) ;
#line 240
void ldv_character_driver_scenario_callback_2_34(loff_t (*arg0)(struct file * , loff_t  ,
                                                                int  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) ;
#line 241
void ldv_character_driver_scenario_callback_2_37(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) ;
#line 242
void ldv_character_driver_scenario_callback_2_40(int (*arg0)(struct file * , struct vm_area_struct * ) ,
                                                 struct file *arg1 , struct vm_area_struct *arg2 ) ;
#line 243
void ldv_character_driver_scenario_callback_2_43(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 244
void ldv_character_driver_scenario_callback_2_46(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) ;
#line 245
void ldv_character_driver_scenario_callback_2_47(int (*arg0)(struct file * , ssize_t  ,
                                                             struct file_lock ** ) ,
                                                 struct file *arg1 , long arg2 , struct file_lock **arg3 ) ;
#line 246
void ldv_character_driver_scenario_callback_2_5(int (*arg0)(int  ) , int arg1 ) ;
#line 247
void ldv_character_driver_scenario_callback_2_50(ssize_t (*arg0)(struct file * , loff_t * ,
                                                                 struct pipe_inode_info * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct file *arg1 , long long *arg2 ,
                                                 struct pipe_inode_info *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) ;
#line 248
void ldv_character_driver_scenario_callback_2_53(ssize_t (*arg0)(struct pipe_inode_info * ,
                                                                 struct file * , loff_t * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct pipe_inode_info *arg1 , struct file *arg2 ,
                                                 long long *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) ;
#line 249
void ldv_character_driver_scenario_callback_2_56(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) ;
#line 250
int ldv_character_driver_scenario_probe_2_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 251
void ldv_character_driver_scenario_release_2_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 252
void ldv_character_driver_scenario_write_2_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_2(void *arg0 ) 
{ 
  int (*ldv_2_callback_check_flags)(int  ) ;
  int (*ldv_2_callback_flock)(struct file * , int  , struct file_lock * ) ;
  int (*ldv_2_callback_flush)(struct file * , struct files_struct * ) ;
  int (*ldv_2_callback_fsync)(struct file * , loff_t  , loff_t  , int  ) ;
  int (*ldv_2_callback_iterate)(struct file * , struct dir_context * ) ;
  loff_t (*ldv_2_callback_llseek)(struct file * , loff_t  , int  ) ;
  int (*ldv_2_callback_lock)(struct file * , int  , struct file_lock * ) ;
  int (*ldv_2_callback_mmap)(struct file * , struct vm_area_struct * ) ;
  ssize_t (*ldv_2_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_2_callback_read_iter)(struct kiocb * , struct iov_iter * ) ;
  int (*ldv_2_callback_setlease)(struct file * , long  , struct file_lock ** ) ;
  long (*ldv_2_callback_splice_read)(struct file * , long long * , struct pipe_inode_info * ,
                                     unsigned long  , unsigned int  ) ;
  long (*ldv_2_callback_splice_write)(struct pipe_inode_info * , struct file * , long long * ,
                                      unsigned long  , unsigned int  ) ;
  long (*ldv_2_callback_write_iter)(struct kiocb * , struct iov_iter * ) ;
  struct file_operations *ldv_2_container_file_operations ;
  int ldv_2_ldv_param_22_1_default ;
  struct files_struct *ldv_2_ldv_param_25_1_default ;
  long long ldv_2_ldv_param_28_1_default ;
  long long ldv_2_ldv_param_28_2_default ;
  int ldv_2_ldv_param_28_3_default ;
  struct dir_context *ldv_2_ldv_param_31_1_default ;
  long long ldv_2_ldv_param_34_1_default ;
  int ldv_2_ldv_param_34_2_default ;
  int ldv_2_ldv_param_37_1_default ;
  struct vm_area_struct *ldv_2_ldv_param_40_1_default ;
  char *ldv_2_ldv_param_43_1_default ;
  long long *ldv_2_ldv_param_43_3_default ;
  long ldv_2_ldv_param_47_1_default ;
  char *ldv_2_ldv_param_4_1_default ;
  long long *ldv_2_ldv_param_4_3_default ;
  long long *ldv_2_ldv_param_50_1_default ;
  unsigned int ldv_2_ldv_param_50_4_default ;
  struct pipe_inode_info *ldv_2_ldv_param_53_0_default ;
  long long *ldv_2_ldv_param_53_2_default ;
  unsigned int ldv_2_ldv_param_53_4_default ;
  int ldv_2_ldv_param_5_0_default ;
  struct file *ldv_2_resource_file ;
  struct inode *ldv_2_resource_inode ;
  struct kiocb *ldv_2_resource_struct_kiocb_ptr ;
  int ldv_2_ret_default ;
  struct file_lock *ldv_2_size_cnt_struct_file_lock_ptr ;
  struct iov_iter *ldv_2_size_cnt_struct_iov_iter_ptr ;
  struct pipe_inode_info *ldv_2_size_cnt_struct_pipe_inode_info_ptr ;
  size_t ldv_2_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  void *tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;

  {
  {
#line 310
  ldv_2_ret_default = ldv_undef_int();
#line 312
  ldv_free(arg0);
#line 316
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 316
  ldv_2_container_file_operations = (struct file_operations *)tmp;
#line 320
  tmp___0 = ldv_xmalloc(512UL);
#line 320
  ldv_2_resource_file = (struct file *)tmp___0;
#line 321
  tmp___1 = ldv_xmalloc(1032UL);
#line 321
  ldv_2_resource_inode = (struct inode *)tmp___1;
#line 322
  tmp___2 = ldv_xmalloc_unknown_size(0UL);
#line 322
  ldv_2_resource_struct_kiocb_ptr = (struct kiocb *)tmp___2;
#line 323
  tmp___3 = ldv_undef_int();
#line 323
  ldv_2_size_cnt_struct_file_lock_ptr = (struct file_lock *)((long )tmp___3);
  }
#line 330
  goto ldv_main_2;
#line 332
  return;
  ldv_main_2: 
  {
#line 338
  tmp___5 = ldv_undef_int();
  }
#line 338
  if (tmp___5 != 0) {
    {
#line 341
    ldv_2_ret_default = ldv_character_driver_scenario_probe_2_13(ldv_2_container_file_operations->open,
                                                                 ldv_2_resource_inode,
                                                                 ldv_2_resource_file);
#line 343
    ldv_2_ret_default = ldv_filter_err_code(ldv_2_ret_default);
#line 346
    tmp___4 = ldv_undef_int();
    }
#line 346
    if (tmp___4 != 0) {
      {
#line 348
      __VERIFIER_assume(ldv_2_ret_default == 0);
      }
#line 355
      goto ldv_call_2;
    } else {
      {
#line 359
      __VERIFIER_assume(ldv_2_ret_default != 0);
      }
#line 366
      goto ldv_main_2;
    }
  } else {
    {
#line 371
    ldv_free((void *)ldv_2_resource_file);
#line 372
    ldv_free((void *)ldv_2_resource_inode);
#line 373
    ldv_free((void *)ldv_2_resource_struct_kiocb_ptr);
#line 377
    ldv_free((void *)ldv_2_container_file_operations);
    }
#line 385
    return;
  }
#line 388
  return;
  ldv_call_2: 
  {
#line 394
  tmp___6 = ldv_undef_int();
  }
  {
#line 395
  if (tmp___6 == 1) {
#line 395
    goto case_1;
  } else {

  }
#line 426
  if (tmp___6 == 2) {
#line 426
    goto case_2;
  } else {

  }
#line 439
  if (tmp___6 == 3) {
#line 439
    goto case_3;
  } else {

  }
#line 662
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 397
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 397
  ldv_2_ldv_param_4_1_default = (char *)tmp___7;
#line 398
  tmp___8 = ldv_xmalloc_unknown_size(0UL);
#line 398
  ldv_2_ldv_param_4_3_default = (long long *)tmp___8;
#line 407
  __VERIFIER_assume((unsigned long )ldv_2_size_cnt_struct_file_lock_ptr <= (unsigned long )((struct file_lock *)2147479552));
  }
#line 408
  if ((unsigned long )ldv_2_container_file_operations->write != (unsigned long )((ssize_t (*)(struct file * ,
                                                                                              char const   * ,
                                                                                              size_t  ,
                                                                                              loff_t * ))0)) {
    {
#line 410
    ldv_character_driver_scenario_write_2_4((ssize_t (*)(struct file * , char * ,
                                                         size_t  , loff_t * ))ldv_2_container_file_operations->write,
                                            ldv_2_resource_file, ldv_2_ldv_param_4_1_default,
                                            ldv_2_size_cnt_write_size, ldv_2_ldv_param_4_3_default);
    }
  } else {

  }
  {
#line 415
  ldv_free((void *)ldv_2_ldv_param_4_1_default);
#line 416
  ldv_free((void *)ldv_2_ldv_param_4_3_default);
  }
#line 423
  goto ldv_call_2;
  case_2: /* CIL Label */ 
  {
#line 429
  ldv_character_driver_scenario_release_2_2(ldv_2_container_file_operations->release,
                                            ldv_2_resource_inode, ldv_2_resource_file);
  }
#line 436
  goto ldv_main_2;
  case_3: /* CIL Label */ 
  {
#line 443
  tmp___9 = ldv_undef_int();
  }
  {
#line 444
  if (tmp___9 == 1) {
#line 444
    goto case_1___0;
  } else {

  }
#line 454
  if (tmp___9 == 2) {
#line 454
    goto case_2___0;
  } else {

  }
#line 474
  if (tmp___9 == 3) {
#line 474
    goto case_3___0;
  } else {

  }
#line 492
  if (tmp___9 == 4) {
#line 492
    goto case_4;
  } else {

  }
#line 508
  if (tmp___9 == 5) {
#line 508
    goto case_5;
  } else {

  }
#line 518
  if (tmp___9 == 6) {
#line 518
    goto case_6;
  } else {

  }
#line 536
  if (tmp___9 == 7) {
#line 536
    goto case_7;
  } else {

  }
#line 554
  if (tmp___9 == 8) {
#line 554
    goto case_8;
  } else {

  }
#line 570
  if (tmp___9 == 9) {
#line 570
    goto case_9;
  } else {

  }
#line 584
  if (tmp___9 == 10) {
#line 584
    goto case_10;
  } else {

  }
#line 600
  if (tmp___9 == 11) {
#line 600
    goto case_11;
  } else {

  }
#line 614
  if (tmp___9 == 12) {
#line 614
    goto case_12;
  } else {

  }
#line 632
  if (tmp___9 == 13) {
#line 632
    goto case_13;
  } else {

  }
#line 648
  if (tmp___9 == 14) {
#line 648
    goto case_14;
  } else {

  }
#line 658
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 446
  if ((unsigned long )ldv_2_callback_write_iter != (unsigned long )((long (*)(struct kiocb * ,
                                                                              struct iov_iter * ))0)) {
    {
#line 448
    ldv_character_driver_scenario_callback_2_56(ldv_2_callback_write_iter, ldv_2_resource_struct_kiocb_ptr,
                                                ldv_2_size_cnt_struct_iov_iter_ptr);
    }
  } else {

  }
#line 452
  goto ldv_57894;
  case_2___0: /* CIL Label */ 
  {
#line 456
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 456
  ldv_2_ldv_param_53_0_default = (struct pipe_inode_info *)tmp___10;
#line 457
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 457
  ldv_2_ldv_param_53_2_default = (long long *)tmp___11;
  }
#line 461
  if ((unsigned long )ldv_2_callback_splice_write != (unsigned long )((long (*)(struct pipe_inode_info * ,
                                                                                struct file * ,
                                                                                long long * ,
                                                                                unsigned long  ,
                                                                                unsigned int  ))0)) {
    {
#line 463
    ldv_character_driver_scenario_callback_2_53(ldv_2_callback_splice_write, ldv_2_ldv_param_53_0_default,
                                                ldv_2_resource_file, ldv_2_ldv_param_53_2_default,
                                                ldv_2_size_cnt_write_size, ldv_2_ldv_param_53_4_default);
    }
  } else {

  }
  {
#line 468
  ldv_free((void *)ldv_2_ldv_param_53_0_default);
#line 469
  ldv_free((void *)ldv_2_ldv_param_53_2_default);
  }
#line 472
  goto ldv_57894;
  case_3___0: /* CIL Label */ 
  {
#line 476
  tmp___12 = ldv_xmalloc_unknown_size(0UL);
#line 476
  ldv_2_ldv_param_50_1_default = (long long *)tmp___12;
  }
#line 480
  if ((unsigned long )ldv_2_callback_splice_read != (unsigned long )((long (*)(struct file * ,
                                                                               long long * ,
                                                                               struct pipe_inode_info * ,
                                                                               unsigned long  ,
                                                                               unsigned int  ))0)) {
    {
#line 482
    ldv_character_driver_scenario_callback_2_50(ldv_2_callback_splice_read, ldv_2_resource_file,
                                                ldv_2_ldv_param_50_1_default, ldv_2_size_cnt_struct_pipe_inode_info_ptr,
                                                ldv_2_size_cnt_write_size, ldv_2_ldv_param_50_4_default);
    }
  } else {

  }
  {
#line 487
  ldv_free((void *)ldv_2_ldv_param_50_1_default);
  }
#line 490
  goto ldv_57894;
  case_4: /* CIL Label */ ;
#line 497
  if ((unsigned long )ldv_2_callback_setlease != (unsigned long )((int (*)(struct file * ,
                                                                           long  ,
                                                                           struct file_lock ** ))0)) {
    {
#line 499
    ldv_character_driver_scenario_callback_2_47(ldv_2_callback_setlease, ldv_2_resource_file,
                                                ldv_2_ldv_param_47_1_default, (struct file_lock **)ldv_2_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 506
  goto ldv_57894;
  case_5: /* CIL Label */ ;
#line 510
  if ((unsigned long )ldv_2_callback_read_iter != (unsigned long )((long (*)(struct kiocb * ,
                                                                             struct iov_iter * ))0)) {
    {
#line 512
    ldv_character_driver_scenario_callback_2_46(ldv_2_callback_read_iter, ldv_2_resource_struct_kiocb_ptr,
                                                ldv_2_size_cnt_struct_iov_iter_ptr);
    }
  } else {

  }
#line 516
  goto ldv_57894;
  case_6: /* CIL Label */ 
  {
#line 520
  tmp___13 = ldv_xmalloc_unknown_size(0UL);
#line 520
  ldv_2_ldv_param_43_1_default = (char *)tmp___13;
#line 521
  tmp___14 = ldv_xmalloc_unknown_size(0UL);
#line 521
  ldv_2_ldv_param_43_3_default = (long long *)tmp___14;
#line 526
  ldv_character_driver_scenario_callback_2_43(ldv_2_callback_read, ldv_2_resource_file,
                                              ldv_2_ldv_param_43_1_default, ldv_2_size_cnt_write_size,
                                              ldv_2_ldv_param_43_3_default);
#line 530
  ldv_free((void *)ldv_2_ldv_param_43_1_default);
#line 531
  ldv_free((void *)ldv_2_ldv_param_43_3_default);
  }
#line 534
  goto ldv_57894;
  case_7: /* CIL Label */ 
  {
#line 538
  tmp___15 = ldv_xmalloc_unknown_size(0UL);
#line 538
  ldv_2_ldv_param_40_1_default = (struct vm_area_struct *)tmp___15;
  }
#line 542
  if ((unsigned long )ldv_2_callback_mmap != (unsigned long )((int (*)(struct file * ,
                                                                       struct vm_area_struct * ))0)) {
    {
#line 544
    ldv_character_driver_scenario_callback_2_40(ldv_2_callback_mmap, ldv_2_resource_file,
                                                ldv_2_ldv_param_40_1_default);
    }
  } else {

  }
  {
#line 549
  ldv_free((void *)ldv_2_ldv_param_40_1_default);
  }
#line 552
  goto ldv_57894;
  case_8: /* CIL Label */ ;
#line 559
  if ((unsigned long )ldv_2_callback_lock != (unsigned long )((int (*)(struct file * ,
                                                                       int  , struct file_lock * ))0)) {
    {
#line 561
    ldv_character_driver_scenario_callback_2_37(ldv_2_callback_lock, ldv_2_resource_file,
                                                ldv_2_ldv_param_37_1_default, ldv_2_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 568
  goto ldv_57894;
  case_9: /* CIL Label */ 
  {
#line 576
  ldv_character_driver_scenario_callback_2_34(ldv_2_callback_llseek, ldv_2_resource_file,
                                              ldv_2_ldv_param_34_1_default, ldv_2_ldv_param_34_2_default);
  }
#line 582
  goto ldv_57894;
  case_10: /* CIL Label */ 
  {
#line 586
  tmp___16 = ldv_xmalloc_unknown_size(0UL);
#line 586
  ldv_2_ldv_param_31_1_default = (struct dir_context *)tmp___16;
#line 591
  ldv_character_driver_scenario_callback_2_31(ldv_2_callback_iterate, ldv_2_resource_file,
                                              ldv_2_ldv_param_31_1_default);
#line 595
  ldv_free((void *)ldv_2_ldv_param_31_1_default);
  }
#line 598
  goto ldv_57894;
  case_11: /* CIL Label */ 
  {
#line 606
  ldv_character_driver_scenario_callback_2_28(ldv_2_callback_fsync, ldv_2_resource_file,
                                              ldv_2_ldv_param_28_1_default, ldv_2_ldv_param_28_2_default,
                                              ldv_2_ldv_param_28_3_default);
  }
#line 612
  goto ldv_57894;
  case_12: /* CIL Label */ 
  {
#line 616
  tmp___17 = ldv_xmalloc_unknown_size(0UL);
#line 616
  ldv_2_ldv_param_25_1_default = (struct files_struct *)tmp___17;
  }
#line 620
  if ((unsigned long )ldv_2_callback_flush != (unsigned long )((int (*)(struct file * ,
                                                                        struct files_struct * ))0)) {
    {
#line 622
    ldv_character_driver_scenario_callback_2_25(ldv_2_callback_flush, ldv_2_resource_file,
                                                ldv_2_ldv_param_25_1_default);
    }
  } else {

  }
  {
#line 627
  ldv_free((void *)ldv_2_ldv_param_25_1_default);
  }
#line 630
  goto ldv_57894;
  case_13: /* CIL Label */ ;
#line 637
  if ((unsigned long )ldv_2_callback_flock != (unsigned long )((int (*)(struct file * ,
                                                                        int  , struct file_lock * ))0)) {
    {
#line 639
    ldv_character_driver_scenario_callback_2_22(ldv_2_callback_flock, ldv_2_resource_file,
                                                ldv_2_ldv_param_22_1_default, ldv_2_size_cnt_struct_file_lock_ptr);
    }
  } else {

  }
#line 646
  goto ldv_57894;
  case_14: /* CIL Label */ ;
#line 650
  if ((unsigned long )ldv_2_callback_check_flags != (unsigned long )((int (*)(int  ))0)) {
    {
#line 652
    ldv_character_driver_scenario_callback_2_5(ldv_2_callback_check_flags, ldv_2_ldv_param_5_0_default);
    }
  } else {

  }
#line 656
  goto ldv_57894;
  switch_default: /* CIL Label */ 
  {
#line 658
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_57894: ;
#line 660
  goto ldv_57909;
  switch_default___0: /* CIL Label */ 
  {
#line 662
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_57909: ;
#line 671
  goto ldv_call_2;
#line 673
  return;
}
}
#line 678 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_22(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) 
{ 


  {
  {
#line 679
  (*arg0)(arg1, arg2, arg3);
  }
#line 680
  return;
}
}
#line 683 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_25(int (*arg0)(struct file * , fl_owner_t  ) ,
                                                 struct file *arg1 , struct files_struct *arg2 ) 
{ 


  {
  {
#line 684
  (*arg0)(arg1, arg2);
  }
#line 685
  return;
}
}
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_28(int (*arg0)(struct file * , loff_t  ,
                                                             loff_t  , int  ) , struct file *arg1 ,
                                                 long long arg2 , long long arg3 ,
                                                 int arg4 ) 
{ 


  {
  {
#line 689
  nfs_fsync_dir(arg1, arg2, arg3, arg4);
  }
#line 690
  return;
}
}
#line 693 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_31(int (*arg0)(struct file * , struct dir_context * ) ,
                                                 struct file *arg1 , struct dir_context *arg2 ) 
{ 


  {
  {
#line 694
  nfs_readdir(arg1, arg2);
  }
#line 695
  return;
}
}
#line 698 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_34(loff_t (*arg0)(struct file * , loff_t  ,
                                                                int  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) 
{ 


  {
  {
#line 699
  nfs_llseek_dir(arg1, arg2, arg3);
  }
#line 700
  return;
}
}
#line 703 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_37(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) 
{ 


  {
  {
#line 704
  (*arg0)(arg1, arg2, arg3);
  }
#line 705
  return;
}
}
#line 708 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_40(int (*arg0)(struct file * , struct vm_area_struct * ) ,
                                                 struct file *arg1 , struct vm_area_struct *arg2 ) 
{ 


  {
  {
#line 709
  (*arg0)(arg1, arg2);
  }
#line 710
  return;
}
}
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_43(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 714
  generic_read_dir(arg1, arg2, arg3, arg4);
  }
#line 715
  return;
}
}
#line 718 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_46(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) 
{ 


  {
  {
#line 719
  (*arg0)(arg1, arg2);
  }
#line 720
  return;
}
}
#line 723 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_47(int (*arg0)(struct file * , ssize_t  ,
                                                             struct file_lock ** ) ,
                                                 struct file *arg1 , long arg2 , struct file_lock **arg3 ) 
{ 


  {
  {
#line 724
  (*arg0)(arg1, arg2, arg3);
  }
#line 725
  return;
}
}
#line 728 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_5(int (*arg0)(int  ) , int arg1 ) 
{ 


  {
  {
#line 729
  (*arg0)(arg1);
  }
#line 730
  return;
}
}
#line 733 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_50(ssize_t (*arg0)(struct file * , loff_t * ,
                                                                 struct pipe_inode_info * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct file *arg1 , long long *arg2 ,
                                                 struct pipe_inode_info *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) 
{ 


  {
  {
#line 734
  (*arg0)(arg1, arg2, arg3, arg4, arg5);
  }
#line 735
  return;
}
}
#line 738 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_53(ssize_t (*arg0)(struct pipe_inode_info * ,
                                                                 struct file * , loff_t * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct pipe_inode_info *arg1 , struct file *arg2 ,
                                                 long long *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) 
{ 


  {
  {
#line 739
  (*arg0)(arg1, arg2, arg3, arg4, arg5);
  }
#line 740
  return;
}
}
#line 743 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_callback_2_56(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) 
{ 


  {
  {
#line 744
  (*arg0)(arg1, arg2);
  }
#line 745
  return;
}
}
#line 748 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
int ldv_character_driver_scenario_probe_2_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 749
  tmp = nfs_opendir(arg1, arg2);
  }
#line 749
  return (tmp);
}
}
#line 753 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_release_2_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 754
  nfs_closedir(arg1, arg2);
  }
#line 755
  return;
}
}
#line 758 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
void ldv_character_driver_scenario_write_2_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 759
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 760
  return;
}
}
#line 1039 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 1042
  tmp = ldv_kmalloc(size, flags);
  }
#line 1042
  return (tmp);
}
}
#line 1394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
__inline static void ldv_spin_lock_72(spinlock_t *lock ) 
{ 


  {
  {
#line 1397
  ldv_spin_lock_i_lock_of_inode();
#line 1399
  spin_lock(lock);
  }
#line 1400
  return;
}
}
#line 1403 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) 
{ 


  {
  {
#line 1406
  ldv_spin_unlock_i_lock_of_inode();
#line 1408
  spin_unlock(lock);
  }
#line 1409
  return;
}
}
#line 1484 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
__inline static void ldv_spin_lock_82(spinlock_t *lock ) 
{ 


  {
  {
#line 1487
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 1489
  spin_lock(lock);
  }
#line 1490
  return;
}
}
#line 1493 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) 
{ 


  {
  {
#line 1496
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 1498
  spin_unlock(lock);
  }
#line 1499
  return;
}
}
#line 1511 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
__inline static void ldv_spin_lock_85(spinlock_t *lock ) 
{ 


  {
  {
#line 1514
  ldv_spin_lock_nfs_access_lru_lock();
#line 1516
  spin_lock(lock);
  }
#line 1517
  return;
}
}
#line 1538 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_dir.c.aux"
__inline static void ldv_spin_unlock_88(spinlock_t *lock ) 
{ 


  {
  {
#line 1541
  ldv_spin_unlock_nfs_access_lru_lock();
#line 1543
  spin_unlock(lock);
  }
#line 1544
  return;
}
}
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit_lock(long nr , unsigned long volatile   *addr ) 
{ 
  int tmp ;

  {
  {
#line 219
  tmp = test_and_set_bit(nr, addr);
  }
#line 219
  return (tmp);
}
}
#line 314 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(long nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 318
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 323
  return (oldbit);
}
}
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
  {
#line 14
  if (8UL == 1UL) {
#line 14
    goto case_1;
  } else {

  }
#line 14
  if (8UL == 2UL) {
#line 14
    goto case_2;
  } else {

  }
#line 14
  if (8UL == 4UL) {
#line 14
    goto case_4;
  } else {

  }
#line 14
  if (8UL == 8UL) {
#line 14
    goto case_8;
  } else {

  }
#line 14
  goto switch_default;
  case_1: /* CIL Label */ 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2944;
  case_2: /* CIL Label */ 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2944;
  case_4: /* CIL Label */ 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2944;
  case_8: /* CIL Label */ 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2944;
  switch_default: /* CIL Label */ 
  {
#line 14
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_2944: ;
#line 14
  return (pfo_ret__);
}
}
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
extern int out_of_line_wait_on_bit(void * , int  , int (*)(void * ) , unsigned int  ) ;
#line 872 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
__inline static int wait_on_bit(void *word , int bit , int (*action)(void * ) , unsigned int mode ) 
{ 
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 874
  tmp___0 = variable_test_bit((long )bit, (unsigned long const volatile   *)word);
  }
#line 874
  if (tmp___0 == 0) {
#line 875
    return (0);
  } else {

  }
  {
#line 876
  tmp___1 = out_of_line_wait_on_bit(word, bit, action, mode);
  }
#line 876
  return (tmp___1);
}
}
#line 634 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 653
  return ((loff_t )inode->i_size);
}
}
#line 948
extern void posix_test_lock(struct file * , struct file_lock * ) ;
#line 950
extern int posix_lock_file_wait(struct file * , struct file_lock * ) ;
#line 955
extern int flock_lock_file_wait(struct file * , struct file_lock * ) ;
#line 1873 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static int __mandatory_lock(struct inode *ino ) 
{ 


  {
#line 1875
  return (((int )ino->i_mode & 1032) == 1024);
}
}
#line 2217
extern int filemap_fdatawrite(struct address_space * ) ;
#line 2223
extern int filemap_write_and_wait_range(struct address_space * , loff_t  , loff_t  ) ;
#line 2232
extern int vfs_fsync(struct file * , int  ) ;
#line 2415
extern int generic_file_mmap(struct file * , struct vm_area_struct * ) ;
#line 2417
extern int generic_file_remap_pages(struct vm_area_struct * , unsigned long  , unsigned long  ,
                                    unsigned long  ) ;
#line 2420
extern ssize_t generic_file_read_iter(struct kiocb * , struct iov_iter * ) ;
#line 2422
extern ssize_t generic_file_write_iter(struct kiocb * , struct iov_iter * ) ;
#line 2427
extern ssize_t new_sync_read(struct file * , char * , size_t  , loff_t * ) ;
#line 2428
extern ssize_t new_sync_write(struct file * , char const   * , size_t  , loff_t * ) ;
#line 2437
extern ssize_t generic_file_splice_read(struct file * , loff_t * , struct pipe_inode_info * ,
                                        size_t  , unsigned int  ) ;
#line 2441
extern ssize_t iter_file_splice_write(struct pipe_inode_info * , struct file * , loff_t * ,
                                      size_t  , unsigned int  ) ;
#line 2451
extern loff_t generic_file_llseek(struct file * , loff_t  , int  ) ;
#line 221 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static int PagePrivate(struct page  const  *page ) 
{ 
  int tmp ;

  {
  {
#line 221
  tmp = constant_test_bit(11L, (unsigned long const volatile   *)(& page->flags));
  }
#line 221
  return (tmp);
}
}
#line 223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static int PagePrivate2(struct page  const  *page ) 
{ 
  int tmp ;

  {
  {
#line 223
  tmp = constant_test_bit(12L, (unsigned long const volatile   *)(& page->flags));
  }
#line 223
  return (tmp);
}
}
#line 230 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static int PageWriteback(struct page  const  *page ) 
{ 
  int tmp ;

  {
  {
#line 230
  tmp = constant_test_bit(13L, (unsigned long const volatile   *)(& page->flags));
  }
#line 230
  return (tmp);
}
}
#line 248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static int PageSwapCache(struct page  const  *page ) 
{ 
  int tmp ;

  {
  {
#line 248
  tmp = constant_test_bit(16L, (unsigned long const volatile   *)(& page->flags));
  }
#line 248
  return (tmp);
}
}
#line 282 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static int PageUptodate(struct page *page ) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 284
  tmp = constant_test_bit(3L, (unsigned long const volatile   *)(& page->flags));
#line 284
  ret = tmp;
  }
#line 294
  if (ret != 0) {
#line 295
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 297
  return (ret);
}
}
#line 973 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
extern struct address_space *__page_file_mapping(struct page * ) ;
#line 976 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
__inline static struct address_space *page_file_mapping(struct page *page ) 
{ 
  struct address_space *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 978
  tmp___0 = PageSwapCache((struct page  const  *)page);
#line 978
  tmp___1 = __builtin_expect(tmp___0 != 0, 0L);
  }
#line 978
  if (tmp___1 != 0L) {
    {
#line 979
    tmp = __page_file_mapping(page);
    }
#line 979
    return (tmp);
  } else {

  }
#line 981
  return (page->__annonCompField47.mapping);
}
}
#line 1000
extern unsigned long __page_file_index(struct page * ) ;
#line 1006 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
__inline static unsigned long page_file_index(struct page *page ) 
{ 
  unsigned long tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 1008
  tmp___0 = PageSwapCache((struct page  const  *)page);
#line 1008
  tmp___1 = __builtin_expect(tmp___0 != 0, 0L);
  }
#line 1008
  if (tmp___1 != 0L) {
    {
#line 1009
    tmp = __page_file_index(page);
    }
#line 1009
    return (tmp);
  } else {

  }
#line 1011
  return (page->__annonCompField53.__annonCompField48.index);
}
}
#line 1160
extern int generic_error_remove_page(struct address_space * , struct page * ) ;
#line 1211
extern int __set_page_dirty_nobuffers(struct page * ) ;
#line 1865
extern int filemap_fault(struct vm_area_struct * , struct vm_fault * ) ;
#line 1866
extern void filemap_map_pages(struct vm_area_struct * , struct vm_fault * ) ;
#line 206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highmem.h"
extern void __compiletime_assert_206(void) ;
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highmem.h"
__inline static void zero_user_segments(struct page *page , unsigned int start1 ,
                                        unsigned int end1 , unsigned int start2 ,
                                        unsigned int end2 ) 
{ 
  void *kaddr ;
  void *tmp ;
  long tmp___0 ;
  bool __cond ;

  {
  {
#line 196
  tmp = kmap_atomic(page);
#line 196
  kaddr = tmp;
#line 198
  tmp___0 = __builtin_expect((long )(end1 > 4096U || end2 > 4096U), 0L);
  }
#line 198
  if (tmp___0 != 0L) {
    {
#line 198
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/highmem.h"),
                         "i" (198), "i" (12UL));
#line 198
    __builtin_unreachable();
    }
  } else {

  }
#line 200
  if (end1 > start1) {
    {
#line 201
    memset(kaddr + (unsigned long )start1, 0, (size_t )(end1 - start1));
    }
  } else {

  }
#line 203
  if (end2 > start2) {
    {
#line 204
    memset(kaddr + (unsigned long )start2, 0, (size_t )(end2 - start2));
    }
  } else {

  }
#line 206
  __cond = 0;
#line 206
  if ((int )__cond) {
    {
#line 206
    __compiletime_assert_206();
    }
  } else {

  }
  {
#line 206
  __kunmap_atomic(kaddr);
  }
#line 207
  return;
}
}
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highmem.h"
__inline static void zero_user_segment(struct page *page , unsigned int start , unsigned int end ) 
{ 


  {
  {
#line 213
  zero_user_segments(page, start, end, 0U, 0U);
  }
#line 214
  return;
}
}
#line 375 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
extern struct page *grab_cache_page_write_begin(struct address_space * , unsigned long  ,
                                                unsigned int  ) ;
#line 416 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
__inline static loff_t page_offset(struct page *page ) 
{ 


  {
#line 418
  return ((long long )page->__annonCompField53.__annonCompField48.index << 12);
}
}
#line 440
extern void __lock_page(struct page * ) ;
#line 456 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
__inline static int trylock_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  {
#line 458
  tmp = test_and_set_bit_lock(0L, (unsigned long volatile   *)(& page->flags));
#line 458
  tmp___0 = __builtin_expect(tmp == 0, 1L);
  }
#line 458
  return ((int )tmp___0);
}
}
#line 464 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
__inline static void lock_page(struct page *page ) 
{ 
  int tmp ;

  {
  {
#line 466
  __might_sleep("include/linux/pagemap.h", 466, 0);
#line 467
  tmp = trylock_page(page);
  }
#line 467
  if (tmp == 0) {
    {
#line 468
    __lock_page(page);
    }
  } else {

  }
#line 469
  return;
}
}
#line 499
extern void wait_on_page_bit(struct page * , int  ) ;
#line 526 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
__inline static void wait_on_page_writeback(struct page *page ) 
{ 
  int tmp ;

  {
  {
#line 528
  tmp = PageWriteback((struct page  const  *)page);
  }
#line 528
  if (tmp != 0) {
    {
#line 529
    wait_on_page_bit(page, 13);
    }
  } else {

  }
#line 530
  return;
}
}
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uio.h"
__inline static size_t iov_iter_count(struct iov_iter *i ) 
{ 


  {
#line 94
  return (i->count);
}
}
#line 345 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprt.h"
extern int xs_swapper(struct rpc_xprt * , int  ) ;
#line 243 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static struct rpc_clnt *NFS_CLIENT(struct inode  const  *inode ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 245
  tmp = NFS_SERVER(inode);
  }
#line 245
  return (tmp->client);
}
}
#line 337
int nfs_sync_mapping(struct address_space *mapping ) ;
#line 350
int nfs_open(struct inode *inode , struct file *filp ) ;
#line 351
int nfs_release(struct inode *inode , struct file *filp ) ;
#line 352
int nfs_attribute_timeout(struct inode *inode ) ;
#line 367
struct nfs_lock_context *nfs_get_lock_context(struct nfs_open_context *ctx ) ;
#line 368
void nfs_put_lock_context(struct nfs_lock_context *l_ctx ) ;
#line 420
struct file_operations  const  nfs_file_operations ;
#line 424
struct address_space_operations  const  nfs_file_aops ;
#line 427 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static struct nfs_open_context *nfs_file_open_context(struct file *filp ) 
{ 


  {
#line 429
  return ((struct nfs_open_context *)filp->private_data);
}
}
#line 462
ssize_t nfs_direct_IO(int rw , struct kiocb *iocb , struct iov_iter *iter , loff_t pos ) ;
#line 463
ssize_t nfs_file_direct_read(struct kiocb *iocb , struct iov_iter *iter , loff_t pos ,
                             bool uio ) ;
#line 466
ssize_t nfs_file_direct_write(struct kiocb *iocb , struct iov_iter *iter , loff_t pos ,
                              bool uio ) ;
#line 518
int nfs_writepage(struct page *page , struct writeback_control *wbc ) ;
#line 519
int nfs_writepages(struct address_space *mapping , struct writeback_control *wbc ) ;
#line 520
int nfs_flush_incompatible(struct file *file , struct page *page ) ;
#line 521
int nfs_updatepage(struct file *file , struct page *page , unsigned int offset , unsigned int count ) ;
#line 527
int nfs_wb_all(struct inode *inode ) ;
#line 528
int nfs_wb_page(struct inode *inode , struct page *page ) ;
#line 529
int nfs_wb_page_cancel(struct inode *inode , struct page *page ) ;
#line 531
int nfs_commit_inode(struct inode *inode , int how ) ;
#line 551
int nfs_readpage(struct file *file , struct page *page ) ;
#line 552
int nfs_readpages(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                  unsigned int nr_pages ) ;
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/swap.h"
__inline static int current_is_kswapd(void) 
{ 
  struct task_struct *tmp ;

  {
  {
#line 33
  tmp = get_current();
  }
#line 33
  return ((int )tmp->flags & 262144);
}
}
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
int nfs_iocounter_wait(struct nfs_io_counter *c ) ;
#line 328
int nfs_file_fsync_commit(struct file *file , loff_t start , loff_t end , int datasync ) ;
#line 329
loff_t nfs_file_llseek(struct file *filp , loff_t offset , int whence ) ;
#line 330
int nfs_file_flush(struct file *file , fl_owner_t id ) ;
#line 331
ssize_t nfs_file_read(struct kiocb *iocb , struct iov_iter *to ) ;
#line 332
ssize_t nfs_file_splice_read(struct file *filp , loff_t *ppos , struct pipe_inode_info *pipe ,
                             size_t count , unsigned int flags ) ;
#line 334
int nfs_file_mmap(struct file *file , struct vm_area_struct *vma ) ;
#line 335
ssize_t nfs_file_write(struct kiocb *iocb , struct iov_iter *from ) ;
#line 336
int nfs_file_release(struct inode *inode , struct file *filp ) ;
#line 337
int nfs_lock(struct file *filp , int cmd , struct file_lock *fl ) ;
#line 338
int nfs_flock(struct file *filp , int cmd , struct file_lock *fl ) ;
#line 340
int nfs_setlease(struct file *file , long arg , struct file_lock **fl ) ;
#line 351
int nfs_wait_bit_killable(void *word ) ;
#line 458
int nfs_key_timeout_notify(struct file *filp , struct inode *inode ) ;
#line 459
bool nfs_ctx_key_to_expire(struct nfs_open_context *ctx ) ;
#line 462
int nfs_migrate_page(struct address_space *mapping , struct page *newpage , struct page *page ,
                     enum migrate_mode mode ) ;
#line 564 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static unsigned int nfs_page_length(struct page *page ) 
{ 
  loff_t i_size ;
  struct address_space *tmp ;
  loff_t tmp___0 ;
  unsigned long page_index___0 ;
  unsigned long tmp___1 ;
  unsigned long end_index ;

  {
  {
#line 566
  tmp = page_file_mapping(page);
#line 566
  tmp___0 = i_size_read((struct inode  const  *)tmp->host);
#line 566
  i_size = tmp___0;
  }
#line 568
  if (i_size > 0LL) {
    {
#line 569
    tmp___1 = page_file_index(page);
#line 569
    page_index___0 = tmp___1;
#line 570
    end_index = (unsigned long )((i_size + -1LL) >> 12);
    }
#line 571
    if (page_index___0 < end_index) {
#line 572
      return (4096U);
    } else {

    }
#line 573
    if (page_index___0 == end_index) {
#line 574
      return ((((unsigned int )i_size + 4294967295U) & 4095U) + 1U);
    } else {

    }
  } else {

  }
#line 576
  return (0U);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_server_stats___0(struct nfs_server  const  *server ,
                                              enum nfs_stat_eventcounters stat ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 28
  __vpp_verify = (void const   *)0;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___0;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___1;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___2;
  } else {

  }
#line 28
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 28
  pao_ID__ = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___0;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8;
  } else {

  }
#line 28
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54014;
  case_2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54014;
  case_4: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54014;
  case_8: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54014;
  switch_default: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_54014: ;
#line 28
  goto ldv_54019;
  case_2___0: /* CIL Label */ 
#line 28
  pao_ID_____0 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___1;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___0;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___0;
  } else {

  }
#line 28
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54025;
  case_2___1: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54025;
  case_4___0: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54025;
  case_8___0: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54025;
  switch_default___0: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_54025: ;
#line 28
  goto ldv_54019;
  case_4___1: /* CIL Label */ 
#line 28
  pao_ID_____1 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___2;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___2;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___1;
  } else {

  }
#line 28
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54035;
  case_2___2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54035;
  case_4___2: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54035;
  case_8___1: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54035;
  switch_default___1: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_54035: ;
#line 28
  goto ldv_54019;
  case_8___2: /* CIL Label */ 
#line 28
  pao_ID_____2 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___3;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___3;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___3;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___3;
  } else {

  }
#line 28
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54045;
  case_2___3: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54045;
  case_4___3: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54045;
  case_8___3: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54045;
  switch_default___2: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_54045: ;
#line 28
  goto ldv_54019;
  switch_default___3: /* CIL Label */ 
  {
#line 28
  __bad_size_call_parameter();
  }
#line 28
  goto ldv_54019;
  switch_break: /* CIL Label */ ;
  }
  ldv_54019: ;
#line 29
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_stats___0(struct inode  const  *inode , enum nfs_stat_eventcounters stat ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 34
  tmp = NFS_SERVER(inode);
#line 34
  nfs_inc_server_stats___0((struct nfs_server  const  *)tmp, stat);
  }
#line 35
  return;
}
}
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_server_stats(struct nfs_server  const  *server , enum nfs_stat_bytecounters stat ,
                                          long addend ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 41
  __vpp_verify = (void const   *)0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___0;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___1;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___2;
  } else {

  }
#line 41
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 41
  pao_ID__ = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___0;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8;
  } else {

  }
#line 41
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54066;
  case_2: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54066;
  case_4: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54066;
  case_8: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54066;
  switch_default: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_54066: ;
#line 41
  goto ldv_54071;
  case_2___0: /* CIL Label */ 
#line 41
  pao_ID_____0 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___1;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___1;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___0;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___0;
  } else {

  }
#line 41
  goto switch_default___0;
  case_1___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54077;
  case_2___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54077;
  case_4___0: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54077;
  case_8___0: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54077;
  switch_default___0: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_54077: ;
#line 41
  goto ldv_54071;
  case_4___1: /* CIL Label */ 
#line 41
  pao_ID_____1 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___2;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___2;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___2;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___1;
  } else {

  }
#line 41
  goto switch_default___1;
  case_1___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54087;
  case_2___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54087;
  case_4___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54087;
  case_8___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54087;
  switch_default___1: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_54087: ;
#line 41
  goto ldv_54071;
  case_8___2: /* CIL Label */ 
#line 41
  pao_ID_____2 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___3;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___3;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___3;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___3;
  } else {

  }
#line 41
  goto switch_default___2;
  case_1___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54097;
  case_2___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54097;
  case_4___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54097;
  case_8___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_54097;
  switch_default___2: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_54097: ;
#line 41
  goto ldv_54071;
  switch_default___3: /* CIL Label */ 
  {
#line 41
  __bad_size_call_parameter();
  }
#line 41
  goto ldv_54071;
  switch_break: /* CIL Label */ ;
  }
  ldv_54071: ;
#line 42
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_stats(struct inode  const  *inode , enum nfs_stat_bytecounters stat ,
                                   long addend ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 48
  tmp = NFS_SERVER(inode);
#line 48
  nfs_add_server_stats((struct nfs_server  const  *)tmp, stat, addend);
  }
#line 49
  return;
}
}
#line 243 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
extern void __fscache_wait_on_page_write(struct fscache_cookie * , struct page * ) ;
#line 738 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_wait_on_page_write(struct fscache_cookie *cookie , struct page *page ) 
{ 


  {
#line 741
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 742
    __fscache_wait_on_page_write(cookie, page);
    }
  } else {

  }
#line 743
  return;
}
}
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
void __nfs_fscache_invalidate_page(struct page *page , struct inode *inode ) ;
#line 84
int nfs_fscache_release_page(struct page *page , gfp_t gfp ) ;
#line 96 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
__inline static void nfs_fscache_wait_on_page_write(struct nfs_inode *nfsi , struct page *page ) 
{ 
  int tmp ;

  {
  {
#line 99
  tmp = PagePrivate2((struct page  const  *)page);
  }
#line 99
  if (tmp != 0) {
    {
#line 100
    fscache_wait_on_page_write(nfsi->fscache, page);
    }
  } else {

  }
#line 101
  return;
}
}
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
__inline static void nfs_fscache_invalidate_page(struct page *page , struct inode *inode ) 
{ 
  int tmp ;

  {
  {
#line 110
  tmp = PagePrivate2((struct page  const  *)page);
  }
#line 110
  if (tmp != 0) {
    {
#line 111
    __nfs_fscache_invalidate_page(page, inode);
    }
  } else {

  }
#line 112
  return;
}
}
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_fsync_enter ;
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_fsync_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 156
  tmp___1 = static_key_false(& __tracepoint_nfs_fsync_enter.key);
  }
#line 156
  if ((int )tmp___1) {
    {
#line 156
    rcu_read_lock_sched_notrace();
#line 156
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_fsync_enter.funcs));
#line 156
    tmp = debug_lockdep_rcu_enabled();
    }
#line 156
    if (tmp != 0 && ! __warned) {
      {
#line 156
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 156
      if (tmp___0 == 0) {
        {
#line 156
        __warned = 1;
#line 156
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 156, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 156
    it_func_ptr = _________p1;
#line 156
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55136: 
      {
#line 156
      it_func = it_func_ptr->func;
#line 156
      __data = it_func_ptr->data;
#line 156
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 156
      it_func_ptr = it_func_ptr + 1;
      }
#line 156
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 158
        goto ldv_55136;
      } else {

      }

    } else {

    }
    {
#line 156
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 158
  return;
}
}
#line 157
struct tracepoint __tracepoint_nfs_fsync_exit ;
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_fsync_exit(struct inode  const  *inode , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 157
  tmp___1 = static_key_false(& __tracepoint_nfs_fsync_exit.key);
  }
#line 157
  if ((int )tmp___1) {
    {
#line 157
    rcu_read_lock_sched_notrace();
#line 157
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_fsync_exit.funcs));
#line 157
    tmp = debug_lockdep_rcu_enabled();
    }
#line 157
    if (tmp != 0 && ! __warned) {
      {
#line 157
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 157
      if (tmp___0 == 0) {
        {
#line 157
        __warned = 1;
#line 157
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 157, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 157
    it_func_ptr = _________p1;
#line 157
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55172: 
      {
#line 157
      it_func = it_func_ptr->func;
#line 157
      __data = it_func_ptr->data;
#line 157
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 157
      it_func_ptr = it_func_ptr + 1;
      }
#line 157
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 159
        goto ldv_55172;
      } else {

      }

    } else {

    }
    {
#line 157
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 159
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static struct vm_operations_struct  const  nfs_file_vm_ops ;
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
int nfs_check_flags(int flags ) 
{ 


  {
#line 53
  if ((flags & 17408) == 17408) {
#line 54
    return (-22);
  } else {

  }
#line 56
  return (0);
}
}
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_check_flags[16U]  = 
#line 58
  {      'n',      'f',      's',      '_', 
        'c',      'h',      'e',      'c', 
        'k',      '_',      'f',      'l', 
        'a',      'g',      's',      '\000'};
#line 58
struct kernel_symbol  const  __ksymtab_nfs_check_flags ;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_check_flags  =    {(unsigned long )(& nfs_check_flags), (char const   *)(& __kstrtab_nfs_check_flags)};
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_file_open(struct inode *inode , struct file *filp ) 
{ 
  int res ;
  long tmp ;

  {
  {
#line 68
  tmp = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 68
  if (tmp != 0L) {
    {
#line 68
    printk("\001dNFS: open file(%pD2)\n", filp);
    }
  } else {

  }
  {
#line 70
  nfs_inc_stats___0((struct inode  const  *)inode, 4);
#line 71
  res = nfs_check_flags((int )filp->f_flags);
  }
#line 72
  if (res != 0) {
#line 73
    return (res);
  } else {

  }
  {
#line 75
  res = nfs_open(inode, filp);
  }
#line 76
  return (res);
}
}
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
int nfs_file_release(struct inode *inode , struct file *filp ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
  {
#line 82
  tmp = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 82
  if (tmp != 0L) {
    {
#line 82
    printk("\001dNFS: release(%pD2)\n", filp);
    }
  } else {

  }
  {
#line 84
  nfs_inc_stats___0((struct inode  const  *)inode, 17);
#line 85
  tmp___0 = nfs_release(inode, filp);
  }
#line 85
  return (tmp___0);
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_release[17U]  = 
#line 87
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      'r',      'e',      'l', 
        'e',      'a',      's',      'e', 
        '\000'};
#line 87
struct kernel_symbol  const  __ksymtab_nfs_file_release ;
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_release  =    {(unsigned long )(& nfs_file_release), (char const   *)(& __kstrtab_nfs_file_release)};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_revalidate_file_size(struct inode *inode , struct file *filp ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 102
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 102
  server = tmp;
#line 103
  tmp___0 = NFS_I((struct inode  const  *)inode);
#line 103
  nfsi = tmp___0;
#line 105
  tmp___1 = nfs_have_delegated_attributes(inode);
  }
#line 105
  if (tmp___1 != 0) {
#line 106
    goto out_noreval;
  } else {

  }
#line 108
  if ((filp->f_flags & 16384U) != 0U) {
#line 109
    goto force_reval;
  } else {

  }
#line 110
  if ((nfsi->cache_validity & 32UL) != 0UL) {
#line 111
    goto force_reval;
  } else {

  }
  {
#line 112
  tmp___2 = nfs_attribute_timeout(inode);
  }
#line 112
  if (tmp___2 != 0) {
#line 113
    goto force_reval;
  } else {

  }
  out_noreval: ;
#line 115
  return (0);
  force_reval: 
  {
#line 117
  tmp___3 = __nfs_revalidate_inode(server, inode);
  }
#line 117
  return (tmp___3);
}
}
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
loff_t nfs_file_llseek(struct file *filp , loff_t offset , int whence ) 
{ 
  long tmp ;
  struct inode *inode ;
  int retval ;
  int tmp___0 ;
  loff_t tmp___1 ;

  {
  {
#line 122
  tmp = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 122
  if (tmp != 0L) {
    {
#line 122
    printk("\001dNFS: llseek file(%pD2, %lld, %d)\n", filp, offset, whence);
    }
  } else {

  }
#line 129
  if ((unsigned int )whence > 1U) {
    {
#line 130
    inode = (filp->f_mapping)->host;
#line 132
    tmp___0 = nfs_revalidate_file_size(inode, filp);
#line 132
    retval = tmp___0;
    }
#line 133
    if (retval < 0) {
#line 134
      return ((loff_t )retval);
    } else {

    }
  } else {

  }
  {
#line 137
  tmp___1 = generic_file_llseek(filp, offset, whence);
  }
#line 137
  return (tmp___1);
}
}
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_llseek[16U]  = 
#line 139
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      'l',      'l',      's', 
        'e',      'e',      'k',      '\000'};
#line 139
struct kernel_symbol  const  __ksymtab_nfs_file_llseek ;
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_llseek  =    {(unsigned long )(& nfs_file_llseek), (char const   *)(& __kstrtab_nfs_file_llseek)};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
int nfs_file_flush(struct file *file , fl_owner_t id ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct nfs_rpc_ops  const  *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 147
  tmp = file_inode(file);
#line 147
  inode = tmp;
#line 149
  tmp___0 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 149
  if (tmp___0 != 0L) {
    {
#line 149
    printk("\001dNFS: flush(%pD2)\n", file);
    }
  } else {

  }
  {
#line 151
  nfs_inc_stats___0((struct inode  const  *)inode, 14);
  }
#line 152
  if ((file->f_mode & 2U) == 0U) {
#line 153
    return (0);
  } else {

  }
  {
#line 159
  tmp___2 = NFS_PROTO((struct inode  const  *)inode);
#line 159
  tmp___3 = (*(tmp___2->have_delegation))(inode, 2U);
  }
#line 159
  if (tmp___3 != 0) {
    {
#line 160
    tmp___1 = filemap_fdatawrite(file->f_mapping);
    }
#line 160
    return (tmp___1);
  } else {

  }
  {
#line 163
  tmp___4 = vfs_fsync(file, 0);
  }
#line 163
  return (tmp___4);
}
}
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_flush[15U]  = 
#line 165
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      'f',      'l',      'u', 
        's',      'h',      '\000'};
#line 165
struct kernel_symbol  const  __ksymtab_nfs_file_flush ;
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_flush  =    {(unsigned long )(& nfs_file_flush), (char const   *)(& __kstrtab_nfs_file_flush)};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
ssize_t nfs_file_read(struct kiocb *iocb , struct iov_iter *to ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  ssize_t result ;
  ssize_t tmp___0 ;
  size_t tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
  {
#line 170
  tmp = file_inode(iocb->ki_filp);
#line 170
  inode = tmp;
  }
#line 173
  if (((iocb->ki_filp)->f_flags & 16384U) != 0U) {
    {
#line 174
    tmp___0 = nfs_file_direct_read(iocb, to, iocb->ki_pos, 1);
    }
#line 174
    return (tmp___0);
  } else {

  }
  {
#line 176
  tmp___2 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 176
  if (tmp___2 != 0L) {
    {
#line 176
    tmp___1 = iov_iter_count(to);
#line 176
    printk("\001dNFS: read(%pD2, %zu@%lu)\n", iocb->ki_filp, tmp___1, (unsigned long )iocb->ki_pos);
    }
  } else {

  }
  {
#line 180
  tmp___3 = nfs_revalidate_mapping(inode, (iocb->ki_filp)->f_mapping);
#line 180
  result = (ssize_t )tmp___3;
  }
#line 181
  if (result == 0L) {
    {
#line 182
    result = generic_file_read_iter(iocb, to);
    }
#line 183
    if (result > 0L) {
      {
#line 184
      nfs_add_stats((struct inode  const  *)inode, 0, result);
      }
    } else {

    }
  } else {

  }
#line 186
  return (result);
}
}
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_read[14U]  = 
#line 188
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      'r',      'e',      'a', 
        'd',      '\000'};
#line 188
struct kernel_symbol  const  __ksymtab_nfs_file_read ;
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_read  =    {(unsigned long )(& nfs_file_read), (char const   *)(& __kstrtab_nfs_file_read)};
#line 191 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
ssize_t nfs_file_splice_read(struct file *filp , loff_t *ppos , struct pipe_inode_info *pipe ,
                             size_t count , unsigned int flags ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  ssize_t res ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 195
  tmp = file_inode(filp);
#line 195
  inode = tmp;
#line 198
  tmp___0 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 198
  if (tmp___0 != 0L) {
    {
#line 198
    printk("\001dNFS: splice_read(%pD2, %lu@%Lu)\n", filp, count, (unsigned long long )*ppos);
    }
  } else {

  }
  {
#line 201
  tmp___1 = nfs_revalidate_mapping(inode, filp->f_mapping);
#line 201
  res = (ssize_t )tmp___1;
  }
#line 202
  if (res == 0L) {
    {
#line 203
    res = generic_file_splice_read(filp, ppos, pipe, count, flags);
    }
#line 204
    if (res > 0L) {
      {
#line 205
      nfs_add_stats((struct inode  const  *)inode, 0, res);
      }
    } else {

    }
  } else {

  }
#line 207
  return (res);
}
}
#line 209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_splice_read[21U]  = 
#line 209
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      's',      'p',      'l', 
        'i',      'c',      'e',      '_', 
        'r',      'e',      'a',      'd', 
        '\000'};
#line 209
struct kernel_symbol  const  __ksymtab_nfs_file_splice_read ;
#line 209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_splice_read  =    {(unsigned long )(& nfs_file_splice_read), (char const   *)(& __kstrtab_nfs_file_splice_read)};
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
int nfs_file_mmap(struct file *file , struct vm_area_struct *vma ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  int status ;
  long tmp___0 ;

  {
  {
#line 214
  tmp = file_inode(file);
#line 214
  inode = tmp;
#line 217
  tmp___0 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 217
  if (tmp___0 != 0L) {
    {
#line 217
    printk("\001dNFS: mmap(%pD2)\n", file);
    }
  } else {

  }
  {
#line 222
  status = generic_file_mmap(file, vma);
  }
#line 223
  if (status == 0) {
    {
#line 224
    vma->vm_ops = & nfs_file_vm_ops;
#line 225
    status = nfs_revalidate_mapping(inode, file->f_mapping);
    }
  } else {

  }
#line 227
  return (status);
}
}
#line 229 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_mmap[14U]  = 
#line 229
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      'm',      'm',      'a', 
        'p',      '\000'};
#line 229
struct kernel_symbol  const  __ksymtab_nfs_file_mmap ;
#line 229 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_mmap  =    {(unsigned long )(& nfs_file_mmap), (char const   *)(& __kstrtab_nfs_file_mmap)};
#line 244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
int nfs_file_fsync_commit(struct file *file , loff_t start , loff_t end , int datasync ) 
{ 
  struct nfs_open_context *ctx ;
  struct nfs_open_context *tmp ;
  struct inode *inode ;
  struct inode *tmp___0 ;
  int have_error ;
  int do_resend ;
  int status ;
  int ret ;
  long tmp___1 ;
  int tmp___2 ;
  int __ret ;
  int tmp___3 ;

  {
  {
#line 246
  tmp = nfs_file_open_context(file);
#line 246
  ctx = tmp;
#line 247
  tmp___0 = file_inode(file);
#line 247
  inode = tmp___0;
#line 249
  ret = 0;
#line 251
  tmp___1 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 251
  if (tmp___1 != 0L) {
    {
#line 251
    printk("\001dNFS: fsync file(%pD2) datasync %d\n", file, datasync);
    }
  } else {

  }
  {
#line 253
  nfs_inc_stats___0((struct inode  const  *)inode, 15);
#line 254
  do_resend = test_and_set_bit(1L, (unsigned long volatile   *)(& ctx->flags));
#line 255
  have_error = test_and_set_bit(0L, (unsigned long volatile   *)(& ctx->flags));
#line 256
  status = nfs_commit_inode(inode, 1);
#line 257
  tmp___2 = constant_test_bit(0L, (unsigned long const volatile   *)(& ctx->flags));
#line 257
  have_error = have_error | tmp___2;
  }
#line 258
  if (have_error != 0) {
#line 259
    __ret = 0;
    {
#line 259
    if (4UL == 1UL) {
#line 259
      goto case_1;
    } else {

    }
#line 259
    if (4UL == 2UL) {
#line 259
      goto case_2;
    } else {

    }
#line 259
    if (4UL == 4UL) {
#line 259
      goto case_4;
    } else {

    }
#line 259
    if (4UL == 8UL) {
#line 259
      goto case_8;
    } else {

    }
#line 259
    goto switch_default;
    case_1: /* CIL Label */ 
#line 259
    __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (ctx->error): : "memory",
                         "cc");
#line 259
    goto ldv_56556;
    case_2: /* CIL Label */ 
#line 259
    __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (ctx->error): : "memory",
                         "cc");
#line 259
    goto ldv_56556;
    case_4: /* CIL Label */ 
#line 259
    __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (ctx->error): : "memory",
                         "cc");
#line 259
    goto ldv_56556;
    case_8: /* CIL Label */ 
#line 259
    __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (ctx->error): : "memory",
                         "cc");
#line 259
    goto ldv_56556;
    switch_default: /* CIL Label */ 
    {
#line 259
    __xchg_wrong_size();
    }
    switch_break: /* CIL Label */ ;
    }
    ldv_56556: 
#line 259
    ret = __ret;
#line 260
    if (ret != 0) {
#line 261
      goto out;
    } else {

    }
  } else {

  }
#line 263
  if (status < 0) {
#line 264
    ret = status;
#line 265
    goto out;
  } else {

  }
  {
#line 267
  tmp___3 = constant_test_bit(1L, (unsigned long const volatile   *)(& ctx->flags));
#line 267
  do_resend = do_resend | tmp___3;
  }
#line 268
  if (do_resend != 0) {
#line 269
    ret = -11;
  } else {

  }
  out: ;
#line 271
  return (ret);
}
}
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_fsync_commit[22U]  = 
#line 273
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      'f',      's',      'y', 
        'n',      'c',      '_',      'c', 
        'o',      'm',      'm',      'i', 
        't',      '\000'};
#line 273
struct kernel_symbol  const  __ksymtab_nfs_file_fsync_commit ;
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_fsync_commit  =    {(unsigned long )(& nfs_file_fsync_commit), (char const   *)(& __kstrtab_nfs_file_fsync_commit)};
#line 276 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_file_fsync(struct file *file , loff_t start , loff_t end , int datasync ) 
{ 
  int ret ;
  struct inode *inode ;
  struct inode *tmp ;

  {
  {
#line 279
  tmp = file_inode(file);
#line 279
  inode = tmp;
#line 281
  trace_nfs_fsync_enter((struct inode  const  *)inode);
  }
  ldv_56582: 
  {
#line 284
  ret = filemap_write_and_wait_range(inode->i_mapping, start, end);
  }
#line 285
  if (ret != 0) {
#line 286
    goto ldv_56581;
  } else {

  }
  {
#line 287
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 288
  ret = nfs_file_fsync_commit(file, start, end, datasync);
#line 289
  mutex_unlock(& inode->i_mutex);
#line 295
  start = 0LL;
#line 296
  end = 9223372036854775807LL;
  }
#line 297
  if (ret == -11) {
#line 299
    goto ldv_56582;
  } else {

  }
  ldv_56581: 
  {
#line 299
  trace_nfs_fsync_exit((struct inode  const  *)inode, ret);
  }
#line 300
  return (ret);
}
}
#line 323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_want_read_modify_write(struct file *file , struct page *page , loff_t pos ,
                                      unsigned int len ) 
{ 
  unsigned int pglen ;
  unsigned int tmp ;
  unsigned int offset ;
  unsigned int end ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 326
  tmp = nfs_page_length(page);
#line 326
  pglen = tmp;
#line 327
  offset = (unsigned int )pos & 4095U;
#line 328
  end = offset + len;
  }
#line 330
  if ((int )file->f_mode & 1) {
    {
#line 330
    tmp___0 = PageUptodate(page);
    }
#line 330
    if (tmp___0 == 0) {
      {
#line 330
      tmp___1 = PagePrivate((struct page  const  *)page);
      }
#line 330
      if (tmp___1 == 0) {
#line 330
        if (pglen != 0U) {
#line 330
          if (end < pglen || offset != 0U) {
#line 335
            return (1);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 336
  return (0);
}
}
#line 347 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_write_begin(struct file *file , struct address_space *mapping , loff_t pos ,
                           unsigned int len , unsigned int flags , struct page **pagep ,
                           void **fsdata ) 
{ 
  int ret ;
  unsigned long index ;
  struct page *page ;
  int once_thru ;
  long tmp ;
  struct nfs_inode *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 352
  index = (unsigned long )(pos >> 12);
#line 354
  once_thru = 0;
#line 356
  tmp = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 356
  if (tmp != 0L) {
    {
#line 356
    printk("\001dNFS: write_begin(%pD2(%lu), %u@%lld)\n", file, (mapping->host)->i_ino,
           len, pos);
    }
  } else {

  }
  start: 
  {
#line 364
  tmp___0 = NFS_I((struct inode  const  *)mapping->host);
#line 364
  ret = wait_on_bit((void *)(& tmp___0->flags), 4, & nfs_wait_bit_killable, 130U);
  }
#line 366
  if (ret != 0) {
#line 367
    return (ret);
  } else {

  }
  {
#line 369
  page = grab_cache_page_write_begin(mapping, index, flags);
  }
#line 370
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 371
    return (-12);
  } else {

  }
  {
#line 372
  *pagep = page;
#line 374
  ret = nfs_flush_incompatible(file, page);
  }
#line 375
  if (ret != 0) {
    {
#line 376
    unlock_page(page);
#line 377
    put_page(page);
    }
  } else
#line 378
  if (once_thru == 0) {
    {
#line 378
    tmp___1 = nfs_want_read_modify_write(file, page, pos, len);
    }
#line 378
    if (tmp___1 != 0) {
      {
#line 380
      once_thru = 1;
#line 381
      ret = nfs_readpage(file, page);
#line 382
      put_page(page);
      }
#line 383
      if (ret == 0) {
#line 384
        goto start;
      } else {

      }
    } else {

    }
  } else {

  }
#line 386
  return (ret);
}
}
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_write_end(struct file *file , struct address_space *mapping , loff_t pos ,
                         unsigned int len , unsigned int copied , struct page *page ,
                         void *fsdata ) 
{ 
  unsigned int offset ;
  struct nfs_open_context *ctx ;
  struct nfs_open_context *tmp ;
  int status ;
  long tmp___0 ;
  unsigned int pglen ;
  unsigned int tmp___1 ;
  unsigned int end ;
  int tmp___2 ;
  struct nfs_inode *tmp___3 ;
  bool tmp___4 ;

  {
  {
#line 393
  offset = (unsigned int )pos & 4095U;
#line 394
  tmp = nfs_file_open_context(file);
#line 394
  ctx = tmp;
#line 397
  tmp___0 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 397
  if (tmp___0 != 0L) {
    {
#line 397
    printk("\001dNFS: write_end(%pD2(%lu), %u@%lld)\n", file, (mapping->host)->i_ino,
           len, pos);
    }
  } else {

  }
  {
#line 404
  tmp___2 = PageUptodate(page);
  }
#line 404
  if (tmp___2 == 0) {
    {
#line 405
    tmp___1 = nfs_page_length(page);
#line 405
    pglen = tmp___1;
#line 406
    end = offset + len;
    }
#line 408
    if (pglen == 0U) {
      {
#line 409
      zero_user_segments(page, 0U, offset, end, 4096U);
#line 411
      SetPageUptodate(page);
      }
    } else
#line 412
    if (end >= pglen) {
      {
#line 413
      zero_user_segment(page, end, 4096U);
      }
#line 414
      if (offset == 0U) {
        {
#line 415
        SetPageUptodate(page);
        }
      } else {

      }
    } else {
      {
#line 417
      zero_user_segment(page, pglen, 4096U);
      }
    }
  } else {

  }
  {
#line 420
  status = nfs_updatepage(file, page, offset, copied);
#line 422
  unlock_page(page);
#line 423
  put_page(page);
  }
#line 425
  if (status < 0) {
#line 426
    return (status);
  } else {

  }
  {
#line 427
  tmp___3 = NFS_I((struct inode  const  *)mapping->host);
#line 427
  tmp___3->write_io = tmp___3->write_io + (__u64 )copied;
#line 429
  tmp___4 = nfs_ctx_key_to_expire(ctx);
  }
#line 429
  if ((int )tmp___4) {
    {
#line 430
    status = nfs_wb_all(mapping->host);
    }
#line 431
    if (status < 0) {
#line 432
      return (status);
    } else {

    }
  } else {

  }
#line 435
  return ((int )copied);
}
}
#line 445 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static void nfs_invalidate_page(struct page *page , unsigned int offset , unsigned int length ) 
{ 
  long tmp ;
  struct address_space *tmp___0 ;

  {
  {
#line 448
  tmp = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 448
  if (tmp != 0L) {
    {
#line 448
    printk("\001dNFS: invalidate_page(%p, %u, %u)\n", page, offset, length);
    }
  } else {

  }
#line 451
  if (offset != 0U || length <= 4095U) {
#line 452
    return;
  } else {

  }
  {
#line 454
  tmp___0 = page_file_mapping(page);
#line 454
  nfs_wb_page_cancel(tmp___0->host, page);
#line 456
  nfs_fscache_invalidate_page(page, (page->__annonCompField47.mapping)->host);
  }
#line 457
  return;
}
}
#line 465 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_release_page(struct page *page , gfp_t gfp ) 
{ 
  struct address_space *mapping ;
  long tmp ;
  int how ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 467
  mapping = page->__annonCompField47.mapping;
#line 469
  tmp = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 469
  if (tmp != 0L) {
    {
#line 469
    printk("\001dNFS: release_page(%p)\n", page);
    }
  } else {

  }
#line 474
  if ((unsigned long )mapping != (unsigned long )((struct address_space *)0) && (gfp & 208U) == 208U) {
    {
#line 474
    tmp___1 = get_current();
    }
#line 474
    if ((tmp___1->flags & 131072U) == 0U) {
      {
#line 476
      how = 1;
#line 479
      tmp___0 = current_is_kswapd();
      }
#line 479
      if (tmp___0 != 0) {
#line 480
        how = 0;
      } else {

      }
      {
#line 481
      nfs_commit_inode(mapping->host, how);
      }
    } else {

    }
  } else {

  }
  {
#line 484
  tmp___2 = PagePrivate((struct page  const  *)page);
  }
#line 484
  if (tmp___2 != 0) {
#line 485
    return (0);
  } else {

  }
  {
#line 486
  tmp___3 = nfs_fscache_release_page(page, gfp);
  }
#line 486
  return (tmp___3);
}
}
#line 489 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static void nfs_check_dirty_writeback(struct page *page , bool *dirty , bool *writeback ) 
{ 
  struct nfs_inode *nfsi ;
  struct address_space *mapping ;
  struct address_space *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 493
  tmp = page_file_mapping(page);
#line 493
  mapping = tmp;
  }
#line 495
  if ((unsigned long )mapping == (unsigned long )((struct address_space *)0)) {
#line 496
    return;
  } else {
    {
#line 495
    tmp___0 = PageSwapCache((struct page  const  *)page);
    }
#line 495
    if (tmp___0 != 0) {
#line 496
      return;
    } else {

    }
  }
  {
#line 503
  nfsi = NFS_I((struct inode  const  *)mapping->host);
#line 504
  tmp___1 = constant_test_bit(7L, (unsigned long const volatile   *)(& nfsi->flags));
  }
#line 504
  if (tmp___1 != 0) {
#line 505
    *writeback = 1;
#line 506
    return;
  } else {

  }
  {
#line 514
  tmp___2 = PagePrivate((struct page  const  *)page);
  }
#line 514
  if (tmp___2 != 0) {
#line 515
    *dirty = 1;
  } else {

  }
#line 516
  return;
}
}
#line 526 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_launder_page(struct page *page ) 
{ 
  struct inode *inode ;
  struct address_space *tmp ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp___0 ;
  loff_t tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
  {
#line 528
  tmp = page_file_mapping(page);
#line 528
  inode = tmp->host;
#line 529
  tmp___0 = NFS_I((struct inode  const  *)inode);
#line 529
  nfsi = tmp___0;
#line 531
  tmp___2 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 531
  if (tmp___2 != 0L) {
    {
#line 531
    tmp___1 = page_offset(page);
#line 531
    printk("\001dNFS: launder_page(%ld, %llu)\n", inode->i_ino, tmp___1);
    }
  } else {

  }
  {
#line 534
  nfs_fscache_wait_on_page_write(nfsi, page);
#line 535
  tmp___3 = nfs_wb_page(inode, page);
  }
#line 535
  return (tmp___3);
}
}
#line 539 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_swap_activate(struct swap_info_struct *sis , struct file *file , sector_t *span ) 
{ 
  struct rpc_clnt *tmp ;
  int tmp___0 ;

  {
  {
#line 542
  *span = (sector_t )sis->pages;
#line 543
  tmp = NFS_CLIENT((struct inode  const  *)(file->f_mapping)->host);
#line 543
  tmp___0 = xs_swapper(tmp->cl_xprt, 1);
  }
#line 543
  return (tmp___0);
}
}
#line 546 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static void nfs_swap_deactivate(struct file *file ) 
{ 
  struct rpc_clnt *tmp ;

  {
  {
#line 548
  tmp = NFS_CLIENT((struct inode  const  *)(file->f_mapping)->host);
#line 548
  xs_swapper(tmp->cl_xprt, 0);
  }
#line 549
  return;
}
}
#line 552 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct address_space_operations  const  nfs_file_aops  = 
#line 552
     {& nfs_writepage, & nfs_readpage, & nfs_writepages, & __set_page_dirty_nobuffers,
    & nfs_readpages, & nfs_write_begin, & nfs_write_end, 0, & nfs_invalidate_page,
    & nfs_release_page, 0, & nfs_direct_IO, 0, & nfs_migrate_page, & nfs_launder_page,
    0, & nfs_check_dirty_writeback, & generic_error_remove_page, & nfs_swap_activate,
    & nfs_swap_deactivate};
#line 578 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_vm_page_mkwrite(struct vm_area_struct *vma , struct vm_fault *vmf ) 
{ 
  struct page *page ;
  struct file *filp ;
  struct inode *inode ;
  struct inode *tmp ;
  unsigned int pagelen ;
  int ret ;
  struct address_space *mapping ;
  loff_t tmp___0 ;
  long tmp___1 ;
  struct nfs_inode *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 580
  page = vmf->page;
#line 581
  filp = vma->vm_file;
#line 582
  tmp = file_inode(filp);
#line 582
  inode = tmp;
#line 584
  ret = 256;
#line 587
  tmp___1 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 587
  if (tmp___1 != 0L) {
    {
#line 587
    tmp___0 = page_offset(page);
#line 587
    printk("\001dNFS: vm_page_mkwrite(%pD2(%lu), offset %lld)\n", filp, ((filp->f_mapping)->host)->i_ino,
           tmp___0);
    }
  } else {

  }
  {
#line 592
  tmp___2 = NFS_I((struct inode  const  *)inode);
#line 592
  nfs_fscache_wait_on_page_write(tmp___2, page);
#line 594
  lock_page(page);
#line 595
  mapping = page_file_mapping(page);
  }
#line 596
  if ((unsigned long )mapping != (unsigned long )inode->i_mapping) {
#line 597
    goto out_unlock;
  } else {

  }
  {
#line 599
  wait_on_page_writeback(page);
#line 601
  pagelen = nfs_page_length(page);
  }
#line 602
  if (pagelen == 0U) {
#line 603
    goto out_unlock;
  } else {

  }
  {
#line 605
  ret = 512;
#line 606
  tmp___3 = nfs_flush_incompatible(filp, page);
  }
#line 606
  if (tmp___3 == 0) {
    {
#line 606
    tmp___4 = nfs_updatepage(filp, page, 0U, pagelen);
    }
#line 606
    if (tmp___4 == 0) {
#line 608
      goto out;
    } else {

    }
  } else {

  }
#line 610
  ret = 2;
  out_unlock: 
  {
#line 612
  unlock_page(page);
  }
  out: ;
#line 614
  return (ret);
}
}
#line 617 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static struct vm_operations_struct  const  nfs_file_vm_ops  = 
#line 617
     {0, 0, & filemap_fault, & filemap_map_pages, & nfs_vm_page_mkwrite, 0, 0, 0, 0,
    0, & generic_file_remap_pages};
#line 624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int nfs_need_sync_write(struct file *filp , struct inode *inode ) 
{ 
  struct nfs_open_context *ctx ;
  int tmp ;
  bool tmp___0 ;

  {
#line 628
  if ((((inode->i_sb)->s_flags & 16UL) != 0UL || (int )inode->i_flags & 1) || (filp->f_flags & 4096U) != 0U) {
#line 629
    return (1);
  } else {

  }
  {
#line 630
  ctx = nfs_file_open_context(filp);
#line 631
  tmp = constant_test_bit(0L, (unsigned long const volatile   *)(& ctx->flags));
  }
#line 631
  if (tmp != 0) {
#line 633
    return (1);
  } else {
    {
#line 631
    tmp___0 = nfs_ctx_key_to_expire(ctx);
    }
#line 631
    if ((int )tmp___0) {
#line 633
      return (1);
    } else {

    }
  }
#line 634
  return (0);
}
}
#line 637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
ssize_t nfs_file_write(struct kiocb *iocb , struct iov_iter *from ) 
{ 
  struct file *file ;
  struct inode *inode ;
  struct inode *tmp ;
  unsigned long written ;
  ssize_t result ;
  size_t count ;
  size_t tmp___0 ;
  loff_t pos ;
  int tmp___1 ;
  ssize_t tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int err ;
  int tmp___5 ;
  int tmp___6 ;

  {
  {
#line 639
  file = iocb->ki_filp;
#line 640
  tmp = file_inode(file);
#line 640
  inode = tmp;
#line 641
  written = 0UL;
#line 643
  tmp___0 = iov_iter_count(from);
#line 643
  count = tmp___0;
#line 644
  pos = iocb->ki_pos;
#line 646
  tmp___1 = nfs_key_timeout_notify(file, inode);
#line 646
  result = (ssize_t )tmp___1;
  }
#line 647
  if (result != 0L) {
#line 648
    return (result);
  } else {

  }
#line 650
  if ((file->f_flags & 16384U) != 0U) {
    {
#line 651
    tmp___2 = nfs_file_direct_write(iocb, from, pos, 1);
    }
#line 651
    return (tmp___2);
  } else {

  }
  {
#line 653
  tmp___3 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 653
  if (tmp___3 != 0L) {
    {
#line 653
    printk("\001dNFS: write(%pD2, %zu@%Ld)\n", file, count, pos);
    }
  } else {

  }
#line 656
  result = -16L;
#line 657
  if ((inode->i_flags & 256U) != 0U) {
#line 658
    goto out_swapfile;
  } else {

  }
#line 662
  if ((file->f_flags & 1024U) != 0U) {
    {
#line 663
    tmp___4 = nfs_revalidate_file_size(inode, file);
#line 663
    result = (ssize_t )tmp___4;
    }
#line 664
    if (result != 0L) {
#line 665
      goto out;
    } else {

    }
  } else {

  }
#line 668
  result = (ssize_t )count;
#line 669
  if (count == 0UL) {
#line 670
    goto out;
  } else {

  }
  {
#line 672
  result = generic_file_write_iter(iocb, from);
  }
#line 673
  if (result > 0L) {
#line 674
    written = (unsigned long )result;
  } else {

  }
#line 677
  if (result >= 0L) {
    {
#line 677
    tmp___6 = nfs_need_sync_write(file, inode);
    }
#line 677
    if (tmp___6 != 0) {
      {
#line 678
      tmp___5 = vfs_fsync(file, 0);
#line 678
      err = tmp___5;
      }
#line 679
      if (err < 0) {
#line 680
        result = (ssize_t )err;
      } else {

      }
    } else {

    }
  } else {

  }
#line 682
  if (result > 0L) {
    {
#line 683
    nfs_add_stats((struct inode  const  *)inode, 1, (long )written);
    }
  } else {

  }
  out: ;
#line 685
  return (result);
  out_swapfile: 
  {
#line 688
  printk("\016NFS: attempt to write to active swap file!\n");
  }
#line 689
  goto out;
}
}
#line 691 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_write[15U]  = 
#line 691
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      'w',      'r',      'i', 
        't',      'e',      '\000'};
#line 691
struct kernel_symbol  const  __ksymtab_nfs_file_write ;
#line 691 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_write  =    {(unsigned long )(& nfs_file_write), (char const   *)(& __kstrtab_nfs_file_write)};
#line 694 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int do_getlk(struct file *filp , int cmd , struct file_lock *fl , int is_local ) 
{ 
  struct inode *inode ;
  int status ;
  unsigned int saved_type ;
  struct nfs_rpc_ops  const  *tmp ;
  int tmp___0 ;
  struct nfs_rpc_ops  const  *tmp___1 ;

  {
  {
#line 696
  inode = (filp->f_mapping)->host;
#line 697
  status = 0;
#line 698
  saved_type = (unsigned int )fl->fl_type;
#line 701
  posix_test_lock(filp, fl);
  }
#line 702
  if ((unsigned int )fl->fl_type != 2U) {
#line 704
    goto out;
  } else {

  }
  {
#line 706
  fl->fl_type = (unsigned char )saved_type;
#line 708
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 708
  tmp___0 = (*(tmp->have_delegation))(inode, 1U);
  }
#line 708
  if (tmp___0 != 0) {
#line 709
    goto out_noconflict;
  } else {

  }
#line 711
  if (is_local != 0) {
#line 712
    goto out_noconflict;
  } else {

  }
  {
#line 714
  tmp___1 = NFS_PROTO((struct inode  const  *)inode);
#line 714
  status = (*(tmp___1->lock))(filp, cmd, fl);
  }
  out: ;
#line 716
  return (status);
  out_noconflict: 
#line 718
  fl->fl_type = 2U;
#line 719
  goto out;
}
}
#line 722 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int do_vfs_lock(struct file *file , struct file_lock *fl ) 
{ 
  int res ;

  {
#line 724
  res = 0;
  {
#line 726
  if ((fl->fl_flags & 3U) == 1U) {
#line 726
    goto case_1;
  } else {

  }
#line 729
  if ((fl->fl_flags & 3U) == 2U) {
#line 729
    goto case_2;
  } else {

  }
#line 732
  goto switch_default;
  case_1: /* CIL Label */ 
  {
#line 727
  res = posix_lock_file_wait(file, fl);
  }
#line 728
  goto ldv_56708;
  case_2: /* CIL Label */ 
  {
#line 730
  res = flock_lock_file_wait(file, fl);
  }
#line 731
  goto ldv_56708;
  switch_default: /* CIL Label */ 
  {
#line 733
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/file.c"),
                       "i" (733), "i" (12UL));
#line 733
  __builtin_unreachable();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_56708: ;
#line 735
  return (res);
}
}
#line 739 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int do_unlk(struct file *filp , int cmd , struct file_lock *fl , int is_local ) 
{ 
  struct inode *inode ;
  struct nfs_lock_context *l_ctx ;
  int status ;
  struct nfs_open_context *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  struct nfs_rpc_ops  const  *tmp___2 ;

  {
  {
#line 741
  inode = (filp->f_mapping)->host;
#line 749
  nfs_sync_mapping(filp->f_mapping);
#line 751
  tmp = nfs_file_open_context(filp);
#line 751
  l_ctx = nfs_get_lock_context(tmp);
#line 752
  tmp___0 = IS_ERR((void const   *)l_ctx);
  }
#line 752
  if (tmp___0) {
#line 752
    tmp___1 = 0;
  } else {
#line 752
    tmp___1 = 1;
  }
#line 752
  if (tmp___1) {
    {
#line 753
    status = nfs_iocounter_wait(& l_ctx->io_count);
#line 754
    nfs_put_lock_context(l_ctx);
    }
#line 755
    if (status < 0) {
#line 756
      return (status);
    } else {

    }
  } else {

  }
#line 767
  if (is_local == 0) {
    {
#line 768
    tmp___2 = NFS_PROTO((struct inode  const  *)inode);
#line 768
    status = (*(tmp___2->lock))(filp, cmd, fl);
    }
  } else {
    {
#line 770
    status = do_vfs_lock(filp, fl);
    }
  }
#line 771
  return (status);
}
}
#line 775 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int is_time_granular(struct timespec *ts ) 
{ 


  {
#line 776
  return (ts->tv_sec == 0L && ts->tv_nsec <= 1000L);
}
}
#line 780 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static int do_setlk(struct file *filp , int cmd , struct file_lock *fl , int is_local ) 
{ 
  struct inode *inode ;
  int status ;
  struct nfs_rpc_ops  const  *tmp ;
  struct nfs_server *tmp___0 ;
  struct nfs_server *tmp___1 ;
  int tmp___2 ;
  struct nfs_rpc_ops  const  *tmp___3 ;
  int tmp___4 ;

  {
  {
#line 782
  inode = (filp->f_mapping)->host;
#line 789
  status = nfs_sync_mapping(filp->f_mapping);
  }
#line 790
  if (status != 0) {
#line 791
    goto out;
  } else {

  }
#line 797
  if (is_local == 0) {
    {
#line 798
    tmp = NFS_PROTO((struct inode  const  *)inode);
#line 798
    status = (*(tmp->lock))(filp, cmd, fl);
    }
  } else {
    {
#line 800
    status = do_vfs_lock(filp, fl);
    }
  }
#line 801
  if (status < 0) {
#line 802
    goto out;
  } else {

  }
  {
#line 811
  nfs_sync_mapping(filp->f_mapping);
#line 812
  tmp___3 = NFS_PROTO((struct inode  const  *)inode);
#line 812
  tmp___4 = (*(tmp___3->have_delegation))(inode, 1U);
  }
#line 812
  if (tmp___4 == 0) {
    {
#line 813
    tmp___1 = NFS_SERVER((struct inode  const  *)inode);
#line 813
    tmp___2 = is_time_granular(& tmp___1->time_delta);
    }
#line 813
    if (tmp___2 != 0) {
      {
#line 814
      tmp___0 = NFS_SERVER((struct inode  const  *)inode);
#line 814
      __nfs_revalidate_inode(tmp___0, inode);
      }
    } else {
      {
#line 816
      nfs_zap_caches(inode);
      }
    }
  } else {

  }
  out: ;
#line 819
  return (status);
}
}
#line 825 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
int nfs_lock(struct file *filp , int cmd , struct file_lock *fl ) 
{ 
  struct inode *inode ;
  int ret ;
  int is_local ;
  long tmp ;
  int tmp___0 ;
  struct nfs_server *tmp___1 ;
  struct nfs_rpc_ops  const  *tmp___2 ;
  struct nfs_rpc_ops  const  *tmp___3 ;

  {
  {
#line 827
  inode = (filp->f_mapping)->host;
#line 828
  ret = -37;
#line 829
  is_local = 0;
#line 831
  tmp = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 831
  if (tmp != 0L) {
    {
#line 831
    printk("\001dNFS: lock(%pD2, t=%x, fl=%x, r=%lld:%lld)\n", filp, (int )fl->fl_type,
           fl->fl_flags, fl->fl_start, fl->fl_end);
    }
  } else {

  }
  {
#line 835
  nfs_inc_stats___0((struct inode  const  *)inode, 16);
#line 838
  tmp___0 = __mandatory_lock(inode);
  }
#line 838
  if (tmp___0 != 0 && (unsigned int )fl->fl_type != 2U) {
#line 839
    goto out_err;
  } else {

  }
  {
#line 841
  tmp___1 = NFS_SERVER((struct inode  const  *)inode);
  }
#line 841
  if ((tmp___1->flags & 2097152) != 0) {
#line 842
    is_local = 1;
  } else {

  }
  {
#line 844
  tmp___3 = NFS_PROTO((struct inode  const  *)inode);
  }
#line 844
  if ((unsigned long )tmp___3->lock_check_bounds != (unsigned long )((int (*/* const  */)(struct file_lock  const  * ))0)) {
    {
#line 845
    tmp___2 = NFS_PROTO((struct inode  const  *)inode);
#line 845
    ret = (*(tmp___2->lock_check_bounds))((struct file_lock  const  *)fl);
    }
#line 846
    if (ret < 0) {
#line 847
      goto out_err;
    } else {

    }
  } else {

  }
#line 850
  if (cmd == 5) {
    {
#line 851
    ret = do_getlk(filp, cmd, fl, is_local);
    }
  } else
#line 852
  if ((unsigned int )fl->fl_type == 2U) {
    {
#line 853
    ret = do_unlk(filp, cmd, fl, is_local);
    }
  } else {
    {
#line 855
    ret = do_setlk(filp, cmd, fl, is_local);
    }
  }
  out_err: ;
#line 857
  return (ret);
}
}
#line 859 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_lock[9U]  = 
#line 859
  {      'n',      'f',      's',      '_', 
        'l',      'o',      'c',      'k', 
        '\000'};
#line 859
struct kernel_symbol  const  __ksymtab_nfs_lock ;
#line 859 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_lock  =    {(unsigned long )(& nfs_lock), (char const   *)(& __kstrtab_nfs_lock)};
#line 864 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
int nfs_flock(struct file *filp , int cmd , struct file_lock *fl ) 
{ 
  struct inode *inode ;
  int is_local ;
  long tmp ;
  struct nfs_server *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 866
  inode = (filp->f_mapping)->host;
#line 867
  is_local = 0;
#line 869
  tmp = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 869
  if (tmp != 0L) {
    {
#line 869
    printk("\001dNFS: flock(%pD2, t=%x, fl=%x)\n", filp, (int )fl->fl_type, fl->fl_flags);
    }
  } else {

  }
#line 872
  if ((fl->fl_flags & 2U) == 0U) {
#line 873
    return (-37);
  } else {

  }
#line 881
  if (((int )fl->fl_type & 32) != 0) {
#line 882
    return (-22);
  } else {

  }
  {
#line 884
  tmp___0 = NFS_SERVER((struct inode  const  *)inode);
  }
#line 884
  if ((tmp___0->flags & 1048576) != 0) {
#line 885
    is_local = 1;
  } else {

  }
#line 888
  if ((unsigned int )fl->fl_type == 2U) {
    {
#line 889
    tmp___1 = do_unlk(filp, cmd, fl, is_local);
    }
#line 889
    return (tmp___1);
  } else {

  }
  {
#line 890
  tmp___2 = do_setlk(filp, cmd, fl, is_local);
  }
#line 890
  return (tmp___2);
}
}
#line 892 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_flock[10U]  = 
#line 892
  {      'n',      'f',      's',      '_', 
        'f',      'l',      'o',      'c', 
        'k',      '\000'};
#line 892
struct kernel_symbol  const  __ksymtab_nfs_flock ;
#line 892 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_flock  =    {(unsigned long )(& nfs_flock), (char const   *)(& __kstrtab_nfs_flock)};
#line 898 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
int nfs_setlease(struct file *file , long arg , struct file_lock **fl ) 
{ 
  long tmp ;

  {
  {
#line 900
  tmp = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 900
  if (tmp != 0L) {
    {
#line 900
    printk("\001dNFS: setlease(%pD2, arg=%ld)\n", file, arg);
    }
  } else {

  }
#line 901
  return (-22);
}
}
#line 903 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_setlease[13U]  = 
#line 903
  {      'n',      'f',      's',      '_', 
        's',      'e',      't',      'l', 
        'e',      'a',      's',      'e', 
        '\000'};
#line 903
struct kernel_symbol  const  __ksymtab_nfs_setlease ;
#line 903 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_setlease  =    {(unsigned long )(& nfs_setlease), (char const   *)(& __kstrtab_nfs_setlease)};
#line 905 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct file_operations  const  nfs_file_operations  = 
#line 905
     {0, & nfs_file_llseek, & new_sync_read, & new_sync_write, 0, 0, & nfs_file_read,
    & nfs_file_write, 0, 0, 0, 0, & nfs_file_mmap, & nfs_file_open, & nfs_file_flush,
    & nfs_file_release, & nfs_file_fsync, 0, 0, & nfs_lock, 0, 0, & nfs_check_flags,
    & nfs_flock, & iter_file_splice_write, & nfs_file_splice_read, & nfs_setlease,
    0, 0};
#line 923 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
static char const   __kstrtab_nfs_file_operations[20U]  = 
#line 923
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      'o',      'p',      'e', 
        'r',      'a',      't',      'i', 
        'o',      'n',      's',      '\000'};
#line 923
struct kernel_symbol  const  __ksymtab_nfs_file_operations ;
#line 923 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/file.c"
struct kernel_symbol  const  __ksymtab_nfs_file_operations  =    {(unsigned long )(& nfs_file_operations), (char const   *)(& __kstrtab_nfs_file_operations)};
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_3(void *arg0 ) ;
#line 236
void ldv_character_driver_scenario_callback_3_22(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) ;
#line 237
void ldv_character_driver_scenario_callback_3_25(int (*arg0)(struct file * , fl_owner_t  ) ,
                                                 struct file *arg1 , struct files_struct *arg2 ) ;
#line 238
void ldv_character_driver_scenario_callback_3_28(int (*arg0)(struct file * , loff_t  ,
                                                             loff_t  , int  ) , struct file *arg1 ,
                                                 long long arg2 , long long arg3 ,
                                                 int arg4 ) ;
#line 239
void ldv_character_driver_scenario_callback_3_31(int (*arg0)(struct file * , struct dir_context * ) ,
                                                 struct file *arg1 , struct dir_context *arg2 ) ;
#line 240
void ldv_character_driver_scenario_callback_3_34(loff_t (*arg0)(struct file * , loff_t  ,
                                                                int  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) ;
#line 241
void ldv_character_driver_scenario_callback_3_37(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) ;
#line 242
void ldv_character_driver_scenario_callback_3_40(int (*arg0)(struct file * , struct vm_area_struct * ) ,
                                                 struct file *arg1 , struct vm_area_struct *arg2 ) ;
#line 243
void ldv_character_driver_scenario_callback_3_43(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 244
void ldv_character_driver_scenario_callback_3_46(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) ;
#line 245
void ldv_character_driver_scenario_callback_3_47(int (*arg0)(struct file * , ssize_t  ,
                                                             struct file_lock ** ) ,
                                                 struct file *arg1 , long arg2 , struct file_lock **arg3 ) ;
#line 246
void ldv_character_driver_scenario_callback_3_5(int (*arg0)(int  ) , int arg1 ) ;
#line 247
void ldv_character_driver_scenario_callback_3_50(ssize_t (*arg0)(struct file * , loff_t * ,
                                                                 struct pipe_inode_info * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct file *arg1 , long long *arg2 ,
                                                 struct pipe_inode_info *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) ;
#line 248
void ldv_character_driver_scenario_callback_3_53(ssize_t (*arg0)(struct pipe_inode_info * ,
                                                                 struct file * , loff_t * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct pipe_inode_info *arg1 , struct file *arg2 ,
                                                 long long *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) ;
#line 249
void ldv_character_driver_scenario_callback_3_56(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) ;
#line 250
int ldv_character_driver_scenario_probe_3_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 251
void ldv_character_driver_scenario_release_3_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 252
void ldv_character_driver_scenario_write_3_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_3(void *arg0 ) 
{ 
  int (*ldv_3_callback_check_flags)(int  ) ;
  int (*ldv_3_callback_flock)(struct file * , int  , struct file_lock * ) ;
  int (*ldv_3_callback_flush)(struct file * , fl_owner_t  ) ;
  int (*ldv_3_callback_fsync)(struct file * , loff_t  , loff_t  , int  ) ;
  int (*ldv_3_callback_iterate)(struct file * , struct dir_context * ) ;
  loff_t (*ldv_3_callback_llseek)(struct file * , loff_t  , int  ) ;
  int (*ldv_3_callback_lock)(struct file * , int  , struct file_lock * ) ;
  int (*ldv_3_callback_mmap)(struct file * , struct vm_area_struct * ) ;
  ssize_t (*ldv_3_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  ssize_t (*ldv_3_callback_read_iter)(struct kiocb * , struct iov_iter * ) ;
  int (*ldv_3_callback_setlease)(struct file * , ssize_t  , struct file_lock ** ) ;
  ssize_t (*ldv_3_callback_splice_read)(struct file * , loff_t * , struct pipe_inode_info * ,
                                        size_t  , rpc_authflavor_t  ) ;
  ssize_t (*ldv_3_callback_splice_write)(struct pipe_inode_info * , struct file * ,
                                         loff_t * , size_t  , rpc_authflavor_t  ) ;
  ssize_t (*ldv_3_callback_write_iter)(struct kiocb * , struct iov_iter * ) ;
  struct file_operations *ldv_3_container_file_operations ;
  int ldv_3_ldv_param_22_1_default ;
  struct files_struct *ldv_3_ldv_param_25_1_default ;
  long long ldv_3_ldv_param_28_1_default ;
  long long ldv_3_ldv_param_28_2_default ;
  int ldv_3_ldv_param_28_3_default ;
  struct dir_context *ldv_3_ldv_param_31_1_default ;
  long long ldv_3_ldv_param_34_1_default ;
  int ldv_3_ldv_param_34_2_default ;
  int ldv_3_ldv_param_37_1_default ;
  struct vm_area_struct *ldv_3_ldv_param_40_1_default ;
  char *ldv_3_ldv_param_43_1_default ;
  long long *ldv_3_ldv_param_43_3_default ;
  long ldv_3_ldv_param_47_1_default ;
  char *ldv_3_ldv_param_4_1_default ;
  long long *ldv_3_ldv_param_4_3_default ;
  long long *ldv_3_ldv_param_50_1_default ;
  unsigned int ldv_3_ldv_param_50_4_default ;
  struct pipe_inode_info *ldv_3_ldv_param_53_0_default ;
  long long *ldv_3_ldv_param_53_2_default ;
  unsigned int ldv_3_ldv_param_53_4_default ;
  int ldv_3_ldv_param_5_0_default ;
  struct file *ldv_3_resource_file ;
  struct inode *ldv_3_resource_inode ;
  struct kiocb *ldv_3_resource_struct_kiocb_ptr ;
  int ldv_3_ret_default ;
  struct file_lock *ldv_3_size_cnt_struct_file_lock_ptr ;
  struct iov_iter *ldv_3_size_cnt_struct_iov_iter_ptr ;
  struct pipe_inode_info *ldv_3_size_cnt_struct_pipe_inode_info_ptr ;
  size_t ldv_3_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  void *tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;

  {
  {
#line 310
  ldv_3_ret_default = ldv_undef_int();
#line 312
  ldv_free(arg0);
#line 316
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 316
  ldv_3_container_file_operations = (struct file_operations *)tmp;
#line 320
  tmp___0 = ldv_xmalloc(512UL);
#line 320
  ldv_3_resource_file = (struct file *)tmp___0;
#line 321
  tmp___1 = ldv_xmalloc(1032UL);
#line 321
  ldv_3_resource_inode = (struct inode *)tmp___1;
#line 322
  tmp___2 = ldv_xmalloc_unknown_size(0UL);
#line 322
  ldv_3_resource_struct_kiocb_ptr = (struct kiocb *)tmp___2;
#line 323
  tmp___3 = ldv_undef_int();
#line 323
  ldv_3_size_cnt_struct_file_lock_ptr = (struct file_lock *)((long )tmp___3);
  }
#line 330
  goto ldv_main_3;
#line 332
  return;
  ldv_main_3: 
  {
#line 338
  tmp___5 = ldv_undef_int();
  }
#line 338
  if (tmp___5 != 0) {
    {
#line 341
    ldv_3_ret_default = ldv_character_driver_scenario_probe_3_13(ldv_3_container_file_operations->open,
                                                                 ldv_3_resource_inode,
                                                                 ldv_3_resource_file);
#line 343
    ldv_3_ret_default = ldv_filter_err_code(ldv_3_ret_default);
#line 346
    tmp___4 = ldv_undef_int();
    }
#line 346
    if (tmp___4 != 0) {
      {
#line 348
      __VERIFIER_assume(ldv_3_ret_default == 0);
      }
#line 355
      goto ldv_call_3;
    } else {
      {
#line 359
      __VERIFIER_assume(ldv_3_ret_default != 0);
      }
#line 366
      goto ldv_main_3;
    }
  } else {
    {
#line 371
    ldv_free((void *)ldv_3_resource_file);
#line 372
    ldv_free((void *)ldv_3_resource_inode);
#line 373
    ldv_free((void *)ldv_3_resource_struct_kiocb_ptr);
#line 377
    ldv_free((void *)ldv_3_container_file_operations);
    }
#line 385
    return;
  }
#line 388
  return;
  ldv_call_3: 
  {
#line 394
  tmp___6 = ldv_undef_int();
  }
  {
#line 395
  if (tmp___6 == 1) {
#line 395
    goto case_1;
  } else {

  }
#line 424
  if (tmp___6 == 2) {
#line 424
    goto case_2;
  } else {

  }
#line 437
  if (tmp___6 == 3) {
#line 437
    goto case_3;
  } else {

  }
#line 642
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 397
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 397
  ldv_3_ldv_param_4_1_default = (char *)tmp___7;
#line 398
  tmp___8 = ldv_xmalloc_unknown_size(0UL);
#line 398
  ldv_3_ldv_param_4_3_default = (long long *)tmp___8;
#line 407
  __VERIFIER_assume((unsigned long )ldv_3_size_cnt_struct_file_lock_ptr <= (unsigned long )((struct file_lock *)2147479552));
#line 409
  ldv_character_driver_scenario_write_3_4((ssize_t (*)(struct file * , char * , size_t  ,
                                                       loff_t * ))ldv_3_container_file_operations->write,
                                          ldv_3_resource_file, ldv_3_ldv_param_4_1_default,
                                          ldv_3_size_cnt_write_size, ldv_3_ldv_param_4_3_default);
#line 413
  ldv_free((void *)ldv_3_ldv_param_4_1_default);
#line 414
  ldv_free((void *)ldv_3_ldv_param_4_3_default);
  }
#line 421
  goto ldv_call_3;
  case_2: /* CIL Label */ 
  {
#line 427
  ldv_character_driver_scenario_release_3_2(ldv_3_container_file_operations->release,
                                            ldv_3_resource_inode, ldv_3_resource_file);
  }
#line 434
  goto ldv_main_3;
  case_3: /* CIL Label */ 
  {
#line 441
  tmp___9 = ldv_undef_int();
  }
  {
#line 442
  if (tmp___9 == 1) {
#line 442
    goto case_1___0;
  } else {

  }
#line 450
  if (tmp___9 == 2) {
#line 450
    goto case_2___0;
  } else {

  }
#line 468
  if (tmp___9 == 3) {
#line 468
    goto case_3___0;
  } else {

  }
#line 484
  if (tmp___9 == 4) {
#line 484
    goto case_4;
  } else {

  }
#line 498
  if (tmp___9 == 5) {
#line 498
    goto case_5;
  } else {

  }
#line 506
  if (tmp___9 == 6) {
#line 506
    goto case_6;
  } else {

  }
#line 524
  if (tmp___9 == 7) {
#line 524
    goto case_7;
  } else {

  }
#line 540
  if (tmp___9 == 8) {
#line 540
    goto case_8;
  } else {

  }
#line 554
  if (tmp___9 == 9) {
#line 554
    goto case_9;
  } else {

  }
#line 568
  if (tmp___9 == 10) {
#line 568
    goto case_10;
  } else {

  }
#line 586
  if (tmp___9 == 11) {
#line 586
    goto case_11;
  } else {

  }
#line 600
  if (tmp___9 == 12) {
#line 600
    goto case_12;
  } else {

  }
#line 616
  if (tmp___9 == 13) {
#line 616
    goto case_13;
  } else {

  }
#line 630
  if (tmp___9 == 14) {
#line 630
    goto case_14;
  } else {

  }
#line 638
  goto switch_default;
  case_1___0: /* CIL Label */ 
  {
#line 445
  ldv_character_driver_scenario_callback_3_56(ldv_3_callback_write_iter, ldv_3_resource_struct_kiocb_ptr,
                                              ldv_3_size_cnt_struct_iov_iter_ptr);
  }
#line 448
  goto ldv_57024;
  case_2___0: /* CIL Label */ 
  {
#line 452
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 452
  ldv_3_ldv_param_53_0_default = (struct pipe_inode_info *)tmp___10;
#line 453
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 453
  ldv_3_ldv_param_53_2_default = (long long *)tmp___11;
#line 458
  ldv_character_driver_scenario_callback_3_53(ldv_3_callback_splice_write, ldv_3_ldv_param_53_0_default,
                                              ldv_3_resource_file, ldv_3_ldv_param_53_2_default,
                                              ldv_3_size_cnt_write_size, ldv_3_ldv_param_53_4_default);
#line 462
  ldv_free((void *)ldv_3_ldv_param_53_0_default);
#line 463
  ldv_free((void *)ldv_3_ldv_param_53_2_default);
  }
#line 466
  goto ldv_57024;
  case_3___0: /* CIL Label */ 
  {
#line 470
  tmp___12 = ldv_xmalloc_unknown_size(0UL);
#line 470
  ldv_3_ldv_param_50_1_default = (long long *)tmp___12;
#line 475
  ldv_character_driver_scenario_callback_3_50(ldv_3_callback_splice_read, ldv_3_resource_file,
                                              ldv_3_ldv_param_50_1_default, ldv_3_size_cnt_struct_pipe_inode_info_ptr,
                                              ldv_3_size_cnt_write_size, ldv_3_ldv_param_50_4_default);
#line 479
  ldv_free((void *)ldv_3_ldv_param_50_1_default);
  }
#line 482
  goto ldv_57024;
  case_4: /* CIL Label */ 
  {
#line 490
  ldv_character_driver_scenario_callback_3_47(ldv_3_callback_setlease, ldv_3_resource_file,
                                              ldv_3_ldv_param_47_1_default, (struct file_lock **)ldv_3_size_cnt_struct_file_lock_ptr);
  }
#line 496
  goto ldv_57024;
  case_5: /* CIL Label */ 
  {
#line 501
  ldv_character_driver_scenario_callback_3_46(ldv_3_callback_read_iter, ldv_3_resource_struct_kiocb_ptr,
                                              ldv_3_size_cnt_struct_iov_iter_ptr);
  }
#line 504
  goto ldv_57024;
  case_6: /* CIL Label */ 
  {
#line 508
  tmp___13 = ldv_xmalloc_unknown_size(0UL);
#line 508
  ldv_3_ldv_param_43_1_default = (char *)tmp___13;
#line 509
  tmp___14 = ldv_xmalloc_unknown_size(0UL);
#line 509
  ldv_3_ldv_param_43_3_default = (long long *)tmp___14;
#line 514
  ldv_character_driver_scenario_callback_3_43(ldv_3_callback_read, ldv_3_resource_file,
                                              ldv_3_ldv_param_43_1_default, ldv_3_size_cnt_write_size,
                                              ldv_3_ldv_param_43_3_default);
#line 518
  ldv_free((void *)ldv_3_ldv_param_43_1_default);
#line 519
  ldv_free((void *)ldv_3_ldv_param_43_3_default);
  }
#line 522
  goto ldv_57024;
  case_7: /* CIL Label */ 
  {
#line 526
  tmp___15 = ldv_xmalloc_unknown_size(0UL);
#line 526
  ldv_3_ldv_param_40_1_default = (struct vm_area_struct *)tmp___15;
#line 531
  ldv_character_driver_scenario_callback_3_40(ldv_3_callback_mmap, ldv_3_resource_file,
                                              ldv_3_ldv_param_40_1_default);
#line 535
  ldv_free((void *)ldv_3_ldv_param_40_1_default);
  }
#line 538
  goto ldv_57024;
  case_8: /* CIL Label */ 
  {
#line 546
  ldv_character_driver_scenario_callback_3_37(ldv_3_callback_lock, ldv_3_resource_file,
                                              ldv_3_ldv_param_37_1_default, ldv_3_size_cnt_struct_file_lock_ptr);
  }
#line 552
  goto ldv_57024;
  case_9: /* CIL Label */ 
  {
#line 560
  ldv_character_driver_scenario_callback_3_34(ldv_3_callback_llseek, ldv_3_resource_file,
                                              ldv_3_ldv_param_34_1_default, ldv_3_ldv_param_34_2_default);
  }
#line 566
  goto ldv_57024;
  case_10: /* CIL Label */ 
  {
#line 570
  tmp___16 = ldv_xmalloc_unknown_size(0UL);
#line 570
  ldv_3_ldv_param_31_1_default = (struct dir_context *)tmp___16;
  }
#line 574
  if ((unsigned long )ldv_3_callback_iterate != (unsigned long )((int (*)(struct file * ,
                                                                          struct dir_context * ))0)) {
    {
#line 576
    ldv_character_driver_scenario_callback_3_31(ldv_3_callback_iterate, ldv_3_resource_file,
                                                ldv_3_ldv_param_31_1_default);
    }
  } else {

  }
  {
#line 581
  ldv_free((void *)ldv_3_ldv_param_31_1_default);
  }
#line 584
  goto ldv_57024;
  case_11: /* CIL Label */ 
  {
#line 592
  ldv_character_driver_scenario_callback_3_28(ldv_3_callback_fsync, ldv_3_resource_file,
                                              ldv_3_ldv_param_28_1_default, ldv_3_ldv_param_28_2_default,
                                              ldv_3_ldv_param_28_3_default);
  }
#line 598
  goto ldv_57024;
  case_12: /* CIL Label */ 
  {
#line 602
  tmp___17 = ldv_xmalloc_unknown_size(0UL);
#line 602
  ldv_3_ldv_param_25_1_default = (struct files_struct *)tmp___17;
#line 607
  ldv_character_driver_scenario_callback_3_25(ldv_3_callback_flush, ldv_3_resource_file,
                                              ldv_3_ldv_param_25_1_default);
#line 611
  ldv_free((void *)ldv_3_ldv_param_25_1_default);
  }
#line 614
  goto ldv_57024;
  case_13: /* CIL Label */ 
  {
#line 622
  ldv_character_driver_scenario_callback_3_22(ldv_3_callback_flock, ldv_3_resource_file,
                                              ldv_3_ldv_param_22_1_default, ldv_3_size_cnt_struct_file_lock_ptr);
  }
#line 628
  goto ldv_57024;
  case_14: /* CIL Label */ 
  {
#line 633
  ldv_character_driver_scenario_callback_3_5(ldv_3_callback_check_flags, ldv_3_ldv_param_5_0_default);
  }
#line 636
  goto ldv_57024;
  switch_default: /* CIL Label */ 
  {
#line 638
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_57024: ;
#line 640
  goto ldv_57039;
  switch_default___0: /* CIL Label */ 
  {
#line 642
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_57039: ;
#line 651
  goto ldv_call_3;
#line 653
  return;
}
}
#line 658 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_22(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) 
{ 


  {
  {
#line 659
  nfs_flock(arg1, arg2, arg3);
  }
#line 660
  return;
}
}
#line 663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_25(int (*arg0)(struct file * , fl_owner_t  ) ,
                                                 struct file *arg1 , struct files_struct *arg2 ) 
{ 


  {
  {
#line 664
  nfs_file_flush(arg1, arg2);
  }
#line 665
  return;
}
}
#line 668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_28(int (*arg0)(struct file * , loff_t  ,
                                                             loff_t  , int  ) , struct file *arg1 ,
                                                 long long arg2 , long long arg3 ,
                                                 int arg4 ) 
{ 


  {
  {
#line 669
  nfs_file_fsync(arg1, arg2, arg3, arg4);
  }
#line 670
  return;
}
}
#line 673 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_31(int (*arg0)(struct file * , struct dir_context * ) ,
                                                 struct file *arg1 , struct dir_context *arg2 ) 
{ 


  {
  {
#line 674
  (*arg0)(arg1, arg2);
  }
#line 675
  return;
}
}
#line 678 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_34(loff_t (*arg0)(struct file * , loff_t  ,
                                                                int  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) 
{ 


  {
  {
#line 679
  nfs_file_llseek(arg1, arg2, arg3);
  }
#line 680
  return;
}
}
#line 683 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_37(int (*arg0)(struct file * , int  ,
                                                             struct file_lock * ) ,
                                                 struct file *arg1 , int arg2 , struct file_lock *arg3 ) 
{ 


  {
  {
#line 684
  nfs_lock(arg1, arg2, arg3);
  }
#line 685
  return;
}
}
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_40(int (*arg0)(struct file * , struct vm_area_struct * ) ,
                                                 struct file *arg1 , struct vm_area_struct *arg2 ) 
{ 


  {
  {
#line 689
  nfs_file_mmap(arg1, arg2);
  }
#line 690
  return;
}
}
#line 693 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_43(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 694
  new_sync_read(arg1, arg2, arg3, arg4);
  }
#line 695
  return;
}
}
#line 698 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_46(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) 
{ 


  {
  {
#line 699
  nfs_file_read(arg1, arg2);
  }
#line 700
  return;
}
}
#line 703 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_47(int (*arg0)(struct file * , ssize_t  ,
                                                             struct file_lock ** ) ,
                                                 struct file *arg1 , long arg2 , struct file_lock **arg3 ) 
{ 


  {
  {
#line 704
  nfs_setlease(arg1, arg2, arg3);
  }
#line 705
  return;
}
}
#line 708 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_5(int (*arg0)(int  ) , int arg1 ) 
{ 


  {
  {
#line 709
  nfs_check_flags(arg1);
  }
#line 710
  return;
}
}
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_50(ssize_t (*arg0)(struct file * , loff_t * ,
                                                                 struct pipe_inode_info * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct file *arg1 , long long *arg2 ,
                                                 struct pipe_inode_info *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) 
{ 


  {
  {
#line 714
  nfs_file_splice_read(arg1, arg2, arg3, arg4, arg5);
  }
#line 715
  return;
}
}
#line 718 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_53(ssize_t (*arg0)(struct pipe_inode_info * ,
                                                                 struct file * , loff_t * ,
                                                                 size_t  , rpc_authflavor_t  ) ,
                                                 struct pipe_inode_info *arg1 , struct file *arg2 ,
                                                 long long *arg3 , unsigned long arg4 ,
                                                 unsigned int arg5 ) 
{ 


  {
  {
#line 719
  iter_file_splice_write(arg1, arg2, arg3, arg4, arg5);
  }
#line 720
  return;
}
}
#line 723 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_callback_3_56(ssize_t (*arg0)(struct kiocb * ,
                                                                 struct iov_iter * ) ,
                                                 struct kiocb *arg1 , struct iov_iter *arg2 ) 
{ 


  {
  {
#line 724
  nfs_file_write(arg1, arg2);
  }
#line 725
  return;
}
}
#line 728 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
int ldv_character_driver_scenario_probe_3_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 729
  tmp = nfs_file_open(arg1, arg2);
  }
#line 729
  return (tmp);
}
}
#line 733 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_release_3_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 734
  nfs_file_release(arg1, arg2);
  }
#line 735
  return;
}
}
#line 738 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_file.c.aux"
void ldv_character_driver_scenario_write_3_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 739
  new_sync_write(arg1, (char const   *)arg2, arg3, arg4);
  }
#line 740
  return;
}
}
#line 597 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 599
  h->next = (struct hlist_node *)0;
#line 600
  h->pprev = (struct hlist_node **)0;
#line 601
  return;
}
}
#line 603 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 605
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 615
  next = n->next;
#line 616
  pprev = n->pprev;
#line 617
  *pprev = next;
#line 618
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 619
    next->pprev = pprev;
  } else {

  }
#line 620
  return;
}
}
#line 629 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
  {
#line 631
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
  }
#line 631
  if (tmp == 0) {
    {
#line 632
    __hlist_del(n);
#line 633
    INIT_HLIST_NODE(n);
    }
  } else {

  }
#line 635
  return;
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 377
__inline static void ldv_spin_lock_82(spinlock_t *lock ) ;
#line 381
__inline static void ldv_spin_lock_82(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 251 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
extern struct dentry *d_obtain_alias(struct inode * ) ;
#line 258
extern struct dentry *d_make_root(struct inode * ) ;
#line 1885 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
extern void security_d_instantiate(struct dentry * , struct inode * ) ;
#line 393 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct dentry *nfs_get_root(struct super_block *sb , struct nfs_fh *mntfh , char const   *devname ) ;
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/getroot.c"
static int nfs_superblock_set_dummy_root(struct super_block *sb , struct inode *inode ) 
{ 


  {
#line 46
  if ((unsigned long )sb->s_root == (unsigned long )((struct dentry *)0)) {
    {
#line 47
    sb->s_root = d_make_root(inode);
    }
#line 48
    if ((unsigned long )sb->s_root == (unsigned long )((struct dentry *)0)) {
#line 49
      return (-12);
    } else {

    }
    {
#line 50
    ihold(inode);
#line 59
    ldv_spin_lock_72(& ((sb->s_root)->d_inode)->i_lock);
#line 60
    ldv_spin_lock_82(& (sb->s_root)->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 61
    hlist_del_init(& (sb->s_root)->d_alias);
#line 62
    ldv_spin_unlock_83___0(& (sb->s_root)->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 63
    ldv_spin_unlock_73(& ((sb->s_root)->d_inode)->i_lock);
    }
  } else {

  }
#line 65
  return (0);
}
}
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/getroot.c"
struct dentry *nfs_get_root(struct super_block *sb , struct nfs_fh *mntfh , char const   *devname ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  struct nfs_fsinfo fsinfo ;
  struct dentry *ret ;
  struct inode *inode ;
  void *name ;
  char *tmp___0 ;
  int error ;
  void *tmp___1 ;
  void *tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;
  long tmp___5 ;
  void *tmp___6 ;
  bool tmp___7 ;
  void *tmp___8 ;
  long tmp___9 ;
  bool tmp___10 ;

  {
  {
#line 74
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 74
  server = tmp;
#line 78
  tmp___0 = kstrdup(devname, 208U);
#line 78
  name = (void *)tmp___0;
  }
#line 81
  if ((unsigned long )name == (unsigned long )((void *)0)) {
    {
#line 82
    tmp___1 = ERR_PTR(-12L);
    }
#line 82
    return ((struct dentry *)tmp___1);
  } else {

  }
  {
#line 85
  fsinfo.fattr = nfs_alloc_fattr();
  }
#line 86
  if ((unsigned long )fsinfo.fattr == (unsigned long )((struct nfs_fattr *)0)) {
    {
#line 87
    kfree((void const   *)name);
#line 88
    tmp___2 = ERR_PTR(-12L);
    }
#line 88
    return ((struct dentry *)tmp___2);
  } else {

  }
  {
#line 91
  error = (*(((server->nfs_client)->rpc_ops)->getroot))(server, mntfh, & fsinfo);
  }
#line 92
  if (error < 0) {
    {
#line 93
    tmp___3 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
    }
#line 93
    if (tmp___3 != 0L) {
      {
#line 93
      printk("\001dnfs_get_root: getattr error = %d\n", - error);
      }
    } else {

    }
    {
#line 94
    tmp___4 = ERR_PTR((long )error);
#line 94
    ret = (struct dentry *)tmp___4;
    }
#line 95
    goto out;
  } else {

  }
  {
#line 98
  inode = nfs_fhget(sb, mntfh, fsinfo.fattr, (struct nfs4_label *)0);
#line 99
  tmp___7 = IS_ERR((void const   *)inode);
  }
#line 99
  if ((int )tmp___7) {
    {
#line 100
    tmp___5 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
    }
#line 100
    if (tmp___5 != 0L) {
      {
#line 100
      printk("\001dnfs_get_root: get root inode failed\n");
      }
    } else {

    }
    {
#line 101
    tmp___6 = ERR_CAST((void const   *)inode);
#line 101
    ret = (struct dentry *)tmp___6;
    }
#line 102
    goto out;
  } else {

  }
  {
#line 105
  error = nfs_superblock_set_dummy_root(sb, inode);
  }
#line 106
  if (error != 0) {
    {
#line 107
    tmp___8 = ERR_PTR((long )error);
#line 107
    ret = (struct dentry *)tmp___8;
    }
#line 108
    goto out;
  } else {

  }
  {
#line 115
  ret = d_obtain_alias(inode);
#line 116
  tmp___10 = IS_ERR((void const   *)ret);
  }
#line 116
  if ((int )tmp___10) {
    {
#line 117
    tmp___9 = __builtin_expect((nfs_debug & 512U) != 0U, 0L);
    }
#line 117
    if (tmp___9 != 0L) {
      {
#line 117
      printk("\001dnfs_get_root: get root dentry failed\n");
      }
    } else {

    }
#line 118
    goto out;
  } else {

  }
  {
#line 121
  security_d_instantiate(ret, inode);
#line 122
  ldv_spin_lock_82(& ret->d_lockref.__annonCompField23.__annonCompField22.lock);
  }
#line 123
  if (((unsigned long )ret == (unsigned long )ret->d_parent && (unsigned long )ret->d_fsdata == (unsigned long )((void *)0)) && (ret->d_flags & 4096U) == 0U) {
#line 125
    ret->d_fsdata = name;
#line 126
    name = (void *)0;
  } else {

  }
  {
#line 128
  ldv_spin_unlock_83___0(& ret->d_lockref.__annonCompField23.__annonCompField22.lock);
  }
  out: 
  {
#line 130
  kfree((void const   *)name);
#line 131
  nfs_free_fattr((struct nfs_fattr  const  *)fsinfo.fattr);
  }
#line 132
  return (ret);
}
}
#line 1 "<compiler builtins>"
int __builtin_bswap32(int  ) ;
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/bitops.h"
__inline static void clear_bit_unlock(long nr , unsigned long volatile   *addr ) 
{ 


  {
  {
#line 133
  __asm__  volatile   ("": : : "memory");
#line 134
  clear_bit(nr, addr);
  }
#line 135
  return;
}
}
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  int tmp ;

  {
  {
#line 60
  tmp = __builtin_bswap32(val);
  }
#line 60
  return ((__u32 )tmp);
}
}
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/swab.h"
__inline static __u32 __swab32p(__u32 const   *p ) 
{ 
  __u32 tmp ;

  {
  {
#line 172
  tmp = __fswab32(*p);
  }
#line 172
  return (tmp);
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __be32_to_cpup(__be32 const   *p ) 
{ 
  __u32 tmp ;

  {
  {
#line 81
  tmp = __swab32p(p);
  }
#line 81
  return (tmp);
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic64_64.h"
__inline static long atomic64_add_return(long i , atomic64_t *v ) 
{ 
  long __ret ;

  {
#line 153
  __ret = i;
  {
#line 153
  if (8UL == 1UL) {
#line 153
    goto case_1;
  } else {

  }
#line 153
  if (8UL == 2UL) {
#line 153
    goto case_2;
  } else {

  }
#line 153
  if (8UL == 4UL) {
#line 153
    goto case_4;
  } else {

  }
#line 153
  if (8UL == 8UL) {
#line 153
    goto case_8;
  } else {

  }
#line 153
  goto switch_default;
  case_1: /* CIL Label */ 
#line 153
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 153
  goto ldv_5608;
  case_2: /* CIL Label */ 
#line 153
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 153
  goto ldv_5608;
  case_4: /* CIL Label */ 
#line 153
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 153
  goto ldv_5608;
  case_8: /* CIL Label */ 
#line 153
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 153
  goto ldv_5608;
  switch_default: /* CIL Label */ 
  {
#line 153
  __xadd_wrong_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_5608: ;
#line 153
  return (i + __ret);
}
}
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/atomic-long.h"
__inline static long atomic_long_inc_return(atomic_long_t *l ) 
{ 
  atomic64_t *v ;
  long tmp ;

  {
  {
#line 113
  v = l;
#line 115
  tmp = atomic64_add_return(1L, v);
  }
#line 115
  return (tmp);
}
}
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
static int ldv___ldv_atomic_dec_and_lock_94(spinlock_t *ldv_func_arg1 ) ;
#line 74
static int ldv___ldv_atomic_dec_and_lock_96(spinlock_t *ldv_func_arg1 ) ;
#line 116
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) ;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.h"
extern void ldv_initialize(void) ;
#line 76
void ldv_check_final_state(void) ;
#line 113
int ldv_post_init(int init_ret_val ) ;
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
  {
#line 91
  tmp___0 = variable_test_bit((long )flag, (unsigned long const volatile   *)(& ti->flags));
  }
#line 91
  return (tmp___0);
}
}
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
__inline static int preempt_count___1(void) 
{ 
  int pfo_ret__ ;

  {
  {
#line 22
  if (4UL == 1UL) {
#line 22
    goto case_1;
  } else {

  }
#line 22
  if (4UL == 2UL) {
#line 22
    goto case_2;
  } else {

  }
#line 22
  if (4UL == 4UL) {
#line 22
    goto case_4;
  } else {

  }
#line 22
  if (4UL == 8UL) {
#line 22
    goto case_8;
  } else {

  }
#line 22
  goto switch_default;
  case_1: /* CIL Label */ 
#line 22
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
#line 22
  goto ldv_6706;
  case_2: /* CIL Label */ 
#line 22
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
#line 22
  goto ldv_6706;
  case_4: /* CIL Label */ 
#line 22
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
#line 22
  goto ldv_6706;
  case_8: /* CIL Label */ 
#line 22
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
#line 22
  goto ldv_6706;
  switch_default: /* CIL Label */ 
  {
#line 22
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6706: ;
#line 22
  return (pfo_ret__ & 2147483647);
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add___2(int val ) 
{ 
  int pao_ID__ ;

  {
#line 75
  pao_ID__ = 0;
  {
#line 75
  if (4UL == 1UL) {
#line 75
    goto case_1;
  } else {

  }
#line 75
  if (4UL == 2UL) {
#line 75
    goto case_2;
  } else {

  }
#line 75
  if (4UL == 4UL) {
#line 75
    goto case_4;
  } else {

  }
#line 75
  if (4UL == 8UL) {
#line 75
    goto case_8;
  } else {

  }
#line 75
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val));
  }
#line 75
  goto ldv_6763;
  case_2: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
#line 75
  goto ldv_6763;
  case_4: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
#line 75
  goto ldv_6763;
  case_8: /* CIL Label */ ;
#line 75
  if (pao_ID__ == 1) {
#line 75
    __asm__  ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
#line 75
  if (pao_ID__ == -1) {
#line 75
    __asm__  ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 75
    __asm__  ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val));
  }
#line 75
  goto ldv_6763;
  switch_default: /* CIL Label */ 
  {
#line 75
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6763: ;
#line 77
  return;
}
}
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub___2(int val ) 
{ 
  int pao_ID__ ;

  {
#line 80
  pao_ID__ = 0;
  {
#line 80
  if (4UL == 1UL) {
#line 80
    goto case_1;
  } else {

  }
#line 80
  if (4UL == 2UL) {
#line 80
    goto case_2;
  } else {

  }
#line 80
  if (4UL == 4UL) {
#line 80
    goto case_4;
  } else {

  }
#line 80
  if (4UL == 8UL) {
#line 80
    goto case_8;
  } else {

  }
#line 80
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val));
  }
#line 80
  goto ldv_6775;
  case_2: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
#line 80
  goto ldv_6775;
  case_4: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
#line 80
  goto ldv_6775;
  case_8: /* CIL Label */ ;
#line 80
  if (pao_ID__ == 1) {
#line 80
    __asm__  ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
#line 80
  if (pao_ID__ == -1) {
#line 80
    __asm__  ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
#line 80
    __asm__  ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val));
  }
#line 80
  goto ldv_6775;
  switch_default: /* CIL Label */ 
  {
#line 80
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6775: ;
#line 82
  return;
}
}
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 377
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 381
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 385
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 389
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 393
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 397
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 401
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 405
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 409
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 413
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 429
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 433
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 437
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 429
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 433
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 437
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 441
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 445
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 449
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 453
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 457
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 461
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 465
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 469
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 473
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 477
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 481
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 485
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 489
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 493
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 497
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 152
extern void wake_up_bit(void * , int  ) ;
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
extern void call_rcu_sched(struct callback_head * , void (*)(struct callback_head * ) ) ;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcutree.h"
extern void rcu_barrier(void) ;
#line 443 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held___1(void) 
{ 
  int lockdep_opinion ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned long _flags ;
  int tmp___5 ;
  int tmp___6 ;

  {
  {
#line 445
  lockdep_opinion = 0;
#line 447
  tmp = debug_lockdep_rcu_enabled();
  }
#line 447
  if (tmp == 0) {
#line 448
    return (1);
  } else {

  }
  {
#line 449
  tmp___0 = rcu_is_watching();
  }
#line 449
  if (tmp___0) {
#line 449
    tmp___1 = 0;
  } else {
#line 449
    tmp___1 = 1;
  }
#line 449
  if (tmp___1) {
#line 450
    return (0);
  } else {

  }
  {
#line 451
  tmp___2 = rcu_lockdep_current_cpu_online();
  }
#line 451
  if (tmp___2) {
#line 451
    tmp___3 = 0;
  } else {
#line 451
    tmp___3 = 1;
  }
#line 451
  if (tmp___3) {
#line 452
    return (0);
  } else {

  }
#line 453
  if (debug_locks != 0) {
    {
#line 454
    lockdep_opinion = lock_is_held(& rcu_sched_lock_map);
    }
  } else {

  }
#line 455
  if (lockdep_opinion != 0) {
#line 455
    tmp___6 = 1;
  } else {
    {
#line 455
    tmp___4 = preempt_count___1();
    }
#line 455
    if (tmp___4 != 0) {
#line 455
      tmp___6 = 1;
    } else {
      {
#line 455
      _flags = arch_local_save_flags();
#line 455
      tmp___5 = arch_irqs_disabled_flags(_flags);
      }
#line 455
      if (tmp___5 != 0) {
#line 455
        tmp___6 = 1;
      } else {
#line 455
        tmp___6 = 0;
      }
    }
  }
#line 455
  return (tmp___6);
}
}
#line 935 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace___1(void) 
{ 


  {
  {
#line 937
  __preempt_count_add___2(1);
#line 937
  __asm__  volatile   ("": : : "memory");
  }
#line 939
  return;
}
}
#line 956 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace___1(void) 
{ 


  {
  {
#line 959
  __asm__  volatile   ("": : : "memory");
#line 959
  __preempt_count_sub___2(1);
  }
#line 960
  return;
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/time.h"
__inline static int timespec_equal(struct timespec  const  *a , struct timespec  const  *b ) 
{ 


  {
#line 25
  return ((long )a->tv_sec == (long )b->tv_sec && (long )a->tv_nsec == (long )b->tv_nsec);
}
}
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/time.h"
__inline static int timespec_compare(struct timespec  const  *lhs , struct timespec  const  *rhs ) 
{ 


  {
#line 35
  if ((long )lhs->tv_sec < (long )rhs->tv_sec) {
#line 36
    return (-1);
  } else {

  }
#line 37
  if ((long )lhs->tv_sec > (long )rhs->tv_sec) {
#line 38
    return (1);
  } else {

  }
#line 39
  return ((int )((unsigned int )lhs->tv_nsec - (unsigned int )rhs->tv_nsec));
}
}
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
extern struct user_namespace init_user_ns ;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
__inline static uid_t __kuid_val(kuid_t uid ) 
{ 


  {
#line 34
  return (uid.val);
}
}
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
__inline static gid_t __kgid_val(kgid_t gid ) 
{ 


  {
#line 39
  return (gid.val);
}
}
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
__inline static bool uid_eq(kuid_t left , kuid_t right ) 
{ 
  uid_t tmp ;
  uid_t tmp___0 ;

  {
  {
#line 50
  tmp = __kuid_val(left);
#line 50
  tmp___0 = __kuid_val(right);
  }
#line 50
  return (tmp == tmp___0);
}
}
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uidgid.h"
__inline static bool gid_eq(kgid_t left , kgid_t right ) 
{ 
  gid_t tmp ;
  gid_t tmp___0 ;

  {
  {
#line 55
  tmp = __kgid_val(left);
#line 55
  tmp___0 = __kgid_val(right);
  }
#line 55
  return (tmp == tmp___0);
}
}
#line 110
extern kuid_t make_kuid(struct user_namespace * , uid_t  ) ;
#line 111
extern kgid_t make_kgid(struct user_namespace * , gid_t  ) ;
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
extern struct workqueue_struct *__alloc_workqueue_key(char const   * , unsigned int  ,
                                                      int  , struct lock_class_key * ,
                                                      char const   *  , ...) ;
#line 424
extern void destroy_workqueue(struct workqueue_struct * ) ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockref.h"
extern void lockref_get(struct lockref * ) ;
#line 360 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
__inline static struct dentry *dget(struct dentry *dentry ) 
{ 


  {
#line 362
  if ((unsigned long )dentry != (unsigned long )((struct dentry *)0)) {
    {
#line 363
    lockref_get(& dentry->d_lockref);
    }
  } else {

  }
#line 364
  return (dentry);
}
}
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore * , char const   * , struct lock_class_key * ) ;
#line 593 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static int inode_unhashed(struct inode *inode ) 
{ 
  int tmp ;

  {
  {
#line 595
  tmp = hlist_unhashed((struct hlist_node  const  *)(& inode->i_hash));
  }
#line 595
  return (tmp);
}
}
#line 662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static void i_size_write(struct inode *inode , loff_t i_size ) 
{ 


  {
#line 675
  inode->i_size = i_size;
#line 676
  return;
}
}
#line 1704
extern void set_nlink(struct inode * , unsigned int  ) ;
#line 2180
extern void init_special_inode(struct inode * , umode_t  , dev_t  ) ;
#line 2213
extern int invalidate_inode_pages2(struct address_space * ) ;
#line 2222
extern int filemap_write_and_wait(struct address_space * ) ;
#line 2352
extern void inode_init_once(struct inode * ) ;
#line 2358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static int generic_drop_inode(struct inode *inode ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2360
  if ((unsigned int )inode->__annonCompField39.i_nlink == 0U) {
#line 2360
    tmp___0 = 1;
  } else {
    {
#line 2360
    tmp = inode_unhashed(inode);
    }
#line 2360
    if (tmp != 0) {
#line 2360
      tmp___0 = 1;
    } else {
#line 2360
      tmp___0 = 0;
    }
  }
#line 2360
  return (tmp___0);
}
}
#line 2370
extern struct inode *iget5_locked(struct super_block * , unsigned long  , int (*)(struct inode * ,
                                                                                  void * ) ,
                                  int (*)(struct inode * , void * ) , void * ) ;
#line 2379
extern void unlock_new_inode(struct inode * ) ;
#line 2384
extern void clear_inode(struct inode * ) ;
#line 2505
extern void inode_dio_wait(struct inode * ) ;
#line 2525
extern void generic_fillattr(struct inode * , struct kstat * ) ;
#line 2618
extern int inode_newsize_ok(struct inode  const  * , loff_t  ) ;
#line 1141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
extern void unmap_mapping_range(struct address_space * , loff_t const    , loff_t const    ,
                                int  ) ;
#line 1156
extern void truncate_pagecache(struct inode * , loff_t  ) ;
#line 1862
extern void truncate_inode_pages_final(struct address_space * ) ;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/signal.h"
__inline static int sigismember(sigset_t *set , int _sig ) 
{ 
  unsigned long sig ;

  {
#line 59
  sig = (unsigned long )(_sig + -1);
#line 61
  return ((int )(set->sig[0] >> (int )sig) & 1);
}
}
#line 2662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
  {
#line 2664
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
  }
#line 2664
  return (tmp);
}
}
#line 2688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  {
#line 2690
  tmp = test_tsk_thread_flag(p, 2);
#line 2690
  tmp___0 = __builtin_expect(tmp != 0, 0L);
  }
#line 2690
  return ((int )tmp___0);
}
}
#line 2693 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
__inline static int __fatal_signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  {
#line 2695
  tmp = sigismember(& p->pending.signal, 9);
#line 2695
  tmp___0 = __builtin_expect(tmp != 0, 0L);
  }
#line 2695
  return ((int )tmp___0);
}
}
#line 2698 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
__inline static int fatal_signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2700
  tmp = signal_pending(p);
  }
#line 2700
  if (tmp != 0) {
    {
#line 2700
    tmp___0 = __fatal_signal_pending(p);
    }
#line 2700
    if (tmp___0 != 0) {
#line 2700
      tmp___1 = 1;
    } else {
#line 2700
      tmp___1 = 0;
    }
  } else {
#line 2700
    tmp___1 = 0;
  }
#line 2700
  return (tmp___1);
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/stats.h"
extern struct proc_dir_entry *rpc_proc_register(struct net * , struct rpc_stat * ) ;
#line 62
extern void rpc_proc_unregister(struct net * , char const   * ) ;
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 123
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 125
extern void kmem_cache_free(struct kmem_cache * , void * ) ;
#line 316
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 445
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 637
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 7 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seq_file_net.h"
extern struct net init_net ;
#line 320 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/net_namespace.h"
extern int register_pernet_subsys(struct pernet_operations * ) ;
#line 321
extern void unregister_pernet_subsys(struct pernet_operations * ) ;
#line 1894 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
extern int security_inode_notifysecctx(struct inode * , void * , u32  ) ;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs.h"
__inline static void nfs_copy_fh(struct nfs_fh *target , struct nfs_fh  const  *source ) 
{ 


  {
  {
#line 34
  target->size = source->size;
#line 35
  memcpy((void *)(& target->data), (void const   *)(& source->data), (size_t )source->size);
  }
#line 36
  return;
}
}
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_xdr.h"
__inline static int nfs_fsid_equal(struct nfs_fsid  const  *a , struct nfs_fsid  const  *b ) 
{ 


  {
#line 32
  return ((unsigned long long )a->major == (unsigned long long )b->major && (unsigned long long )a->minor == (unsigned long long )b->minor);
}
}
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static unsigned int NFS_MINATTRTIMEO(struct inode  const  *inode ) 
{ 
  struct nfs_server *nfss ;
  struct nfs_server *tmp ;

  {
  {
#line 255
  tmp = NFS_SERVER(inode);
#line 255
  nfss = tmp;
  }
#line 256
  return (((int )inode->i_mode & 61440) == 16384 ? nfss->acdirmin : nfss->acregmin);
}
}
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static unsigned int NFS_MAXATTRTIMEO(struct inode  const  *inode ) 
{ 
  struct nfs_server *nfss ;
  struct nfs_server *tmp ;

  {
  {
#line 261
  tmp = NFS_SERVER(inode);
#line 261
  nfss = tmp;
  }
#line 262
  return (((int )inode->i_mode & 61440) == 16384 ? nfss->acdirmax : nfss->acregmax);
}
}
#line 279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static __u64 NFS_FILEID(struct inode  const  *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 281
  tmp = NFS_I(inode);
  }
#line 281
  return (tmp->fileid);
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static void set_nfs_fileid(struct inode *inode , __u64 fileid ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 286
  tmp = NFS_I((struct inode  const  *)inode);
#line 286
  tmp->fileid = fileid;
  }
#line 287
  return;
}
}
#line 340
void nfs_invalidate_atime(struct inode *inode ) ;
#line 344
int nfs_post_op_update_inode(struct inode *inode , struct nfs_fattr *fattr ) ;
#line 345
int nfs_post_op_update_inode_force_wcc(struct inode *inode , struct nfs_fattr *fattr ) ;
#line 346
int nfs_getattr(struct vfsmount *mnt , struct dentry *dentry , struct kstat *stat ) ;
#line 357
int nfs_setattr(struct dentry *dentry , struct iattr *attr ) ;
#line 358
void nfs_setattr_update_inode(struct inode *inode , struct iattr *attr ) ;
#line 361
struct nfs_open_context *get_nfs_open_context(struct nfs_open_context *ctx ) ;
#line 363
struct nfs_open_context *nfs_find_open_context(struct inode *inode , struct rpc_cred *cred ,
                                               fmode_t mode ) ;
#line 365
void nfs_inode_attach_open_context(struct nfs_open_context *ctx ) ;
#line 388
u32 _nfs_display_fhandle_hash(struct nfs_fh  const  *fh ) ;
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static u32 nfs_display_fhandle_hash(struct nfs_fh  const  *fh ) 
{ 
  u32 tmp ;

  {
  {
#line 391
  tmp = _nfs_display_fhandle_hash(fh);
  }
#line 391
  return (tmp);
}
}
#line 393
void _nfs_display_fhandle(struct nfs_fh  const  *fh , char const   *caption ) ;
#line 485
struct inode_operations  const  nfs_symlink_inode_operations ;
#line 501
struct inode_operations  const  nfs_mountpoint_inode_operations ;
#line 502
struct inode_operations  const  nfs_referral_inode_operations ;
#line 543 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static int nfs_have_writebacks(struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 545
  tmp = NFS_I((struct inode  const  *)inode);
  }
#line 545
  return (tmp->npages != 0UL);
}
}
#line 578 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static loff_t nfs_size_to_loff_t(__u64 size ) 
{ 


  {
#line 580
  if (size > 9223372036854775806ULL) {
#line 581
    return (9223372036854775806LL);
  } else {

  }
#line 582
  return ((loff_t )size);
}
}
#line 586 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static ino_t nfs_fileid_to_ino_t(u64 fileid ) 
{ 
  ino_t ino ;

  {
#line 588
  ino = (unsigned long )fileid;
#line 591
  return (ino);
}
}
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/freezer.h"
extern atomic_t system_freezing_cnt ;
#line 29
extern bool freezing_slow_path(struct task_struct * ) ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/freezer.h"
__inline static bool freezing(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 36
  tmp = atomic_read((atomic_t const   *)(& system_freezing_cnt));
#line 36
  tmp___0 = __builtin_expect(tmp == 0, 1L);
  }
#line 36
  if (tmp___0 != 0L) {
#line 37
    return (0);
  } else {

  }
  {
#line 38
  tmp___1 = freezing_slow_path(p);
  }
#line 38
  return (tmp___1);
}
}
#line 44
extern bool __refrigerator(bool  ) ;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/freezer.h"
__inline static bool try_to_freeze_unsafe(void) 
{ 
  struct task_struct *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  bool tmp___3 ;

  {
  {
#line 56
  __might_sleep("include/linux/freezer.h", 56, 0);
#line 57
  tmp = get_current();
#line 57
  tmp___0 = freezing(tmp);
  }
#line 57
  if (tmp___0) {
#line 57
    tmp___1 = 0;
  } else {
#line 57
    tmp___1 = 1;
  }
  {
#line 57
  tmp___2 = __builtin_expect((long )tmp___1, 1L);
  }
#line 57
  if (tmp___2 != 0L) {
#line 58
    return (0);
  } else {

  }
  {
#line 59
  tmp___3 = __refrigerator(0);
  }
#line 59
  return (tmp___3);
}
}
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/freezer.h"
__inline static void freezer_do_not_count(void) 
{ 
  struct task_struct *tmp ;

  {
  {
#line 108
  tmp = get_current();
#line 108
  tmp->flags = tmp->flags | 1073741824U;
  }
#line 109
  return;
}
}
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/freezer.h"
__inline static void freezer_count_unsafe(void) 
{ 
  struct task_struct *tmp ;

  {
  {
#line 133
  tmp = get_current();
#line 133
  tmp->flags = tmp->flags & 3221225471U;
#line 134
  __asm__  volatile   ("mfence": : : "memory");
#line 135
  try_to_freeze_unsafe();
  }
#line 136
  return;
}
}
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/freezer.h"
__inline static void freezable_schedule_unsafe(void) 
{ 


  {
  {
#line 178
  freezer_do_not_count();
#line 179
  schedule();
#line 180
  freezer_count_unsafe();
  }
#line 181
  return;
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_server_stats___1(struct nfs_server  const  *server ,
                                              enum nfs_stat_eventcounters stat ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 28
  __vpp_verify = (void const   *)0;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___0;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___1;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___2;
  } else {

  }
#line 28
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 28
  pao_ID__ = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___0;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8;
  } else {

  }
#line 28
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54222;
  case_2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54222;
  case_4: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54222;
  case_8: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54222;
  switch_default: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_54222: ;
#line 28
  goto ldv_54227;
  case_2___0: /* CIL Label */ 
#line 28
  pao_ID_____0 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___1;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___0;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___0;
  } else {

  }
#line 28
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54233;
  case_2___1: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54233;
  case_4___0: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54233;
  case_8___0: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54233;
  switch_default___0: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_54233: ;
#line 28
  goto ldv_54227;
  case_4___1: /* CIL Label */ 
#line 28
  pao_ID_____1 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___2;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___2;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___1;
  } else {

  }
#line 28
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54243;
  case_2___2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54243;
  case_4___2: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54243;
  case_8___1: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54243;
  switch_default___1: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_54243: ;
#line 28
  goto ldv_54227;
  case_8___2: /* CIL Label */ 
#line 28
  pao_ID_____2 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___3;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___3;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___3;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___3;
  } else {

  }
#line 28
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54253;
  case_2___3: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54253;
  case_4___3: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54253;
  case_8___3: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_54253;
  switch_default___2: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_54253: ;
#line 28
  goto ldv_54227;
  switch_default___3: /* CIL Label */ 
  {
#line 28
  __bad_size_call_parameter();
  }
#line 28
  goto ldv_54227;
  switch_break: /* CIL Label */ ;
  }
  ldv_54227: ;
#line 29
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_stats___1(struct inode  const  *inode , enum nfs_stat_eventcounters stat ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 34
  tmp = NFS_SERVER(inode);
#line 34
  nfs_inc_server_stats___1((struct nfs_server  const  *)tmp, stat);
  }
#line 35
  return;
}
}
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/crc32.h"
extern u32 crc32_le(u32  , unsigned char const   * , size_t  ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static void nfs_attr_check_mountpoint(struct super_block *parent , struct nfs_fattr *fattr ) 
{ 
  struct nfs_server *tmp ;
  int tmp___0 ;

  {
  {
#line 24
  tmp = NFS_SB((struct super_block  const  *)parent);
#line 24
  tmp___0 = nfs_fsid_equal((struct nfs_fsid  const  *)(& tmp->fsid), (struct nfs_fsid  const  *)(& fattr->fsid));
  }
#line 24
  if (tmp___0 == 0) {
#line 25
    fattr->valid = fattr->valid | 2097152U;
  } else {

  }
#line 26
  return;
}
}
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static int nfs_attr_use_mounted_on_fileid(struct nfs_fattr *fattr ) 
{ 


  {
#line 30
  if ((fattr->valid & 4194304U) == 0U || *((unsigned int *)fattr + 0UL) == 0U) {
#line 33
    return (0);
  } else {

  }
#line 35
  fattr->fileid = fattr->mounted_on_fileid;
#line 36
  return (1);
}
}
#line 225
int nfs_init_nfspagecache(void) ;
#line 226
void nfs_destroy_nfspagecache(void) ;
#line 227
int nfs_init_readpagecache(void) ;
#line 228
void nfs_destroy_readpagecache(void) ;
#line 229
int nfs_init_writepagecache(void) ;
#line 230
void nfs_destroy_writepagecache(void) ;
#line 232
int nfs_init_directcache(void) ;
#line 233
void nfs_destroy_directcache(void) ;
#line 249 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static void nfs_iocounter_init(struct nfs_io_counter *c ) 
{ 


  {
  {
#line 251
  c->flags = 0UL;
#line 252
  atomic_set(& c->io_count, 0);
  }
#line 253
  return;
}
}
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static void nfs_zap_label_cache_locked(struct nfs_inode *nfsi ) 
{ 
  int tmp ;

  {
  {
#line 294
  tmp = nfs_server_capable(& nfsi->vfs_inode, 262144);
  }
#line 294
  if (tmp != 0) {
#line 295
    nfsi->cache_validity = nfsi->cache_validity | 128UL;
  } else {

  }
#line 296
  return;
}
}
#line 306
void nfs_close_context(struct nfs_open_context *ctx , int is_sync ) ;
#line 343 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct workqueue_struct *nfsiod_workqueue  ;
#line 344
struct inode *nfs_alloc_inode(struct super_block *sb ) ;
#line 345
void nfs_destroy_inode(struct inode *inode ) ;
#line 347
int nfs_drop_inode(struct inode *inode ) ;
#line 348
void nfs_clear_inode(struct inode *inode ) ;
#line 349
void nfs_evict_inode(struct inode *inode ) ;
#line 350
void nfs_zap_acl_cache(struct inode *inode ) ;
#line 377
int register_nfs_fs(void) ;
#line 378
void unregister_nfs_fs(void) ;
#line 379
void nfs_sb_active(struct super_block *sb ) ;
#line 380
void nfs_sb_deactive(struct super_block *sb ) ;
#line 478 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static void nfs_inode_dio_wait(struct inode *inode ) 
{ 


  {
  {
#line 480
  inode_dio_wait(inode);
  }
#line 481
  return;
}
}
#line 529 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static blkcnt_t nfs_calc_block_size(u64 tsize ) 
{ 
  blkcnt_t used ;

  {
#line 531
  used = (blkcnt_t )((tsize + 511ULL) >> 9);
#line 532
  return (used);
}
}
#line 620 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static u32 nfs_fhandle_hash(struct nfs_fh  const  *fh ) 
{ 
  u32 tmp ;

  {
  {
#line 622
  tmp = crc32_le(4294967295U, (unsigned char const   *)(& fh->data), (size_t )fh->size);
  }
#line 622
  return (~ tmp);
}
}
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static bool fscache_cookie_enabled(struct fscache_cookie *cookie ) 
{ 
  int tmp ;

  {
  {
#line 202
  tmp = constant_test_bit(5L, (unsigned long const volatile   *)(& cookie->flags));
  }
#line 202
  return (tmp != 0);
}
}
#line 225
extern void __fscache_invalidate(struct fscache_cookie * ) ;
#line 226
extern void __fscache_wait_on_invalidate(struct fscache_cookie * ) ;
#line 472 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_invalidate(struct fscache_cookie *cookie ) 
{ 
  bool tmp ;

  {
#line 474
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 474
    tmp = fscache_cookie_enabled(cookie);
    }
#line 474
    if ((int )tmp) {
      {
#line 475
      __fscache_invalidate(cookie);
      }
    } else {

    }
  } else {

  }
#line 476
  return;
}
}
#line 488 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_wait_on_invalidate(struct fscache_cookie *cookie ) 
{ 


  {
#line 490
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 491
    __fscache_wait_on_invalidate(cookie);
    }
  } else {

  }
#line 492
  return;
}
}
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
int nfs_fscache_register(void) ;
#line 68
void nfs_fscache_unregister(void) ;
#line 79
void nfs_fscache_init_inode(struct inode *inode ) ;
#line 80
void nfs_fscache_clear_inode(struct inode *inode ) ;
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
__inline static void nfs_fscache_invalidate(struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 158
  tmp = NFS_I((struct inode  const  *)inode);
#line 158
  fscache_invalidate(tmp->fscache);
  }
#line 159
  return;
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
__inline static void nfs_fscache_wait_on_invalidate(struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 166
  tmp = NFS_I((struct inode  const  *)inode);
#line 166
  fscache_wait_on_invalidate(tmp->fscache);
  }
#line 167
  return;
}
}
#line 362 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
__inline static bool pnfs_layoutcommit_outstanding(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 364
  tmp = NFS_I((struct inode  const  *)inode);
#line 364
  nfsi = tmp;
#line 366
  tmp___0 = constant_test_bit(9L, (unsigned long const volatile   *)(& nfsi->flags));
  }
#line 366
  if (tmp___0 != 0) {
#line 366
    tmp___2 = 1;
  } else {
    {
#line 366
    tmp___1 = constant_test_bit(10L, (unsigned long const volatile   *)(& nfsi->flags));
    }
#line 366
    if (tmp___1 != 0) {
#line 366
      tmp___2 = 1;
    } else {
#line 366
      tmp___2 = 0;
    }
  }
#line 366
  return ((bool )tmp___2);
}
}
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/netns.h"
int nfs_net_id  ;
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_refresh_inode_enter ;
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_refresh_inode_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 142
  tmp___1 = static_key_false(& __tracepoint_nfs_refresh_inode_enter.key);
  }
#line 142
  if ((int )tmp___1) {
    {
#line 142
    rcu_read_lock_sched_notrace___1();
#line 142
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_refresh_inode_enter.funcs));
#line 142
    tmp = debug_lockdep_rcu_enabled();
    }
#line 142
    if (tmp != 0 && ! __warned) {
      {
#line 142
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 142
      if (tmp___0 == 0) {
        {
#line 142
        __warned = 1;
#line 142
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 142, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 142
    it_func_ptr = _________p1;
#line 142
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55991: 
      {
#line 142
      it_func = it_func_ptr->func;
#line 142
      __data = it_func_ptr->data;
#line 142
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 142
      it_func_ptr = it_func_ptr + 1;
      }
#line 142
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 144
        goto ldv_55991;
      } else {

      }

    } else {

    }
    {
#line 142
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 144
  return;
}
}
#line 143
struct tracepoint __tracepoint_nfs_refresh_inode_exit ;
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_refresh_inode_exit(struct inode  const  *inode , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 143
  tmp___1 = static_key_false(& __tracepoint_nfs_refresh_inode_exit.key);
  }
#line 143
  if ((int )tmp___1) {
    {
#line 143
    rcu_read_lock_sched_notrace___1();
#line 143
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_refresh_inode_exit.funcs));
#line 143
    tmp = debug_lockdep_rcu_enabled();
    }
#line 143
    if (tmp != 0 && ! __warned) {
      {
#line 143
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 143
      if (tmp___0 == 0) {
        {
#line 143
        __warned = 1;
#line 143
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 143, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 143
    it_func_ptr = _________p1;
#line 143
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56027: 
      {
#line 143
      it_func = it_func_ptr->func;
#line 143
      __data = it_func_ptr->data;
#line 143
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 143
      it_func_ptr = it_func_ptr + 1;
      }
#line 143
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 145
        goto ldv_56027;
      } else {

      }

    } else {

    }
    {
#line 143
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 145
  return;
}
}
#line 144
struct tracepoint __tracepoint_nfs_revalidate_inode_enter ;
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_revalidate_inode_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 144
  tmp___1 = static_key_false(& __tracepoint_nfs_revalidate_inode_enter.key);
  }
#line 144
  if ((int )tmp___1) {
    {
#line 144
    rcu_read_lock_sched_notrace___1();
#line 144
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_revalidate_inode_enter.funcs));
#line 144
    tmp = debug_lockdep_rcu_enabled();
    }
#line 144
    if (tmp != 0 && ! __warned) {
      {
#line 144
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 144
      if (tmp___0 == 0) {
        {
#line 144
        __warned = 1;
#line 144
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 144, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 144
    it_func_ptr = _________p1;
#line 144
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56064: 
      {
#line 144
      it_func = it_func_ptr->func;
#line 144
      __data = it_func_ptr->data;
#line 144
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 144
      it_func_ptr = it_func_ptr + 1;
      }
#line 144
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 146
        goto ldv_56064;
      } else {

      }

    } else {

    }
    {
#line 144
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 146
  return;
}
}
#line 145
struct tracepoint __tracepoint_nfs_revalidate_inode_exit ;
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_revalidate_inode_exit(struct inode  const  *inode ,
                                                     int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 145
  tmp___1 = static_key_false(& __tracepoint_nfs_revalidate_inode_exit.key);
  }
#line 145
  if ((int )tmp___1) {
    {
#line 145
    rcu_read_lock_sched_notrace___1();
#line 145
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_revalidate_inode_exit.funcs));
#line 145
    tmp = debug_lockdep_rcu_enabled();
    }
#line 145
    if (tmp != 0 && ! __warned) {
      {
#line 145
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 145
      if (tmp___0 == 0) {
        {
#line 145
        __warned = 1;
#line 145
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 145, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 145
    it_func_ptr = _________p1;
#line 145
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56100: 
      {
#line 145
      it_func = it_func_ptr->func;
#line 145
      __data = it_func_ptr->data;
#line 145
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 145
      it_func_ptr = it_func_ptr + 1;
      }
#line 145
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 147
        goto ldv_56100;
      } else {

      }

    } else {

    }
    {
#line 145
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 147
  return;
}
}
#line 146
struct tracepoint __tracepoint_nfs_invalidate_mapping_enter ;
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_invalidate_mapping_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 146
  tmp___1 = static_key_false(& __tracepoint_nfs_invalidate_mapping_enter.key);
  }
#line 146
  if ((int )tmp___1) {
    {
#line 146
    rcu_read_lock_sched_notrace___1();
#line 146
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_invalidate_mapping_enter.funcs));
#line 146
    tmp = debug_lockdep_rcu_enabled();
    }
#line 146
    if (tmp != 0 && ! __warned) {
      {
#line 146
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 146
      if (tmp___0 == 0) {
        {
#line 146
        __warned = 1;
#line 146
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 146, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 146
    it_func_ptr = _________p1;
#line 146
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56137: 
      {
#line 146
      it_func = it_func_ptr->func;
#line 146
      __data = it_func_ptr->data;
#line 146
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 146
      it_func_ptr = it_func_ptr + 1;
      }
#line 146
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 148
        goto ldv_56137;
      } else {

      }

    } else {

    }
    {
#line 146
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 148
  return;
}
}
#line 147
struct tracepoint __tracepoint_nfs_invalidate_mapping_exit ;
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_invalidate_mapping_exit(struct inode  const  *inode ,
                                                       int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 147
  tmp___1 = static_key_false(& __tracepoint_nfs_invalidate_mapping_exit.key);
  }
#line 147
  if ((int )tmp___1) {
    {
#line 147
    rcu_read_lock_sched_notrace___1();
#line 147
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_invalidate_mapping_exit.funcs));
#line 147
    tmp = debug_lockdep_rcu_enabled();
    }
#line 147
    if (tmp != 0 && ! __warned) {
      {
#line 147
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 147
      if (tmp___0 == 0) {
        {
#line 147
        __warned = 1;
#line 147
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 147, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 147
    it_func_ptr = _________p1;
#line 147
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56173: 
      {
#line 147
      it_func = it_func_ptr->func;
#line 147
      __data = it_func_ptr->data;
#line 147
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 147
      it_func_ptr = it_func_ptr + 1;
      }
#line 147
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 149
        goto ldv_56173;
      } else {

      }

    } else {

    }
    {
#line 147
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 149
  return;
}
}
#line 148
struct tracepoint __tracepoint_nfs_getattr_enter ;
#line 148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_getattr_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 148
  tmp___1 = static_key_false(& __tracepoint_nfs_getattr_enter.key);
  }
#line 148
  if ((int )tmp___1) {
    {
#line 148
    rcu_read_lock_sched_notrace___1();
#line 148
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_getattr_enter.funcs));
#line 148
    tmp = debug_lockdep_rcu_enabled();
    }
#line 148
    if (tmp != 0 && ! __warned) {
      {
#line 148
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 148
      if (tmp___0 == 0) {
        {
#line 148
        __warned = 1;
#line 148
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 148, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 148
    it_func_ptr = _________p1;
#line 148
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56210: 
      {
#line 148
      it_func = it_func_ptr->func;
#line 148
      __data = it_func_ptr->data;
#line 148
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 148
      it_func_ptr = it_func_ptr + 1;
      }
#line 148
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 150
        goto ldv_56210;
      } else {

      }

    } else {

    }
    {
#line 148
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 150
  return;
}
}
#line 149
struct tracepoint __tracepoint_nfs_getattr_exit ;
#line 149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_getattr_exit(struct inode  const  *inode , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 149
  tmp___1 = static_key_false(& __tracepoint_nfs_getattr_exit.key);
  }
#line 149
  if ((int )tmp___1) {
    {
#line 149
    rcu_read_lock_sched_notrace___1();
#line 149
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_getattr_exit.funcs));
#line 149
    tmp = debug_lockdep_rcu_enabled();
    }
#line 149
    if (tmp != 0 && ! __warned) {
      {
#line 149
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 149
      if (tmp___0 == 0) {
        {
#line 149
        __warned = 1;
#line 149
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 149, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 149
    it_func_ptr = _________p1;
#line 149
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56246: 
      {
#line 149
      it_func = it_func_ptr->func;
#line 149
      __data = it_func_ptr->data;
#line 149
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 149
      it_func_ptr = it_func_ptr + 1;
      }
#line 149
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 151
        goto ldv_56246;
      } else {

      }

    } else {

    }
    {
#line 149
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 151
  return;
}
}
#line 150
struct tracepoint __tracepoint_nfs_setattr_enter ;
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_setattr_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 150
  tmp___1 = static_key_false(& __tracepoint_nfs_setattr_enter.key);
  }
#line 150
  if ((int )tmp___1) {
    {
#line 150
    rcu_read_lock_sched_notrace___1();
#line 150
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_setattr_enter.funcs));
#line 150
    tmp = debug_lockdep_rcu_enabled();
    }
#line 150
    if (tmp != 0 && ! __warned) {
      {
#line 150
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 150
      if (tmp___0 == 0) {
        {
#line 150
        __warned = 1;
#line 150
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 150, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 150
    it_func_ptr = _________p1;
#line 150
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56283: 
      {
#line 150
      it_func = it_func_ptr->func;
#line 150
      __data = it_func_ptr->data;
#line 150
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 150
      it_func_ptr = it_func_ptr + 1;
      }
#line 150
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 152
        goto ldv_56283;
      } else {

      }

    } else {

    }
    {
#line 150
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 152
  return;
}
}
#line 151
struct tracepoint __tracepoint_nfs_setattr_exit ;
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_setattr_exit(struct inode  const  *inode , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 151
  tmp___1 = static_key_false(& __tracepoint_nfs_setattr_exit.key);
  }
#line 151
  if ((int )tmp___1) {
    {
#line 151
    rcu_read_lock_sched_notrace___1();
#line 151
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_setattr_exit.funcs));
#line 151
    tmp = debug_lockdep_rcu_enabled();
    }
#line 151
    if (tmp != 0 && ! __warned) {
      {
#line 151
      tmp___0 = rcu_read_lock_sched_held___1();
      }
#line 151
      if (tmp___0 == 0) {
        {
#line 151
        __warned = 1;
#line 151
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 151, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 151
    it_func_ptr = _________p1;
#line 151
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_56319: 
      {
#line 151
      it_func = it_func_ptr->func;
#line 151
      __data = it_func_ptr->data;
#line 151
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 151
      it_func_ptr = it_func_ptr + 1;
      }
#line 151
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 153
        goto ldv_56319;
      } else {

      }

    } else {

    }
    {
#line 151
    rcu_read_unlock_sched_notrace___1();
    }
  } else {

  }
#line 153
  return;
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static bool enable_ino64  =    1;
#line 63
static void nfs_invalidate_inode(struct inode *inode ) ;
#line 64
static int nfs_update_inode(struct inode *inode , struct nfs_fattr *fattr ) ;
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static struct kmem_cache *nfs_inode_cachep  ;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
__inline static unsigned long nfs_fattr_to_ino_t(struct nfs_fattr *fattr ) 
{ 
  ino_t tmp ;

  {
  {
#line 71
  tmp = nfs_fileid_to_ino_t(fattr->fileid);
  }
#line 71
  return (tmp);
}
}
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_wait_bit_killable(void *word ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;

  {
  {
#line 80
  tmp = get_current();
#line 80
  tmp___0 = fatal_signal_pending(tmp);
  }
#line 80
  if (tmp___0 != 0) {
#line 81
    return (-512);
  } else {

  }
  {
#line 82
  freezable_schedule_unsafe();
  }
#line 83
  return (0);
}
}
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_wait_bit_killable[22U]  = 
#line 85
  {      'n',      'f',      's',      '_', 
        'w',      'a',      'i',      't', 
        '_',      'b',      'i',      't', 
        '_',      'k',      'i',      'l', 
        'l',      'a',      'b',      'l', 
        'e',      '\000'};
#line 85
struct kernel_symbol  const  __ksymtab_nfs_wait_bit_killable ;
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_wait_bit_killable  =    {(unsigned long )(& nfs_wait_bit_killable), (char const   *)(& __kstrtab_nfs_wait_bit_killable)};
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
u64 nfs_compat_user_ino64(u64 fileid ) 
{ 
  compat_ulong_t ino ;

  {
#line 102
  if ((int )enable_ino64) {
#line 103
    return (fileid);
  } else {

  }
#line 104
  ino = (compat_ulong_t )fileid;
#line 106
  ino = ino ^ (compat_ulong_t )(fileid >> 32);
#line 107
  return ((u64 )ino);
}
}
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_drop_inode(struct inode *inode ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 112
  tmp = NFS_STALE((struct inode  const  *)inode);
  }
#line 112
  if (tmp != 0) {
#line 112
    tmp___1 = 1;
  } else {
    {
#line 112
    tmp___0 = generic_drop_inode(inode);
    }
#line 112
    if (tmp___0 != 0) {
#line 112
      tmp___1 = 1;
    } else {
#line 112
      tmp___1 = 0;
    }
  }
#line 112
  return (tmp___1);
}
}
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_drop_inode[15U]  = 
#line 114
  {      'n',      'f',      's',      '_', 
        'd',      'r',      'o',      'p', 
        '_',      'i',      'n',      'o', 
        'd',      'e',      '\000'};
#line 114
struct kernel_symbol  const  __ksymtab_nfs_drop_inode ;
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_drop_inode  =    {(unsigned long )(& nfs_drop_inode), (char const   *)(& __kstrtab_nfs_drop_inode)};
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_clear_inode(struct inode *inode ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  struct nfs_inode *tmp___3 ;
  int tmp___4 ;
  int __ret_warn_on___0 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;

  {
  {
#line 121
  tmp = nfs_have_writebacks(inode);
#line 121
  __ret_warn_once = tmp != 0;
#line 121
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 121
  if (tmp___2 != 0L) {
    {
#line 121
    __ret_warn_on = ! __warned;
#line 121
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 121
    if (tmp___0 != 0L) {
      {
#line 121
      warn_slowpath_null("fs/nfs/inode.c", 121);
      }
    } else {

    }
    {
#line 121
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 121
    if (tmp___1 != 0L) {
#line 121
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 121
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 122
  tmp___3 = NFS_I((struct inode  const  *)inode);
#line 122
  tmp___4 = list_empty((struct list_head  const  *)(& tmp___3->open_files));
#line 122
  __ret_warn_once___0 = tmp___4 == 0;
#line 122
  tmp___7 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 122
  if (tmp___7 != 0L) {
    {
#line 122
    __ret_warn_on___0 = ! __warned___0;
#line 122
    tmp___5 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 122
    if (tmp___5 != 0L) {
      {
#line 122
      warn_slowpath_null("fs/nfs/inode.c", 122);
      }
    } else {

    }
    {
#line 122
    tmp___6 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 122
    if (tmp___6 != 0L) {
#line 122
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 122
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
#line 123
  nfs_zap_acl_cache(inode);
#line 124
  nfs_access_zap_cache(inode);
#line 125
  nfs_fscache_clear_inode(inode);
  }
#line 126
  return;
}
}
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_clear_inode[16U]  = 
#line 127
  {      'n',      'f',      's',      '_', 
        'c',      'l',      'e',      'a', 
        'r',      '_',      'i',      'n', 
        'o',      'd',      'e',      '\000'};
#line 127
struct kernel_symbol  const  __ksymtab_nfs_clear_inode ;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_clear_inode  =    {(unsigned long )(& nfs_clear_inode), (char const   *)(& __kstrtab_nfs_clear_inode)};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_evict_inode(struct inode *inode ) 
{ 


  {
  {
#line 131
  truncate_inode_pages_final(& inode->i_data);
#line 132
  clear_inode(inode);
#line 133
  nfs_clear_inode(inode);
  }
#line 134
  return;
}
}
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_sync_mapping(struct address_space *mapping ) 
{ 
  int ret ;

  {
#line 141
  ret = 0;
#line 143
  if (mapping->nrpages != 0UL) {
    {
#line 144
    unmap_mapping_range(mapping, 0LL, 0LL, 0);
#line 145
    ret = nfs_wb_all(mapping->host);
    }
  } else {

  }
#line 147
  return (ret);
}
}
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_set_cache_invalid(struct inode *inode , unsigned long flags ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;

  {
  {
#line 152
  tmp = NFS_I((struct inode  const  *)inode);
#line 152
  nfsi = tmp;
  }
#line 154
  if ((inode->i_mapping)->nrpages == 0UL) {
#line 155
    flags = flags & 0xfffffffffffffffdUL;
  } else {

  }
#line 156
  nfsi->cache_validity = nfsi->cache_validity | flags;
#line 157
  if ((flags & 2UL) != 0UL) {
    {
#line 158
    nfs_fscache_invalidate(inode);
    }
  } else {

  }
#line 159
  return;
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_zap_caches_locked(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int mode ;
  unsigned int tmp___0 ;
  struct nfs_inode *tmp___1 ;

  {
  {
#line 166
  tmp = NFS_I((struct inode  const  *)inode);
#line 166
  nfsi = tmp;
#line 167
  mode = (int )inode->i_mode;
#line 169
  nfs_inc_stats___1((struct inode  const  *)inode, 3);
#line 171
  tmp___0 = NFS_MINATTRTIMEO((struct inode  const  *)inode);
#line 171
  nfsi->attrtimeo = (unsigned long )tmp___0;
#line 172
  nfsi->attrtimeo_timestamp = jiffies;
#line 174
  tmp___1 = NFS_I((struct inode  const  *)inode);
#line 174
  memset((void *)(& tmp___1->cookieverf), 0, 8UL);
  }
#line 175
  if (((mode & 61440) == 32768 || (mode & 61440) == 16384) || (mode & 61440) == 40960) {
    {
#line 176
    nfs_set_cache_invalid(inode, 59UL);
    }
  } else {
    {
#line 182
    nfs_set_cache_invalid(inode, 57UL);
    }
  }
  {
#line 186
  nfs_zap_label_cache_locked(nfsi);
  }
#line 187
  return;
}
}
#line 189 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_zap_caches(struct inode *inode ) 
{ 


  {
  {
#line 191
  ldv_spin_lock_72(& inode->i_lock);
#line 192
  nfs_zap_caches_locked(inode);
#line 193
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 194
  return;
}
}
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_zap_mapping(struct inode *inode , struct address_space *mapping ) 
{ 


  {
#line 198
  if (mapping->nrpages != 0UL) {
    {
#line 199
    ldv_spin_lock_72(& inode->i_lock);
#line 200
    nfs_set_cache_invalid(inode, 2UL);
#line 201
    ldv_spin_unlock_73(& inode->i_lock);
    }
  } else {

  }
#line 203
  return;
}
}
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_zap_acl_cache(struct inode *inode ) 
{ 
  void (*clear_acl_cache)(struct inode * ) ;
  struct nfs_rpc_ops  const  *tmp ;
  struct nfs_inode *tmp___0 ;

  {
  {
#line 209
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 209
  clear_acl_cache = tmp->clear_acl_cache;
  }
#line 210
  if ((unsigned long )clear_acl_cache != (unsigned long )((void (*)(struct inode * ))0)) {
    {
#line 211
    (*clear_acl_cache)(inode);
    }
  } else {

  }
  {
#line 212
  ldv_spin_lock_72(& inode->i_lock);
#line 213
  tmp___0 = NFS_I((struct inode  const  *)inode);
#line 213
  tmp___0->cache_validity = tmp___0->cache_validity & 0xffffffffffffffefUL;
#line 214
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 215
  return;
}
}
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_zap_acl_cache[18U]  = 
#line 216
  {      'n',      'f',      's',      '_', 
        'z',      'a',      'p',      '_', 
        'a',      'c',      'l',      '_', 
        'c',      'a',      'c',      'h', 
        'e',      '\000'};
#line 216
struct kernel_symbol  const  __ksymtab_nfs_zap_acl_cache ;
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_zap_acl_cache  =    {(unsigned long )(& nfs_zap_acl_cache), (char const   *)(& __kstrtab_nfs_zap_acl_cache)};
#line 218 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_invalidate_atime(struct inode *inode ) 
{ 


  {
  {
#line 220
  ldv_spin_lock_72(& inode->i_lock);
#line 221
  nfs_set_cache_invalid(inode, 4UL);
#line 222
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 223
  return;
}
}
#line 224 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_invalidate_atime[21U]  = 
#line 224
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'v',      'a', 
        'l',      'i',      'd',      'a', 
        't',      'e',      '_',      'a', 
        't',      'i',      'm',      'e', 
        '\000'};
#line 224
struct kernel_symbol  const  __ksymtab_nfs_invalidate_atime ;
#line 224 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_invalidate_atime  =    {(unsigned long )(& nfs_invalidate_atime), (char const   *)(& __kstrtab_nfs_invalidate_atime)};
#line 230 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_invalidate_inode(struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 232
  tmp = NFS_I((struct inode  const  *)inode);
#line 232
  set_bit(1L, (unsigned long volatile   *)(& tmp->flags));
#line 233
  nfs_zap_caches_locked(inode);
  }
#line 234
  return;
}
}
#line 248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_find_actor(struct inode *inode , void *opaque ) 
{ 
  struct nfs_find_desc *desc ;
  struct nfs_fh *fh ;
  struct nfs_fattr *fattr ;
  __u64 tmp ;
  struct nfs_fh *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 250
  desc = (struct nfs_find_desc *)opaque;
#line 251
  fh = desc->fh;
#line 252
  fattr = desc->fattr;
#line 254
  tmp = NFS_FILEID((struct inode  const  *)inode);
  }
#line 254
  if (tmp != fattr->fileid) {
#line 255
    return (0);
  } else {

  }
#line 256
  if (((unsigned int )((int )inode->i_mode ^ (int )fattr->mode) & 61440U) != 0U) {
#line 257
    return (0);
  } else {

  }
  {
#line 258
  tmp___0 = NFS_FH((struct inode  const  *)inode);
#line 258
  tmp___1 = nfs_compare_fh((struct nfs_fh  const  *)tmp___0, (struct nfs_fh  const  *)fh);
  }
#line 258
  if (tmp___1 != 0) {
#line 259
    return (0);
  } else {

  }
  {
#line 260
  tmp___2 = is_bad_inode(inode);
  }
#line 260
  if (tmp___2 != 0) {
#line 261
    return (0);
  } else {
    {
#line 260
    tmp___3 = NFS_STALE((struct inode  const  *)inode);
    }
#line 260
    if (tmp___3 != 0) {
#line 261
      return (0);
    } else {

    }
  }
#line 262
  return (1);
}
}
#line 266 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_init_locked(struct inode *inode , void *opaque ) 
{ 
  struct nfs_find_desc *desc ;
  struct nfs_fattr *fattr ;
  struct nfs_fh *tmp ;

  {
  {
#line 268
  desc = (struct nfs_find_desc *)opaque;
#line 269
  fattr = desc->fattr;
#line 271
  set_nfs_fileid(inode, fattr->fileid);
#line 272
  tmp = NFS_FH((struct inode  const  *)inode);
#line 272
  nfs_copy_fh(tmp, (struct nfs_fh  const  *)desc->fh);
  }
#line 273
  return (0);
}
}
#line 277 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_clear_label_invalid(struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 279
  ldv_spin_lock_72(& inode->i_lock);
#line 280
  tmp = NFS_I((struct inode  const  *)inode);
#line 280
  tmp->cache_validity = tmp->cache_validity & 0xffffffffffffff7fUL;
#line 281
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 282
  return;
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_setsecurity(struct inode *inode , struct nfs_fattr *fattr , struct nfs4_label *label ) 
{ 
  int error ;

  {
#line 289
  if ((unsigned long )label == (unsigned long )((struct nfs4_label *)0)) {
#line 290
    return;
  } else {

  }
#line 292
  if ((fattr->valid & 33554432U) != 0U && (unsigned long )inode->i_security != (unsigned long )((void *)0)) {
    {
#line 293
    error = security_inode_notifysecctx(inode, (void *)label->label, label->len);
    }
#line 295
    if (error != 0) {
      {
#line 296
      printk("\v%s() %s %d security_inode_notifysecctx() %d\n", "nfs_setsecurity",
             label->label, label->len, error);
      }
    } else {

    }
    {
#line 301
    nfs_clear_label_invalid(inode);
    }
  } else {

  }
#line 303
  return;
}
}
#line 305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct nfs4_label *nfs4_label_alloc(struct nfs_server *server , gfp_t flags ) 
{ 
  struct nfs4_label *label ;
  int minor_version ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
#line 307
  label = (struct nfs4_label *)0;
#line 308
  minor_version = (int )(server->nfs_client)->cl_minorversion;
#line 310
  if (minor_version <= 1) {
#line 311
    return (label);
  } else {

  }
#line 313
  if ((server->caps & 262144U) == 0U) {
#line 314
    return (label);
  } else {

  }
  {
#line 316
  tmp = kzalloc(24UL, flags);
#line 316
  label = (struct nfs4_label *)tmp;
  }
#line 317
  if ((unsigned long )label == (unsigned long )((struct nfs4_label *)0)) {
    {
#line 318
    tmp___0 = ERR_PTR(-12L);
    }
#line 318
    return ((struct nfs4_label *)tmp___0);
  } else {

  }
  {
#line 320
  tmp___1 = kzalloc(2048UL, flags);
#line 320
  label->label = (char *)tmp___1;
  }
#line 321
  if ((unsigned long )label->label == (unsigned long )((char *)0)) {
    {
#line 322
    kfree((void const   *)label);
#line 323
    tmp___2 = ERR_PTR(-12L);
    }
#line 323
    return ((struct nfs4_label *)tmp___2);
  } else {

  }
#line 325
  label->len = 2048U;
#line 327
  return (label);
}
}
#line 329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs4_label_alloc[17U]  = 
#line 329
  {      'n',      'f',      's',      '4', 
        '_',      'l',      'a',      'b', 
        'e',      'l',      '_',      'a', 
        'l',      'l',      'o',      'c', 
        '\000'};
#line 329
struct kernel_symbol  const  __ksymtab_nfs4_label_alloc ;
#line 329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs4_label_alloc  =    {(unsigned long )(& nfs4_label_alloc), (char const   *)(& __kstrtab_nfs4_label_alloc)};
#line 336 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_setsecurity[16U]  = 
#line 336
  {      'n',      'f',      's',      '_', 
        's',      'e',      't',      's', 
        'e',      'c',      'u',      'r', 
        'i',      't',      'y',      '\000'};
#line 336
struct kernel_symbol  const  __ksymtab_nfs_setsecurity ;
#line 336 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_setsecurity  =    {(unsigned long )(& nfs_setsecurity), (char const   *)(& __kstrtab_nfs_setsecurity)};
#line 343 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct inode *nfs_fhget(struct super_block *sb , struct nfs_fh *fh , struct nfs_fattr *fattr ,
                        struct nfs4_label *label ) 
{ 
  struct nfs_find_desc desc ;
  struct inode *inode ;
  void *tmp ;
  unsigned long hash ;
  int tmp___0 ;
  void *tmp___1 ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp___2 ;
  unsigned long now ;
  int tmp___3 ;
  struct nfs_server *tmp___4 ;
  struct nfs_server *tmp___5 ;
  struct nfs_server *tmp___6 ;
  struct nfs_server *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  unsigned int tmp___15 ;
  struct rb_root __constr_expr_0 ;
  int tmp___16 ;
  u32 tmp___17 ;
  __u64 tmp___18 ;
  long tmp___19 ;
  long tmp___20 ;
  long tmp___21 ;

  {
  {
#line 345
  desc.fh = fh;
#line 345
  desc.fattr = fattr;
#line 349
  tmp = ERR_PTR(-2L);
#line 349
  inode = (struct inode *)tmp;
#line 352
  nfs_attr_check_mountpoint(sb, fattr);
  }
#line 354
  if ((fattr->valid & 2048U) == 0U) {
    {
#line 354
    tmp___0 = nfs_attr_use_mounted_on_fileid(fattr);
    }
#line 354
    if (tmp___0 == 0) {
#line 356
      goto out_no_inode;
    } else {

    }
  } else {

  }
#line 357
  if ((fattr->valid & 1U) == 0U) {
#line 358
    goto out_no_inode;
  } else {

  }
  {
#line 360
  hash = nfs_fattr_to_ino_t(fattr);
#line 362
  inode = iget5_locked(sb, hash, & nfs_find_actor, & nfs_init_locked, (void *)(& desc));
  }
#line 363
  if ((unsigned long )inode == (unsigned long )((struct inode *)0)) {
    {
#line 364
    tmp___1 = ERR_PTR(-12L);
#line 364
    inode = (struct inode *)tmp___1;
    }
#line 365
    goto out_no_inode;
  } else {

  }
#line 368
  if ((inode->i_state & 8UL) != 0UL) {
    {
#line 369
    tmp___2 = NFS_I((struct inode  const  *)inode);
#line 369
    nfsi = tmp___2;
#line 370
    now = jiffies;
#line 374
    inode->i_ino = hash;
#line 377
    inode->i_flags = inode->i_flags | 130U;
#line 378
    inode->i_mode = fattr->mode;
    }
#line 379
    if ((fattr->valid & 2U) == 0U) {
      {
#line 379
      tmp___3 = nfs_server_capable(inode, 128);
      }
#line 379
      if (tmp___3 != 0) {
        {
#line 381
        nfs_set_cache_invalid(inode, 1UL);
        }
      } else {

      }
    } else {

    }
    {
#line 385
    tmp___4 = NFS_SB((struct super_block  const  *)sb);
#line 385
    inode->i_op = ((tmp___4->nfs_client)->rpc_ops)->file_inode_ops;
    }
#line 386
    if (((int )inode->i_mode & 61440) == 32768) {
      {
#line 387
      tmp___5 = NFS_SB((struct super_block  const  *)sb);
#line 387
      inode->i_fop = ((tmp___5->nfs_client)->rpc_ops)->file_ops;
#line 388
      inode->i_data.a_ops = & nfs_file_aops;
#line 389
      tmp___6 = NFS_SB((struct super_block  const  *)sb);
#line 389
      inode->i_data.backing_dev_info = & tmp___6->backing_dev_info;
      }
    } else
#line 390
    if (((int )inode->i_mode & 61440) == 16384) {
      {
#line 391
      tmp___7 = NFS_SB((struct super_block  const  *)sb);
#line 391
      inode->i_op = ((tmp___7->nfs_client)->rpc_ops)->dir_inode_ops;
#line 392
      inode->i_fop = & nfs_dir_operations;
#line 393
      inode->i_data.a_ops = & nfs_dir_aops;
      }
#line 395
      if (*((unsigned int *)fattr + 0UL) != 0U) {
#line 397
        if ((fattr->valid & 1048576U) != 0U) {
#line 398
          inode->i_op = & nfs_referral_inode_operations;
        } else {
#line 400
          inode->i_op = & nfs_mountpoint_inode_operations;
        }
#line 401
        inode->i_fop = (struct file_operations  const  *)0;
#line 402
        inode->i_flags = inode->i_flags | 2048U;
      } else {

      }
    } else
#line 404
    if (((int )inode->i_mode & 61440) == 40960) {
#line 405
      inode->i_op = & nfs_symlink_inode_operations;
    } else {
      {
#line 407
      init_special_inode(inode, (int )inode->i_mode, fattr->rdev);
      }
    }
    {
#line 409
    memset((void *)(& inode->i_atime), 0, 16UL);
#line 410
    memset((void *)(& inode->i_mtime), 0, 16UL);
#line 411
    memset((void *)(& inode->i_ctime), 0, 16UL);
#line 412
    inode->i_version = 0ULL;
#line 413
    inode->i_size = 0LL;
#line 414
    clear_nlink(inode);
#line 415
    inode->i_uid = make_kuid(& init_user_ns, 4294967294U);
#line 416
    inode->i_gid = make_kgid(& init_user_ns, 4294967294U);
#line 417
    inode->i_blocks = 0UL;
#line 418
    memset((void *)(& nfsi->cookieverf), 0, 8UL);
#line 419
    nfsi->write_io = 0ULL;
#line 420
    nfsi->read_io = 0ULL;
#line 422
    nfsi->read_cache_jiffies = fattr->time_start;
#line 423
    nfsi->attr_gencount = fattr->gencount;
    }
#line 424
    if ((fattr->valid & 4096U) != 0U) {
#line 425
      inode->i_atime = fattr->atime;
    } else {
      {
#line 426
      tmp___8 = nfs_server_capable(inode, 2048);
      }
#line 426
      if (tmp___8 != 0) {
        {
#line 427
        nfs_set_cache_invalid(inode, 1UL);
        }
      } else {

      }
    }
#line 428
    if ((fattr->valid & 8192U) != 0U) {
#line 429
      inode->i_mtime = fattr->mtime;
    } else {
      {
#line 430
      tmp___9 = nfs_server_capable(inode, 8192);
      }
#line 430
      if (tmp___9 != 0) {
        {
#line 431
        nfs_set_cache_invalid(inode, 1UL);
        }
      } else {

      }
    }
#line 432
    if ((fattr->valid & 16384U) != 0U) {
#line 433
      inode->i_ctime = fattr->ctime;
    } else {
      {
#line 434
      tmp___10 = nfs_server_capable(inode, 4096);
      }
#line 434
      if (tmp___10 != 0) {
        {
#line 435
        nfs_set_cache_invalid(inode, 1UL);
        }
      } else {

      }
    }
#line 436
    if ((fattr->valid & 131072U) != 0U) {
#line 437
      inode->i_version = fattr->change_attr;
    } else {
      {
#line 438
      tmp___11 = nfs_server_capable(inode, 32);
      }
#line 438
      if (tmp___11 != 0) {
        {
#line 439
        nfs_set_cache_invalid(inode, 1UL);
        }
      } else {

      }
    }
#line 440
    if ((fattr->valid & 64U) != 0U) {
      {
#line 441
      inode->i_size = nfs_size_to_loff_t(fattr->size);
      }
    } else {
      {
#line 443
      nfs_set_cache_invalid(inode, 33UL);
      }
    }
#line 445
    if ((fattr->valid & 4U) != 0U) {
      {
#line 446
      set_nlink(inode, fattr->nlink);
      }
    } else {
      {
#line 447
      tmp___12 = nfs_server_capable(inode, 256);
      }
#line 447
      if (tmp___12 != 0) {
        {
#line 448
        nfs_set_cache_invalid(inode, 1UL);
        }
      } else {

      }
    }
#line 449
    if ((fattr->valid & 8U) != 0U) {
#line 450
      inode->i_uid = fattr->uid;
    } else {
      {
#line 451
      tmp___13 = nfs_server_capable(inode, 512);
      }
#line 451
      if (tmp___13 != 0) {
        {
#line 452
        nfs_set_cache_invalid(inode, 1UL);
        }
      } else {

      }
    }
#line 453
    if ((fattr->valid & 16U) != 0U) {
#line 454
      inode->i_gid = fattr->gid;
    } else {
      {
#line 455
      tmp___14 = nfs_server_capable(inode, 1024);
      }
#line 455
      if (tmp___14 != 0) {
        {
#line 456
        nfs_set_cache_invalid(inode, 1UL);
        }
      } else {

      }
    }
#line 457
    if ((fattr->valid & 256U) != 0U) {
#line 458
      inode->i_blocks = (blkcnt_t )fattr->du.nfs2.blocks;
    } else {

    }
#line 459
    if ((fattr->valid & 512U) != 0U) {
      {
#line 463
      inode->i_blocks = nfs_calc_block_size(fattr->du.nfs3.used);
      }
    } else {

    }
    {
#line 466
    nfs_setsecurity(inode, fattr, label);
#line 468
    tmp___15 = NFS_MINATTRTIMEO((struct inode  const  *)inode);
#line 468
    nfsi->attrtimeo = (unsigned long )tmp___15;
#line 469
    nfsi->attrtimeo_timestamp = now;
#line 470
    __constr_expr_0.rb_node = (struct rb_node *)0;
#line 470
    nfsi->access_cache = __constr_expr_0;
#line 472
    nfs_fscache_init_inode(inode);
#line 474
    unlock_new_inode(inode);
    }
  } else {
    {
#line 476
    nfs_refresh_inode(inode, fattr);
    }
  }
  {
#line 477
  tmp___19 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 477
  if (tmp___19 != 0L) {
    {
#line 477
    tmp___16 = atomic_read((atomic_t const   *)(& inode->i_count));
#line 477
    tmp___17 = nfs_display_fhandle_hash((struct nfs_fh  const  *)fh);
#line 477
    tmp___18 = NFS_FILEID((struct inode  const  *)inode);
#line 477
    printk("\001dNFS: nfs_fhget(%s/%Lu fh_crc=0x%08x ct=%d)\n", (char *)(& (inode->i_sb)->s_id),
           tmp___18, tmp___17, tmp___16);
    }
  } else {

  }
  out: ;
#line 484
  return (inode);
  out_no_inode: 
  {
#line 487
  tmp___21 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 487
  if (tmp___21 != 0L) {
    {
#line 487
    tmp___20 = PTR_ERR((void const   *)inode);
#line 487
    printk("\001dnfs_fhget: iget failed with error %ld\n", tmp___20);
    }
  } else {

  }
#line 488
  goto out;
}
}
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_fhget[10U]  = 
#line 490
  {      'n',      'f',      's',      '_', 
        'f',      'h',      'g',      'e', 
        't',      '\000'};
#line 490
struct kernel_symbol  const  __ksymtab_nfs_fhget ;
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_fhget  =    {(unsigned long )(& nfs_fhget), (char const   *)(& __kstrtab_nfs_fhget)};
#line 495 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_setattr(struct dentry *dentry , struct iattr *attr ) 
{ 
  struct inode *inode ;
  struct nfs_fattr *fattr ;
  int error ;
  loff_t tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  struct nfs_rpc_ops  const  *tmp___1 ;

  {
  {
#line 497
  inode = dentry->d_inode;
#line 499
  error = -12;
#line 501
  nfs_inc_stats___1((struct inode  const  *)inode, 13);
  }
#line 504
  if ((attr->ia_valid & 6144U) != 0U) {
#line 505
    attr->ia_valid = attr->ia_valid & 4294967294U;
  } else {

  }
#line 507
  if ((attr->ia_valid & 8U) != 0U) {
#line 508
    if (((int )inode->i_mode & 61440) != 32768) {
#line 509
      attr->ia_valid = attr->ia_valid & 4294967287U;
    } else {
      {
#line 508
      tmp = i_size_read((struct inode  const  *)inode);
      }
#line 508
      if (attr->ia_size == tmp) {
#line 509
        attr->ia_valid = attr->ia_valid & 4294967287U;
      } else {

      }
    }
  } else {

  }
#line 513
  attr->ia_valid = attr->ia_valid & 41407U;
#line 514
  if ((attr->ia_valid & 4294926335U) == 0U) {
#line 515
    return (0);
  } else {

  }
  {
#line 517
  trace_nfs_setattr_enter((struct inode  const  *)inode);
  }
#line 520
  if (((int )inode->i_mode & 61440) == 32768) {
    {
#line 521
    nfs_inode_dio_wait(inode);
#line 522
    nfs_wb_all(inode);
    }
  } else {

  }
  {
#line 525
  fattr = nfs_alloc_fattr();
  }
#line 526
  if ((unsigned long )fattr == (unsigned long )((struct nfs_fattr *)0)) {
#line 527
    goto out;
  } else {

  }
#line 531
  if ((attr->ia_valid & 7U) != 0U) {
    {
#line 532
    tmp___0 = NFS_PROTO((struct inode  const  *)inode);
#line 532
    (*(tmp___0->return_delegation))(inode);
    }
  } else {

  }
  {
#line 533
  tmp___1 = NFS_PROTO((struct inode  const  *)inode);
#line 533
  error = (*(tmp___1->setattr))(dentry, fattr, attr);
  }
#line 534
  if (error == 0) {
    {
#line 535
    error = nfs_refresh_inode(inode, fattr);
    }
  } else {

  }
  {
#line 536
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
  }
  out: 
  {
#line 538
  trace_nfs_setattr_exit((struct inode  const  *)inode, error);
  }
#line 539
  return (error);
}
}
#line 541 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_setattr[12U]  = 
#line 541
  {      'n',      'f',      's',      '_', 
        's',      'e',      't',      'a', 
        't',      't',      'r',      '\000'};
#line 541
struct kernel_symbol  const  __ksymtab_nfs_setattr ;
#line 541 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_setattr  =    {(unsigned long )(& nfs_setattr), (char const   *)(& __kstrtab_nfs_setattr)};
#line 552 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_vmtruncate(struct inode *inode , loff_t offset ) 
{ 
  int err ;
  struct nfs_inode *tmp ;

  {
  {
#line 556
  err = inode_newsize_ok((struct inode  const  *)inode, offset);
  }
#line 557
  if (err != 0) {
#line 558
    goto out;
  } else {

  }
  {
#line 560
  ldv_spin_lock_72(& inode->i_lock);
#line 561
  i_size_write(inode, offset);
  }
#line 563
  if (offset == 0LL) {
    {
#line 564
    tmp = NFS_I((struct inode  const  *)inode);
#line 564
    tmp->cache_validity = tmp->cache_validity & 0xfffffffffffffffdUL;
    }
  } else {

  }
  {
#line 565
  ldv_spin_unlock_73(& inode->i_lock);
#line 567
  truncate_pagecache(inode, offset);
  }
  out: ;
#line 569
  return (err);
}
}
#line 580 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_setattr_update_inode(struct inode *inode , struct iattr *attr ) 
{ 
  int mode ;

  {
#line 582
  if ((attr->ia_valid & 7U) != 0U) {
    {
#line 583
    ldv_spin_lock_72(& inode->i_lock);
    }
#line 584
    if ((int )attr->ia_valid & 1) {
#line 585
      mode = (int )attr->ia_mode & 4095;
#line 586
      mode = mode | ((int )inode->i_mode & -4096);
#line 587
      inode->i_mode = (umode_t )mode;
    } else {

    }
#line 589
    if ((attr->ia_valid & 2U) != 0U) {
#line 590
      inode->i_uid = attr->ia_uid;
    } else {

    }
#line 591
    if ((attr->ia_valid & 4U) != 0U) {
#line 592
      inode->i_gid = attr->ia_gid;
    } else {

    }
    {
#line 593
    nfs_set_cache_invalid(inode, 24UL);
#line 595
    ldv_spin_unlock_73(& inode->i_lock);
    }
  } else {

  }
#line 597
  if ((attr->ia_valid & 8U) != 0U) {
    {
#line 598
    nfs_inc_stats___1((struct inode  const  *)inode, 19);
#line 599
    nfs_vmtruncate(inode, attr->ia_size);
    }
  } else {

  }
#line 601
  return;
}
}
#line 602 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_setattr_update_inode[25U]  = 
#line 602
  {      'n',      'f',      's',      '_', 
        's',      'e',      't',      'a', 
        't',      't',      'r',      '_', 
        'u',      'p',      'd',      'a', 
        't',      'e',      '_',      'i', 
        'n',      'o',      'd',      'e', 
        '\000'};
#line 602
struct kernel_symbol  const  __ksymtab_nfs_setattr_update_inode ;
#line 602 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_setattr_update_inode  =    {(unsigned long )(& nfs_setattr_update_inode), (char const   *)(& __kstrtab_nfs_setattr_update_inode)};
#line 604 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_request_parent_use_readdirplus(struct dentry *dentry ) 
{ 
  struct dentry *parent ;

  {
  {
#line 608
  parent = dget_parent(dentry);
#line 609
  nfs_force_use_readdirplus(parent->d_inode);
#line 610
  dput(parent);
  }
#line 611
  return;
}
}
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static bool nfs_need_revalidate_inode(struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 615
  tmp = NFS_I((struct inode  const  *)inode);
  }
#line 615
  if ((tmp->cache_validity & 129UL) != 0UL) {
#line 617
    return (1);
  } else {

  }
  {
#line 618
  tmp___0 = nfs_attribute_cache_expired(inode);
  }
#line 618
  if (tmp___0 != 0) {
#line 619
    return (1);
  } else {

  }
#line 620
  return (0);
}
}
#line 623 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_getattr(struct vfsmount *mnt , struct dentry *dentry , struct kstat *stat ) 
{ 
  struct inode *inode ;
  int need_atime ;
  struct nfs_inode *tmp ;
  int err ;
  struct nfs_server *server ;
  struct nfs_server *tmp___0 ;
  bool tmp___1 ;
  __u64 tmp___2 ;

  {
  {
#line 625
  inode = dentry->d_inode;
#line 626
  tmp = NFS_I((struct inode  const  *)inode);
#line 626
  need_atime = (int )tmp->cache_validity & 4;
#line 629
  trace_nfs_getattr_enter((struct inode  const  *)inode);
  }
#line 631
  if (((int )inode->i_mode & 61440) == 32768) {
    {
#line 632
    nfs_inode_dio_wait(inode);
#line 633
    err = filemap_write_and_wait(inode->i_mapping);
    }
#line 634
    if (err != 0) {
#line 635
      goto out;
    } else {

    }
  } else {

  }
#line 647
  if ((mnt->mnt_flags & 8) != 0 || ((mnt->mnt_flags & 16) != 0 && ((int )inode->i_mode & 61440) == 16384)) {
#line 649
    need_atime = 0;
  } else {

  }
#line 651
  if (need_atime != 0) {
#line 651
    goto _L;
  } else {
    {
#line 651
    tmp___1 = nfs_need_revalidate_inode(inode);
    }
#line 651
    if ((int )tmp___1) {
      _L: /* CIL Label */ 
      {
#line 652
      tmp___0 = NFS_SERVER((struct inode  const  *)inode);
#line 652
      server = tmp___0;
      }
#line 654
      if ((int )server->caps & 1) {
        {
#line 655
        nfs_request_parent_use_readdirplus(dentry);
        }
      } else {

      }
      {
#line 656
      err = __nfs_revalidate_inode(server, inode);
      }
    } else {

    }
  }
#line 658
  if (err == 0) {
    {
#line 659
    generic_fillattr(inode, stat);
#line 660
    tmp___2 = NFS_FILEID((struct inode  const  *)inode);
#line 660
    stat->ino = nfs_compat_user_ino64(tmp___2);
    }
  } else {

  }
  out: 
  {
#line 663
  trace_nfs_getattr_exit((struct inode  const  *)inode, err);
  }
#line 664
  return (err);
}
}
#line 666 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_getattr[12U]  = 
#line 666
  {      'n',      'f',      's',      '_', 
        'g',      'e',      't',      'a', 
        't',      't',      'r',      '\000'};
#line 666
struct kernel_symbol  const  __ksymtab_nfs_getattr ;
#line 666 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_getattr  =    {(unsigned long )(& nfs_getattr), (char const   *)(& __kstrtab_nfs_getattr)};
#line 668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_init_lock_context(struct nfs_lock_context *l_ctx ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;

  {
  {
#line 670
  atomic_set(& l_ctx->count, 1);
#line 671
  tmp = get_current();
#line 671
  l_ctx->lockowner.l_owner = tmp->files;
#line 672
  tmp___0 = get_current();
#line 672
  l_ctx->lockowner.l_pid = tmp___0->tgid;
#line 673
  INIT_LIST_HEAD(& l_ctx->list);
#line 674
  nfs_iocounter_init(& l_ctx->io_count);
  }
#line 675
  return;
}
}
#line 677 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static struct nfs_lock_context *__nfs_find_lock_context(struct nfs_open_context *ctx ) 
{ 
  struct nfs_lock_context *head ;
  struct nfs_lock_context *pos ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  struct list_head  const  *__mptr ;

  {
#line 679
  head = & ctx->lock_context;
#line 680
  pos = head;
  ldv_58043: 
  {
#line 683
  tmp = get_current();
  }
#line 683
  if ((unsigned long )pos->lockowner.l_owner != (unsigned long )tmp->files) {
#line 684
    goto ldv_58040;
  } else {

  }
  {
#line 685
  tmp___0 = get_current();
  }
#line 685
  if (pos->lockowner.l_pid != tmp___0->tgid) {
#line 686
    goto ldv_58040;
  } else {

  }
  {
#line 687
  atomic_inc(& pos->count);
  }
#line 688
  return (pos);
  ldv_58040: 
#line 689
  __mptr = (struct list_head  const  *)pos->list.next;
#line 689
  pos = (struct nfs_lock_context *)((char *)__mptr + 0xfffffffffffffff8UL);
#line 689
  if ((unsigned long )pos != (unsigned long )head) {
#line 691
    goto ldv_58043;
  } else {

  }

#line 690
  return ((struct nfs_lock_context *)0);
}
}
#line 693 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct nfs_lock_context *nfs_get_lock_context(struct nfs_open_context *ctx ) 
{ 
  struct nfs_lock_context *res ;
  struct nfs_lock_context *new ;
  struct inode *inode ;
  void *tmp ;
  void *tmp___0 ;

  {
  {
#line 695
  new = (struct nfs_lock_context *)0;
#line 696
  inode = (ctx->dentry)->d_inode;
#line 698
  ldv_spin_lock_72(& inode->i_lock);
#line 699
  res = __nfs_find_lock_context(ctx);
  }
#line 700
  if ((unsigned long )res == (unsigned long )((struct nfs_lock_context *)0)) {
    {
#line 701
    ldv_spin_unlock_73(& inode->i_lock);
#line 702
    tmp = kmalloc(64UL, 208U);
#line 702
    new = (struct nfs_lock_context *)tmp;
    }
#line 703
    if ((unsigned long )new == (unsigned long )((struct nfs_lock_context *)0)) {
      {
#line 704
      tmp___0 = ERR_PTR(-12L);
      }
#line 704
      return ((struct nfs_lock_context *)tmp___0);
    } else {

    }
    {
#line 705
    nfs_init_lock_context(new);
#line 706
    ldv_spin_lock_72(& inode->i_lock);
#line 707
    res = __nfs_find_lock_context(ctx);
    }
#line 708
    if ((unsigned long )res == (unsigned long )((struct nfs_lock_context *)0)) {
      {
#line 709
      list_add_tail(& new->list, & ctx->lock_context.list);
#line 710
      new->open_context = ctx;
#line 711
      res = new;
#line 712
      new = (struct nfs_lock_context *)0;
      }
    } else {

    }
  } else {

  }
  {
#line 715
  ldv_spin_unlock_73(& inode->i_lock);
#line 716
  kfree((void const   *)new);
  }
#line 717
  return (res);
}
}
#line 720 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_put_lock_context(struct nfs_lock_context *l_ctx ) 
{ 
  struct nfs_open_context *ctx ;
  struct inode *inode ;
  int tmp ;

  {
  {
#line 722
  ctx = l_ctx->open_context;
#line 723
  inode = (ctx->dentry)->d_inode;
#line 725
  tmp = ldv___ldv_atomic_dec_and_lock_94(& inode->i_lock);
  }
#line 725
  if (tmp == 0) {
#line 726
    return;
  } else {

  }
  {
#line 727
  list_del(& l_ctx->list);
#line 728
  ldv_spin_unlock_73(& inode->i_lock);
#line 729
  kfree((void const   *)l_ctx);
  }
#line 730
  return;
}
}
#line 740 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_close_context(struct nfs_open_context *ctx , int is_sync ) 
{ 
  struct inode *inode ;
  struct nfs_server *server ;
  struct nfs_inode *tmp ;
  int tmp___0 ;

  {
#line 745
  if ((ctx->mode & 2U) == 0U) {
#line 746
    return;
  } else {

  }
#line 747
  if (is_sync == 0) {
#line 748
    return;
  } else {

  }
  {
#line 749
  inode = (ctx->dentry)->d_inode;
#line 750
  tmp = NFS_I((struct inode  const  *)inode);
#line 750
  tmp___0 = list_empty((struct list_head  const  *)(& tmp->open_files));
  }
#line 750
  if (tmp___0 == 0) {
#line 751
    return;
  } else {

  }
  {
#line 752
  server = NFS_SERVER((struct inode  const  *)inode);
  }
#line 753
  if ((server->flags & 16) != 0) {
#line 754
    return;
  } else {

  }
  {
#line 755
  nfs_revalidate_inode(server, inode);
  }
#line 756
  return;
}
}
#line 757 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_close_context[18U]  = 
#line 757
  {      'n',      'f',      's',      '_', 
        'c',      'l',      'o',      's', 
        'e',      '_',      'c',      'o', 
        'n',      't',      'e',      'x', 
        't',      '\000'};
#line 757
struct kernel_symbol  const  __ksymtab_nfs_close_context ;
#line 757 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_close_context  =    {(unsigned long )(& nfs_close_context), (char const   *)(& __kstrtab_nfs_close_context)};
#line 759 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct nfs_open_context *alloc_nfs_open_context(struct dentry *dentry , fmode_t f_mode ) 
{ 
  struct nfs_open_context *ctx ;
  struct rpc_cred *cred ;
  struct rpc_cred *tmp ;
  void *tmp___0 ;
  bool tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;

  {
  {
#line 762
  tmp = rpc_lookup_cred();
#line 762
  cred = tmp;
#line 763
  tmp___1 = IS_ERR((void const   *)cred);
  }
#line 763
  if ((int )tmp___1) {
    {
#line 764
    tmp___0 = ERR_CAST((void const   *)cred);
    }
#line 764
    return ((struct nfs_open_context *)tmp___0);
  } else {

  }
  {
#line 766
  tmp___2 = kmalloc(136UL, 208U);
#line 766
  ctx = (struct nfs_open_context *)tmp___2;
  }
#line 767
  if ((unsigned long )ctx == (unsigned long )((struct nfs_open_context *)0)) {
    {
#line 768
    put_rpccred(cred);
#line 769
    tmp___3 = ERR_PTR(-12L);
    }
#line 769
    return ((struct nfs_open_context *)tmp___3);
  } else {

  }
  {
#line 771
  nfs_sb_active(dentry->d_sb);
#line 772
  ctx->dentry = dget(dentry);
#line 773
  ctx->cred = cred;
#line 774
  ctx->state = (struct nfs4_state *)0;
#line 775
  ctx->mode = f_mode;
#line 776
  ctx->flags = 0UL;
#line 777
  ctx->error = 0;
#line 778
  nfs_init_lock_context(& ctx->lock_context);
#line 779
  ctx->lock_context.open_context = ctx;
#line 780
  INIT_LIST_HEAD(& ctx->list);
#line 781
  ctx->mdsthreshold = (struct nfs4_threshold *)0;
  }
#line 782
  return (ctx);
}
}
#line 784 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_alloc_nfs_open_context[23U]  = 
#line 784
  {      'a',      'l',      'l',      'o', 
        'c',      '_',      'n',      'f', 
        's',      '_',      'o',      'p', 
        'e',      'n',      '_',      'c', 
        'o',      'n',      't',      'e', 
        'x',      't',      '\000'};
#line 784
struct kernel_symbol  const  __ksymtab_alloc_nfs_open_context ;
#line 784 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_alloc_nfs_open_context  =    {(unsigned long )(& alloc_nfs_open_context), (char const   *)(& __kstrtab_alloc_nfs_open_context)};
#line 786 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct nfs_open_context *get_nfs_open_context(struct nfs_open_context *ctx ) 
{ 


  {
#line 788
  if ((unsigned long )ctx != (unsigned long )((struct nfs_open_context *)0)) {
    {
#line 789
    atomic_inc(& ctx->lock_context.count);
    }
  } else {

  }
#line 790
  return (ctx);
}
}
#line 792 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_get_nfs_open_context[21U]  = 
#line 792
  {      'g',      'e',      't',      '_', 
        'n',      'f',      's',      '_', 
        'o',      'p',      'e',      'n', 
        '_',      'c',      'o',      'n', 
        't',      'e',      'x',      't', 
        '\000'};
#line 792
struct kernel_symbol  const  __ksymtab_get_nfs_open_context ;
#line 792 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_get_nfs_open_context  =    {(unsigned long )(& get_nfs_open_context), (char const   *)(& __kstrtab_get_nfs_open_context)};
#line 794 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void __put_nfs_open_context(struct nfs_open_context *ctx , int is_sync ) 
{ 
  struct inode *inode ;
  struct super_block *sb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct nfs_rpc_ops  const  *tmp___2 ;

  {
  {
#line 796
  inode = (ctx->dentry)->d_inode;
#line 797
  sb = (ctx->dentry)->d_sb;
#line 799
  tmp___1 = list_empty((struct list_head  const  *)(& ctx->list));
  }
#line 799
  if (tmp___1 == 0) {
    {
#line 800
    tmp = ldv___ldv_atomic_dec_and_lock_96(& inode->i_lock);
    }
#line 800
    if (tmp == 0) {
#line 801
      return;
    } else {

    }
    {
#line 802
    list_del(& ctx->list);
#line 803
    ldv_spin_unlock_73(& inode->i_lock);
    }
  } else {
    {
#line 804
    tmp___0 = atomic_dec_and_test(& ctx->lock_context.count);
    }
#line 804
    if (tmp___0 == 0) {
#line 805
      return;
    } else {

    }
  }
#line 806
  if ((unsigned long )inode != (unsigned long )((struct inode *)0)) {
    {
#line 807
    tmp___2 = NFS_PROTO((struct inode  const  *)inode);
#line 807
    (*(tmp___2->close_context))(ctx, is_sync);
    }
  } else {

  }
#line 808
  if ((unsigned long )ctx->cred != (unsigned long )((struct rpc_cred *)0)) {
    {
#line 809
    put_rpccred(ctx->cred);
    }
  } else {

  }
  {
#line 810
  dput(ctx->dentry);
#line 811
  nfs_sb_deactive(sb);
#line 812
  kfree((void const   *)ctx->mdsthreshold);
#line 813
  kfree((void const   *)ctx);
  }
#line 814
  return;
}
}
#line 816 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void put_nfs_open_context(struct nfs_open_context *ctx ) 
{ 


  {
  {
#line 818
  __put_nfs_open_context(ctx, 0);
  }
#line 819
  return;
}
}
#line 820 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_put_nfs_open_context[21U]  = 
#line 820
  {      'p',      'u',      't',      '_', 
        'n',      'f',      's',      '_', 
        'o',      'p',      'e',      'n', 
        '_',      'c',      'o',      'n', 
        't',      'e',      'x',      't', 
        '\000'};
#line 820
struct kernel_symbol  const  __ksymtab_put_nfs_open_context ;
#line 820 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_put_nfs_open_context  =    {(unsigned long )(& put_nfs_open_context), (char const   *)(& __kstrtab_put_nfs_open_context)};
#line 826 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_inode_attach_open_context(struct nfs_open_context *ctx ) 
{ 
  struct inode *inode ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;

  {
  {
#line 828
  inode = (ctx->dentry)->d_inode;
#line 829
  tmp = NFS_I((struct inode  const  *)inode);
#line 829
  nfsi = tmp;
#line 831
  ldv_spin_lock_72(& inode->i_lock);
#line 832
  list_add(& ctx->list, & nfsi->open_files);
#line 833
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 834
  return;
}
}
#line 835 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_inode_attach_open_context[30U]  = 
#line 835
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'o',      'd', 
        'e',      '_',      'a',      't', 
        't',      'a',      'c',      'h', 
        '_',      'o',      'p',      'e', 
        'n',      '_',      'c',      'o', 
        'n',      't',      'e',      'x', 
        't',      '\000'};
#line 835
struct kernel_symbol  const  __ksymtab_nfs_inode_attach_open_context ;
#line 835 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_inode_attach_open_context  =    {(unsigned long )(& nfs_inode_attach_open_context), (char const   *)(& __kstrtab_nfs_inode_attach_open_context)};
#line 837 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_file_set_open_context(struct file *filp , struct nfs_open_context *ctx ) 
{ 
  struct nfs_open_context *tmp ;
  int tmp___0 ;

  {
  {
#line 839
  tmp = get_nfs_open_context(ctx);
#line 839
  filp->private_data = (void *)tmp;
#line 840
  tmp___0 = list_empty((struct list_head  const  *)(& ctx->list));
  }
#line 840
  if (tmp___0 != 0) {
    {
#line 841
    nfs_inode_attach_open_context(ctx);
    }
  } else {

  }
#line 842
  return;
}
}
#line 843 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_file_set_open_context[26U]  = 
#line 843
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'e', 
        '_',      's',      'e',      't', 
        '_',      'o',      'p',      'e', 
        'n',      '_',      'c',      'o', 
        'n',      't',      'e',      'x', 
        't',      '\000'};
#line 843
struct kernel_symbol  const  __ksymtab_nfs_file_set_open_context ;
#line 843 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_file_set_open_context  =    {(unsigned long )(& nfs_file_set_open_context), (char const   *)(& __kstrtab_nfs_file_set_open_context)};
#line 848 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct nfs_open_context *nfs_find_open_context(struct inode *inode , struct rpc_cred *cred ,
                                               fmode_t mode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct nfs_open_context *pos ;
  struct nfs_open_context *ctx ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 850
  tmp = NFS_I((struct inode  const  *)inode);
#line 850
  nfsi = tmp;
#line 851
  ctx = (struct nfs_open_context *)0;
#line 853
  ldv_spin_lock_72(& inode->i_lock);
#line 854
  __mptr = (struct list_head  const  *)nfsi->open_files.next;
#line 854
  pos = (struct nfs_open_context *)((char *)__mptr + 0xffffffffffffff90UL);
  }
#line 854
  goto ldv_58149;
  ldv_58148: ;
#line 855
  if ((unsigned long )cred != (unsigned long )((struct rpc_cred *)0) && (unsigned long )pos->cred != (unsigned long )cred) {
#line 856
    goto ldv_58146;
  } else {

  }
#line 857
  if ((pos->mode & 3U) != mode) {
#line 858
    goto ldv_58146;
  } else {

  }
  {
#line 859
  ctx = get_nfs_open_context(pos);
  }
#line 860
  goto ldv_58147;
  ldv_58146: 
#line 854
  __mptr___0 = (struct list_head  const  *)pos->list.next;
#line 854
  pos = (struct nfs_open_context *)((char *)__mptr___0 + 0xffffffffffffff90UL);
  ldv_58149: ;
#line 854
  if ((unsigned long )(& pos->list) != (unsigned long )(& nfsi->open_files)) {
#line 856
    goto ldv_58148;
  } else {

  }
  ldv_58147: 
  {
#line 862
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 863
  return (ctx);
}
}
#line 866 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_file_clear_open_context(struct file *filp ) 
{ 
  struct nfs_open_context *ctx ;
  struct nfs_open_context *tmp ;
  struct inode *inode ;
  struct nfs_inode *tmp___0 ;

  {
  {
#line 868
  tmp = nfs_file_open_context(filp);
#line 868
  ctx = tmp;
  }
#line 870
  if ((unsigned long )ctx != (unsigned long )((struct nfs_open_context *)0)) {
    {
#line 871
    inode = (ctx->dentry)->d_inode;
#line 873
    filp->private_data = (void *)0;
#line 874
    ldv_spin_lock_72(& inode->i_lock);
#line 875
    tmp___0 = NFS_I((struct inode  const  *)inode);
#line 875
    list_move_tail(& ctx->list, & tmp___0->open_files);
#line 876
    ldv_spin_unlock_73(& inode->i_lock);
#line 877
    __put_nfs_open_context(ctx, (filp->f_flags & 16384U) == 0U);
    }
  } else {

  }
#line 879
  return;
}
}
#line 884 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_open(struct inode *inode , struct file *filp ) 
{ 
  struct nfs_open_context *ctx ;
  long tmp ;
  bool tmp___0 ;

  {
  {
#line 888
  ctx = alloc_nfs_open_context(filp->f_path.dentry, filp->f_mode);
#line 889
  tmp___0 = IS_ERR((void const   *)ctx);
  }
#line 889
  if ((int )tmp___0) {
    {
#line 890
    tmp = PTR_ERR((void const   *)ctx);
    }
#line 890
    return ((int )tmp);
  } else {

  }
  {
#line 891
  nfs_file_set_open_context(filp, ctx);
#line 892
  put_nfs_open_context(ctx);
#line 893
  nfs_fscache_open_file(inode, filp);
  }
#line 894
  return (0);
}
}
#line 897 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_release(struct inode *inode , struct file *filp ) 
{ 


  {
  {
#line 899
  nfs_file_clear_open_context(filp);
  }
#line 900
  return (0);
}
}
#line 908 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int __nfs_revalidate_inode(struct nfs_server *server , struct inode *inode ) 
{ 
  int status ;
  struct nfs4_label *label ;
  struct nfs_fattr *fattr ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  __u64 tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct nfs_server *tmp___4 ;
  long tmp___5 ;
  bool tmp___6 ;
  struct nfs_rpc_ops  const  *tmp___7 ;
  struct nfs_fh *tmp___8 ;
  __u64 tmp___9 ;
  long tmp___10 ;
  struct nfs_inode *tmp___11 ;
  __u64 tmp___12 ;
  long tmp___13 ;
  __u64 tmp___14 ;
  long tmp___15 ;

  {
  {
#line 910
  status = -116;
#line 911
  label = (struct nfs4_label *)0;
#line 912
  fattr = (struct nfs_fattr *)0;
#line 913
  tmp = NFS_I((struct inode  const  *)inode);
#line 913
  nfsi = tmp;
#line 915
  tmp___1 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 915
  if (tmp___1 != 0L) {
    {
#line 915
    tmp___0 = NFS_FILEID((struct inode  const  *)inode);
#line 915
    printk("\001dNFS: revalidating (%s/%Lu)\n", (char *)(& (inode->i_sb)->s_id), tmp___0);
    }
  } else {

  }
  {
#line 918
  trace_nfs_revalidate_inode_enter((struct inode  const  *)inode);
#line 920
  tmp___2 = is_bad_inode(inode);
  }
#line 920
  if (tmp___2 != 0) {
#line 921
    goto out;
  } else {

  }
  {
#line 922
  tmp___3 = NFS_STALE((struct inode  const  *)inode);
  }
#line 922
  if (tmp___3 != 0) {
#line 923
    goto out;
  } else {

  }
  {
#line 925
  status = -12;
#line 926
  fattr = nfs_alloc_fattr();
  }
#line 927
  if ((unsigned long )fattr == (unsigned long )((struct nfs_fattr *)0)) {
#line 928
    goto out;
  } else {

  }
  {
#line 930
  nfs_inc_stats___1((struct inode  const  *)inode, 0);
#line 932
  tmp___4 = NFS_SERVER((struct inode  const  *)inode);
#line 932
  label = nfs4_label_alloc(tmp___4, 208U);
#line 933
  tmp___6 = IS_ERR((void const   *)label);
  }
#line 933
  if ((int )tmp___6) {
    {
#line 934
    tmp___5 = PTR_ERR((void const   *)label);
#line 934
    status = (int )tmp___5;
    }
#line 935
    goto out;
  } else {

  }
  {
#line 938
  tmp___7 = NFS_PROTO((struct inode  const  *)inode);
#line 938
  tmp___8 = NFS_FH((struct inode  const  *)inode);
#line 938
  status = (*(tmp___7->getattr))(server, tmp___8, fattr, label);
  }
#line 939
  if (status != 0) {
    {
#line 940
    tmp___10 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
    }
#line 940
    if (tmp___10 != 0L) {
      {
#line 940
      tmp___9 = NFS_FILEID((struct inode  const  *)inode);
#line 940
      printk("\001dnfs_revalidate_inode: (%s/%Lu) getattr failed, error=%d\n", (char *)(& (inode->i_sb)->s_id),
             tmp___9, status);
      }
    } else {

    }
#line 943
    if (status == -116) {
      {
#line 944
      nfs_zap_caches(inode);
      }
#line 945
      if (((int )inode->i_mode & 61440) != 16384) {
        {
#line 946
        tmp___11 = NFS_I((struct inode  const  *)inode);
#line 946
        set_bit(1L, (unsigned long volatile   *)(& tmp___11->flags));
        }
      } else {

      }
    } else {

    }
#line 948
    goto err_out;
  } else {

  }
  {
#line 951
  status = nfs_refresh_inode(inode, fattr);
  }
#line 952
  if (status != 0) {
    {
#line 953
    tmp___13 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
    }
#line 953
    if (tmp___13 != 0L) {
      {
#line 953
      tmp___12 = NFS_FILEID((struct inode  const  *)inode);
#line 953
      printk("\001dnfs_revalidate_inode: (%s/%Lu) refresh failed, error=%d\n", (char *)(& (inode->i_sb)->s_id),
             tmp___12, status);
      }
    } else {

    }
#line 956
    goto err_out;
  } else {

  }
#line 959
  if ((nfsi->cache_validity & 16UL) != 0UL) {
    {
#line 960
    nfs_zap_acl_cache(inode);
    }
  } else {

  }
  {
#line 962
  nfs_setsecurity(inode, fattr, label);
#line 964
  tmp___15 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 964
  if (tmp___15 != 0L) {
    {
#line 964
    tmp___14 = NFS_FILEID((struct inode  const  *)inode);
#line 964
    printk("\001dNFS: (%s/%Lu) revalidation complete\n", (char *)(& (inode->i_sb)->s_id),
           tmp___14);
    }
  } else {

  }
  err_out: 
  {
#line 969
  nfs4_label_free(label);
  }
  out: 
  {
#line 971
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
#line 972
  trace_nfs_revalidate_inode_exit((struct inode  const  *)inode, status);
  }
#line 973
  return (status);
}
}
#line 976 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_attribute_timeout(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;

  {
  {
#line 978
  tmp = NFS_I((struct inode  const  *)inode);
#line 978
  nfsi = tmp;
  }
#line 980
  return ((long )((unsigned long )jiffies - nfsi->read_cache_jiffies) < 0L || (long )((unsigned long )jiffies - (nfsi->read_cache_jiffies + nfsi->attrtimeo)) >= 0L);
}
}
#line 983 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_attribute_cache_expired(struct inode *inode ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 985
  tmp = nfs_have_delegated_attributes(inode);
  }
#line 985
  if (tmp != 0) {
#line 986
    return (0);
  } else {

  }
  {
#line 987
  tmp___0 = nfs_attribute_timeout(inode);
  }
#line 987
  return (tmp___0);
}
}
#line 997 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_revalidate_inode(struct nfs_server *server , struct inode *inode ) 
{ 
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 999
  tmp___0 = nfs_need_revalidate_inode(inode);
  }
#line 999
  if (tmp___0) {
#line 999
    tmp___1 = 0;
  } else {
#line 999
    tmp___1 = 1;
  }
#line 999
  if (tmp___1) {
    {
#line 1000
    tmp = NFS_STALE((struct inode  const  *)inode);
    }
#line 1000
    return (tmp != 0 ? -116 : 0);
  } else {

  }
  {
#line 1001
  tmp___2 = __nfs_revalidate_inode(server, inode);
  }
#line 1001
  return (tmp___2);
}
}
#line 1003 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_revalidate_inode[21U]  = 
#line 1003
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'v',      'a', 
        'l',      'i',      'd',      'a', 
        't',      'e',      '_',      'i', 
        'n',      'o',      'd',      'e', 
        '\000'};
#line 1003
struct kernel_symbol  const  __ksymtab_nfs_revalidate_inode ;
#line 1003 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_revalidate_inode  =    {(unsigned long )(& nfs_revalidate_inode), (char const   *)(& __kstrtab_nfs_revalidate_inode)};
#line 1005 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_invalidate_mapping(struct inode *inode , struct address_space *mapping ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int ret ;
  __u64 tmp___0 ;
  long tmp___1 ;

  {
  {
#line 1007
  tmp = NFS_I((struct inode  const  *)inode);
#line 1007
  nfsi = tmp;
  }
#line 1010
  if (mapping->nrpages != 0UL) {
#line 1011
    if (((int )inode->i_mode & 61440) == 32768) {
      {
#line 1012
      ret = nfs_sync_mapping(mapping);
      }
#line 1013
      if (ret < 0) {
#line 1014
        return (ret);
      } else {

      }
    } else {

    }
    {
#line 1016
    ret = invalidate_inode_pages2(mapping);
    }
#line 1017
    if (ret < 0) {
#line 1018
      return (ret);
    } else {

    }
  } else {

  }
#line 1020
  if (((int )inode->i_mode & 61440) == 16384) {
    {
#line 1021
    ldv_spin_lock_72(& inode->i_lock);
#line 1022
    memset((void *)(& nfsi->cookieverf), 0, 8UL);
#line 1023
    ldv_spin_unlock_73(& inode->i_lock);
    }
  } else {

  }
  {
#line 1025
  nfs_inc_stats___1((struct inode  const  *)inode, 2);
#line 1026
  nfs_fscache_wait_on_invalidate(inode);
#line 1028
  tmp___1 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 1028
  if (tmp___1 != 0L) {
    {
#line 1028
    tmp___0 = NFS_FILEID((struct inode  const  *)inode);
#line 1028
    printk("\001dNFS: (%s/%Lu) data cache invalidated\n", (char *)(& (inode->i_sb)->s_id),
           tmp___0);
    }
  } else {

  }
#line 1031
  return (0);
}
}
#line 1034 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static bool nfs_mapping_need_revalidate_inode(struct inode *inode ) 
{ 
  int tmp ;
  struct nfs_inode *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 1036
  tmp = nfs_have_delegated_attributes(inode);
  }
#line 1036
  if (tmp != 0) {
#line 1037
    return (0);
  } else {

  }
  {
#line 1038
  tmp___0 = NFS_I((struct inode  const  *)inode);
  }
#line 1038
  if ((tmp___0->cache_validity & 32UL) != 0UL) {
#line 1038
    tmp___3 = 1;
  } else {
    {
#line 1038
    tmp___1 = nfs_attribute_timeout(inode);
    }
#line 1038
    if (tmp___1 != 0) {
#line 1038
      tmp___3 = 1;
    } else {
      {
#line 1038
      tmp___2 = NFS_STALE((struct inode  const  *)inode);
      }
#line 1038
      if (tmp___2 != 0) {
#line 1038
        tmp___3 = 1;
      } else {
#line 1038
        tmp___3 = 0;
      }
    }
  }
#line 1038
  return ((bool )tmp___3);
}
}
#line 1048 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_revalidate_mapping(struct inode *inode , struct address_space *mapping ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  unsigned long *bitlock ;
  int ret ;
  struct nfs_server *tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
  {
#line 1050
  tmp = NFS_I((struct inode  const  *)inode);
#line 1050
  nfsi = tmp;
#line 1051
  bitlock = & nfsi->flags;
#line 1052
  ret = 0;
  }
#line 1055
  if ((inode->i_flags & 256U) != 0U) {
#line 1056
    goto out;
  } else {

  }
  {
#line 1058
  tmp___1 = nfs_mapping_need_revalidate_inode(inode);
  }
#line 1058
  if ((int )tmp___1) {
    {
#line 1059
    tmp___0 = NFS_SERVER((struct inode  const  *)inode);
#line 1059
    ret = __nfs_revalidate_inode(tmp___0, inode);
    }
#line 1060
    if (ret < 0) {
#line 1061
      goto out;
    } else {

    }
  } else {

  }
  ldv_58224: 
  {
#line 1077
  ret = wait_on_bit((void *)bitlock, 3, & nfs_wait_bit_killable, 130U);
  }
#line 1079
  if (ret != 0) {
#line 1080
    goto out;
  } else {

  }
  {
#line 1081
  ldv_spin_lock_72(& inode->i_lock);
#line 1082
  tmp___2 = constant_test_bit(3L, (unsigned long const volatile   *)bitlock);
  }
#line 1082
  if (tmp___2 != 0) {
    {
#line 1083
    ldv_spin_unlock_73(& inode->i_lock);
    }
#line 1084
    goto ldv_58222;
  } else {

  }
#line 1086
  if ((nfsi->cache_validity & 2UL) != 0UL) {
#line 1087
    goto ldv_58223;
  } else {

  }
  {
#line 1088
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 1089
  goto out;
  ldv_58222: ;
#line 1090
  goto ldv_58224;
  ldv_58223: 
  {
#line 1092
  set_bit(3L, (unsigned long volatile   *)bitlock);
#line 1093
  __asm__  volatile   ("": : : "memory");
#line 1094
  nfsi->cache_validity = nfsi->cache_validity & 0xfffffffffffffffdUL;
#line 1095
  ldv_spin_unlock_73(& inode->i_lock);
#line 1096
  trace_nfs_invalidate_mapping_enter((struct inode  const  *)inode);
#line 1097
  ret = nfs_invalidate_mapping(inode, mapping);
#line 1098
  trace_nfs_invalidate_mapping_exit((struct inode  const  *)inode, ret);
#line 1100
  clear_bit_unlock(3L, (unsigned long volatile   *)bitlock);
#line 1101
  __asm__  volatile   ("": : : "memory");
#line 1102
  wake_up_bit((void *)bitlock, 3);
  }
  out: ;
#line 1104
  return (ret);
}
}
#line 1107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static unsigned long nfs_wcc_update_inode(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  unsigned long ret ;
  int tmp___0 ;
  int tmp___1 ;
  loff_t tmp___2 ;
  loff_t tmp___3 ;
  loff_t tmp___4 ;

  {
  {
#line 1109
  tmp = NFS_I((struct inode  const  *)inode);
#line 1109
  nfsi = tmp;
#line 1110
  ret = 0UL;
  }
#line 1112
  if (*((unsigned int *)fattr + 0UL) == 393216U && inode->i_version == fattr->pre_change_attr) {
#line 1115
    inode->i_version = fattr->change_attr;
#line 1116
    if (((int )inode->i_mode & 61440) == 16384) {
      {
#line 1117
      nfs_set_cache_invalid(inode, 2UL);
      }
    } else {

    }
#line 1118
    ret = ret | 1UL;
  } else {

  }
#line 1121
  if (*((unsigned int *)fattr + 0UL) == 81920U) {
    {
#line 1121
    tmp___0 = timespec_equal((struct timespec  const  *)(& inode->i_ctime), (struct timespec  const  *)(& fattr->pre_ctime));
    }
#line 1121
    if (tmp___0 != 0) {
      {
#line 1124
      memcpy((void *)(& inode->i_ctime), (void const   *)(& fattr->ctime), 16UL);
#line 1125
      ret = ret | 1UL;
      }
    } else {

    }
  } else {

  }
#line 1128
  if (*((unsigned int *)fattr + 0UL) == 40960U) {
    {
#line 1128
    tmp___1 = timespec_equal((struct timespec  const  *)(& inode->i_mtime), (struct timespec  const  *)(& fattr->pre_mtime));
    }
#line 1128
    if (tmp___1 != 0) {
      {
#line 1131
      memcpy((void *)(& inode->i_mtime), (void const   *)(& fattr->mtime), 16UL);
      }
#line 1132
      if (((int )inode->i_mode & 61440) == 16384) {
        {
#line 1133
        nfs_set_cache_invalid(inode, 2UL);
        }
      } else {

      }
#line 1134
      ret = ret | 1UL;
    } else {

    }
  } else {

  }
#line 1136
  if (*((unsigned int *)fattr + 0UL) == 192U) {
    {
#line 1136
    tmp___3 = i_size_read((struct inode  const  *)inode);
#line 1136
    tmp___4 = nfs_size_to_loff_t(fattr->pre_size);
    }
#line 1136
    if (tmp___3 == tmp___4) {
#line 1136
      if (nfsi->npages == 0UL) {
        {
#line 1140
        tmp___2 = nfs_size_to_loff_t(fattr->size);
#line 1140
        i_size_write(inode, tmp___2);
#line 1141
        ret = ret | 1UL;
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1144
  return (ret);
}
}
#line 1156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_check_inode_attributes(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  loff_t cur_size ;
  loff_t new_isize ;
  unsigned long invalid ;
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
  {
#line 1158
  tmp = NFS_I((struct inode  const  *)inode);
#line 1158
  nfsi = tmp;
#line 1160
  invalid = 0UL;
#line 1163
  tmp___0 = nfs_have_delegated_attributes(inode);
  }
#line 1163
  if (tmp___0 != 0) {
#line 1164
    return (0);
  } else {

  }
#line 1166
  if ((fattr->valid & 2048U) != 0U && nfsi->fileid != fattr->fileid) {
#line 1167
    return (-5);
  } else {

  }
#line 1168
  if ((int )fattr->valid & 1 && (((int )inode->i_mode ^ (int )fattr->mode) & 61440) != 0) {
#line 1169
    return (-5);
  } else {

  }
#line 1171
  if ((fattr->valid & 131072U) != 0U && inode->i_version != fattr->change_attr) {
#line 1173
    invalid = invalid | 33UL;
  } else {

  }
#line 1176
  if ((fattr->valid & 8192U) != 0U) {
    {
#line 1176
    tmp___1 = timespec_equal((struct timespec  const  *)(& inode->i_mtime), (struct timespec  const  *)(& fattr->mtime));
    }
#line 1176
    if (tmp___1 == 0) {
#line 1177
      invalid = invalid | 1UL;
    } else {

    }
  } else {

  }
#line 1179
  if ((fattr->valid & 64U) != 0U) {
    {
#line 1180
    cur_size = i_size_read((struct inode  const  *)inode);
#line 1181
    new_isize = nfs_size_to_loff_t(fattr->size);
    }
#line 1182
    if (cur_size != new_isize && nfsi->npages == 0UL) {
#line 1183
      invalid = invalid | 33UL;
    } else {

    }
  } else {

  }
#line 1187
  if ((fattr->valid & 2U) != 0U && (((int )inode->i_mode ^ (int )fattr->mode) & 4095) != 0) {
#line 1188
    invalid = invalid | 25UL;
  } else {

  }
#line 1189
  if ((fattr->valid & 8U) != 0U) {
    {
#line 1189
    tmp___2 = uid_eq(inode->i_uid, fattr->uid);
    }
#line 1189
    if (tmp___2) {
#line 1189
      tmp___3 = 0;
    } else {
#line 1189
      tmp___3 = 1;
    }
#line 1189
    if (tmp___3) {
#line 1190
      invalid = invalid | 25UL;
    } else {

    }
  } else {

  }
#line 1191
  if ((fattr->valid & 16U) != 0U) {
    {
#line 1191
    tmp___4 = gid_eq(inode->i_gid, fattr->gid);
    }
#line 1191
    if (tmp___4) {
#line 1191
      tmp___5 = 0;
    } else {
#line 1191
      tmp___5 = 1;
    }
#line 1191
    if (tmp___5) {
#line 1192
      invalid = invalid | 25UL;
    } else {

    }
  } else {

  }
#line 1195
  if ((fattr->valid & 4U) != 0U && (unsigned int )inode->__annonCompField39.i_nlink != fattr->nlink) {
#line 1196
    invalid = invalid | 1UL;
  } else {

  }
#line 1198
  if ((fattr->valid & 4096U) != 0U) {
    {
#line 1198
    tmp___6 = timespec_equal((struct timespec  const  *)(& inode->i_atime), (struct timespec  const  *)(& fattr->atime));
    }
#line 1198
    if (tmp___6 == 0) {
#line 1199
      invalid = invalid | 4UL;
    } else {

    }
  } else {

  }
#line 1201
  if (invalid != 0UL) {
    {
#line 1202
    nfs_set_cache_invalid(inode, invalid);
    }
  } else {

  }
#line 1204
  nfsi->read_cache_jiffies = fattr->time_start;
#line 1205
  return (0);
}
}
#line 1208 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_ctime_need_update(struct inode  const  *inode , struct nfs_fattr  const  *fattr ) 
{ 
  int tmp ;

  {
#line 1210
  if (((unsigned int )fattr->valid & 16384U) == 0U) {
#line 1211
    return (0);
  } else {

  }
  {
#line 1212
  tmp = timespec_compare(& fattr->ctime, & inode->i_ctime);
  }
#line 1212
  return (tmp > 0);
}
}
#line 1215 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_size_need_update(struct inode  const  *inode , struct nfs_fattr  const  *fattr ) 
{ 
  loff_t tmp ;
  loff_t tmp___0 ;

  {
#line 1217
  if (((unsigned int )fattr->valid & 64U) == 0U) {
#line 1218
    return (0);
  } else {

  }
  {
#line 1219
  tmp = nfs_size_to_loff_t(fattr->size);
#line 1219
  tmp___0 = i_size_read(inode);
  }
#line 1219
  return (tmp > tmp___0);
}
}
#line 1222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static atomic_long_t nfs_attr_generation_counter  ;
#line 1224 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static unsigned long nfs_read_attr_generation_counter(void) 
{ 
  long tmp ;

  {
  {
#line 1226
  tmp = atomic_long_read(& nfs_attr_generation_counter);
  }
#line 1226
  return ((unsigned long )tmp);
}
}
#line 1229 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
unsigned long nfs_inc_attr_generation_counter(void) 
{ 
  long tmp ;

  {
  {
#line 1231
  tmp = atomic_long_inc_return(& nfs_attr_generation_counter);
  }
#line 1231
  return ((unsigned long )tmp);
}
}
#line 1234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_fattr_init(struct nfs_fattr *fattr ) 
{ 


  {
  {
#line 1236
  fattr->valid = 0U;
#line 1237
  fattr->time_start = jiffies;
#line 1238
  fattr->gencount = nfs_inc_attr_generation_counter();
#line 1239
  fattr->owner_name = (struct nfs4_string *)0;
#line 1240
  fattr->group_name = (struct nfs4_string *)0;
  }
#line 1241
  return;
}
}
#line 1242 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_fattr_init[15U]  = 
#line 1242
  {      'n',      'f',      's',      '_', 
        'f',      'a',      't',      't', 
        'r',      '_',      'i',      'n', 
        'i',      't',      '\000'};
#line 1242
struct kernel_symbol  const  __ksymtab_nfs_fattr_init ;
#line 1242 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_fattr_init  =    {(unsigned long )(& nfs_fattr_init), (char const   *)(& __kstrtab_nfs_fattr_init)};
#line 1244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct nfs_fattr *nfs_alloc_fattr(void) 
{ 
  struct nfs_fattr *fattr ;
  void *tmp ;

  {
  {
#line 1248
  tmp = kmalloc(216UL, 80U);
#line 1248
  fattr = (struct nfs_fattr *)tmp;
  }
#line 1249
  if ((unsigned long )fattr != (unsigned long )((struct nfs_fattr *)0)) {
    {
#line 1250
    nfs_fattr_init(fattr);
    }
  } else {

  }
#line 1251
  return (fattr);
}
}
#line 1253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_alloc_fattr[16U]  = 
#line 1253
  {      'n',      'f',      's',      '_', 
        'a',      'l',      'l',      'o', 
        'c',      '_',      'f',      'a', 
        't',      't',      'r',      '\000'};
#line 1253
struct kernel_symbol  const  __ksymtab_nfs_alloc_fattr ;
#line 1253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_alloc_fattr  =    {(unsigned long )(& nfs_alloc_fattr), (char const   *)(& __kstrtab_nfs_alloc_fattr)};
#line 1255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct nfs_fh *nfs_alloc_fhandle(void) 
{ 
  struct nfs_fh *fh ;
  void *tmp ;

  {
  {
#line 1259
  tmp = kmalloc(130UL, 80U);
#line 1259
  fh = (struct nfs_fh *)tmp;
  }
#line 1260
  if ((unsigned long )fh != (unsigned long )((struct nfs_fh *)0)) {
#line 1261
    fh->size = 0U;
  } else {

  }
#line 1262
  return (fh);
}
}
#line 1264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_alloc_fhandle[18U]  = 
#line 1264
  {      'n',      'f',      's',      '_', 
        'a',      'l',      'l',      'o', 
        'c',      '_',      'f',      'h', 
        'a',      'n',      'd',      'l', 
        'e',      '\000'};
#line 1264
struct kernel_symbol  const  __ksymtab_nfs_alloc_fhandle ;
#line 1264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_alloc_fhandle  =    {(unsigned long )(& nfs_alloc_fhandle), (char const   *)(& __kstrtab_nfs_alloc_fhandle)};
#line 1275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
u32 _nfs_display_fhandle_hash(struct nfs_fh  const  *fh ) 
{ 
  u32 tmp ;

  {
  {
#line 1279
  tmp = nfs_fhandle_hash(fh);
  }
#line 1279
  return (tmp);
}
}
#line 1281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab__nfs_display_fhandle_hash[26U]  = 
#line 1281
  {      '_',      'n',      'f',      's', 
        '_',      'd',      'i',      's', 
        'p',      'l',      'a',      'y', 
        '_',      'f',      'h',      'a', 
        'n',      'd',      'l',      'e', 
        '_',      'h',      'a',      's', 
        'h',      '\000'};
#line 1281
struct kernel_symbol  const  __ksymtab__nfs_display_fhandle_hash ;
#line 1281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab__nfs_display_fhandle_hash  =    {(unsigned long )(& _nfs_display_fhandle_hash), (char const   *)(& __kstrtab__nfs_display_fhandle_hash)};
#line 1291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void _nfs_display_fhandle(struct nfs_fh  const  *fh , char const   *caption ) 
{ 
  unsigned short i ;
  u32 tmp ;
  __be32 *pos ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;

  {
#line 1295
  if ((unsigned long )fh == (unsigned long )((struct nfs_fh  const  *)0) || (unsigned int )((unsigned short )fh->size) == 0U) {
    {
#line 1296
    printk("\001d%s at %p is empty\n", caption, fh);
    }
#line 1297
    return;
  } else {

  }
  {
#line 1300
  tmp = _nfs_display_fhandle_hash(fh);
#line 1300
  printk("\001d%s at %p is %u bytes, crc: 0x%08x:\n", caption, fh, (int )fh->size,
         tmp);
#line 1302
  i = 0U;
  }
#line 1302
  goto ldv_58306;
  ldv_58305: 
#line 1303
  pos = (__be32 *)((unsigned char const   *)(& fh->data) + (unsigned long )i);
  {
#line 1306
  if ((((int )fh->size - (int )i) + -1) >> 2 == 0) {
#line 1306
    goto case_0;
  } else {

  }
#line 1310
  if ((((int )fh->size - (int )i) + -1) >> 2 == 1) {
#line 1310
    goto case_1;
  } else {

  }
#line 1314
  if ((((int )fh->size - (int )i) + -1) >> 2 == 2) {
#line 1314
    goto case_2;
  } else {

  }
#line 1319
  goto switch_default;
  case_0: /* CIL Label */ 
  {
#line 1307
  tmp___0 = __be32_to_cpup((__be32 const   *)pos);
#line 1307
  printk("\001d %08x\n", tmp___0);
  }
#line 1309
  goto ldv_58301;
  case_1: /* CIL Label */ 
  {
#line 1311
  tmp___1 = __be32_to_cpup((__be32 const   *)(pos + 1UL));
#line 1311
  tmp___2 = __be32_to_cpup((__be32 const   *)pos);
#line 1311
  printk("\001d %08x %08x\n", tmp___2, tmp___1);
  }
#line 1313
  goto ldv_58301;
  case_2: /* CIL Label */ 
  {
#line 1315
  tmp___3 = __be32_to_cpup((__be32 const   *)(pos + 2UL));
#line 1315
  tmp___4 = __be32_to_cpup((__be32 const   *)(pos + 1UL));
#line 1315
  tmp___5 = __be32_to_cpup((__be32 const   *)pos);
#line 1315
  printk("\001d %08x %08x %08x\n", tmp___5, tmp___4, tmp___3);
  }
#line 1318
  goto ldv_58301;
  switch_default: /* CIL Label */ 
  {
#line 1320
  tmp___6 = __be32_to_cpup((__be32 const   *)(pos + 3UL));
#line 1320
  tmp___7 = __be32_to_cpup((__be32 const   *)(pos + 2UL));
#line 1320
  tmp___8 = __be32_to_cpup((__be32 const   *)(pos + 1UL));
#line 1320
  tmp___9 = __be32_to_cpup((__be32 const   *)pos);
#line 1320
  printk("\001d %08x %08x %08x %08x\n", tmp___9, tmp___8, tmp___7, tmp___6);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_58301: 
#line 1302
  i = (unsigned int )i + 16U;
  ldv_58306: ;
#line 1302
  if ((int )i < (int )((unsigned short )fh->size)) {
#line 1304
    goto ldv_58305;
  } else {

  }

#line 1309
  return;
}
}
#line 1326 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab__nfs_display_fhandle[21U]  = 
#line 1326
  {      '_',      'n',      'f',      's', 
        '_',      'd',      'i',      's', 
        'p',      'l',      'a',      'y', 
        '_',      'f',      'h',      'a', 
        'n',      'd',      'l',      'e', 
        '\000'};
#line 1326
struct kernel_symbol  const  __ksymtab__nfs_display_fhandle ;
#line 1326 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab__nfs_display_fhandle  =    {(unsigned long )(& _nfs_display_fhandle), (char const   *)(& __kstrtab__nfs_display_fhandle)};
#line 1348 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_inode_attrs_need_update(struct inode  const  *inode , struct nfs_fattr  const  *fattr ) 
{ 
  struct nfs_inode  const  *nfsi ;
  struct nfs_inode *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
  {
#line 1350
  tmp = NFS_I(inode);
#line 1350
  nfsi = (struct nfs_inode  const  *)tmp;
  }
#line 1352
  if ((long )fattr->gencount - (long )nfsi->attr_gencount > 0L) {
#line 1352
    tmp___3 = 1;
  } else {
    {
#line 1352
    tmp___0 = nfs_ctime_need_update(inode, fattr);
    }
#line 1352
    if (tmp___0 != 0) {
#line 1352
      tmp___3 = 1;
    } else {
      {
#line 1352
      tmp___1 = nfs_size_need_update(inode, fattr);
      }
#line 1352
      if (tmp___1 != 0) {
#line 1352
        tmp___3 = 1;
      } else {
        {
#line 1352
        tmp___2 = nfs_read_attr_generation_counter();
        }
#line 1352
        if ((long )nfsi->attr_gencount - (long )tmp___2 > 0L) {
#line 1352
          tmp___3 = 1;
        } else {
#line 1352
          tmp___3 = 0;
        }
      }
    }
  }
#line 1352
  return (tmp___3);
}
}
#line 1362 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_inode_attrs_handle_layoutcommit(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  bool tmp ;

  {
  {
#line 1365
  tmp = pnfs_layoutcommit_outstanding(inode);
  }
#line 1365
  if ((int )tmp) {
#line 1366
    fattr->valid = fattr->valid & 4294811583U;
  } else {

  }
#line 1367
  return;
}
}
#line 1372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_refresh_inode_locked(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 1376
  trace_nfs_refresh_inode_enter((struct inode  const  *)inode);
#line 1378
  nfs_inode_attrs_handle_layoutcommit(inode, fattr);
#line 1380
  tmp = nfs_inode_attrs_need_update((struct inode  const  *)inode, (struct nfs_fattr  const  *)fattr);
  }
#line 1380
  if (tmp != 0) {
    {
#line 1381
    ret = nfs_update_inode(inode, fattr);
    }
  } else {
    {
#line 1383
    ret = nfs_check_inode_attributes(inode, fattr);
    }
  }
  {
#line 1385
  trace_nfs_refresh_inode_exit((struct inode  const  *)inode, ret);
  }
#line 1386
  return (ret);
}
}
#line 1399 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_refresh_inode(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  int status ;

  {
#line 1403
  if ((fattr->valid & 162943U) == 0U) {
#line 1404
    return (0);
  } else {

  }
  {
#line 1405
  ldv_spin_lock_72(& inode->i_lock);
#line 1406
  status = nfs_refresh_inode_locked(inode, fattr);
#line 1407
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 1409
  return (status);
}
}
#line 1411 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_refresh_inode[18U]  = 
#line 1411
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'f',      'r', 
        'e',      's',      'h',      '_', 
        'i',      'n',      'o',      'd', 
        'e',      '\000'};
#line 1411
struct kernel_symbol  const  __ksymtab_nfs_refresh_inode ;
#line 1411 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_refresh_inode  =    {(unsigned long )(& nfs_refresh_inode), (char const   *)(& __kstrtab_nfs_refresh_inode)};
#line 1413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_post_op_update_inode_locked(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  unsigned long invalid ;
  int tmp ;

  {
#line 1415
  invalid = 33UL;
#line 1417
  if (((int )inode->i_mode & 61440) == 16384) {
#line 1418
    invalid = invalid | 2UL;
  } else {

  }
  {
#line 1419
  nfs_set_cache_invalid(inode, invalid);
  }
#line 1420
  if ((fattr->valid & 162943U) == 0U) {
#line 1421
    return (0);
  } else {

  }
  {
#line 1422
  tmp = nfs_refresh_inode_locked(inode, fattr);
  }
#line 1422
  return (tmp);
}
}
#line 1439 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_post_op_update_inode(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  int status ;

  {
  {
#line 1443
  ldv_spin_lock_72(& inode->i_lock);
#line 1444
  status = nfs_post_op_update_inode_locked(inode, fattr);
#line 1445
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 1447
  return (status);
}
}
#line 1449 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_post_op_update_inode[25U]  = 
#line 1449
  {      'n',      'f',      's',      '_', 
        'p',      'o',      's',      't', 
        '_',      'o',      'p',      '_', 
        'u',      'p',      'd',      'a', 
        't',      'e',      '_',      'i', 
        'n',      'o',      'd',      'e', 
        '\000'};
#line 1449
struct kernel_symbol  const  __ksymtab_nfs_post_op_update_inode ;
#line 1449 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_post_op_update_inode  =    {(unsigned long )(& nfs_post_op_update_inode), (char const   *)(& __kstrtab_nfs_post_op_update_inode)};
#line 1462 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
int nfs_post_op_update_inode_force_wcc(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  int status ;
  int tmp ;
  loff_t tmp___0 ;

  {
  {
#line 1466
  ldv_spin_lock_72(& inode->i_lock);
  }
#line 1468
  if ((fattr->valid & 162943U) == 0U) {
#line 1470
    fattr->valid = fattr->valid & 4294606719U;
#line 1474
    goto out_noforce;
  } else {
    {
#line 1468
    tmp = nfs_inode_attrs_need_update((struct inode  const  *)inode, (struct nfs_fattr  const  *)fattr);
    }
#line 1468
    if (tmp == 0) {
#line 1470
      fattr->valid = fattr->valid & 4294606719U;
#line 1474
      goto out_noforce;
    } else {

    }
  }
#line 1476
  if (*((unsigned int *)fattr + 0UL) == 131072U) {
#line 1478
    fattr->pre_change_attr = inode->i_version;
#line 1479
    fattr->valid = fattr->valid | 262144U;
  } else {

  }
#line 1481
  if (*((unsigned int *)fattr + 0UL) == 16384U) {
    {
#line 1483
    memcpy((void *)(& fattr->pre_ctime), (void const   *)(& inode->i_ctime), 16UL);
#line 1484
    fattr->valid = fattr->valid | 65536U;
    }
  } else {

  }
#line 1486
  if (*((unsigned int *)fattr + 0UL) == 8192U) {
    {
#line 1488
    memcpy((void *)(& fattr->pre_mtime), (void const   *)(& inode->i_mtime), 16UL);
#line 1489
    fattr->valid = fattr->valid | 32768U;
    }
  } else {

  }
#line 1491
  if (*((unsigned int *)fattr + 0UL) == 64U) {
    {
#line 1493
    tmp___0 = i_size_read((struct inode  const  *)inode);
#line 1493
    fattr->pre_size = (__u64 )tmp___0;
#line 1494
    fattr->valid = fattr->valid | 128U;
    }
  } else {

  }
  out_noforce: 
  {
#line 1497
  status = nfs_post_op_update_inode_locked(inode, fattr);
#line 1498
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 1499
  return (status);
}
}
#line 1501 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_post_op_update_inode_force_wcc[35U]  = 
#line 1501
  {      'n',      'f',      's',      '_', 
        'p',      'o',      's',      't', 
        '_',      'o',      'p',      '_', 
        'u',      'p',      'd',      'a', 
        't',      'e',      '_',      'i', 
        'n',      'o',      'd',      'e', 
        '_',      'f',      'o',      'r', 
        'c',      'e',      '_',      'w', 
        'c',      'c',      '\000'};
#line 1501
struct kernel_symbol  const  __ksymtab_nfs_post_op_update_inode_force_wcc ;
#line 1501 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_post_op_update_inode_force_wcc  =    {(unsigned long )(& nfs_post_op_update_inode_force_wcc), (char const   *)(& __kstrtab_nfs_post_op_update_inode_force_wcc)};
#line 1515 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_update_inode(struct inode *inode , struct nfs_fattr *fattr ) 
{ 
  struct nfs_server *server ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  loff_t cur_isize ;
  loff_t new_isize ;
  unsigned long invalid ;
  unsigned long now ;
  unsigned long save_cache_validity ;
  int tmp___0 ;
  struct nfs_fh *tmp___1 ;
  u32 tmp___2 ;
  long tmp___3 ;
  struct nfs_server *tmp___4 ;
  int tmp___5 ;
  unsigned long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  umode_t newmode ;
  bool tmp___9 ;
  int tmp___10 ;
  bool tmp___11 ;
  int tmp___12 ;
  unsigned int tmp___13 ;
  unsigned int tmp___14 ;
  unsigned long tmp___15 ;
  unsigned int tmp___16 ;
  struct nfs_rpc_ops  const  *tmp___17 ;
  int tmp___18 ;

  {
  {
#line 1518
  tmp = NFS_I((struct inode  const  *)inode);
#line 1518
  nfsi = tmp;
#line 1520
  invalid = 0UL;
#line 1521
  now = jiffies;
#line 1524
  tmp___3 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1524
  if (tmp___3 != 0L) {
    {
#line 1524
    tmp___0 = atomic_read((atomic_t const   *)(& inode->i_count));
#line 1524
    tmp___1 = NFS_FH((struct inode  const  *)inode);
#line 1524
    tmp___2 = nfs_display_fhandle_hash((struct nfs_fh  const  *)tmp___1);
#line 1524
    printk("\001dNFS: %s(%s/%lu fh_crc=0x%08x ct=%d info=0x%x)\n", "nfs_update_inode",
           (char *)(& (inode->i_sb)->s_id), inode->i_ino, tmp___2, tmp___0, fattr->valid);
    }
  } else {

  }
#line 1529
  if ((fattr->valid & 2048U) != 0U && nfsi->fileid != fattr->fileid) {
    {
#line 1530
    tmp___4 = NFS_SERVER((struct inode  const  *)inode);
#line 1530
    printk("\vNFS: server %s error: fileid changed\nfsid %s: expected fileid 0x%Lx, got 0x%Lx\n",
           (tmp___4->nfs_client)->cl_hostname, (char *)(& (inode->i_sb)->s_id), (long long )nfsi->fileid,
           (long long )fattr->fileid);
    }
#line 1535
    goto out_err;
  } else {

  }
#line 1541
  if ((int )fattr->valid & 1 && (((int )inode->i_mode ^ (int )fattr->mode) & 61440) != 0) {
    {
#line 1545
    printk("\017NFS: %s: inode %lu mode changed, %07o to %07o\n", "nfs_update_inode",
           inode->i_ino, (int )inode->i_mode, (int )fattr->mode);
    }
#line 1547
    goto out_err;
  } else {

  }
  {
#line 1550
  server = NFS_SERVER((struct inode  const  *)inode);
  }
#line 1552
  if (((int )inode->i_mode & 61440) == 16384 && (fattr->valid & 1024U) != 0U) {
    {
#line 1552
    tmp___5 = nfs_fsid_equal((struct nfs_fsid  const  *)(& server->fsid), (struct nfs_fsid  const  *)(& fattr->fsid));
    }
#line 1552
    if (tmp___5 == 0) {
#line 1552
      if ((inode->i_flags & 2048U) == 0U) {
#line 1555
        server->fsid = fattr->fsid;
      } else {

      }
    } else {

    }
  } else {

  }
  {
#line 1560
  nfsi->read_cache_jiffies = fattr->time_start;
#line 1562
  save_cache_validity = nfsi->cache_validity;
#line 1563
  nfsi->cache_validity = nfsi->cache_validity & 0xffffffffffffff9aUL;
#line 1569
  tmp___6 = nfs_wcc_update_inode(inode, fattr);
#line 1569
  invalid = invalid | tmp___6;
  }
#line 1572
  if ((fattr->valid & 131072U) != 0U) {
#line 1573
    if (inode->i_version != fattr->change_attr) {
      {
#line 1574
      tmp___7 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
      }
#line 1574
      if (tmp___7 != 0L) {
        {
#line 1574
        printk("\001dNFS: change_attr change on server for file %s/%ld\n", (char *)(& (inode->i_sb)->s_id),
               inode->i_ino);
        }
      } else {

      }
#line 1576
      invalid = invalid | 59UL;
#line 1581
      if (((int )inode->i_mode & 61440) == 16384) {
        {
#line 1582
        nfs_force_lookup_revalidate(inode);
        }
      } else {

      }
#line 1583
      inode->i_version = fattr->change_attr;
    } else {

    }
  } else
#line 1585
  if ((server->caps & 32U) != 0U) {
#line 1586
    nfsi->cache_validity = nfsi->cache_validity | save_cache_validity;
  } else {

  }
#line 1588
  if ((fattr->valid & 8192U) != 0U) {
    {
#line 1589
    memcpy((void *)(& inode->i_mtime), (void const   *)(& fattr->mtime), 16UL);
    }
  } else
#line 1590
  if ((server->caps & 8192U) != 0U) {
#line 1591
    nfsi->cache_validity = nfsi->cache_validity | (save_cache_validity & 65UL);
  } else {

  }
#line 1595
  if ((fattr->valid & 16384U) != 0U) {
    {
#line 1596
    memcpy((void *)(& inode->i_ctime), (void const   *)(& fattr->ctime), 16UL);
    }
  } else
#line 1597
  if ((server->caps & 4096U) != 0U) {
#line 1598
    nfsi->cache_validity = nfsi->cache_validity | (save_cache_validity & 65UL);
  } else {

  }
#line 1603
  if ((fattr->valid & 64U) != 0U) {
    {
#line 1604
    new_isize = nfs_size_to_loff_t(fattr->size);
#line 1605
    cur_isize = i_size_read((struct inode  const  *)inode);
    }
#line 1606
    if (new_isize != cur_isize) {
#line 1609
      if (nfsi->npages == 0UL || new_isize > cur_isize) {
        {
#line 1610
        i_size_write(inode, new_isize);
#line 1611
        invalid = invalid | 3UL;
#line 1612
        invalid = invalid & 0xffffffffffffffdfUL;
        }
      } else {

      }
      {
#line 1614
      tmp___8 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
      }
#line 1614
      if (tmp___8 != 0L) {
        {
#line 1614
        printk("\001dNFS: isize change on server for file %s/%ld (%Ld to %Ld)\n",
               (char *)(& (inode->i_sb)->s_id), inode->i_ino, cur_isize, new_isize);
        }
      } else {

      }
    } else {

    }
  } else {
#line 1622
    nfsi->cache_validity = nfsi->cache_validity | (save_cache_validity & 97UL);
  }
#line 1628
  if ((fattr->valid & 4096U) != 0U) {
    {
#line 1629
    memcpy((void *)(& inode->i_atime), (void const   *)(& fattr->atime), 16UL);
    }
  } else
#line 1630
  if ((server->caps & 2048U) != 0U) {
#line 1631
    nfsi->cache_validity = nfsi->cache_validity | (save_cache_validity & 68UL);
  } else {

  }
#line 1635
  if ((fattr->valid & 2U) != 0U) {
#line 1636
    if ((((int )inode->i_mode ^ (int )fattr->mode) & 4095) != 0) {
#line 1637
      newmode = (unsigned int )inode->i_mode & 61440U;
#line 1638
      newmode = (umode_t )((int )((short )newmode) | ((int )((short )fattr->mode) & 4095));
#line 1639
      inode->i_mode = newmode;
#line 1640
      invalid = invalid | 25UL;
    } else {

    }
  } else
#line 1642
  if ((server->caps & 128U) != 0U) {
#line 1643
    nfsi->cache_validity = nfsi->cache_validity | (save_cache_validity & 89UL);
  } else {

  }
#line 1649
  if ((fattr->valid & 8U) != 0U) {
    {
#line 1650
    tmp___9 = uid_eq(inode->i_uid, fattr->uid);
    }
#line 1650
    if (tmp___9) {
#line 1650
      tmp___10 = 0;
    } else {
#line 1650
      tmp___10 = 1;
    }
#line 1650
    if (tmp___10) {
#line 1651
      invalid = invalid | 25UL;
#line 1652
      inode->i_uid = fattr->uid;
    } else {

    }
  } else
#line 1654
  if ((server->caps & 512U) != 0U) {
#line 1655
    nfsi->cache_validity = nfsi->cache_validity | (save_cache_validity & 89UL);
  } else {

  }
#line 1661
  if ((fattr->valid & 16U) != 0U) {
    {
#line 1662
    tmp___11 = gid_eq(inode->i_gid, fattr->gid);
    }
#line 1662
    if (tmp___11) {
#line 1662
      tmp___12 = 0;
    } else {
#line 1662
      tmp___12 = 1;
    }
#line 1662
    if (tmp___12) {
#line 1663
      invalid = invalid | 25UL;
#line 1664
      inode->i_gid = fattr->gid;
    } else {

    }
  } else
#line 1666
  if ((server->caps & 1024U) != 0U) {
#line 1667
    nfsi->cache_validity = nfsi->cache_validity | (save_cache_validity & 89UL);
  } else {

  }
#line 1673
  if ((fattr->valid & 4U) != 0U) {
#line 1674
    if ((unsigned int )inode->__annonCompField39.i_nlink != fattr->nlink) {
#line 1675
      invalid = invalid | 1UL;
#line 1676
      if (((int )inode->i_mode & 61440) == 16384) {
#line 1677
        invalid = invalid | 2UL;
      } else {

      }
      {
#line 1678
      set_nlink(inode, fattr->nlink);
      }
    } else {

    }
  } else
#line 1680
  if ((server->caps & 256U) != 0U) {
#line 1681
    nfsi->cache_validity = nfsi->cache_validity | (save_cache_validity & 65UL);
  } else {

  }
#line 1685
  if ((fattr->valid & 512U) != 0U) {
    {
#line 1689
    inode->i_blocks = nfs_calc_block_size(fattr->du.nfs3.used);
    }
  } else {

  }
#line 1691
  if ((fattr->valid & 256U) != 0U) {
#line 1692
    inode->i_blocks = (blkcnt_t )fattr->du.nfs2.blocks;
  } else {

  }
#line 1695
  if ((int )invalid & 1) {
    {
#line 1696
    nfs_inc_stats___1((struct inode  const  *)inode, 3);
#line 1697
    tmp___13 = NFS_MINATTRTIMEO((struct inode  const  *)inode);
#line 1697
    nfsi->attrtimeo = (unsigned long )tmp___13;
#line 1698
    nfsi->attrtimeo_timestamp = now;
#line 1699
    nfsi->attr_gencount = nfs_inc_attr_generation_counter();
    }
  } else
#line 1701
  if ((long )(now - nfsi->attrtimeo_timestamp) < 0L || (long )(now - (nfsi->attrtimeo_timestamp + nfsi->attrtimeo)) >= 0L) {
    {
#line 1702
    tmp___15 = nfsi->attrtimeo << 1;
#line 1702
    nfsi->attrtimeo = tmp___15;
#line 1702
    tmp___16 = NFS_MAXATTRTIMEO((struct inode  const  *)inode);
    }
#line 1702
    if (tmp___15 > (unsigned long )tmp___16) {
      {
#line 1703
      tmp___14 = NFS_MAXATTRTIMEO((struct inode  const  *)inode);
#line 1703
      nfsi->attrtimeo = (unsigned long )tmp___14;
      }
    } else {

    }
#line 1704
    nfsi->attrtimeo_timestamp = now;
  } else {

  }
#line 1707
  invalid = invalid & 0xfffffffffffffffeUL;
#line 1709
  if ((((int )inode->i_mode & 61440) != 32768 && ((int )inode->i_mode & 61440) != 16384) && ((int )inode->i_mode & 61440) != 40960) {
#line 1711
    invalid = invalid & 0xfffffffffffffffdUL;
  } else {

  }
  {
#line 1712
  tmp___17 = NFS_PROTO((struct inode  const  *)inode);
#line 1712
  tmp___18 = (*(tmp___17->have_delegation))(inode, 1U);
  }
#line 1712
  if (tmp___18 == 0 || (save_cache_validity & 64UL) != 0UL) {
    {
#line 1714
    nfs_set_cache_invalid(inode, invalid);
    }
  } else {

  }
#line 1716
  return (0);
  out_err: 
  {
#line 1723
  nfs_invalidate_inode(inode);
  }
#line 1724
  return (-116);
}
}
#line 1727 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct inode *nfs_alloc_inode(struct super_block *sb ) 
{ 
  struct nfs_inode *nfsi ;
  void *tmp ;

  {
  {
#line 1730
  tmp = kmem_cache_alloc(nfs_inode_cachep, 208U);
#line 1730
  nfsi = (struct nfs_inode *)tmp;
  }
#line 1731
  if ((unsigned long )nfsi == (unsigned long )((struct nfs_inode *)0)) {
#line 1732
    return ((struct inode *)0);
  } else {

  }
#line 1733
  nfsi->flags = 0UL;
#line 1734
  nfsi->cache_validity = 0UL;
#line 1736
  nfsi->nfs4_acl = (struct nfs4_cached_acl *)0;
#line 1738
  return (& nfsi->vfs_inode);
}
}
#line 1740 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_alloc_inode[16U]  = 
#line 1740
  {      'n',      'f',      's',      '_', 
        'a',      'l',      'l',      'o', 
        'c',      '_',      'i',      'n', 
        'o',      'd',      'e',      '\000'};
#line 1740
struct kernel_symbol  const  __ksymtab_nfs_alloc_inode ;
#line 1740 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_alloc_inode  =    {(unsigned long )(& nfs_alloc_inode), (char const   *)(& __kstrtab_nfs_alloc_inode)};
#line 1742 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_i_callback(struct callback_head *head ) 
{ 
  struct inode *inode ;
  struct callback_head  const  *__mptr ;
  struct nfs_inode *tmp ;

  {
  {
#line 1744
  __mptr = (struct callback_head  const  *)head;
#line 1744
  inode = (struct inode *)((char *)__mptr + 0xfffffffffffffe28UL);
#line 1745
  tmp = NFS_I((struct inode  const  *)inode);
#line 1745
  kmem_cache_free(nfs_inode_cachep, (void *)tmp);
  }
#line 1746
  return;
}
}
#line 1748 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
void nfs_destroy_inode(struct inode *inode ) 
{ 


  {
  {
#line 1750
  call_rcu_sched(& inode->__annonCompField40.i_rcu, & nfs_i_callback);
  }
#line 1751
  return;
}
}
#line 1752 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_destroy_inode[18U]  = 
#line 1752
  {      'n',      'f',      's',      '_', 
        'd',      'e',      's',      't', 
        'r',      'o',      'y',      '_', 
        'i',      'n',      'o',      'd', 
        'e',      '\000'};
#line 1752
struct kernel_symbol  const  __ksymtab_nfs_destroy_inode ;
#line 1752 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_destroy_inode  =    {(unsigned long )(& nfs_destroy_inode), (char const   *)(& __kstrtab_nfs_destroy_inode)};
#line 1754 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
__inline static void nfs4_init_once(struct nfs_inode *nfsi ) 
{ 
  struct lock_class_key __key ;

  {
  {
#line 1757
  INIT_LIST_HEAD(& nfsi->open_states);
#line 1758
  nfsi->delegation = (struct nfs_delegation *)0;
#line 1759
  nfsi->delegation_state = 0U;
#line 1760
  __init_rwsem(& nfsi->rwsem, "&nfsi->rwsem", & __key);
#line 1761
  nfsi->layout = (struct pnfs_layout_hdr *)0;
  }
#line 1762
  return;
}
}
#line 1765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void init_once(void *foo ) 
{ 
  struct nfs_inode *nfsi ;
  struct lock_class_key __key ;

  {
  {
#line 1767
  nfsi = (struct nfs_inode *)foo;
#line 1769
  inode_init_once(& nfsi->vfs_inode);
#line 1770
  INIT_LIST_HEAD(& nfsi->open_files);
#line 1771
  INIT_LIST_HEAD(& nfsi->access_cache_entry_lru);
#line 1772
  INIT_LIST_HEAD(& nfsi->access_cache_inode_lru);
#line 1773
  INIT_LIST_HEAD(& nfsi->commit_info.list);
#line 1774
  nfsi->npages = 0UL;
#line 1775
  nfsi->commit_info.ncommit = 0UL;
#line 1776
  atomic_set(& nfsi->commit_info.rpcs_out, 0);
#line 1777
  atomic_set(& nfsi->silly_count, 1);
#line 1778
  nfsi->silly_list.first = (struct hlist_node *)0;
#line 1779
  __init_waitqueue_head(& nfsi->waitqueue, "&nfsi->waitqueue", & __key);
#line 1780
  nfs4_init_once(nfsi);
  }
#line 1781
  return;
}
}
#line 1783 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_init_inodecache(void) 
{ 


  {
  {
#line 1785
  nfs_inode_cachep = kmem_cache_create("nfs_inode_cache", 1672UL, 0UL, 1179648UL,
                                       & init_once);
  }
#line 1790
  if ((unsigned long )nfs_inode_cachep == (unsigned long )((struct kmem_cache *)0)) {
#line 1791
    return (-12);
  } else {

  }
#line 1793
  return (0);
}
}
#line 1796 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_destroy_inodecache(void) 
{ 


  {
  {
#line 1802
  rcu_barrier();
#line 1803
  kmem_cache_destroy(nfs_inode_cachep);
  }
#line 1804
  return;
}
}
#line 1807 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfsiod_workqueue[17U]  = 
#line 1807
  {      'n',      'f',      's',      'i', 
        'o',      'd',      '_',      'w', 
        'o',      'r',      'k',      'q', 
        'u',      'e',      'u',      'e', 
        '\000'};
#line 1807
struct kernel_symbol  const  __ksymtab_nfsiod_workqueue ;
#line 1807 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfsiod_workqueue  =    {(unsigned long )(& nfsiod_workqueue), (char const   *)(& __kstrtab_nfsiod_workqueue)};
#line 1812 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfsiod_start(void) 
{ 
  struct workqueue_struct *wq ;
  long tmp ;
  struct lock_class_key __key ;
  char const   *__lock_name ;
  struct workqueue_struct *tmp___0 ;

  {
  {
#line 1815
  tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 1815
  if (tmp != 0L) {
    {
#line 1815
    printk("\001dRPC:       creating workqueue nfsiod\n");
    }
  } else {

  }
  {
#line 1816
  __lock_name = "\"nfsiod\"";
#line 1816
  tmp___0 = __alloc_workqueue_key("nfsiod", 8U, 0, & __key, __lock_name);
#line 1816
  wq = tmp___0;
  }
#line 1817
  if ((unsigned long )wq == (unsigned long )((struct workqueue_struct *)0)) {
#line 1818
    return (-12);
  } else {

  }
#line 1819
  nfsiod_workqueue = wq;
#line 1820
  return (0);
}
}
#line 1826 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfsiod_stop(void) 
{ 
  struct workqueue_struct *wq ;

  {
#line 1830
  wq = nfsiod_workqueue;
#line 1831
  if ((unsigned long )wq == (unsigned long )((struct workqueue_struct *)0)) {
#line 1832
    return;
  } else {

  }
  {
#line 1833
  nfsiod_workqueue = (struct workqueue_struct *)0;
#line 1834
  destroy_workqueue(wq);
  }
#line 1835
  return;
}
}
#line 1838 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static char const   __kstrtab_nfs_net_id[11U]  = 
#line 1838
  {      'n',      'f',      's',      '_', 
        'n',      'e',      't',      '_', 
        'i',      'd',      '\000'};
#line 1838
struct kernel_symbol  const  __ksymtab_nfs_net_id ;
#line 1838 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
struct kernel_symbol  const  __ksymtab_nfs_net_id  =    {(unsigned long )(& nfs_net_id), (char const   *)(& __kstrtab_nfs_net_id)};
#line 1840 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int nfs_net_init(struct net *net ) 
{ 


  {
  {
#line 1842
  nfs_clients_init(net);
  }
#line 1843
  return (0);
}
}
#line 1846 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void nfs_net_exit(struct net *net ) 
{ 


  {
  {
#line 1848
  nfs_cleanup_cb_ident_idr(net);
  }
#line 1849
  return;
}
}
#line 1851 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static struct pernet_operations nfs_net_ops  =    {{0, 0}, & nfs_net_init, & nfs_net_exit, 0, & nfs_net_id, 368UL};
#line 1861 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static int init_nfs_fs(void) 
{ 
  int err ;

  {
  {
#line 1865
  err = register_pernet_subsys(& nfs_net_ops);
  }
#line 1866
  if (err < 0) {
#line 1867
    goto out9;
  } else {

  }
  {
#line 1869
  err = nfs_fscache_register();
  }
#line 1870
  if (err < 0) {
#line 1871
    goto out8;
  } else {

  }
  {
#line 1873
  err = nfsiod_start();
  }
#line 1874
  if (err != 0) {
#line 1875
    goto out7;
  } else {

  }
  {
#line 1877
  err = nfs_fs_proc_init();
  }
#line 1878
  if (err != 0) {
#line 1879
    goto out6;
  } else {

  }
  {
#line 1881
  err = nfs_init_nfspagecache();
  }
#line 1882
  if (err != 0) {
#line 1883
    goto out5;
  } else {

  }
  {
#line 1885
  err = nfs_init_inodecache();
  }
#line 1886
  if (err != 0) {
#line 1887
    goto out4;
  } else {

  }
  {
#line 1889
  err = nfs_init_readpagecache();
  }
#line 1890
  if (err != 0) {
#line 1891
    goto out3;
  } else {

  }
  {
#line 1893
  err = nfs_init_writepagecache();
  }
#line 1894
  if (err != 0) {
#line 1895
    goto out2;
  } else {

  }
  {
#line 1897
  err = nfs_init_directcache();
  }
#line 1898
  if (err != 0) {
#line 1899
    goto out1;
  } else {

  }
  {
#line 1902
  rpc_proc_register(& init_net, & nfs_rpcstat);
#line 1904
  err = register_nfs_fs();
  }
#line 1904
  if (err != 0) {
#line 1905
    goto out0;
  } else {

  }
#line 1907
  return (0);
  out0: 
  {
#line 1910
  rpc_proc_unregister(& init_net, "nfs");
#line 1912
  nfs_destroy_directcache();
  }
  out1: 
  {
#line 1914
  nfs_destroy_writepagecache();
  }
  out2: 
  {
#line 1916
  nfs_destroy_readpagecache();
  }
  out3: 
  {
#line 1918
  nfs_destroy_inodecache();
  }
  out4: 
  {
#line 1920
  nfs_destroy_nfspagecache();
  }
  out5: 
  {
#line 1922
  nfs_fs_proc_exit();
  }
  out6: 
  {
#line 1924
  nfsiod_stop();
  }
  out7: 
  {
#line 1926
  nfs_fscache_unregister();
  }
  out8: 
  {
#line 1928
  unregister_pernet_subsys(& nfs_net_ops);
  }
  out9: ;
#line 1930
  return (err);
}
}
#line 1933 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/inode.c"
static void exit_nfs_fs(void) 
{ 


  {
  {
#line 1935
  nfs_destroy_directcache();
#line 1936
  nfs_destroy_writepagecache();
#line 1937
  nfs_destroy_readpagecache();
#line 1938
  nfs_destroy_inodecache();
#line 1939
  nfs_destroy_nfspagecache();
#line 1940
  nfs_fscache_unregister();
#line 1941
  unregister_pernet_subsys(& nfs_net_ops);
#line 1943
  rpc_proc_unregister(& init_net, "nfs");
#line 1945
  unregister_nfs_fs();
#line 1946
  nfs_fs_proc_exit();
#line 1947
  nfsiod_stop();
  }
#line 1948
  return;
}
}
#line 239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_dispatch_default_deregister_2_8_3(void) ;
#line 240
void ldv_dispatch_default_deregister_3_8_4(void) ;
#line 241
void ldv_dispatch_default_register_2_8_5(void) ;
#line 242
void ldv_dispatch_insmod_deregister_10_1(void) ;
#line 243
void ldv_dispatch_insmod_register_10_2(void) ;
#line 245
void ldv_insmod_8(void *arg0 ) ;
#line 246
void ldv_insmod_exit_nfs_fs_8_2(void (*arg0)(void) ) ;
#line 247
int ldv_insmod_init_nfs_fs_8_10(int (*arg0)(void) ) ;
#line 248
void ldv_main_10(void *arg0 ) ;
#line 251
int main(void) ;
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_dispatch_default_deregister_2_8_3(void) 
{ 


  {
#line 268
  return;
}
}
#line 272 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_dispatch_default_deregister_3_8_4(void) 
{ 


  {
#line 277
  return;
}
}
#line 281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_dispatch_default_register_2_8_5(void) 
{ 
  struct ldv_struct_insmod_8 *cf_arg_2 ;
  struct ldv_struct_insmod_8 *cf_arg_3 ;
  struct ldv_struct_insmod_8 *cf_arg_4 ;
  struct ldv_struct_insmod_8 *cf_arg_5 ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
  {
#line 286
  tmp = ldv_xmalloc(4UL);
#line 286
  cf_arg_2 = (struct ldv_struct_insmod_8 *)tmp;
#line 287
  ldv_character_driver_scenario_2((void *)cf_arg_2);
#line 288
  tmp___0 = ldv_xmalloc(4UL);
#line 288
  cf_arg_3 = (struct ldv_struct_insmod_8 *)tmp___0;
#line 289
  ldv_character_driver_scenario_3((void *)cf_arg_3);
#line 290
  tmp___1 = ldv_xmalloc(4UL);
#line 290
  cf_arg_4 = (struct ldv_struct_insmod_8 *)tmp___1;
#line 291
  ldv_character_driver_scenario_4((void *)cf_arg_4);
#line 292
  tmp___2 = ldv_xmalloc(4UL);
#line 292
  cf_arg_5 = (struct ldv_struct_insmod_8 *)tmp___2;
#line 293
  ldv_character_driver_scenario_5((void *)cf_arg_5);
  }
#line 294
  return;
}
}
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_dispatch_insmod_deregister_10_1(void) 
{ 


  {
#line 301
  return;
}
}
#line 305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_dispatch_insmod_register_10_2(void) 
{ 
  struct ldv_struct_insmod_8 *cf_arg_8 ;
  void *tmp ;

  {
  {
#line 307
  tmp = ldv_xmalloc(4UL);
#line 307
  cf_arg_8 = (struct ldv_struct_insmod_8 *)tmp;
#line 308
  ldv_insmod_8((void *)cf_arg_8);
  }
#line 309
  return;
}
}
#line 313 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_insmod_8(void *arg0 ) 
{ 
  void (*ldv_8_exit_nfs_fs_default)(void) ;
  int (*ldv_8_init_nfs_fs_default)(void) ;
  int ldv_8_reg_guard_2_default ;
  int ldv_8_reg_guard_3_default ;
  int ldv_8_ret_default ;
  int tmp ;

  {
  {
#line 323
  ldv_free(arg0);
#line 328
  ldv_8_ret_default = ldv_insmod_init_nfs_fs_8_10(ldv_8_init_nfs_fs_default);
#line 330
  ldv_8_ret_default = ldv_post_init(ldv_8_ret_default);
#line 333
  tmp = ldv_undef_int();
  }
#line 333
  if (tmp != 0) {
    {
#line 335
    __VERIFIER_assume(ldv_8_ret_default != 0);
    }
#line 343
    return;
  } else {
    {
#line 347
    __VERIFIER_assume(ldv_8_ret_default == 0);
#line 351
    ldv_8_reg_guard_2_default = ldv_undef_int();
#line 352
    ldv_8_reg_guard_3_default = ldv_undef_int();
    }
#line 356
    if (ldv_8_reg_guard_2_default != 0) {
      {
#line 357
      ldv_dispatch_default_register_2_8_5();
      }
    } else {

    }
#line 362
    if (ldv_8_reg_guard_3_default != 0) {
      {
#line 363
      ldv_dispatch_default_deregister_3_8_4();
      }
    } else {

    }
#line 368
    if (ldv_8_reg_guard_2_default != 0) {
      {
#line 369
      ldv_dispatch_default_deregister_2_8_3();
      }
    } else {

    }
    {
#line 375
    ldv_insmod_exit_nfs_fs_8_2(ldv_8_exit_nfs_fs_default);
    }
#line 383
    return;
  }
#line 386
  return;
}
}
#line 391 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_insmod_exit_nfs_fs_8_2(void (*arg0)(void) ) 
{ 


  {
  {
#line 392
  exit_nfs_fs();
  }
#line 393
  return;
}
}
#line 396 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
int ldv_insmod_init_nfs_fs_8_10(int (*arg0)(void) ) 
{ 
  int tmp ;

  {
  {
#line 397
  tmp = init_nfs_fs();
  }
#line 397
  return (tmp);
}
}
#line 401 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
void ldv_main_10(void *arg0 ) 
{ 


  {
  {
#line 406
  ldv_dispatch_insmod_register_10_2();
#line 410
  ldv_dispatch_insmod_deregister_10_1();
  }
#line 414
  return;
#line 416
  return;
}
}
#line 421 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
int main(void) 
{ 


  {
  {
#line 424
  ldv_initialize();
#line 427
  ldv_main_10((void *)0);
#line 430
  ldv_check_final_state();
  }
#line 432
  return (0);
}
}
#line 1266 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
static int ldv___ldv_atomic_dec_and_lock_94(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1270
  tmp = __ldv_atomic_dec_and_lock(ldv_func_arg1);
#line 1270
  ldv_func_res = tmp;
#line 1272
  tmp___0 = ldv_atomic_dec_and_lock_i_lock_of_inode();
  }
#line 1272
  return (tmp___0);
#line 1274
  return (ldv_func_res);
}
}
#line 1287 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_inode.c.aux"
static int ldv___ldv_atomic_dec_and_lock_96(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1291
  tmp = __ldv_atomic_dec_and_lock(ldv_func_arg1);
#line 1291
  ldv_func_res = tmp;
#line 1293
  tmp___0 = ldv_atomic_dec_and_lock_i_lock_of_inode();
  }
#line 1293
  return (tmp___0);
#line 1295
  return (ldv_func_res);
}
}
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 53
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 230 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernel.h"
extern void might_fault(void) ;
#line 253
extern int kstrtoull(char const   * , unsigned int  , unsigned long long * ) ;
#line 272 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernel.h"
__inline static int kstrtoul(char const   *s , unsigned int base , unsigned long *res ) 
{ 
  int tmp ;

  {
  {
#line 280
  tmp = kstrtoull(s, base, (unsigned long long *)res);
  }
#line 280
  return (tmp);
}
}
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[8192U] ;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/ioctl.h"
extern char *strndup_user(char const   * , long  ) ;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/string_64.h"
extern char *strcpy(char * , char const   * ) ;
#line 63
extern char *strcat(char * , char const   * ) ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/string.h"
extern char *strchr(char const   * , int  ) ;
#line 89
extern char *strsep(char ** , char const   * ) ;
#line 119
extern char *kstrndup(char const   * , size_t  , gfp_t  ) ;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 108
  __ret_warn_once = cpu >= (unsigned int )nr_cpu_ids;
#line 108
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 108
  if (tmp___1 != 0L) {
    {
#line 108
    __ret_warn_on = ! __warned;
#line 108
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 108
    if (tmp != 0L) {
      {
#line 108
      warn_slowpath_null("include/linux/cpumask.h", 108);
      }
    } else {

    }
    {
#line 108
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 108
    if (tmp___0 != 0L) {
#line 108
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 108
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 110
  return (cpu);
}
}
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 180
  if (n != -1) {
    {
#line 181
    cpumask_check((unsigned int )n);
    }
  } else {

  }
  {
#line 182
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
  }
#line 182
  return ((unsigned int )tmp);
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 157
  __ret = i;
  {
#line 157
  if (4UL == 1UL) {
#line 157
    goto case_1;
  } else {

  }
#line 157
  if (4UL == 2UL) {
#line 157
    goto case_2;
  } else {

  }
#line 157
  if (4UL == 4UL) {
#line 157
    goto case_4;
  } else {

  }
#line 157
  if (4UL == 8UL) {
#line 157
    goto case_8;
  } else {

  }
#line 157
  goto switch_default;
  case_1: /* CIL Label */ 
#line 157
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 157
  goto ldv_5506;
  case_2: /* CIL Label */ 
#line 157
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 157
  goto ldv_5506;
  case_4: /* CIL Label */ 
#line 157
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 157
  goto ldv_5506;
  case_8: /* CIL Label */ 
#line 157
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 157
  goto ldv_5506;
  switch_default: /* CIL Label */ 
  {
#line 157
  __xadd_wrong_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_5506: ;
#line 157
  return (i + __ret);
}
}
#line 839 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_lock___0(void) 
{ 
  bool __warned ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 841
  rcu_read_lock_sched_notrace();
#line 843
  rcu_lock_acquire(& rcu_lock_map);
#line 844
  tmp = debug_lockdep_rcu_enabled();
  }
#line 844
  if (tmp != 0 && ! __warned) {
    {
#line 844
    tmp___0 = rcu_is_watching();
    }
#line 844
    if (tmp___0) {
#line 844
      tmp___1 = 0;
    } else {
#line 844
      tmp___1 = 1;
    }
#line 844
    if (tmp___1) {
      {
#line 844
      __warned = 1;
#line 844
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 845, "rcu_read_lock() used illegally while idle");
      }
    } else {

    }
  } else {

  }
#line 847
  return;
}
}
#line 863 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_unlock___0(void) 
{ 
  bool __warned ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 865
  tmp = debug_lockdep_rcu_enabled();
  }
#line 865
  if (tmp != 0 && ! __warned) {
    {
#line 865
    tmp___0 = rcu_is_watching();
    }
#line 865
    if (tmp___0) {
#line 865
      tmp___1 = 0;
    } else {
#line 865
      tmp___1 = 1;
    }
#line 865
    if (tmp___1) {
      {
#line 865
      __warned = 1;
#line 865
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 866, "rcu_read_unlock() used illegally while idle");
      }
    } else {

    }
  } else {

  }
  {
#line 867
  rcu_lock_release(& rcu_lock_map);
#line 869
  rcu_read_unlock_sched_notrace();
  }
#line 870
  return;
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/shrinker.h"
extern int register_shrinker(struct shrinker * ) ;
#line 69
extern void unregister_shrinker(struct shrinker * ) ;
#line 1792 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
extern void kill_anon_super(struct super_block * ) ;
#line 1794
extern void deactivate_super(struct super_block * ) ;
#line 1795
extern void deactivate_locked_super(struct super_block * ) ;
#line 1796
extern int set_anon_super(struct super_block * , void * ) ;
#line 1799
extern struct super_block *sget(struct file_system_type * , int (*)(struct super_block * ,
                                                                    void * ) , int (*)(struct super_block * ,
                                                                                       void * ) ,
                                int  , void * ) ;
#line 1825
extern int register_filesystem(struct file_system_type * ) ;
#line 1826
extern int unregister_filesystem(struct file_system_type * ) ;
#line 2111
extern int sync_filesystem(struct super_block * ) ;
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seq_file.h"
extern int seq_escape(struct seq_file * , char const   * , char const   * ) ;
#line 357 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 358
extern unsigned long get_zeroed_page(gfp_t  ) ;
#line 372
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 645 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/uaccess.h"
extern unsigned long _copy_from_user(void * , void const   * , unsigned int  ) ;
#line 667
extern void __copy_from_user_overflow(void) ;
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_from_user(void *to , void const   *from , unsigned long n ) 
{ 
  int sz ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 690
  sz = -1;
#line 692
  might_fault();
#line 712
  tmp = __builtin_expect(sz < 0, 1L);
  }
#line 712
  if (tmp != 0L) {
    {
#line 713
    n = _copy_from_user(to, from, (unsigned int )n);
    }
  } else {
    {
#line 712
    tmp___0 = __builtin_expect((unsigned long )sz >= n, 1L);
    }
#line 712
    if (tmp___0 != 0L) {
      {
#line 713
      n = _copy_from_user(to, from, (unsigned int )n);
      }
    } else {
      {
#line 717
      __copy_from_user_overflow();
      }
    }
  }
#line 719
  return (n);
}
}
#line 215 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
extern void rpc_killall_tasks(struct rpc_clnt * ) ;
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xprt.h"
extern int xprt_load_transport(char const   * ) ;
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
extern int rpcauth_get_gssinfo(rpc_authflavor_t  , struct rpcsec_gss_info * ) ;
#line 445 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 637
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 171 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
__inline static void security_init_mnt_opts(struct security_mnt_opts *opts ) 
{ 


  {
#line 173
  opts->mnt_opts = (char **)0;
#line 174
  opts->mnt_opts_flags = (int *)0;
#line 175
  opts->num_mnt_opts = 0;
#line 176
  return;
}
}
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
__inline static void security_free_mnt_opts(struct security_mnt_opts *opts ) 
{ 
  int i ;

  {
#line 181
  if ((unsigned long )opts->mnt_opts != (unsigned long )((char **)0)) {
#line 182
    i = 0;
#line 182
    goto ldv_39752;
    ldv_39751: 
    {
#line 183
    kfree((void const   *)*(opts->mnt_opts + (unsigned long )i));
#line 182
    i = i + 1;
    }
    ldv_39752: ;
#line 182
    if (i < opts->num_mnt_opts) {
#line 184
      goto ldv_39751;
    } else {

    }

  } else {

  }
  {
#line 184
  kfree((void const   *)opts->mnt_opts);
#line 185
  opts->mnt_opts = (char **)0;
#line 186
  kfree((void const   *)opts->mnt_opts_flags);
#line 187
  opts->mnt_opts_flags = (int *)0;
#line 188
  opts->num_mnt_opts = 0;
  }
#line 189
  return;
}
}
#line 1758
extern int security_sb_copy_data(char * , char * ) ;
#line 1767
extern int security_sb_set_mnt_opts(struct super_block * , struct security_mnt_opts * ,
                                    unsigned long  , unsigned long * ) ;
#line 1771
extern int security_sb_clone_mnt_opts(struct super_block  const  * , struct super_block * ) ;
#line 1773
extern int security_sb_parse_opts_str(char * , struct security_mnt_opts * ) ;
#line 3134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
__inline static char *alloc_secdata(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 3136
  tmp = get_zeroed_page(208U);
  }
#line 3136
  return ((char *)tmp);
}
}
#line 3139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/security.h"
__inline static void free_secdata(void *secdata ) 
{ 


  {
  {
#line 3141
  free_pages((unsigned long )secdata, 0U);
  }
#line 3142
  return;
}
}
#line 521 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/net/ipv6.h"
__inline static bool ipv6_addr_any(struct in6_addr  const  *a ) 
{ 
  unsigned long const   *ul ;

  {
#line 524
  ul = (unsigned long const   *)a;
#line 526
  return (((unsigned long )*ul | (unsigned long )*(ul + 1UL)) == 0UL);
}
}
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/addr.h"
extern size_t rpc_pton(struct net * , char const   * , size_t const    , struct sockaddr * ,
                       size_t const    ) ;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/addr.h"
__inline static void rpc_set_port(struct sockaddr *sap , unsigned short const   port ) 
{ 
  __u16 tmp ;
  __u16 tmp___0 ;

  {
  {
#line 37
  if ((int )sap->sa_family == 2) {
#line 37
    goto case_2;
  } else {

  }
#line 40
  if ((int )sap->sa_family == 10) {
#line 40
    goto case_10;
  } else {

  }
#line 36
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 38
  tmp = __fswab16((int )port);
#line 38
  ((struct sockaddr_in *)sap)->sin_port = tmp;
  }
#line 39
  goto ldv_49517;
  case_10: /* CIL Label */ 
  {
#line 41
  tmp___0 = __fswab16((int )port);
#line 41
  ((struct sockaddr_in6 *)sap)->sin6_port = tmp___0;
  }
#line 42
  goto ldv_49517;
  switch_break: /* CIL Label */ ;
  }
  ldv_49517: ;
#line 45
  return;
}
}
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/addr.h"
__inline static bool __rpc_cmp_addr4(struct sockaddr  const  *sap1 , struct sockaddr  const  *sap2 ) 
{ 
  struct sockaddr_in  const  *sin1 ;
  struct sockaddr_in  const  *sin2 ;

  {
#line 52
  sin1 = (struct sockaddr_in  const  *)sap1;
#line 53
  sin2 = (struct sockaddr_in  const  *)sap2;
#line 55
  return ((unsigned int )sin1->sin_addr.s_addr == (unsigned int )sin2->sin_addr.s_addr);
}
}
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/addr.h"
__inline static bool __rpc_cmp_addr6(struct sockaddr  const  *sap1 , struct sockaddr  const  *sap2 ) 
{ 
  struct sockaddr_in6  const  *sin1 ;
  struct sockaddr_in6  const  *sin2 ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 73
  sin1 = (struct sockaddr_in6  const  *)sap1;
#line 74
  sin2 = (struct sockaddr_in6  const  *)sap2;
#line 76
  tmp___0 = ipv6_addr_equal(& sin1->sin6_addr, & sin2->sin6_addr);
  }
#line 76
  if (tmp___0) {
#line 76
    tmp___1 = 0;
  } else {
#line 76
    tmp___1 = 1;
  }
#line 76
  if (tmp___1) {
#line 77
    return (0);
  } else {
    {
#line 78
    tmp = ipv6_addr_type(& sin1->sin6_addr);
    }
#line 78
    if (((unsigned int )tmp & 32U) != 0U) {
#line 79
      return ((unsigned int )sin1->sin6_scope_id == (unsigned int )sin2->sin6_scope_id);
    } else {

    }
  }
#line 81
  return (1);
}
}
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/addr.h"
__inline static bool rpc_cmp_addr(struct sockaddr  const  *sap1 , struct sockaddr  const  *sap2 ) 
{ 
  bool tmp ;
  bool tmp___0 ;

  {
#line 122
  if ((int )((unsigned short )sap1->sa_family) == (int )((unsigned short )sap2->sa_family)) {
    {
#line 124
    if ((int )sap1->sa_family == 2) {
#line 124
      goto case_2;
    } else {

    }
#line 126
    if ((int )sap1->sa_family == 10) {
#line 126
      goto case_10;
    } else {

    }
#line 123
    goto switch_break;
    case_2: /* CIL Label */ 
    {
#line 125
    tmp = __rpc_cmp_addr4(sap1, sap2);
    }
#line 125
    return (tmp);
    case_10: /* CIL Label */ 
    {
#line 127
    tmp___0 = __rpc_cmp_addr6(sap1, sap2);
    }
#line 127
    return (tmp___0);
    switch_break: /* CIL Label */ ;
    }
  } else {

  }
#line 130
  return (0);
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/metrics.h"
extern void rpc_print_iostats(struct seq_file * , struct rpc_clnt * ) ;
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
extern int bdi_register_dev(struct backing_dev_info * , dev_t  ) ;
#line 119
extern void bdi_unregister(struct backing_dev_info * ) ;
#line 491 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
int nfs_register_sysctl(void) ;
#line 492
void nfs_unregister_sysctl(void) ;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_idmap.h"
unsigned int nfs_idmap_cache_timeout ;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/parser.h"
extern int match_token(char * , struct match_token  const  * , substring_t * ) ;
#line 34
extern char *match_strdup(substring_t const   * ) ;
#line 230 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
struct file_system_type nfs4_fs_type ;
#line 462
bool nfs4_disable_idmapping ;
#line 463
unsigned short max_session_slots ;
#line 464
unsigned short send_implementation_id ;
#line 465
bool recover_lost_locks ;
#line 468
char nfs4_client_id_uniquifier[64U] ;
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/callback.h"
unsigned int nfs_callback_set_tcpport  ;
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/callback.h"
unsigned short nfs_callback_tcpport  ;
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
int nfs_mount(struct nfs_mount_request *info ) ;
#line 346
int nfs_write_inode(struct inode *inode , struct writeback_control *wbc ) ;
#line 354
struct super_operations  const  nfs_sops ;
#line 355
struct file_system_type nfs_fs_type ;
#line 356
struct file_system_type nfs_xdev_fs_type ;
#line 361
bool nfs_auth_info_match(struct nfs_auth_info  const  *auth_info , rpc_authflavor_t match ) ;
#line 362
struct dentry *nfs_try_mount(int flags , char const   *dev_name___0 , struct nfs_mount_info *mount_info ,
                             struct nfs_subversion *nfs_mod ) ;
#line 364
__inline void nfs_initialise_sb(struct super_block *sb ) ;
#line 365
int nfs_set_sb_security(struct super_block *s , struct dentry *mntroot , struct nfs_mount_info *mount_info ) ;
#line 366
int nfs_clone_sb_security(struct super_block *s , struct dentry *mntroot , struct nfs_mount_info *mount_info ) ;
#line 367
struct dentry *nfs_fs_mount_common(struct nfs_server *server , int flags , char const   *dev_name___0 ,
                                   struct nfs_mount_info *mount_info , struct nfs_subversion *nfs_mod ) ;
#line 369
struct dentry *nfs_fs_mount(struct file_system_type *fs_type , int flags , char const   *dev_name___0 ,
                            void *raw_data ) ;
#line 372
void nfs_kill_super(struct super_block *s ) ;
#line 373
void nfs_fill_super(struct super_block *sb , struct nfs_mount_info *mount_info ) ;
#line 384
char *nfs_path(char **p , struct dentry *dentry , char *buffer , ssize_t buflen ,
               unsigned int flags ) ;
#line 411
void nfs_clone_super(struct super_block *sb , struct nfs_mount_info *mount_info ) ;
#line 412
void nfs_umount_begin(struct super_block *sb ) ;
#line 413
int nfs_statfs(struct dentry *dentry , struct kstatfs *buf ) ;
#line 414
int nfs_show_options(struct seq_file *m , struct dentry *root ) ;
#line 415
int nfs_show_devname(struct seq_file *m , struct dentry *root ) ;
#line 416
int nfs_show_path(struct seq_file *m , struct dentry *dentry ) ;
#line 417
int nfs_show_stats(struct seq_file *m , struct dentry *root ) ;
#line 418
void nfs_put_super(struct super_block *s ) ;
#line 419
int nfs_remount(struct super_block *sb , int *flags , char *raw_data ) ;
#line 510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static unsigned long nfs_block_bits___0(unsigned long bsize , unsigned char *nrbitsp ) 
{ 
  unsigned char nrbits ;

  {
#line 513
  if ((bsize & (bsize - 1UL)) != 0UL || (unsigned long )nrbitsp != (unsigned long )((unsigned char *)0U)) {
#line 516
    nrbits = 31U;
#line 516
    goto ldv_54996;
    ldv_54995: 
#line 516
    nrbits = (unsigned char )((int )nrbits - 1);
    ldv_54996: ;
#line 516
    if ((unsigned int )nrbits != 0U && (bsize & (unsigned long )(1 << (int )nrbits)) == 0UL) {
#line 518
      goto ldv_54995;
    } else {

    }
#line 518
    bsize = (unsigned long )(1 << (int )nrbits);
#line 519
    if ((unsigned long )nrbitsp != (unsigned long )((unsigned char *)0U)) {
#line 520
      *nrbitsp = nrbits;
    } else {

    }
  } else {

  }
#line 523
  return (bsize);
}
}
#line 539 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static unsigned long nfs_block_size___0(unsigned long bsize , unsigned char *nrbitsp ) 
{ 
  unsigned long tmp ;

  {
#line 541
  if (bsize <= 1023UL) {
#line 542
    bsize = 4096UL;
  } else
#line 543
  if (bsize > 1048575UL) {
#line 544
    bsize = 1048576UL;
  } else {

  }
  {
#line 546
  tmp = nfs_block_bits___0(bsize, nrbitsp);
  }
#line 546
  return (tmp);
}
}
#line 553 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static void nfs_super_set_maxbytes(struct super_block *sb , __u64 maxfilesize ) 
{ 


  {
#line 555
  sb->s_maxbytes = (long long )maxfilesize;
#line 556
  if (sb->s_maxbytes <= 0LL) {
#line 557
    sb->s_maxbytes = 9223372036854775807LL;
  } else {

  }
#line 558
  return;
}
}
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
void nfs_fscache_get_super_cookie(struct super_block *sb , char const   *uniq , int ulen ) ;
#line 77
void nfs_fscache_release_super_cookie(struct super_block *sb ) ;
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4session.h"
__inline static int nfs4_has_session(struct nfs_client  const  *clp ) 
{ 


  {
#line 109
  if ((unsigned long )clp->cl_session != (unsigned long )((struct nfs4_session */* const  */)0)) {
#line 110
    return (1);
  } else {

  }
#line 111
  return (0);
}
}
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct match_token  const  nfs_mount_option_tokens[60U]  = 
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
  {      {51, "bg"}, 
        {51, "fg"}, 
        {51, "retry=%s"}, 
        {53, "sloppy"}, 
        {0, "soft"}, 
        {1, "hard"}, 
        {52, "intr"}, 
        {52, "nointr"}, 
        {2, "posix"}, 
        {3, "noposix"}, 
        {4, "cto"}, 
        {5, "nocto"}, 
        {6, "ac"}, 
        {7, "noac"}, 
        {8, "lock"}, 
        {9, "nolock"}, 
        {10, "udp"}, 
        {11, "tcp"}, 
        {12, "rdma"}, 
        {13, "acl"}, 
        {14, "noacl"}, 
        {15, "rdirplus"}, 
        {16, "nordirplus"}, 
        {17, "sharecache"}, 
        {18, "nosharecache"}, 
        {19, "resvport"}, 
        {20, "noresvport"}, 
        {21, "fsc"}, 
        {22, "nofsc"}, 
        {23, "migration"}, 
        {24, "nomigration"}, 
        {25, "port=%s"}, 
        {26, "rsize=%s"}, 
        {27, "wsize=%s"}, 
        {28, "bsize=%s"}, 
        {29, "timeo=%s"}, 
        {30, "retrans=%s"}, 
        {31, "acregmin=%s"}, 
        {32, "acregmax=%s"}, 
        {33, "acdirmin=%s"}, 
        {34, "acdirmax=%s"}, 
        {35, "actimeo=%s"}, 
        {36, "namlen=%s"}, 
        {37, "mountport=%s"}, 
        {38, "mountvers=%s"}, 
        {39, "minorversion=%s"}, 
        {40, "nfsvers=%s"}, 
        {40, "vers=%s"}, 
        {41, "sec=%s"}, 
        {42, "proto=%s"}, 
        {43, "mountproto=%s"}, 
        {45, "addr=%s"}, 
        {47, "clientaddr=%s"}, 
        {44, "mounthost=%s"}, 
        {46, "mountaddr=%s"}, 
        {48, "lookupcache=%s"}, 
        {49, "fsc=%s"}, 
        {50, "local_lock=%s"}, 
        {40, "v%s"}, 
        {54, (char const   *)0}};
#line 199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct match_token  const  nfs_xprt_protocol_tokens[6U]  = {      {0, "udp"}, 
        {1, "udp6"}, 
        {2, "tcp"}, 
        {3, "tcp6"}, 
        {4, "rdma"}, 
        {5, (char const   *)0}};
#line 218 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct match_token  const  nfs_secflavor_tokens[13U]  = 
#line 218
  {      {0, "none"}, 
        {0, "null"}, 
        {1, "sys"}, 
        {2, "krb5"}, 
        {3, "krb5i"}, 
        {4, "krb5p"}, 
        {5, "lkey"}, 
        {6, "lkeyi"}, 
        {7, "lkeyp"}, 
        {8, "spkm3"}, 
        {9, "spkm3i"}, 
        {10, "spkm3p"}, 
        {11, (char const   *)0}};
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct match_token nfs_lookupcache_tokens[5U]  = {      {0, "all"}, 
        {1, "pos"}, 
        {1, "positive"}, 
        {2, "none"}, 
        {3, (char const   *)0}};
#line 261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct match_token nfs_local_lock_tokens[5U]  = {      {0, "all"}, 
        {1, "flock"}, 
        {2, "posix"}, 
        {3, "none"}, 
        {4, (char const   *)0}};
#line 277 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct match_token nfs_vers_tokens[7U]  = {      {0, "2"}, 
        {1, "3"}, 
        {2, "4"}, 
        {3, "4.0"}, 
        {4, "4.1"}, 
        {5, "4.2"}, 
        {6, (char const   *)0}};
#line 288
static struct dentry *nfs_xdev_mount(struct file_system_type *fs_type , int flags ,
                                     char const   *dev_name___0 , void *raw_data ) ;
#line 291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct file_system_type nfs_fs_type  = 
#line 291
     {"nfs", 32770, & nfs_fs_mount, & nfs_kill_super, & __this_module, 0, {0}, {{{(char)0},
                                                                               {(char)0},
                                                                               {(char)0},
                                                                               {(char)0},
                                                                               {(char)0},
                                                                               {(char)0},
                                                                               {(char)0},
                                                                               {(char)0}}},
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                     {(char)0}, {(char)0}}}, {{{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}},
                                              {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}},
                                              {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                     {(char)0}, {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                               {(char)0}, {(char)0}, {(char)0}, {(char)0}}}};
#line 299 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_fs_type[12U]  = 
#line 299
  {      'n',      'f',      's',      '_', 
        'f',      's',      '_',      't', 
        'y',      'p',      'e',      '\000'};
#line 299
struct kernel_symbol  const  __ksymtab_nfs_fs_type ;
#line 299 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_fs_type  =    {(unsigned long )(& nfs_fs_type), (char const   *)(& __kstrtab_nfs_fs_type)};
#line 301 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct file_system_type nfs_xdev_fs_type  = 
#line 301
     {"nfs", 32770, & nfs_xdev_mount, & nfs_kill_super, & __this_module, 0, {0}, {{{(char)0},
                                                                                 {(char)0},
                                                                                 {(char)0},
                                                                                 {(char)0},
                                                                                 {(char)0},
                                                                                 {(char)0},
                                                                                 {(char)0},
                                                                                 {(char)0}}},
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                     {(char)0}, {(char)0}}}, {{{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}},
                                              {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}},
                                              {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                     {(char)0}, {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                               {(char)0}, {(char)0}, {(char)0}, {(char)0}}}};
#line 309 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct super_operations  const  nfs_sops  = 
#line 309
     {& nfs_alloc_inode, & nfs_destroy_inode, 0, & nfs_write_inode, & nfs_drop_inode,
    & nfs_evict_inode, & nfs_put_super, 0, 0, 0, & nfs_statfs, & nfs_remount, & nfs_umount_begin,
    & nfs_show_options, & nfs_show_devname, & nfs_show_path, & nfs_show_stats, 0,
    0, 0, 0, 0};
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_sops[9U]  = 
#line 324
  {      'n',      'f',      's',      '_', 
        's',      'o',      'p',      's', 
        '\000'};
#line 324
struct kernel_symbol  const  __ksymtab_nfs_sops ;
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_sops  =    {(unsigned long )(& nfs_sops), (char const   *)(& __kstrtab_nfs_sops)};
#line 327
static void nfs4_validate_mount_flags(struct nfs_parsed_mount_data *args ) ;
#line 328
static int nfs4_validate_mount_data(void *options , struct nfs_parsed_mount_data *args ,
                                    char const   *dev_name___0 ) ;
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct file_system_type nfs4_fs_type  = 
#line 331
     {"nfs4", 32770, & nfs_fs_mount, & nfs_kill_super, & __this_module, 0, {0}, {{{(char)0},
                                                                                {(char)0},
                                                                                {(char)0},
                                                                                {(char)0},
                                                                                {(char)0},
                                                                                {(char)0},
                                                                                {(char)0},
                                                                                {(char)0}}},
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                     {(char)0}, {(char)0}}}, {{{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}},
                                              {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}},
                                              {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                     {(char)0}, {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                               {(char)0}, {(char)0}, {(char)0}, {(char)0}}}};
#line 340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs4_fs_type[13U]  = 
#line 340
  {      'n',      'f',      's',      '4', 
        '_',      'f',      's',      '_', 
        't',      'y',      'p',      'e', 
        '\000'};
#line 340
struct kernel_symbol  const  __ksymtab_nfs4_fs_type ;
#line 340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs4_fs_type  =    {(unsigned long )(& nfs4_fs_type), (char const   *)(& __kstrtab_nfs4_fs_type)};
#line 342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int register_nfs4_fs(void) 
{ 
  int tmp ;

  {
  {
#line 344
  tmp = register_filesystem(& nfs4_fs_type);
  }
#line 344
  return (tmp);
}
}
#line 347 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void unregister_nfs4_fs(void) 
{ 


  {
  {
#line 349
  unregister_filesystem(& nfs4_fs_type);
  }
#line 350
  return;
}
}
#line 362 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct shrinker acl_shrinker  =    {& nfs_access_cache_count, & nfs_access_cache_scan, 2, 0L, 0UL, {0, 0}, 0};
#line 371 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int register_nfs_fs(void) 
{ 
  int ret ;

  {
  {
#line 375
  ret = register_filesystem(& nfs_fs_type);
  }
#line 376
  if (ret < 0) {
#line 377
    goto error_0;
  } else {

  }
  {
#line 379
  ret = register_nfs4_fs();
  }
#line 380
  if (ret < 0) {
#line 381
    goto error_1;
  } else {

  }
  {
#line 383
  ret = nfs_register_sysctl();
  }
#line 384
  if (ret < 0) {
#line 385
    goto error_2;
  } else {

  }
  {
#line 386
  register_shrinker(& acl_shrinker);
  }
#line 387
  return (0);
  error_2: 
  {
#line 390
  unregister_nfs4_fs();
  }
  error_1: 
  {
#line 392
  unregister_filesystem(& nfs_fs_type);
  }
  error_0: ;
#line 394
  return (ret);
}
}
#line 400 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
void unregister_nfs_fs(void) 
{ 


  {
  {
#line 402
  unregister_shrinker(& acl_shrinker);
#line 403
  nfs_unregister_sysctl();
#line 404
  unregister_nfs4_fs();
#line 405
  unregister_filesystem(& nfs_fs_type);
  }
#line 406
  return;
}
}
#line 408 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
void nfs_sb_active(struct super_block *sb ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  int tmp___0 ;

  {
  {
#line 410
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 410
  server = tmp;
#line 412
  tmp___0 = atomic_add_return(1, & server->active);
  }
#line 412
  if (tmp___0 == 1) {
    {
#line 413
    atomic_inc(& sb->s_active);
    }
  } else {

  }
#line 414
  return;
}
}
#line 415 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_sb_active[14U]  = 
#line 415
  {      'n',      'f',      's',      '_', 
        's',      'b',      '_',      'a', 
        'c',      't',      'i',      'v', 
        'e',      '\000'};
#line 415
struct kernel_symbol  const  __ksymtab_nfs_sb_active ;
#line 415 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_sb_active  =    {(unsigned long )(& nfs_sb_active), (char const   *)(& __kstrtab_nfs_sb_active)};
#line 417 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
void nfs_sb_deactive(struct super_block *sb ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  int tmp___0 ;

  {
  {
#line 419
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 419
  server = tmp;
#line 421
  tmp___0 = atomic_dec_and_test(& server->active);
  }
#line 421
  if (tmp___0 != 0) {
    {
#line 422
    deactivate_super(sb);
    }
  } else {

  }
#line 423
  return;
}
}
#line 424 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_sb_deactive[16U]  = 
#line 424
  {      'n',      'f',      's',      '_', 
        's',      'b',      '_',      'd', 
        'e',      'a',      'c',      't', 
        'i',      'v',      'e',      '\000'};
#line 424
struct kernel_symbol  const  __ksymtab_nfs_sb_deactive ;
#line 424 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_sb_deactive  =    {(unsigned long )(& nfs_sb_deactive), (char const   *)(& __kstrtab_nfs_sb_deactive)};
#line 429 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int nfs_statfs(struct dentry *dentry , struct kstatfs *buf ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  unsigned char blockbits ;
  unsigned long blockres ;
  struct nfs_fh *fh ;
  struct nfs_fh *tmp___0 ;
  struct nfs_fsstat res ;
  int error ;
  struct dentry *pd_dentry ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 431
  tmp = NFS_SB((struct super_block  const  *)dentry->d_sb);
#line 431
  server = tmp;
#line 434
  tmp___0 = NFS_FH((struct inode  const  *)dentry->d_inode);
#line 434
  fh = tmp___0;
#line 436
  error = -12;
#line 438
  res.fattr = nfs_alloc_fattr();
  }
#line 439
  if ((unsigned long )res.fattr == (unsigned long )((struct nfs_fattr *)0)) {
#line 440
    goto out_err;
  } else {

  }
  {
#line 442
  error = (*(((server->nfs_client)->rpc_ops)->statfs))(server, fh, & res);
#line 443
  tmp___1 = __builtin_expect(error == -116, 0L);
  }
#line 443
  if (tmp___1 != 0L) {
    {
#line 446
    pd_dentry = dget_parent(dentry);
    }
#line 447
    if ((unsigned long )pd_dentry != (unsigned long )((struct dentry *)0)) {
      {
#line 448
      nfs_zap_caches(pd_dentry->d_inode);
#line 449
      dput(pd_dentry);
      }
    } else {

    }
  } else {

  }
  {
#line 452
  nfs_free_fattr((struct nfs_fattr  const  *)res.fattr);
  }
#line 453
  if (error < 0) {
#line 454
    goto out_err;
  } else {

  }
#line 456
  buf->f_type = 26985L;
#line 463
  buf->f_frsize = (long )(dentry->d_sb)->s_blocksize;
#line 472
  buf->f_bsize = (long )(dentry->d_sb)->s_blocksize;
#line 473
  blockbits = (dentry->d_sb)->s_blocksize_bits;
#line 474
  blockres = (unsigned long )((1 << (int )blockbits) + -1);
#line 475
  buf->f_blocks = (res.tbytes + (unsigned long long )blockres) >> (int )blockbits;
#line 476
  buf->f_bfree = (res.fbytes + (unsigned long long )blockres) >> (int )blockbits;
#line 477
  buf->f_bavail = (res.abytes + (unsigned long long )blockres) >> (int )blockbits;
#line 479
  buf->f_files = res.tfiles;
#line 480
  buf->f_ffree = res.afiles;
#line 482
  buf->f_namelen = (long )server->namelen;
#line 484
  return (0);
  out_err: 
  {
#line 487
  tmp___2 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 487
  if (tmp___2 != 0L) {
    {
#line 487
    printk("\001d%s: statfs error = %d\n", "nfs_statfs", - error);
    }
  } else {

  }
#line 488
  return (error);
}
}
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_statfs[11U]  = 
#line 490
  {      'n',      'f',      's',      '_', 
        's',      't',      'a',      't', 
        'f',      's',      '\000'};
#line 490
struct kernel_symbol  const  __ksymtab_nfs_statfs ;
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_statfs  =    {(unsigned long )(& nfs_statfs), (char const   *)(& __kstrtab_nfs_statfs)};
#line 495 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   *nfs_pseudoflavour_to_name(rpc_authflavor_t flavour ) 
{ 
  struct __anonstruct_sec_flavours_304 sec_flavours[12U] ;
  int i ;

  {
#line 500
  sec_flavours[0].flavour = 0U;
#line 500
  sec_flavours[0].str = "null";
#line 500
  sec_flavours[1].flavour = 1U;
#line 500
  sec_flavours[1].str = "sys";
#line 500
  sec_flavours[2].flavour = 390003U;
#line 500
  sec_flavours[2].str = "krb5";
#line 500
  sec_flavours[3].flavour = 390004U;
#line 500
  sec_flavours[3].str = "krb5i";
#line 500
  sec_flavours[4].flavour = 390005U;
#line 500
  sec_flavours[4].str = "krb5p";
#line 500
  sec_flavours[5].flavour = 390006U;
#line 500
  sec_flavours[5].str = "lkey";
#line 500
  sec_flavours[6].flavour = 390007U;
#line 500
  sec_flavours[6].str = "lkeyi";
#line 500
  sec_flavours[7].flavour = 390008U;
#line 500
  sec_flavours[7].str = "lkeyp";
#line 500
  sec_flavours[8].flavour = 390009U;
#line 500
  sec_flavours[8].str = "spkm";
#line 500
  sec_flavours[9].flavour = 390010U;
#line 500
  sec_flavours[9].str = "spkmi";
#line 500
  sec_flavours[10].flavour = 390011U;
#line 500
  sec_flavours[10].str = "spkmp";
#line 500
  sec_flavours[11].flavour = 4294967295U;
#line 500
  sec_flavours[11].str = "unknown";
#line 517
  i = 0;
#line 517
  goto ldv_56174;
  ldv_56173: ;
#line 518
  if (sec_flavours[i].flavour == flavour) {
#line 519
    goto ldv_56172;
  } else {

  }
#line 517
  i = i + 1;
  ldv_56174: ;
#line 517
  if (sec_flavours[i].flavour != 4294967295U) {
#line 519
    goto ldv_56173;
  } else {

  }
  ldv_56172: ;
#line 521
  return (sec_flavours[i].str);
}
}
#line 524 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_show_mountd_netid(struct seq_file *m , struct nfs_server *nfss , int showdefaults ) 
{ 
  struct sockaddr *sap ;

  {
  {
#line 527
  sap = (struct sockaddr *)(& nfss->mountd_address);
#line 529
  seq_printf(m, ",mountproto=");
  }
  {
#line 531
  if ((int )sap->sa_family == 2) {
#line 531
    goto case_2;
  } else {

  }
#line 544
  if ((int )sap->sa_family == 10) {
#line 544
    goto case_10;
  } else {

  }
#line 557
  goto switch_default___1;
  case_2: /* CIL Label */ ;
  {
#line 533
  if ((int )nfss->mountd_protocol == 17) {
#line 533
    goto case_17;
  } else {

  }
#line 536
  if ((int )nfss->mountd_protocol == 6) {
#line 536
    goto case_6;
  } else {

  }
#line 539
  goto switch_default;
  case_17: /* CIL Label */ 
  {
#line 534
  seq_printf(m, "udp");
  }
#line 535
  goto ldv_56183;
  case_6: /* CIL Label */ 
  {
#line 537
  seq_printf(m, "tcp");
  }
#line 538
  goto ldv_56183;
  switch_default: /* CIL Label */ ;
#line 540
  if (showdefaults != 0) {
    {
#line 541
    seq_printf(m, "auto");
    }
  } else {

  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_56183: ;
#line 543
  goto ldv_56186;
  case_10: /* CIL Label */ ;
  {
#line 546
  if ((int )nfss->mountd_protocol == 17) {
#line 546
    goto case_17___0;
  } else {

  }
#line 549
  if ((int )nfss->mountd_protocol == 6) {
#line 549
    goto case_6___0;
  } else {

  }
#line 552
  goto switch_default___0;
  case_17___0: /* CIL Label */ 
  {
#line 547
  seq_printf(m, "udp6");
  }
#line 548
  goto ldv_56189;
  case_6___0: /* CIL Label */ 
  {
#line 550
  seq_printf(m, "tcp6");
  }
#line 551
  goto ldv_56189;
  switch_default___0: /* CIL Label */ ;
#line 553
  if (showdefaults != 0) {
    {
#line 554
    seq_printf(m, "auto");
    }
  } else {

  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_56189: ;
#line 556
  goto ldv_56186;
  switch_default___1: /* CIL Label */ ;
#line 558
  if (showdefaults != 0) {
    {
#line 559
    seq_printf(m, "auto");
    }
  } else {

  }
  switch_break: /* CIL Label */ ;
  }
  ldv_56186: ;
#line 562
  return;
}
}
#line 563 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_show_mountd_options(struct seq_file *m , struct nfs_server *nfss ,
                                    int showdefaults ) 
{ 
  struct sockaddr *sap ;
  struct sockaddr_in *sin ;
  struct sockaddr_in6 *sin6 ;

  {
#line 566
  sap = (struct sockaddr *)(& nfss->mountd_address);
#line 568
  if ((nfss->flags & 524288) != 0) {
#line 569
    return;
  } else {

  }
  {
#line 572
  if ((int )sap->sa_family == 2) {
#line 572
    goto case_2;
  } else {

  }
#line 577
  if ((int )sap->sa_family == 10) {
#line 577
    goto case_10;
  } else {

  }
#line 582
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 573
  sin = (struct sockaddr_in *)sap;
#line 574
  seq_printf(m, ",mountaddr=%pI4", & sin->sin_addr.s_addr);
  }
#line 575
  goto ldv_56201;
  case_10: /* CIL Label */ 
  {
#line 578
  sin6 = (struct sockaddr_in6 *)sap;
#line 579
  seq_printf(m, ",mountaddr=%pI6c", & sin6->sin6_addr);
  }
#line 580
  goto ldv_56201;
  switch_default: /* CIL Label */ ;
#line 583
  if (showdefaults != 0) {
    {
#line 584
    seq_printf(m, ",mountaddr=unspecified");
    }
  } else {

  }
  switch_break: /* CIL Label */ ;
  }
  ldv_56201: ;
#line 587
  if (nfss->mountd_version != 0U || showdefaults != 0) {
    {
#line 588
    seq_printf(m, ",mountvers=%u", nfss->mountd_version);
    }
  } else {

  }
#line 589
  if ((unsigned int )nfss->mountd_port - 1U <= 65533U || showdefaults != 0) {
    {
#line 592
    seq_printf(m, ",mountport=%u", (int )nfss->mountd_port);
    }
  } else {

  }
  {
#line 594
  nfs_show_mountd_netid(m, nfss, showdefaults);
  }
#line 595
  return;
}
}
#line 598 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_show_nfsv4_options(struct seq_file *m , struct nfs_server *nfss ,
                                   int showdefaults ) 
{ 
  struct nfs_client *clp ;

  {
  {
#line 601
  clp = nfss->nfs_client;
#line 603
  seq_printf(m, ",clientaddr=%s", (char *)(& clp->cl_ipaddr));
  }
#line 604
  return;
}
}
#line 612 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_show_nfs_version(struct seq_file *m , unsigned int version , unsigned int minorversion ) 
{ 


  {
  {
#line 616
  seq_printf(m, ",vers=%u", version);
  }
#line 617
  if (version == 4U) {
    {
#line 618
    seq_printf(m, ".%u", minorversion);
    }
  } else {

  }
#line 619
  return;
}
}
#line 624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_show_mount_options(struct seq_file *m , struct nfs_server *nfss ,
                                   int showdefaults ) 
{ 
  struct proc_nfs_info nfs_info[10U] ;
  struct proc_nfs_info  const  *nfs_infop ;
  struct nfs_client *clp ;
  u32 version ;
  int local_flock ;
  int local_fcntl ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
  {
#line 631
  nfs_info[0].flag = 1;
#line 631
  nfs_info[0].str = ",soft";
#line 631
  nfs_info[0].nostr = ",hard";
#line 631
  nfs_info[1].flag = 8;
#line 631
  nfs_info[1].str = ",posix";
#line 631
  nfs_info[1].nostr = "";
#line 631
  nfs_info[2].flag = 16;
#line 631
  nfs_info[2].str = ",nocto";
#line 631
  nfs_info[2].nostr = "";
#line 631
  nfs_info[3].flag = 32;
#line 631
  nfs_info[3].str = ",noac";
#line 631
  nfs_info[3].nostr = "";
#line 631
  nfs_info[4].flag = 512;
#line 631
  nfs_info[4].str = ",nolock";
#line 631
  nfs_info[4].nostr = "";
#line 631
  nfs_info[5].flag = 2048;
#line 631
  nfs_info[5].str = ",noacl";
#line 631
  nfs_info[5].nostr = "";
#line 631
  nfs_info[6].flag = 16384;
#line 631
  nfs_info[6].str = ",nordirplus";
#line 631
  nfs_info[6].nostr = "";
#line 631
  nfs_info[7].flag = 32768;
#line 631
  nfs_info[7].str = ",nosharecache";
#line 631
  nfs_info[7].nostr = "";
#line 631
  nfs_info[8].flag = 262144;
#line 631
  nfs_info[8].str = ",noresvport";
#line 631
  nfs_info[8].nostr = "";
#line 631
  nfs_info[9].flag = 0;
#line 631
  nfs_info[9].str = (char const   *)0;
#line 631
  nfs_info[9].nostr = (char const   *)0;
#line 644
  clp = nfss->nfs_client;
#line 645
  version = (clp->rpc_ops)->version;
#line 648
  nfs_show_nfs_version(m, version, clp->cl_minorversion);
#line 649
  seq_printf(m, ",rsize=%u", nfss->rsize);
#line 650
  seq_printf(m, ",wsize=%u", nfss->wsize);
  }
#line 651
  if (nfss->bsize != 0U) {
    {
#line 652
    seq_printf(m, ",bsize=%u", nfss->bsize);
    }
  } else {

  }
  {
#line 653
  seq_printf(m, ",namlen=%u", nfss->namelen);
  }
#line 654
  if (nfss->acregmin != 750U || showdefaults != 0) {
    {
#line 655
    seq_printf(m, ",acregmin=%u", nfss->acregmin / 250U);
    }
  } else {

  }
#line 656
  if (nfss->acregmax != 15000U || showdefaults != 0) {
    {
#line 657
    seq_printf(m, ",acregmax=%u", nfss->acregmax / 250U);
    }
  } else {

  }
#line 658
  if (nfss->acdirmin != 7500U || showdefaults != 0) {
    {
#line 659
    seq_printf(m, ",acdirmin=%u", nfss->acdirmin / 250U);
    }
  } else {

  }
#line 660
  if (nfss->acdirmax != 15000U || showdefaults != 0) {
    {
#line 661
    seq_printf(m, ",acdirmax=%u", nfss->acdirmax / 250U);
    }
  } else {

  }
#line 662
  nfs_infop = (struct proc_nfs_info  const  *)(& nfs_info);
#line 662
  goto ldv_56232;
  ldv_56231: ;
#line 663
  if ((nfss->flags & (int )nfs_infop->flag) != 0) {
    {
#line 664
    seq_puts(m, nfs_infop->str);
    }
  } else {
    {
#line 666
    seq_puts(m, nfs_infop->nostr);
    }
  }
#line 662
  nfs_infop = nfs_infop + 1;
  ldv_56232: ;
#line 662
  if ((int )nfs_infop->flag != 0) {
#line 664
    goto ldv_56231;
  } else {

  }
  {
#line 668
  rcu_read_lock___0();
#line 669
  tmp = rpc_peeraddr2str(nfss->client, 5);
#line 669
  seq_printf(m, ",proto=%s", tmp);
#line 671
  rcu_read_unlock___0();
  }
#line 672
  if (version == 4U) {
#line 673
    if ((unsigned int )nfss->port != 2049U) {
      {
#line 674
      seq_printf(m, ",port=%u", (int )nfss->port);
      }
    } else {

    }
  } else
#line 676
  if ((unsigned int )nfss->port != 0U) {
    {
#line 677
    seq_printf(m, ",port=%u", (int )nfss->port);
    }
  } else {

  }
  {
#line 679
  seq_printf(m, ",timeo=%lu", ((unsigned long )((nfss->client)->cl_timeout)->to_initval * 10UL) / 250UL);
#line 680
  seq_printf(m, ",retrans=%u", ((nfss->client)->cl_timeout)->to_retries);
#line 681
  tmp___0 = nfs_pseudoflavour_to_name(((nfss->client)->cl_auth)->au_flavor);
#line 681
  seq_printf(m, ",sec=%s", tmp___0);
  }
#line 683
  if (version != 4U) {
    {
#line 684
    nfs_show_mountd_options(m, nfss, showdefaults);
    }
  } else {
    {
#line 686
    nfs_show_nfsv4_options(m, nfss, showdefaults);
    }
  }
#line 688
  if ((int )nfss->options & 1) {
    {
#line 689
    seq_printf(m, ",fsc");
    }
  } else {

  }
#line 691
  if ((nfss->options & 2U) != 0U) {
    {
#line 692
    seq_printf(m, ",migration");
    }
  } else {

  }
#line 694
  if ((nfss->flags & 65536) != 0) {
#line 695
    if ((nfss->flags & 131072) != 0) {
      {
#line 696
      seq_printf(m, ",lookupcache=none");
      }
    } else {
      {
#line 698
      seq_printf(m, ",lookupcache=pos");
      }
    }
  } else {

  }
#line 701
  local_flock = nfss->flags & 1048576;
#line 702
  local_fcntl = nfss->flags & 2097152;
#line 704
  if ((local_flock | local_fcntl) == 0) {
    {
#line 705
    seq_printf(m, ",local_lock=none");
    }
  } else
#line 706
  if (local_flock != 0 && local_fcntl != 0) {
    {
#line 707
    seq_printf(m, ",local_lock=all");
    }
  } else
#line 708
  if (local_flock != 0) {
    {
#line 709
    seq_printf(m, ",local_lock=flock");
    }
  } else {
    {
#line 711
    seq_printf(m, ",local_lock=posix");
    }
  }
#line 712
  return;
}
}
#line 717 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int nfs_show_options(struct seq_file *m , struct dentry *root ) 
{ 
  struct nfs_server *nfss ;
  struct nfs_server *tmp ;
  char const   *tmp___0 ;

  {
  {
#line 719
  tmp = NFS_SB((struct super_block  const  *)root->d_sb);
#line 719
  nfss = tmp;
#line 721
  nfs_show_mount_options(m, nfss, 0);
#line 723
  rcu_read_lock___0();
#line 724
  tmp___0 = rpc_peeraddr2str((nfss->nfs_client)->cl_rpcclient, 0);
#line 724
  seq_printf(m, ",addr=%s", tmp___0);
#line 727
  rcu_read_unlock___0();
  }
#line 729
  return (0);
}
}
#line 731 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_show_options[17U]  = 
#line 731
  {      'n',      'f',      's',      '_', 
        's',      'h',      'o',      'w', 
        '_',      'o',      'p',      't', 
        'i',      'o',      'n',      's', 
        '\000'};
#line 731
struct kernel_symbol  const  __ksymtab_nfs_show_options ;
#line 731 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_show_options  =    {(unsigned long )(& nfs_show_options), (char const   *)(& __kstrtab_nfs_show_options)};
#line 735 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void show_sessions(struct seq_file *m , struct nfs_server *server ) 
{ 
  int tmp ;

  {
  {
#line 737
  tmp = nfs4_has_session((struct nfs_client  const  *)server->nfs_client);
  }
#line 737
  if (tmp != 0) {
    {
#line 738
    seq_printf(m, ",sessions");
    }
  } else {

  }
#line 739
  return;
}
}
#line 746 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void show_pnfs(struct seq_file *m , struct nfs_server *server ) 
{ 


  {
  {
#line 748
  seq_printf(m, ",pnfs=");
  }
#line 749
  if ((unsigned long )server->pnfs_curr_ld != (unsigned long )((struct pnfs_layoutdriver_type *)0)) {
    {
#line 750
    seq_printf(m, "%s", (server->pnfs_curr_ld)->name);
    }
  } else {
    {
#line 752
    seq_printf(m, "not configured");
    }
  }
#line 753
  return;
}
}
#line 755 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void show_implementation_id(struct seq_file *m , struct nfs_server *nfss ) 
{ 
  struct nfs41_impl_id *impl_id ;

  {
#line 757
  if ((unsigned long )nfss->nfs_client != (unsigned long )((struct nfs_client *)0) && (unsigned long )(nfss->nfs_client)->cl_implid != (unsigned long )((struct nfs41_impl_id *)0)) {
    {
#line 758
    impl_id = (nfss->nfs_client)->cl_implid;
#line 759
    seq_printf(m, "\n\timpl_id:\tname=\'%s\',domain=\'%s\',date=\'%llu,%u\'", (char *)(& impl_id->name),
               (char *)(& impl_id->domain), impl_id->date.seconds, impl_id->date.nseconds);
    }
  } else {

  }
#line 764
  return;
}
}
#line 776 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int nfs_show_devname(struct seq_file *m , struct dentry *root ) 
{ 
  char *page ;
  unsigned long tmp ;
  char *devname ;
  char *dummy ;
  int err ;
  long tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 778
  tmp = __get_free_pages(208U, 0U);
#line 778
  page = (char *)tmp;
#line 780
  err = 0;
  }
#line 781
  if ((unsigned long )page == (unsigned long )((char *)0)) {
#line 782
    return (-12);
  } else {

  }
  {
#line 783
  devname = nfs_path(& dummy, root, page, 4096L, 0U);
#line 784
  tmp___1 = IS_ERR((void const   *)devname);
  }
#line 784
  if ((int )tmp___1) {
    {
#line 785
    tmp___0 = PTR_ERR((void const   *)devname);
#line 785
    err = (int )tmp___0;
    }
  } else {
    {
#line 787
    seq_escape(m, (char const   *)devname, " \t\n\\");
    }
  }
  {
#line 788
  free_pages((unsigned long )page, 0U);
  }
#line 789
  return (err);
}
}
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_show_devname[17U]  = 
#line 791
  {      'n',      'f',      's',      '_', 
        's',      'h',      'o',      'w', 
        '_',      'd',      'e',      'v', 
        'n',      'a',      'm',      'e', 
        '\000'};
#line 791
struct kernel_symbol  const  __ksymtab_nfs_show_devname ;
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_show_devname  =    {(unsigned long )(& nfs_show_devname), (char const   *)(& __kstrtab_nfs_show_devname)};
#line 793 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int nfs_show_path(struct seq_file *m , struct dentry *dentry ) 
{ 


  {
  {
#line 795
  seq_puts(m, "/");
  }
#line 796
  return (0);
}
}
#line 798 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_show_path[14U]  = 
#line 798
  {      'n',      'f',      's',      '_', 
        's',      'h',      'o',      'w', 
        '_',      'p',      'a',      't', 
        'h',      '\000'};
#line 798
struct kernel_symbol  const  __ksymtab_nfs_show_path ;
#line 798 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_show_path  =    {(unsigned long )(& nfs_show_path), (char const   *)(& __kstrtab_nfs_show_path)};
#line 803 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int nfs_show_stats(struct seq_file *m , struct dentry *root ) 
{ 
  int i ;
  int cpu ;
  struct nfs_server *nfss ;
  struct nfs_server *tmp ;
  struct rpc_auth *auth ;
  struct nfs_iostats totals ;
  struct nfs_iostats *stats ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned int tmp___0 ;

  {
  {
#line 806
  tmp = NFS_SB((struct super_block  const  *)root->d_sb);
#line 806
  nfss = tmp;
#line 807
  auth = (nfss->client)->cl_auth;
#line 808
  totals.bytes[0] = 0ULL;
#line 808
  totals.bytes[1] = 0ULL;
#line 808
  totals.bytes[2] = 0ULL;
#line 808
  totals.bytes[3] = 0ULL;
#line 808
  totals.bytes[4] = 0ULL;
#line 808
  totals.bytes[5] = 0ULL;
#line 808
  totals.bytes[6] = 0ULL;
#line 808
  totals.bytes[7] = 0ULL;
#line 808
  totals.fscache[0] = 0ULL;
#line 808
  totals.fscache[1] = 0ULL;
#line 808
  totals.fscache[2] = 0ULL;
#line 808
  totals.fscache[3] = 0ULL;
#line 808
  totals.fscache[4] = 0ULL;
#line 808
  totals.events[0] = 0UL;
#line 808
  totals.events[1] = 0UL;
#line 808
  totals.events[2] = 0UL;
#line 808
  totals.events[3] = 0UL;
#line 808
  totals.events[4] = 0UL;
#line 808
  totals.events[5] = 0UL;
#line 808
  totals.events[6] = 0UL;
#line 808
  totals.events[7] = 0UL;
#line 808
  totals.events[8] = 0UL;
#line 808
  totals.events[9] = 0UL;
#line 808
  totals.events[10] = 0UL;
#line 808
  totals.events[11] = 0UL;
#line 808
  totals.events[12] = 0UL;
#line 808
  totals.events[13] = 0UL;
#line 808
  totals.events[14] = 0UL;
#line 808
  totals.events[15] = 0UL;
#line 808
  totals.events[16] = 0UL;
#line 808
  totals.events[17] = 0UL;
#line 808
  totals.events[18] = 0UL;
#line 808
  totals.events[19] = 0UL;
#line 808
  totals.events[20] = 0UL;
#line 808
  totals.events[21] = 0UL;
#line 808
  totals.events[22] = 0UL;
#line 808
  totals.events[23] = 0UL;
#line 808
  totals.events[24] = 0UL;
#line 808
  totals.events[25] = 0UL;
#line 808
  totals.events[26] = 0UL;
#line 810
  seq_printf(m, "statvers=%s", (char *)"1.1");
#line 815
  seq_printf(m, "\n\topts:\t");
#line 816
  seq_puts(m, (int )(root->d_sb)->s_flags & 1 ? "ro" : "rw");
#line 817
  seq_puts(m, ((root->d_sb)->s_flags & 16UL) != 0UL ? ",sync" : "");
#line 818
  seq_puts(m, ((root->d_sb)->s_flags & 1024UL) != 0UL ? ",noatime" : "");
#line 819
  seq_puts(m, ((root->d_sb)->s_flags & 2048UL) != 0UL ? ",nodiratime" : "");
#line 820
  nfs_show_mount_options(m, nfss, 1);
#line 822
  seq_printf(m, "\n\tage:\t%lu", ((unsigned long )jiffies - nfss->mount_time) / 250UL);
#line 824
  show_implementation_id(m, nfss);
#line 826
  seq_printf(m, "\n\tcaps:\t");
#line 827
  seq_printf(m, "caps=0x%x", nfss->caps);
#line 828
  seq_printf(m, ",wtmult=%u", nfss->wtmult);
#line 829
  seq_printf(m, ",dtsize=%u", nfss->dtsize);
#line 830
  seq_printf(m, ",bsize=%u", nfss->bsize);
#line 831
  seq_printf(m, ",namlen=%u", nfss->namelen);
  }
#line 834
  if ((unsigned int )((nfss->nfs_client)->rpc_ops)->version == 4U) {
    {
#line 835
    seq_printf(m, "\n\tnfsv4:\t");
#line 836
    seq_printf(m, "bm0=0x%x", nfss->attr_bitmask[0]);
#line 837
    seq_printf(m, ",bm1=0x%x", nfss->attr_bitmask[1]);
#line 838
    seq_printf(m, ",bm2=0x%x", nfss->attr_bitmask[2]);
#line 839
    seq_printf(m, ",acl=0x%x", nfss->acl_bitmask);
#line 840
    show_sessions(m, nfss);
#line 841
    show_pnfs(m, nfss);
    }
  } else {

  }
  {
#line 848
  seq_printf(m, "\n\tsec:\tflavor=%u", (auth->au_ops)->au_flavor);
  }
#line 849
  if (auth->au_flavor != 0U) {
    {
#line 850
    seq_printf(m, ",pseudoflavor=%u", auth->au_flavor);
    }
  } else {

  }
#line 855
  cpu = -1;
#line 855
  goto ldv_56312;
  ldv_56311: 
  {
#line 858
  __preempt_count_add___0(1);
#line 858
  __asm__  volatile   ("": : : "memory");
#line 859
  __vpp_verify = (void const   *)0;
#line 859
  __asm__  ("": "=r" (__ptr): "0" (nfss->io_stats));
#line 859
  stats = (struct nfs_iostats *)(__ptr + __per_cpu_offset[cpu]);
#line 861
  i = 0;
  }
#line 861
  goto ldv_56303;
  ldv_56302: 
#line 862
  totals.events[i] = totals.events[i] + stats->events[i];
#line 861
  i = i + 1;
  ldv_56303: ;
#line 861
  if (i <= 26) {
#line 863
    goto ldv_56302;
  } else {

  }
#line 863
  i = 0;
#line 863
  goto ldv_56306;
  ldv_56305: 
#line 864
  totals.bytes[i] = totals.bytes[i] + stats->bytes[i];
#line 863
  i = i + 1;
  ldv_56306: ;
#line 863
  if (i <= 7) {
#line 865
    goto ldv_56305;
  } else {

  }
#line 866
  i = 0;
#line 866
  goto ldv_56309;
  ldv_56308: 
#line 867
  totals.fscache[i] = totals.fscache[i] + stats->fscache[i];
#line 866
  i = i + 1;
  ldv_56309: ;
#line 866
  if (i <= 4) {
#line 868
    goto ldv_56308;
  } else {

  }
  {
#line 870
  __asm__  volatile   ("": : : "memory");
#line 870
  __preempt_count_sub___0(1);
  }
  ldv_56312: 
  {
#line 855
  tmp___0 = cpumask_next(cpu, cpu_possible_mask);
#line 855
  cpu = (int )tmp___0;
  }
#line 855
  if (cpu < nr_cpu_ids) {
#line 857
    goto ldv_56311;
  } else {

  }
  {
#line 873
  seq_printf(m, "\n\tevents:\t");
#line 874
  i = 0;
  }
#line 874
  goto ldv_56315;
  ldv_56314: 
  {
#line 875
  seq_printf(m, "%lu ", totals.events[i]);
#line 874
  i = i + 1;
  }
  ldv_56315: ;
#line 874
  if (i <= 26) {
#line 876
    goto ldv_56314;
  } else {

  }
  {
#line 876
  seq_printf(m, "\n\tbytes:\t");
#line 877
  i = 0;
  }
#line 877
  goto ldv_56318;
  ldv_56317: 
  {
#line 878
  seq_printf(m, "%Lu ", totals.bytes[i]);
#line 877
  i = i + 1;
  }
  ldv_56318: ;
#line 877
  if (i <= 7) {
#line 879
    goto ldv_56317;
  } else {

  }

#line 880
  if ((int )nfss->options & 1) {
    {
#line 881
    seq_printf(m, "\n\tfsc:\t");
#line 882
    i = 0;
    }
#line 882
    goto ldv_56321;
    ldv_56320: 
    {
#line 883
    seq_printf(m, "%Lu ", totals.bytes[i]);
#line 882
    i = i + 1;
    }
    ldv_56321: ;
#line 882
    if (i <= 4) {
#line 884
      goto ldv_56320;
    } else {

    }

  } else {

  }
  {
#line 886
  seq_printf(m, "\n");
#line 888
  rpc_print_iostats(m, nfss->client);
  }
#line 890
  return (0);
}
}
#line 892 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_show_stats[15U]  = 
#line 892
  {      'n',      'f',      's',      '_', 
        's',      'h',      'o',      'w', 
        '_',      's',      't',      'a', 
        't',      's',      '\000'};
#line 892
struct kernel_symbol  const  __ksymtab_nfs_show_stats ;
#line 892 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_show_stats  =    {(unsigned long )(& nfs_show_stats), (char const   *)(& __kstrtab_nfs_show_stats)};
#line 898 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
void nfs_umount_begin(struct super_block *sb ) 
{ 
  struct nfs_server *server ;
  struct rpc_clnt *rpc ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
  {
#line 903
  server = NFS_SB((struct super_block  const  *)sb);
#line 905
  rpc = server->client_acl;
#line 906
  tmp = IS_ERR((void const   *)rpc);
  }
#line 906
  if (tmp) {
#line 906
    tmp___0 = 0;
  } else {
#line 906
    tmp___0 = 1;
  }
#line 906
  if (tmp___0) {
    {
#line 907
    rpc_killall_tasks(rpc);
    }
  } else {

  }
  {
#line 908
  rpc = server->client;
#line 909
  tmp___1 = IS_ERR((void const   *)rpc);
  }
#line 909
  if (tmp___1) {
#line 909
    tmp___2 = 0;
  } else {
#line 909
    tmp___2 = 1;
  }
#line 909
  if (tmp___2) {
    {
#line 910
    rpc_killall_tasks(rpc);
    }
  } else {

  }
#line 911
  return;
}
}
#line 912 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_umount_begin[17U]  = 
#line 912
  {      'n',      'f',      's',      '_', 
        'u',      'm',      'o',      'u', 
        'n',      't',      '_',      'b', 
        'e',      'g',      'i',      'n', 
        '\000'};
#line 912
struct kernel_symbol  const  __ksymtab_nfs_umount_begin ;
#line 912 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_umount_begin  =    {(unsigned long )(& nfs_umount_begin), (char const   *)(& __kstrtab_nfs_umount_begin)};
#line 914 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct nfs_parsed_mount_data *nfs_alloc_parsed_mount_data(void) 
{ 
  struct nfs_parsed_mount_data *data ;
  void *tmp ;
  struct task_struct *tmp___0 ;

  {
  {
#line 918
  tmp = kzalloc(488UL, 208U);
#line 918
  data = (struct nfs_parsed_mount_data *)tmp;
  }
#line 919
  if ((unsigned long )data != (unsigned long )((struct nfs_parsed_mount_data *)0)) {
    {
#line 920
    data->acregmin = 3U;
#line 921
    data->acregmax = 60U;
#line 922
    data->acdirmin = 30U;
#line 923
    data->acdirmax = 60U;
#line 924
    data->mount_server.port = -1;
#line 925
    data->nfs_server.port = -1;
#line 926
    data->nfs_server.protocol = 6U;
#line 927
    data->selected_flavor = 8U;
#line 928
    data->minorversion = 0U;
#line 929
    data->need_mount = 1;
#line 930
    tmp___0 = get_current();
#line 930
    data->net = (tmp___0->nsproxy)->net_ns;
#line 931
    security_init_mnt_opts(& data->lsm_opts);
    }
  } else {

  }
#line 933
  return (data);
}
}
#line 936 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_free_parsed_mount_data(struct nfs_parsed_mount_data *data ) 
{ 


  {
#line 938
  if ((unsigned long )data != (unsigned long )((struct nfs_parsed_mount_data *)0)) {
    {
#line 939
    kfree((void const   *)data->client_address);
#line 940
    kfree((void const   *)data->mount_server.hostname);
#line 941
    kfree((void const   *)data->nfs_server.export_path);
#line 942
    kfree((void const   *)data->nfs_server.hostname);
#line 943
    kfree((void const   *)data->fscache_uniq);
#line 944
    security_free_mnt_opts(& data->lsm_opts);
#line 945
    kfree((void const   *)data);
    }
  } else {

  }
#line 947
  return;
}
}
#line 955 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_verify_server_address(struct sockaddr *addr ) 
{ 
  struct sockaddr_in *sa ;
  struct in6_addr *sa___0 ;
  bool tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 958
  if ((int )addr->sa_family == 2) {
#line 958
    goto case_2;
  } else {

  }
#line 962
  if ((int )addr->sa_family == 10) {
#line 962
    goto case_10;
  } else {

  }
#line 957
  goto switch_break;
  case_2: /* CIL Label */ 
#line 959
  sa = (struct sockaddr_in *)addr;
#line 960
  return (sa->sin_addr.s_addr != 0U);
  case_10: /* CIL Label */ 
  {
#line 963
  sa___0 = & ((struct sockaddr_in6 *)addr)->sin6_addr;
#line 964
  tmp = ipv6_addr_any((struct in6_addr  const  *)sa___0);
  }
#line 964
  if (tmp) {
#line 964
    tmp___0 = 0;
  } else {
#line 964
    tmp___0 = 1;
  }
#line 964
  return (tmp___0);
  switch_break: /* CIL Label */ ;
  }
  {
#line 968
  tmp___1 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 968
  if (tmp___1 != 0L) {
    {
#line 968
    printk("\001dNFS: Invalid IP address specified\n");
    }
  } else {

  }
#line 969
  return (0);
}
}
#line 976 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_set_port(struct sockaddr *sap , int *port , unsigned short const   default_port ) 
{ 


  {
#line 979
  if (*port == -1) {
#line 980
    *port = (int )default_port;
  } else {

  }
  {
#line 982
  rpc_set_port(sap, (int )((unsigned short const   )*port));
  }
#line 983
  return;
}
}
#line 989 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_validate_transport_protocol(struct nfs_parsed_mount_data *mnt ) 
{ 


  {
  {
#line 992
  if ((int )mnt->nfs_server.protocol == 17) {
#line 992
    goto case_17;
  } else {

  }
#line 993
  if ((int )mnt->nfs_server.protocol == 6) {
#line 993
    goto case_6;
  } else {

  }
#line 994
  if ((int )mnt->nfs_server.protocol == 256) {
#line 994
    goto case_256;
  } else {

  }
#line 996
  goto switch_default;
  case_17: /* CIL Label */ ;
  case_6: /* CIL Label */ ;
  case_256: /* CIL Label */ ;
#line 995
  goto ldv_56368;
  switch_default: /* CIL Label */ 
#line 997
  mnt->nfs_server.protocol = 6U;
  switch_break: /* CIL Label */ ;
  }
  ldv_56368: ;
#line 1000
  return;
}
}
#line 1005 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_set_mount_transport_protocol(struct nfs_parsed_mount_data *mnt ) 
{ 


  {
  {
#line 1007
  nfs_validate_transport_protocol(mnt);
  }
#line 1009
  if ((unsigned int )mnt->mount_server.protocol == 17U || (unsigned int )mnt->mount_server.protocol == 6U) {
#line 1011
    return;
  } else {

  }
  {
#line 1013
  if ((int )mnt->nfs_server.protocol == 17) {
#line 1013
    goto case_17;
  } else {

  }
#line 1016
  if ((int )mnt->nfs_server.protocol == 6) {
#line 1016
    goto case_6;
  } else {

  }
#line 1017
  if ((int )mnt->nfs_server.protocol == 256) {
#line 1017
    goto case_256;
  } else {

  }
#line 1012
  goto switch_break;
  case_17: /* CIL Label */ 
#line 1014
  mnt->mount_server.protocol = 17U;
#line 1015
  goto ldv_56374;
  case_6: /* CIL Label */ ;
  case_256: /* CIL Label */ 
#line 1018
  mnt->mount_server.protocol = 6U;
  switch_break: /* CIL Label */ ;
  }
  ldv_56374: ;
#line 1021
  return;
}
}
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static bool nfs_auth_info_add(struct nfs_auth_info *auth_info , rpc_authflavor_t flavor ) 
{ 
  unsigned int i ;
  unsigned int max_flavor_len ;
  long tmp ;
  unsigned int tmp___0 ;

  {
#line 1030
  max_flavor_len = 12U;
#line 1034
  i = 0U;
#line 1034
  goto ldv_56384;
  ldv_56383: ;
#line 1035
  if (flavor == auth_info->flavors[i]) {
#line 1036
    return (1);
  } else {

  }
#line 1034
  i = i + 1U;
  ldv_56384: ;
#line 1034
  if (i < auth_info->flavor_len) {
#line 1036
    goto ldv_56383;
  } else {

  }

#line 1039
  if (auth_info->flavor_len + 1U >= max_flavor_len) {
    {
#line 1040
    tmp = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
    }
#line 1040
    if (tmp != 0L) {
      {
#line 1040
      printk("\001dNFS: too many sec= flavors\n");
      }
    } else {

    }
#line 1041
    return (0);
  } else {

  }
#line 1044
  tmp___0 = auth_info->flavor_len;
#line 1044
  auth_info->flavor_len = auth_info->flavor_len + 1U;
#line 1044
  auth_info->flavors[tmp___0] = flavor;
#line 1045
  return (1);
}
}
#line 1052 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
bool nfs_auth_info_match(struct nfs_auth_info  const  *auth_info , rpc_authflavor_t match ) 
{ 
  int i ;

  {
#line 1057
  if ((unsigned int )auth_info->flavor_len == 0U) {
#line 1058
    return (1);
  } else {

  }
#line 1060
  i = 0;
#line 1060
  goto ldv_56392;
  ldv_56391: ;
#line 1061
  if (auth_info->flavors[i] == match) {
#line 1062
    return (1);
  } else {

  }
#line 1060
  i = i + 1;
  ldv_56392: ;
#line 1060
  if ((unsigned int )i < (unsigned int )auth_info->flavor_len) {
#line 1062
    goto ldv_56391;
  } else {

  }

#line 1064
  return (0);
}
}
#line 1066 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_auth_info_match[20U]  = 
#line 1066
  {      'n',      'f',      's',      '_', 
        'a',      'u',      't',      'h', 
        '_',      'i',      'n',      'f', 
        'o',      '_',      'm',      'a', 
        't',      'c',      'h',      '\000'};
#line 1066
struct kernel_symbol  const  __ksymtab_nfs_auth_info_match ;
#line 1066 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_auth_info_match  =    {(unsigned long )(& nfs_auth_info_match), (char const   *)(& __kstrtab_nfs_auth_info_match)};
#line 1071 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_parse_security_flavors(char *value , struct nfs_parsed_mount_data *mnt ) 
{ 
  substring_t args[3U] ;
  rpc_authflavor_t pseudoflavor ;
  char *p ;
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;

  {
  {
#line 1078
  tmp = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1078
  if (tmp != 0L) {
    {
#line 1078
    printk("\001dNFS: parsing sec=%s option\n", value);
    }
  } else {

  }
#line 1080
  goto ldv_56423;
  ldv_56422: 
  {
#line 1081
  tmp___0 = match_token(p, (struct match_token  const  *)(& nfs_secflavor_tokens),
                        (substring_t *)(& args));
  }
  {
#line 1082
  if (tmp___0 == 0) {
#line 1082
    goto case_0;
  } else {

  }
#line 1085
  if (tmp___0 == 1) {
#line 1085
    goto case_1;
  } else {

  }
#line 1088
  if (tmp___0 == 2) {
#line 1088
    goto case_2;
  } else {

  }
#line 1091
  if (tmp___0 == 3) {
#line 1091
    goto case_3;
  } else {

  }
#line 1094
  if (tmp___0 == 4) {
#line 1094
    goto case_4;
  } else {

  }
#line 1097
  if (tmp___0 == 5) {
#line 1097
    goto case_5;
  } else {

  }
#line 1100
  if (tmp___0 == 6) {
#line 1100
    goto case_6;
  } else {

  }
#line 1103
  if (tmp___0 == 7) {
#line 1103
    goto case_7;
  } else {

  }
#line 1106
  if (tmp___0 == 8) {
#line 1106
    goto case_8;
  } else {

  }
#line 1109
  if (tmp___0 == 9) {
#line 1109
    goto case_9;
  } else {

  }
#line 1112
  if (tmp___0 == 10) {
#line 1112
    goto case_10;
  } else {

  }
#line 1115
  goto switch_default;
  case_0: /* CIL Label */ 
#line 1083
  pseudoflavor = 0U;
#line 1084
  goto ldv_56410;
  case_1: /* CIL Label */ 
#line 1086
  pseudoflavor = 1U;
#line 1087
  goto ldv_56410;
  case_2: /* CIL Label */ 
#line 1089
  pseudoflavor = 390003U;
#line 1090
  goto ldv_56410;
  case_3: /* CIL Label */ 
#line 1092
  pseudoflavor = 390004U;
#line 1093
  goto ldv_56410;
  case_4: /* CIL Label */ 
#line 1095
  pseudoflavor = 390005U;
#line 1096
  goto ldv_56410;
  case_5: /* CIL Label */ 
#line 1098
  pseudoflavor = 390006U;
#line 1099
  goto ldv_56410;
  case_6: /* CIL Label */ 
#line 1101
  pseudoflavor = 390007U;
#line 1102
  goto ldv_56410;
  case_7: /* CIL Label */ 
#line 1104
  pseudoflavor = 390008U;
#line 1105
  goto ldv_56410;
  case_8: /* CIL Label */ 
#line 1107
  pseudoflavor = 390009U;
#line 1108
  goto ldv_56410;
  case_9: /* CIL Label */ 
#line 1110
  pseudoflavor = 390010U;
#line 1111
  goto ldv_56410;
  case_10: /* CIL Label */ 
#line 1113
  pseudoflavor = 390011U;
#line 1114
  goto ldv_56410;
  switch_default: /* CIL Label */ 
  {
#line 1116
  tmp___1 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1116
  if (tmp___1 != 0L) {
    {
#line 1116
    printk("\001dNFS: sec= option \'%s\' not recognized\n", p);
    }
  } else {

  }
#line 1118
  return (0);
  switch_break: /* CIL Label */ ;
  }
  ldv_56410: 
  {
#line 1121
  tmp___2 = nfs_auth_info_add(& mnt->auth_info, pseudoflavor);
  }
#line 1121
  if (tmp___2) {
#line 1121
    tmp___3 = 0;
  } else {
#line 1121
    tmp___3 = 1;
  }
#line 1121
  if (tmp___3) {
#line 1122
    return (0);
  } else {

  }
  ldv_56423: 
  {
#line 1080
  p = strsep(& value, ":");
  }
#line 1080
  if ((unsigned long )p != (unsigned long )((char *)0)) {
#line 1082
    goto ldv_56422;
  } else {

  }

#line 1125
  return (1);
}
}
#line 1128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_parse_version_string(char *string , struct nfs_parsed_mount_data *mnt ,
                                    substring_t *args ) 
{ 
  int tmp ;

  {
  {
#line 1132
  mnt->flags = mnt->flags & -129;
#line 1133
  tmp = match_token(string, (struct match_token  const  *)(& nfs_vers_tokens), args);
  }
  {
#line 1134
  if (tmp == 0) {
#line 1134
    goto case_0;
  } else {

  }
#line 1137
  if (tmp == 1) {
#line 1137
    goto case_1;
  } else {

  }
#line 1141
  if (tmp == 2) {
#line 1141
    goto case_2;
  } else {

  }
#line 1148
  if (tmp == 3) {
#line 1148
    goto case_3;
  } else {

  }
#line 1152
  if (tmp == 4) {
#line 1152
    goto case_4;
  } else {

  }
#line 1156
  if (tmp == 5) {
#line 1156
    goto case_5;
  } else {

  }
#line 1160
  goto switch_default;
  case_0: /* CIL Label */ 
#line 1135
  mnt->version = 2U;
#line 1136
  goto ldv_56431;
  case_1: /* CIL Label */ 
#line 1138
  mnt->flags = mnt->flags | 128;
#line 1139
  mnt->version = 3U;
#line 1140
  goto ldv_56431;
  case_2: /* CIL Label */ 
#line 1146
  mnt->version = 4U;
#line 1147
  goto ldv_56431;
  case_3: /* CIL Label */ 
#line 1149
  mnt->version = 4U;
#line 1150
  mnt->minorversion = 0U;
#line 1151
  goto ldv_56431;
  case_4: /* CIL Label */ 
#line 1153
  mnt->version = 4U;
#line 1154
  mnt->minorversion = 1U;
#line 1155
  goto ldv_56431;
  case_5: /* CIL Label */ 
#line 1157
  mnt->version = 4U;
#line 1158
  mnt->minorversion = 2U;
#line 1159
  goto ldv_56431;
  switch_default: /* CIL Label */ ;
#line 1161
  return (0);
  switch_break: /* CIL Label */ ;
  }
  ldv_56431: ;
#line 1163
  return (1);
}
}
#line 1166 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_get_option_str(substring_t *args , char **option ) 
{ 


  {
  {
#line 1168
  kfree((void const   *)*option);
#line 1169
  *option = match_strdup((substring_t const   *)args);
  }
#line 1170
  return ((unsigned long )*option == (unsigned long )((char *)0));
}
}
#line 1173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_get_option_ul(substring_t *args , unsigned long *option ) 
{ 
  int rc ;
  char *string ;

  {
  {
#line 1178
  string = match_strdup((substring_t const   *)args);
  }
#line 1179
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1180
    return (-12);
  } else {

  }
  {
#line 1181
  rc = kstrtoul((char const   *)string, 10U, option);
#line 1182
  kfree((void const   *)string);
  }
#line 1184
  return (rc);
}
}
#line 1193 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_parse_mount_options(char *raw , struct nfs_parsed_mount_data *mnt ) 
{ 
  char *p ;
  char *string ;
  char *secdata ;
  int rc ;
  int sloppy ;
  int invalid_option ;
  unsigned short protofamily ;
  unsigned short mountfamily ;
  long tmp ;
  long tmp___0 ;
  substring_t args[3U] ;
  unsigned long option ;
  int token ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  unsigned int tmp___13 ;
  unsigned int tmp___14 ;
  unsigned int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  long tmp___20 ;
  long tmp___21 ;
  long tmp___22 ;
  size_t tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  size_t tmp___26 ;
  long tmp___27 ;
  int tmp___28 ;
  long tmp___29 ;
  long tmp___30 ;
  long tmp___31 ;
  long tmp___32 ;

  {
#line 1197
  sloppy = 0;
#line 1197
  invalid_option = 0;
#line 1198
  protofamily = 0U;
#line 1199
  mountfamily = 0U;
#line 1201
  if ((unsigned long )raw == (unsigned long )((char *)0)) {
    {
#line 1202
    tmp = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
    }
#line 1202
    if (tmp != 0L) {
      {
#line 1202
      printk("\001dNFS: mount options string was NULL.\n");
      }
    } else {

    }
#line 1203
    return (1);
  } else {

  }
  {
#line 1205
  tmp___0 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1205
  if (tmp___0 != 0L) {
    {
#line 1205
    printk("\001dNFS: nfs mount opts=\'%s\'\n", raw);
    }
  } else {

  }
  {
#line 1207
  secdata = alloc_secdata();
  }
#line 1208
  if ((unsigned long )secdata == (unsigned long )((char *)0)) {
#line 1209
    goto out_nomem;
  } else {

  }
  {
#line 1211
  rc = security_sb_copy_data(raw, secdata);
  }
#line 1212
  if (rc != 0) {
#line 1213
    goto out_security_failure;
  } else {

  }
  {
#line 1215
  rc = security_sb_parse_opts_str(secdata, & mnt->lsm_opts);
  }
#line 1216
  if (rc != 0) {
#line 1217
    goto out_security_failure;
  } else {

  }
  {
#line 1219
  free_secdata((void *)secdata);
  }
#line 1221
  goto ldv_56465;
  ldv_56549: ;
#line 1226
  if ((int )((signed char )*p) == 0) {
#line 1227
    goto ldv_56465;
  } else {

  }
  {
#line 1229
  tmp___1 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1229
  if (tmp___1 != 0L) {
    {
#line 1229
    printk("\001dNFS:   parsing nfs mount option \'%s\'\n", p);
    }
  } else {

  }
  {
#line 1231
  token = match_token(p, (struct match_token  const  *)(& nfs_mount_option_tokens),
                      (substring_t *)(& args));
  }
  {
#line 1237
  if (token == 0) {
#line 1237
    goto case_0;
  } else {

  }
#line 1240
  if (token == 1) {
#line 1240
    goto case_1;
  } else {

  }
#line 1243
  if (token == 2) {
#line 1243
    goto case_2;
  } else {

  }
#line 1246
  if (token == 3) {
#line 1246
    goto case_3;
  } else {

  }
#line 1249
  if (token == 4) {
#line 1249
    goto case_4;
  } else {

  }
#line 1252
  if (token == 5) {
#line 1252
    goto case_5;
  } else {

  }
#line 1255
  if (token == 6) {
#line 1255
    goto case_6;
  } else {

  }
#line 1258
  if (token == 7) {
#line 1258
    goto case_7;
  } else {

  }
#line 1261
  if (token == 8) {
#line 1261
    goto case_8;
  } else {

  }
#line 1266
  if (token == 9) {
#line 1266
    goto case_9;
  } else {

  }
#line 1271
  if (token == 10) {
#line 1271
    goto case_10;
  } else {

  }
#line 1275
  if (token == 11) {
#line 1275
    goto case_11;
  } else {

  }
#line 1279
  if (token == 12) {
#line 1279
    goto case_12;
  } else {

  }
#line 1284
  if (token == 13) {
#line 1284
    goto case_13;
  } else {

  }
#line 1287
  if (token == 14) {
#line 1287
    goto case_14;
  } else {

  }
#line 1290
  if (token == 15) {
#line 1290
    goto case_15;
  } else {

  }
#line 1293
  if (token == 16) {
#line 1293
    goto case_16;
  } else {

  }
#line 1296
  if (token == 17) {
#line 1296
    goto case_17;
  } else {

  }
#line 1299
  if (token == 18) {
#line 1299
    goto case_18;
  } else {

  }
#line 1302
  if (token == 19) {
#line 1302
    goto case_19;
  } else {

  }
#line 1305
  if (token == 20) {
#line 1305
    goto case_20;
  } else {

  }
#line 1308
  if (token == 21) {
#line 1308
    goto case_21;
  } else {

  }
#line 1313
  if (token == 22) {
#line 1313
    goto case_22;
  } else {

  }
#line 1318
  if (token == 23) {
#line 1318
    goto case_23;
  } else {

  }
#line 1321
  if (token == 24) {
#line 1321
    goto case_24;
  } else {

  }
#line 1328
  if (token == 25) {
#line 1328
    goto case_25;
  } else {

  }
#line 1334
  if (token == 26) {
#line 1334
    goto case_26;
  } else {

  }
#line 1339
  if (token == 27) {
#line 1339
    goto case_27;
  } else {

  }
#line 1344
  if (token == 28) {
#line 1344
    goto case_28;
  } else {

  }
#line 1349
  if (token == 29) {
#line 1349
    goto case_29;
  } else {

  }
#line 1354
  if (token == 30) {
#line 1354
    goto case_30;
  } else {

  }
#line 1359
  if (token == 31) {
#line 1359
    goto case_31;
  } else {

  }
#line 1364
  if (token == 32) {
#line 1364
    goto case_32;
  } else {

  }
#line 1369
  if (token == 33) {
#line 1369
    goto case_33;
  } else {

  }
#line 1374
  if (token == 34) {
#line 1374
    goto case_34;
  } else {

  }
#line 1379
  if (token == 35) {
#line 1379
    goto case_35;
  } else {

  }
#line 1385
  if (token == 36) {
#line 1385
    goto case_36;
  } else {

  }
#line 1390
  if (token == 37) {
#line 1390
    goto case_37;
  } else {

  }
#line 1396
  if (token == 38) {
#line 1396
    goto case_38;
  } else {

  }
#line 1403
  if (token == 39) {
#line 1403
    goto case_39;
  } else {

  }
#line 1414
  if (token == 40) {
#line 1414
    goto case_40;
  } else {

  }
#line 1423
  if (token == 41) {
#line 1423
    goto case_41;
  } else {

  }
#line 1435
  if (token == 42) {
#line 1435
    goto case_42;
  } else {

  }
#line 1470
  if (token == 43) {
#line 1470
    goto case_43;
  } else {

  }
#line 1497
  if (token == 45) {
#line 1497
    goto case_45;
  } else {

  }
#line 1510
  if (token == 47) {
#line 1510
    goto case_47;
  } else {

  }
#line 1514
  if (token == 44) {
#line 1514
    goto case_44;
  } else {

  }
#line 1519
  if (token == 46) {
#line 1519
    goto case_46;
  } else {

  }
#line 1532
  if (token == 48) {
#line 1532
    goto case_48;
  } else {

  }
#line 1556
  if (token == 49) {
#line 1556
    goto case_49;
  } else {

  }
#line 1561
  if (token == 50) {
#line 1561
    goto case_50;
  } else {

  }
#line 1593
  if (token == 53) {
#line 1593
    goto case_53;
  } else {

  }
#line 1597
  if (token == 51) {
#line 1597
    goto case_51;
  } else {

  }
#line 1598
  if (token == 52) {
#line 1598
    goto case_52;
  } else {

  }
#line 1603
  goto switch_default___3;
  case_0: /* CIL Label */ 
#line 1238
  mnt->flags = mnt->flags | 1;
#line 1239
  goto ldv_56467;
  case_1: /* CIL Label */ 
#line 1241
  mnt->flags = mnt->flags & -2;
#line 1242
  goto ldv_56467;
  case_2: /* CIL Label */ 
#line 1244
  mnt->flags = mnt->flags | 8;
#line 1245
  goto ldv_56467;
  case_3: /* CIL Label */ 
#line 1247
  mnt->flags = mnt->flags & -9;
#line 1248
  goto ldv_56467;
  case_4: /* CIL Label */ 
#line 1250
  mnt->flags = mnt->flags & -17;
#line 1251
  goto ldv_56467;
  case_5: /* CIL Label */ 
#line 1253
  mnt->flags = mnt->flags | 16;
#line 1254
  goto ldv_56467;
  case_6: /* CIL Label */ 
#line 1256
  mnt->flags = mnt->flags & -33;
#line 1257
  goto ldv_56467;
  case_7: /* CIL Label */ 
#line 1259
  mnt->flags = mnt->flags | 32;
#line 1260
  goto ldv_56467;
  case_8: /* CIL Label */ 
#line 1262
  mnt->flags = mnt->flags & -513;
#line 1263
  mnt->flags = mnt->flags & -3145729;
#line 1265
  goto ldv_56467;
  case_9: /* CIL Label */ 
#line 1267
  mnt->flags = mnt->flags | 512;
#line 1268
  mnt->flags = mnt->flags | 3145728;
#line 1270
  goto ldv_56467;
  case_10: /* CIL Label */ 
#line 1272
  mnt->flags = mnt->flags & -65;
#line 1273
  mnt->nfs_server.protocol = 17U;
#line 1274
  goto ldv_56467;
  case_11: /* CIL Label */ 
#line 1276
  mnt->flags = mnt->flags | 64;
#line 1277
  mnt->nfs_server.protocol = 6U;
#line 1278
  goto ldv_56467;
  case_12: /* CIL Label */ 
  {
#line 1280
  mnt->flags = mnt->flags | 64;
#line 1281
  mnt->nfs_server.protocol = 256U;
#line 1282
  xprt_load_transport((char const   *)p);
  }
#line 1283
  goto ldv_56467;
  case_13: /* CIL Label */ 
#line 1285
  mnt->flags = mnt->flags & -2049;
#line 1286
  goto ldv_56467;
  case_14: /* CIL Label */ 
#line 1288
  mnt->flags = mnt->flags | 2048;
#line 1289
  goto ldv_56467;
  case_15: /* CIL Label */ 
#line 1291
  mnt->flags = mnt->flags & -16385;
#line 1292
  goto ldv_56467;
  case_16: /* CIL Label */ 
#line 1294
  mnt->flags = mnt->flags | 16384;
#line 1295
  goto ldv_56467;
  case_17: /* CIL Label */ 
#line 1297
  mnt->flags = mnt->flags & -32769;
#line 1298
  goto ldv_56467;
  case_18: /* CIL Label */ 
#line 1300
  mnt->flags = mnt->flags | 32768;
#line 1301
  goto ldv_56467;
  case_19: /* CIL Label */ 
#line 1303
  mnt->flags = mnt->flags & -262145;
#line 1304
  goto ldv_56467;
  case_20: /* CIL Label */ 
#line 1306
  mnt->flags = mnt->flags | 262144;
#line 1307
  goto ldv_56467;
  case_21: /* CIL Label */ 
  {
#line 1309
  mnt->options = mnt->options | 1U;
#line 1310
  kfree((void const   *)mnt->fscache_uniq);
#line 1311
  mnt->fscache_uniq = (char *)0;
  }
#line 1312
  goto ldv_56467;
  case_22: /* CIL Label */ 
  {
#line 1314
  mnt->options = mnt->options & 4294967294U;
#line 1315
  kfree((void const   *)mnt->fscache_uniq);
#line 1316
  mnt->fscache_uniq = (char *)0;
  }
#line 1317
  goto ldv_56467;
  case_23: /* CIL Label */ 
#line 1319
  mnt->options = mnt->options | 2U;
#line 1320
  goto ldv_56467;
  case_24: /* CIL Label */ 
#line 1322
  mnt->options = mnt->options & 2U;
#line 1323
  goto ldv_56467;
  case_25: /* CIL Label */ 
  {
#line 1329
  tmp___2 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1329
  if (tmp___2 != 0 || option > 65535UL) {
#line 1331
    goto out_invalid_value;
  } else {

  }
#line 1332
  mnt->nfs_server.port = (int )option;
#line 1333
  goto ldv_56467;
  case_26: /* CIL Label */ 
  {
#line 1335
  tmp___3 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1335
  if (tmp___3 != 0) {
#line 1336
    goto out_invalid_value;
  } else {

  }
#line 1337
  mnt->rsize = (unsigned int )option;
#line 1338
  goto ldv_56467;
  case_27: /* CIL Label */ 
  {
#line 1340
  tmp___4 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1340
  if (tmp___4 != 0) {
#line 1341
    goto out_invalid_value;
  } else {

  }
#line 1342
  mnt->wsize = (unsigned int )option;
#line 1343
  goto ldv_56467;
  case_28: /* CIL Label */ 
  {
#line 1345
  tmp___5 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1345
  if (tmp___5 != 0) {
#line 1346
    goto out_invalid_value;
  } else {

  }
#line 1347
  mnt->bsize = (unsigned int )option;
#line 1348
  goto ldv_56467;
  case_29: /* CIL Label */ 
  {
#line 1350
  tmp___6 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1350
  if (tmp___6 != 0 || option == 0UL) {
#line 1351
    goto out_invalid_value;
  } else {

  }
#line 1352
  mnt->timeo = (unsigned int )option;
#line 1353
  goto ldv_56467;
  case_30: /* CIL Label */ 
  {
#line 1355
  tmp___7 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1355
  if (tmp___7 != 0 || option == 0UL) {
#line 1356
    goto out_invalid_value;
  } else {

  }
#line 1357
  mnt->retrans = (unsigned int )option;
#line 1358
  goto ldv_56467;
  case_31: /* CIL Label */ 
  {
#line 1360
  tmp___8 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1360
  if (tmp___8 != 0) {
#line 1361
    goto out_invalid_value;
  } else {

  }
#line 1362
  mnt->acregmin = (unsigned int )option;
#line 1363
  goto ldv_56467;
  case_32: /* CIL Label */ 
  {
#line 1365
  tmp___9 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1365
  if (tmp___9 != 0) {
#line 1366
    goto out_invalid_value;
  } else {

  }
#line 1367
  mnt->acregmax = (unsigned int )option;
#line 1368
  goto ldv_56467;
  case_33: /* CIL Label */ 
  {
#line 1370
  tmp___10 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1370
  if (tmp___10 != 0) {
#line 1371
    goto out_invalid_value;
  } else {

  }
#line 1372
  mnt->acdirmin = (unsigned int )option;
#line 1373
  goto ldv_56467;
  case_34: /* CIL Label */ 
  {
#line 1375
  tmp___11 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1375
  if (tmp___11 != 0) {
#line 1376
    goto out_invalid_value;
  } else {

  }
#line 1377
  mnt->acdirmax = (unsigned int )option;
#line 1378
  goto ldv_56467;
  case_35: /* CIL Label */ 
  {
#line 1380
  tmp___12 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1380
  if (tmp___12 != 0) {
#line 1381
    goto out_invalid_value;
  } else {

  }
#line 1382
  tmp___15 = (unsigned int )option;
#line 1382
  mnt->acdirmax = tmp___15;
#line 1382
  tmp___14 = tmp___15;
#line 1382
  mnt->acdirmin = tmp___14;
#line 1382
  tmp___13 = tmp___14;
#line 1382
  mnt->acregmax = tmp___13;
#line 1382
  mnt->acregmin = tmp___13;
#line 1384
  goto ldv_56467;
  case_36: /* CIL Label */ 
  {
#line 1386
  tmp___16 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1386
  if (tmp___16 != 0) {
#line 1387
    goto out_invalid_value;
  } else {

  }
#line 1388
  mnt->namlen = (unsigned int )option;
#line 1389
  goto ldv_56467;
  case_37: /* CIL Label */ 
  {
#line 1391
  tmp___17 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1391
  if (tmp___17 != 0 || option > 65535UL) {
#line 1393
    goto out_invalid_value;
  } else {

  }
#line 1394
  mnt->mount_server.port = (int )option;
#line 1395
  goto ldv_56467;
  case_38: /* CIL Label */ 
  {
#line 1397
  tmp___18 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1397
  if ((tmp___18 != 0 || option == 0UL) || option > 3UL) {
#line 1400
    goto out_invalid_value;
  } else {

  }
#line 1401
  mnt->mount_server.version = (u32 )option;
#line 1402
  goto ldv_56467;
  case_39: /* CIL Label */ 
  {
#line 1404
  tmp___19 = nfs_get_option_ul((substring_t *)(& args), & option);
  }
#line 1404
  if (tmp___19 != 0) {
#line 1405
    goto out_invalid_value;
  } else {

  }
#line 1406
  if (option > 2UL) {
#line 1407
    goto out_invalid_value;
  } else {

  }
#line 1408
  mnt->minorversion = (unsigned int )option;
#line 1409
  goto ldv_56467;
  case_40: /* CIL Label */ 
  {
#line 1415
  string = match_strdup((substring_t const   *)(& args));
  }
#line 1416
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1417
    goto out_nomem;
  } else {

  }
  {
#line 1418
  rc = nfs_parse_version_string(string, mnt, (substring_t *)(& args));
#line 1419
  kfree((void const   *)string);
  }
#line 1420
  if (rc == 0) {
#line 1421
    goto out_invalid_value;
  } else {

  }
#line 1422
  goto ldv_56467;
  case_41: /* CIL Label */ 
  {
#line 1424
  string = match_strdup((substring_t const   *)(& args));
  }
#line 1425
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1426
    goto out_nomem;
  } else {

  }
  {
#line 1427
  rc = nfs_parse_security_flavors(string, mnt);
#line 1428
  kfree((void const   *)string);
  }
#line 1429
  if (rc == 0) {
    {
#line 1430
    tmp___20 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
    }
#line 1430
    if (tmp___20 != 0L) {
      {
#line 1430
      printk("\001dNFS:   unrecognized security flavor\n");
      }
    } else {

    }
#line 1432
    return (0);
  } else {

  }
#line 1434
  goto ldv_56467;
  case_42: /* CIL Label */ 
  {
#line 1436
  string = match_strdup((substring_t const   *)(& args));
  }
#line 1437
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1438
    goto out_nomem;
  } else {

  }
  {
#line 1439
  token = match_token(string, (struct match_token  const  *)(& nfs_xprt_protocol_tokens),
                      (substring_t *)(& args));
#line 1442
  protofamily = 2U;
  }
  {
#line 1444
  if (token == 1) {
#line 1444
    goto case_1___0;
  } else {

  }
#line 1446
  if (token == 0) {
#line 1446
    goto case_0___0;
  } else {

  }
#line 1450
  if (token == 3) {
#line 1450
    goto case_3___0;
  } else {

  }
#line 1452
  if (token == 2) {
#line 1452
    goto case_2___0;
  } else {

  }
#line 1456
  if (token == 4) {
#line 1456
    goto case_4___0;
  } else {

  }
#line 1462
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 1445
  protofamily = 10U;
  case_0___0: /* CIL Label */ 
#line 1447
  mnt->flags = mnt->flags & -65;
#line 1448
  mnt->nfs_server.protocol = 17U;
#line 1449
  goto ldv_56513;
  case_3___0: /* CIL Label */ 
#line 1451
  protofamily = 10U;
  case_2___0: /* CIL Label */ 
#line 1453
  mnt->flags = mnt->flags | 64;
#line 1454
  mnt->nfs_server.protocol = 6U;
#line 1455
  goto ldv_56513;
  case_4___0: /* CIL Label */ 
  {
#line 1458
  mnt->flags = mnt->flags | 64;
#line 1459
  mnt->nfs_server.protocol = 256U;
#line 1460
  xprt_load_transport((char const   *)string);
  }
#line 1461
  goto ldv_56513;
  switch_default: /* CIL Label */ 
  {
#line 1463
  tmp___21 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1463
  if (tmp___21 != 0L) {
    {
#line 1463
    printk("\001dNFS:   unrecognized transport protocol\n");
    }
  } else {

  }
  {
#line 1465
  kfree((void const   *)string);
  }
#line 1466
  return (0);
  switch_break___0: /* CIL Label */ ;
  }
  ldv_56513: 
  {
#line 1468
  kfree((void const   *)string);
  }
#line 1469
  goto ldv_56467;
  case_43: /* CIL Label */ 
  {
#line 1471
  string = match_strdup((substring_t const   *)(& args));
  }
#line 1472
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1473
    goto out_nomem;
  } else {

  }
  {
#line 1474
  token = match_token(string, (struct match_token  const  *)(& nfs_xprt_protocol_tokens),
                      (substring_t *)(& args));
#line 1476
  kfree((void const   *)string);
#line 1478
  mountfamily = 2U;
  }
  {
#line 1480
  if (token == 1) {
#line 1480
    goto case_1___1;
  } else {

  }
#line 1482
  if (token == 0) {
#line 1482
    goto case_0___1;
  } else {

  }
#line 1485
  if (token == 3) {
#line 1485
    goto case_3___1;
  } else {

  }
#line 1487
  if (token == 2) {
#line 1487
    goto case_2___1;
  } else {

  }
#line 1490
  if (token == 4) {
#line 1490
    goto case_4___1;
  } else {

  }
#line 1491
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 1481
  mountfamily = 10U;
  case_0___1: /* CIL Label */ 
#line 1483
  mnt->mount_server.protocol = 17U;
#line 1484
  goto ldv_56521;
  case_3___1: /* CIL Label */ 
#line 1486
  mountfamily = 10U;
  case_2___1: /* CIL Label */ 
#line 1488
  mnt->mount_server.protocol = 6U;
#line 1489
  goto ldv_56521;
  case_4___1: /* CIL Label */ ;
  switch_default___0: /* CIL Label */ 
  {
#line 1492
  tmp___22 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1492
  if (tmp___22 != 0L) {
    {
#line 1492
    printk("\001dNFS:   unrecognized transport protocol\n");
    }
  } else {

  }
#line 1494
  return (0);
  switch_break___1: /* CIL Label */ ;
  }
  ldv_56521: ;
#line 1496
  goto ldv_56467;
  case_45: /* CIL Label */ 
  {
#line 1498
  string = match_strdup((substring_t const   *)(& args));
  }
#line 1499
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1500
    goto out_nomem;
  } else {

  }
  {
#line 1501
  tmp___23 = strlen((char const   *)string);
#line 1501
  mnt->nfs_server.addrlen = rpc_pton(mnt->net, (char const   *)string, tmp___23, (struct sockaddr *)(& mnt->nfs_server.address),
                                     128UL);
#line 1506
  kfree((void const   *)string);
  }
#line 1507
  if (mnt->nfs_server.addrlen == 0UL) {
#line 1508
    goto out_invalid_address;
  } else {

  }
#line 1509
  goto ldv_56467;
  case_47: /* CIL Label */ 
  {
#line 1511
  tmp___24 = nfs_get_option_str((substring_t *)(& args), & mnt->client_address);
  }
#line 1511
  if (tmp___24 != 0) {
#line 1512
    goto out_nomem;
  } else {

  }
#line 1513
  goto ldv_56467;
  case_44: /* CIL Label */ 
  {
#line 1515
  tmp___25 = nfs_get_option_str((substring_t *)(& args), & mnt->mount_server.hostname);
  }
#line 1515
  if (tmp___25 != 0) {
#line 1517
    goto out_nomem;
  } else {

  }
#line 1518
  goto ldv_56467;
  case_46: /* CIL Label */ 
  {
#line 1520
  string = match_strdup((substring_t const   *)(& args));
  }
#line 1521
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1522
    goto out_nomem;
  } else {

  }
  {
#line 1523
  tmp___26 = strlen((char const   *)string);
#line 1523
  mnt->mount_server.addrlen = rpc_pton(mnt->net, (char const   *)string, tmp___26,
                                       (struct sockaddr *)(& mnt->mount_server.address),
                                       128UL);
#line 1528
  kfree((void const   *)string);
  }
#line 1529
  if (mnt->mount_server.addrlen == 0UL) {
#line 1530
    goto out_invalid_address;
  } else {

  }
#line 1531
  goto ldv_56467;
  case_48: /* CIL Label */ 
  {
#line 1533
  string = match_strdup((substring_t const   *)(& args));
  }
#line 1534
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1535
    goto out_nomem;
  } else {

  }
  {
#line 1536
  token = match_token(string, (struct match_token  const  *)(& nfs_lookupcache_tokens),
                      (substring_t *)(& args));
#line 1538
  kfree((void const   *)string);
  }
  {
#line 1540
  if (token == 0) {
#line 1540
    goto case_0___2;
  } else {

  }
#line 1543
  if (token == 1) {
#line 1543
    goto case_1___2;
  } else {

  }
#line 1547
  if (token == 2) {
#line 1547
    goto case_2___2;
  } else {

  }
#line 1550
  goto switch_default___1;
  case_0___2: /* CIL Label */ 
#line 1541
  mnt->flags = mnt->flags & -196609;
#line 1542
  goto ldv_56533;
  case_1___2: /* CIL Label */ 
#line 1544
  mnt->flags = mnt->flags & -131073;
#line 1545
  mnt->flags = mnt->flags | 65536;
#line 1546
  goto ldv_56533;
  case_2___2: /* CIL Label */ 
#line 1548
  mnt->flags = mnt->flags | 196608;
#line 1549
  goto ldv_56533;
  switch_default___1: /* CIL Label */ 
  {
#line 1551
  tmp___27 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1551
  if (tmp___27 != 0L) {
    {
#line 1551
    printk("\001dNFS:   invalid lookupcache argument\n");
    }
  } else {

  }
#line 1553
  return (0);
  switch_break___2: /* CIL Label */ ;
  }
  ldv_56533: ;
#line 1555
  goto ldv_56467;
  case_49: /* CIL Label */ 
  {
#line 1557
  tmp___28 = nfs_get_option_str((substring_t *)(& args), & mnt->fscache_uniq);
  }
#line 1557
  if (tmp___28 != 0) {
#line 1558
    goto out_nomem;
  } else {

  }
#line 1559
  mnt->options = mnt->options | 1U;
#line 1560
  goto ldv_56467;
  case_50: /* CIL Label */ 
  {
#line 1562
  string = match_strdup((substring_t const   *)(& args));
  }
#line 1563
  if ((unsigned long )string == (unsigned long )((char *)0)) {
#line 1564
    goto out_nomem;
  } else {

  }
  {
#line 1565
  token = match_token(string, (struct match_token  const  *)(& nfs_local_lock_tokens),
                      (substring_t *)(& args));
#line 1567
  kfree((void const   *)string);
  }
  {
#line 1569
  if (token == 0) {
#line 1569
    goto case_0___3;
  } else {

  }
#line 1573
  if (token == 1) {
#line 1573
    goto case_1___3;
  } else {

  }
#line 1576
  if (token == 2) {
#line 1576
    goto case_2___3;
  } else {

  }
#line 1579
  if (token == 3) {
#line 1579
    goto case_3___2;
  } else {

  }
#line 1583
  goto switch_default___2;
  case_0___3: /* CIL Label */ 
#line 1570
  mnt->flags = mnt->flags | 3145728;
#line 1572
  goto ldv_56540;
  case_1___3: /* CIL Label */ 
#line 1574
  mnt->flags = mnt->flags | 1048576;
#line 1575
  goto ldv_56540;
  case_2___3: /* CIL Label */ 
#line 1577
  mnt->flags = mnt->flags | 2097152;
#line 1578
  goto ldv_56540;
  case_3___2: /* CIL Label */ 
#line 1580
  mnt->flags = mnt->flags & -3145729;
#line 1582
  goto ldv_56540;
  switch_default___2: /* CIL Label */ 
  {
#line 1584
  tmp___29 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1584
  if (tmp___29 != 0L) {
    {
#line 1584
    printk("\001dNFS:\tinvalid\tlocal_lock argument\n");
    }
  } else {

  }
#line 1586
  return (0);
  switch_break___3: /* CIL Label */ ;
  }
  ldv_56540: ;
#line 1588
  goto ldv_56467;
  case_53: /* CIL Label */ 
  {
#line 1594
  sloppy = 1;
#line 1595
  tmp___30 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1595
  if (tmp___30 != 0L) {
    {
#line 1595
    printk("\001dNFS:   relaxing parsing rules\n");
    }
  } else {

  }
#line 1596
  goto ldv_56467;
  case_51: /* CIL Label */ ;
  case_52: /* CIL Label */ 
  {
#line 1599
  tmp___31 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1599
  if (tmp___31 != 0L) {
    {
#line 1599
    printk("\001dNFS:   ignoring mount option \'%s\'\n", p);
    }
  } else {

  }
#line 1601
  goto ldv_56467;
  switch_default___3: /* CIL Label */ 
  {
#line 1604
  invalid_option = 1;
#line 1605
  tmp___32 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1605
  if (tmp___32 != 0L) {
    {
#line 1605
    printk("\001dNFS:   unrecognized mount option \'%s\'\n", p);
    }
  } else {

  }
  switch_break: /* CIL Label */ ;
  }
  ldv_56467: ;
  ldv_56465: 
  {
#line 1221
  p = strsep(& raw, ",");
  }
#line 1221
  if ((unsigned long )p != (unsigned long )((char *)0)) {
#line 1223
    goto ldv_56549;
  } else {

  }

#line 1610
  if (sloppy == 0 && invalid_option != 0) {
#line 1611
    return (0);
  } else {

  }
#line 1613
  if (mnt->minorversion != 0U && mnt->version != 4U) {
#line 1614
    goto out_minorversion_mismatch;
  } else {

  }
#line 1616
  if ((mnt->options & 2U) != 0U && *((unsigned long *)mnt + 14UL) != 4UL) {
#line 1618
    goto out_migration_misuse;
  } else {

  }
#line 1624
  if ((unsigned int )protofamily != 0U && (int )protofamily != (int )mnt->nfs_server.address.ss_family) {
#line 1626
    goto out_proto_mismatch;
  } else {

  }
#line 1628
  if ((unsigned int )mountfamily != 0U) {
#line 1629
    if (mnt->mount_server.addrlen != 0UL) {
#line 1630
      if ((int )mountfamily != (int )mnt->mount_server.address.ss_family) {
#line 1631
        goto out_mountproto_mismatch;
      } else {

      }
    } else
#line 1633
    if ((int )mountfamily != (int )mnt->nfs_server.address.ss_family) {
#line 1634
      goto out_mountproto_mismatch;
    } else {

    }
  } else {

  }
#line 1638
  return (1);
  out_mountproto_mismatch: 
  {
#line 1641
  printk("\016NFS: mount server address does not match mountproto= option\n");
  }
#line 1643
  return (0);
  out_proto_mismatch: 
  {
#line 1645
  printk("\016NFS: server address does not match proto= option\n");
  }
#line 1646
  return (0);
  out_invalid_address: 
  {
#line 1648
  printk("\016NFS: bad IP address specified: %s\n", p);
  }
#line 1649
  return (0);
  out_invalid_value: 
  {
#line 1651
  printk("\016NFS: bad mount option value specified: %s\n", p);
  }
#line 1652
  return (0);
  out_minorversion_mismatch: 
  {
#line 1654
  printk("\016NFS: mount option vers=%u does not support minorversion=%u\n", mnt->version,
         mnt->minorversion);
  }
#line 1656
  return (0);
  out_migration_misuse: 
  {
#line 1658
  printk("\016NFS: \'migration\' not supported for this NFS version\n");
  }
#line 1660
  return (0);
  out_nomem: 
  {
#line 1662
  printk("\016NFS: not enough memory to parse option\n");
  }
#line 1663
  return (0);
  out_security_failure: 
  {
#line 1665
  free_secdata((void *)secdata);
#line 1666
  printk("\016NFS: security options invalid: %d\n", rc);
  }
#line 1667
  return (0);
}
}
#line 1675 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_verify_authflavors(struct nfs_parsed_mount_data *args , rpc_authflavor_t *server_authlist ,
                                  unsigned int count ) 
{ 
  rpc_authflavor_t flavor ;
  unsigned int i ;
  bool tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 1678
  flavor = 8U;
#line 1689
  i = 0U;
#line 1689
  goto ldv_56564;
  ldv_56563: 
  {
#line 1690
  flavor = *(server_authlist + (unsigned long )i);
#line 1692
  tmp = nfs_auth_info_match((struct nfs_auth_info  const  *)(& args->auth_info), flavor);
  }
#line 1692
  if ((int )tmp || flavor == 0U) {
#line 1694
    goto out;
  } else {

  }
#line 1689
  i = i + 1U;
  ldv_56564: ;
#line 1689
  if (i < count) {
#line 1691
    goto ldv_56563;
  } else {

  }
  {
#line 1697
  tmp___0 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1697
  if (tmp___0 != 0L) {
    {
#line 1697
    printk("\001dNFS: specified auth flavors not supported by server\n");
    }
  } else {

  }
#line 1699
  return (-13);
  out: 
  {
#line 1702
  args->selected_flavor = flavor;
#line 1703
  tmp___1 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1703
  if (tmp___1 != 0L) {
    {
#line 1703
    printk("\001dNFS: using auth flavor %u\n", args->selected_flavor);
    }
  } else {

  }
#line 1704
  return (0);
}
}
#line 1711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_request_mount(struct nfs_parsed_mount_data *args , struct nfs_fh *root_fh ,
                             rpc_authflavor_t *server_authlist , unsigned int *server_authlist_len ) 
{ 
  struct nfs_mount_request request ;
  int status ;
  long tmp ;

  {
#line 1716
  request.sap = (struct sockaddr *)(& args->mount_server.address);
#line 1716
  request.salen = 0UL;
#line 1716
  request.hostname = 0;
#line 1716
  request.dirpath = args->nfs_server.export_path;
#line 1716
  request.version = 0U;
#line 1716
  request.protocol = args->mount_server.protocol;
#line 1716
  request.fh = root_fh;
#line 1716
  request.noresvport = args->flags & 262144;
#line 1716
  request.auth_flav_len = server_authlist_len;
#line 1716
  request.auth_flavs = server_authlist;
#line 1716
  request.net = args->net;
#line 1729
  if (args->mount_server.version == 0U) {
    {
#line 1734
    if (args->version == 2U) {
#line 1734
      goto case_2;
    } else {

    }
#line 1731
    goto switch_default;
    switch_default: /* CIL Label */ 
#line 1732
    args->mount_server.version = 3U;
#line 1733
    goto ldv_56575;
    case_2: /* CIL Label */ 
#line 1735
    args->mount_server.version = 1U;
    switch_break: /* CIL Label */ ;
    }
    ldv_56575: ;
  } else {

  }
#line 1738
  request.version = args->mount_server.version;
#line 1740
  if ((unsigned long )args->mount_server.hostname != (unsigned long )((char *)0)) {
#line 1741
    request.hostname = args->mount_server.hostname;
  } else {
#line 1743
    request.hostname = args->nfs_server.hostname;
  }
#line 1748
  if ((unsigned int )args->mount_server.address.ss_family == 0U) {
    {
#line 1749
    memcpy((void *)request.sap, (void const   *)(& args->nfs_server.address), args->nfs_server.addrlen);
#line 1751
    args->mount_server.addrlen = args->nfs_server.addrlen;
    }
  } else {

  }
  {
#line 1753
  request.salen = args->mount_server.addrlen;
#line 1754
  nfs_set_port(request.sap, & args->mount_server.port, 0);
#line 1760
  status = nfs_mount(& request);
  }
#line 1761
  if (status != 0) {
    {
#line 1762
    tmp = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
    }
#line 1762
    if (tmp != 0L) {
      {
#line 1762
      printk("\001dNFS: unable to mount server %s, error %d\n", request.hostname,
             status);
      }
    } else {

    }
#line 1764
    return (status);
  } else {

  }
#line 1767
  return (0);
}
}
#line 1770 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct nfs_server *nfs_try_mount_request(struct nfs_mount_info *mount_info ,
                                                struct nfs_subversion *nfs_mod ) 
{ 
  int status ;
  unsigned int i ;
  bool tried_auth_unix ;
  bool auth_null_in_list ;
  struct nfs_server *server ;
  void *tmp ;
  struct nfs_parsed_mount_data *args ;
  rpc_authflavor_t authlist[12U] ;
  unsigned int authlist_len ;
  void *tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;
  struct nfs_server *tmp___3 ;
  rpc_authflavor_t flavor ;
  struct rpcsec_gss_info info ;
  int tmp___4 ;
  long tmp___5 ;
  bool tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct nfs_server *tmp___9 ;

  {
  {
#line 1775
  tried_auth_unix = 0;
#line 1776
  auth_null_in_list = 0;
#line 1777
  tmp = ERR_PTR(-13L);
#line 1777
  server = (struct nfs_server *)tmp;
#line 1778
  args = mount_info->parsed;
#line 1780
  authlist_len = 12U;
#line 1782
  status = nfs_request_mount(args, mount_info->mntfh, (rpc_authflavor_t *)(& authlist),
                             & authlist_len);
  }
#line 1784
  if (status != 0) {
    {
#line 1785
    tmp___0 = ERR_PTR((long )status);
    }
#line 1785
    return ((struct nfs_server *)tmp___0);
  } else {

  }
#line 1791
  if (args->auth_info.flavor_len != 0U) {
    {
#line 1792
    status = nfs_verify_authflavors(args, (rpc_authflavor_t *)(& authlist), authlist_len);
#line 1793
    tmp___1 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
    }
#line 1793
    if (tmp___1 != 0L) {
      {
#line 1793
      printk("\001dNFS: using auth flavor %u\n", args->selected_flavor);
      }
    } else {

    }
#line 1795
    if (status != 0) {
      {
#line 1796
      tmp___2 = ERR_PTR((long )status);
      }
#line 1796
      return ((struct nfs_server *)tmp___2);
    } else {

    }
    {
#line 1797
    tmp___3 = (*((nfs_mod->rpc_ops)->create_server))(mount_info, nfs_mod);
    }
#line 1797
    return (tmp___3);
  } else {

  }
#line 1805
  i = 0U;
#line 1805
  goto ldv_56599;
  ldv_56598: 
#line 1809
  flavor = authlist[i];
  {
#line 1811
  if (flavor == 1U) {
#line 1811
    goto case_1;
  } else {

  }
#line 1814
  if (flavor == 0U) {
#line 1814
    goto case_0;
  } else {

  }
#line 1817
  goto switch_default;
  case_1: /* CIL Label */ 
#line 1812
  tried_auth_unix = 1;
#line 1813
  goto ldv_56594;
  case_0: /* CIL Label */ 
#line 1815
  auth_null_in_list = 1;
#line 1816
  goto ldv_56596;
  switch_default: /* CIL Label */ 
  {
#line 1818
  tmp___4 = rpcauth_get_gssinfo(flavor, & info);
  }
#line 1818
  if (tmp___4 != 0) {
#line 1819
    goto ldv_56596;
  } else {

  }
  switch_break: /* CIL Label */ ;
  }
  ldv_56594: 
  {
#line 1822
  tmp___5 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1822
  if (tmp___5 != 0L) {
    {
#line 1822
    printk("\001dNFS: attempting to use auth flavor %u\n", flavor);
    }
  } else {

  }
  {
#line 1823
  args->selected_flavor = flavor;
#line 1824
  server = (*((nfs_mod->rpc_ops)->create_server))(mount_info, nfs_mod);
#line 1825
  tmp___6 = IS_ERR((void const   *)server);
  }
#line 1825
  if (tmp___6) {
#line 1825
    tmp___7 = 0;
  } else {
#line 1825
    tmp___7 = 1;
  }
#line 1825
  if (tmp___7) {
#line 1826
    return (server);
  } else {

  }
  ldv_56596: 
#line 1805
  i = i + 1U;
  ldv_56599: ;
#line 1805
  if (i < authlist_len) {
#line 1807
    goto ldv_56598;
  } else {

  }

#line 1834
  if ((int )tried_auth_unix || ! auth_null_in_list) {
#line 1835
    return (server);
  } else {

  }
  {
#line 1838
  tmp___8 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1838
  if (tmp___8 != 0L) {
    {
#line 1838
    printk("\001dNFS: attempting to use auth flavor %u\n", 1);
    }
  } else {

  }
  {
#line 1839
  args->selected_flavor = 1U;
#line 1840
  tmp___9 = (*((nfs_mod->rpc_ops)->create_server))(mount_info, nfs_mod);
  }
#line 1840
  return (tmp___9);
}
}
#line 1843 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct dentry *nfs_try_mount(int flags , char const   *dev_name___0 , struct nfs_mount_info *mount_info ,
                             struct nfs_subversion *nfs_mod ) 
{ 
  struct nfs_server *server ;
  void *tmp ;
  bool tmp___0 ;
  struct dentry *tmp___1 ;

  {
#line 1849
  if ((int )(mount_info->parsed)->need_mount) {
    {
#line 1850
    server = nfs_try_mount_request(mount_info, nfs_mod);
    }
  } else {
    {
#line 1852
    server = (*((nfs_mod->rpc_ops)->create_server))(mount_info, nfs_mod);
    }
  }
  {
#line 1854
  tmp___0 = IS_ERR((void const   *)server);
  }
#line 1854
  if ((int )tmp___0) {
    {
#line 1855
    tmp = ERR_CAST((void const   *)server);
    }
#line 1855
    return ((struct dentry *)tmp);
  } else {

  }
  {
#line 1857
  tmp___1 = nfs_fs_mount_common(server, flags, dev_name___0, mount_info, nfs_mod);
  }
#line 1857
  return (tmp___1);
}
}
#line 1859 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_try_mount[14U]  = 
#line 1859
  {      'n',      'f',      's',      '_', 
        't',      'r',      'y',      '_', 
        'm',      'o',      'u',      'n', 
        't',      '\000'};
#line 1859
struct kernel_symbol  const  __ksymtab_nfs_try_mount ;
#line 1859 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_try_mount  =    {(unsigned long )(& nfs_try_mount), (char const   *)(& __kstrtab_nfs_try_mount)};
#line 1870 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_parse_devname(char const   *dev_name___0 , char **hostname , size_t maxnamlen ,
                             char **export_path , size_t maxpathlen ) 
{ 
  size_t len ;
  char *end ;
  char *comma ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 1878
  if ((int )((signed char )*dev_name___0) == 91) {
    {
#line 1879
    dev_name___0 = dev_name___0 + 1;
#line 1879
    end = strchr(dev_name___0, 93);
    }
#line 1880
    if ((unsigned long )end == (unsigned long )((char *)0) || (int )((signed char )*(end + 1UL)) != 58) {
#line 1881
      goto out_bad_devname;
    } else {

    }
#line 1883
    len = (size_t )((long )end - (long )dev_name___0);
#line 1884
    end = end + 1;
  } else {
    {
#line 1888
    end = strchr(dev_name___0, 58);
    }
#line 1889
    if ((unsigned long )end == (unsigned long )((char *)0)) {
#line 1890
      goto out_bad_devname;
    } else {

    }
    {
#line 1891
    len = (size_t )((long )end - (long )dev_name___0);
#line 1894
    comma = strchr(dev_name___0, 44);
    }
#line 1895
    if ((unsigned long )comma != (unsigned long )((char *)0) && (unsigned long )comma < (unsigned long )end) {
#line 1896
      *comma = 0;
    } else {

    }
  }
#line 1899
  if (len > maxnamlen) {
#line 1900
    goto out_hostname;
  } else {

  }
  {
#line 1903
  *hostname = kstrndup(dev_name___0, len, 208U);
  }
#line 1904
  if ((unsigned long )*hostname == (unsigned long )((char *)0)) {
#line 1905
    goto out_nomem;
  } else {

  }
  {
#line 1906
  end = end + 1;
#line 1906
  len = strlen((char const   *)end);
  }
#line 1907
  if (len > maxpathlen) {
#line 1908
    goto out_path;
  } else {

  }
  {
#line 1909
  *export_path = kstrndup((char const   *)end, len, 208U);
  }
#line 1910
  if ((unsigned long )*export_path == (unsigned long )((char *)0)) {
#line 1911
    goto out_nomem;
  } else {

  }
  {
#line 1913
  tmp = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1913
  if (tmp != 0L) {
    {
#line 1913
    printk("\001dNFS: MNTPATH: \'%s\'\n", *export_path);
    }
  } else {

  }
#line 1914
  return (0);
  out_bad_devname: 
  {
#line 1917
  tmp___0 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1917
  if (tmp___0 != 0L) {
    {
#line 1917
    printk("\001dNFS: device name not in host:path format\n");
    }
  } else {

  }
#line 1918
  return (-22);
  out_nomem: 
  {
#line 1921
  tmp___1 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1921
  if (tmp___1 != 0L) {
    {
#line 1921
    printk("\001dNFS: not enough memory to parse device name\n");
    }
  } else {

  }
#line 1922
  return (-12);
  out_hostname: 
  {
#line 1925
  tmp___2 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1925
  if (tmp___2 != 0L) {
    {
#line 1925
    printk("\001dNFS: server hostname too long\n");
    }
  } else {

  }
#line 1926
  return (-36);
  out_path: 
  {
#line 1929
  tmp___3 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 1929
  if (tmp___3 != 0L) {
    {
#line 1929
    printk("\001dNFS: export pathname too long\n");
    }
  } else {

  }
#line 1930
  return (-36);
}
}
#line 1949 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs23_validate_mount_data(void *options , struct nfs_parsed_mount_data *args ,
                                     struct nfs_fh *mntfh , char const   *dev_name___0 ) 
{ 
  struct nfs_mount_data *data ;
  struct sockaddr *sap ;
  int extra_flags ;
  __u16 tmp ;
  int tmp___0 ;
  int rc ;
  char *opts_str ;
  void *tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;

  {
#line 1954
  data = (struct nfs_mount_data *)options;
#line 1955
  sap = (struct sockaddr *)(& args->nfs_server.address);
#line 1956
  extra_flags = 524288;
#line 1958
  if ((unsigned long )data == (unsigned long )((struct nfs_mount_data *)0)) {
#line 1959
    goto out_no_data;
  } else {

  }
#line 1961
  args->version = 3U;
  {
#line 1963
  if (data->version == 1) {
#line 1963
    goto case_1;
  } else {

  }
#line 1965
  if (data->version == 2) {
#line 1965
    goto case_2;
  } else {

  }
#line 1967
  if (data->version == 3) {
#line 1967
    goto case_3;
  } else {

  }
#line 1974
  if (data->version == 4) {
#line 1974
    goto case_4;
  } else {

  }
#line 1977
  if (data->version == 5) {
#line 1977
    goto case_5;
  } else {

  }
#line 1979
  if (data->version == 6) {
#line 1979
    goto case_6;
  } else {

  }
#line 2065
  goto switch_default;
  case_1: /* CIL Label */ 
#line 1964
  data->namlen = 0;
  case_2: /* CIL Label */ 
#line 1966
  data->bsize = 0U;
  case_3: /* CIL Label */ ;
#line 1968
  if ((data->flags & 128) != 0) {
#line 1969
    goto out_no_v3;
  } else {

  }
  {
#line 1970
  data->root.size = 32U;
#line 1971
  memcpy((void *)(& data->root.data), (void const   *)(& data->old_root.data), 32UL);
#line 1973
  extra_flags = extra_flags | 8192;
  }
  case_4: /* CIL Label */ ;
#line 1975
  if ((data->flags & 8192) != 0) {
#line 1976
    goto out_no_sec;
  } else {

  }
  case_5: /* CIL Label */ 
  {
#line 1978
  memset((void *)(& data->context), 0, 257UL);
  }
  case_6: /* CIL Label */ ;
#line 1980
  if ((data->flags & 128) != 0) {
#line 1981
    if ((unsigned int )data->root.size - 1U > 63U) {
#line 1982
      goto out_invalid_fh;
    } else {

    }
#line 1983
    mntfh->size = data->root.size;
#line 1984
    args->version = 3U;
  } else {
#line 1986
    mntfh->size = 32U;
#line 1987
    args->version = 2U;
  }
  {
#line 1991
  memcpy((void *)(& mntfh->data), (void const   *)(& data->root.data), (size_t )mntfh->size);
  }
#line 1992
  if ((unsigned int )mntfh->size <= 127U) {
    {
#line 1993
    memset((void *)((unsigned char *)(& mntfh->data) + (unsigned long )mntfh->size),
           0, 128UL - (unsigned long )mntfh->size);
    }
  } else {

  }
  {
#line 2000
  args->flags = data->flags & 65535;
#line 2001
  args->flags = args->flags | extra_flags;
#line 2002
  args->rsize = (unsigned int )data->rsize;
#line 2003
  args->wsize = (unsigned int )data->wsize;
#line 2004
  args->timeo = (unsigned int )data->timeo;
#line 2005
  args->retrans = (unsigned int )data->retrans;
#line 2006
  args->acregmin = (unsigned int )data->acregmin;
#line 2007
  args->acregmax = (unsigned int )data->acregmax;
#line 2008
  args->acdirmin = (unsigned int )data->acdirmin;
#line 2009
  args->acdirmax = (unsigned int )data->acdirmax;
#line 2010
  args->need_mount = 0;
#line 2012
  memcpy((void *)sap, (void const   *)(& data->addr), 16UL);
#line 2013
  args->nfs_server.addrlen = 16UL;
#line 2014
  tmp = __fswab16((int )data->addr.sin_port);
#line 2014
  args->nfs_server.port = (int )tmp;
#line 2015
  tmp___0 = nfs_verify_server_address(sap);
  }
#line 2015
  if (tmp___0 == 0) {
#line 2016
    goto out_no_address;
  } else {

  }
#line 2018
  if ((data->flags & 64) == 0) {
#line 2019
    args->nfs_server.protocol = 17U;
  } else {

  }
  {
#line 2021
  args->nfs_server.hostname = kstrdup((char const   *)(& data->hostname), 208U);
#line 2022
  args->namlen = (unsigned int )data->namlen;
#line 2023
  args->bsize = data->bsize;
  }
#line 2025
  if ((data->flags & 8192) != 0) {
#line 2026
    args->selected_flavor = (rpc_authflavor_t )data->pseudoflavor;
  } else {
#line 2028
    args->selected_flavor = 1U;
  }
#line 2029
  if ((unsigned long )args->nfs_server.hostname == (unsigned long )((char *)0)) {
#line 2030
    goto out_nomem;
  } else {

  }
#line 2032
  if ((data->flags & 512) == 0) {
#line 2033
    args->flags = args->flags & -3145729;
  } else {
#line 2036
    args->flags = args->flags | 3145728;
  }
#line 2046
  if ((int )((signed char )data->context[0]) != 0) {
    {
#line 2049
    tmp___1 = kmalloc(265UL, 208U);
#line 2049
    opts_str = (char *)tmp___1;
    }
#line 2050
    if ((unsigned long )opts_str == (unsigned long )((char *)0)) {
#line 2051
      return (-12);
    } else {

    }
    {
#line 2052
    strcpy(opts_str, "context=");
#line 2053
    data->context[256] = 0;
#line 2054
    strcat(opts_str, (char const   *)(& data->context));
#line 2055
    rc = security_sb_parse_opts_str(opts_str, & args->lsm_opts);
#line 2056
    kfree((void const   *)opts_str);
    }
#line 2057
    if (rc != 0) {
#line 2058
      return (rc);
    } else {

    }
  } else {

  }
#line 2064
  goto ldv_56655;
  switch_default: /* CIL Label */ ;
#line 2066
  return (1);
  switch_break: /* CIL Label */ ;
  }
  ldv_56655: ;
#line 2074
  return (0);
  out_no_data: 
  {
#line 2077
  tmp___2 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2077
  if (tmp___2 != 0L) {
    {
#line 2077
    printk("\001dNFS: mount program didn\'t pass any mount data\n");
    }
  } else {

  }
#line 2078
  return (-22);
  out_no_v3: 
  {
#line 2081
  tmp___3 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2081
  if (tmp___3 != 0L) {
    {
#line 2081
    printk("\001dNFS: nfs_mount_data version %d does not support v3\n", data->version);
    }
  } else {

  }
#line 2083
  return (-22);
  out_no_sec: 
  {
#line 2086
  tmp___4 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2086
  if (tmp___4 != 0L) {
    {
#line 2086
    printk("\001dNFS: nfs_mount_data version supports only AUTH_SYS\n");
    }
  } else {

  }
#line 2087
  return (-22);
  out_nomem: 
  {
#line 2096
  tmp___5 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2096
  if (tmp___5 != 0L) {
    {
#line 2096
    printk("\001dNFS: not enough memory to handle mount options\n");
    }
  } else {

  }
#line 2097
  return (-12);
  out_no_address: 
  {
#line 2100
  tmp___6 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2100
  if (tmp___6 != 0L) {
    {
#line 2100
    printk("\001dNFS: mount program didn\'t pass remote address\n");
    }
  } else {

  }
#line 2101
  return (-22);
  out_invalid_fh: 
  {
#line 2104
  tmp___7 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2104
  if (tmp___7 != 0L) {
    {
#line 2104
    printk("\001dNFS: invalid root filehandle\n");
    }
  } else {

  }
#line 2105
  return (-22);
}
}
#line 2109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_validate_mount_data(struct file_system_type *fs_type , void *options ,
                                   struct nfs_parsed_mount_data *args , struct nfs_fh *mntfh ,
                                   char const   *dev_name___0 ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2115
  if ((unsigned long )fs_type == (unsigned long )(& nfs_fs_type)) {
    {
#line 2116
    tmp = nfs23_validate_mount_data(options, args, mntfh, dev_name___0);
    }
#line 2116
    return (tmp);
  } else {

  }
  {
#line 2117
  tmp___0 = nfs4_validate_mount_data(options, args, dev_name___0);
  }
#line 2117
  return (tmp___0);
}
}
#line 2130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_validate_text_mount_data(void *options , struct nfs_parsed_mount_data *args ,
                                        char const   *dev_name___0 ) 
{ 
  int port ;
  int max_namelen ;
  int max_pathlen ;
  struct sockaddr *sap ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
  {
#line 2134
  port = 0;
#line 2135
  max_namelen = 4096;
#line 2136
  max_pathlen = 1024;
#line 2137
  sap = (struct sockaddr *)(& args->nfs_server.address);
#line 2139
  tmp = nfs_parse_mount_options((char *)options, args);
  }
#line 2139
  if (tmp == 0) {
#line 2140
    return (-22);
  } else {

  }
  {
#line 2142
  tmp___0 = nfs_verify_server_address(sap);
  }
#line 2142
  if (tmp___0 == 0) {
#line 2143
    goto out_no_address;
  } else {

  }
#line 2145
  if (args->version == 4U) {
    {
#line 2147
    port = 2049;
#line 2148
    max_namelen = 255;
#line 2149
    max_pathlen = 4096;
#line 2150
    nfs_validate_transport_protocol(args);
    }
#line 2151
    if ((unsigned int )args->nfs_server.protocol == 17U) {
#line 2152
      goto out_invalid_transport_udp;
    } else {

    }
    {
#line 2153
    nfs4_validate_mount_flags(args);
    }
  } else {
    {
#line 2158
    nfs_set_mount_transport_protocol(args);
    }
  }
  {
#line 2160
  nfs_set_port(sap, & args->nfs_server.port, (int )((unsigned short const   )port));
#line 2162
  tmp___1 = nfs_parse_devname(dev_name___0, & args->nfs_server.hostname, (size_t )max_namelen,
                              & args->nfs_server.export_path, (size_t )max_pathlen);
  }
#line 2162
  return (tmp___1);
  out_invalid_transport_udp: 
  {
#line 2174
  tmp___2 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2174
  if (tmp___2 != 0L) {
    {
#line 2174
    printk("\001dNFSv4: Unsupported transport protocol udp\n");
    }
  } else {

  }
#line 2175
  return (-22);
  out_no_address: 
  {
#line 2179
  tmp___3 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2179
  if (tmp___3 != 0L) {
    {
#line 2179
    printk("\001dNFS: mount program didn\'t pass remote address\n");
    }
  } else {

  }
#line 2180
  return (-22);
}
}
#line 2197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_compare_remount_data(struct nfs_server *nfss , struct nfs_parsed_mount_data *data ) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
#line 2200
  if (((((((((((((((data->flags ^ nfss->flags) & -530375) != 0 || data->rsize != nfss->rsize) || data->wsize != nfss->wsize) || data->version != (unsigned int )((nfss->nfs_client)->rpc_ops)->version) || data->minorversion != (nfss->nfs_client)->cl_minorversion) || data->retrans != (unsigned int )((nfss->client)->cl_timeout)->to_retries) || data->selected_flavor != ((nfss->client)->cl_auth)->au_flavor) || data->acregmin != nfss->acregmin / 250U) || data->acregmax != nfss->acregmax / 250U) || data->acdirmin != nfss->acdirmin / 250U) || data->acdirmax != nfss->acdirmax / 250U) || (unsigned long )data->timeo != ((unsigned long )((nfss->client)->cl_timeout)->to_initval * 10UL) / 250UL) || data->nfs_server.port != (int )nfss->port) || data->nfs_server.addrlen != (nfss->nfs_client)->cl_addrlen) {
#line 2216
    return (-22);
  } else {
    {
#line 2200
    tmp = rpc_cmp_addr((struct sockaddr  const  *)(& data->nfs_server.address), (struct sockaddr  const  *)(& (nfss->nfs_client)->cl_addr));
    }
#line 2200
    if (tmp) {
#line 2200
      tmp___0 = 0;
    } else {
#line 2200
      tmp___0 = 1;
    }
#line 2200
    if (tmp___0) {
#line 2216
      return (-22);
    } else {

    }
  }
#line 2218
  return (0);
}
}
#line 2222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int nfs_remount(struct super_block *sb , int *flags , char *raw_data ) 
{ 
  int error ;
  struct nfs_server *nfss ;
  struct nfs_parsed_mount_data *data ;
  struct nfs_mount_data *options ;
  struct nfs4_mount_data *options4 ;
  u32 nfsvers ;
  void *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2225
  nfss = (struct nfs_server *)sb->s_fs_info;
#line 2227
  options = (struct nfs_mount_data *)raw_data;
#line 2228
  options4 = (struct nfs4_mount_data *)raw_data;
#line 2229
  nfsvers = ((nfss->nfs_client)->rpc_ops)->version;
#line 2231
  sync_filesystem(sb);
  }
#line 2239
  if ((nfsvers == 4U && ((unsigned long )options4 == (unsigned long )((struct nfs4_mount_data *)0) || options4->version == 1)) || (nfsvers <= 3U && ((unsigned long )options == (unsigned long )((struct nfs_mount_data *)0) || (unsigned int )options->version - 1U <= 5U))) {
#line 2242
    return (0);
  } else {

  }
  {
#line 2244
  tmp = kzalloc(488UL, 208U);
#line 2244
  data = (struct nfs_parsed_mount_data *)tmp;
  }
#line 2245
  if ((unsigned long )data == (unsigned long )((struct nfs_parsed_mount_data *)0)) {
#line 2246
    return (-12);
  } else {

  }
  {
#line 2249
  data->flags = nfss->flags;
#line 2250
  data->rsize = nfss->rsize;
#line 2251
  data->wsize = nfss->wsize;
#line 2252
  data->retrans = ((nfss->client)->cl_timeout)->to_retries;
#line 2253
  data->selected_flavor = ((nfss->client)->cl_auth)->au_flavor;
#line 2254
  data->auth_info = nfss->auth_info;
#line 2255
  data->acregmin = nfss->acregmin / 250U;
#line 2256
  data->acregmax = nfss->acregmax / 250U;
#line 2257
  data->acdirmin = nfss->acdirmin / 250U;
#line 2258
  data->acdirmax = nfss->acdirmax / 250U;
#line 2259
  data->timeo = (unsigned int )(((unsigned long )((nfss->client)->cl_timeout)->to_initval * 10UL) / 250UL);
#line 2260
  data->nfs_server.port = (int )nfss->port;
#line 2261
  data->nfs_server.addrlen = (nfss->nfs_client)->cl_addrlen;
#line 2262
  data->version = nfsvers;
#line 2263
  data->minorversion = (nfss->nfs_client)->cl_minorversion;
#line 2264
  tmp___0 = get_current();
#line 2264
  data->net = (tmp___0->nsproxy)->net_ns;
#line 2265
  memcpy((void *)(& data->nfs_server.address), (void const   *)(& (nfss->nfs_client)->cl_addr),
         data->nfs_server.addrlen);
#line 2269
  error = -22;
#line 2270
  tmp___1 = nfs_parse_mount_options((char *)options, data);
  }
#line 2270
  if (tmp___1 == 0) {
#line 2271
    goto out;
  } else {

  }
#line 2279
  if ((data->flags & 32) != 0) {
#line 2280
    *flags = *flags | 16;
  } else {

  }
  {
#line 2283
  error = nfs_compare_remount_data(nfss, data);
  }
  out: 
  {
#line 2285
  kfree((void const   *)data);
  }
#line 2286
  return (error);
}
}
#line 2288 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_remount[12U]  = 
#line 2288
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'm',      'o', 
        'u',      'n',      't',      '\000'};
#line 2288
struct kernel_symbol  const  __ksymtab_nfs_remount ;
#line 2288 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_remount  =    {(unsigned long )(& nfs_remount), (char const   *)(& __kstrtab_nfs_remount)};
#line 2293 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
__inline void nfs_initialise_sb(struct super_block *sb ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;

  {
  {
#line 2295
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 2295
  server = tmp;
#line 2297
  sb->s_magic = 26985UL;
#line 2300
  snprintf((char *)(& sb->s_id), 32UL, "%u:%u", sb->s_dev >> 20, sb->s_dev & 1048575U);
  }
#line 2303
  if (sb->s_blocksize == 0UL) {
    {
#line 2304
    sb->s_blocksize = nfs_block_bits___0((unsigned long )server->wsize, & sb->s_blocksize_bits);
    }
  } else {

  }
  {
#line 2307
  sb->s_bdi = & server->backing_dev_info;
#line 2309
  nfs_super_set_maxbytes(sb, server->maxfilesize);
  }
#line 2310
  return;
}
}
#line 2315 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
void nfs_fill_super(struct super_block *sb , struct nfs_mount_info *mount_info ) 
{ 
  struct nfs_parsed_mount_data *data ;
  struct nfs_server *server ;
  struct nfs_server *tmp ;

  {
  {
#line 2317
  data = mount_info->parsed;
#line 2318
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 2318
  server = tmp;
#line 2320
  sb->s_blocksize_bits = 0U;
#line 2321
  sb->s_blocksize = 0UL;
#line 2322
  sb->s_xattr = ((server->nfs_client)->cl_nfs_mod)->xattr;
#line 2323
  sb->s_op = ((server->nfs_client)->cl_nfs_mod)->sops;
  }
#line 2324
  if ((unsigned long )data != (unsigned long )((struct nfs_parsed_mount_data *)0) && data->bsize != 0U) {
    {
#line 2325
    sb->s_blocksize = nfs_block_size___0((unsigned long )data->bsize, & sb->s_blocksize_bits);
    }
  } else {

  }
#line 2327
  if ((unsigned int )((server->nfs_client)->rpc_ops)->version != 2U) {
#line 2331
    sb->s_flags = sb->s_flags | 65536UL;
#line 2332
    sb->s_time_gran = 1U;
  } else {

  }
  {
#line 2335
  nfs_initialise_sb(sb);
  }
#line 2336
  return;
}
}
#line 2337 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_fill_super[15U]  = 
#line 2337
  {      'n',      'f',      's',      '_', 
        'f',      'i',      'l',      'l', 
        '_',      's',      'u',      'p', 
        'e',      'r',      '\000'};
#line 2337
struct kernel_symbol  const  __ksymtab_nfs_fill_super ;
#line 2337 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_fill_super  =    {(unsigned long )(& nfs_fill_super), (char const   *)(& __kstrtab_nfs_fill_super)};
#line 2342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
void nfs_clone_super(struct super_block *sb , struct nfs_mount_info *mount_info ) 
{ 
  struct super_block  const  *old_sb ;
  struct nfs_server *server ;
  struct nfs_server *tmp ;

  {
  {
#line 2344
  old_sb = (mount_info->cloned)->sb;
#line 2345
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 2345
  server = tmp;
#line 2347
  sb->s_blocksize_bits = old_sb->s_blocksize_bits;
#line 2348
  sb->s_blocksize = old_sb->s_blocksize;
#line 2349
  sb->s_maxbytes = old_sb->s_maxbytes;
#line 2350
  sb->s_xattr = old_sb->s_xattr;
#line 2351
  sb->s_op = old_sb->s_op;
#line 2352
  sb->s_time_gran = 1U;
  }
#line 2354
  if ((unsigned int )((server->nfs_client)->rpc_ops)->version != 2U) {
#line 2358
    sb->s_flags = sb->s_flags | 65536UL;
  } else {

  }
  {
#line 2361
  nfs_initialise_sb(sb);
  }
#line 2362
  return;
}
}
#line 2364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_compare_mount_options(struct super_block  const  *s , struct nfs_server  const  *b ,
                                     int flags ) 
{ 
  struct nfs_server  const  *a ;
  struct rpc_clnt  const  *clnt_a ;
  struct rpc_clnt  const  *clnt_b ;

  {
#line 2366
  a = (struct nfs_server  const  *)s->s_fs_info;
#line 2367
  clnt_a = (struct rpc_clnt  const  *)a->client;
#line 2368
  clnt_b = (struct rpc_clnt  const  *)b->client;
#line 2370
  if ((((unsigned long )s->s_flags ^ (unsigned long )flags) & 31UL) != 0UL) {
#line 2371
    goto Ebusy;
  } else {

  }
#line 2372
  if ((unsigned long )a->nfs_client != (unsigned long )b->nfs_client) {
#line 2373
    goto Ebusy;
  } else {

  }
#line 2374
  if ((((int )a->flags ^ (int )b->flags) & -825287) != 0) {
#line 2375
    goto Ebusy;
  } else {

  }
#line 2376
  if ((unsigned int )a->wsize != (unsigned int )b->wsize) {
#line 2377
    goto Ebusy;
  } else {

  }
#line 2378
  if ((unsigned int )a->rsize != (unsigned int )b->rsize) {
#line 2379
    goto Ebusy;
  } else {

  }
#line 2380
  if ((unsigned int )a->acregmin != (unsigned int )b->acregmin) {
#line 2381
    goto Ebusy;
  } else {

  }
#line 2382
  if ((unsigned int )a->acregmax != (unsigned int )b->acregmax) {
#line 2383
    goto Ebusy;
  } else {

  }
#line 2384
  if ((unsigned int )a->acdirmin != (unsigned int )b->acdirmin) {
#line 2385
    goto Ebusy;
  } else {

  }
#line 2386
  if ((unsigned int )a->acdirmax != (unsigned int )b->acdirmax) {
#line 2387
    goto Ebusy;
  } else {

  }
#line 2388
  if ((unsigned int )b->auth_info.flavor_len != 0U && (clnt_a->cl_auth)->au_flavor != (clnt_b->cl_auth)->au_flavor) {
#line 2390
    goto Ebusy;
  } else {

  }
#line 2391
  return (1);
  Ebusy: ;
#line 2393
  return (0);
}
}
#line 2401 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_set_super(struct super_block *s , void *data ) 
{ 
  struct nfs_sb_mountdata *sb_mntdata ;
  struct nfs_server *server ;
  int ret ;

  {
  {
#line 2403
  sb_mntdata = (struct nfs_sb_mountdata *)data;
#line 2404
  server = sb_mntdata->server;
#line 2407
  s->s_flags = (unsigned long )sb_mntdata->mntflags;
#line 2408
  s->s_fs_info = (void *)server;
#line 2409
  s->s_d_op = ((server->nfs_client)->rpc_ops)->dentry_ops;
#line 2410
  ret = set_anon_super(s, (void *)server);
  }
#line 2411
  if (ret == 0) {
#line 2412
    server->s_dev = s->s_dev;
  } else {

  }
#line 2413
  return (ret);
}
}
#line 2416 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_compare_super_address(struct nfs_server *server1 , struct nfs_server *server2 ) 
{ 
  struct sockaddr *sap1 ;
  struct sockaddr *sap2 ;
  struct sockaddr_in *sin1 ;
  struct sockaddr_in *sin2 ;
  struct sockaddr_in6 *sin1___0 ;
  struct sockaddr_in6 *sin2___0 ;
  bool tmp ;
  int tmp___0 ;

  {
#line 2421
  sap1 = (struct sockaddr *)(& (server1->nfs_client)->cl_addr);
#line 2422
  sap2 = (struct sockaddr *)(& (server2->nfs_client)->cl_addr);
#line 2424
  if ((int )sap1->sa_family != (int )sap2->sa_family) {
#line 2425
    return (0);
  } else {

  }
  {
#line 2428
  if ((int )sap1->sa_family == 2) {
#line 2428
    goto case_2;
  } else {

  }
#line 2437
  if ((int )sap1->sa_family == 10) {
#line 2437
    goto case_10;
  } else {

  }
#line 2446
  goto switch_default;
  case_2: /* CIL Label */ 
#line 2429
  sin1 = (struct sockaddr_in *)sap1;
#line 2430
  sin2 = (struct sockaddr_in *)sap2;
#line 2431
  if (sin1->sin_addr.s_addr != sin2->sin_addr.s_addr) {
#line 2432
    return (0);
  } else {

  }
#line 2433
  if ((int )sin1->sin_port != (int )sin2->sin_port) {
#line 2434
    return (0);
  } else {

  }
#line 2435
  goto ldv_56752;
  case_10: /* CIL Label */ 
  {
#line 2438
  sin1___0 = (struct sockaddr_in6 *)sap1;
#line 2439
  sin2___0 = (struct sockaddr_in6 *)sap2;
#line 2440
  tmp = ipv6_addr_equal((struct in6_addr  const  *)(& sin1___0->sin6_addr), (struct in6_addr  const  *)(& sin2___0->sin6_addr));
  }
#line 2440
  if (tmp) {
#line 2440
    tmp___0 = 0;
  } else {
#line 2440
    tmp___0 = 1;
  }
#line 2440
  if (tmp___0) {
#line 2441
    return (0);
  } else {

  }
#line 2442
  if ((int )sin1___0->sin6_port != (int )sin2___0->sin6_port) {
#line 2443
    return (0);
  } else {

  }
#line 2444
  goto ldv_56752;
  switch_default: /* CIL Label */ ;
#line 2447
  return (0);
  switch_break: /* CIL Label */ ;
  }
  ldv_56752: ;
#line 2450
  return (1);
}
}
#line 2453 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_compare_super(struct super_block *sb , void *data ) 
{ 
  struct nfs_sb_mountdata *sb_mntdata ;
  struct nfs_server *server ;
  struct nfs_server *old ;
  struct nfs_server *tmp ;
  int mntflags ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2455
  sb_mntdata = (struct nfs_sb_mountdata *)data;
#line 2456
  server = sb_mntdata->server;
#line 2456
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 2456
  old = tmp;
#line 2457
  mntflags = sb_mntdata->mntflags;
#line 2459
  tmp___0 = nfs_compare_super_address(old, server);
  }
#line 2459
  if (tmp___0 == 0) {
#line 2460
    return (0);
  } else {

  }
#line 2462
  if ((old->flags & 32768) != 0) {
#line 2463
    return (0);
  } else {

  }
  {
#line 2464
  tmp___1 = memcmp((void const   *)(& old->fsid), (void const   *)(& server->fsid),
                   16UL);
  }
#line 2464
  if (tmp___1 != 0) {
#line 2465
    return (0);
  } else {

  }
  {
#line 2466
  tmp___2 = nfs_compare_mount_options((struct super_block  const  *)sb, (struct nfs_server  const  *)server,
                                      mntflags);
  }
#line 2466
  return (tmp___2);
}
}
#line 2470 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs_get_cache_cookie(struct super_block *sb , struct nfs_parsed_mount_data *parsed ,
                                 struct nfs_clone_mount *cloned ) 
{ 
  struct nfs_server *nfss ;
  struct nfs_server *tmp ;
  char *uniq ;
  int ulen ;
  size_t tmp___0 ;
  struct nfs_server *mnt_s ;
  struct nfs_server *tmp___1 ;

  {
  {
#line 2474
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 2474
  nfss = tmp;
#line 2475
  uniq = (char *)0;
#line 2476
  ulen = 0;
#line 2478
  nfss->fscache_key = (struct nfs_fscache_key *)0;
#line 2479
  nfss->fscache = (struct fscache_cookie *)0;
  }
#line 2481
  if ((unsigned long )parsed != (unsigned long )((struct nfs_parsed_mount_data *)0)) {
#line 2482
    if ((parsed->options & 1U) == 0U) {
#line 2483
      return;
    } else {

    }
#line 2484
    if ((unsigned long )parsed->fscache_uniq != (unsigned long )((char *)0)) {
      {
#line 2485
      uniq = parsed->fscache_uniq;
#line 2486
      tmp___0 = strlen((char const   *)parsed->fscache_uniq);
#line 2486
      ulen = (int )tmp___0;
      }
    } else {

    }
  } else
#line 2488
  if ((unsigned long )cloned != (unsigned long )((struct nfs_clone_mount *)0)) {
    {
#line 2489
    tmp___1 = NFS_SB(cloned->sb);
#line 2489
    mnt_s = tmp___1;
    }
#line 2490
    if ((mnt_s->options & 1U) == 0U) {
#line 2491
      return;
    } else {

    }
#line 2492
    if ((unsigned long )mnt_s->fscache_key != (unsigned long )((struct nfs_fscache_key *)0)) {
#line 2493
      uniq = (char *)(& (mnt_s->fscache_key)->key.uniquifier);
#line 2494
      ulen = (int )(mnt_s->fscache_key)->key.uniq_len;
    } else {

    }
  } else {
#line 2497
    return;
  }
  {
#line 2499
  nfs_fscache_get_super_cookie(sb, (char const   *)uniq, ulen);
  }
#line 2500
  return;
}
}
#line 2509 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs_bdi_register(struct nfs_server *server ) 
{ 
  int tmp ;

  {
  {
#line 2511
  tmp = bdi_register_dev(& server->backing_dev_info, server->s_dev);
  }
#line 2511
  return (tmp);
}
}
#line 2514 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int nfs_set_sb_security(struct super_block *s , struct dentry *mntroot , struct nfs_mount_info *mount_info ) 
{ 
  int error ;
  unsigned long kflags ;
  unsigned long kflags_out ;
  struct nfs_server *tmp ;
  struct nfs_server *tmp___0 ;
  struct nfs_server *tmp___1 ;

  {
  {
#line 2518
  kflags = 0UL;
#line 2518
  kflags_out = 0UL;
#line 2519
  tmp = NFS_SB((struct super_block  const  *)s);
  }
#line 2519
  if ((tmp->caps & 262144U) != 0U) {
#line 2520
    kflags = kflags | 1UL;
  } else {

  }
  {
#line 2522
  error = security_sb_set_mnt_opts(s, & (mount_info->parsed)->lsm_opts, kflags, & kflags_out);
  }
#line 2524
  if (error != 0) {
#line 2525
    goto err;
  } else {

  }
  {
#line 2527
  tmp___1 = NFS_SB((struct super_block  const  *)s);
  }
#line 2527
  if ((tmp___1->caps & 262144U) != 0U && (kflags_out & 1UL) == 0UL) {
    {
#line 2529
    tmp___0 = NFS_SB((struct super_block  const  *)s);
#line 2529
    tmp___0->caps = tmp___0->caps & 4294705151U;
    }
  } else {

  }
  err: ;
#line 2531
  return (error);
}
}
#line 2533 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_set_sb_security[20U]  = 
#line 2533
  {      'n',      'f',      's',      '_', 
        's',      'e',      't',      '_', 
        's',      'b',      '_',      's', 
        'e',      'c',      'u',      'r', 
        'i',      't',      'y',      '\000'};
#line 2533
struct kernel_symbol  const  __ksymtab_nfs_set_sb_security ;
#line 2533 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_set_sb_security  =    {(unsigned long )(& nfs_set_sb_security), (char const   *)(& __kstrtab_nfs_set_sb_security)};
#line 2535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
int nfs_clone_sb_security(struct super_block *s , struct dentry *mntroot , struct nfs_mount_info *mount_info ) 
{ 
  struct nfs_server *tmp ;
  int tmp___0 ;

  {
  {
#line 2539
  tmp = NFS_SB((struct super_block  const  *)s);
  }
#line 2539
  if ((unsigned long )(mntroot->d_inode)->i_op != (unsigned long )((struct inode_operations  const  *)((tmp->nfs_client)->rpc_ops)->dir_inode_ops)) {
#line 2540
    return (-116);
  } else {

  }
  {
#line 2541
  tmp___0 = security_sb_clone_mnt_opts((mount_info->cloned)->sb, s);
  }
#line 2541
  return (tmp___0);
}
}
#line 2543 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_clone_sb_security[22U]  = 
#line 2543
  {      'n',      'f',      's',      '_', 
        'c',      'l',      'o',      'n', 
        'e',      '_',      's',      'b', 
        '_',      's',      'e',      'c', 
        'u',      'r',      'i',      't', 
        'y',      '\000'};
#line 2543
struct kernel_symbol  const  __ksymtab_nfs_clone_sb_security ;
#line 2543 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_clone_sb_security  =    {(unsigned long )(& nfs_clone_sb_security), (char const   *)(& __kstrtab_nfs_clone_sb_security)};
#line 2545 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct dentry *nfs_fs_mount_common(struct nfs_server *server , int flags , char const   *dev_name___0 ,
                                   struct nfs_mount_info *mount_info , struct nfs_subversion *nfs_mod ) 
{ 
  struct super_block *s ;
  struct dentry *mntroot ;
  void *tmp ;
  int (*compare_super)(struct super_block * , void * ) ;
  struct nfs_sb_mountdata sb_mntdata ;
  int error ;
  void *tmp___0 ;
  bool tmp___1 ;
  void *tmp___2 ;
  bool tmp___3 ;
  void *tmp___4 ;

  {
  {
#line 2551
  tmp = ERR_PTR(-12L);
#line 2551
  mntroot = (struct dentry *)tmp;
#line 2552
  compare_super = & nfs_compare_super;
#line 2553
  sb_mntdata.server = server;
#line 2553
  sb_mntdata.mntflags = flags;
  }
#line 2559
  if ((server->flags & 32768) != 0) {
#line 2560
    compare_super = (int (*)(struct super_block * , void * ))0;
  } else {

  }
#line 2563
  if ((server->flags & 32) != 0) {
#line 2564
    sb_mntdata.mntflags = sb_mntdata.mntflags | 16;
  } else {

  }
#line 2566
  if ((unsigned long )mount_info->cloned != (unsigned long )((struct nfs_clone_mount *)0) && (unsigned long )(mount_info->cloned)->sb != (unsigned long )((struct super_block  const  *)0)) {
#line 2567
    if (((unsigned long )((mount_info->cloned)->sb)->s_flags & 16UL) != 0UL) {
#line 2568
      sb_mntdata.mntflags = sb_mntdata.mntflags | 16;
    } else {

    }
  } else {

  }
  {
#line 2571
  s = sget(nfs_mod->nfs_fs, compare_super, & nfs_set_super, flags, (void *)(& sb_mntdata));
#line 2572
  tmp___1 = IS_ERR((void const   *)s);
  }
#line 2572
  if ((int )tmp___1) {
    {
#line 2573
    tmp___0 = ERR_CAST((void const   *)s);
#line 2573
    mntroot = (struct dentry *)tmp___0;
    }
#line 2574
    goto out_err_nosb;
  } else {

  }
#line 2577
  if ((unsigned long )s->s_fs_info != (unsigned long )((void *)server)) {
    {
#line 2578
    nfs_free_server(server);
#line 2579
    server = (struct nfs_server *)0;
    }
  } else {
    {
#line 2581
    error = nfs_bdi_register(server);
    }
#line 2582
    if (error != 0) {
      {
#line 2583
      tmp___2 = ERR_PTR((long )error);
#line 2583
      mntroot = (struct dentry *)tmp___2;
      }
#line 2584
      goto error_splat_bdi;
    } else {

    }
#line 2586
    server->super = s;
  }
#line 2589
  if ((unsigned long )s->s_root == (unsigned long )((struct dentry *)0)) {
    {
#line 2591
    (*(mount_info->fill_super))(s, mount_info);
#line 2592
    nfs_get_cache_cookie(s, mount_info->parsed, mount_info->cloned);
    }
  } else {

  }
  {
#line 2595
  mntroot = nfs_get_root(s, mount_info->mntfh, dev_name___0);
#line 2596
  tmp___3 = IS_ERR((void const   *)mntroot);
  }
#line 2596
  if ((int )tmp___3) {
#line 2597
    goto error_splat_super;
  } else {

  }
  {
#line 2599
  error = (*(mount_info->set_security))(s, mntroot, mount_info);
  }
#line 2600
  if (error != 0) {
#line 2601
    goto error_splat_root;
  } else {

  }
#line 2603
  s->s_flags = s->s_flags | 1073741824UL;
  out: ;
#line 2606
  return (mntroot);
  out_err_nosb: 
  {
#line 2609
  nfs_free_server(server);
  }
#line 2610
  goto out;
  error_splat_root: 
  {
#line 2613
  dput(mntroot);
#line 2614
  tmp___4 = ERR_PTR((long )error);
#line 2614
  mntroot = (struct dentry *)tmp___4;
  }
  error_splat_super: ;
#line 2616
  if ((unsigned long )server != (unsigned long )((struct nfs_server *)0) && (unsigned long )s->s_root == (unsigned long )((struct dentry *)0)) {
    {
#line 2617
    bdi_unregister(& server->backing_dev_info);
    }
  } else {

  }
  error_splat_bdi: 
  {
#line 2619
  deactivate_locked_super(s);
  }
#line 2620
  goto out;
}
}
#line 2622 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_fs_mount_common[20U]  = 
#line 2622
  {      'n',      'f',      's',      '_', 
        'f',      's',      '_',      'm', 
        'o',      'u',      'n',      't', 
        '_',      'c',      'o',      'm', 
        'm',      'o',      'n',      '\000'};
#line 2622
struct kernel_symbol  const  __ksymtab_nfs_fs_mount_common ;
#line 2622 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_fs_mount_common  =    {(unsigned long )(& nfs_fs_mount_common), (char const   *)(& __kstrtab_nfs_fs_mount_common)};
#line 2624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct dentry *nfs_fs_mount(struct file_system_type *fs_type , int flags , char const   *dev_name___0 ,
                            void *raw_data ) 
{ 
  struct nfs_mount_info mount_info ;
  struct dentry *mntroot ;
  void *tmp ;
  struct nfs_subversion *nfs_mod ;
  int error ;
  void *tmp___0 ;
  void *tmp___1 ;
  bool tmp___2 ;

  {
  {
#line 2627
  mount_info.fill_super = & nfs_fill_super;
#line 2627
  mount_info.set_security = & nfs_set_sb_security;
#line 2627
  mount_info.parsed = 0;
#line 2627
  mount_info.cloned = 0;
#line 2627
  mount_info.mntfh = 0;
#line 2631
  tmp = ERR_PTR(-12L);
#line 2631
  mntroot = (struct dentry *)tmp;
#line 2635
  mount_info.parsed = nfs_alloc_parsed_mount_data();
#line 2636
  mount_info.mntfh = nfs_alloc_fhandle();
  }
#line 2637
  if ((unsigned long )mount_info.parsed == (unsigned long )((struct nfs_parsed_mount_data *)0) || (unsigned long )mount_info.mntfh == (unsigned long )((struct nfs_fh *)0)) {
#line 2638
    goto out;
  } else {

  }
  {
#line 2641
  error = nfs_validate_mount_data(fs_type, raw_data, mount_info.parsed, mount_info.mntfh,
                                  dev_name___0);
  }
#line 2642
  if (error == 1) {
    {
#line 2643
    error = nfs_validate_text_mount_data(raw_data, mount_info.parsed, dev_name___0);
    }
  } else {

  }
#line 2644
  if (error < 0) {
    {
#line 2645
    tmp___0 = ERR_PTR((long )error);
#line 2645
    mntroot = (struct dentry *)tmp___0;
    }
#line 2646
    goto out;
  } else {

  }
  {
#line 2649
  nfs_mod = get_nfs_version((mount_info.parsed)->version);
#line 2650
  tmp___2 = IS_ERR((void const   *)nfs_mod);
  }
#line 2650
  if ((int )tmp___2) {
    {
#line 2651
    tmp___1 = ERR_CAST((void const   *)nfs_mod);
#line 2651
    mntroot = (struct dentry *)tmp___1;
    }
#line 2652
    goto out;
  } else {

  }
  {
#line 2655
  mntroot = (*((nfs_mod->rpc_ops)->try_mount))(flags, dev_name___0, & mount_info,
                                               nfs_mod);
#line 2657
  put_nfs_version(nfs_mod);
  }
  out: 
  {
#line 2659
  nfs_free_parsed_mount_data(mount_info.parsed);
#line 2660
  nfs_free_fhandle((struct nfs_fh  const  *)mount_info.mntfh);
  }
#line 2661
  return (mntroot);
}
}
#line 2663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_fs_mount[13U]  = 
#line 2663
  {      'n',      'f',      's',      '_', 
        'f',      's',      '_',      'm', 
        'o',      'u',      'n',      't', 
        '\000'};
#line 2663
struct kernel_symbol  const  __ksymtab_nfs_fs_mount ;
#line 2663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_fs_mount  =    {(unsigned long )(& nfs_fs_mount), (char const   *)(& __kstrtab_nfs_fs_mount)};
#line 2669 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
void nfs_put_super(struct super_block *s ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;

  {
  {
#line 2671
  tmp = NFS_SB((struct super_block  const  *)s);
#line 2671
  server = tmp;
#line 2673
  bdi_unregister(& server->backing_dev_info);
  }
#line 2674
  return;
}
}
#line 2675 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_put_super[14U]  = 
#line 2675
  {      'n',      'f',      's',      '_', 
        'p',      'u',      't',      '_', 
        's',      'u',      'p',      'e', 
        'r',      '\000'};
#line 2675
struct kernel_symbol  const  __ksymtab_nfs_put_super ;
#line 2675 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_put_super  =    {(unsigned long )(& nfs_put_super), (char const   *)(& __kstrtab_nfs_put_super)};
#line 2680 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
void nfs_kill_super(struct super_block *s ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;

  {
  {
#line 2682
  tmp = NFS_SB((struct super_block  const  *)s);
#line 2682
  server = tmp;
#line 2684
  kill_anon_super(s);
#line 2685
  nfs_fscache_release_super_cookie(s);
#line 2686
  nfs_free_server(server);
  }
#line 2687
  return;
}
}
#line 2688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_kill_super[15U]  = 
#line 2688
  {      'n',      'f',      's',      '_', 
        'k',      'i',      'l',      'l', 
        '_',      's',      'u',      'p', 
        'e',      'r',      '\000'};
#line 2688
struct kernel_symbol  const  __ksymtab_nfs_kill_super ;
#line 2688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_kill_super  =    {(unsigned long )(& nfs_kill_super), (char const   *)(& __kstrtab_nfs_kill_super)};
#line 2694 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static struct dentry *nfs_xdev_mount(struct file_system_type *fs_type , int flags ,
                                     char const   *dev_name___0 , void *raw_data ) 
{ 
  struct nfs_clone_mount *data ;
  struct nfs_mount_info mount_info ;
  struct nfs_server *server ;
  struct dentry *mntroot ;
  void *tmp ;
  struct nfs_subversion *nfs_mod ;
  struct nfs_server *tmp___0 ;
  long tmp___1 ;
  struct nfs_server *tmp___2 ;
  void *tmp___3 ;
  bool tmp___4 ;
  long tmp___6 ;
  long tmp___7 ;
  bool tmp___8 ;
  long tmp___9 ;

  {
  {
#line 2697
  data = (struct nfs_clone_mount *)raw_data;
#line 2698
  mount_info.fill_super = & nfs_clone_super;
#line 2698
  mount_info.set_security = & nfs_clone_sb_security;
#line 2698
  mount_info.parsed = 0;
#line 2698
  mount_info.cloned = data;
#line 2698
  mount_info.mntfh = 0;
#line 2704
  tmp = ERR_PTR(-12L);
#line 2704
  mntroot = (struct dentry *)tmp;
#line 2705
  tmp___0 = NFS_SB(data->sb);
#line 2705
  nfs_mod = (tmp___0->nfs_client)->cl_nfs_mod;
#line 2707
  tmp___1 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 2707
  if (tmp___1 != 0L) {
    {
#line 2707
    printk("\001d--> nfs_xdev_mount()\n");
    }
  } else {

  }
  {
#line 2709
  mount_info.mntfh = (mount_info.cloned)->fh;
#line 2712
  tmp___2 = NFS_SB(data->sb);
#line 2712
  server = (*((nfs_mod->rpc_ops)->clone_server))(tmp___2, data->fh, data->fattr, data->authflavor);
#line 2714
  tmp___4 = IS_ERR((void const   *)server);
  }
#line 2714
  if ((int )tmp___4) {
    {
#line 2715
    tmp___3 = ERR_CAST((void const   *)server);
#line 2715
    mntroot = (struct dentry *)tmp___3;
    }
  } else {
    {
#line 2717
    mntroot = nfs_fs_mount_common(server, flags, dev_name___0, & mount_info, nfs_mod);
    }
  }
  {
#line 2720
  tmp___9 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 2720
  if (tmp___9 != 0L) {
    {
#line 2720
    tmp___8 = IS_ERR((void const   *)mntroot);
    }
#line 2720
    if ((int )tmp___8) {
      {
#line 2720
      tmp___6 = PTR_ERR((void const   *)mntroot);
#line 2720
      tmp___7 = tmp___6;
      }
    } else {
#line 2720
      tmp___7 = 0L;
    }
    {
#line 2720
    printk("\001d<-- nfs_xdev_mount() = %ld\n", tmp___7);
    }
  } else {

  }
#line 2722
  return (mntroot);
}
}
#line 2727 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static void nfs4_validate_mount_flags(struct nfs_parsed_mount_data *args ) 
{ 


  {
#line 2729
  args->flags = args->flags & -3148417;
#line 2730
  return;
}
}
#line 2736 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static int nfs4_validate_mount_data(void *options , struct nfs_parsed_mount_data *args ,
                                    char const   *dev_name___0 ) 
{ 
  struct sockaddr *sap ;
  struct nfs4_mount_data *data ;
  char *c ;
  unsigned long tmp ;
  int tmp___0 ;
  __u16 tmp___1 ;
  rpc_authflavor_t pseudoflavor ;
  unsigned long tmp___2 ;
  long tmp___3 ;
  bool tmp___4 ;
  long tmp___5 ;
  bool tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  bool tmp___9 ;
  long tmp___10 ;
  long tmp___11 ;
  long tmp___12 ;
  long tmp___13 ;

  {
#line 2740
  sap = (struct sockaddr *)(& args->nfs_server.address);
#line 2741
  data = (struct nfs4_mount_data *)options;
#line 2744
  if ((unsigned long )data == (unsigned long )((struct nfs4_mount_data *)0)) {
#line 2745
    goto out_no_data;
  } else {

  }
#line 2747
  args->version = 4U;
  {
#line 2750
  if (data->version == 1) {
#line 2750
    goto case_1;
  } else {

  }
#line 2810
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 2751
  if (data->host_addrlen > 128U) {
#line 2752
    goto out_no_address;
  } else {

  }
#line 2753
  if (data->host_addrlen == 0U) {
#line 2754
    goto out_no_address;
  } else {

  }
  {
#line 2755
  args->nfs_server.addrlen = (size_t )data->host_addrlen;
#line 2756
  tmp = copy_from_user((void *)sap, (void const   *)data->host_addr, (unsigned long )data->host_addrlen);
  }
#line 2756
  if (tmp != 0UL) {
#line 2757
    return (-14);
  } else {

  }
  {
#line 2758
  tmp___0 = nfs_verify_server_address(sap);
  }
#line 2758
  if (tmp___0 == 0) {
#line 2759
    goto out_no_address;
  } else {

  }
  {
#line 2760
  tmp___1 = __fswab16((int )((struct sockaddr_in *)sap)->sin_port);
#line 2760
  args->nfs_server.port = (int )tmp___1;
  }
#line 2762
  if (data->auth_flavourlen != 0) {
#line 2764
    if (data->auth_flavourlen > 1) {
#line 2765
      goto out_inval_auth;
    } else {

    }
    {
#line 2766
    tmp___2 = copy_from_user((void *)(& pseudoflavor), (void const   *)data->auth_flavours,
                             4UL);
    }
#line 2766
    if (tmp___2 != 0UL) {
#line 2769
      return (-14);
    } else {

    }
#line 2770
    args->selected_flavor = pseudoflavor;
  } else {
#line 2772
    args->selected_flavor = 1U;
  }
  {
#line 2774
  c = strndup_user(data->hostname.data, 255L);
#line 2775
  tmp___4 = IS_ERR((void const   *)c);
  }
#line 2775
  if ((int )tmp___4) {
    {
#line 2776
    tmp___3 = PTR_ERR((void const   *)c);
    }
#line 2776
    return ((int )tmp___3);
  } else {

  }
  {
#line 2777
  args->nfs_server.hostname = c;
#line 2779
  c = strndup_user(data->mnt_path.data, 4096L);
#line 2780
  tmp___6 = IS_ERR((void const   *)c);
  }
#line 2780
  if ((int )tmp___6) {
    {
#line 2781
    tmp___5 = PTR_ERR((void const   *)c);
    }
#line 2781
    return ((int )tmp___5);
  } else {

  }
  {
#line 2782
  args->nfs_server.export_path = c;
#line 2783
  tmp___7 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2783
  if (tmp___7 != 0L) {
    {
#line 2783
    printk("\001dNFS: MNTPATH: \'%s\'\n", c);
    }
  } else {

  }
  {
#line 2785
  c = strndup_user(data->client_addr.data, 16L);
#line 2786
  tmp___9 = IS_ERR((void const   *)c);
  }
#line 2786
  if ((int )tmp___9) {
    {
#line 2787
    tmp___8 = PTR_ERR((void const   *)c);
    }
#line 2787
    return ((int )tmp___8);
  } else {

  }
  {
#line 2788
  args->client_address = c;
#line 2795
  args->flags = data->flags & 36915;
#line 2796
  args->rsize = (unsigned int )data->rsize;
#line 2797
  args->wsize = (unsigned int )data->wsize;
#line 2798
  args->timeo = (unsigned int )data->timeo;
#line 2799
  args->retrans = (unsigned int )data->retrans;
#line 2800
  args->acregmin = (unsigned int )data->acregmin;
#line 2801
  args->acregmax = (unsigned int )data->acregmax;
#line 2802
  args->acdirmin = (unsigned int )data->acdirmin;
#line 2803
  args->acdirmax = (unsigned int )data->acdirmax;
#line 2804
  args->nfs_server.protocol = (unsigned short )data->proto;
#line 2805
  nfs_validate_transport_protocol(args);
  }
#line 2806
  if ((unsigned int )args->nfs_server.protocol == 17U) {
#line 2807
    goto out_invalid_transport_udp;
  } else {

  }
#line 2809
  goto ldv_56910;
  switch_default: /* CIL Label */ ;
#line 2811
  return (1);
  switch_break: /* CIL Label */ ;
  }
  ldv_56910: ;
#line 2814
  return (0);
  out_no_data: 
  {
#line 2817
  tmp___10 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2817
  if (tmp___10 != 0L) {
    {
#line 2817
    printk("\001dNFS4: mount program didn\'t pass any mount data\n");
    }
  } else {

  }
#line 2818
  return (-22);
  out_inval_auth: 
  {
#line 2821
  tmp___11 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2821
  if (tmp___11 != 0L) {
    {
#line 2821
    printk("\001dNFS4: Invalid number of RPC auth flavours %d\n", data->auth_flavourlen);
    }
  } else {

  }
#line 2823
  return (-22);
  out_no_address: 
  {
#line 2826
  tmp___12 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2826
  if (tmp___12 != 0L) {
    {
#line 2826
    printk("\001dNFS4: mount program didn\'t pass remote address\n");
    }
  } else {

  }
#line 2827
  return (-22);
  out_invalid_transport_udp: 
  {
#line 2830
  tmp___13 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 2830
  if (tmp___13 != 0L) {
    {
#line 2830
    printk("\001dNFSv4: Unsupported transport protocol udp\n");
    }
  } else {

  }
#line 2831
  return (-22);
}
}
#line 2841 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
unsigned int nfs_idmap_cache_timeout  =    600U;
#line 2843 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
bool nfs4_disable_idmapping  =    1;
#line 2844 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
unsigned short max_session_slots  =    64U;
#line 2845 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
unsigned short send_implementation_id  =    1U;
#line 2846 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
char nfs4_client_id_uniquifier[64U]  = {      '\000'};
#line 2847 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
bool recover_lost_locks  =    0;
#line 2849 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_callback_set_tcpport[25U]  = 
#line 2849
  {      'n',      'f',      's',      '_', 
        'c',      'a',      'l',      'l', 
        'b',      'a',      'c',      'k', 
        '_',      's',      'e',      't', 
        '_',      't',      'c',      'p', 
        'p',      'o',      'r',      't', 
        '\000'};
#line 2849
struct kernel_symbol  const  __ksymtab_nfs_callback_set_tcpport ;
#line 2849 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_callback_set_tcpport  =    {(unsigned long )(& nfs_callback_set_tcpport), (char const   *)(& __kstrtab_nfs_callback_set_tcpport)};
#line 2850 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_callback_tcpport[21U]  = 
#line 2850
  {      'n',      'f',      's',      '_', 
        'c',      'a',      'l',      'l', 
        'b',      'a',      'c',      'k', 
        '_',      't',      'c',      'p', 
        'p',      'o',      'r',      't', 
        '\000'};
#line 2850
struct kernel_symbol  const  __ksymtab_nfs_callback_tcpport ;
#line 2850 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_callback_tcpport  =    {(unsigned long )(& nfs_callback_tcpport), (char const   *)(& __kstrtab_nfs_callback_tcpport)};
#line 2851 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs_idmap_cache_timeout[24U]  = 
#line 2851
  {      'n',      'f',      's',      '_', 
        'i',      'd',      'm',      'a', 
        'p',      '_',      'c',      'a', 
        'c',      'h',      'e',      '_', 
        't',      'i',      'm',      'e', 
        'o',      'u',      't',      '\000'};
#line 2851
struct kernel_symbol  const  __ksymtab_nfs_idmap_cache_timeout ;
#line 2851 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs_idmap_cache_timeout  =    {(unsigned long )(& nfs_idmap_cache_timeout), (char const   *)(& __kstrtab_nfs_idmap_cache_timeout)};
#line 2852 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs4_disable_idmapping[23U]  = 
#line 2852
  {      'n',      'f',      's',      '4', 
        '_',      'd',      'i',      's', 
        'a',      'b',      'l',      'e', 
        '_',      'i',      'd',      'm', 
        'a',      'p',      'p',      'i', 
        'n',      'g',      '\000'};
#line 2852
struct kernel_symbol  const  __ksymtab_nfs4_disable_idmapping ;
#line 2852 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs4_disable_idmapping  =    {(unsigned long )(& nfs4_disable_idmapping), (char const   *)(& __kstrtab_nfs4_disable_idmapping)};
#line 2853 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_max_session_slots[18U]  = 
#line 2853
  {      'm',      'a',      'x',      '_', 
        's',      'e',      's',      's', 
        'i',      'o',      'n',      '_', 
        's',      'l',      'o',      't', 
        's',      '\000'};
#line 2853
struct kernel_symbol  const  __ksymtab_max_session_slots ;
#line 2853 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_max_session_slots  =    {(unsigned long )(& max_session_slots), (char const   *)(& __kstrtab_max_session_slots)};
#line 2854 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_send_implementation_id[23U]  = 
#line 2854
  {      's',      'e',      'n',      'd', 
        '_',      'i',      'm',      'p', 
        'l',      'e',      'm',      'e', 
        'n',      't',      'a',      't', 
        'i',      'o',      'n',      '_', 
        'i',      'd',      '\000'};
#line 2854
struct kernel_symbol  const  __ksymtab_send_implementation_id ;
#line 2854 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_send_implementation_id  =    {(unsigned long )(& send_implementation_id), (char const   *)(& __kstrtab_send_implementation_id)};
#line 2855 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_nfs4_client_id_uniquifier[26U]  = 
#line 2855
  {      'n',      'f',      's',      '4', 
        '_',      'c',      'l',      'i', 
        'e',      'n',      't',      '_', 
        'i',      'd',      '_',      'u', 
        'n',      'i',      'q',      'u', 
        'i',      'f',      'i',      'e', 
        'r',      '\000'};
#line 2855
struct kernel_symbol  const  __ksymtab_nfs4_client_id_uniquifier ;
#line 2855 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_nfs4_client_id_uniquifier  =    {(unsigned long )(& nfs4_client_id_uniquifier), (char const   *)(& __kstrtab_nfs4_client_id_uniquifier)};
#line 2856 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
static char const   __kstrtab_recover_lost_locks[19U]  = 
#line 2856
  {      'r',      'e',      'c',      'o', 
        'v',      'e',      'r',      '_', 
        'l',      'o',      's',      't', 
        '_',      'l',      'o',      'c', 
        'k',      's',      '\000'};
#line 2856
struct kernel_symbol  const  __ksymtab_recover_lost_locks ;
#line 2856 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/super.c"
struct kernel_symbol  const  __ksymtab_recover_lost_locks  =    {(unsigned long )(& recover_lost_locks), (char const   *)(& __kstrtab_recover_lost_locks)};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) ;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 


  {
#line 81
  __asm__  volatile   ("":);
#line 81
  return (0);

#line 81
  return (1);
}
}
#line 279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_direct.c.aux"
void ldv_spin_lock_lock_of_nfs_commit_info(void) ;
#line 126
void ldv_spin_unlock_lock_of_nfs_commit_info(void) ;
#line 133
void ldv_spin_lock_lock_of_nfs_direct_req(void) ;
#line 134
void ldv_spin_unlock_lock_of_nfs_direct_req(void) ;
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 377
__inline static void ldv_spin_lock_78___1(spinlock_t *lock ) ;
#line 381
__inline static void ldv_spin_lock_80___2(spinlock_t *lock ) ;
#line 385
__inline static void ldv_spin_lock_80___2(spinlock_t *lock ) ;
#line 389
__inline static void ldv_spin_lock_78___1(spinlock_t *lock ) ;
#line 393
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_unlock_79___2(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_unlock_81___2(spinlock_t *lock ) ;
#line 429
__inline static void ldv_spin_unlock_81___2(spinlock_t *lock ) ;
#line 433
__inline static void ldv_spin_unlock_79___2(spinlock_t *lock ) ;
#line 437
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
  }
#line 78
  return;
}
}
#line 94
extern int wait_for_completion_killable(struct completion * ) ;
#line 107
extern void complete_all(struct completion * ) ;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kref.h"
__inline static void kref_init(struct kref *kref ) 
{ 


  {
  {
#line 34
  atomic_set(& kref->refcount, 1);
  }
#line 35
  return;
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kref.h"
__inline static void kref_get(struct kref *kref ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 47
  tmp = atomic_add_return(1, & kref->refcount);
#line 47
  __ret_warn_once = tmp <= 1;
#line 47
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 47
  if (tmp___2 != 0L) {
    {
#line 47
    __ret_warn_on = ! __warned;
#line 47
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 47
    if (tmp___0 != 0L) {
      {
#line 47
      warn_slowpath_null("include/linux/kref.h", 47);
      }
    } else {

    }
    {
#line 47
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 47
    if (tmp___1 != 0L) {
#line 47
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 47
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 49
  return;
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 71
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
#line 71
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 71
  if (tmp != 0L) {
    {
#line 71
    warn_slowpath_null("include/linux/kref.h", 71);
    }
  } else {

  }
  {
#line 71
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 73
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
  }
#line 73
  if (tmp___0 != 0) {
    {
#line 74
    (*release)(kref);
    }
#line 75
    return (1);
  } else {

  }
#line 77
  return (0);
}
}
#line 97 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ 
  int tmp ;

  {
  {
#line 99
  tmp = kref_sub(kref, 1U, release);
  }
#line 99
  return (tmp);
}
}
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
extern void __init_work(struct work_struct * , int  ) ;
#line 355
extern struct workqueue_struct *system_wq ;
#line 431
extern bool queue_work_on(int  , struct workqueue_struct * , struct work_struct * ) ;
#line 471 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
__inline static bool queue_work(struct workqueue_struct *wq , struct work_struct *work ) 
{ 
  bool tmp ;

  {
  {
#line 474
  tmp = queue_work_on(8192, wq, work);
  }
#line 474
  return (tmp);
}
}
#line 530 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
__inline static bool schedule_work(struct work_struct *work ) 
{ 
  bool tmp ;

  {
  {
#line 532
  tmp = queue_work(system_wq, work);
  }
#line 532
  return (tmp);
}
}
#line 2419 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
extern int generic_write_checks(struct file * , loff_t * , size_t * , int  ) ;
#line 2506
extern void inode_dio_done(struct inode * ) ;
#line 351 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static int PageCompound(struct page *page ) 
{ 


  {
#line 353
  return ((int )page->flags & 49152);
}
}
#line 379 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
extern void kvfree(void const   * ) ;
#line 1217
extern int set_page_dirty(struct page * ) ;
#line 627 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
__inline static void *kmem_cache_zalloc(struct kmem_cache *k , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 629
  tmp = kmem_cache_alloc(k, flags | 32768U);
  }
#line 629
  return (tmp);
}
}
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/task_io_accounting_ops.h"
__inline static void task_io_account_read(size_t bytes ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;

  {
  {
#line 12
  tmp = get_current();
#line 12
  tmp___0 = get_current();
#line 12
  tmp->ioac.read_bytes = tmp___0->ioac.read_bytes + (unsigned long long )bytes;
  }
#line 13
  return;
}
}
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/task_io_accounting_ops.h"
__inline static void task_io_account_write(size_t bytes ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;

  {
  {
#line 26
  tmp = get_current();
#line 26
  tmp___0 = get_current();
#line 26
  tmp->ioac.write_bytes = tmp___0->ioac.write_bytes + (unsigned long long )bytes;
  }
#line 27
  return;
}
}
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/uio.h"
extern void iov_iter_advance(struct iov_iter * , size_t  ) ;
#line 88
extern ssize_t iov_iter_get_pages_alloc(struct iov_iter * , struct page *** , size_t  ,
                                        size_t * ) ;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/aio.h"
__inline static bool is_sync_kiocb(struct kiocb *kiocb ) 
{ 


  {
#line 59
  return ((unsigned long )kiocb->ki_ctx == (unsigned long )((struct kioctx *)0));
}
}
#line 74
extern void aio_complete(struct kiocb * , long  , long  ) ;
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
struct nfs_page *nfs_create_request(struct nfs_open_context *ctx , struct page *page ,
                                    struct nfs_page *last , unsigned int offset ,
                                    unsigned int count ) ;
#line 103
void nfs_release_request(struct nfs_page *req ) ;
#line 113
int nfs_pageio_add_request(struct nfs_pageio_descriptor *desc , struct nfs_page *req ) ;
#line 115
void nfs_pageio_complete(struct nfs_pageio_descriptor *desc ) ;
#line 122
void nfs_unlock_and_release_request(struct nfs_page *req ) ;
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
__inline static int nfs_lock_request(struct nfs_page *req ) 
{ 
  int tmp ;

  {
  {
#line 133
  tmp = test_and_set_bit(0L, (unsigned long volatile   *)(& req->wb_flags));
  }
#line 133
  return (tmp == 0);
}
}
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
__inline static void nfs_list_add_request(struct nfs_page *req , struct list_head *head ) 
{ 


  {
  {
#line 144
  list_add_tail(& req->wb_list, head);
  }
#line 145
  return;
}
}
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
__inline static void nfs_list_remove_request(struct nfs_page *req ) 
{ 
  int tmp ;

  {
  {
#line 155
  tmp = list_empty((struct list_head  const  *)(& req->wb_list));
  }
#line 155
  if (tmp != 0) {
#line 156
    return;
  } else {

  }
  {
#line 157
  list_del_init(& req->wb_list);
  }
#line 158
  return;
}
}
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
__inline static struct nfs_page *nfs_list_entry(struct list_head *head ) 
{ 
  struct list_head  const  *__mptr ;

  {
#line 163
  __mptr = (struct list_head  const  *)head;
#line 163
  return ((struct nfs_page *)__mptr);
}
}
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
__inline static loff_t req_offset(struct nfs_page *req ) 
{ 


  {
#line 169
  return (((long long )req->wb_index << 12) + (long long )req->wb_offset);
}
}
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
void nfs_pageio_init_read(struct nfs_pageio_descriptor *pgio , struct inode *inode ,
                          bool force_mds , struct nfs_pgio_completion_ops  const  *compl_ops ) ;
#line 422
void nfs_pageio_init_write(struct nfs_pageio_descriptor *pgio , struct inode *inode ,
                           int ioflags , bool force_mds , struct nfs_pgio_completion_ops  const  *compl_ops ) ;
#line 437
int nfs_scan_commit_list(struct list_head *src , struct list_head *dst , struct nfs_commit_info *cinfo ,
                         int max ) ;
#line 440
int nfs_scan_commit(struct inode *inode , struct list_head *dst , struct nfs_commit_info *cinfo ) ;
#line 442
void nfs_mark_request_commit(struct nfs_page *req , struct pnfs_layout_segment *lseg ,
                             struct nfs_commit_info *cinfo ) ;
#line 445
int nfs_generic_commit_list(struct inode *inode , struct list_head *head , int how ,
                            struct nfs_commit_info *cinfo ) ;
#line 476
void nfs_init_cinfo_from_dreq(struct nfs_commit_info *cinfo , struct nfs_direct_req *dreq ) ;
#line 482
ssize_t nfs_dreq_bytes_left(struct nfs_direct_req *dreq ) ;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_server_stats___0(struct nfs_server  const  *server ,
                                              enum nfs_stat_bytecounters stat , long addend ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 41
  __vpp_verify = (void const   *)0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___0;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___1;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___2;
  } else {

  }
#line 41
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 41
  pao_ID__ = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___0;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8;
  } else {

  }
#line 41
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53911;
  case_2: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53911;
  case_4: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53911;
  case_8: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53911;
  switch_default: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_53911: ;
#line 41
  goto ldv_53916;
  case_2___0: /* CIL Label */ 
#line 41
  pao_ID_____0 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___1;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___1;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___0;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___0;
  } else {

  }
#line 41
  goto switch_default___0;
  case_1___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53922;
  case_2___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53922;
  case_4___0: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53922;
  case_8___0: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53922;
  switch_default___0: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_53922: ;
#line 41
  goto ldv_53916;
  case_4___1: /* CIL Label */ 
#line 41
  pao_ID_____1 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___2;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___2;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___2;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___1;
  } else {

  }
#line 41
  goto switch_default___1;
  case_1___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53932;
  case_2___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53932;
  case_4___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53932;
  case_8___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53932;
  switch_default___1: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_53932: ;
#line 41
  goto ldv_53916;
  case_8___2: /* CIL Label */ 
#line 41
  pao_ID_____2 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___3;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___3;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___3;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___3;
  } else {

  }
#line 41
  goto switch_default___2;
  case_1___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53942;
  case_2___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53942;
  case_4___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53942;
  case_8___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53942;
  switch_default___2: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_53942: ;
#line 41
  goto ldv_53916;
  switch_default___3: /* CIL Label */ 
  {
#line 41
  __bad_size_call_parameter();
  }
#line 41
  goto ldv_53916;
  switch_break: /* CIL Label */ ;
  }
  ldv_53916: ;
#line 42
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_stats___0(struct inode  const  *inode , enum nfs_stat_bytecounters stat ,
                                       long addend ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 48
  tmp = NFS_SERVER(inode);
#line 48
  nfs_add_server_stats___0((struct nfs_server  const  *)tmp, stat, addend);
  }
#line 49
  return;
}
}
#line 343 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
__inline static void pnfs_recover_commit_reqs(struct inode *inode , struct list_head *list ,
                                              struct nfs_commit_info *cinfo ) 
{ 
  struct nfs_server *tmp ;

  {
#line 346
  if ((unsigned long )cinfo->ds == (unsigned long )((struct pnfs_ds_commit_info *)0) || (cinfo->ds)->nwritten == 0) {
#line 347
    return;
  } else {

  }
  {
#line 348
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 348
  (*((tmp->pnfs_curr_ld)->recover_commit_reqs))(list, cinfo);
  }
#line 349
  return;
}
}
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static struct kmem_cache *nfs_direct_cachep  ;
#line 96
static struct nfs_pgio_completion_ops  const  nfs_direct_write_completion_ops ;
#line 97
static struct nfs_commit_completion_ops  const  nfs_direct_commit_completion_ops ;
#line 98
static void nfs_direct_write_complete(struct nfs_direct_req *dreq , struct inode *inode ) ;
#line 99
static void nfs_direct_write_schedule_work(struct work_struct *work ) ;
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
__inline static void get_dreq(struct nfs_direct_req *dreq ) 
{ 


  {
  {
#line 103
  atomic_inc(& dreq->io_count);
  }
#line 104
  return;
}
}
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
__inline static int put_dreq(struct nfs_direct_req *dreq ) 
{ 
  int tmp ;

  {
  {
#line 108
  tmp = atomic_dec_and_test(& dreq->io_count);
  }
#line 108
  return (tmp);
}
}
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static struct nfs_writeverf *nfs_direct_select_verf(struct nfs_direct_req *dreq ,
                                                    struct nfs_client *ds_clp , int ds_idx ) 
{ 
  struct nfs_writeverf *verfp ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 124
  verfp = & dreq->verf;
#line 127
  if ((unsigned long )ds_clp != (unsigned long )((struct nfs_client *)0)) {
#line 129
    if (ds_idx >= 0 && ds_idx < dreq->ds_cinfo.nbuckets) {
#line 130
      verfp = & (dreq->ds_cinfo.buckets + (unsigned long )ds_idx)->direct_verf;
    } else {
      {
#line 132
      __ret_warn_once = 1;
#line 132
      tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
      }
#line 132
      if (tmp___1 != 0L) {
        {
#line 132
        __ret_warn_on = ! __warned;
#line 132
        tmp = __builtin_expect(__ret_warn_on != 0, 0L);
        }
#line 132
        if (tmp != 0L) {
          {
#line 132
          warn_slowpath_null("fs/nfs/direct.c", 132);
          }
        } else {

        }
        {
#line 132
        tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
        }
#line 132
        if (tmp___0 != 0L) {
#line 132
          __warned = 1;
        } else {

        }
      } else {

      }
      {
#line 132
      __builtin_expect(__ret_warn_once != 0, 0L);
      }
    }
  } else {

  }
#line 135
  return (verfp);
}
}
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_set_hdr_verf(struct nfs_direct_req *dreq , struct nfs_pgio_header *hdr ) 
{ 
  struct nfs_writeverf *verfp ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int __ret_warn_on___0 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;

  {
  {
#line 151
  verfp = nfs_direct_select_verf(dreq, hdr->ds_clp, hdr->ds_idx);
#line 153
  __ret_warn_once = (int )verfp->committed >= 0;
#line 153
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 153
  if (tmp___1 != 0L) {
    {
#line 153
    __ret_warn_on = ! __warned;
#line 153
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 153
    if (tmp != 0L) {
      {
#line 153
      warn_slowpath_null("fs/nfs/direct.c", 153);
      }
    } else {

    }
    {
#line 153
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 153
    if (tmp___0 != 0L) {
#line 153
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 153
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 154
  memcpy((void *)verfp, (void const   *)(& hdr->verf), 12UL);
#line 155
  __ret_warn_once___0 = (int )verfp->committed < 0;
#line 155
  tmp___4 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 155
  if (tmp___4 != 0L) {
    {
#line 155
    __ret_warn_on___0 = ! __warned___0;
#line 155
    tmp___2 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 155
    if (tmp___2 != 0L) {
      {
#line 155
      warn_slowpath_null("fs/nfs/direct.c", 155);
      }
    } else {

    }
    {
#line 155
    tmp___3 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 155
    if (tmp___3 != 0L) {
#line 155
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 155
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 157
  return;
}
}
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static int nfs_direct_set_or_cmp_hdr_verf(struct nfs_direct_req *dreq , struct nfs_pgio_header *hdr ) 
{ 
  struct nfs_writeverf *verfp ;
  int tmp ;

  {
  {
#line 172
  verfp = nfs_direct_select_verf(dreq, hdr->ds_clp, hdr->ds_idx);
  }
#line 174
  if ((int )verfp->committed < 0) {
    {
#line 175
    nfs_direct_set_hdr_verf(dreq, hdr);
    }
#line 176
    return (0);
  } else {

  }
  {
#line 178
  tmp = memcmp((void const   *)verfp, (void const   *)(& hdr->verf), 12UL);
  }
#line 178
  return (tmp);
}
}
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static int nfs_direct_cmp_commit_data_verf(struct nfs_direct_req *dreq , struct nfs_commit_data *data ) 
{ 
  struct nfs_writeverf *verfp ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
  {
#line 195
  verfp = nfs_direct_select_verf(dreq, data->ds_clp, data->ds_commit_index);
#line 197
  __ret_warn_once = (int )verfp->committed < 0;
#line 197
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 197
  if (tmp___1 != 0L) {
    {
#line 197
    __ret_warn_on = ! __warned;
#line 197
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 197
    if (tmp != 0L) {
      {
#line 197
      warn_slowpath_null("fs/nfs/direct.c", 197);
      }
    } else {

    }
    {
#line 197
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 197
    if (tmp___0 != 0L) {
#line 197
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 197
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 198
  tmp___2 = memcmp((void const   *)verfp, (void const   *)(& data->verf), 12UL);
  }
#line 198
  return (tmp___2);
}
}
#line 215 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
ssize_t nfs_direct_IO(int rw , struct kiocb *iocb , struct iov_iter *iter , loff_t pos ) 
{ 
  long tmp ;
  ssize_t tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 223
  tmp = __builtin_expect(iocb->ki_nbytes != 4096UL, 0L);
  }
#line 223
  if (tmp != 0L) {
    {
#line 223
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/direct.c"),
                         "i" (223), "i" (12UL));
#line 223
    __builtin_unreachable();
    }
  } else {

  }
#line 225
  if (rw == 0 || rw == 1073741824) {
    {
#line 226
    tmp___0 = nfs_file_direct_read(iocb, iter, pos, rw == 0);
    }
#line 226
    return (tmp___0);
  } else {

  }
  {
#line 228
  tmp___1 = nfs_file_direct_write(iocb, iter, pos, rw == 1);
  }
#line 228
  return (tmp___1);
}
}
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_release_pages(struct page **pages , unsigned int npages ) 
{ 
  unsigned int i ;

  {
#line 236
  i = 0U;
#line 236
  goto ldv_54411;
  ldv_54410: 
  {
#line 237
  put_page(*(pages + (unsigned long )i));
#line 236
  i = i + 1U;
  }
  ldv_54411: ;
#line 236
  if (i < npages) {
#line 238
    goto ldv_54410;
  } else {

  }

#line 243
  return;
}
}
#line 240 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
void nfs_init_cinfo_from_dreq(struct nfs_commit_info *cinfo , struct nfs_direct_req *dreq ) 
{ 


  {
#line 243
  cinfo->lock = & dreq->lock;
#line 244
  cinfo->mds = & dreq->mds_cinfo;
#line 245
  cinfo->ds = & dreq->ds_cinfo;
#line 246
  cinfo->dreq = dreq;
#line 247
  cinfo->completion_ops = & nfs_direct_commit_completion_ops;
#line 248
  return;
}
}
#line 250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
__inline static struct nfs_direct_req *nfs_direct_req_alloc(void) 
{ 
  struct nfs_direct_req *dreq ;
  void *tmp ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;

  {
  {
#line 254
  tmp = kmem_cache_zalloc(nfs_direct_cachep, 208U);
#line 254
  dreq = (struct nfs_direct_req *)tmp;
  }
#line 255
  if ((unsigned long )dreq == (unsigned long )((struct nfs_direct_req *)0)) {
#line 256
    return ((struct nfs_direct_req *)0);
  } else {

  }
  {
#line 258
  kref_init(& dreq->kref);
#line 259
  kref_get(& dreq->kref);
#line 260
  init_completion(& dreq->completion);
#line 261
  INIT_LIST_HEAD(& dreq->mds_cinfo.list);
#line 262
  dreq->verf.committed = -1;
#line 263
  __init_work(& dreq->work, 0);
#line 263
  __constr_expr_0.counter = 137438953408L;
#line 263
  dreq->work.data = __constr_expr_0;
#line 263
  lockdep_init_map(& dreq->work.lockdep_map, "(&dreq->work)", & __key, 0);
#line 263
  INIT_LIST_HEAD(& dreq->work.entry);
#line 263
  dreq->work.func = & nfs_direct_write_schedule_work;
#line 264
  spinlock_check(& dreq->lock);
#line 264
  __raw_spin_lock_init(& dreq->lock.__annonCompField18.rlock, "&(&dreq->lock)->rlock",
                       & __key___0);
  }
#line 266
  return (dreq);
}
}
#line 269 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_req_free(struct kref *kref ) 
{ 
  struct nfs_direct_req *dreq ;
  struct kref  const  *__mptr ;

  {
#line 271
  __mptr = (struct kref  const  *)kref;
#line 271
  dreq = (struct nfs_direct_req *)__mptr;
#line 273
  if ((unsigned long )dreq->l_ctx != (unsigned long )((struct nfs_lock_context *)0)) {
    {
#line 274
    nfs_put_lock_context(dreq->l_ctx);
    }
  } else {

  }
#line 275
  if ((unsigned long )dreq->ctx != (unsigned long )((struct nfs_open_context *)0)) {
    {
#line 276
    put_nfs_open_context(dreq->ctx);
    }
  } else {

  }
  {
#line 277
  kmem_cache_free(nfs_direct_cachep, (void *)dreq);
  }
#line 278
  return;
}
}
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_req_release(struct nfs_direct_req *dreq ) 
{ 


  {
  {
#line 282
  kref_put(& dreq->kref, & nfs_direct_req_free);
  }
#line 283
  return;
}
}
#line 285 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
ssize_t nfs_dreq_bytes_left(struct nfs_direct_req *dreq ) 
{ 


  {
#line 287
  return (dreq->bytes_left);
}
}
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static char const   __kstrtab_nfs_dreq_bytes_left[20U]  = 
#line 289
  {      'n',      'f',      's',      '_', 
        'd',      'r',      'e',      'q', 
        '_',      'b',      'y',      't', 
        'e',      's',      '_',      'l', 
        'e',      'f',      't',      '\000'};
#line 289
struct kernel_symbol  const  __ksymtab_nfs_dreq_bytes_left ;
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
struct kernel_symbol  const  __ksymtab_nfs_dreq_bytes_left  =    {(unsigned long )(& nfs_dreq_bytes_left), (char const   *)(& __kstrtab_nfs_dreq_bytes_left)};
#line 294 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static ssize_t nfs_direct_wait(struct nfs_direct_req *dreq ) 
{ 
  ssize_t result ;
  int tmp ;

  {
#line 296
  result = -529L;
#line 299
  if ((unsigned long )dreq->iocb != (unsigned long )((struct kiocb *)0)) {
#line 300
    goto out;
  } else {

  }
  {
#line 302
  tmp = wait_for_completion_killable(& dreq->completion);
#line 302
  result = (ssize_t )tmp;
  }
#line 304
  if (result == 0L) {
#line 305
    result = dreq->error;
  } else {

  }
#line 306
  if (result == 0L) {
#line 307
    result = dreq->count;
  } else {

  }
  out: ;
#line 310
  return (result);
}
}
#line 317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_complete(struct nfs_direct_req *dreq , bool write ) 
{ 
  struct inode *inode ;
  loff_t pos ;
  loff_t tmp ;
  long res ;

  {
#line 319
  inode = dreq->inode;
#line 321
  if ((unsigned long )dreq->iocb != (unsigned long )((struct kiocb *)0) && (int )write) {
    {
#line 322
    pos = (dreq->iocb)->ki_pos + (long long )dreq->count;
#line 324
    ldv_spin_lock_72(& inode->i_lock);
#line 325
    tmp = i_size_read((struct inode  const  *)inode);
    }
#line 325
    if (tmp < pos) {
      {
#line 326
      i_size_write(inode, pos);
      }
    } else {

    }
    {
#line 327
    ldv_spin_unlock_73(& inode->i_lock);
    }
  } else {

  }
#line 330
  if ((int )write) {
    {
#line 331
    nfs_zap_mapping(inode, inode->i_mapping);
    }
  } else {

  }
  {
#line 333
  inode_dio_done(inode);
  }
#line 335
  if ((unsigned long )dreq->iocb != (unsigned long )((struct kiocb *)0)) {
#line 336
    res = dreq->error;
#line 337
    if (res == 0L) {
#line 338
      res = dreq->count;
    } else {

    }
    {
#line 339
    aio_complete(dreq->iocb, res, 0L);
    }
  } else {

  }
  {
#line 342
  complete_all(& dreq->completion);
#line 344
  nfs_direct_req_release(dreq);
  }
#line 345
  return;
}
}
#line 347 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_readpage_release(struct nfs_page *req ) 
{ 
  loff_t tmp ;
  __u64 tmp___0 ;
  long tmp___1 ;

  {
  {
#line 349
  tmp___1 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 349
  if (tmp___1 != 0L) {
    {
#line 349
    tmp = req_offset(req);
#line 349
    tmp___0 = NFS_FILEID((struct inode  const  *)((req->wb_context)->dentry)->d_inode);
#line 349
    printk("\001dNFS: direct read done (%s/%llu %d@%lld)\n", (char *)(& ((((req->wb_context)->dentry)->d_inode)->i_sb)->s_id),
           tmp___0, req->wb_bytes, tmp);
    }
  } else {

  }
  {
#line 354
  nfs_release_request(req);
  }
#line 355
  return;
}
}
#line 357 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_read_completion(struct nfs_pgio_header *hdr ) 
{ 
  unsigned long bytes ;
  struct nfs_direct_req *dreq ;
  int tmp ;
  int tmp___0 ;
  struct nfs_page *req ;
  struct nfs_page *tmp___1 ;
  struct page *page ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 359
  bytes = 0UL;
#line 360
  dreq = hdr->dreq;
#line 362
  tmp = constant_test_bit(2L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 362
  if (tmp != 0) {
#line 363
    goto out_put;
  } else {

  }
  {
#line 365
  ldv_spin_lock_78___1(& dreq->lock);
#line 366
  tmp___0 = constant_test_bit(0L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 366
  if (tmp___0 != 0 && hdr->good_bytes == 0UL) {
#line 367
    dreq->error = (ssize_t )hdr->error;
  } else {
#line 369
    dreq->count = (ssize_t )((unsigned long )dreq->count + hdr->good_bytes);
  }
  {
#line 370
  ldv_spin_unlock_79___2(& dreq->lock);
  }
#line 372
  goto ldv_54467;
  ldv_54466: 
  {
#line 373
  tmp___1 = nfs_list_entry(hdr->pages.next);
#line 373
  req = tmp___1;
#line 374
  page = req->wb_page;
#line 376
  tmp___2 = PageCompound(page);
  }
#line 376
  if (tmp___2 == 0 && bytes < hdr->good_bytes) {
    {
#line 377
    set_page_dirty(page);
    }
  } else {

  }
  {
#line 378
  bytes = bytes + (unsigned long )req->wb_bytes;
#line 379
  nfs_list_remove_request(req);
#line 380
  nfs_direct_readpage_release(req);
  }
  ldv_54467: 
  {
#line 372
  tmp___3 = list_empty((struct list_head  const  *)(& hdr->pages));
  }
#line 372
  if (tmp___3 == 0) {
#line 374
    goto ldv_54466;
  } else {

  }

  out_put: 
  {
#line 383
  tmp___4 = put_dreq(dreq);
  }
#line 383
  if (tmp___4 != 0) {
    {
#line 384
    nfs_direct_complete(dreq, 0);
    }
  } else {

  }
  {
#line 385
  (*(hdr->release))(hdr);
  }
#line 386
  return;
}
}
#line 388 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_read_sync_pgio_error(struct list_head *head ) 
{ 
  struct nfs_page *req ;
  int tmp ;

  {
#line 392
  goto ldv_54474;
  ldv_54473: 
  {
#line 393
  req = nfs_list_entry(head->next);
#line 394
  nfs_list_remove_request(req);
#line 395
  nfs_release_request(req);
  }
  ldv_54474: 
  {
#line 392
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 392
  if (tmp == 0) {
#line 394
    goto ldv_54473;
  } else {

  }

#line 399
  return;
}
}
#line 399 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_pgio_init(struct nfs_pgio_header *hdr ) 
{ 


  {
  {
#line 401
  get_dreq(hdr->dreq);
  }
#line 402
  return;
}
}
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static struct nfs_pgio_completion_ops  const  nfs_direct_read_completion_ops  =    {& nfs_read_sync_pgio_error, & nfs_direct_pgio_init, & nfs_direct_read_completion};
#line 418 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static ssize_t nfs_direct_read_schedule_iovec(struct nfs_direct_req *dreq , struct iov_iter *iter ,
                                              loff_t pos ) 
{ 
  struct nfs_pageio_descriptor desc ;
  struct inode *inode ;
  ssize_t result ;
  size_t requested_bytes ;
  size_t rsize ;
  size_t __max1 ;
  struct nfs_server *tmp ;
  size_t __max2 ;
  struct page **pagevec ;
  size_t bytes ;
  size_t pgbase ;
  unsigned int npages ;
  unsigned int i ;
  struct nfs_page *req ;
  unsigned int req_len ;
  size_t __min1 ;
  size_t __min2 ;
  bool tmp___0 ;
  int tmp___1 ;
  size_t tmp___2 ;
  int tmp___3 ;

  {
  {
#line 423
  inode = dreq->inode;
#line 424
  result = -22L;
#line 425
  requested_bytes = 0UL;
#line 426
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 426
  __max1 = (size_t )tmp->rsize;
#line 426
  __max2 = 4096UL;
#line 426
  rsize = __max1 > __max2 ? __max1 : __max2;
#line 428
  nfs_pageio_init_read(& desc, dreq->inode, 0, & nfs_direct_read_completion_ops);
#line 430
  get_dreq(dreq);
#line 431
  desc.pg_dreq = dreq;
#line 432
  atomic_inc(& inode->i_dio_count);
  }
#line 434
  goto ldv_54508;
  ldv_54507: 
  {
#line 440
  result = iov_iter_get_pages_alloc(iter, & pagevec, rsize, & pgbase);
  }
#line 442
  if (result < 0L) {
#line 443
    goto ldv_54498;
  } else {

  }
  {
#line 445
  bytes = (size_t )result;
#line 446
  iov_iter_advance(iter, bytes);
#line 447
  npages = (unsigned int )((((unsigned long )result + pgbase) + 4095UL) / 4096UL);
#line 448
  i = 0U;
  }
#line 448
  goto ldv_54506;
  ldv_54505: 
  {
#line 450
  __min1 = bytes;
#line 450
  __min2 = 4096UL - pgbase;
#line 450
  req_len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 452
  req = nfs_create_request(dreq->ctx, *(pagevec + (unsigned long )i), (struct nfs_page *)0,
                           (unsigned int )pgbase, req_len);
#line 454
  tmp___0 = IS_ERR((void const   *)req);
  }
#line 454
  if ((int )tmp___0) {
    {
#line 455
    result = PTR_ERR((void const   *)req);
    }
#line 456
    goto ldv_54504;
  } else {

  }
  {
#line 458
  req->wb_index = (unsigned long )(pos >> 12);
#line 459
  req->wb_offset = (unsigned int )pos & 4095U;
#line 460
  tmp___1 = nfs_pageio_add_request(& desc, req);
  }
#line 460
  if (tmp___1 == 0) {
    {
#line 461
    result = (ssize_t )desc.pg_error;
#line 462
    nfs_release_request(req);
    }
#line 463
    goto ldv_54504;
  } else {

  }
#line 465
  pgbase = 0UL;
#line 466
  bytes = bytes - (size_t )req_len;
#line 467
  requested_bytes = requested_bytes + (size_t )req_len;
#line 468
  pos = pos + (loff_t )req_len;
#line 469
  dreq->bytes_left = dreq->bytes_left - (ssize_t )req_len;
#line 448
  i = i + 1U;
  ldv_54506: ;
#line 448
  if (i < npages) {
#line 450
    goto ldv_54505;
  } else {

  }
  ldv_54504: 
  {
#line 471
  nfs_direct_release_pages(pagevec, npages);
#line 472
  kvfree((void const   *)pagevec);
  }
#line 473
  if (result < 0L) {
#line 474
    goto ldv_54498;
  } else {

  }
  ldv_54508: 
  {
#line 434
  tmp___2 = iov_iter_count(iter);
  }
#line 434
  if (tmp___2 != 0UL) {
#line 436
    goto ldv_54507;
  } else {

  }
  ldv_54498: 
  {
#line 477
  nfs_pageio_complete(& desc);
  }
#line 483
  if (requested_bytes == 0UL) {
    {
#line 484
    inode_dio_done(inode);
#line 485
    nfs_direct_req_release(dreq);
    }
#line 486
    return (result < 0L ? result : -5L);
  } else {

  }
  {
#line 489
  tmp___3 = put_dreq(dreq);
  }
#line 489
  if (tmp___3 != 0) {
    {
#line 490
    nfs_direct_complete(dreq, 0);
    }
  } else {

  }
#line 491
  return (0L);
}
}
#line 514 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
ssize_t nfs_file_direct_read(struct kiocb *iocb , struct iov_iter *iter , loff_t pos ,
                             bool uio ) 
{ 
  struct file *file ;
  struct address_space *mapping ;
  struct inode *inode ;
  struct nfs_direct_req *dreq ;
  struct nfs_lock_context *l_ctx ;
  ssize_t result ;
  size_t count ;
  size_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct nfs_open_context *tmp___2 ;
  bool tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;
  struct nfs_inode *tmp___6 ;
  struct nfs_inode *tmp___7 ;

  {
  {
#line 517
  file = iocb->ki_filp;
#line 518
  mapping = file->f_mapping;
#line 519
  inode = mapping->host;
#line 522
  result = -22L;
#line 523
  tmp = iov_iter_count(iter);
#line 523
  count = tmp;
#line 524
  nfs_add_stats___0((struct inode  const  *)mapping->host, 2, (long )count);
#line 526
  tmp___0 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 526
  if (tmp___0 != 0L) {
    {
#line 526
    printk("\001dNFS: direct read(%pD2, %zd@%Ld)\n", file, count, pos);
    }
  } else {

  }
#line 529
  result = 0L;
#line 530
  if (count == 0UL) {
#line 531
    goto out;
  } else {

  }
  {
#line 533
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 534
  tmp___1 = nfs_sync_mapping(mapping);
#line 534
  result = (ssize_t )tmp___1;
  }
#line 535
  if (result != 0L) {
#line 536
    goto out_unlock;
  } else {

  }
  {
#line 538
  task_io_account_read(count);
#line 540
  result = -12L;
#line 541
  dreq = nfs_direct_req_alloc();
  }
#line 542
  if ((unsigned long )dreq == (unsigned long )((struct nfs_direct_req *)0)) {
#line 543
    goto out_unlock;
  } else {

  }
  {
#line 545
  dreq->inode = inode;
#line 546
  dreq->bytes_left = (ssize_t )count;
#line 547
  tmp___2 = nfs_file_open_context(iocb->ki_filp);
#line 547
  dreq->ctx = get_nfs_open_context(tmp___2);
#line 548
  l_ctx = nfs_get_lock_context(dreq->ctx);
#line 549
  tmp___3 = IS_ERR((void const   *)l_ctx);
  }
#line 549
  if ((int )tmp___3) {
    {
#line 550
    result = PTR_ERR((void const   *)l_ctx);
    }
#line 551
    goto out_release;
  } else {

  }
  {
#line 553
  dreq->l_ctx = l_ctx;
#line 554
  tmp___4 = is_sync_kiocb(iocb);
  }
#line 554
  if (tmp___4) {
#line 554
    tmp___5 = 0;
  } else {
#line 554
    tmp___5 = 1;
  }
#line 554
  if (tmp___5) {
#line 555
    dreq->iocb = iocb;
  } else {

  }
  {
#line 557
  tmp___6 = NFS_I((struct inode  const  *)inode);
#line 557
  tmp___7 = NFS_I((struct inode  const  *)inode);
#line 557
  tmp___6->read_io = tmp___7->read_io + (unsigned long long )count;
#line 558
  result = nfs_direct_read_schedule_iovec(dreq, iter, pos);
#line 560
  mutex_unlock(& inode->i_mutex);
  }
#line 562
  if (result == 0L) {
    {
#line 563
    result = nfs_direct_wait(dreq);
    }
#line 564
    if (result > 0L) {
#line 565
      iocb->ki_pos = pos + (long long )result;
    } else {

    }
  } else {

  }
  {
#line 568
  nfs_direct_req_release(dreq);
  }
#line 569
  return (result);
  out_release: 
  {
#line 572
  nfs_direct_req_release(dreq);
  }
  out_unlock: 
  {
#line 574
  mutex_unlock(& inode->i_mutex);
  }
  out: ;
#line 576
  return (result);
}
}
#line 580 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_write_reschedule(struct nfs_direct_req *dreq ) 
{ 
  struct nfs_pageio_descriptor desc ;
  struct nfs_page *req ;
  struct nfs_page *tmp ;
  struct list_head reqs ;
  struct nfs_commit_info cinfo ;
  struct list_head failed ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp___0 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 584
  reqs.next = & reqs;
#line 584
  reqs.prev = & reqs;
#line 586
  failed.next = & failed;
#line 586
  failed.prev = & failed;
#line 588
  nfs_init_cinfo_from_dreq(& cinfo, dreq);
#line 589
  pnfs_recover_commit_reqs(dreq->inode, & reqs, & cinfo);
#line 590
  ldv_spin_lock_80___2(cinfo.lock);
#line 591
  nfs_scan_commit_list(& (cinfo.mds)->list, & reqs, & cinfo, 0);
#line 592
  ldv_spin_unlock_81___2(cinfo.lock);
#line 594
  dreq->count = 0L;
#line 595
  get_dreq(dreq);
#line 597
  nfs_pageio_init_write(& desc, dreq->inode, 4, 0, & nfs_direct_write_completion_ops);
#line 599
  desc.pg_dreq = dreq;
#line 601
  __mptr = (struct list_head  const  *)reqs.next;
#line 601
  req = (struct nfs_page *)__mptr;
#line 601
  __mptr___0 = (struct list_head  const  *)req->wb_list.next;
#line 601
  tmp = (struct nfs_page *)__mptr___0;
  }
#line 601
  goto ldv_54541;
  ldv_54540: 
  {
#line 602
  tmp___0 = nfs_pageio_add_request(& desc, req);
  }
#line 602
  if (tmp___0 == 0) {
    {
#line 603
    nfs_list_remove_request(req);
#line 604
    nfs_list_add_request(req, & failed);
#line 605
    ldv_spin_lock_80___2(cinfo.lock);
#line 606
    dreq->flags = 0;
#line 607
    dreq->error = -5L;
#line 608
    ldv_spin_unlock_81___2(cinfo.lock);
    }
  } else {

  }
  {
#line 610
  nfs_release_request(req);
#line 601
  req = tmp;
#line 601
  __mptr___1 = (struct list_head  const  *)tmp->wb_list.next;
#line 601
  tmp = (struct nfs_page *)__mptr___1;
  }
  ldv_54541: ;
#line 601
  if ((unsigned long )(& req->wb_list) != (unsigned long )(& reqs)) {
#line 603
    goto ldv_54540;
  } else {

  }
  {
#line 612
  nfs_pageio_complete(& desc);
  }
#line 614
  goto ldv_54544;
  ldv_54543: 
  {
#line 615
  req = nfs_list_entry(failed.next);
#line 616
  nfs_list_remove_request(req);
#line 617
  nfs_unlock_and_release_request(req);
  }
  ldv_54544: 
  {
#line 614
  tmp___1 = list_empty((struct list_head  const  *)(& failed));
  }
#line 614
  if (tmp___1 == 0) {
#line 616
    goto ldv_54543;
  } else {

  }
  {
#line 620
  tmp___2 = put_dreq(dreq);
  }
#line 620
  if (tmp___2 != 0) {
    {
#line 621
    nfs_direct_write_complete(dreq, dreq->inode);
    }
  } else {

  }
#line 622
  return;
}
}
#line 624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_commit_complete(struct nfs_commit_data *data ) 
{ 
  struct nfs_direct_req *dreq ;
  struct nfs_commit_info cinfo ;
  struct nfs_page *req ;
  int status ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 626
  dreq = data->dreq;
#line 629
  status = data->task.tk_status;
#line 631
  nfs_init_cinfo_from_dreq(& cinfo, dreq);
  }
#line 632
  if (status < 0) {
    {
#line 633
    tmp = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
    }
#line 633
    if (tmp != 0L) {
      {
#line 633
      printk("\001dNFS: %5u commit failed with error %d.\n", (int )data->task.tk_pid,
             status);
      }
    } else {

    }
#line 635
    dreq->flags = 2;
  } else {
    {
#line 636
    tmp___1 = nfs_direct_cmp_commit_data_verf(dreq, data);
    }
#line 636
    if (tmp___1 != 0) {
      {
#line 637
      tmp___0 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
      }
#line 637
      if (tmp___0 != 0L) {
        {
#line 637
        printk("\001dNFS: %5u commit verify failed\n", (int )data->task.tk_pid);
        }
      } else {

      }
#line 638
      dreq->flags = 2;
    } else {

    }
  }
  {
#line 641
  tmp___2 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 641
  if (tmp___2 != 0L) {
    {
#line 641
    printk("\001dNFS: %5u commit returned %d\n", (int )data->task.tk_pid, status);
    }
  } else {

  }
#line 642
  goto ldv_54554;
  ldv_54553: 
  {
#line 643
  req = nfs_list_entry(data->pages.next);
#line 644
  nfs_list_remove_request(req);
  }
#line 645
  if (dreq->flags == 2) {
    {
#line 647
    nfs_mark_request_commit(req, (struct pnfs_layout_segment *)0, & cinfo);
    }
  } else {
    {
#line 649
    nfs_release_request(req);
    }
  }
  {
#line 650
  nfs_unlock_and_release_request(req);
  }
  ldv_54554: 
  {
#line 642
  tmp___3 = list_empty((struct list_head  const  *)(& data->pages));
  }
#line 642
  if (tmp___3 == 0) {
#line 644
    goto ldv_54553;
  } else {

  }
  {
#line 653
  tmp___4 = atomic_dec_and_test(& (cinfo.mds)->rpcs_out);
  }
#line 653
  if (tmp___4 != 0) {
    {
#line 654
    nfs_direct_write_complete(dreq, data->inode);
    }
  } else {

  }
#line 655
  return;
}
}
#line 657 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_error_cleanup(struct nfs_inode *nfsi ) 
{ 


  {
#line 659
  return;
}
}
#line 662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static struct nfs_commit_completion_ops  const  nfs_direct_commit_completion_ops  =    {& nfs_direct_error_cleanup,
    & nfs_direct_commit_complete};
#line 667 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_commit_schedule(struct nfs_direct_req *dreq ) 
{ 
  int res ;
  struct nfs_commit_info cinfo ;
  struct list_head mds_list ;

  {
  {
#line 671
  mds_list.next = & mds_list;
#line 671
  mds_list.prev = & mds_list;
#line 673
  nfs_init_cinfo_from_dreq(& cinfo, dreq);
#line 674
  nfs_scan_commit(dreq->inode, & mds_list, & cinfo);
#line 675
  res = nfs_generic_commit_list(dreq->inode, & mds_list, 0, & cinfo);
  }
#line 676
  if (res < 0) {
    {
#line 677
    nfs_direct_write_reschedule(dreq);
    }
  } else {

  }
#line 678
  return;
}
}
#line 680 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_write_schedule_work(struct work_struct *work ) 
{ 
  struct nfs_direct_req *dreq ;
  struct work_struct  const  *__mptr ;
  int flags ;

  {
#line 682
  __mptr = (struct work_struct  const  *)work;
#line 682
  dreq = (struct nfs_direct_req *)((char *)__mptr + 0xfffffffffffffed8UL);
#line 683
  flags = dreq->flags;
#line 685
  dreq->flags = 0;
  {
#line 687
  if (flags == 1) {
#line 687
    goto case_1;
  } else {

  }
#line 690
  if (flags == 2) {
#line 690
    goto case_2;
  } else {

  }
#line 693
  goto switch_default;
  case_1: /* CIL Label */ 
  {
#line 688
  nfs_direct_commit_schedule(dreq);
  }
#line 689
  goto ldv_54574;
  case_2: /* CIL Label */ 
  {
#line 691
  nfs_direct_write_reschedule(dreq);
  }
#line 692
  goto ldv_54574;
  switch_default: /* CIL Label */ 
  {
#line 694
  nfs_direct_complete(dreq, 1);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_54574: ;
#line 697
  return;
}
}
#line 698 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_write_complete(struct nfs_direct_req *dreq , struct inode *inode ) 
{ 


  {
  {
#line 700
  schedule_work(& dreq->work);
  }
#line 701
  return;
}
}
#line 714 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_direct_write_completion(struct nfs_pgio_header *hdr ) 
{ 
  struct nfs_direct_req *dreq ;
  struct nfs_commit_info cinfo ;
  int bit ;
  struct nfs_page *req ;
  struct nfs_page *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
  {
#line 716
  dreq = hdr->dreq;
#line 718
  bit = -1;
#line 719
  tmp = nfs_list_entry(hdr->pages.next);
#line 719
  req = tmp;
#line 721
  tmp___0 = constant_test_bit(2L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 721
  if (tmp___0 != 0) {
#line 722
    goto out_put;
  } else {

  }
  {
#line 724
  nfs_init_cinfo_from_dreq(& cinfo, dreq);
#line 726
  ldv_spin_lock_78___1(& dreq->lock);
#line 728
  tmp___1 = constant_test_bit(0L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 728
  if (tmp___1 != 0) {
#line 729
    dreq->flags = 0;
#line 730
    dreq->error = (ssize_t )hdr->error;
  } else {

  }
#line 732
  if (dreq->error != 0L) {
#line 733
    bit = 0;
  } else {
    {
#line 735
    dreq->count = (ssize_t )((unsigned long )dreq->count + hdr->good_bytes);
#line 736
    tmp___4 = constant_test_bit(4L, (unsigned long const volatile   *)(& hdr->flags));
    }
#line 736
    if (tmp___4 != 0) {
#line 737
      dreq->flags = 2;
#line 738
      bit = 4;
    } else {
      {
#line 739
      tmp___3 = constant_test_bit(3L, (unsigned long const volatile   *)(& hdr->flags));
      }
#line 739
      if (tmp___3 != 0) {
#line 740
        if (dreq->flags == 2) {
#line 741
          bit = 4;
        } else
#line 742
        if (dreq->flags == 0) {
          {
#line 743
          nfs_direct_set_hdr_verf(dreq, hdr);
#line 744
          bit = 3;
#line 745
          dreq->flags = 1;
          }
        } else
#line 746
        if (dreq->flags == 1) {
          {
#line 747
          tmp___2 = nfs_direct_set_or_cmp_hdr_verf(dreq, hdr);
          }
#line 747
          if (tmp___2 != 0) {
#line 748
            dreq->flags = 2;
#line 750
            bit = 4;
          } else {
#line 752
            bit = 3;
          }
        } else {

        }
      } else {

      }
    }
  }
  {
#line 756
  ldv_spin_unlock_79___2(& dreq->lock);
  }
#line 758
  goto ldv_54592;
  ldv_54591: 
  {
#line 760
  req = nfs_list_entry(hdr->pages.next);
#line 761
  nfs_list_remove_request(req);
  }
  {
#line 763
  if (bit == 4) {
#line 763
    goto case_4;
  } else {

  }
#line 764
  if (bit == 3) {
#line 764
    goto case_3;
  } else {

  }
#line 762
  goto switch_break;
  case_4: /* CIL Label */ ;
  case_3: /* CIL Label */ 
  {
#line 765
  kref_get(& req->wb_kref);
#line 766
  nfs_mark_request_commit(req, hdr->lseg, & cinfo);
  }
  switch_break: /* CIL Label */ ;
  }
  {
#line 768
  nfs_unlock_and_release_request(req);
  }
  ldv_54592: 
  {
#line 758
  tmp___5 = list_empty((struct list_head  const  *)(& hdr->pages));
  }
#line 758
  if (tmp___5 == 0) {
#line 760
    goto ldv_54591;
  } else {

  }

  out_put: 
  {
#line 772
  tmp___6 = put_dreq(dreq);
  }
#line 772
  if (tmp___6 != 0) {
    {
#line 773
    nfs_direct_write_complete(dreq, hdr->inode);
    }
  } else {

  }
  {
#line 774
  (*(hdr->release))(hdr);
  }
#line 775
  return;
}
}
#line 777 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static void nfs_write_sync_pgio_error(struct list_head *head ) 
{ 
  struct nfs_page *req ;
  int tmp ;

  {
#line 781
  goto ldv_54599;
  ldv_54598: 
  {
#line 782
  req = nfs_list_entry(head->next);
#line 783
  nfs_list_remove_request(req);
#line 784
  nfs_unlock_and_release_request(req);
  }
  ldv_54599: 
  {
#line 781
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 781
  if (tmp == 0) {
#line 783
    goto ldv_54598;
  } else {

  }

#line 788
  return;
}
}
#line 788 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static struct nfs_pgio_completion_ops  const  nfs_direct_write_completion_ops  =    {& nfs_write_sync_pgio_error,
    & nfs_direct_pgio_init, & nfs_direct_write_completion};
#line 806 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
static ssize_t nfs_direct_write_schedule_iovec(struct nfs_direct_req *dreq , struct iov_iter *iter ,
                                               loff_t pos ) 
{ 
  struct nfs_pageio_descriptor desc ;
  struct inode *inode ;
  ssize_t result ;
  size_t requested_bytes ;
  size_t wsize ;
  size_t __max1 ;
  struct nfs_server *tmp ;
  size_t __max2 ;
  struct nfs_inode *tmp___0 ;
  struct nfs_inode *tmp___1 ;
  size_t tmp___2 ;
  struct page **pagevec ;
  size_t bytes ;
  size_t pgbase ;
  unsigned int npages ;
  unsigned int i ;
  struct nfs_page *req ;
  unsigned int req_len ;
  size_t __min1 ;
  size_t __min2 ;
  bool tmp___3 ;
  int tmp___4 ;
  size_t tmp___5 ;
  int tmp___6 ;

  {
  {
#line 811
  inode = dreq->inode;
#line 812
  result = 0L;
#line 813
  requested_bytes = 0UL;
#line 814
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 814
  __max1 = (size_t )tmp->wsize;
#line 814
  __max2 = 4096UL;
#line 814
  wsize = __max1 > __max2 ? __max1 : __max2;
#line 816
  nfs_pageio_init_write(& desc, inode, 32, 0, & nfs_direct_write_completion_ops);
#line 818
  desc.pg_dreq = dreq;
#line 819
  get_dreq(dreq);
#line 820
  atomic_inc(& inode->i_dio_count);
#line 822
  tmp___0 = NFS_I((struct inode  const  *)inode);
#line 822
  tmp___1 = NFS_I((struct inode  const  *)inode);
#line 822
  tmp___2 = iov_iter_count(iter);
#line 822
  tmp___0->write_io = tmp___1->write_io + (unsigned long long )tmp___2;
  }
#line 823
  goto ldv_54630;
  ldv_54629: 
  {
#line 829
  result = iov_iter_get_pages_alloc(iter, & pagevec, wsize, & pgbase);
  }
#line 831
  if (result < 0L) {
#line 832
    goto ldv_54620;
  } else {

  }
  {
#line 834
  bytes = (size_t )result;
#line 835
  iov_iter_advance(iter, bytes);
#line 836
  npages = (unsigned int )((((unsigned long )result + pgbase) + 4095UL) / 4096UL);
#line 837
  i = 0U;
  }
#line 837
  goto ldv_54628;
  ldv_54627: 
  {
#line 839
  __min1 = bytes;
#line 839
  __min2 = 4096UL - pgbase;
#line 839
  req_len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 841
  req = nfs_create_request(dreq->ctx, *(pagevec + (unsigned long )i), (struct nfs_page *)0,
                           (unsigned int )pgbase, req_len);
#line 843
  tmp___3 = IS_ERR((void const   *)req);
  }
#line 843
  if ((int )tmp___3) {
    {
#line 844
    result = PTR_ERR((void const   *)req);
    }
#line 845
    goto ldv_54626;
  } else {

  }
  {
#line 847
  nfs_lock_request(req);
#line 848
  req->wb_index = (unsigned long )(pos >> 12);
#line 849
  req->wb_offset = (unsigned int )pos & 4095U;
#line 850
  tmp___4 = nfs_pageio_add_request(& desc, req);
  }
#line 850
  if (tmp___4 == 0) {
    {
#line 851
    result = (ssize_t )desc.pg_error;
#line 852
    nfs_unlock_and_release_request(req);
    }
#line 853
    goto ldv_54626;
  } else {

  }
#line 855
  pgbase = 0UL;
#line 856
  bytes = bytes - (size_t )req_len;
#line 857
  requested_bytes = requested_bytes + (size_t )req_len;
#line 858
  pos = pos + (loff_t )req_len;
#line 859
  dreq->bytes_left = dreq->bytes_left - (ssize_t )req_len;
#line 837
  i = i + 1U;
  ldv_54628: ;
#line 837
  if (i < npages) {
#line 839
    goto ldv_54627;
  } else {

  }
  ldv_54626: 
  {
#line 861
  nfs_direct_release_pages(pagevec, npages);
#line 862
  kvfree((void const   *)pagevec);
  }
#line 863
  if (result < 0L) {
#line 864
    goto ldv_54620;
  } else {

  }
  ldv_54630: 
  {
#line 823
  tmp___5 = iov_iter_count(iter);
  }
#line 823
  if (tmp___5 != 0UL) {
#line 825
    goto ldv_54629;
  } else {

  }
  ldv_54620: 
  {
#line 866
  nfs_pageio_complete(& desc);
  }
#line 872
  if (requested_bytes == 0UL) {
    {
#line 873
    inode_dio_done(inode);
#line 874
    nfs_direct_req_release(dreq);
    }
#line 875
    return (result < 0L ? result : -5L);
  } else {

  }
  {
#line 878
  tmp___6 = put_dreq(dreq);
  }
#line 878
  if (tmp___6 != 0) {
    {
#line 879
    nfs_direct_write_complete(dreq, dreq->inode);
    }
  } else {

  }
#line 880
  return (0L);
}
}
#line 904 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
ssize_t nfs_file_direct_write(struct kiocb *iocb , struct iov_iter *iter , loff_t pos ,
                              bool uio ) 
{ 
  ssize_t result ;
  struct file *file ;
  struct address_space *mapping ;
  struct inode *inode ;
  struct nfs_direct_req *dreq ;
  struct nfs_lock_context *l_ctx ;
  loff_t end ;
  size_t count ;
  size_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct nfs_open_context *tmp___4 ;
  bool tmp___5 ;
  bool tmp___6 ;
  int tmp___7 ;
  struct inode *inode___0 ;
  loff_t tmp___8 ;

  {
  {
#line 907
  result = -22L;
#line 908
  file = iocb->ki_filp;
#line 909
  mapping = file->f_mapping;
#line 910
  inode = mapping->host;
#line 914
  tmp = iov_iter_count(iter);
#line 914
  count = tmp;
#line 915
  end = (loff_t )((((unsigned long long )pos + (unsigned long long )count) - 1ULL) >> 12);
#line 917
  nfs_add_stats___0((struct inode  const  *)mapping->host, 3, (long )count);
#line 919
  tmp___0 = __builtin_expect((nfs_debug & 64U) != 0U, 0L);
  }
#line 919
  if (tmp___0 != 0L) {
    {
#line 919
    printk("\001dNFS: direct write(%pD2, %zd@%Ld)\n", file, count, pos);
    }
  } else {

  }
  {
#line 922
  tmp___1 = generic_write_checks(file, & pos, & count, 0);
#line 922
  result = (ssize_t )tmp___1;
  }
#line 923
  if (result != 0L) {
#line 924
    goto out;
  } else {

  }
#line 926
  result = -22L;
#line 927
  if ((long )count < 0L) {
#line 928
    goto out;
  } else {

  }
#line 929
  result = 0L;
#line 930
  if (count == 0UL) {
#line 931
    goto out;
  } else {

  }
  {
#line 933
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 935
  tmp___2 = nfs_sync_mapping(mapping);
#line 935
  result = (ssize_t )tmp___2;
  }
#line 936
  if (result != 0L) {
#line 937
    goto out_unlock;
  } else {

  }
#line 939
  if (mapping->nrpages != 0UL) {
    {
#line 940
    tmp___3 = invalidate_inode_pages2_range(mapping, (unsigned long )(pos >> 12),
                                            (unsigned long )end);
#line 940
    result = (ssize_t )tmp___3;
    }
#line 942
    if (result != 0L) {
#line 943
      goto out_unlock;
    } else {

    }
  } else {

  }
  {
#line 946
  task_io_account_write(count);
#line 948
  result = -12L;
#line 949
  dreq = nfs_direct_req_alloc();
  }
#line 950
  if ((unsigned long )dreq == (unsigned long )((struct nfs_direct_req *)0)) {
#line 951
    goto out_unlock;
  } else {

  }
  {
#line 953
  dreq->inode = inode;
#line 954
  dreq->bytes_left = (ssize_t )count;
#line 955
  tmp___4 = nfs_file_open_context(iocb->ki_filp);
#line 955
  dreq->ctx = get_nfs_open_context(tmp___4);
#line 956
  l_ctx = nfs_get_lock_context(dreq->ctx);
#line 957
  tmp___5 = IS_ERR((void const   *)l_ctx);
  }
#line 957
  if ((int )tmp___5) {
    {
#line 958
    result = PTR_ERR((void const   *)l_ctx);
    }
#line 959
    goto out_release;
  } else {

  }
  {
#line 961
  dreq->l_ctx = l_ctx;
#line 962
  tmp___6 = is_sync_kiocb(iocb);
  }
#line 962
  if (tmp___6) {
#line 962
    tmp___7 = 0;
  } else {
#line 962
    tmp___7 = 1;
  }
#line 962
  if (tmp___7) {
#line 963
    dreq->iocb = iocb;
  } else {

  }
  {
#line 965
  result = nfs_direct_write_schedule_iovec(dreq, iter, pos);
  }
#line 967
  if (mapping->nrpages != 0UL) {
    {
#line 968
    invalidate_inode_pages2_range(mapping, (unsigned long )(pos >> 12), (unsigned long )end);
    }
  } else {

  }
  {
#line 972
  mutex_unlock(& inode->i_mutex);
  }
#line 974
  if (result == 0L) {
    {
#line 975
    result = nfs_direct_wait(dreq);
    }
#line 976
    if (result > 0L) {
      {
#line 977
      inode___0 = mapping->host;
#line 979
      iocb->ki_pos = pos + (long long )result;
#line 980
      ldv_spin_lock_72(& inode___0->i_lock);
#line 981
      tmp___8 = i_size_read((struct inode  const  *)inode___0);
      }
#line 981
      if (tmp___8 < iocb->ki_pos) {
        {
#line 982
        i_size_write(inode___0, iocb->ki_pos);
        }
      } else {

      }
      {
#line 983
      ldv_spin_unlock_73(& inode___0->i_lock);
      }
    } else {

    }
  } else {

  }
  {
#line 986
  nfs_direct_req_release(dreq);
  }
#line 987
  return (result);
  out_release: 
  {
#line 990
  nfs_direct_req_release(dreq);
  }
  out_unlock: 
  {
#line 992
  mutex_unlock(& inode->i_mutex);
  }
  out: ;
#line 994
  return (result);
}
}
#line 1001 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
int nfs_init_directcache(void) 
{ 


  {
  {
#line 1003
  nfs_direct_cachep = kmem_cache_create("nfs_direct_cache", 392UL, 0UL, 1179648UL,
                                        (void (*)(void * ))0);
  }
#line 1008
  if ((unsigned long )nfs_direct_cachep == (unsigned long )((struct kmem_cache *)0)) {
#line 1009
    return (-12);
  } else {

  }
#line 1011
  return (0);
}
}
#line 1018 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/direct.c"
void nfs_destroy_directcache(void) 
{ 


  {
  {
#line 1020
  kmem_cache_destroy(nfs_direct_cachep);
  }
#line 1021
  return;
}
}
#line 928 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_direct.c.aux"
__inline static void ldv_spin_lock_78___1(spinlock_t *lock ) 
{ 


  {
  {
#line 931
  ldv_spin_lock_lock_of_nfs_direct_req();
#line 933
  spin_lock(lock);
  }
#line 934
  return;
}
}
#line 937 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_direct.c.aux"
__inline static void ldv_spin_unlock_79___2(spinlock_t *lock ) 
{ 


  {
  {
#line 940
  ldv_spin_unlock_lock_of_nfs_direct_req();
#line 942
  spin_unlock(lock);
  }
#line 943
  return;
}
}
#line 946 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_direct.c.aux"
__inline static void ldv_spin_lock_80___2(spinlock_t *lock ) 
{ 


  {
  {
#line 949
  ldv_spin_lock_lock_of_nfs_commit_info();
#line 951
  spin_lock(lock);
  }
#line 952
  return;
}
}
#line 955 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_direct.c.aux"
__inline static void ldv_spin_unlock_81___2(spinlock_t *lock ) 
{ 


  {
  {
#line 958
  ldv_spin_unlock_lock_of_nfs_commit_info();
#line 960
  spin_unlock(lock);
  }
#line 961
  return;
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kcalloc(size_t n , size_t size , gfp_t flags ) ;
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
  }
#line 321
  if (tmp == 0) {
    {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
    }
  } else {

  }
#line 325
  return;
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_pagelist.c.aux"
void ldv_spin_lock_lock_of_nfs_pgio_header(void) ;
#line 142
void ldv_spin_unlock_lock_of_nfs_pgio_header(void) ;
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_76___3(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_77___2(spinlock_t *lock ) ;
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
extern int out_of_line_wait_on_bit_lock(void * , int  , int (*)(void * ) , unsigned int  ) ;
#line 157
extern wait_queue_head_t *bit_waitqueue(void * , int  ) ;
#line 821
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 827
extern int wake_bit_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 896 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/wait.h"
__inline static int wait_on_bit_lock(void *word , int bit , int (*action)(void * ) ,
                                     unsigned int mode ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 898
  tmp = test_and_set_bit((long )bit, (unsigned long volatile   *)word);
  }
#line 898
  if (tmp == 0) {
#line 899
    return (0);
  } else {

  }
  {
#line 900
  tmp___0 = out_of_line_wait_on_bit_lock(word, bit, action, mode);
  }
#line 900
  return (tmp___0);
}
}
#line 8 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mmdebug.h"
extern void dump_page(struct page * , char const   * ) ;
#line 349 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
  {
#line 349
  tmp = constant_test_bit(15L, (unsigned long const volatile   *)(& page->flags));
  }
#line 349
  return (tmp);
}
}
#line 498 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
extern bool __get_page_tail(struct page * ) ;
#line 500 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  bool tmp ;
  long tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;

  {
  {
#line 502
  tmp___1 = PageTail((struct page  const  *)page);
#line 502
  tmp___2 = __builtin_expect(tmp___1 != 0, 0L);
  }
#line 502
  if (tmp___2 != 0L) {
    {
#line 503
    tmp = __get_page_tail(page);
#line 503
    tmp___0 = __builtin_expect((long )tmp, 1L);
    }
#line 503
    if (tmp___0 != 0L) {
#line 504
      return;
    } else {

    }
  } else {

  }
  {
#line 509
  tmp___3 = atomic_read((atomic_t const   *)(& page->__annonCompField53.__annonCompField52.__annonCompField51._count));
#line 509
  tmp___4 = __builtin_expect(tmp___3 <= 0, 0L);
  }
#line 509
  if (tmp___4 != 0L) {
    {
#line 509
    dump_page(page, "VM_BUG_ON_PAGE(atomic_read(&page->_count) <= 0)");
#line 509
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (509), "i" (12UL));
#line 509
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 510
  atomic_inc(& page->__annonCompField53.__annonCompField52.__annonCompField51._count);
  }
#line 511
  return;
}
}
#line 576 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) ;
#line 325 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
extern void io_schedule(void) ;
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
extern struct rpc_task *rpc_run_task(struct rpc_task_setup  const  * ) ;
#line 213
extern void rpc_exit(struct rpc_task * , int  ) ;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_page.h"
void nfs_pageio_init(struct nfs_pageio_descriptor *desc , struct inode *inode , struct nfs_pageio_ops  const  *pg_ops ,
                     struct nfs_pgio_completion_ops  const  *compl_ops , struct nfs_rw_ops  const  *rw_ops ,
                     size_t bsize , int io_flags ) ;
#line 116
void nfs_pageio_cond_complete(struct nfs_pageio_descriptor *desc , unsigned long index ) ;
#line 117
size_t nfs_generic_pg_test(struct nfs_pageio_descriptor *desc , struct nfs_page *prev ,
                           struct nfs_page *req ) ;
#line 120
int nfs_wait_on_request(struct nfs_page *req ) ;
#line 121
void nfs_unlock_request(struct nfs_page *req ) ;
#line 123
int nfs_page_group_lock(struct nfs_page *req , bool nonblock ) ;
#line 124
void nfs_page_group_unlock(struct nfs_page *req ) ;
#line 125
bool nfs_page_group_sync_on_bit(struct nfs_page *req , unsigned int bit ) ;
#line 234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
void nfs_pgheader_init(struct nfs_pageio_descriptor *desc , struct nfs_pgio_header *hdr ,
                       void (*release)(struct nfs_pgio_header * ) ) ;
#line 237
void nfs_set_pgio_error(struct nfs_pgio_header *hdr , int error , loff_t pos ) ;
#line 240
struct nfs_pageio_ops  const  nfs_pgio_rw_ops ;
#line 241
struct nfs_pgio_header *nfs_pgio_header_alloc(struct nfs_rw_ops  const  *ops ) ;
#line 242
void nfs_pgio_header_free(struct nfs_pgio_header *hdr ) ;
#line 243
void nfs_pgio_data_destroy(struct nfs_pgio_header *hdr ) ;
#line 244
int nfs_generic_pgio(struct nfs_pageio_descriptor *desc , struct nfs_pgio_header *hdr ) ;
#line 245
int nfs_initiate_pgio(struct rpc_clnt *clnt , struct nfs_pgio_header *hdr , struct rpc_call_ops  const  *call_ops ,
                      int how , int flags ) ;
#line 247
void nfs_free_request(struct nfs_page *req ) ;
#line 439
unsigned long nfs_reqs_to_commit(struct nfs_commit_info *cinfo ) ;
#line 455
void nfs_init_cinfo(struct nfs_commit_info *cinfo , struct inode *inode , struct nfs_direct_req *dreq ) ;
#line 593 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static unsigned int nfs_page_array_len(unsigned int base , size_t len ) 
{ 


  {
#line 595
  return ((unsigned int )(((len + (unsigned long )base) + 4095UL) >> 12));
}
}
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static struct kmem_cache *nfs_page_cachep  ;
#line 30
static struct rpc_call_ops  const  nfs_pgio_common_ops ;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static bool nfs_pgarray_set(struct nfs_page_array *p , unsigned int pagecount ) 
{ 
  void *tmp ;

  {
#line 34
  p->npages = pagecount;
#line 35
  if (pagecount <= 8U) {
#line 36
    p->pagevec = (struct page **)(& p->page_array);
  } else {
    {
#line 38
    tmp = kcalloc((size_t )pagecount, 8UL, 208U);
#line 38
    p->pagevec = (struct page **)tmp;
    }
#line 39
    if ((unsigned long )p->pagevec == (unsigned long )((struct page **)0)) {
#line 40
      p->npages = 0U;
    } else {

    }
  }
#line 42
  return ((unsigned long )p->pagevec != (unsigned long )((struct page **)0));
}
}
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_pgheader_init(struct nfs_pageio_descriptor *desc , struct nfs_pgio_header *hdr ,
                       void (*release)(struct nfs_pgio_header * ) ) 
{ 


  {
  {
#line 49
  hdr->req = nfs_list_entry(desc->pg_list.next);
#line 50
  hdr->inode = desc->pg_inode;
#line 51
  hdr->cred = ((hdr->req)->wb_context)->cred;
#line 52
  hdr->io_start = req_offset(hdr->req);
#line 53
  hdr->good_bytes = desc->pg_count;
#line 54
  hdr->dreq = desc->pg_dreq;
#line 55
  hdr->layout_private = desc->pg_layout_private;
#line 56
  hdr->release = release;
#line 57
  hdr->completion_ops = desc->pg_completion_ops;
  }
#line 58
  if ((unsigned long )(hdr->completion_ops)->init_hdr != (unsigned long )((void (*/* const  */)(struct nfs_pgio_header * ))0)) {
    {
#line 59
    (*((hdr->completion_ops)->init_hdr))(hdr);
    }
  } else {

  }
#line 60
  return;
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_pgheader_init[18U]  = 
#line 61
  {      'n',      'f',      's',      '_', 
        'p',      'g',      'h',      'e', 
        'a',      'd',      'e',      'r', 
        '_',      'i',      'n',      'i', 
        't',      '\000'};
#line 61
struct kernel_symbol  const  __ksymtab_nfs_pgheader_init ;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_pgheader_init  =    {(unsigned long )(& nfs_pgheader_init), (char const   *)(& __kstrtab_nfs_pgheader_init)};
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_set_pgio_error(struct nfs_pgio_header *hdr , int error , loff_t pos ) 
{ 


  {
  {
#line 65
  ldv_spin_lock_76___3(& hdr->lock);
  }
#line 66
  if ((unsigned long long )pos < (unsigned long long )hdr->io_start + (unsigned long long )hdr->good_bytes) {
    {
#line 67
    set_bit(0L, (unsigned long volatile   *)(& hdr->flags));
#line 68
    clear_bit(1L, (unsigned long volatile   *)(& hdr->flags));
#line 69
    hdr->good_bytes = (unsigned long )(pos - hdr->io_start);
#line 70
    hdr->error = error;
    }
  } else {

  }
  {
#line 72
  ldv_spin_unlock_77___2(& hdr->lock);
  }
#line 73
  return;
}
}
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
__inline static struct nfs_page *nfs_page_alloc(void) 
{ 
  struct nfs_page *p ;
  void *tmp ;

  {
  {
#line 78
  tmp = kmem_cache_zalloc(nfs_page_cachep, 16U);
#line 78
  p = (struct nfs_page *)tmp;
  }
#line 79
  if ((unsigned long )p != (unsigned long )((struct nfs_page *)0)) {
    {
#line 80
    INIT_LIST_HEAD(& p->wb_list);
    }
  } else {

  }
#line 81
  return (p);
}
}
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
__inline static void nfs_page_free(struct nfs_page *p ) 
{ 


  {
  {
#line 87
  kmem_cache_free(nfs_page_cachep, (void *)p);
  }
#line 88
  return;
}
}
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_iocounter_inc(struct nfs_io_counter *c ) 
{ 


  {
  {
#line 93
  atomic_inc(& c->io_count);
  }
#line 94
  return;
}
}
#line 97 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_iocounter_dec(struct nfs_io_counter *c ) 
{ 
  int tmp ;

  {
  {
#line 99
  tmp = atomic_dec_and_test(& c->io_count);
  }
#line 99
  if (tmp != 0) {
    {
#line 100
    clear_bit(0L, (unsigned long volatile   *)(& c->flags));
#line 101
    __asm__  volatile   ("": : : "memory");
#line 102
    wake_up_bit((void *)(& c->flags), 0);
    }
  } else {

  }
#line 104
  return;
}
}
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static int __nfs_iocounter_wait(struct nfs_io_counter *c ) 
{ 
  wait_queue_head_t *wq ;
  wait_queue_head_t *tmp ;
  struct wait_bit_queue q ;
  struct task_struct *tmp___0 ;
  int ret ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 109
  tmp = bit_waitqueue((void *)(& c->flags), 0);
#line 109
  wq = tmp;
#line 110
  tmp___0 = get_current();
#line 110
  q.key.flags = (void *)(& c->flags);
#line 110
  q.key.bit_nr = 0;
#line 110
  q.wait.flags = 0U;
#line 110
  q.wait.private = (void *)tmp___0;
#line 110
  q.wait.func = & wake_bit_function;
#line 110
  q.wait.task_list.next = & q.wait.task_list;
#line 110
  q.wait.task_list.prev = & q.wait.task_list;
#line 111
  ret = 0;
  }
  ldv_53348: 
  {
#line 114
  prepare_to_wait(wq, & q.wait, 130);
#line 115
  set_bit(0L, (unsigned long volatile   *)(& c->flags));
#line 116
  tmp___1 = atomic_read((atomic_t const   *)(& c->io_count));
  }
#line 116
  if (tmp___1 == 0) {
#line 117
    goto ldv_53347;
  } else {

  }
  {
#line 118
  ret = nfs_wait_bit_killable((void *)(& c->flags));
#line 119
  tmp___2 = atomic_read((atomic_t const   *)(& c->io_count));
  }
#line 119
  if (tmp___2 != 0) {
#line 121
    goto ldv_53348;
  } else {

  }
  ldv_53347: 
  {
#line 120
  finish_wait(wq, & q.wait);
  }
#line 121
  return (ret);
}
}
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
int nfs_iocounter_wait(struct nfs_io_counter *c ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 134
  tmp = atomic_read((atomic_t const   *)(& c->io_count));
  }
#line 134
  if (tmp == 0) {
#line 135
    return (0);
  } else {

  }
  {
#line 136
  tmp___0 = __nfs_iocounter_wait(c);
  }
#line 136
  return (tmp___0);
}
}
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static int nfs_wait_bit_uninterruptible(void *word ) 
{ 


  {
  {
#line 141
  io_schedule();
  }
#line 142
  return (0);
}
}
#line 160 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
int nfs_page_group_lock(struct nfs_page *req , bool nonblock ) 
{ 
  struct nfs_page *head ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 162
  head = req->wb_head;
#line 164
  __ret_warn_once = (unsigned long )head != (unsigned long )head->wb_head;
#line 164
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 164
  if (tmp___1 != 0L) {
    {
#line 164
    __ret_warn_on = ! __warned;
#line 164
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 164
    if (tmp != 0L) {
      {
#line 164
      warn_slowpath_null("fs/nfs/pagelist.c", 164);
      }
    } else {

    }
    {
#line 164
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 164
    if (tmp___0 != 0L) {
#line 164
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 164
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 166
  tmp___2 = test_and_set_bit(5L, (unsigned long volatile   *)(& head->wb_flags));
  }
#line 166
  if (tmp___2 == 0) {
#line 167
    return (0);
  } else {

  }
#line 169
  if (! nonblock) {
    {
#line 170
    tmp___3 = wait_on_bit_lock((void *)(& head->wb_flags), 5, & nfs_wait_bit_uninterruptible,
                               2U);
    }
#line 170
    return (tmp___3);
  } else {

  }
#line 174
  return (-11);
}
}
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_page_group_unlock(struct nfs_page *req ) 
{ 
  struct nfs_page *head ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 184
  head = req->wb_head;
#line 186
  __ret_warn_once = (unsigned long )head != (unsigned long )head->wb_head;
#line 186
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 186
  if (tmp___1 != 0L) {
    {
#line 186
    __ret_warn_on = ! __warned;
#line 186
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 186
    if (tmp != 0L) {
      {
#line 186
      warn_slowpath_null("fs/nfs/pagelist.c", 186);
      }
    } else {

    }
    {
#line 186
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 186
    if (tmp___0 != 0L) {
#line 186
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 186
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 188
  __asm__  volatile   ("": : : "memory");
#line 189
  clear_bit(5L, (unsigned long volatile   *)(& head->wb_flags));
#line 190
  __asm__  volatile   ("": : : "memory");
#line 191
  wake_up_bit((void *)(& head->wb_flags), 5);
  }
#line 192
  return;
}
}
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static bool nfs_page_group_sync_on_bit_locked(struct nfs_page *req , unsigned int bit ) 
{ 
  struct nfs_page *head ;
  struct nfs_page *tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int tmp___4 ;
  int __ret_warn_on___0 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  int tmp___9 ;

  {
  {
#line 202
  head = req->wb_head;
#line 205
  tmp___0 = constant_test_bit(5L, (unsigned long const volatile   *)(& head->wb_flags));
#line 205
  __ret_warn_once = tmp___0 == 0;
#line 205
  tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 205
  if (tmp___3 != 0L) {
    {
#line 205
    __ret_warn_on = ! __warned;
#line 205
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 205
    if (tmp___1 != 0L) {
      {
#line 205
      warn_slowpath_null("fs/nfs/pagelist.c", 205);
      }
    } else {

    }
    {
#line 205
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 205
    if (tmp___2 != 0L) {
#line 205
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 205
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 206
  tmp___4 = test_and_set_bit((long )bit, (unsigned long volatile   *)(& req->wb_flags));
#line 206
  __ret_warn_once___0 = tmp___4 != 0;
#line 206
  tmp___7 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 206
  if (tmp___7 != 0L) {
    {
#line 206
    __ret_warn_on___0 = ! __warned___0;
#line 206
    tmp___5 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 206
    if (tmp___5 != 0L) {
      {
#line 206
      warn_slowpath_null("fs/nfs/pagelist.c", 206);
      }
    } else {

    }
    {
#line 206
    tmp___6 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 206
    if (tmp___6 != 0L) {
#line 206
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 206
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
#line 208
  tmp = req->wb_this_page;
  }
#line 209
  goto ldv_53391;
  ldv_53390: 
  {
#line 210
  tmp___9 = variable_test_bit((long )bit, (unsigned long const volatile   *)(& tmp->wb_flags));
  }
#line 210
  if (tmp___9 == 0) {
#line 211
    return (0);
  } else {

  }
#line 212
  tmp = tmp->wb_this_page;
  ldv_53391: ;
#line 209
  if ((unsigned long )tmp != (unsigned long )req) {
#line 211
    goto ldv_53390;
  } else {

  }
#line 216
  tmp = req;
  ldv_53393: 
  {
#line 218
  clear_bit((long )bit, (unsigned long volatile   *)(& tmp->wb_flags));
#line 219
  tmp = tmp->wb_this_page;
  }
#line 220
  if ((unsigned long )tmp != (unsigned long )req) {
#line 222
    goto ldv_53393;
  } else {

  }

#line 222
  return (1);
}
}
#line 231 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
bool nfs_page_group_sync_on_bit(struct nfs_page *req , unsigned int bit ) 
{ 
  bool ret ;

  {
  {
#line 235
  nfs_page_group_lock(req, 0);
#line 236
  ret = nfs_page_group_sync_on_bit_locked(req, bit);
#line 237
  nfs_page_group_unlock(req);
  }
#line 239
  return (ret);
}
}
#line 249 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
__inline static void nfs_page_group_init(struct nfs_page *req , struct nfs_page *prev ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int __ret_warn_on___0 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  bool __warned___1 ;
  int __ret_warn_once___1 ;
  int tmp___5 ;
  int __ret_warn_on___1 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;

  {
  {
#line 251
  __ret_warn_once = (unsigned long )prev == (unsigned long )req;
#line 251
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 251
  if (tmp___1 != 0L) {
    {
#line 251
    __ret_warn_on = ! __warned;
#line 251
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 251
    if (tmp != 0L) {
      {
#line 251
      warn_slowpath_null("fs/nfs/pagelist.c", 251);
      }
    } else {

    }
    {
#line 251
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 251
    if (tmp___0 != 0L) {
#line 251
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 251
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 253
  if ((unsigned long )prev == (unsigned long )((struct nfs_page *)0)) {
#line 255
    req->wb_head = req;
#line 256
    req->wb_this_page = req;
  } else {
    {
#line 259
    __ret_warn_once___0 = (unsigned long )prev->wb_this_page != (unsigned long )prev->wb_head;
#line 259
    tmp___4 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
    }
#line 259
    if (tmp___4 != 0L) {
      {
#line 259
      __ret_warn_on___0 = ! __warned___0;
#line 259
      tmp___2 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
      }
#line 259
      if (tmp___2 != 0L) {
        {
#line 259
        warn_slowpath_null("fs/nfs/pagelist.c", 259);
        }
      } else {

      }
      {
#line 259
      tmp___3 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
      }
#line 259
      if (tmp___3 != 0L) {
#line 259
        __warned___0 = 1;
      } else {

      }
    } else {

    }
    {
#line 259
    __builtin_expect(__ret_warn_once___0 != 0, 0L);
#line 260
    tmp___5 = constant_test_bit(5L, (unsigned long const volatile   *)(& (prev->wb_head)->wb_flags));
#line 260
    __ret_warn_once___1 = tmp___5 == 0;
#line 260
    tmp___8 = __builtin_expect(__ret_warn_once___1 != 0, 0L);
    }
#line 260
    if (tmp___8 != 0L) {
      {
#line 260
      __ret_warn_on___1 = ! __warned___1;
#line 260
      tmp___6 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
      }
#line 260
      if (tmp___6 != 0L) {
        {
#line 260
        warn_slowpath_null("fs/nfs/pagelist.c", 260);
        }
      } else {

      }
      {
#line 260
      tmp___7 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
      }
#line 260
      if (tmp___7 != 0L) {
#line 260
        __warned___1 = 1;
      } else {

      }
    } else {

    }
    {
#line 260
    __builtin_expect(__ret_warn_once___1 != 0, 0L);
#line 261
    req->wb_head = prev->wb_head;
#line 262
    req->wb_this_page = prev->wb_this_page;
#line 263
    prev->wb_this_page = req;
#line 267
    kref_get(& (req->wb_head)->wb_kref);
#line 272
    tmp___9 = constant_test_bit(4L, (unsigned long const volatile   *)(& (prev->wb_head)->wb_flags));
    }
#line 272
    if (tmp___9 != 0) {
      {
#line 273
      set_bit(4L, (unsigned long volatile   *)(& req->wb_flags));
#line 274
      kref_get(& req->wb_kref);
      }
    } else {

    }
  }
#line 277
  return;
}
}
#line 287 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_page_group_destroy(struct kref *kref ) 
{ 
  struct nfs_page *req ;
  struct kref  const  *__mptr ;
  struct nfs_page *tmp ;
  struct nfs_page *next ;
  bool tmp___0 ;
  int tmp___1 ;

  {
#line 289
  __mptr = (struct kref  const  *)kref;
#line 289
  req = (struct nfs_page *)((char *)__mptr + 0xffffffffffffffc4UL);
#line 293
  if ((unsigned long )req->wb_head != (unsigned long )req) {
    {
#line 294
    nfs_release_request(req->wb_head);
    }
  } else {

  }
  {
#line 296
  tmp___0 = nfs_page_group_sync_on_bit(req, 6U);
  }
#line 296
  if (tmp___0) {
#line 296
    tmp___1 = 0;
  } else {
#line 296
    tmp___1 = 1;
  }
#line 296
  if (tmp___1) {
#line 297
    return;
  } else {

  }
#line 299
  tmp = req;
  ldv_53427: 
  {
#line 301
  next = tmp->wb_this_page;
#line 303
  tmp->wb_this_page = tmp;
#line 304
  tmp->wb_head = tmp;
#line 305
  nfs_free_request(tmp);
#line 306
  tmp = next;
  }
#line 307
  if ((unsigned long )tmp != (unsigned long )req) {
#line 309
    goto ldv_53427;
  } else {

  }

#line 314
  return;
}
}
#line 323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct nfs_page *nfs_create_request(struct nfs_open_context *ctx , struct page *page ,
                                    struct nfs_page *last , unsigned int offset ,
                                    unsigned int count ) 
{ 
  struct nfs_page *req ;
  struct nfs_lock_context *l_ctx ;
  void *tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  bool tmp___3 ;

  {
  {
#line 330
  tmp___0 = constant_test_bit(2L, (unsigned long const volatile   *)(& ctx->flags));
  }
#line 330
  if (tmp___0 != 0) {
    {
#line 331
    tmp = ERR_PTR(-9L);
    }
#line 331
    return ((struct nfs_page *)tmp);
  } else {

  }
  {
#line 333
  req = nfs_page_alloc();
  }
#line 334
  if ((unsigned long )req == (unsigned long )((struct nfs_page *)0)) {
    {
#line 335
    tmp___1 = ERR_PTR(-12L);
    }
#line 335
    return ((struct nfs_page *)tmp___1);
  } else {

  }
  {
#line 338
  l_ctx = nfs_get_lock_context(ctx);
#line 339
  tmp___3 = IS_ERR((void const   *)l_ctx);
  }
#line 339
  if ((int )tmp___3) {
    {
#line 340
    nfs_page_free(req);
#line 341
    tmp___2 = ERR_CAST((void const   *)l_ctx);
    }
#line 341
    return ((struct nfs_page *)tmp___2);
  } else {

  }
  {
#line 343
  req->wb_lock_context = l_ctx;
#line 344
  nfs_iocounter_inc(& l_ctx->io_count);
#line 349
  req->wb_page = page;
#line 350
  req->wb_index = page_file_index(page);
#line 351
  get_page(page);
#line 352
  req->wb_offset = offset;
#line 353
  req->wb_pgbase = offset;
#line 354
  req->wb_bytes = count;
#line 355
  req->wb_context = get_nfs_open_context(ctx);
#line 356
  kref_init(& req->wb_kref);
#line 357
  nfs_page_group_init(req, last);
  }
#line 358
  return (req);
}
}
#line 365 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_unlock_request(struct nfs_page *req ) 
{ 
  int tmp ;

  {
  {
#line 367
  tmp = constant_test_bit(0L, (unsigned long const volatile   *)(& req->wb_flags));
  }
#line 367
  if (tmp == 0) {
    {
#line 368
    printk("\vNFS: Invalid unlock attempted\n");
#line 369
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/pagelist.c"),
                         "i" (369), "i" (12UL));
#line 369
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 371
  __asm__  volatile   ("": : : "memory");
#line 372
  clear_bit(0L, (unsigned long volatile   *)(& req->wb_flags));
#line 373
  __asm__  volatile   ("": : : "memory");
#line 374
  wake_up_bit((void *)(& req->wb_flags), 0);
  }
#line 375
  return;
}
}
#line 381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_unlock_and_release_request(struct nfs_page *req ) 
{ 


  {
  {
#line 383
  nfs_unlock_request(req);
#line 384
  nfs_release_request(req);
  }
#line 385
  return;
}
}
#line 394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_clear_request(struct nfs_page *req ) 
{ 
  struct page *page ;
  struct nfs_open_context *ctx ;
  struct nfs_lock_context *l_ctx ;

  {
#line 396
  page = req->wb_page;
#line 397
  ctx = req->wb_context;
#line 398
  l_ctx = req->wb_lock_context;
#line 400
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
    {
#line 401
    put_page(page);
#line 402
    req->wb_page = (struct page *)0;
    }
  } else {

  }
#line 404
  if ((unsigned long )l_ctx != (unsigned long )((struct nfs_lock_context *)0)) {
    {
#line 405
    nfs_iocounter_dec(& l_ctx->io_count);
#line 406
    nfs_put_lock_context(l_ctx);
#line 407
    req->wb_lock_context = (struct nfs_lock_context *)0;
    }
  } else {

  }
#line 409
  if ((unsigned long )ctx != (unsigned long )((struct nfs_open_context *)0)) {
    {
#line 410
    put_nfs_open_context(ctx);
#line 411
    req->wb_context = (struct nfs_open_context *)0;
    }
  } else {

  }
#line 413
  return;
}
}
#line 421 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_free_request(struct nfs_page *req ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int tmp___2 ;
  int __ret_warn_on___0 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  bool __warned___1 ;
  int __ret_warn_once___1 ;
  int tmp___6 ;
  int __ret_warn_on___1 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;
  bool __warned___2 ;
  int __ret_warn_once___2 ;
  int tmp___10 ;
  int __ret_warn_on___2 ;
  long tmp___11 ;
  long tmp___12 ;
  long tmp___13 ;
  bool __warned___3 ;
  int __ret_warn_once___3 ;
  int tmp___14 ;
  int __ret_warn_on___3 ;
  long tmp___15 ;
  long tmp___16 ;
  long tmp___17 ;
  bool __warned___4 ;
  int __ret_warn_once___4 ;
  int tmp___18 ;
  int __ret_warn_on___4 ;
  long tmp___19 ;
  long tmp___20 ;
  long tmp___21 ;

  {
  {
#line 423
  __ret_warn_once = (unsigned long )req->wb_this_page != (unsigned long )req;
#line 423
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 423
  if (tmp___1 != 0L) {
    {
#line 423
    __ret_warn_on = ! __warned;
#line 423
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 423
    if (tmp != 0L) {
      {
#line 423
      warn_slowpath_null("fs/nfs/pagelist.c", 423);
      }
    } else {

    }
    {
#line 423
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 423
    if (tmp___0 != 0L) {
#line 423
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 423
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 426
  tmp___2 = constant_test_bit(6L, (unsigned long const volatile   *)(& req->wb_flags));
#line 426
  __ret_warn_once___0 = tmp___2 != 0;
#line 426
  tmp___5 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 426
  if (tmp___5 != 0L) {
    {
#line 426
    __ret_warn_on___0 = ! __warned___0;
#line 426
    tmp___3 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 426
    if (tmp___3 != 0L) {
      {
#line 426
      warn_slowpath_null("fs/nfs/pagelist.c", 426);
      }
    } else {

    }
    {
#line 426
    tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 426
    if (tmp___4 != 0L) {
#line 426
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 426
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
#line 427
  tmp___6 = constant_test_bit(7L, (unsigned long const volatile   *)(& req->wb_flags));
#line 427
  __ret_warn_once___1 = tmp___6 != 0;
#line 427
  tmp___9 = __builtin_expect(__ret_warn_once___1 != 0, 0L);
  }
#line 427
  if (tmp___9 != 0L) {
    {
#line 427
    __ret_warn_on___1 = ! __warned___1;
#line 427
    tmp___7 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
    }
#line 427
    if (tmp___7 != 0L) {
      {
#line 427
      warn_slowpath_null("fs/nfs/pagelist.c", 427);
      }
    } else {

    }
    {
#line 427
    tmp___8 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
    }
#line 427
    if (tmp___8 != 0L) {
#line 427
      __warned___1 = 1;
    } else {

    }
  } else {

  }
  {
#line 427
  __builtin_expect(__ret_warn_once___1 != 0, 0L);
#line 428
  tmp___10 = constant_test_bit(8L, (unsigned long const volatile   *)(& req->wb_flags));
#line 428
  __ret_warn_once___2 = tmp___10 != 0;
#line 428
  tmp___13 = __builtin_expect(__ret_warn_once___2 != 0, 0L);
  }
#line 428
  if (tmp___13 != 0L) {
    {
#line 428
    __ret_warn_on___2 = ! __warned___2;
#line 428
    tmp___11 = __builtin_expect(__ret_warn_on___2 != 0, 0L);
    }
#line 428
    if (tmp___11 != 0L) {
      {
#line 428
      warn_slowpath_null("fs/nfs/pagelist.c", 428);
      }
    } else {

    }
    {
#line 428
    tmp___12 = __builtin_expect(__ret_warn_on___2 != 0, 0L);
    }
#line 428
    if (tmp___12 != 0L) {
#line 428
      __warned___2 = 1;
    } else {

    }
  } else {

  }
  {
#line 428
  __builtin_expect(__ret_warn_once___2 != 0, 0L);
#line 429
  tmp___14 = constant_test_bit(9L, (unsigned long const volatile   *)(& req->wb_flags));
#line 429
  __ret_warn_once___3 = tmp___14 != 0;
#line 429
  tmp___17 = __builtin_expect(__ret_warn_once___3 != 0, 0L);
  }
#line 429
  if (tmp___17 != 0L) {
    {
#line 429
    __ret_warn_on___3 = ! __warned___3;
#line 429
    tmp___15 = __builtin_expect(__ret_warn_on___3 != 0, 0L);
    }
#line 429
    if (tmp___15 != 0L) {
      {
#line 429
      warn_slowpath_null("fs/nfs/pagelist.c", 429);
      }
    } else {

    }
    {
#line 429
    tmp___16 = __builtin_expect(__ret_warn_on___3 != 0, 0L);
    }
#line 429
    if (tmp___16 != 0L) {
#line 429
      __warned___3 = 1;
    } else {

    }
  } else {

  }
  {
#line 429
  __builtin_expect(__ret_warn_once___3 != 0, 0L);
#line 430
  tmp___18 = constant_test_bit(10L, (unsigned long const volatile   *)(& req->wb_flags));
#line 430
  __ret_warn_once___4 = tmp___18 != 0;
#line 430
  tmp___21 = __builtin_expect(__ret_warn_once___4 != 0, 0L);
  }
#line 430
  if (tmp___21 != 0L) {
    {
#line 430
    __ret_warn_on___4 = ! __warned___4;
#line 430
    tmp___19 = __builtin_expect(__ret_warn_on___4 != 0, 0L);
    }
#line 430
    if (tmp___19 != 0L) {
      {
#line 430
      warn_slowpath_null("fs/nfs/pagelist.c", 430);
      }
    } else {

    }
    {
#line 430
    tmp___20 = __builtin_expect(__ret_warn_on___4 != 0, 0L);
    }
#line 430
    if (tmp___20 != 0L) {
#line 430
      __warned___4 = 1;
    } else {

    }
  } else {

  }
  {
#line 430
  __builtin_expect(__ret_warn_once___4 != 0, 0L);
#line 433
  nfs_clear_request(req);
#line 434
  nfs_page_free(req);
  }
#line 435
  return;
}
}
#line 437 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_release_request(struct nfs_page *req ) 
{ 


  {
  {
#line 439
  kref_put(& req->wb_kref, & nfs_page_group_destroy);
  }
#line 440
  return;
}
}
#line 450 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
int nfs_wait_on_request(struct nfs_page *req ) 
{ 
  int tmp ;

  {
  {
#line 452
  tmp = wait_on_bit((void *)(& req->wb_flags), 0, & nfs_wait_bit_uninterruptible,
                    2U);
  }
#line 452
  return (tmp);
}
}
#line 466 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
size_t nfs_generic_pg_test(struct nfs_pageio_descriptor *desc , struct nfs_page *prev ,
                           struct nfs_page *req ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  size_t _min1 ;
  unsigned long _min2 ;

  {
#line 469
  if (desc->pg_count > desc->pg_bsize) {
    {
#line 471
    __ret_warn_once = 1;
#line 471
    tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 471
    if (tmp___1 != 0L) {
      {
#line 471
      __ret_warn_on = ! __warned;
#line 471
      tmp = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 471
      if (tmp != 0L) {
        {
#line 471
        warn_slowpath_null("fs/nfs/pagelist.c", 471);
        }
      } else {

      }
      {
#line 471
      tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 471
      if (tmp___0 != 0L) {
#line 471
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 471
    __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 472
    return (0UL);
  } else {

  }
#line 475
  _min1 = desc->pg_bsize - desc->pg_count;
#line 475
  _min2 = (unsigned long )req->wb_bytes;
#line 475
  return (_min1 < _min2 ? _min1 : _min2);
}
}
#line 477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_generic_pg_test[20U]  = 
#line 477
  {      'n',      'f',      's',      '_', 
        'g',      'e',      'n',      'e', 
        'r',      'i',      'c',      '_', 
        'p',      'g',      '_',      't', 
        'e',      's',      't',      '\000'};
#line 477
struct kernel_symbol  const  __ksymtab_nfs_generic_pg_test ;
#line 477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_generic_pg_test  =    {(unsigned long )(& nfs_generic_pg_test), (char const   *)(& __kstrtab_nfs_generic_pg_test)};
#line 479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct nfs_pgio_header *nfs_pgio_header_alloc(struct nfs_rw_ops  const  *ops ) 
{ 
  struct nfs_pgio_header *hdr ;
  struct nfs_pgio_header *tmp ;
  struct lock_class_key __key ;

  {
  {
#line 481
  tmp = (*(ops->rw_alloc_header))();
#line 481
  hdr = tmp;
  }
#line 483
  if ((unsigned long )hdr != (unsigned long )((struct nfs_pgio_header *)0)) {
    {
#line 484
    INIT_LIST_HEAD(& hdr->pages);
#line 485
    spinlock_check(& hdr->lock);
#line 485
    __raw_spin_lock_init(& hdr->lock.__annonCompField18.rlock, "&(&hdr->lock)->rlock",
                         & __key);
#line 486
    hdr->rw_ops = ops;
    }
  } else {

  }
#line 488
  return (hdr);
}
}
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_pgio_header_alloc[22U]  = 
#line 490
  {      'n',      'f',      's',      '_', 
        'p',      'g',      'i',      'o', 
        '_',      'h',      'e',      'a', 
        'd',      'e',      'r',      '_', 
        'a',      'l',      'l',      'o', 
        'c',      '\000'};
#line 490
struct kernel_symbol  const  __ksymtab_nfs_pgio_header_alloc ;
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_pgio_header_alloc  =    {(unsigned long )(& nfs_pgio_header_alloc), (char const   *)(& __kstrtab_nfs_pgio_header_alloc)};
#line 496 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_pgio_header_free(struct nfs_pgio_header *hdr ) 
{ 


  {
  {
#line 498
  (*((hdr->rw_ops)->rw_free_header))(hdr);
  }
#line 499
  return;
}
}
#line 500 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_pgio_header_free[21U]  = 
#line 500
  {      'n',      'f',      's',      '_', 
        'p',      'g',      'i',      'o', 
        '_',      'h',      'e',      'a', 
        'd',      'e',      'r',      '_', 
        'f',      'r',      'e',      'e', 
        '\000'};
#line 500
struct kernel_symbol  const  __ksymtab_nfs_pgio_header_free ;
#line 500 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_pgio_header_free  =    {(unsigned long )(& nfs_pgio_header_free), (char const   *)(& __kstrtab_nfs_pgio_header_free)};
#line 510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_pgio_data_destroy(struct nfs_pgio_header *hdr ) 
{ 


  {
  {
#line 512
  put_nfs_open_context(hdr->args.context);
  }
#line 513
  if ((unsigned long )hdr->page_array.pagevec != (unsigned long )((struct page **)(& hdr->page_array.page_array))) {
    {
#line 514
    kfree((void const   *)hdr->page_array.pagevec);
    }
  } else {

  }
#line 515
  return;
}
}
#line 516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_pgio_data_destroy[22U]  = 
#line 516
  {      'n',      'f',      's',      '_', 
        'p',      'g',      'i',      'o', 
        '_',      'd',      'a',      't', 
        'a',      '_',      'd',      'e', 
        's',      't',      'r',      'o', 
        'y',      '\000'};
#line 516
struct kernel_symbol  const  __ksymtab_nfs_pgio_data_destroy ;
#line 516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_pgio_data_destroy  =    {(unsigned long )(& nfs_pgio_data_destroy), (char const   *)(& __kstrtab_nfs_pgio_data_destroy)};
#line 526 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_pgio_rpcsetup(struct nfs_pgio_header *hdr , unsigned int count , unsigned int offset ,
                              int how , struct nfs_commit_info *cinfo ) 
{ 
  struct nfs_page *req ;
  loff_t tmp ;
  unsigned long tmp___0 ;

  {
  {
#line 530
  req = hdr->req;
#line 535
  hdr->args.fh = NFS_FH((struct inode  const  *)hdr->inode);
#line 536
  tmp = req_offset(req);
#line 536
  hdr->args.offset = (__u64 )(tmp + (loff_t )offset);
#line 538
  hdr->mds_offset = hdr->args.offset;
#line 539
  hdr->args.pgbase = req->wb_pgbase + offset;
#line 540
  hdr->args.pages = hdr->page_array.pagevec;
#line 541
  hdr->args.count = count;
#line 542
  hdr->args.context = get_nfs_open_context(req->wb_context);
#line 543
  hdr->args.lock_context = req->wb_lock_context;
#line 544
  hdr->args.stable = 0;
  }
  {
#line 546
  if ((how & 36) == 0) {
#line 546
    goto case_0;
  } else {

  }
#line 548
  if ((how & 36) == 32) {
#line 548
    goto case_32;
  } else {

  }
#line 551
  goto switch_default;
  case_0: /* CIL Label */ ;
#line 547
  goto ldv_53552;
  case_32: /* CIL Label */ 
  {
#line 549
  tmp___0 = nfs_reqs_to_commit(cinfo);
  }
#line 549
  if (tmp___0 != 0UL) {
#line 550
    goto ldv_53552;
  } else {

  }
  switch_default: /* CIL Label */ 
#line 552
  hdr->args.stable = 2;
  switch_break: /* CIL Label */ ;
  }
  ldv_53552: 
  {
#line 555
  hdr->res.fattr = & hdr->fattr;
#line 556
  hdr->res.count = count;
#line 557
  hdr->res.eof = 0;
#line 558
  hdr->res.verf = & hdr->writeverf;
#line 559
  nfs_fattr_init(& hdr->fattr);
  }
#line 560
  return;
}
}
#line 567 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_pgio_prepare(struct rpc_task *task , void *calldata ) 
{ 
  struct nfs_pgio_header *hdr ;
  int err ;
  struct nfs_rpc_ops  const  *tmp ;

  {
  {
#line 569
  hdr = (struct nfs_pgio_header *)calldata;
#line 571
  tmp = NFS_PROTO((struct inode  const  *)hdr->inode);
#line 571
  err = (*(tmp->pgio_rpc_prepare))(task, hdr);
  }
#line 572
  if (err != 0) {
    {
#line 573
    rpc_exit(task, err);
    }
  } else {

  }
#line 574
  return;
}
}
#line 576 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
int nfs_initiate_pgio(struct rpc_clnt *clnt , struct nfs_pgio_header *hdr , struct rpc_call_ops  const  *call_ops ,
                      int how , int flags ) 
{ 
  struct inode *inode ;
  struct rpc_task *task ;
  struct rpc_message msg ;
  struct rpc_task_setup task_setup_data ;
  int ret ;
  __u64 tmp ;
  long tmp___0 ;
  long tmp___1 ;
  bool tmp___2 ;

  {
  {
#line 579
  inode = hdr->inode;
#line 581
  msg.rpc_proc = 0;
#line 581
  msg.rpc_argp = (void *)(& hdr->args);
#line 581
  msg.rpc_resp = (void *)(& hdr->res);
#line 581
  msg.rpc_cred = hdr->cred;
#line 586
  task_setup_data.task = & hdr->task;
#line 586
  task_setup_data.rpc_client = clnt;
#line 586
  task_setup_data.rpc_message = (struct rpc_message  const  *)(& msg);
#line 586
  task_setup_data.callback_ops = call_ops;
#line 586
  task_setup_data.callback_data = (void *)hdr;
#line 586
  task_setup_data.workqueue = nfsiod_workqueue;
#line 586
  task_setup_data.flags = (unsigned short )((int )((short )flags) | 1);
#line 586
  task_setup_data.priority = (signed char)0;
#line 595
  ret = 0;
#line 597
  (*((hdr->rw_ops)->rw_initiate))(hdr, & msg, & task_setup_data, how);
#line 599
  tmp___0 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 599
  if (tmp___0 != 0L) {
    {
#line 599
    tmp = NFS_FILEID((struct inode  const  *)inode);
#line 599
    printk("\001dNFS: %5u initiated pgio call (req %s/%llu, %u bytes @ offset %llu)\n",
           (int )hdr->task.tk_pid, (char *)(& (inode->i_sb)->s_id), tmp, hdr->args.count,
           hdr->args.offset);
    }
  } else {

  }
  {
#line 607
  task = rpc_run_task((struct rpc_task_setup  const  *)(& task_setup_data));
#line 608
  tmp___2 = IS_ERR((void const   *)task);
  }
#line 608
  if ((int )tmp___2) {
    {
#line 609
    tmp___1 = PTR_ERR((void const   *)task);
#line 609
    ret = (int )tmp___1;
    }
#line 610
    goto out;
  } else {

  }
#line 612
  if (how & 1) {
    {
#line 613
    ret = rpc_wait_for_completion_task(task);
    }
#line 614
    if (ret == 0) {
#line 615
      ret = task->tk_status;
    } else {

    }
  } else {

  }
  {
#line 617
  rpc_put_task(task);
  }
  out: ;
#line 619
  return (ret);
}
}
#line 621 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_initiate_pgio[18U]  = 
#line 621
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'i',      't', 
        'i',      'a',      't',      'e', 
        '_',      'p',      'g',      'i', 
        'o',      '\000'};
#line 621
struct kernel_symbol  const  __ksymtab_nfs_initiate_pgio ;
#line 621 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_initiate_pgio  =    {(unsigned long )(& nfs_initiate_pgio), (char const   *)(& __kstrtab_nfs_initiate_pgio)};
#line 628 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static int nfs_pgio_error(struct nfs_pageio_descriptor *desc , struct nfs_pgio_header *hdr ) 
{ 


  {
  {
#line 631
  set_bit(2L, (unsigned long volatile   *)(& hdr->flags));
#line 632
  nfs_pgio_data_destroy(hdr);
#line 633
  (*((hdr->completion_ops)->completion))(hdr);
#line 634
  (*((desc->pg_completion_ops)->error_cleanup))(& desc->pg_list);
  }
#line 635
  return (-12);
}
}
#line 642 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_pgio_release(void *calldata ) 
{ 
  struct nfs_pgio_header *hdr ;

  {
#line 644
  hdr = (struct nfs_pgio_header *)calldata;
#line 645
  if ((unsigned long )(hdr->rw_ops)->rw_release != (unsigned long )((void (*/* const  */)(struct nfs_pgio_header * ))0)) {
    {
#line 646
    (*((hdr->rw_ops)->rw_release))(hdr);
    }
  } else {

  }
  {
#line 647
  nfs_pgio_data_destroy(hdr);
#line 648
  (*((hdr->completion_ops)->completion))(hdr);
  }
#line 649
  return;
}
}
#line 659 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_pageio_init(struct nfs_pageio_descriptor *desc , struct inode *inode , struct nfs_pageio_ops  const  *pg_ops ,
                     struct nfs_pgio_completion_ops  const  *compl_ops , struct nfs_rw_ops  const  *rw_ops ,
                     size_t bsize , int io_flags ) 
{ 


  {
  {
#line 667
  INIT_LIST_HEAD(& desc->pg_list);
#line 668
  desc->pg_bytes_written = 0UL;
#line 669
  desc->pg_count = 0UL;
#line 670
  desc->pg_bsize = bsize;
#line 671
  desc->pg_base = 0U;
#line 672
  desc->pg_moreio = 0U;
#line 673
  desc->pg_recoalesce = 0U;
#line 674
  desc->pg_inode = inode;
#line 675
  desc->pg_ops = pg_ops;
#line 676
  desc->pg_completion_ops = compl_ops;
#line 677
  desc->pg_rw_ops = rw_ops;
#line 678
  desc->pg_ioflags = io_flags;
#line 679
  desc->pg_error = 0;
#line 680
  desc->pg_lseg = (struct pnfs_layout_segment *)0;
#line 681
  desc->pg_dreq = (struct nfs_direct_req *)0;
#line 682
  desc->pg_layout_private = (void *)0;
  }
#line 683
  return;
}
}
#line 684 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_pageio_init[16U]  = 
#line 684
  {      'n',      'f',      's',      '_', 
        'p',      'a',      'g',      'e', 
        'i',      'o',      '_',      'i', 
        'n',      'i',      't',      '\000'};
#line 684
struct kernel_symbol  const  __ksymtab_nfs_pageio_init ;
#line 684 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_pageio_init  =    {(unsigned long )(& nfs_pageio_init), (char const   *)(& __kstrtab_nfs_pageio_init)};
#line 691 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_pgio_result(struct rpc_task *task , void *calldata ) 
{ 
  struct nfs_pgio_header *hdr ;
  struct inode *inode ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 693
  hdr = (struct nfs_pgio_header *)calldata;
#line 694
  inode = hdr->inode;
#line 696
  tmp = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 696
  if (tmp != 0L) {
    {
#line 696
    printk("\001dNFS: %s: %5u, (status %d)\n", "nfs_pgio_result", (int )task->tk_pid,
           task->tk_status);
    }
  } else {

  }
  {
#line 699
  tmp___0 = (*((hdr->rw_ops)->rw_done))(task, hdr, inode);
  }
#line 699
  if (tmp___0 != 0) {
#line 700
    return;
  } else {

  }
#line 701
  if (task->tk_status < 0) {
    {
#line 702
    nfs_set_pgio_error(hdr, task->tk_status, (loff_t )hdr->args.offset);
    }
  } else {
    {
#line 704
    (*((hdr->rw_ops)->rw_result))(task, hdr);
    }
  }
#line 705
  return;
}
}
#line 715 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
int nfs_generic_pgio(struct nfs_pageio_descriptor *desc , struct nfs_pgio_header *hdr ) 
{ 
  struct nfs_page *req ;
  struct page **pages ;
  struct list_head *head ;
  struct nfs_commit_info cinfo ;
  unsigned int pagecount ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  struct page **tmp___2 ;
  int tmp___3 ;
  unsigned long tmp___4 ;

  {
  {
#line 720
  head = & desc->pg_list;
#line 724
  pagecount = nfs_page_array_len(desc->pg_base, desc->pg_count);
#line 725
  tmp___0 = nfs_pgarray_set(& hdr->page_array, pagecount);
  }
#line 725
  if (tmp___0) {
#line 725
    tmp___1 = 0;
  } else {
#line 725
    tmp___1 = 1;
  }
#line 725
  if (tmp___1) {
    {
#line 726
    tmp = nfs_pgio_error(desc, hdr);
    }
#line 726
    return (tmp);
  } else {

  }
  {
#line 728
  nfs_init_cinfo(& cinfo, desc->pg_inode, desc->pg_dreq);
#line 729
  pages = hdr->page_array.pagevec;
  }
#line 730
  goto ldv_53632;
  ldv_53631: 
  {
#line 731
  req = nfs_list_entry(head->next);
#line 732
  nfs_list_remove_request(req);
#line 733
  nfs_list_add_request(req, & hdr->pages);
#line 734
  tmp___2 = pages;
#line 734
  pages = pages + 1;
#line 734
  *tmp___2 = req->wb_page;
  }
  ldv_53632: 
  {
#line 730
  tmp___3 = list_empty((struct list_head  const  *)head);
  }
#line 730
  if (tmp___3 == 0) {
#line 732
    goto ldv_53631;
  } else {

  }

#line 737
  if ((desc->pg_ioflags & 32) != 0) {
#line 737
    if ((unsigned int )*((unsigned char *)desc + 44UL) != 0U) {
#line 739
      desc->pg_ioflags = desc->pg_ioflags & -33;
    } else {
      {
#line 737
      tmp___4 = nfs_reqs_to_commit(& cinfo);
      }
#line 737
      if (tmp___4 != 0UL) {
#line 739
        desc->pg_ioflags = desc->pg_ioflags & -33;
      } else {

      }
    }
  } else {

  }
  {
#line 742
  nfs_pgio_rpcsetup(hdr, (unsigned int )desc->pg_count, 0U, desc->pg_ioflags, & cinfo);
#line 743
  desc->pg_rpc_callops = & nfs_pgio_common_ops;
  }
#line 744
  return (0);
}
}
#line 746 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_generic_pgio[17U]  = 
#line 746
  {      'n',      'f',      's',      '_', 
        'g',      'e',      'n',      'e', 
        'r',      'i',      'c',      '_', 
        'p',      'g',      'i',      'o', 
        '\000'};
#line 746
struct kernel_symbol  const  __ksymtab_nfs_generic_pgio ;
#line 746 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_generic_pgio  =    {(unsigned long )(& nfs_generic_pgio), (char const   *)(& __kstrtab_nfs_generic_pgio)};
#line 748 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static int nfs_generic_pg_pgios(struct nfs_pageio_descriptor *desc ) 
{ 
  struct nfs_pgio_header *hdr ;
  int ret ;
  struct rpc_clnt *tmp ;

  {
  {
#line 753
  hdr = nfs_pgio_header_alloc(desc->pg_rw_ops);
  }
#line 754
  if ((unsigned long )hdr == (unsigned long )((struct nfs_pgio_header *)0)) {
    {
#line 755
    (*((desc->pg_completion_ops)->error_cleanup))(& desc->pg_list);
    }
#line 756
    return (-12);
  } else {

  }
  {
#line 758
  nfs_pgheader_init(desc, hdr, & nfs_pgio_header_free);
#line 759
  ret = nfs_generic_pgio(desc, hdr);
  }
#line 760
  if (ret == 0) {
    {
#line 761
    tmp = NFS_CLIENT((struct inode  const  *)hdr->inode);
#line 761
    ret = nfs_initiate_pgio(tmp, hdr, desc->pg_rpc_callops, desc->pg_ioflags, 0);
    }
  } else {

  }
#line 764
  return (ret);
}
}
#line 767 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static bool nfs_match_open_context(struct nfs_open_context  const  *ctx1 , struct nfs_open_context  const  *ctx2 ) 
{ 


  {
#line 770
  return ((bool )((unsigned long )ctx1->cred == (unsigned long )ctx2->cred && (unsigned long )ctx1->state == (unsigned long )ctx2->state));
}
}
#line 773 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static bool nfs_match_lock_context(struct nfs_lock_context  const  *l1 , struct nfs_lock_context  const  *l2 ) 
{ 


  {
#line 776
  return ((bool )((unsigned long )l1->lockowner.l_owner == (unsigned long )l2->lockowner.l_owner && (int )l1->lockowner.l_pid == (int )l2->lockowner.l_pid));
}
}
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static bool nfs_can_coalesce_requests(struct nfs_page *prev , struct nfs_page *req ,
                                      struct nfs_pageio_descriptor *pgio ) 
{ 
  size_t size ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  loff_t tmp___3 ;
  loff_t tmp___4 ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;

  {
#line 797
  if ((unsigned long )prev != (unsigned long )((struct nfs_page *)0)) {
    {
#line 798
    tmp = nfs_match_open_context((struct nfs_open_context  const  *)req->wb_context,
                                 (struct nfs_open_context  const  *)prev->wb_context);
    }
#line 798
    if (tmp) {
#line 798
      tmp___0 = 0;
    } else {
#line 798
      tmp___0 = 1;
    }
#line 798
    if (tmp___0) {
#line 799
      return (0);
    } else {

    }
#line 800
    if ((unsigned long )(((req->wb_context)->dentry)->d_inode)->i_flock != (unsigned long )((struct file_lock *)0)) {
      {
#line 800
      tmp___1 = nfs_match_lock_context((struct nfs_lock_context  const  *)req->wb_lock_context,
                                       (struct nfs_lock_context  const  *)prev->wb_lock_context);
      }
#line 800
      if (tmp___1) {
#line 800
        tmp___2 = 0;
      } else {
#line 800
        tmp___2 = 1;
      }
#line 800
      if (tmp___2) {
#line 803
        return (0);
      } else {

      }
    } else {

    }
    {
#line 804
    tmp___3 = req_offset(req);
#line 804
    tmp___4 = req_offset(prev);
    }
#line 804
    if (tmp___3 != tmp___4 + (loff_t )prev->wb_bytes) {
#line 805
      return (0);
    } else {

    }
  } else {

  }
  {
#line 807
  size = (*((pgio->pg_ops)->pg_test))(pgio, prev, req);
#line 808
  __ret_warn_once = size > (size_t )req->wb_bytes;
#line 808
  tmp___7 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 808
  if (tmp___7 != 0L) {
    {
#line 808
    __ret_warn_on = ! __warned;
#line 808
    tmp___5 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 808
    if (tmp___5 != 0L) {
      {
#line 808
      warn_slowpath_null("fs/nfs/pagelist.c", 808);
      }
    } else {

    }
    {
#line 808
    tmp___6 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 808
    if (tmp___6 != 0L) {
#line 808
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 808
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 809
  if (size != 0UL && size < (size_t )req->wb_bytes) {
#line 810
    req->wb_bytes = (unsigned int )size;
  } else {

  }
#line 811
  return (size != 0UL);
}
}
#line 822 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static int nfs_pageio_do_add_request(struct nfs_pageio_descriptor *desc , struct nfs_page *req ) 
{ 
  struct nfs_page *prev ;
  bool tmp ;
  int tmp___0 ;

  {
#line 825
  prev = (struct nfs_page *)0;
#line 826
  if (desc->pg_count != 0UL) {
    {
#line 827
    prev = nfs_list_entry(desc->pg_list.prev);
    }
  } else {
#line 829
    if ((unsigned long )(desc->pg_ops)->pg_init != (unsigned long )((void (*/* const  */)(struct nfs_pageio_descriptor * ,
                                                                                          struct nfs_page * ))0)) {
      {
#line 830
      (*((desc->pg_ops)->pg_init))(desc, req);
      }
    } else {

    }
#line 831
    desc->pg_base = req->wb_pgbase;
  }
  {
#line 833
  tmp = nfs_can_coalesce_requests(prev, req, desc);
  }
#line 833
  if (tmp) {
#line 833
    tmp___0 = 0;
  } else {
#line 833
    tmp___0 = 1;
  }
#line 833
  if (tmp___0) {
#line 834
    return (0);
  } else {

  }
  {
#line 835
  nfs_list_remove_request(req);
#line 836
  nfs_list_add_request(req, & desc->pg_list);
#line 837
  desc->pg_count = desc->pg_count + (size_t )req->wb_bytes;
  }
#line 838
  return (1);
}
}
#line 844 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static void nfs_pageio_doio(struct nfs_pageio_descriptor *desc ) 
{ 
  int error ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 846
  tmp___0 = list_empty((struct list_head  const  *)(& desc->pg_list));
  }
#line 846
  if (tmp___0 == 0) {
    {
#line 847
    tmp = (*((desc->pg_ops)->pg_doio))(desc);
#line 847
    error = tmp;
    }
#line 848
    if (error < 0) {
#line 849
      desc->pg_error = error;
    } else {
#line 851
      desc->pg_bytes_written = desc->pg_bytes_written + desc->pg_count;
    }
  } else {

  }
  {
#line 853
  tmp___1 = list_empty((struct list_head  const  *)(& desc->pg_list));
  }
#line 853
  if (tmp___1 != 0) {
#line 854
    desc->pg_count = 0UL;
#line 855
    desc->pg_base = 0U;
  } else {

  }
#line 857
  return;
}
}
#line 870 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static int __nfs_pageio_add_request(struct nfs_pageio_descriptor *desc , struct nfs_page *req ) 
{ 
  struct nfs_page *subreq ;
  unsigned int bytes_left ;
  unsigned int offset ;
  unsigned int pgbase ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int __ret_warn_on___0 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  bool __warned___1 ;
  int __ret_warn_once___1 ;
  int __ret_warn_on___1 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  bool __warned___2 ;
  int __ret_warn_once___2 ;
  int __ret_warn_on___2 ;
  long tmp___9 ;
  long tmp___10 ;
  long tmp___11 ;
  bool __warned___3 ;
  int __ret_warn_once___3 ;
  int __ret_warn_on___3 ;
  long tmp___12 ;
  long tmp___13 ;
  long tmp___14 ;
  bool __warned___4 ;
  int __ret_warn_once___4 ;
  int __ret_warn_on___4 ;
  long tmp___15 ;
  long tmp___16 ;
  long tmp___17 ;
  bool tmp___18 ;
  long tmp___19 ;

  {
  {
#line 874
  bytes_left = 0U;
#line 877
  nfs_page_group_lock(req, 0);
#line 879
  subreq = req;
#line 880
  bytes_left = subreq->wb_bytes;
#line 881
  offset = subreq->wb_offset;
#line 882
  pgbase = subreq->wb_pgbase;
  }
  ldv_53715: 
  {
#line 885
  tmp___8 = nfs_pageio_do_add_request(desc, subreq);
  }
#line 885
  if (tmp___8 == 0) {
    {
#line 887
    __ret_warn_once = subreq->wb_bytes != bytes_left;
#line 887
    tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 887
    if (tmp___1 != 0L) {
      {
#line 887
      __ret_warn_on = ! __warned;
#line 887
      tmp = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 887
      if (tmp != 0L) {
        {
#line 887
        warn_slowpath_null("fs/nfs/pagelist.c", 887);
        }
      } else {

      }
      {
#line 887
      tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 887
      if (tmp___0 != 0L) {
#line 887
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 887
    __builtin_expect(__ret_warn_once != 0, 0L);
#line 888
    __ret_warn_once___0 = subreq->wb_offset != offset;
#line 888
    tmp___4 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
    }
#line 888
    if (tmp___4 != 0L) {
      {
#line 888
      __ret_warn_on___0 = ! __warned___0;
#line 888
      tmp___2 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
      }
#line 888
      if (tmp___2 != 0L) {
        {
#line 888
        warn_slowpath_null("fs/nfs/pagelist.c", 888);
        }
      } else {

      }
      {
#line 888
      tmp___3 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
      }
#line 888
      if (tmp___3 != 0L) {
#line 888
        __warned___0 = 1;
      } else {

      }
    } else {

    }
    {
#line 888
    __builtin_expect(__ret_warn_once___0 != 0, 0L);
#line 889
    __ret_warn_once___1 = subreq->wb_pgbase != pgbase;
#line 889
    tmp___7 = __builtin_expect(__ret_warn_once___1 != 0, 0L);
    }
#line 889
    if (tmp___7 != 0L) {
      {
#line 889
      __ret_warn_on___1 = ! __warned___1;
#line 889
      tmp___5 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
      }
#line 889
      if (tmp___5 != 0L) {
        {
#line 889
        warn_slowpath_null("fs/nfs/pagelist.c", 889);
        }
      } else {

      }
      {
#line 889
      tmp___6 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
      }
#line 889
      if (tmp___6 != 0L) {
#line 889
        __warned___1 = 1;
      } else {

      }
    } else {

    }
    {
#line 889
    __builtin_expect(__ret_warn_once___1 != 0, 0L);
#line 891
    nfs_page_group_unlock(req);
#line 892
    desc->pg_moreio = 1U;
#line 893
    nfs_pageio_doio(desc);
    }
#line 894
    if (desc->pg_error < 0) {
#line 895
      return (0);
    } else {

    }
#line 896
    if ((unsigned int )*((unsigned char *)desc + 44UL) != 0U) {
#line 897
      return (0);
    } else {

    }
    {
#line 899
    nfs_page_group_lock(req, 0);
    }
#line 900
    goto ldv_53698;
  } else {

  }
  {
#line 904
  __ret_warn_once___2 = subreq->wb_bytes + subreq->wb_pgbase > 4096U;
#line 904
  tmp___11 = __builtin_expect(__ret_warn_once___2 != 0, 0L);
  }
#line 904
  if (tmp___11 != 0L) {
    {
#line 904
    __ret_warn_on___2 = ! __warned___2;
#line 904
    tmp___9 = __builtin_expect(__ret_warn_on___2 != 0, 0L);
    }
#line 904
    if (tmp___9 != 0L) {
      {
#line 904
      warn_slowpath_null("fs/nfs/pagelist.c", 904);
      }
    } else {

    }
    {
#line 904
    tmp___10 = __builtin_expect(__ret_warn_on___2 != 0, 0L);
    }
#line 904
    if (tmp___10 != 0L) {
#line 904
      __warned___2 = 1;
    } else {

    }
  } else {

  }
  {
#line 904
  __builtin_expect(__ret_warn_once___2 != 0, 0L);
#line 905
  __ret_warn_once___3 = subreq->wb_bytes > bytes_left;
#line 905
  tmp___14 = __builtin_expect(__ret_warn_once___3 != 0, 0L);
  }
#line 905
  if (tmp___14 != 0L) {
    {
#line 905
    __ret_warn_on___3 = ! __warned___3;
#line 905
    tmp___12 = __builtin_expect(__ret_warn_on___3 != 0, 0L);
    }
#line 905
    if (tmp___12 != 0L) {
      {
#line 905
      warn_slowpath_null("fs/nfs/pagelist.c", 905);
      }
    } else {

    }
    {
#line 905
    tmp___13 = __builtin_expect(__ret_warn_on___3 != 0, 0L);
    }
#line 905
    if (tmp___13 != 0L) {
#line 905
      __warned___3 = 1;
    } else {

    }
  } else {

  }
  {
#line 905
  __builtin_expect(__ret_warn_once___3 != 0, 0L);
#line 906
  __ret_warn_once___4 = subreq->wb_bytes == 0U;
#line 906
  tmp___17 = __builtin_expect(__ret_warn_once___4 != 0, 0L);
  }
#line 906
  if (tmp___17 != 0L) {
    {
#line 906
    __ret_warn_on___4 = ! __warned___4;
#line 906
    tmp___15 = __builtin_expect(__ret_warn_on___4 != 0, 0L);
    }
#line 906
    if (tmp___15 != 0L) {
      {
#line 906
      warn_slowpath_null("fs/nfs/pagelist.c", 906);
      }
    } else {

    }
    {
#line 906
    tmp___16 = __builtin_expect(__ret_warn_on___4 != 0, 0L);
    }
#line 906
    if (tmp___16 != 0L) {
#line 906
      __warned___4 = 1;
    } else {

    }
  } else {

  }
  {
#line 906
  __builtin_expect(__ret_warn_once___4 != 0, 0L);
#line 908
  bytes_left = bytes_left - subreq->wb_bytes;
#line 909
  offset = offset + subreq->wb_bytes;
#line 910
  pgbase = pgbase + subreq->wb_bytes;
  }
#line 912
  if (bytes_left != 0U) {
    {
#line 913
    subreq = nfs_create_request(req->wb_context, req->wb_page, subreq, pgbase, bytes_left);
#line 916
    tmp___18 = IS_ERR((void const   *)subreq);
    }
#line 916
    if ((int )tmp___18) {
#line 917
      goto err_ptr;
    } else {

    }
    {
#line 918
    nfs_lock_request(subreq);
#line 919
    subreq->wb_offset = offset;
#line 920
    subreq->wb_index = req->wb_index;
    }
  } else {

  }
  ldv_53698: ;
#line 922
  if (bytes_left != 0U) {
#line 924
    goto ldv_53715;
  } else {

  }
  {
#line 924
  nfs_page_group_unlock(req);
  }
#line 925
  return (1);
  err_ptr: 
  {
#line 927
  tmp___19 = PTR_ERR((void const   *)subreq);
#line 927
  desc->pg_error = (int )tmp___19;
#line 928
  nfs_page_group_unlock(req);
  }
#line 929
  return (0);
}
}
#line 932 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static int nfs_do_recoalesce(struct nfs_pageio_descriptor *desc ) 
{ 
  struct list_head head ;
  struct nfs_page *req ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
#line 934
  head.next = & head;
#line 934
  head.prev = & head;
  ldv_53727: 
  {
#line 937
  list_splice_init(& desc->pg_list, & head);
#line 938
  desc->pg_bytes_written = desc->pg_bytes_written - desc->pg_count;
#line 939
  desc->pg_count = 0UL;
#line 940
  desc->pg_base = 0U;
#line 941
  desc->pg_recoalesce = 0U;
#line 942
  desc->pg_moreio = 0U;
  }
#line 944
  goto ldv_53724;
  ldv_53726: 
  {
#line 947
  __mptr = (struct list_head  const  *)head.next;
#line 947
  req = (struct nfs_page *)__mptr;
#line 948
  nfs_list_remove_request(req);
#line 949
  tmp = __nfs_pageio_add_request(desc, req);
  }
#line 949
  if (tmp != 0) {
#line 950
    goto ldv_53724;
  } else {

  }
#line 951
  if (desc->pg_error < 0) {
#line 952
    return (0);
  } else {

  }
#line 953
  goto ldv_53725;
  ldv_53724: 
  {
#line 944
  tmp___0 = list_empty((struct list_head  const  *)(& head));
  }
#line 944
  if (tmp___0 == 0) {
#line 946
    goto ldv_53726;
  } else {

  }
  ldv_53725: ;
#line 955
  if ((unsigned int )*((unsigned char *)desc + 44UL) != 0U) {
#line 957
    goto ldv_53727;
  } else {

  }

#line 956
  return (1);
}
}
#line 959 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
int nfs_pageio_add_request(struct nfs_pageio_descriptor *desc , struct nfs_page *req ) 
{ 
  int ret ;

  {
  ldv_53735: 
  {
#line 965
  ret = __nfs_pageio_add_request(desc, req);
  }
#line 966
  if (ret != 0) {
#line 967
    goto ldv_53734;
  } else {

  }
#line 968
  if (desc->pg_error < 0) {
#line 969
    goto ldv_53734;
  } else {

  }
  {
#line 970
  ret = nfs_do_recoalesce(desc);
  }
#line 971
  if (ret != 0) {
#line 973
    goto ldv_53735;
  } else {

  }
  ldv_53734: ;
#line 972
  return (ret);
}
}
#line 974 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_pageio_add_request[23U]  = 
#line 974
  {      'n',      'f',      's',      '_', 
        'p',      'a',      'g',      'e', 
        'i',      'o',      '_',      'a', 
        'd',      'd',      '_',      'r', 
        'e',      'q',      'u',      'e', 
        's',      't',      '\000'};
#line 974
struct kernel_symbol  const  __ksymtab_nfs_pageio_add_request ;
#line 974 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_pageio_add_request  =    {(unsigned long )(& nfs_pageio_add_request), (char const   *)(& __kstrtab_nfs_pageio_add_request)};
#line 980 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_pageio_complete(struct nfs_pageio_descriptor *desc ) 
{ 
  int tmp ;

  {
  ldv_53748: 
  {
#line 983
  nfs_pageio_doio(desc);
  }
#line 984
  if ((unsigned int )*((unsigned char *)desc + 44UL) == 0U) {
#line 985
    goto ldv_53747;
  } else {

  }
  {
#line 986
  tmp = nfs_do_recoalesce(desc);
  }
#line 986
  if (tmp == 0) {
#line 987
    goto ldv_53747;
  } else {

  }
#line 988
  goto ldv_53748;
  ldv_53747: ;
#line 990
  return;
}
}
#line 990 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static char const   __kstrtab_nfs_pageio_complete[20U]  = 
#line 990
  {      'n',      'f',      's',      '_', 
        'p',      'a',      'g',      'e', 
        'i',      'o',      '_',      'c', 
        'o',      'm',      'p',      'l', 
        'e',      't',      'e',      '\000'};
#line 990
struct kernel_symbol  const  __ksymtab_nfs_pageio_complete ;
#line 990 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct kernel_symbol  const  __ksymtab_nfs_pageio_complete  =    {(unsigned long )(& nfs_pageio_complete), (char const   *)(& __kstrtab_nfs_pageio_complete)};
#line 1003 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_pageio_cond_complete(struct nfs_pageio_descriptor *desc , unsigned long index ) 
{ 
  struct nfs_page *prev ;
  struct nfs_page *tmp ;
  int tmp___0 ;

  {
  {
#line 1005
  tmp___0 = list_empty((struct list_head  const  *)(& desc->pg_list));
  }
#line 1005
  if (tmp___0 == 0) {
    {
#line 1006
    tmp = nfs_list_entry(desc->pg_list.prev);
#line 1006
    prev = tmp;
    }
#line 1007
    if (index != prev->wb_index + 1UL) {
      {
#line 1008
      nfs_pageio_complete(desc);
      }
    } else {

    }
  } else {

  }
#line 1010
  return;
}
}
#line 1012 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
int nfs_init_nfspagecache(void) 
{ 


  {
  {
#line 1014
  nfs_page_cachep = kmem_cache_create("nfs_page", 96UL, 0UL, 8192UL, (void (*)(void * ))0);
  }
#line 1018
  if ((unsigned long )nfs_page_cachep == (unsigned long )((struct kmem_cache *)0)) {
#line 1019
    return (-12);
  } else {

  }
#line 1021
  return (0);
}
}
#line 1024 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
void nfs_destroy_nfspagecache(void) 
{ 


  {
  {
#line 1026
  kmem_cache_destroy(nfs_page_cachep);
  }
#line 1027
  return;
}
}
#line 1029 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
static struct rpc_call_ops  const  nfs_pgio_common_ops  =    {& nfs_pgio_prepare, & nfs_pgio_result, 0, & nfs_pgio_release};
#line 1035 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pagelist.c"
struct nfs_pageio_ops  const  nfs_pgio_rw_ops  =    {0, & nfs_generic_pg_test, & nfs_generic_pg_pgios};
#line 533 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_pagelist.c.aux"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 536
  tmp = ldv_kcalloc(n, size, flags);
  }
#line 536
  return (tmp);
}
}
#line 910 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_pagelist.c.aux"
__inline static void ldv_spin_lock_76___3(spinlock_t *lock ) 
{ 


  {
  {
#line 913
  ldv_spin_lock_lock_of_nfs_pgio_header();
#line 915
  spin_lock(lock);
  }
#line 916
  return;
}
}
#line 919 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_pagelist.c.aux"
__inline static void ldv_spin_unlock_77___2(spinlock_t *lock ) 
{ 


  {
  {
#line 922
  ldv_spin_unlock_lock_of_nfs_pgio_header();
#line 924
  spin_unlock(lock);
  }
#line 925
  return;
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) ;
#line 365 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 373
__inline static void ldv_spin_lock_76___3(spinlock_t *lock ) ;
#line 409
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_77___2(spinlock_t *lock ) ;
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/highmem.h"
__inline static void zero_user(struct page *page , unsigned int start , unsigned int size ) 
{ 


  {
  {
#line 219
  zero_user_segments(page, start, start + size, 0U, 0U);
  }
#line 220
  return;
}
}
#line 391 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
extern int read_cache_pages(struct address_space * , struct list_head * , filler_t * ,
                            void * ) ;
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
extern int rpc_restart_call_prepare(struct rpc_task * ) ;
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static void nfs_mark_for_revalidate___0(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;

  {
  {
#line 291
  tmp = NFS_I((struct inode  const  *)inode);
#line 291
  nfsi = tmp;
#line 293
  ldv_spin_lock_72(& inode->i_lock);
#line 294
  nfsi->cache_validity = nfsi->cache_validity | 9UL;
  }
#line 295
  if (((int )inode->i_mode & 61440) == 16384) {
#line 296
    nfsi->cache_validity = nfsi->cache_validity | 34UL;
  } else {

  }
  {
#line 297
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 298
  return;
}
}
#line 554
int nfs_readpage_async(struct nfs_open_context *ctx , struct inode *inode , struct page *page ) ;
#line 408 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
void nfs_pageio_reset_read_mds(struct nfs_pageio_descriptor *pgio ) ;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_server_stats___2(struct nfs_server  const  *server ,
                                              enum nfs_stat_eventcounters stat ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 28
  __vpp_verify = (void const   *)0;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___0;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___1;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___2;
  } else {

  }
#line 28
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 28
  pao_ID__ = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___0;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8;
  } else {

  }
#line 28
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53717;
  case_2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53717;
  case_4: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53717;
  case_8: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53717;
  switch_default: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_53717: ;
#line 28
  goto ldv_53722;
  case_2___0: /* CIL Label */ 
#line 28
  pao_ID_____0 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___1;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___0;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___0;
  } else {

  }
#line 28
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53728;
  case_2___1: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53728;
  case_4___0: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53728;
  case_8___0: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53728;
  switch_default___0: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_53728: ;
#line 28
  goto ldv_53722;
  case_4___1: /* CIL Label */ 
#line 28
  pao_ID_____1 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___2;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___2;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___1;
  } else {

  }
#line 28
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53738;
  case_2___2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53738;
  case_4___2: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53738;
  case_8___1: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53738;
  switch_default___1: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_53738: ;
#line 28
  goto ldv_53722;
  case_8___2: /* CIL Label */ 
#line 28
  pao_ID_____2 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___3;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___3;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___3;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___3;
  } else {

  }
#line 28
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53748;
  case_2___3: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53748;
  case_4___3: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53748;
  case_8___3: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53748;
  switch_default___2: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_53748: ;
#line 28
  goto ldv_53722;
  switch_default___3: /* CIL Label */ 
  {
#line 28
  __bad_size_call_parameter();
  }
#line 28
  goto ldv_53722;
  switch_break: /* CIL Label */ ;
  }
  ldv_53722: ;
#line 29
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_stats___2(struct inode  const  *inode , enum nfs_stat_eventcounters stat ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 34
  tmp = NFS_SERVER(inode);
#line 34
  nfs_inc_server_stats___2((struct nfs_server  const  *)tmp, stat);
  }
#line 35
  return;
}
}
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_server_stats___1(struct nfs_server  const  *server ,
                                              enum nfs_stat_bytecounters stat , long addend ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 41
  __vpp_verify = (void const   *)0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___0;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___1;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___2;
  } else {

  }
#line 41
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 41
  pao_ID__ = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___0;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8;
  } else {

  }
#line 41
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53769;
  case_2: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53769;
  case_4: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53769;
  case_8: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53769;
  switch_default: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_53769: ;
#line 41
  goto ldv_53774;
  case_2___0: /* CIL Label */ 
#line 41
  pao_ID_____0 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___1;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___1;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___0;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___0;
  } else {

  }
#line 41
  goto switch_default___0;
  case_1___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53780;
  case_2___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53780;
  case_4___0: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53780;
  case_8___0: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53780;
  switch_default___0: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_53780: ;
#line 41
  goto ldv_53774;
  case_4___1: /* CIL Label */ 
#line 41
  pao_ID_____1 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___2;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___2;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___2;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___1;
  } else {

  }
#line 41
  goto switch_default___1;
  case_1___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53790;
  case_2___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53790;
  case_4___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53790;
  case_8___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53790;
  switch_default___1: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_53790: ;
#line 41
  goto ldv_53774;
  case_8___2: /* CIL Label */ 
#line 41
  pao_ID_____2 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___3;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___3;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___3;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___3;
  } else {

  }
#line 41
  goto switch_default___2;
  case_1___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53800;
  case_2___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53800;
  case_4___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53800;
  case_8___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53800;
  switch_default___2: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_53800: ;
#line 41
  goto ldv_53774;
  switch_default___3: /* CIL Label */ 
  {
#line 41
  __bad_size_call_parameter();
  }
#line 41
  goto ldv_53774;
  switch_break: /* CIL Label */ ;
  }
  ldv_53774: ;
#line 42
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_stats___1(struct inode  const  *inode , enum nfs_stat_bytecounters stat ,
                                       long addend ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 48
  tmp = NFS_SERVER(inode);
#line 48
  nfs_add_server_stats___1((struct nfs_server  const  *)tmp, stat, addend);
  }
#line 49
  return;
}
}
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
int __nfs_readpage_from_fscache(struct nfs_open_context *ctx , struct inode *inode ,
                                struct page *page ) ;
#line 88
int __nfs_readpages_from_fscache(struct nfs_open_context *ctx , struct inode *inode ,
                                 struct address_space *mapping , struct list_head *pages ,
                                 unsigned int *nr_pages ) ;
#line 91
void __nfs_readpage_to_fscache(struct inode *inode , struct page *page , int sync ) ;
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
__inline static int nfs_readpage_from_fscache(struct nfs_open_context *ctx , struct inode *inode ,
                                              struct page *page ) 
{ 
  int tmp ;
  struct nfs_inode *tmp___0 ;

  {
  {
#line 121
  tmp___0 = NFS_I((struct inode  const  *)inode);
  }
#line 121
  if ((unsigned long )tmp___0->fscache != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 122
    tmp = __nfs_readpage_from_fscache(ctx, inode, page);
    }
#line 122
    return (tmp);
  } else {

  }
#line 123
  return (-105);
}
}
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
__inline static int nfs_readpages_from_fscache(struct nfs_open_context *ctx , struct inode *inode ,
                                               struct address_space *mapping , struct list_head *pages ,
                                               unsigned int *nr_pages ) 
{ 
  int tmp ;
  struct nfs_inode *tmp___0 ;

  {
  {
#line 135
  tmp___0 = NFS_I((struct inode  const  *)inode);
  }
#line 135
  if ((unsigned long )tmp___0->fscache != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 136
    tmp = __nfs_readpages_from_fscache(ctx, inode, mapping, pages, nr_pages);
    }
#line 136
    return (tmp);
  } else {

  }
#line 138
  return (-105);
}
}
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
__inline static void nfs_readpage_to_fscache(struct inode *inode , struct page *page ,
                                             int sync ) 
{ 
  int tmp ;

  {
  {
#line 149
  tmp = PagePrivate2((struct page  const  *)page);
  }
#line 149
  if (tmp != 0) {
    {
#line 150
    __nfs_readpage_to_fscache(inode, page, sync);
    }
  } else {

  }
#line 151
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static struct nfs_pgio_completion_ops  const  nfs_async_read_completion_ops ;
#line 32
static struct nfs_rw_ops  const  nfs_rw_read_ops ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static struct kmem_cache *nfs_rdata_cachep  ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static struct nfs_pgio_header *nfs_readhdr_alloc(void) 
{ 
  void *tmp ;

  {
  {
#line 38
  tmp = kmem_cache_zalloc(nfs_rdata_cachep, 208U);
  }
#line 38
  return ((struct nfs_pgio_header *)tmp);
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static void nfs_readhdr_free(struct nfs_pgio_header *rhdr ) 
{ 


  {
  {
#line 43
  kmem_cache_free(nfs_rdata_cachep, (void *)rhdr);
  }
#line 44
  return;
}
}
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static int nfs_return_empty_page(struct page *page ) 
{ 


  {
  {
#line 49
  zero_user(page, 0U, 4096U);
#line 50
  SetPageUptodate(page);
#line 51
  unlock_page(page);
  }
#line 52
  return (0);
}
}
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
void nfs_pageio_init_read(struct nfs_pageio_descriptor *pgio , struct inode *inode ,
                          bool force_mds , struct nfs_pgio_completion_ops  const  *compl_ops ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  struct nfs_pageio_ops  const  *pg_ops ;

  {
  {
#line 59
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 59
  server = tmp;
#line 60
  pg_ops = & nfs_pgio_rw_ops;
  }
#line 63
  if ((unsigned long )server->pnfs_curr_ld != (unsigned long )((struct pnfs_layoutdriver_type *)0) && ! force_mds) {
#line 64
    pg_ops = (server->pnfs_curr_ld)->pg_read_ops;
  } else {

  }
  {
#line 66
  nfs_pageio_init(pgio, inode, pg_ops, compl_ops, & nfs_rw_read_ops, (size_t )server->rsize,
                  0);
  }
#line 68
  return;
}
}
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static char const   __kstrtab_nfs_pageio_init_read[21U]  = 
#line 69
  {      'n',      'f',      's',      '_', 
        'p',      'a',      'g',      'e', 
        'i',      'o',      '_',      'i', 
        'n',      'i',      't',      '_', 
        'r',      'e',      'a',      'd', 
        '\000'};
#line 69
struct kernel_symbol  const  __ksymtab_nfs_pageio_init_read ;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
struct kernel_symbol  const  __ksymtab_nfs_pageio_init_read  =    {(unsigned long )(& nfs_pageio_init_read), (char const   *)(& __kstrtab_nfs_pageio_init_read)};
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
void nfs_pageio_reset_read_mds(struct nfs_pageio_descriptor *pgio ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 73
  pgio->pg_ops = & nfs_pgio_rw_ops;
#line 74
  tmp = NFS_SERVER((struct inode  const  *)pgio->pg_inode);
#line 74
  pgio->pg_bsize = (size_t )tmp->rsize;
  }
#line 75
  return;
}
}
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static char const   __kstrtab_nfs_pageio_reset_read_mds[26U]  = 
#line 76
  {      'n',      'f',      's',      '_', 
        'p',      'a',      'g',      'e', 
        'i',      'o',      '_',      'r', 
        'e',      's',      'e',      't', 
        '_',      'r',      'e',      'a', 
        'd',      '_',      'm',      'd', 
        's',      '\000'};
#line 76
struct kernel_symbol  const  __ksymtab_nfs_pageio_reset_read_mds ;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
struct kernel_symbol  const  __ksymtab_nfs_pageio_reset_read_mds  =    {(unsigned long )(& nfs_pageio_reset_read_mds), (char const   *)(& __kstrtab_nfs_pageio_reset_read_mds)};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
int nfs_readpage_async(struct nfs_open_context *ctx , struct inode *inode , struct page *page ) 
{ 
  struct nfs_page *new ;
  unsigned int len ;
  struct nfs_pageio_descriptor pgio ;
  int tmp ;
  long tmp___0 ;
  bool tmp___1 ;
  struct nfs_inode *tmp___2 ;
  struct nfs_inode *tmp___3 ;

  {
  {
#line 85
  len = nfs_page_length(page);
  }
#line 86
  if (len == 0U) {
    {
#line 87
    tmp = nfs_return_empty_page(page);
    }
#line 87
    return (tmp);
  } else {

  }
  {
#line 88
  new = nfs_create_request(ctx, page, (struct nfs_page *)0, 0U, len);
#line 89
  tmp___1 = IS_ERR((void const   *)new);
  }
#line 89
  if ((int )tmp___1) {
    {
#line 90
    unlock_page(page);
#line 91
    tmp___0 = PTR_ERR((void const   *)new);
    }
#line 91
    return ((int )tmp___0);
  } else {

  }
#line 93
  if (len <= 4095U) {
    {
#line 94
    zero_user_segment(page, len, 4096U);
    }
  } else {

  }
  {
#line 96
  nfs_pageio_init_read(& pgio, inode, 0, & nfs_async_read_completion_ops);
#line 98
  nfs_pageio_add_request(& pgio, new);
#line 99
  nfs_pageio_complete(& pgio);
#line 100
  tmp___2 = NFS_I((struct inode  const  *)inode);
#line 100
  tmp___3 = NFS_I((struct inode  const  *)inode);
#line 100
  tmp___2->read_io = tmp___3->read_io + (unsigned long long )pgio.pg_bytes_written;
  }
#line 101
  return (0);
}
}
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static void nfs_readpage_release(struct nfs_page *req ) 
{ 
  struct inode *d_inode ;
  loff_t tmp ;
  __u64 tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  loff_t tmp___4 ;
  __u64 tmp___5 ;
  long tmp___6 ;

  {
  {
#line 106
  d_inode = ((req->wb_context)->dentry)->d_inode;
#line 108
  tmp___1 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 108
  if (tmp___1 != 0L) {
    {
#line 108
    tmp = req_offset(req);
#line 108
    tmp___0 = NFS_FILEID((struct inode  const  *)d_inode);
#line 108
    printk("\001dNFS: read done (%s/%llu %d@%lld)\n", (char *)(& (d_inode->i_sb)->s_id),
           tmp___0, req->wb_bytes, tmp);
    }
  } else {

  }
  {
#line 112
  tmp___3 = nfs_page_group_sync_on_bit(req, 7U);
  }
#line 112
  if ((int )tmp___3) {
    {
#line 113
    tmp___2 = PageUptodate(req->wb_page);
    }
#line 113
    if (tmp___2 != 0) {
      {
#line 114
      nfs_readpage_to_fscache(d_inode, req->wb_page, 0);
      }
    } else {

    }
    {
#line 116
    unlock_page(req->wb_page);
    }
  } else {

  }
  {
#line 119
  tmp___6 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 119
  if (tmp___6 != 0L) {
    {
#line 119
    tmp___4 = req_offset(req);
#line 119
    tmp___5 = NFS_FILEID((struct inode  const  *)((req->wb_context)->dentry)->d_inode);
#line 119
    printk("\001dNFS: read done (%s/%Lu %d@%Ld)\n", (char *)(& ((((req->wb_context)->dentry)->d_inode)->i_sb)->s_id),
           tmp___5, req->wb_bytes, tmp___4);
    }
  } else {

  }
  {
#line 124
  nfs_release_request(req);
  }
#line 125
  return;
}
}
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static void nfs_page_group_set_uptodate(struct nfs_page *req ) 
{ 
  bool tmp ;

  {
  {
#line 129
  tmp = nfs_page_group_sync_on_bit(req, 8U);
  }
#line 129
  if ((int )tmp) {
    {
#line 130
    SetPageUptodate(req->wb_page);
    }
  } else {

  }
#line 131
  return;
}
}
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static void nfs_read_completion(struct nfs_pgio_header *hdr ) 
{ 
  unsigned long bytes ;
  int tmp ;
  struct nfs_page *req ;
  struct nfs_page *tmp___0 ;
  struct page *page ;
  unsigned long start ;
  unsigned long end ;
  int __ret_warn_on ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 135
  bytes = 0UL;
#line 137
  tmp = constant_test_bit(2L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 137
  if (tmp != 0) {
#line 138
    goto out;
  } else {

  }
#line 139
  goto ldv_54685;
  ldv_54684: 
  {
#line 140
  tmp___0 = nfs_list_entry(hdr->pages.next);
#line 140
  req = tmp___0;
#line 141
  page = req->wb_page;
#line 142
  start = (unsigned long )req->wb_pgbase;
#line 143
  end = (unsigned long )(req->wb_pgbase + req->wb_bytes);
#line 145
  tmp___2 = constant_test_bit(1L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 145
  if (tmp___2 != 0) {
#line 149
    if (bytes > hdr->good_bytes) {
      {
#line 152
      zero_user_segment(page, (unsigned int )start, (unsigned int )end);
      }
    } else
#line 154
    if (hdr->good_bytes - bytes < (unsigned long )req->wb_bytes) {
      {
#line 157
      start = start + (hdr->good_bytes - bytes);
#line 158
      __ret_warn_on = start < (unsigned long )req->wb_pgbase;
#line 158
      tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 158
      if (tmp___1 != 0L) {
        {
#line 158
        warn_slowpath_null("fs/nfs/read.c", 158);
        }
      } else {

      }
      {
#line 158
      __builtin_expect(__ret_warn_on != 0, 0L);
#line 159
      zero_user_segment(page, (unsigned int )start, (unsigned int )end);
      }
    } else {

    }
  } else {

  }
  {
#line 162
  bytes = bytes + (unsigned long )req->wb_bytes;
#line 163
  tmp___3 = constant_test_bit(0L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 163
  if (tmp___3 != 0) {
#line 164
    if (bytes <= hdr->good_bytes) {
      {
#line 165
      nfs_page_group_set_uptodate(req);
      }
    } else {

    }
  } else {
    {
#line 167
    nfs_page_group_set_uptodate(req);
    }
  }
  {
#line 168
  nfs_list_remove_request(req);
#line 169
  nfs_readpage_release(req);
  }
  ldv_54685: 
  {
#line 139
  tmp___4 = list_empty((struct list_head  const  *)(& hdr->pages));
  }
#line 139
  if (tmp___4 == 0) {
#line 141
    goto ldv_54684;
  } else {

  }

  out: 
  {
#line 172
  (*(hdr->release))(hdr);
  }
#line 173
  return;
}
}
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static void nfs_initiate_read(struct nfs_pgio_header *hdr , struct rpc_message *msg ,
                              struct rpc_task_setup *task_setup_data , int how ) 
{ 
  struct inode *inode ;
  int swap_flags ;
  struct nfs_rpc_ops  const  *tmp ;

  {
  {
#line 179
  inode = hdr->inode;
#line 180
  swap_flags = (inode->i_flags & 256U) != 0U ? 66 : 0;
#line 182
  task_setup_data->flags = (unsigned short )((int )((short )task_setup_data->flags) | (int )((short )swap_flags));
#line 183
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 183
  (*(tmp->read_setup))(hdr, msg);
  }
#line 184
  return;
}
}
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static void nfs_async_read_error(struct list_head *head ) 
{ 
  struct nfs_page *req ;
  int tmp ;

  {
#line 191
  goto ldv_54700;
  ldv_54699: 
  {
#line 192
  req = nfs_list_entry(head->next);
#line 193
  nfs_list_remove_request(req);
#line 194
  nfs_readpage_release(req);
  }
  ldv_54700: 
  {
#line 191
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 191
  if (tmp == 0) {
#line 193
    goto ldv_54699;
  } else {

  }

#line 198
  return;
}
}
#line 198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static struct nfs_pgio_completion_ops  const  nfs_async_read_completion_ops  =    {& nfs_async_read_error, 0, & nfs_read_completion};
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static int nfs_readpage_done(struct rpc_task *task , struct nfs_pgio_header *hdr ,
                             struct inode *inode ) 
{ 
  int status ;
  struct nfs_rpc_ops  const  *tmp ;
  int tmp___0 ;
  struct nfs_inode *tmp___1 ;

  {
  {
#line 211
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 211
  tmp___0 = (*(tmp->read_done))(task, hdr);
#line 211
  status = tmp___0;
  }
#line 212
  if (status != 0) {
#line 213
    return (status);
  } else {

  }
  {
#line 215
  nfs_add_stats___1((struct inode  const  *)inode, 4, (long )hdr->res.count);
  }
#line 217
  if (task->tk_status == -116) {
    {
#line 218
    tmp___1 = NFS_I((struct inode  const  *)inode);
#line 218
    set_bit(1L, (unsigned long volatile   *)(& tmp___1->flags));
#line 219
    nfs_mark_for_revalidate___0(inode);
    }
  } else {

  }
#line 221
  return (0);
}
}
#line 224 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static void nfs_readpage_retry(struct rpc_task *task , struct nfs_pgio_header *hdr ) 
{ 
  struct nfs_pgio_args *argp ;
  struct nfs_pgio_res *resp ;

  {
  {
#line 227
  argp = & hdr->args;
#line 228
  resp = & hdr->res;
#line 231
  nfs_inc_stats___2((struct inode  const  *)hdr->inode, 22);
  }
#line 233
  if (resp->count == 0U) {
    {
#line 234
    nfs_set_pgio_error(hdr, -5, (loff_t )argp->offset);
    }
#line 235
    return;
  } else {

  }
  {
#line 238
  hdr->mds_offset = hdr->mds_offset + (__u64 )resp->count;
#line 239
  argp->offset = argp->offset + (__u64 )resp->count;
#line 240
  argp->pgbase = argp->pgbase + resp->count;
#line 241
  argp->count = argp->count - resp->count;
#line 242
  rpc_restart_call_prepare(task);
  }
#line 243
  return;
}
}
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static void nfs_readpage_result(struct rpc_task *task , struct nfs_pgio_header *hdr ) 
{ 
  loff_t bound ;

  {
#line 248
  if (hdr->res.eof != 0) {
    {
#line 251
    bound = (loff_t )(hdr->args.offset + (__u64 )hdr->res.count);
#line 252
    ldv_spin_lock_76___3(& hdr->lock);
    }
#line 253
    if ((unsigned long long )bound < (unsigned long long )hdr->io_start + (unsigned long long )hdr->good_bytes) {
      {
#line 254
      set_bit(1L, (unsigned long volatile   *)(& hdr->flags));
#line 255
      clear_bit(0L, (unsigned long volatile   *)(& hdr->flags));
#line 256
      hdr->good_bytes = (unsigned long )(bound - hdr->io_start);
      }
    } else {

    }
    {
#line 258
    ldv_spin_unlock_77___2(& hdr->lock);
    }
  } else
#line 259
  if (hdr->res.count != hdr->args.count) {
    {
#line 260
    nfs_readpage_retry(task, hdr);
    }
  } else {

  }
#line 261
  return;
}
}
#line 269 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
int nfs_readpage(struct file *file , struct page *page ) 
{ 
  struct nfs_open_context *ctx ;
  struct inode *inode ;
  struct address_space *tmp ;
  int error ;
  unsigned long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct nfs_open_context *tmp___4 ;

  {
  {
#line 272
  tmp = page_file_mapping(page);
#line 272
  inode = tmp->host;
#line 275
  tmp___1 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 275
  if (tmp___1 != 0L) {
    {
#line 275
    tmp___0 = page_file_index(page);
#line 275
    printk("\001dNFS: nfs_readpage (%p %ld@%lu)\n", page, 4096UL, tmp___0);
    }
  } else {

  }
  {
#line 277
  nfs_inc_stats___2((struct inode  const  *)inode, 8);
#line 278
  nfs_add_stats___1((struct inode  const  *)inode, 6, 1L);
#line 287
  error = nfs_wb_page(inode, page);
  }
#line 288
  if (error != 0) {
#line 289
    goto out_unlock;
  } else {

  }
  {
#line 290
  tmp___2 = PageUptodate(page);
  }
#line 290
  if (tmp___2 != 0) {
#line 291
    goto out_unlock;
  } else {

  }
  {
#line 293
  error = -116;
#line 294
  tmp___3 = NFS_STALE((struct inode  const  *)inode);
  }
#line 294
  if (tmp___3 != 0) {
#line 295
    goto out_unlock;
  } else {

  }
#line 297
  if ((unsigned long )file == (unsigned long )((struct file *)0)) {
    {
#line 298
    error = -9;
#line 299
    ctx = nfs_find_open_context(inode, (struct rpc_cred *)0, 1U);
    }
#line 300
    if ((unsigned long )ctx == (unsigned long )((struct nfs_open_context *)0)) {
#line 301
      goto out_unlock;
    } else {

    }
  } else {
    {
#line 303
    tmp___4 = nfs_file_open_context(file);
#line 303
    ctx = get_nfs_open_context(tmp___4);
    }
  }
#line 305
  if (((inode->i_sb)->s_flags & 16UL) == 0UL && (inode->i_flags & 1U) == 0U) {
    {
#line 306
    error = nfs_readpage_from_fscache(ctx, inode, page);
    }
#line 307
    if (error == 0) {
#line 308
      goto out;
    } else {

    }
  } else {

  }
  {
#line 311
  error = nfs_readpage_async(ctx, inode, page);
  }
  out: 
  {
#line 314
  put_nfs_open_context(ctx);
  }
#line 315
  return (error);
  out_unlock: 
  {
#line 317
  unlock_page(page);
  }
#line 318
  return (error);
}
}
#line 327 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static int readpage_async_filler(void *data , struct page *page ) 
{ 
  struct nfs_readdesc *desc ;
  struct nfs_page *new ;
  unsigned int len ;
  int error ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
  {
#line 329
  desc = (struct nfs_readdesc *)data;
#line 334
  len = nfs_page_length(page);
  }
#line 335
  if (len == 0U) {
    {
#line 336
    tmp = nfs_return_empty_page(page);
    }
#line 336
    return (tmp);
  } else {

  }
  {
#line 338
  new = nfs_create_request(desc->ctx, page, (struct nfs_page *)0, 0U, len);
#line 339
  tmp___0 = IS_ERR((void const   *)new);
  }
#line 339
  if ((int )tmp___0) {
#line 340
    goto out_error;
  } else {

  }
#line 342
  if (len <= 4095U) {
    {
#line 343
    zero_user_segment(page, len, 4096U);
    }
  } else {

  }
  {
#line 344
  tmp___1 = nfs_pageio_add_request(desc->pgio, new);
  }
#line 344
  if (tmp___1 == 0) {
#line 345
    error = (desc->pgio)->pg_error;
#line 346
    goto out_unlock;
  } else {

  }
#line 348
  return (0);
  out_error: 
  {
#line 350
  tmp___2 = PTR_ERR((void const   *)new);
#line 350
  error = (int )tmp___2;
  }
  out_unlock: 
  {
#line 352
  unlock_page(page);
  }
#line 353
  return (error);
}
}
#line 356 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
int nfs_readpages(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                  unsigned int nr_pages ) 
{ 
  struct nfs_pageio_descriptor pgio ;
  struct nfs_readdesc desc ;
  struct inode *inode ;
  unsigned long npages ;
  int ret ;
  __u64 tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct nfs_open_context *tmp___2 ;
  struct nfs_inode *tmp___3 ;
  struct nfs_inode *tmp___4 ;

  {
  {
#line 360
  desc.pgio = & pgio;
#line 360
  desc.ctx = 0;
#line 363
  inode = mapping->host;
#line 365
  ret = -116;
#line 367
  tmp___0 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 367
  if (tmp___0 != 0L) {
    {
#line 367
    tmp = NFS_FILEID((struct inode  const  *)inode);
#line 367
    printk("\001dNFS: nfs_readpages (%s/%Lu %d)\n", (char *)(& (inode->i_sb)->s_id),
           tmp, nr_pages);
    }
  } else {

  }
  {
#line 371
  nfs_inc_stats___2((struct inode  const  *)inode, 9);
#line 373
  tmp___1 = NFS_STALE((struct inode  const  *)inode);
  }
#line 373
  if (tmp___1 != 0) {
#line 374
    goto out;
  } else {

  }
#line 376
  if ((unsigned long )filp == (unsigned long )((struct file *)0)) {
    {
#line 377
    desc.ctx = nfs_find_open_context(inode, (struct rpc_cred *)0, 1U);
    }
#line 378
    if ((unsigned long )desc.ctx == (unsigned long )((struct nfs_open_context *)0)) {
#line 379
      return (-9);
    } else {

    }
  } else {
    {
#line 381
    tmp___2 = nfs_file_open_context(filp);
#line 381
    desc.ctx = get_nfs_open_context(tmp___2);
    }
  }
  {
#line 386
  ret = nfs_readpages_from_fscache(desc.ctx, inode, mapping, pages, & nr_pages);
  }
#line 388
  if (ret == 0) {
#line 389
    goto read_complete;
  } else {

  }
  {
#line 391
  nfs_pageio_init_read(& pgio, inode, 0, & nfs_async_read_completion_ops);
#line 394
  ret = read_cache_pages(mapping, pages, & readpage_async_filler, (void *)(& desc));
#line 396
  nfs_pageio_complete(& pgio);
#line 397
  tmp___3 = NFS_I((struct inode  const  *)inode);
#line 397
  tmp___4 = NFS_I((struct inode  const  *)inode);
#line 397
  tmp___3->read_io = tmp___4->read_io + (unsigned long long )pgio.pg_bytes_written;
#line 398
  npages = (pgio.pg_bytes_written + 4095UL) >> 12;
#line 399
  nfs_add_stats___1((struct inode  const  *)inode, 6, (long )npages);
  }
  read_complete: 
  {
#line 401
  put_nfs_open_context(desc.ctx);
  }
  out: ;
#line 403
  return (ret);
}
}
#line 406 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
int nfs_init_readpagecache(void) 
{ 


  {
  {
#line 408
  nfs_rdata_cachep = kmem_cache_create("nfs_read_data", 968UL, 0UL, 8192UL, (void (*)(void * ))0);
  }
#line 412
  if ((unsigned long )nfs_rdata_cachep == (unsigned long )((struct kmem_cache *)0)) {
#line 413
    return (-12);
  } else {

  }
#line 415
  return (0);
}
}
#line 418 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
void nfs_destroy_readpagecache(void) 
{ 


  {
  {
#line 420
  kmem_cache_destroy(nfs_rdata_cachep);
  }
#line 421
  return;
}
}
#line 423 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/read.c"
static struct nfs_rw_ops  const  nfs_rw_read_ops  =    {1U, & nfs_readhdr_alloc, & nfs_readhdr_free, 0, & nfs_readpage_done, & nfs_readpage_result,
    & nfs_initiate_read};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 2518 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
extern void page_put_link(struct dentry * , struct nameidata * , void * ) ;
#line 2524
extern int generic_readlink(struct dentry * , char * , int  ) ;
#line 199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static void SetPageError(struct page *page ) 
{ 


  {
  {
#line 199
  set_bit(1L, (unsigned long volatile   *)(& page->flags));
  }
#line 200
  return;
}
}
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/namei.h"
__inline static void nd_set_link(struct nameidata *nd , char *path ) 
{ 


  {
#line 88
  nd->saved_names[nd->depth] = path;
#line 89
  return;
}
}
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/symlink.c"
static int nfs_symlink_filler(struct inode *inode , struct page *page ) 
{ 
  int error ;
  struct nfs_rpc_ops  const  *tmp ;

  {
  {
#line 33
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 33
  error = (*(tmp->readlink))(inode, page, 0U, 4096U);
  }
#line 34
  if (error < 0) {
#line 35
    goto error;
  } else {

  }
  {
#line 36
  SetPageUptodate(page);
#line 37
  unlock_page(page);
  }
#line 38
  return (0);
  error: 
  {
#line 41
  SetPageError(page);
#line 42
  unlock_page(page);
  }
#line 43
  return (-5);
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/symlink.c"
static void *nfs_follow_link(struct dentry *dentry , struct nameidata *nd ) 
{ 
  struct inode *inode ;
  struct page *page ;
  void *err ;
  int tmp ;
  bool tmp___0 ;
  void *tmp___1 ;

  {
  {
#line 48
  inode = dentry->d_inode;
#line 52
  tmp = nfs_revalidate_mapping(inode, inode->i_mapping);
#line 52
  err = ERR_PTR((long )tmp);
  }
#line 53
  if ((unsigned long )err != (unsigned long )((void *)0)) {
#line 54
    goto read_failed;
  } else {

  }
  {
#line 55
  page = read_cache_page(& inode->i_data, 0UL, (filler_t *)(& nfs_symlink_filler),
                         (void *)inode);
#line 57
  tmp___0 = IS_ERR((void const   *)page);
  }
#line 57
  if ((int )tmp___0) {
#line 58
    err = (void *)page;
#line 59
    goto read_failed;
  } else {

  }
  {
#line 61
  tmp___1 = kmap(page);
#line 61
  nd_set_link(nd, (char *)tmp___1);
  }
#line 62
  return ((void *)page);
  read_failed: 
  {
#line 65
  nd_set_link(nd, (char *)err);
  }
#line 66
  return ((void *)0);
}
}
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/symlink.c"
struct inode_operations  const  nfs_symlink_inode_operations  = 
#line 72
     {0, & nfs_follow_link, 0, 0, & generic_readlink, & page_put_link, 0, 0, 0, 0, 0,
    0, 0, 0, 0, & nfs_setattr, & nfs_getattr, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 608 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 610
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 622 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
  {
#line 624
  __hlist_del(n);
#line 625
  n->next = (struct hlist_node *)-2401263026317557504L;
#line 626
  n->pprev = (struct hlist_node **)-2401263026316508672L;
  }
#line 627
  return;
}
}
#line 637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 639
  first = h->first;
#line 640
  n->next = first;
#line 641
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 642
    first->pprev = & n->next;
  } else {

  }
#line 643
  h->first = n;
#line 644
  n->pprev = & h->first;
#line 645
  return;
}
}
#line 395 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernel.h"
extern int scnprintf(char * , size_t  , char const   *  , ...) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/cmpxchg.h"
extern void __cmpxchg_wrong_size(void) ;
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
  {
#line 169
  tmp = atomic_add_return(- i, v);
  }
#line 169
  return (tmp);
}
}
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 177
  __old = old;
#line 177
  __new = new;
  {
#line 177
  if (4UL == 1UL) {
#line 177
    goto case_1;
  } else {

  }
#line 177
  if (4UL == 2UL) {
#line 177
    goto case_2;
  } else {

  }
#line 177
  if (4UL == 4UL) {
#line 177
    goto case_4;
  } else {

  }
#line 177
  if (4UL == 8UL) {
#line 177
    goto case_8;
  } else {

  }
#line 177
  goto switch_default;
  case_1: /* CIL Label */ 
#line 177
  __ptr = (u8 volatile   *)(& v->counter);
#line 177
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
#line 177
  goto ldv_5526;
  case_2: /* CIL Label */ 
#line 177
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 177
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
#line 177
  goto ldv_5526;
  case_4: /* CIL Label */ 
#line 177
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 177
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
#line 177
  goto ldv_5526;
  case_8: /* CIL Label */ 
#line 177
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 177
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
#line 177
  goto ldv_5526;
  switch_default: /* CIL Label */ 
  {
#line 177
  __cmpxchg_wrong_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_5526: ;
#line 177
  return (__ret);
}
}
#line 194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic.h"
__inline static int __atomic_add_unless(atomic_t *v , int a , int u ) 
{ 
  int c ;
  int old ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 197
  c = atomic_read((atomic_t const   *)v);
  }
  ldv_5555: 
  {
#line 199
  tmp = __builtin_expect(c == u, 0L);
  }
#line 199
  if (tmp != 0L) {
#line 200
    goto ldv_5554;
  } else {

  }
  {
#line 201
  old = atomic_cmpxchg(v, c, c + a);
#line 202
  tmp___0 = __builtin_expect(old == c, 1L);
  }
#line 202
  if (tmp___0 != 0L) {
#line 203
    goto ldv_5554;
  } else {

  }
#line 204
  c = old;
#line 205
  goto ldv_5555;
  ldv_5554: ;
#line 206
  return (c);
}
}
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/atomic.h"
__inline static int atomic_add_unless(atomic_t *v , int a , int u ) 
{ 
  int tmp ;

  {
  {
#line 53
  tmp = __atomic_add_unless(v, a, u);
  }
#line 53
  return (tmp != u);
}
}
#line 365 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 377
__inline static void ldv_spin_lock_82(spinlock_t *lock ) ;
#line 381
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 385
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 389
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 393
__inline static void ldv_spin_lock_82(spinlock_t *lock ) ;
#line 397
__inline static void ldv_spin_lock_82(spinlock_t *lock ) ;
#line 401
__inline static void ldv_spin_lock_82(spinlock_t *lock ) ;
#line 409
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 429
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 433
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 437
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 441
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 445
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 449
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 453
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 457
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 2354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
extern struct inode *igrab(struct inode * ) ;
#line 637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/sched.h"
extern void rpc_put_task_async(struct rpc_task * ) ;
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static void nfs_mark_for_revalidate___1(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;

  {
  {
#line 291
  tmp = NFS_I((struct inode  const  *)inode);
#line 291
  nfsi = tmp;
#line 293
  ldv_spin_lock_72(& inode->i_lock);
#line 294
  nfsi->cache_validity = nfsi->cache_validity | 9UL;
  }
#line 295
  if (((int )inode->i_mode & 61440) == 16384) {
#line 296
    nfsi->cache_validity = nfsi->cache_validity | 34UL;
  } else {

  }
  {
#line 297
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 298
  return;
}
}
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/namei.h"
extern struct dentry *lookup_one_len(char const   * , struct dentry * , int  ) ;
#line 257 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fsnotify_backend.h"
extern int __fsnotify_parent(struct path * , struct dentry * , __u32  ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fsnotify.h"
__inline static int fsnotify_parent(struct path *path , struct dentry *dentry , __u32 mask ) 
{ 
  int tmp ;

  {
#line 31
  if ((unsigned long )dentry == (unsigned long )((struct dentry *)0)) {
#line 32
    dentry = path->dentry;
  } else {

  }
  {
#line 34
  tmp = __fsnotify_parent(path, dentry, mask);
  }
#line 34
  return (tmp);
}
}
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fsnotify.h"
__inline static void fsnotify_nameremove(struct dentry *dentry , int isdir ) 
{ 
  __u32 mask ;

  {
#line 136
  mask = 512U;
#line 138
  if (isdir != 0) {
#line 139
    mask = mask | 1073741824U;
  } else {

  }
  {
#line 141
  fsnotify_parent((struct path *)0, dentry, mask);
  }
#line 142
  return;
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_server_stats___3(struct nfs_server  const  *server ,
                                              enum nfs_stat_eventcounters stat ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 28
  __vpp_verify = (void const   *)0;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___0;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___1;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___2;
  } else {

  }
#line 28
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 28
  pao_ID__ = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___0;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8;
  } else {

  }
#line 28
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53826;
  case_2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53826;
  case_4: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53826;
  case_8: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53826;
  switch_default: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_53826: ;
#line 28
  goto ldv_53831;
  case_2___0: /* CIL Label */ 
#line 28
  pao_ID_____0 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___1;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___0;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___0;
  } else {

  }
#line 28
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53837;
  case_2___1: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53837;
  case_4___0: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53837;
  case_8___0: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53837;
  switch_default___0: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_53837: ;
#line 28
  goto ldv_53831;
  case_4___1: /* CIL Label */ 
#line 28
  pao_ID_____1 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___2;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___2;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___1;
  } else {

  }
#line 28
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53847;
  case_2___2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53847;
  case_4___2: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53847;
  case_8___1: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53847;
  switch_default___1: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_53847: ;
#line 28
  goto ldv_53831;
  case_8___2: /* CIL Label */ 
#line 28
  pao_ID_____2 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___3;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___3;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___3;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___3;
  } else {

  }
#line 28
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53857;
  case_2___3: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53857;
  case_4___3: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53857;
  case_8___3: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53857;
  switch_default___2: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_53857: ;
#line 28
  goto ldv_53831;
  switch_default___3: /* CIL Label */ 
  {
#line 28
  __bad_size_call_parameter();
  }
#line 28
  goto ldv_53831;
  switch_break: /* CIL Label */ ;
  }
  ldv_53831: ;
#line 29
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_stats___3(struct inode  const  *inode , enum nfs_stat_eventcounters stat ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 34
  tmp = NFS_SERVER(inode);
#line 34
  nfs_inc_server_stats___3((struct nfs_server  const  *)tmp, stat);
  }
#line 35
  return;
}
}
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_sillyrename_rename ;
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_sillyrename_rename(struct inode  const  *old_dir ,
                                                  struct dentry  const  *old_dentry ,
                                                  struct inode  const  *new_dir ,
                                                  struct dentry  const  *new_dentry ,
                                                  int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 688
  tmp___1 = static_key_false(& __tracepoint_nfs_sillyrename_rename.key);
  }
#line 688
  if ((int )tmp___1) {
    {
#line 688
    rcu_read_lock_sched_notrace();
#line 688
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_sillyrename_rename.funcs));
#line 688
    tmp = debug_lockdep_rcu_enabled();
    }
#line 688
    if (tmp != 0 && ! __warned) {
      {
#line 688
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 688
      if (tmp___0 == 0) {
        {
#line 688
        __warned = 1;
#line 688
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 688, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 688
    it_func_ptr = _________p1;
#line 688
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55835: 
      {
#line 688
      it_func = it_func_ptr->func;
#line 688
      __data = it_func_ptr->data;
#line 688
      (*((void (*)(void * , struct inode  const  * , struct dentry  const  * , struct inode  const  * ,
                   struct dentry  const  * , int  ))it_func))(__data, old_dir, old_dentry,
                                                              new_dir, new_dentry,
                                                              error);
#line 688
      it_func_ptr = it_func_ptr + 1;
      }
#line 688
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 690
        goto ldv_55835;
      } else {

      }

    } else {

    }
    {
#line 688
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 690
  return;
}
}
#line 723
struct tracepoint __tracepoint_nfs_sillyrename_unlink ;
#line 723 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_sillyrename_unlink(struct nfs_unlinkdata  const  *data ,
                                                  int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 690
  tmp___1 = static_key_false(& __tracepoint_nfs_sillyrename_unlink.key);
  }
#line 690
  if ((int )tmp___1) {
    {
#line 690
    rcu_read_lock_sched_notrace();
#line 690
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_sillyrename_unlink.funcs));
#line 690
    tmp = debug_lockdep_rcu_enabled();
    }
#line 690
    if (tmp != 0 && ! __warned) {
      {
#line 690
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 690
      if (tmp___0 == 0) {
        {
#line 690
        __warned = 1;
#line 690
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 723, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 690
    it_func_ptr = _________p1;
#line 690
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55883: 
      {
#line 690
      it_func = it_func_ptr->func;
#line 690
      __data = it_func_ptr->data;
#line 690
      (*((void (*)(void * , struct nfs_unlinkdata  const  * , int  ))it_func))(__data,
                                                                               data,
                                                                               error);
#line 690
      it_func_ptr = it_func_ptr + 1;
      }
#line 690
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 692
        goto ldv_55883;
      } else {

      }

    } else {

    }
    {
#line 690
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 692
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_free_unlinkdata(struct nfs_unlinkdata *data ) 
{ 


  {
  {
#line 33
  iput(data->dir);
#line 34
  put_rpccred(data->cred);
#line 35
  kfree((void const   *)data->args.name.name);
#line 36
  kfree((void const   *)data);
  }
#line 37
  return;
}
}
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static int nfs_copy_dname(struct dentry *dentry , struct nfs_unlinkdata *data ) 
{ 
  char *str ;
  int len ;
  void *tmp ;

  {
  {
#line 48
  len = (int )dentry->d_name.__annonCompField25.__annonCompField24.len;
#line 50
  tmp = kmemdup((void const   *)dentry->d_name.name, (size_t )((len + 16) & -16),
                208U);
#line 50
  str = (char *)tmp;
  }
#line 51
  if ((unsigned long )str == (unsigned long )((char *)0)) {
#line 52
    return (-12);
  } else {

  }
#line 53
  data->args.name.__annonCompField25.__annonCompField24.len = (u32 )len;
#line 54
  data->args.name.name = (unsigned char const   *)str;
#line 55
  return (0);
}
}
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_free_dname(struct nfs_unlinkdata *data ) 
{ 


  {
  {
#line 60
  kfree((void const   *)data->args.name.name);
#line 61
  data->args.name.name = (unsigned char const   *)0U;
#line 62
  data->args.name.__annonCompField25.__annonCompField24.len = 0U;
  }
#line 63
  return;
}
}
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_dec_sillycount(struct inode *dir ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 67
  tmp = NFS_I((struct inode  const  *)dir);
#line 67
  nfsi = tmp;
#line 68
  tmp___0 = atomic_sub_return(1, & nfsi->silly_count);
  }
#line 68
  if (tmp___0 == 1) {
    {
#line 69
    __wake_up(& nfsi->waitqueue, 3U, 1, (void *)0);
    }
  } else {

  }
#line 70
  return;
}
}
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_async_unlink_done(struct rpc_task *task , void *calldata ) 
{ 
  struct nfs_unlinkdata *data ;
  struct inode *dir ;
  struct nfs_rpc_ops  const  *tmp ;
  int tmp___0 ;

  {
  {
#line 80
  data = (struct nfs_unlinkdata *)calldata;
#line 81
  dir = data->dir;
#line 83
  trace_nfs_sillyrename_unlink((struct nfs_unlinkdata  const  *)data, task->tk_status);
#line 84
  tmp = NFS_PROTO((struct inode  const  *)dir);
#line 84
  tmp___0 = (*(tmp->unlink_done))(task, dir);
  }
#line 84
  if (tmp___0 == 0) {
    {
#line 85
    rpc_restart_call_prepare(task);
    }
  } else {

  }
#line 86
  return;
}
}
#line 95 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_async_unlink_release(void *calldata ) 
{ 
  struct nfs_unlinkdata *data ;
  struct super_block *sb ;

  {
  {
#line 97
  data = (struct nfs_unlinkdata *)calldata;
#line 98
  sb = (data->dir)->i_sb;
#line 100
  nfs_dec_sillycount(data->dir);
#line 101
  nfs_free_unlinkdata(data);
#line 102
  nfs_sb_deactive(sb);
  }
#line 103
  return;
}
}
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_unlink_prepare(struct rpc_task *task , void *calldata ) 
{ 
  struct nfs_unlinkdata *data ;
  struct nfs_rpc_ops  const  *tmp ;

  {
  {
#line 107
  data = (struct nfs_unlinkdata *)calldata;
#line 108
  tmp = NFS_PROTO((struct inode  const  *)data->dir);
#line 108
  (*(tmp->unlink_rpc_prepare))(task, data);
  }
#line 109
  return;
}
}
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static struct rpc_call_ops  const  nfs_unlink_ops  =    {& nfs_unlink_prepare, & nfs_async_unlink_done, 0, & nfs_async_unlink_release};
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static int nfs_do_call_unlink(struct dentry *parent , struct inode *dir , struct nfs_unlinkdata *data ) 
{ 
  struct rpc_message msg ;
  struct rpc_task_setup task_setup_data ;
  struct rpc_task *task ;
  struct dentry *alias ;
  int ret ;
  void *devname_garbage ;
  struct nfs_fh *tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
  {
#line 119
  msg.rpc_proc = 0;
#line 119
  msg.rpc_argp = (void *)(& data->args);
#line 119
  msg.rpc_resp = (void *)(& data->res);
#line 119
  msg.rpc_cred = data->cred;
#line 124
  task_setup_data.task = 0;
#line 124
  task_setup_data.rpc_client = 0;
#line 124
  task_setup_data.rpc_message = (struct rpc_message  const  *)(& msg);
#line 124
  task_setup_data.callback_ops = & nfs_unlink_ops;
#line 124
  task_setup_data.callback_data = (void *)data;
#line 124
  task_setup_data.workqueue = nfsiod_workqueue;
#line 124
  task_setup_data.flags = 1U;
#line 124
  task_setup_data.priority = (signed char)0;
#line 134
  alias = d_lookup((struct dentry  const  *)parent, (struct qstr  const  *)(& data->args.name));
  }
#line 135
  if ((unsigned long )alias != (unsigned long )((struct dentry *)0)) {
    {
#line 137
    devname_garbage = (void *)0;
#line 143
    nfs_free_dname(data);
#line 144
    ret = nfs_copy_dname(alias, data);
#line 145
    ldv_spin_lock_82(& alias->d_lockref.__annonCompField23.__annonCompField22.lock);
    }
#line 146
    if ((ret == 0 && (unsigned long )alias->d_inode != (unsigned long )((struct inode *)0)) && (alias->d_flags & 4096U) == 0U) {
#line 148
      devname_garbage = alias->d_fsdata;
#line 149
      alias->d_fsdata = (void *)data;
#line 150
      alias->d_flags = alias->d_flags | 4096U;
#line 151
      ret = 1;
    } else {
#line 153
      ret = 0;
    }
    {
#line 154
    ldv_spin_unlock_83___0(& alias->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 155
    nfs_dec_sillycount(dir);
#line 156
    dput(alias);
#line 162
    kfree((void const   *)devname_garbage);
    }
#line 163
    return (ret);
  } else {

  }
  {
#line 165
  data->dir = igrab(dir);
  }
#line 166
  if ((unsigned long )data->dir == (unsigned long )((struct inode *)0)) {
    {
#line 167
    nfs_dec_sillycount(dir);
    }
#line 168
    return (0);
  } else {

  }
  {
#line 170
  nfs_sb_active(dir->i_sb);
#line 171
  tmp = NFS_FH((struct inode  const  *)dir);
#line 171
  data->args.fh = (struct nfs_fh  const  *)tmp;
#line 172
  nfs_fattr_init(data->res.dir_attr);
#line 174
  tmp___0 = NFS_PROTO((struct inode  const  *)dir);
#line 174
  (*(tmp___0->unlink_setup))(& msg, dir);
#line 176
  task_setup_data.rpc_client = NFS_CLIENT((struct inode  const  *)dir);
#line 177
  task = rpc_run_task((struct rpc_task_setup  const  *)(& task_setup_data));
#line 178
  tmp___1 = IS_ERR((void const   *)task);
  }
#line 178
  if (tmp___1) {
#line 178
    tmp___2 = 0;
  } else {
#line 178
    tmp___2 = 1;
  }
#line 178
  if (tmp___2) {
    {
#line 179
    rpc_put_task_async(task);
    }
  } else {

  }
#line 180
  return (1);
}
}
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static int nfs_call_unlink(struct dentry *dentry , struct nfs_unlinkdata *data ) 
{ 
  struct dentry *parent ;
  struct inode *dir ;
  int ret ;
  struct nfs_inode *tmp ;
  struct nfs_inode *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 187
  ret = 0;
#line 190
  parent = dget_parent(dentry);
  }
#line 191
  if ((unsigned long )parent == (unsigned long )((struct dentry *)0)) {
#line 192
    goto out_free;
  } else {

  }
  {
#line 193
  dir = parent->d_inode;
#line 195
  ldv_spin_lock_72(& dir->i_lock);
#line 196
  tmp___0 = NFS_I((struct inode  const  *)dir);
#line 196
  tmp___1 = atomic_add_unless(& tmp___0->silly_count, 1, 0);
  }
#line 196
  if (tmp___1 == 0) {
    {
#line 198
    tmp = NFS_I((struct inode  const  *)dir);
#line 198
    hlist_add_head(& data->list, & tmp->silly_list);
#line 199
    ldv_spin_unlock_73(& dir->i_lock);
#line 200
    ret = 1;
    }
#line 201
    goto out_dput;
  } else {

  }
  {
#line 203
  ldv_spin_unlock_73(& dir->i_lock);
#line 204
  ret = nfs_do_call_unlink(parent, dir, data);
  }
  out_dput: 
  {
#line 206
  dput(parent);
  }
  out_free: ;
#line 208
  return (ret);
}
}
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
void nfs_wait_on_sillyrename(struct dentry *dentry ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  long __ret ;
  long __int ;
  long tmp___1 ;
  int tmp___2 ;

  {
  {
#line 213
  tmp = NFS_I((struct inode  const  *)dentry->d_inode);
#line 213
  nfsi = tmp;
#line 215
  tmp___0 = atomic_read((atomic_t const   *)(& nfsi->silly_count));
  }
#line 215
  if (tmp___0 <= 1) {
#line 215
    goto ldv_55965;
  } else {

  }
  {
#line 215
  __ret = 0L;
#line 215
  INIT_LIST_HEAD(& __wait.task_list);
#line 215
  __wait.flags = 0U;
  }
  ldv_55971: 
  {
#line 215
  tmp___1 = prepare_to_wait_event(& nfsi->waitqueue, & __wait, 2);
#line 215
  __int = tmp___1;
#line 215
  tmp___2 = atomic_read((atomic_t const   *)(& nfsi->silly_count));
  }
#line 215
  if (tmp___2 <= 1) {
#line 215
    goto ldv_55970;
  } else {

  }
  {
#line 215
  schedule();
  }
#line 215
  goto ldv_55971;
  ldv_55970: 
  {
#line 215
  finish_wait(& nfsi->waitqueue, & __wait);
  }

  ldv_55965: ;
#line 218
  return;
}
}
#line 218 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
void nfs_block_sillyrename(struct dentry *dentry ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  long __ret ;
  long __int ;
  long tmp___1 ;
  int tmp___2 ;

  {
  {
#line 220
  tmp = NFS_I((struct inode  const  *)dentry->d_inode);
#line 220
  nfsi = tmp;
#line 222
  tmp___0 = atomic_cmpxchg(& nfsi->silly_count, 1, 0);
  }
#line 222
  if (tmp___0 == 1) {
#line 222
    goto ldv_55977;
  } else {

  }
  {
#line 222
  __ret = 0L;
#line 222
  INIT_LIST_HEAD(& __wait.task_list);
#line 222
  __wait.flags = 0U;
  }
  ldv_55983: 
  {
#line 222
  tmp___1 = prepare_to_wait_event(& nfsi->waitqueue, & __wait, 2);
#line 222
  __int = tmp___1;
#line 222
  tmp___2 = atomic_cmpxchg(& nfsi->silly_count, 1, 0);
  }
#line 222
  if (tmp___2 == 1) {
#line 222
    goto ldv_55982;
  } else {

  }
  {
#line 222
  schedule();
  }
#line 222
  goto ldv_55983;
  ldv_55982: 
  {
#line 222
  finish_wait(& nfsi->waitqueue, & __wait);
  }

  ldv_55977: ;
#line 225
  return;
}
}
#line 225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
void nfs_unblock_sillyrename(struct dentry *dentry ) 
{ 
  struct inode *dir ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct nfs_unlinkdata *data ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 227
  dir = dentry->d_inode;
#line 228
  tmp = NFS_I((struct inode  const  *)dir);
#line 228
  nfsi = tmp;
#line 231
  atomic_inc(& nfsi->silly_count);
#line 232
  ldv_spin_lock_72(& dir->i_lock);
  }
#line 233
  goto ldv_55995;
  ldv_55994: 
  {
#line 234
  tmp___0 = atomic_add_unless(& nfsi->silly_count, 1, 0);
  }
#line 234
  if (tmp___0 == 0) {
#line 235
    goto ldv_55991;
  } else {

  }
  {
#line 236
  __mptr = (struct hlist_node  const  *)nfsi->silly_list.first;
#line 236
  data = (struct nfs_unlinkdata *)__mptr;
#line 237
  hlist_del(& data->list);
#line 238
  ldv_spin_unlock_73(& dir->i_lock);
#line 239
  tmp___1 = nfs_do_call_unlink(dentry, dir, data);
  }
#line 239
  if (tmp___1 == 0) {
    {
#line 240
    nfs_free_unlinkdata(data);
    }
  } else {

  }
  {
#line 241
  ldv_spin_lock_72(& dir->i_lock);
  }
  ldv_55995: 
  {
#line 233
  tmp___2 = hlist_empty((struct hlist_head  const  *)(& nfsi->silly_list));
  }
#line 233
  if (tmp___2 == 0) {
#line 235
    goto ldv_55994;
  } else {

  }
  ldv_55991: 
  {
#line 243
  ldv_spin_unlock_73(& dir->i_lock);
  }
#line 244
  return;
}
}
#line 252 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static int nfs_async_unlink(struct inode *dir , struct dentry *dentry ) 
{ 
  struct nfs_unlinkdata *data ;
  int status ;
  void *devname_garbage ;
  void *tmp ;
  long tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 255
  status = -12;
#line 256
  devname_garbage = (void *)0;
#line 258
  tmp = kzalloc(360UL, 208U);
#line 258
  data = (struct nfs_unlinkdata *)tmp;
  }
#line 259
  if ((unsigned long )data == (unsigned long )((struct nfs_unlinkdata *)0)) {
#line 260
    goto out;
  } else {

  }
  {
#line 262
  data->cred = rpc_lookup_cred();
#line 263
  tmp___1 = IS_ERR((void const   *)data->cred);
  }
#line 263
  if ((int )tmp___1) {
    {
#line 264
    tmp___0 = PTR_ERR((void const   *)data->cred);
#line 264
    status = (int )tmp___0;
    }
#line 265
    goto out_free;
  } else {

  }
  {
#line 267
  data->res.dir_attr = & data->dir_attr;
#line 269
  status = -16;
#line 270
  ldv_spin_lock_82(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
  }
#line 271
  if ((dentry->d_flags & 4096U) != 0U) {
#line 272
    goto out_unlock;
  } else {

  }
  {
#line 273
  dentry->d_flags = dentry->d_flags | 4096U;
#line 274
  devname_garbage = dentry->d_fsdata;
#line 275
  dentry->d_fsdata = (void *)data;
#line 276
  ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 282
  kfree((void const   *)devname_garbage);
  }
#line 283
  return (0);
  out_unlock: 
  {
#line 285
  ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 286
  put_rpccred(data->cred);
  }
  out_free: 
  {
#line 288
  kfree((void const   *)data);
  }
  out: ;
#line 290
  return (status);
}
}
#line 303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
void nfs_complete_unlink(struct dentry *dentry , struct inode *inode ) 
{ 
  struct nfs_unlinkdata *data ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 305
  data = (struct nfs_unlinkdata *)0;
#line 307
  ldv_spin_lock_82(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
  }
#line 308
  if ((dentry->d_flags & 4096U) != 0U) {
#line 309
    dentry->d_flags = dentry->d_flags & 4294963199U;
#line 310
    data = (struct nfs_unlinkdata *)dentry->d_fsdata;
#line 311
    dentry->d_fsdata = (void *)0;
  } else {

  }
  {
#line 313
  ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
  }
#line 315
  if ((unsigned long )data != (unsigned long )((struct nfs_unlinkdata *)0)) {
    {
#line 315
    tmp = NFS_STALE((struct inode  const  *)inode);
    }
#line 315
    if (tmp != 0) {
      {
#line 316
      nfs_free_unlinkdata(data);
      }
    } else {
      {
#line 315
      tmp___0 = nfs_call_unlink(dentry, data);
      }
#line 315
      if (tmp___0 == 0) {
        {
#line 316
        nfs_free_unlinkdata(data);
        }
      } else {

      }
    }
  } else {

  }
#line 317
  return;
}
}
#line 321 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_cancel_async_unlink(struct dentry *dentry ) 
{ 
  struct nfs_unlinkdata *data ;

  {
  {
#line 323
  ldv_spin_lock_82(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
  }
#line 324
  if ((dentry->d_flags & 4096U) != 0U) {
    {
#line 325
    data = (struct nfs_unlinkdata *)dentry->d_fsdata;
#line 327
    dentry->d_flags = dentry->d_flags & 4294963199U;
#line 328
    dentry->d_fsdata = (void *)0;
#line 329
    ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 330
    nfs_free_unlinkdata(data);
    }
#line 331
    return;
  } else {

  }
  {
#line 333
  ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
  }
#line 334
  return;
}
}
#line 343 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_async_rename_done(struct rpc_task *task , void *calldata ) 
{ 
  struct nfs_renamedata *data ;
  struct inode *old_dir ;
  struct inode *new_dir ;
  struct dentry *old_dentry ;
  struct nfs_rpc_ops  const  *tmp ;
  int tmp___0 ;

  {
  {
#line 345
  data = (struct nfs_renamedata *)calldata;
#line 346
  old_dir = data->old_dir;
#line 347
  new_dir = data->new_dir;
#line 348
  old_dentry = data->old_dentry;
#line 350
  trace_nfs_sillyrename_rename((struct inode  const  *)old_dir, (struct dentry  const  *)old_dentry,
                               (struct inode  const  *)new_dir, (struct dentry  const  *)data->new_dentry,
                               task->tk_status);
#line 352
  tmp = NFS_PROTO((struct inode  const  *)old_dir);
#line 352
  tmp___0 = (*(tmp->rename_done))(task, old_dir, new_dir);
  }
#line 352
  if (tmp___0 == 0) {
    {
#line 353
    rpc_restart_call_prepare(task);
    }
#line 354
    return;
  } else {

  }
#line 357
  if ((unsigned long )data->complete != (unsigned long )((void (*)(struct rpc_task * ,
                                                                   struct nfs_renamedata * ))0)) {
    {
#line 358
    (*(data->complete))(task, data);
    }
  } else {

  }
#line 359
  return;
}
}
#line 365 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_async_rename_release(void *calldata ) 
{ 
  struct nfs_renamedata *data ;
  struct super_block *sb ;

  {
#line 367
  data = (struct nfs_renamedata *)calldata;
#line 368
  sb = (data->old_dir)->i_sb;
#line 370
  if ((unsigned long )(data->old_dentry)->d_inode != (unsigned long )((struct inode *)0)) {
    {
#line 371
    nfs_mark_for_revalidate___1((data->old_dentry)->d_inode);
    }
  } else {

  }
  {
#line 373
  dput(data->old_dentry);
#line 374
  dput(data->new_dentry);
#line 375
  iput(data->old_dir);
#line 376
  iput(data->new_dir);
#line 377
  nfs_sb_deactive(sb);
#line 378
  put_rpccred(data->cred);
#line 379
  kfree((void const   *)data);
  }
#line 380
  return;
}
}
#line 382 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_rename_prepare(struct rpc_task *task , void *calldata ) 
{ 
  struct nfs_renamedata *data ;
  struct nfs_rpc_ops  const  *tmp ;

  {
  {
#line 384
  data = (struct nfs_renamedata *)calldata;
#line 385
  tmp = NFS_PROTO((struct inode  const  *)data->old_dir);
#line 385
  (*(tmp->rename_rpc_prepare))(task, data);
  }
#line 386
  return;
}
}
#line 388 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static struct rpc_call_ops  const  nfs_rename_ops  =    {& nfs_rename_prepare, & nfs_async_rename_done, 0, & nfs_async_rename_release};
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
struct rpc_task *nfs_async_rename(struct inode *old_dir , struct inode *new_dir ,
                                  struct dentry *old_dentry , struct dentry *new_dentry ,
                                  void (*complete___0)(struct rpc_task * , struct nfs_renamedata * ) ) 
{ 
  struct nfs_renamedata *data ;
  struct rpc_message msg ;
  struct rpc_task_setup task_setup_data ;
  struct rpc_clnt *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  struct rpc_task *task ;
  void *tmp___2 ;
  bool tmp___3 ;
  struct nfs_fh *tmp___4 ;
  struct nfs_fh *tmp___5 ;
  struct nfs_rpc_ops  const  *tmp___6 ;
  struct rpc_task *tmp___7 ;

  {
  {
#line 409
  msg.rpc_proc = 0;
#line 409
  msg.rpc_argp = 0;
#line 409
  msg.rpc_resp = 0;
#line 409
  msg.rpc_cred = 0;
#line 410
  tmp = NFS_CLIENT((struct inode  const  *)old_dir);
#line 410
  task_setup_data.task = 0;
#line 410
  task_setup_data.rpc_client = tmp;
#line 410
  task_setup_data.rpc_message = (struct rpc_message  const  *)(& msg);
#line 410
  task_setup_data.callback_ops = & nfs_rename_ops;
#line 410
  task_setup_data.callback_data = 0;
#line 410
  task_setup_data.workqueue = nfsiod_workqueue;
#line 410
  task_setup_data.flags = 1U;
#line 410
  task_setup_data.priority = (signed char)0;
#line 418
  tmp___0 = kzalloc(632UL, 208U);
#line 418
  data = (struct nfs_renamedata *)tmp___0;
  }
#line 419
  if ((unsigned long )data == (unsigned long )((struct nfs_renamedata *)0)) {
    {
#line 420
    tmp___1 = ERR_PTR(-12L);
    }
#line 420
    return ((struct rpc_task *)tmp___1);
  } else {

  }
  {
#line 421
  task_setup_data.callback_data = (void *)data;
#line 423
  data->cred = rpc_lookup_cred();
#line 424
  tmp___3 = IS_ERR((void const   *)data->cred);
  }
#line 424
  if ((int )tmp___3) {
    {
#line 425
    tmp___2 = ERR_CAST((void const   *)data->cred);
#line 425
    task = (struct rpc_task *)tmp___2;
#line 426
    kfree((void const   *)data);
    }
#line 427
    return (task);
  } else {

  }
  {
#line 430
  msg.rpc_argp = (void *)(& data->args);
#line 431
  msg.rpc_resp = (void *)(& data->res);
#line 432
  msg.rpc_cred = data->cred;
#line 435
  data->old_dir = old_dir;
#line 436
  ihold(old_dir);
#line 437
  data->new_dir = new_dir;
#line 438
  ihold(new_dir);
#line 439
  data->old_dentry = dget(old_dentry);
#line 440
  data->new_dentry = dget(new_dentry);
#line 441
  nfs_fattr_init(& data->old_fattr);
#line 442
  nfs_fattr_init(& data->new_fattr);
#line 443
  data->complete = complete___0;
#line 446
  tmp___4 = NFS_FH((struct inode  const  *)old_dir);
#line 446
  data->args.old_dir = (struct nfs_fh  const  *)tmp___4;
#line 447
  data->args.old_name = (struct qstr  const  *)(& old_dentry->d_name);
#line 448
  tmp___5 = NFS_FH((struct inode  const  *)new_dir);
#line 448
  data->args.new_dir = (struct nfs_fh  const  *)tmp___5;
#line 449
  data->args.new_name = (struct qstr  const  *)(& new_dentry->d_name);
#line 452
  data->res.old_fattr = & data->old_fattr;
#line 453
  data->res.new_fattr = & data->new_fattr;
#line 455
  nfs_sb_active(old_dir->i_sb);
#line 457
  tmp___6 = NFS_PROTO((struct inode  const  *)data->old_dir);
#line 457
  (*(tmp___6->rename_setup))(& msg, old_dir);
#line 459
  tmp___7 = rpc_run_task((struct rpc_task_setup  const  *)(& task_setup_data));
  }
#line 459
  return (tmp___7);
}
}
#line 467 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
static void nfs_complete_sillyrename(struct rpc_task *task , struct nfs_renamedata *data ) 
{ 
  struct dentry *dentry ;

  {
#line 469
  dentry = data->old_dentry;
#line 471
  if (task->tk_status != 0) {
    {
#line 472
    nfs_cancel_async_unlink(dentry);
    }
#line 473
    return;
  } else {

  }
  {
#line 480
  fsnotify_nameremove(dentry, 0);
  }
#line 481
  return;
}
}
#line 513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/unlink.c"
int nfs_sillyrename(struct inode *dir , struct dentry *dentry ) 
{ 
  unsigned int sillycounter ;
  unsigned char silly[29U] ;
  unsigned long long fileid ;
  struct dentry *sdentry ;
  struct rpc_task *task ;
  int error ;
  unsigned int tmp ;
  long tmp___0 ;
  struct nfs_rpc_ops  const  *tmp___1 ;
  int slen ;
  long tmp___2 ;
  bool tmp___3 ;
  bool tmp___4 ;
  unsigned long tmp___5 ;

  {
  {
#line 520
  error = -16;
#line 522
  tmp___0 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 522
  if (tmp___0 != 0L) {
    {
#line 522
    tmp = d_count((struct dentry  const  *)dentry);
#line 522
    printk("\001dNFS: silly-rename(%pd2, ct=%d)\n", dentry, tmp);
    }
  } else {

  }
  {
#line 524
  nfs_inc_stats___3((struct inode  const  *)dir, 21);
  }
#line 529
  if ((dentry->d_flags & 4096U) != 0U) {
#line 530
    goto out;
  } else {

  }
  {
#line 532
  fileid = NFS_FILEID((struct inode  const  *)dentry->d_inode);
#line 535
  tmp___1 = NFS_PROTO((struct inode  const  *)dentry->d_inode);
#line 535
  (*(tmp___1->return_delegation))(dentry->d_inode);
#line 537
  sdentry = (struct dentry *)0;
  }
  ldv_56064: 
  {
#line 540
  dput(sdentry);
#line 541
  sillycounter = sillycounter + 1U;
#line 542
  slen = scnprintf((char *)(& silly), 29UL, ".nfs%0*llx%0*x", 16U, fileid, 8U, sillycounter);
#line 547
  tmp___2 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 547
  if (tmp___2 != 0L) {
    {
#line 547
    printk("\001dNFS: trying to rename %pd to %s\n", dentry, (unsigned char *)(& silly));
    }
  } else {

  }
  {
#line 550
  sdentry = lookup_one_len((char const   *)(& silly), dentry->d_parent, slen);
#line 555
  tmp___3 = IS_ERR((void const   *)sdentry);
  }
#line 555
  if ((int )tmp___3) {
#line 556
    goto out;
  } else {

  }
#line 557
  if ((unsigned long )sdentry->d_inode != (unsigned long )((struct inode *)0)) {
#line 559
    goto ldv_56064;
  } else {

  }
  {
#line 562
  error = nfs_async_unlink(dir, dentry);
  }
#line 563
  if (error != 0) {
#line 564
    goto out_dput;
  } else {

  }
  {
#line 567
  error = nfs_copy_dname(sdentry, (struct nfs_unlinkdata *)dentry->d_fsdata);
  }
#line 569
  if (error != 0) {
    {
#line 570
    nfs_cancel_async_unlink(dentry);
    }
#line 571
    goto out_dput;
  } else {

  }
  {
#line 575
  task = nfs_async_rename(dir, dir, dentry, sdentry, & nfs_complete_sillyrename);
#line 577
  tmp___4 = IS_ERR((void const   *)task);
  }
#line 577
  if ((int )tmp___4) {
    {
#line 578
    error = -16;
#line 579
    nfs_cancel_async_unlink(dentry);
    }
#line 580
    goto out_dput;
  } else {

  }
  {
#line 584
  error = rpc_wait_for_completion_task(task);
  }
#line 585
  if (error == 0) {
#line 586
    error = task->tk_status;
  } else {

  }
  {
#line 588
  if (error == 0) {
#line 588
    goto case_0;
  } else {

  }
#line 593
  if (error == -512) {
#line 593
    goto case_neg_512;
  } else {

  }
#line 587
  goto switch_break;
  case_0: /* CIL Label */ 
  {
#line 590
  tmp___5 = nfs_save_change_attribute(dir);
#line 590
  nfs_set_verifier(dentry, tmp___5);
#line 591
  d_move(dentry, sdentry);
  }
#line 592
  goto ldv_56068;
  case_neg_512: /* CIL Label */ 
  {
#line 596
  d_drop(dentry);
#line 597
  d_drop(sdentry);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_56068: 
  {
#line 599
  rpc_put_task(task);
  }
  out_dput: 
  {
#line 601
  dput(sdentry);
  }
  out: ;
#line 603
  return (error);
}
}
#line 437 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/bitops.h"
__inline static int fls(int x ) 
{ 
  int r ;

  {
#line 451
  __asm__  ("bsrl %1,%0": "=r" (r): "rm" (x), "0" (-1));
#line 464
  return (r + 1);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n ) 
{ 
  int tmp ;

  {
  {
#line 34
  tmp = fls((int )n);
  }
#line 34
  return (tmp + -1);
}
}
#line 420 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/kernel.h"
extern unsigned long int_sqrt(unsigned long  ) ;
#line 807 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_restore(unsigned long f ) 
{ 
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  {
#line 809
  __edi = __edi;
#line 809
  __esi = __esi;
#line 809
  __edx = __edx;
#line 809
  __ecx = __ecx;
#line 809
  __eax = __eax;
#line 809
  tmp = __builtin_expect((unsigned long )pv_irq_ops.restore_fl.func == (unsigned long )((void *)0),
                         0L);
  }
#line 809
  if (tmp != 0L) {
    {
#line 809
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"./arch/x86/include/asm/paravirt.h"),
                         "i" (809), "i" (12UL));
#line 809
    __builtin_unreachable();
    }
  } else {

  }
#line 809
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (45UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.restore_fl.func), [paravirt_clobber] "i" (1),
                       "D" (f): "memory", "cc");
#line 811
  return;
}
}
#line 812 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_disable(void) 
{ 
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  {
#line 814
  __edi = __edi;
#line 814
  __esi = __esi;
#line 814
  __edx = __edx;
#line 814
  __ecx = __ecx;
#line 814
  __eax = __eax;
#line 814
  tmp = __builtin_expect((unsigned long )pv_irq_ops.irq_disable.func == (unsigned long )((void *)0),
                         0L);
  }
#line 814
  if (tmp != 0L) {
    {
#line 814
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"./arch/x86/include/asm/paravirt.h"),
                         "i" (814), "i" (12UL));
#line 814
    __builtin_unreachable();
    }
  } else {

  }
#line 814
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (46UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.irq_disable.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 816
  return;
}
}
#line 822 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_irq_save(void) 
{ 
  unsigned long f ;

  {
  {
#line 826
  f = arch_local_save_flags();
#line 827
  arch_local_irq_disable();
  }
#line 828
  return (f);
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/irqflags.h"
extern void trace_hardirqs_on(void) ;
#line 21
extern void trace_hardirqs_off(void) ;
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/atomic64_64.h"
__inline static long atomic64_sub_return(long i , atomic64_t *v ) 
{ 
  long tmp ;

  {
  {
#line 158
  tmp = atomic64_add_return(- i, v);
  }
#line 158
  return (tmp);
}
}
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/asm-generic/atomic-long.h"
__inline static long atomic_long_dec_return(atomic_long_t *l ) 
{ 
  atomic64_t *v ;
  long tmp ;

  {
  {
#line 120
  v = l;
#line 122
  tmp = atomic64_sub_return(1L, v);
  }
#line 122
  return (tmp);
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_write.c.aux"
void ldv_spin_lock_cl_lock_of_nfs_client(void) ;
#line 94
void ldv_spin_unlock_cl_lock_of_nfs_client(void) ;
#line 365 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 369
__inline static void ldv_spin_lock_74(spinlock_t *lock ) ;
#line 373
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 377
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 381
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 385
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 389
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 393
__inline static void ldv_spin_lock_80___2(spinlock_t *lock ) ;
#line 397
__inline static void ldv_spin_lock_80___2(spinlock_t *lock ) ;
#line 401
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 405
__inline static void ldv_spin_lock_72(spinlock_t *lock ) ;
#line 409
__inline static void ldv_spin_lock_76___3(spinlock_t *lock ) ;
#line 409
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 413
__inline static void ldv_spin_unlock_75(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 429
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 433
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 437
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 441
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 445
__inline static void ldv_spin_unlock_81___2(spinlock_t *lock ) ;
#line 449
__inline static void ldv_spin_unlock_81___2(spinlock_t *lock ) ;
#line 453
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 457
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 461
__inline static void ldv_spin_unlock_73(spinlock_t *lock ) ;
#line 465
__inline static void ldv_spin_unlock_77___2(spinlock_t *lock ) ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/percpu_counter.h"
extern void __percpu_counter_add(struct percpu_counter * , s64  , s32  ) ;
#line 1690 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
extern void __mark_inode_dirty(struct inode * , int  ) ;
#line 1747
extern int sync_inode(struct inode * , struct writeback_control * ) ;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
extern unsigned long totalram_pages ;
#line 221 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static void SetPagePrivate(struct page *page ) 
{ 


  {
  {
#line 221
  set_bit(11L, (unsigned long volatile   *)(& page->flags));
  }
#line 222
  return;
}
}
#line 221 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static void ClearPagePrivate(struct page *page ) 
{ 


  {
  {
#line 221
  clear_bit(11L, (unsigned long volatile   *)(& page->flags));
  }
#line 222
  return;
}
}
#line 319
extern void cancel_dirty_page(struct page * , unsigned int  ) ;
#line 322
extern int __test_set_page_writeback(struct page * , bool  ) ;
#line 206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/vmstat.h"
extern void inc_zone_page_state(struct page * , enum zone_stat_item  ) ;
#line 207
extern void dec_zone_page_state(struct page * , enum zone_stat_item  ) ;
#line 1213 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mm.h"
extern int redirty_page_for_writepage(struct writeback_control * , struct page * ) ;
#line 1219
extern int clear_page_dirty_for_io(struct page * ) ;
#line 421 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
__inline static loff_t page_file_offset(struct page *page ) 
{ 
  unsigned long tmp ;

  {
  {
#line 423
  tmp = page_file_index(page);
  }
#line 423
  return ((long long )tmp << 12);
}
}
#line 532
extern void end_page_writeback(struct page * ) ;
#line 2727 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
extern int __cond_resched_lock(spinlock_t * ) ;
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/writeback.h"
extern int write_cache_pages(struct address_space * , struct writeback_control * ,
                             int (*)(struct page * , struct writeback_control * ,
                                     void * ) , void * ) ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/migrate.h"
extern int migrate_page(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/auth.h"
extern int rpcauth_key_timeout_notify(struct rpc_auth * , struct rpc_cred * ) ;
#line 184
extern bool rpcauth_cred_key_to_expire(struct rpc_cred * ) ;
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
__inline static void __add_bdi_stat(struct backing_dev_info *bdi , enum bdi_stat_item item ,
                                    s64 amount ) 
{ 
  int tmp___66 ;

  {
  {
#line 144
  tmp___66 = __ilog2_u32((u32 )nr_cpu_ids);
#line 144
  __percpu_counter_add((struct percpu_counter *)(& bdi->bdi_stat) + (unsigned long )item,
                       amount, (tmp___66 + 1) * 8);
  }
#line 145
  return;
}
}
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
__inline static void __inc_bdi_stat(struct backing_dev_info *bdi , enum bdi_stat_item item ) 
{ 


  {
  {
#line 150
  __add_bdi_stat(bdi, item, 1LL);
  }
#line 151
  return;
}
}
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
__inline static void inc_bdi_stat(struct backing_dev_info *bdi , enum bdi_stat_item item ) 
{ 
  unsigned long flags ;
  int tmp ;

  {
  {
#line 158
  flags = arch_local_irq_save();
#line 158
  trace_hardirqs_off();
#line 159
  __inc_bdi_stat(bdi, item);
#line 160
  tmp = arch_irqs_disabled_flags(flags);
  }
#line 160
  if (tmp != 0) {
    {
#line 160
    arch_local_irq_restore(flags);
#line 160
    trace_hardirqs_off();
    }
  } else {
    {
#line 160
    trace_hardirqs_on();
#line 160
    arch_local_irq_restore(flags);
    }
  }
#line 162
  return;
}
}
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
__inline static void __dec_bdi_stat(struct backing_dev_info *bdi , enum bdi_stat_item item ) 
{ 


  {
  {
#line 166
  __add_bdi_stat(bdi, item, -1LL);
  }
#line 167
  return;
}
}
#line 169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/backing-dev.h"
__inline static void dec_bdi_stat(struct backing_dev_info *bdi , enum bdi_stat_item item ) 
{ 
  unsigned long flags ;
  int tmp ;

  {
  {
#line 174
  flags = arch_local_irq_save();
#line 174
  trace_hardirqs_off();
#line 175
  __dec_bdi_stat(bdi, item);
#line 176
  tmp = arch_irqs_disabled_flags(flags);
  }
#line 176
  if (tmp != 0) {
    {
#line 176
    arch_local_irq_restore(flags);
#line 176
    trace_hardirqs_off();
    }
  } else {
    {
#line 176
    trace_hardirqs_on();
#line 176
    arch_local_irq_restore(flags);
    }
  }
#line 178
  return;
}
}
#line 307
extern void clear_bdi_congested(struct backing_dev_info * , int  ) ;
#line 308
extern void set_bdi_congested(struct backing_dev_info * , int  ) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 33
extern void mempool_destroy(mempool_t * ) ;
#line 34
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 35
extern void mempool_free(void * , mempool_t * ) ;
#line 41
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 42
extern void mempool_free_slab(void * , void * ) ;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mempool.h"
__inline static mempool_t *mempool_create_slab_pool(int min_nr , struct kmem_cache *kc ) 
{ 
  mempool_t *tmp ;

  {
  {
#line 46
  tmp = mempool_create(min_nr, & mempool_alloc_slab, & mempool_free_slab, (void *)kc);
  }
#line 46
  return (tmp);
}
}
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static void nfs_mark_for_revalidate___2(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;

  {
  {
#line 291
  tmp = NFS_I((struct inode  const  *)inode);
#line 291
  nfsi = tmp;
#line 293
  ldv_spin_lock_72(& inode->i_lock);
#line 294
  nfsi->cache_validity = nfsi->cache_validity | 9UL;
  }
#line 295
  if (((int )inode->i_mode & 61440) == 16384) {
#line 296
    nfsi->cache_validity = nfsi->cache_validity | 34UL;
  } else {

  }
  {
#line 297
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 298
  return;
}
}
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
int nfs_congestion_kb  ;
#line 532
struct nfs_commit_data *nfs_commitdata_alloc(void) ;
#line 533
void nfs_commit_free(struct nfs_commit_data *p ) ;
#line 295 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
__inline static bool _nfs4_state_protect(struct nfs_client *clp , unsigned long sp4_mode ,
                                         struct rpc_clnt **clntp , struct rpc_message *msg ) 
{ 
  struct rpc_cred *newcred ;
  rpc_authflavor_t flavor ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___3 ;

  {
  {
#line 298
  newcred = (struct rpc_cred *)0;
#line 301
  tmp___3 = variable_test_bit((long )sp4_mode, (unsigned long const volatile   *)(& clp->cl_sp4_flags));
  }
#line 301
  if (tmp___3 != 0) {
    {
#line 302
    ldv_spin_lock_74(& clp->cl_lock);
    }
#line 303
    if ((unsigned long )clp->cl_machine_cred != (unsigned long )((struct rpc_cred *)0)) {
#line 306
      newcred = clp->cl_machine_cred;
    } else {

    }
    {
#line 307
    ldv_spin_unlock_75(& clp->cl_lock);
#line 308
    msg->rpc_cred = newcred;
#line 310
    flavor = ((clp->cl_rpcclient)->cl_auth)->au_flavor;
#line 311
    __ret_warn_once = flavor - 390004U > 1U;
#line 311
    tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 311
    if (tmp___1 != 0L) {
      {
#line 311
      __ret_warn_on = ! __warned;
#line 311
      tmp = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 311
      if (tmp != 0L) {
        {
#line 311
        warn_slowpath_null("fs/nfs/nfs4_fs.h", 312);
        }
      } else {

      }
      {
#line 311
      tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 311
      if (tmp___0 != 0L) {
#line 311
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 311
    __builtin_expect(__ret_warn_once != 0, 0L);
#line 313
    *clntp = clp->cl_rpcclient;
    }
#line 315
    return (1);
  } else {

  }
#line 317
  return (0);
}
}
#line 327 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
__inline static void nfs4_state_protect(struct nfs_client *clp , unsigned long sp4_mode ,
                                        struct rpc_clnt **clntp , struct rpc_message *msg ) 
{ 


  {
  {
#line 330
  _nfs4_state_protect(clp, sp4_mode, clntp, msg);
  }
#line 331
  return;
}
}
#line 339 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfs4_fs.h"
__inline static void nfs4_state_protect_write(struct nfs_client *clp , struct rpc_clnt **clntp ,
                                              struct rpc_message *msg , struct nfs_pgio_header *hdr ) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
  {
#line 342
  tmp = _nfs4_state_protect(clp, 5UL, clntp, msg);
  }
#line 342
  if ((int )tmp) {
    {
#line 342
    tmp___0 = constant_test_bit(6L, (unsigned long const volatile   *)(& clp->cl_sp4_flags));
    }
#line 342
    if (tmp___0 == 0) {
#line 344
      hdr->args.stable = 2;
    } else {

    }
  } else {

  }
#line 345
  return;
}
}
#line 425 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
void nfs_pageio_reset_write_mds(struct nfs_pageio_descriptor *pgio ) ;
#line 428
void nfs_commit_prepare(struct rpc_task *task , void *calldata ) ;
#line 429
int nfs_initiate_commit(struct rpc_clnt *clnt , struct nfs_commit_data *data , struct rpc_call_ops  const  *call_ops ,
                        int how , int flags ) ;
#line 433
void nfs_init_commit(struct nfs_commit_data *data , struct list_head *head , struct pnfs_layout_segment *lseg ,
                     struct nfs_commit_info *cinfo ) ;
#line 447
void nfs_retry_commit(struct list_head *page_list , struct pnfs_layout_segment *lseg ,
                      struct nfs_commit_info *cinfo ) ;
#line 450
void nfs_commitdata_release(struct nfs_commit_data *data ) ;
#line 451
void nfs_request_add_commit_list(struct nfs_page *req , struct list_head *dst , struct nfs_commit_info *cinfo ) ;
#line 453
void nfs_request_remove_commit_list(struct nfs_page *req , struct nfs_commit_info *cinfo ) ;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_server_stats___4(struct nfs_server  const  *server ,
                                              enum nfs_stat_eventcounters stat ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 28
  __vpp_verify = (void const   *)0;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___0;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___1;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___2;
  } else {

  }
#line 28
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 28
  pao_ID__ = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___0;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8;
  } else {

  }
#line 28
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53757;
  case_2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53757;
  case_4: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53757;
  case_8: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53757;
  switch_default: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_53757: ;
#line 28
  goto ldv_53762;
  case_2___0: /* CIL Label */ 
#line 28
  pao_ID_____0 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___1;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___1;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___0;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___0;
  } else {

  }
#line 28
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53768;
  case_2___1: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53768;
  case_4___0: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53768;
  case_8___0: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53768;
  switch_default___0: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_53768: ;
#line 28
  goto ldv_53762;
  case_4___1: /* CIL Label */ 
#line 28
  pao_ID_____1 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___2;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___2;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___2;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___1;
  } else {

  }
#line 28
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53778;
  case_2___2: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53778;
  case_4___2: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53778;
  case_8___1: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53778;
  switch_default___1: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_53778: ;
#line 28
  goto ldv_53762;
  case_8___2: /* CIL Label */ 
#line 28
  pao_ID_____2 = 1;
  {
#line 28
  if (8UL == 1UL) {
#line 28
    goto case_1___3;
  } else {

  }
#line 28
  if (8UL == 2UL) {
#line 28
    goto case_2___3;
  } else {

  }
#line 28
  if (8UL == 4UL) {
#line 28
    goto case_4___3;
  } else {

  }
#line 28
  if (8UL == 8UL) {
#line 28
    goto case_8___3;
  } else {

  }
#line 28
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 28
  __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53788;
  case_2___3: /* CIL Label */ 
#line 28
  __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53788;
  case_4___3: /* CIL Label */ 
#line 28
  __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53788;
  case_8___3: /* CIL Label */ 
#line 28
  __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->events[(unsigned int )stat]));
#line 28
  goto ldv_53788;
  switch_default___2: /* CIL Label */ 
  {
#line 28
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_53788: ;
#line 28
  goto ldv_53762;
  switch_default___3: /* CIL Label */ 
  {
#line 28
  __bad_size_call_parameter();
  }
#line 28
  goto ldv_53762;
  switch_break: /* CIL Label */ ;
  }
  ldv_53762: ;
#line 29
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_inc_stats___4(struct inode  const  *inode , enum nfs_stat_eventcounters stat ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 34
  tmp = NFS_SERVER(inode);
#line 34
  nfs_inc_server_stats___4((struct nfs_server  const  *)tmp, stat);
  }
#line 35
  return;
}
}
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_server_stats___2(struct nfs_server  const  *server ,
                                              enum nfs_stat_bytecounters stat , long addend ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 41
  __vpp_verify = (void const   *)0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___0;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___1;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___2;
  } else {

  }
#line 41
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 41
  pao_ID__ = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___0;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8;
  } else {

  }
#line 41
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53809;
  case_2: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53809;
  case_4: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53809;
  case_8: /* CIL Label */ ;
#line 41
  if (pao_ID__ == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID__ == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53809;
  switch_default: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_53809: ;
#line 41
  goto ldv_53814;
  case_2___0: /* CIL Label */ 
#line 41
  pao_ID_____0 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___1;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___1;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___0;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___0;
  } else {

  }
#line 41
  goto switch_default___0;
  case_1___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53820;
  case_2___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53820;
  case_4___0: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53820;
  case_8___0: /* CIL Label */ ;
#line 41
  if (pao_ID_____0 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____0 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53820;
  switch_default___0: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_53820: ;
#line 41
  goto ldv_53814;
  case_4___1: /* CIL Label */ 
#line 41
  pao_ID_____1 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___2;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___2;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___2;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___1;
  } else {

  }
#line 41
  goto switch_default___1;
  case_1___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53830;
  case_2___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53830;
  case_4___2: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53830;
  case_8___1: /* CIL Label */ ;
#line 41
  if (pao_ID_____1 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____1 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53830;
  switch_default___1: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_53830: ;
#line 41
  goto ldv_53814;
  case_8___2: /* CIL Label */ 
#line 41
  pao_ID_____2 = 0;
  {
#line 41
  if (8UL == 1UL) {
#line 41
    goto case_1___3;
  } else {

  }
#line 41
  if (8UL == 2UL) {
#line 41
    goto case_2___3;
  } else {

  }
#line 41
  if (8UL == 4UL) {
#line 41
    goto case_4___3;
  } else {

  }
#line 41
  if (8UL == 8UL) {
#line 41
    goto case_8___3;
  } else {

  }
#line 41
  goto switch_default___2;
  case_1___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decb %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addb %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "qi" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53840;
  case_2___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decw %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addw %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53840;
  case_4___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decl %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addl %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "ri" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53840;
  case_8___3: /* CIL Label */ ;
#line 41
  if (pao_ID_____2 == 1) {
#line 41
    __asm__  ("incq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else
#line 41
  if (pao_ID_____2 == -1) {
#line 41
    __asm__  ("decq %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]));
  } else {
#line 41
    __asm__  ("addq %1, %%gs:%P0": "+m" ((server->io_stats)->bytes[(unsigned int )stat]): "re" ((unsigned long long )addend));
  }
#line 41
  goto ldv_53840;
  switch_default___2: /* CIL Label */ 
  {
#line 41
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_53840: ;
#line 41
  goto ldv_53814;
  switch_default___3: /* CIL Label */ 
  {
#line 41
  __bad_size_call_parameter();
  }
#line 41
  goto ldv_53814;
  switch_break: /* CIL Label */ ;
  }
  ldv_53814: ;
#line 42
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_stats___2(struct inode  const  *inode , enum nfs_stat_bytecounters stat ,
                                       long addend ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 48
  tmp = NFS_SERVER(inode);
#line 48
  nfs_add_server_stats___2((struct nfs_server  const  *)tmp, stat, addend);
  }
#line 49
  return;
}
}
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
__inline static int pnfs_commit_list(struct inode *inode , struct list_head *mds_pages ,
                                     int how , struct nfs_commit_info *cinfo ) 
{ 
  struct nfs_server *tmp ;
  int tmp___0 ;

  {
#line 292
  if ((unsigned long )cinfo->ds == (unsigned long )((struct pnfs_ds_commit_info *)0) || (cinfo->ds)->ncommitting == 0) {
#line 293
    return (1);
  } else {

  }
  {
#line 294
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 294
  tmp___0 = (*((tmp->pnfs_curr_ld)->commit_pagelist))(inode, mds_pages, how, cinfo);
  }
#line 294
  return (tmp___0);
}
}
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
__inline static struct pnfs_ds_commit_info *pnfs_get_ds_info(struct inode *inode ) 
{ 
  struct pnfs_layoutdriver_type *ld ;
  struct nfs_server *tmp ;
  struct pnfs_ds_commit_info *tmp___0 ;

  {
  {
#line 300
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 300
  ld = tmp->pnfs_curr_ld;
  }
#line 302
  if ((unsigned long )ld == (unsigned long )((struct pnfs_layoutdriver_type *)0) || (unsigned long )ld->get_ds_info == (unsigned long )((struct pnfs_ds_commit_info *(*)(struct inode * ))0)) {
#line 303
    return ((struct pnfs_ds_commit_info *)0);
  } else {

  }
  {
#line 304
  tmp___0 = (*(ld->get_ds_info))(inode);
  }
#line 304
  return (tmp___0);
}
}
#line 308 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
__inline static bool pnfs_mark_request_commit(struct nfs_page *req , struct pnfs_layout_segment *lseg ,
                                              struct nfs_commit_info *cinfo ) 
{ 
  struct inode *inode ;
  struct pnfs_layoutdriver_type *ld ;
  struct nfs_server *tmp ;

  {
  {
#line 311
  inode = ((req->wb_context)->dentry)->d_inode;
#line 312
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 312
  ld = tmp->pnfs_curr_ld;
  }
#line 314
  if ((unsigned long )lseg == (unsigned long )((struct pnfs_layout_segment *)0) || (unsigned long )ld->mark_request_commit == (unsigned long )((void (*)(struct nfs_page * ,
                                                                                                                                                         struct pnfs_layout_segment * ,
                                                                                                                                                         struct nfs_commit_info * ))0)) {
#line 315
    return (0);
  } else {

  }
  {
#line 316
  (*(ld->mark_request_commit))(req, lseg, cinfo);
  }
#line 317
  return (1);
}
}
#line 321 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
__inline static bool pnfs_clear_request_commit(struct nfs_page *req , struct nfs_commit_info *cinfo ) 
{ 
  struct inode *inode ;
  struct pnfs_layoutdriver_type *ld ;
  struct nfs_server *tmp ;

  {
  {
#line 323
  inode = ((req->wb_context)->dentry)->d_inode;
#line 324
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 324
  ld = tmp->pnfs_curr_ld;
  }
#line 326
  if ((unsigned long )ld == (unsigned long )((struct pnfs_layoutdriver_type *)0) || (unsigned long )ld->clear_request_commit == (unsigned long )((void (*)(struct nfs_page * ,
                                                                                                                                                           struct nfs_commit_info * ))0)) {
#line 327
    return (0);
  } else {

  }
  {
#line 328
  (*(ld->clear_request_commit))(req, cinfo);
  }
#line 329
  return (1);
}
}
#line 333 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/pnfs.h"
__inline static int pnfs_scan_commit_lists(struct inode *inode , struct nfs_commit_info *cinfo ,
                                           int max ) 
{ 
  struct nfs_server *tmp ;
  int tmp___0 ;

  {
#line 336
  if ((unsigned long )cinfo->ds == (unsigned long )((struct pnfs_ds_commit_info *)0) || (cinfo->ds)->nwritten == 0) {
#line 337
    return (0);
  } else {
    {
#line 339
    tmp = NFS_SERVER((struct inode  const  *)inode);
#line 339
    tmp___0 = (*((tmp->pnfs_curr_ld)->scan_commit_lists))(cinfo, max);
    }
#line 339
    return (tmp___0);
  }
}
}
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_writeback_page_enter ;
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_writeback_page_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 152
  tmp___1 = static_key_false(& __tracepoint_nfs_writeback_page_enter.key);
  }
#line 152
  if ((int )tmp___1) {
    {
#line 152
    rcu_read_lock_sched_notrace();
#line 152
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_writeback_page_enter.funcs));
#line 152
    tmp = debug_lockdep_rcu_enabled();
    }
#line 152
    if (tmp != 0 && ! __warned) {
      {
#line 152
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 152
      if (tmp___0 == 0) {
        {
#line 152
        __warned = 1;
#line 152
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 152, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 152
    it_func_ptr = _________p1;
#line 152
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55055: 
      {
#line 152
      it_func = it_func_ptr->func;
#line 152
      __data = it_func_ptr->data;
#line 152
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 152
      it_func_ptr = it_func_ptr + 1;
      }
#line 152
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 154
        goto ldv_55055;
      } else {

      }

    } else {

    }
    {
#line 152
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 154
  return;
}
}
#line 153
struct tracepoint __tracepoint_nfs_writeback_page_exit ;
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_writeback_page_exit(struct inode  const  *inode , int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 153
  tmp___1 = static_key_false(& __tracepoint_nfs_writeback_page_exit.key);
  }
#line 153
  if ((int )tmp___1) {
    {
#line 153
    rcu_read_lock_sched_notrace();
#line 153
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_writeback_page_exit.funcs));
#line 153
    tmp = debug_lockdep_rcu_enabled();
    }
#line 153
    if (tmp != 0 && ! __warned) {
      {
#line 153
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 153
      if (tmp___0 == 0) {
        {
#line 153
        __warned = 1;
#line 153
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 153, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 153
    it_func_ptr = _________p1;
#line 153
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55091: 
      {
#line 153
      it_func = it_func_ptr->func;
#line 153
      __data = it_func_ptr->data;
#line 153
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 153
      it_func_ptr = it_func_ptr + 1;
      }
#line 153
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 155
        goto ldv_55091;
      } else {

      }

    } else {

    }
    {
#line 153
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 155
  return;
}
}
#line 154
struct tracepoint __tracepoint_nfs_writeback_inode_enter ;
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_writeback_inode_enter(struct inode  const  *inode ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 154
  tmp___1 = static_key_false(& __tracepoint_nfs_writeback_inode_enter.key);
  }
#line 154
  if ((int )tmp___1) {
    {
#line 154
    rcu_read_lock_sched_notrace();
#line 154
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_writeback_inode_enter.funcs));
#line 154
    tmp = debug_lockdep_rcu_enabled();
    }
#line 154
    if (tmp != 0 && ! __warned) {
      {
#line 154
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 154
      if (tmp___0 == 0) {
        {
#line 154
        __warned = 1;
#line 154
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 154, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 154
    it_func_ptr = _________p1;
#line 154
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55128: 
      {
#line 154
      it_func = it_func_ptr->func;
#line 154
      __data = it_func_ptr->data;
#line 154
      (*((void (*)(void * , struct inode  const  * ))it_func))(__data, inode);
#line 154
      it_func_ptr = it_func_ptr + 1;
      }
#line 154
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 156
        goto ldv_55128;
      } else {

      }

    } else {

    }
    {
#line 154
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 156
  return;
}
}
#line 155
struct tracepoint __tracepoint_nfs_writeback_inode_exit ;
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
__inline static void trace_nfs_writeback_inode_exit(struct inode  const  *inode ,
                                                    int error ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 155
  tmp___1 = static_key_false(& __tracepoint_nfs_writeback_inode_exit.key);
  }
#line 155
  if ((int )tmp___1) {
    {
#line 155
    rcu_read_lock_sched_notrace();
#line 155
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_nfs_writeback_inode_exit.funcs));
#line 155
    tmp = debug_lockdep_rcu_enabled();
    }
#line 155
    if (tmp != 0 && ! __warned) {
      {
#line 155
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 155
      if (tmp___0 == 0) {
        {
#line 155
        __warned = 1;
#line 155
        lockdep_rcu_suspicious("fs/nfs/nfstrace.h", 155, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 155
    it_func_ptr = _________p1;
#line 155
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_55164: 
      {
#line 155
      it_func = it_func_ptr->func;
#line 155
      __data = it_func_ptr->data;
#line 155
      (*((void (*)(void * , struct inode  const  * , int  ))it_func))(__data, inode,
                                                                      error);
#line 155
      it_func_ptr = it_func_ptr + 1;
      }
#line 155
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 157
        goto ldv_55164;
      } else {

      }

    } else {

    }
    {
#line 155
    rcu_read_unlock_sched_notrace();
    }
  } else {

  }
#line 157
  return;
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_redirty_request(struct nfs_page *req ) ;
#line 45
static struct rpc_call_ops  const  nfs_commit_ops ;
#line 46
static struct nfs_pgio_completion_ops  const  nfs_async_write_completion_ops ;
#line 47
static struct nfs_commit_completion_ops  const  nfs_commit_completion_ops ;
#line 48
static struct nfs_rw_ops  const  nfs_rw_write_ops ;
#line 49
static void nfs_clear_request_commit(struct nfs_page *req ) ;
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct kmem_cache *nfs_wdata_cachep  ;
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static mempool_t *nfs_wdata_mempool  ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct kmem_cache *nfs_cdata_cachep  ;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static mempool_t *nfs_commit_mempool  ;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct nfs_commit_data *nfs_commitdata_alloc(void) 
{ 
  struct nfs_commit_data *p ;
  void *tmp ;

  {
  {
#line 58
  tmp = mempool_alloc(nfs_commit_mempool, 16U);
#line 58
  p = (struct nfs_commit_data *)tmp;
  }
#line 60
  if ((unsigned long )p != (unsigned long )((struct nfs_commit_data *)0)) {
    {
#line 61
    memset((void *)p, 0, 688UL);
#line 62
    INIT_LIST_HEAD(& p->pages);
    }
  } else {

  }
#line 64
  return (p);
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_commitdata_alloc[21U]  = 
#line 66
  {      'n',      'f',      's',      '_', 
        'c',      'o',      'm',      'm', 
        'i',      't',      'd',      'a', 
        't',      'a',      '_',      'a', 
        'l',      'l',      'o',      'c', 
        '\000'};
#line 66
struct kernel_symbol  const  __ksymtab_nfs_commitdata_alloc ;
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_commitdata_alloc  =    {(unsigned long )(& nfs_commitdata_alloc), (char const   *)(& __kstrtab_nfs_commitdata_alloc)};
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_commit_free(struct nfs_commit_data *p ) 
{ 


  {
  {
#line 70
  mempool_free((void *)p, nfs_commit_mempool);
  }
#line 71
  return;
}
}
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_commit_free[16U]  = 
#line 72
  {      'n',      'f',      's',      '_', 
        'c',      'o',      'm',      'm', 
        'i',      't',      '_',      'f', 
        'r',      'e',      'e',      '\000'};
#line 72
struct kernel_symbol  const  __ksymtab_nfs_commit_free ;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_commit_free  =    {(unsigned long )(& nfs_commit_free), (char const   *)(& __kstrtab_nfs_commit_free)};
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_pgio_header *nfs_writehdr_alloc(void) 
{ 
  struct nfs_pgio_header *p ;
  void *tmp ;

  {
  {
#line 76
  tmp = mempool_alloc(nfs_wdata_mempool, 16U);
#line 76
  p = (struct nfs_pgio_header *)tmp;
  }
#line 78
  if ((unsigned long )p != (unsigned long )((struct nfs_pgio_header *)0)) {
    {
#line 79
    memset((void *)p, 0, 968UL);
    }
  } else {

  }
#line 80
  return (p);
}
}
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_writehdr_free(struct nfs_pgio_header *hdr ) 
{ 


  {
  {
#line 85
  mempool_free((void *)hdr, nfs_wdata_mempool);
  }
#line 86
  return;
}
}
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_context_set_write_error(struct nfs_open_context *ctx , int error ) 
{ 


  {
  {
#line 90
  ctx->error = error;
#line 91
  __asm__  volatile   ("": : : "memory");
#line 92
  set_bit(0L, (unsigned long volatile   *)(& ctx->flags));
  }
#line 93
  return;
}
}
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_page *nfs_page_find_head_request_locked(struct nfs_inode *nfsi ,
                                                          struct page *page ) 
{ 
  struct nfs_page *req ;
  struct nfs_page *freq ;
  struct nfs_page *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;

  {
  {
#line 105
  req = (struct nfs_page *)0;
#line 107
  tmp___1 = PagePrivate((struct page  const  *)page);
  }
#line 107
  if (tmp___1 != 0) {
#line 108
    req = (struct nfs_page *)page->__annonCompField56.private;
  } else {
    {
#line 109
    tmp = PageSwapCache((struct page  const  *)page);
#line 109
    tmp___0 = __builtin_expect(tmp != 0, 0L);
    }
#line 109
    if (tmp___0 != 0L) {
#line 113
      __mptr = (struct list_head  const  *)nfsi->commit_info.list.next;
#line 113
      freq = (struct nfs_page *)__mptr;
#line 113
      __mptr___0 = (struct list_head  const  *)freq->wb_list.next;
#line 113
      t = (struct nfs_page *)__mptr___0;
#line 113
      goto ldv_56552;
      ldv_56551: ;
#line 114
      if ((unsigned long )freq->wb_page == (unsigned long )page) {
#line 115
        req = freq->wb_head;
#line 116
        goto ldv_56550;
      } else {

      }
#line 113
      freq = t;
#line 113
      __mptr___1 = (struct list_head  const  *)t->wb_list.next;
#line 113
      t = (struct nfs_page *)__mptr___1;
      ldv_56552: ;
#line 113
      if ((unsigned long )(& freq->wb_list) != (unsigned long )(& nfsi->commit_info.list)) {
#line 115
        goto ldv_56551;
      } else {

      }
      ldv_56550: ;
    } else {

    }
  }
#line 121
  if ((unsigned long )req != (unsigned long )((struct nfs_page *)0)) {
    {
#line 122
    __ret_warn_once = (unsigned long )req->wb_head != (unsigned long )req;
#line 122
    tmp___4 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 122
    if (tmp___4 != 0L) {
      {
#line 122
      __ret_warn_on = ! __warned;
#line 122
      tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 122
      if (tmp___2 != 0L) {
        {
#line 122
        warn_slowpath_null("fs/nfs/write.c", 122);
        }
      } else {

      }
      {
#line 122
      tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 122
      if (tmp___3 != 0L) {
#line 122
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 122
    __builtin_expect(__ret_warn_once != 0, 0L);
#line 124
    kref_get(& req->wb_kref);
    }
  } else {

  }
#line 127
  return (req);
}
}
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_page *nfs_page_find_head_request(struct page *page ) 
{ 
  struct inode *inode ;
  struct address_space *tmp ;
  struct nfs_page *req ;
  struct nfs_inode *tmp___0 ;

  {
  {
#line 137
  tmp = page_file_mapping(page);
#line 137
  inode = tmp->host;
#line 138
  req = (struct nfs_page *)0;
#line 140
  ldv_spin_lock_72(& inode->i_lock);
#line 141
  tmp___0 = NFS_I((struct inode  const  *)inode);
#line 141
  req = nfs_page_find_head_request_locked(tmp___0, page);
#line 142
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 143
  return (req);
}
}
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_grow_file(struct page *page , unsigned int offset , unsigned int count ) 
{ 
  struct inode *inode ;
  struct address_space *tmp ;
  loff_t end ;
  loff_t i_size ;
  unsigned long end_index ;
  unsigned long tmp___0 ;
  loff_t tmp___1 ;

  {
  {
#line 149
  tmp = page_file_mapping(page);
#line 149
  inode = tmp->host;
#line 153
  ldv_spin_lock_72(& inode->i_lock);
#line 154
  i_size = i_size_read((struct inode  const  *)inode);
#line 155
  end_index = (unsigned long )((i_size + -1LL) >> 12);
  }
#line 156
  if (i_size > 0LL) {
    {
#line 156
    tmp___0 = page_file_index(page);
    }
#line 156
    if (tmp___0 < end_index) {
#line 157
      goto out;
    } else {

    }
  } else {

  }
  {
#line 158
  tmp___1 = page_file_offset(page);
#line 158
  end = tmp___1 + ((long long )offset + (long long )count);
  }
#line 159
  if (i_size >= end) {
#line 160
    goto out;
  } else {

  }
  {
#line 161
  i_size_write(inode, end);
#line 162
  nfs_inc_stats___4((struct inode  const  *)inode, 20);
  }
  out: 
  {
#line 164
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 165
  return;
}
}
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_set_pageerror(struct page *page ) 
{ 
  struct address_space *tmp ;
  struct address_space *tmp___0 ;

  {
  {
#line 170
  tmp = page_file_mapping(page);
#line 170
  tmp___0 = page_file_mapping(page);
#line 170
  nfs_zap_mapping(tmp___0->host, tmp);
  }
#line 171
  return;
}
}
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_page *nfs_page_group_search_locked(struct nfs_page *head , unsigned int page_offset___0 ) 
{ 
  struct nfs_page *req ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int tmp___2 ;
  int __ret_warn_on___0 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;

  {
  {
#line 191
  __ret_warn_once = (unsigned long )head != (unsigned long )head->wb_head;
#line 191
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 191
  if (tmp___1 != 0L) {
    {
#line 191
    __ret_warn_on = ! __warned;
#line 191
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 191
    if (tmp != 0L) {
      {
#line 191
      warn_slowpath_null("fs/nfs/write.c", 191);
      }
    } else {

    }
    {
#line 191
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 191
    if (tmp___0 != 0L) {
#line 191
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 191
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 192
  tmp___2 = constant_test_bit(5L, (unsigned long const volatile   *)(& (head->wb_head)->wb_flags));
#line 192
  __ret_warn_once___0 = tmp___2 == 0;
#line 192
  tmp___5 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 192
  if (tmp___5 != 0L) {
    {
#line 192
    __ret_warn_on___0 = ! __warned___0;
#line 192
    tmp___3 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 192
    if (tmp___3 != 0L) {
      {
#line 192
      warn_slowpath_null("fs/nfs/write.c", 192);
      }
    } else {

    }
    {
#line 192
    tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 192
    if (tmp___4 != 0L) {
#line 192
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 192
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
#line 194
  req = head;
  }
  ldv_56591: ;
#line 196
  if (page_offset___0 >= req->wb_pgbase && page_offset___0 < req->wb_pgbase + req->wb_bytes) {
#line 198
    return (req);
  } else {

  }
#line 200
  req = req->wb_this_page;
#line 201
  if ((unsigned long )req != (unsigned long )head) {
#line 203
    goto ldv_56591;
  } else {

  }

#line 203
  return ((struct nfs_page *)0);
}
}
#line 213 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static bool nfs_page_group_covers_page(struct nfs_page *req ) 
{ 
  struct nfs_page *tmp ;
  unsigned int pos ;
  unsigned int len ;
  unsigned int tmp___0 ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int __ret_warn_on___0 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
  {
#line 216
  pos = 0U;
#line 217
  tmp___0 = nfs_page_length(req->wb_page);
#line 217
  len = tmp___0;
#line 219
  nfs_page_group_lock(req, 0);
  }
  ldv_56604: 
  {
#line 222
  tmp = nfs_page_group_search_locked(req->wb_head, pos);
  }
#line 223
  if ((unsigned long )tmp != (unsigned long )((struct nfs_page *)0)) {
    {
#line 225
    __ret_warn_once = tmp->wb_pgbase != pos;
#line 225
    tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 225
    if (tmp___3 != 0L) {
      {
#line 225
      __ret_warn_on = ! __warned;
#line 225
      tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 225
      if (tmp___1 != 0L) {
        {
#line 225
        warn_slowpath_null("fs/nfs/write.c", 225);
        }
      } else {

      }
      {
#line 225
      tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 225
      if (tmp___2 != 0L) {
#line 225
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 225
    __builtin_expect(__ret_warn_once != 0, 0L);
#line 226
    pos = pos + (tmp->wb_bytes + (tmp->wb_pgbase - pos));
    }
  } else {

  }
#line 228
  if ((unsigned long )tmp != (unsigned long )((struct nfs_page *)0) && pos < len) {
#line 230
    goto ldv_56604;
  } else {

  }
  {
#line 230
  nfs_page_group_unlock(req);
#line 231
  __ret_warn_once___0 = pos > len;
#line 231
  tmp___6 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 231
  if (tmp___6 != 0L) {
    {
#line 231
    __ret_warn_on___0 = ! __warned___0;
#line 231
    tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 231
    if (tmp___4 != 0L) {
      {
#line 231
      warn_slowpath_null("fs/nfs/write.c", 231);
      }
    } else {

    }
    {
#line 231
    tmp___5 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 231
    if (tmp___5 != 0L) {
#line 231
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 231
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 232
  return (pos == len);
}
}
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_mark_uptodate(struct nfs_page *req ) 
{ 
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 240
  tmp = PageUptodate(req->wb_page);
  }
#line 240
  if (tmp != 0) {
#line 241
    return;
  } else {

  }
  {
#line 242
  tmp___0 = nfs_page_group_covers_page(req);
  }
#line 242
  if (tmp___0) {
#line 242
    tmp___1 = 0;
  } else {
#line 242
    tmp___1 = 1;
  }
#line 242
  if (tmp___1) {
#line 243
    return;
  } else {

  }
  {
#line 244
  SetPageUptodate(req->wb_page);
  }
#line 245
  return;
}
}
#line 247 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int wb_priority(struct writeback_control *wbc ) 
{ 


  {
#line 249
  if ((unsigned int )*((unsigned char *)wbc + 36UL) != 0U) {
#line 250
    return (20);
  } else {

  }
#line 251
  if ((unsigned int )*((unsigned char *)wbc + 36UL) != 0U) {
#line 252
    return (40);
  } else {

  }
#line 253
  return (32);
}
}
#line 266 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_set_page_writeback(struct page *page ) 
{ 
  struct nfs_server *nfss ;
  struct address_space *tmp ;
  struct nfs_server *tmp___0 ;
  int ret ;
  int tmp___1 ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;

  {
  {
#line 268
  tmp = page_file_mapping(page);
#line 268
  tmp___0 = NFS_SERVER((struct inode  const  *)tmp->host);
#line 268
  nfss = tmp___0;
#line 269
  tmp___1 = __test_set_page_writeback(page, 0);
#line 269
  ret = tmp___1;
#line 271
  __ret_warn_once = ret != 0;
#line 271
  tmp___4 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 271
  if (tmp___4 != 0L) {
    {
#line 271
    __ret_warn_on = ! __warned;
#line 271
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 271
    if (tmp___2 != 0L) {
      {
#line 271
      warn_slowpath_null("fs/nfs/write.c", 271);
      }
    } else {

    }
    {
#line 271
    tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 271
    if (tmp___3 != 0L) {
#line 271
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 271
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 273
  tmp___5 = atomic_long_inc_return(& nfss->writeback);
  }
#line 273
  if (tmp___5 > (long )(nfs_congestion_kb >> 2)) {
    {
#line 275
    set_bdi_congested(& nfss->backing_dev_info, 0);
    }
  } else {

  }
#line 276
  return;
}
}
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_end_page_writeback(struct nfs_page *req ) 
{ 
  struct inode *inode ;
  struct address_space *tmp ;
  struct nfs_server *nfss ;
  struct nfs_server *tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;

  {
  {
#line 282
  tmp = page_file_mapping(req->wb_page);
#line 282
  inode = tmp->host;
#line 283
  tmp___0 = NFS_SERVER((struct inode  const  *)inode);
#line 283
  nfss = tmp___0;
#line 285
  tmp___1 = nfs_page_group_sync_on_bit(req, 9U);
  }
#line 285
  if (tmp___1) {
#line 285
    tmp___2 = 0;
  } else {
#line 285
    tmp___2 = 1;
  }
#line 285
  if (tmp___2) {
#line 286
    return;
  } else {

  }
  {
#line 288
  end_page_writeback(req->wb_page);
#line 289
  tmp___3 = atomic_long_dec_return(& nfss->writeback);
  }
#line 289
  if (tmp___3 < (long )((nfs_congestion_kb >> 2) - (nfs_congestion_kb >> 4))) {
    {
#line 290
    clear_bdi_congested(& nfss->backing_dev_info, 0);
    }
  } else {

  }
#line 291
  return;
}
}
#line 299 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_page_group_clear_bits(struct nfs_page *req ) 
{ 


  {
  {
#line 301
  clear_bit(6L, (unsigned long volatile   *)(& req->wb_flags));
#line 302
  clear_bit(7L, (unsigned long volatile   *)(& req->wb_flags));
#line 303
  clear_bit(8L, (unsigned long volatile   *)(& req->wb_flags));
#line 304
  clear_bit(9L, (unsigned long volatile   *)(& req->wb_flags));
#line 305
  clear_bit(10L, (unsigned long volatile   *)(& req->wb_flags));
  }
#line 306
  return;
}
}
#line 325 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_unroll_locks_and_wait(struct inode *inode , struct nfs_page *head ,
                                     struct nfs_page *req , bool nonblock ) 
{ 
  struct nfs_page *tmp ;
  int ret ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 333
  tmp = head;
#line 333
  goto ldv_56645;
  ldv_56644: 
  {
#line 334
  nfs_unlock_request(tmp);
#line 333
  tmp = tmp->wb_this_page;
  }
  ldv_56645: ;
#line 333
  if ((unsigned long )tmp != (unsigned long )req) {
#line 335
    goto ldv_56644;
  } else {

  }
  {
#line 336
  tmp___0 = constant_test_bit(6L, (unsigned long const volatile   *)(& req->wb_flags));
#line 336
  __ret_warn_once = tmp___0 != 0;
#line 336
  tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 336
  if (tmp___3 != 0L) {
    {
#line 336
    __ret_warn_on = ! __warned;
#line 336
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 336
    if (tmp___1 != 0L) {
      {
#line 336
      warn_slowpath_null("fs/nfs/write.c", 336);
      }
    } else {

    }
    {
#line 336
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 336
    if (tmp___2 != 0L) {
#line 336
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 336
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 339
  kref_get(& req->wb_kref);
#line 341
  nfs_page_group_unlock(head);
#line 342
  ldv_spin_unlock_73(& inode->i_lock);
#line 345
  nfs_release_request(head);
  }
#line 347
  if (! nonblock) {
    {
#line 348
    ret = nfs_wait_on_request(req);
    }
  } else {
#line 350
    ret = -11;
  }
  {
#line 351
  nfs_release_request(req);
  }
#line 353
  return (ret);
}
}
#line 367 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_destroy_unlinked_subrequests(struct nfs_page *destroy_list , struct nfs_page *old_head ) 
{ 
  struct nfs_page *subreq ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int __ret_warn_on___0 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  bool __warned___1 ;
  int __ret_warn_once___1 ;
  int tmp___6 ;
  int __ret_warn_on___1 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;

  {
#line 370
  goto ldv_56673;
  ldv_56672: 
  {
#line 371
  subreq = destroy_list;
#line 373
  destroy_list = (unsigned long )subreq->wb_this_page != (unsigned long )old_head ? subreq->wb_this_page : (struct nfs_page *)0;
#line 376
  __ret_warn_once = (unsigned long )old_head != (unsigned long )subreq->wb_head;
#line 376
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 376
  if (tmp___1 != 0L) {
    {
#line 376
    __ret_warn_on = ! __warned;
#line 376
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 376
    if (tmp != 0L) {
      {
#line 376
      warn_slowpath_null("fs/nfs/write.c", 376);
      }
    } else {

    }
    {
#line 376
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 376
    if (tmp___0 != 0L) {
#line 376
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 376
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 379
  subreq->wb_head = subreq;
#line 380
  subreq->wb_this_page = subreq;
#line 384
  nfs_unlock_request(subreq);
#line 386
  tmp___10 = constant_test_bit(6L, (unsigned long const volatile   *)(& subreq->wb_flags));
  }
#line 386
  if (tmp___10 == 0) {
    {
#line 388
    nfs_release_request(old_head);
#line 390
    nfs_page_group_clear_bits(subreq);
#line 393
    tmp___5 = test_and_set_bit(4L, (unsigned long volatile   *)(& subreq->wb_flags));
    }
#line 393
    if (tmp___5 != 0) {
      {
#line 394
      nfs_release_request(subreq);
      }
    } else {
      {
#line 396
      __ret_warn_once___0 = 1;
#line 396
      tmp___4 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
      }
#line 396
      if (tmp___4 != 0L) {
        {
#line 396
        __ret_warn_on___0 = ! __warned___0;
#line 396
        tmp___2 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
        }
#line 396
        if (tmp___2 != 0L) {
          {
#line 396
          warn_slowpath_null("fs/nfs/write.c", 396);
          }
        } else {

        }
        {
#line 396
        tmp___3 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
        }
#line 396
        if (tmp___3 != 0L) {
#line 396
          __warned___0 = 1;
        } else {

        }
      } else {

      }
      {
#line 396
      __builtin_expect(__ret_warn_once___0 != 0, 0L);
      }
    }
  } else {
    {
#line 398
    tmp___6 = constant_test_bit(2L, (unsigned long const volatile   *)(& subreq->wb_flags));
#line 398
    __ret_warn_once___1 = tmp___6 != 0;
#line 398
    tmp___9 = __builtin_expect(__ret_warn_once___1 != 0, 0L);
    }
#line 398
    if (tmp___9 != 0L) {
      {
#line 398
      __ret_warn_on___1 = ! __warned___1;
#line 398
      tmp___7 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
      }
#line 398
      if (tmp___7 != 0L) {
        {
#line 398
        warn_slowpath_null("fs/nfs/write.c", 398);
        }
      } else {

      }
      {
#line 398
      tmp___8 = __builtin_expect(__ret_warn_on___1 != 0, 0L);
      }
#line 398
      if (tmp___8 != 0L) {
#line 398
        __warned___1 = 1;
      } else {

      }
    } else {

    }
    {
#line 398
    __builtin_expect(__ret_warn_once___1 != 0, 0L);
#line 403
    nfs_page_group_clear_bits(subreq);
#line 404
    nfs_free_request(subreq);
    }
  }
  ldv_56673: ;
#line 370
  if ((unsigned long )destroy_list != (unsigned long )((struct nfs_page *)0)) {
#line 372
    goto ldv_56672;
  } else {

  }

#line 377
  return;
}
}
#line 429 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_page *nfs_lock_and_join_requests(struct page *page , bool nonblock ) 
{ 
  struct inode *inode ;
  struct address_space *tmp ;
  struct nfs_page *head ;
  struct nfs_page *subreq ;
  struct nfs_page *destroy_list ;
  unsigned int total_bytes ;
  int ret ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  struct nfs_inode *tmp___3 ;
  void *tmp___4 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int __ret_warn_on___0 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;

  {
  {
#line 431
  tmp = page_file_mapping(page);
#line 431
  inode = tmp->host;
#line 433
  destroy_list = (struct nfs_page *)0;
  }
  try_again: 
  {
#line 438
  total_bytes = 0U;
#line 440
  __ret_warn_once = (unsigned long )destroy_list != (unsigned long )((struct nfs_page *)0);
#line 440
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 440
  if (tmp___2 != 0L) {
    {
#line 440
    __ret_warn_on = ! __warned;
#line 440
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 440
    if (tmp___0 != 0L) {
      {
#line 440
      warn_slowpath_null("fs/nfs/write.c", 440);
      }
    } else {

    }
    {
#line 440
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 440
    if (tmp___1 != 0L) {
#line 440
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 440
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 442
  ldv_spin_lock_72(& inode->i_lock);
#line 449
  tmp___3 = NFS_I((struct inode  const  *)inode);
#line 449
  head = nfs_page_find_head_request_locked(tmp___3, page);
  }
#line 451
  if ((unsigned long )head == (unsigned long )((struct nfs_page *)0)) {
    {
#line 452
    ldv_spin_unlock_73(& inode->i_lock);
    }
#line 453
    return ((struct nfs_page *)0);
  } else {

  }
  {
#line 457
  ret = nfs_page_group_lock(head, 1);
  }
#line 458
  if (ret < 0) {
    {
#line 459
    tmp___4 = ERR_PTR((long )ret);
    }
#line 459
    return ((struct nfs_page *)tmp___4);
  } else {

  }
#line 460
  subreq = head;
  ldv_56696: 
  {
#line 466
  __ret_warn_once___0 = subreq->wb_offset != head->wb_offset + total_bytes;
#line 466
  tmp___7 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 466
  if (tmp___7 != 0L) {
    {
#line 466
    __ret_warn_on___0 = ! __warned___0;
#line 466
    tmp___5 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 466
    if (tmp___5 != 0L) {
      {
#line 466
      warn_slowpath_null("fs/nfs/write.c", 467);
      }
    } else {

    }
    {
#line 466
    tmp___6 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 466
    if (tmp___6 != 0L) {
#line 466
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 466
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
#line 470
  total_bytes = total_bytes + subreq->wb_bytes;
#line 472
  tmp___9 = nfs_lock_request(subreq);
  }
#line 472
  if (tmp___9 == 0) {
    {
#line 475
    ret = nfs_unroll_locks_and_wait(inode, head, subreq, (int )nonblock);
    }
#line 478
    if (ret == 0) {
#line 479
      goto try_again;
    } else {

    }
    {
#line 481
    tmp___8 = ERR_PTR((long )ret);
    }
#line 481
    return ((struct nfs_page *)tmp___8);
  } else {

  }
#line 484
  subreq = subreq->wb_this_page;
#line 485
  if ((unsigned long )subreq != (unsigned long )head) {
#line 487
    goto ldv_56696;
  } else {

  }
#line 489
  subreq = head;
  ldv_56698: 
  {
#line 491
  nfs_clear_request_commit(subreq);
#line 492
  subreq = subreq->wb_this_page;
  }
#line 493
  if ((unsigned long )subreq != (unsigned long )head) {
#line 495
    goto ldv_56698;
  } else {

  }

#line 496
  if ((unsigned long )head->wb_this_page != (unsigned long )head) {
#line 498
    destroy_list = head->wb_this_page;
#line 499
    head->wb_this_page = head;
#line 503
    head->wb_bytes = total_bytes;
  } else {

  }
  {
#line 509
  nfs_page_group_clear_bits(head);
#line 516
  tmp___10 = test_and_set_bit(4L, (unsigned long volatile   *)(& head->wb_flags));
  }
#line 516
  if (tmp___10 == 0) {
    {
#line 517
    kref_get(& head->wb_kref);
    }
  } else {

  }
  {
#line 519
  nfs_page_group_unlock(head);
#line 522
  ldv_spin_unlock_73(& inode->i_lock);
#line 524
  nfs_destroy_unlinked_subrequests(destroy_list, head);
  }
#line 528
  return (head);
}
}
#line 535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_page_async_flush(struct nfs_pageio_descriptor *pgio , struct page *page ,
                                bool nonblock ) 
{ 
  struct nfs_page *req ;
  int ret ;
  long tmp ;
  bool tmp___0 ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___1 ;
  int __ret_warn_on ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;

  {
  {
#line 539
  ret = 0;
#line 541
  req = nfs_lock_and_join_requests(page, (int )nonblock);
  }
#line 542
  if ((unsigned long )req == (unsigned long )((struct nfs_page *)0)) {
#line 543
    goto out;
  } else {

  }
  {
#line 544
  tmp = PTR_ERR((void const   *)req);
#line 544
  ret = (int )tmp;
#line 545
  tmp___0 = IS_ERR((void const   *)req);
  }
#line 545
  if ((int )tmp___0) {
#line 546
    goto out;
  } else {

  }
  {
#line 548
  nfs_set_page_writeback(page);
#line 549
  tmp___1 = constant_test_bit(2L, (unsigned long const volatile   *)(& req->wb_flags));
#line 549
  __ret_warn_once = tmp___1 != 0;
#line 549
  tmp___4 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 549
  if (tmp___4 != 0L) {
    {
#line 549
    __ret_warn_on = ! __warned;
#line 549
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 549
    if (tmp___2 != 0L) {
      {
#line 549
      warn_slowpath_null("fs/nfs/write.c", 549);
      }
    } else {

    }
    {
#line 549
    tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 549
    if (tmp___3 != 0L) {
#line 549
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 549
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 551
  ret = 0;
#line 552
  tmp___5 = nfs_pageio_add_request(pgio, req);
  }
#line 552
  if (tmp___5 == 0) {
    {
#line 553
    nfs_redirty_request(req);
#line 554
    ret = pgio->pg_error;
    }
  } else {

  }
  out: ;
#line 557
  return (ret);
}
}
#line 560 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_do_writepage(struct page *page , struct writeback_control *wbc , struct nfs_pageio_descriptor *pgio ) 
{ 
  struct inode *inode ;
  struct address_space *tmp ;
  int ret ;
  unsigned long tmp___0 ;

  {
  {
#line 562
  tmp = page_file_mapping(page);
#line 562
  inode = tmp->host;
#line 565
  nfs_inc_stats___4((struct inode  const  *)inode, 10);
#line 566
  nfs_add_stats___2((struct inode  const  *)inode, 7, 1L);
#line 568
  tmp___0 = page_file_index(page);
#line 568
  nfs_pageio_cond_complete(pgio, tmp___0);
#line 569
  ret = nfs_page_async_flush(pgio, page, (unsigned int )wbc->sync_mode == 0U);
  }
#line 570
  if (ret == -11) {
    {
#line 571
    redirty_page_for_writepage(wbc, page);
#line 572
    ret = 0;
    }
  } else {

  }
#line 574
  return (ret);
}
}
#line 580 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_writepage_locked(struct page *page , struct writeback_control *wbc ) 
{ 
  struct nfs_pageio_descriptor pgio ;
  int err ;
  int tmp ;

  {
  {
#line 585
  tmp = wb_priority(wbc);
#line 585
  nfs_pageio_init_write(& pgio, (page->__annonCompField47.mapping)->host, tmp, 0,
                        & nfs_async_write_completion_ops);
#line 587
  err = nfs_do_writepage(page, wbc, & pgio);
#line 588
  nfs_pageio_complete(& pgio);
  }
#line 589
  if (err < 0) {
#line 590
    return (err);
  } else {

  }
#line 591
  if (pgio.pg_error < 0) {
#line 592
    return (pgio.pg_error);
  } else {

  }
#line 593
  return (0);
}
}
#line 596 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_writepage(struct page *page , struct writeback_control *wbc ) 
{ 
  int ret ;

  {
  {
#line 600
  ret = nfs_writepage_locked(page, wbc);
#line 601
  unlock_page(page);
  }
#line 602
  return (ret);
}
}
#line 605 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_writepages_callback(struct page *page , struct writeback_control *wbc ,
                                   void *data ) 
{ 
  int ret ;

  {
  {
#line 609
  ret = nfs_do_writepage(page, wbc, (struct nfs_pageio_descriptor *)data);
#line 610
  unlock_page(page);
  }
#line 611
  return (ret);
}
}
#line 614 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_writepages(struct address_space *mapping , struct writeback_control *wbc ) 
{ 
  struct inode *inode ;
  unsigned long *bitlock ;
  struct nfs_inode *tmp ;
  struct nfs_pageio_descriptor pgio ;
  int err ;
  int tmp___0 ;

  {
  {
#line 616
  inode = mapping->host;
#line 617
  tmp = NFS_I((struct inode  const  *)inode);
#line 617
  bitlock = & tmp->flags;
#line 622
  err = wait_on_bit_lock((void *)bitlock, 4, & nfs_wait_bit_killable, 130U);
  }
#line 624
  if (err != 0) {
#line 625
    goto out_err;
  } else {

  }
  {
#line 627
  nfs_inc_stats___4((struct inode  const  *)inode, 11);
#line 629
  tmp___0 = wb_priority(wbc);
#line 629
  nfs_pageio_init_write(& pgio, inode, tmp___0, 0, & nfs_async_write_completion_ops);
#line 631
  err = write_cache_pages(mapping, wbc, & nfs_writepages_callback, (void *)(& pgio));
#line 632
  nfs_pageio_complete(& pgio);
#line 634
  clear_bit_unlock(4L, (unsigned long volatile   *)bitlock);
#line 635
  __asm__  volatile   ("": : : "memory");
#line 636
  wake_up_bit((void *)bitlock, 4);
  }
#line 638
  if (err < 0) {
#line 639
    goto out_err;
  } else {

  }
#line 640
  err = pgio.pg_error;
#line 641
  if (err < 0) {
#line 642
    goto out_err;
  } else {

  }
#line 643
  return (0);
  out_err: ;
#line 645
  return (err);
}
}
#line 651 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_inode_add_request(struct inode *inode , struct nfs_page *req ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  struct nfs_rpc_ops  const  *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int __ret_warn_on___0 ;
  int tmp___7 ;
  long tmp___8 ;

  {
  {
#line 653
  tmp = NFS_I((struct inode  const  *)inode);
#line 653
  nfsi = tmp;
#line 655
  __ret_warn_once = (unsigned long )req->wb_this_page != (unsigned long )req;
#line 655
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 655
  if (tmp___2 != 0L) {
    {
#line 655
    __ret_warn_on = ! __warned;
#line 655
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 655
    if (tmp___0 != 0L) {
      {
#line 655
      warn_slowpath_null("fs/nfs/write.c", 655);
      }
    } else {

    }
    {
#line 655
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 655
    if (tmp___1 != 0L) {
#line 655
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 655
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 658
  nfs_lock_request(req);
#line 660
  ldv_spin_lock_72(& inode->i_lock);
  }
#line 661
  if (nfsi->npages == 0UL) {
    {
#line 661
    tmp___3 = NFS_PROTO((struct inode  const  *)inode);
#line 661
    tmp___4 = (*(tmp___3->have_delegation))(inode, 2U);
    }
#line 661
    if (tmp___4 != 0) {
#line 662
      inode->i_version = inode->i_version + 1ULL;
    } else {

    }
  } else {

  }
  {
#line 667
  tmp___5 = PageSwapCache((struct page  const  *)req->wb_page);
#line 667
  tmp___6 = __builtin_expect(tmp___5 == 0, 1L);
  }
#line 667
  if (tmp___6 != 0L) {
    {
#line 668
    set_bit(1L, (unsigned long volatile   *)(& req->wb_flags));
#line 669
    SetPagePrivate(req->wb_page);
#line 670
    (req->wb_page)->__annonCompField56.private = (unsigned long )req;
    }
  } else {

  }
  {
#line 672
  nfsi->npages = nfsi->npages + 1UL;
#line 675
  tmp___7 = test_and_set_bit(4L, (unsigned long volatile   *)(& req->wb_flags));
#line 675
  __ret_warn_on___0 = tmp___7 != 0;
#line 675
  tmp___8 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
  }
#line 675
  if (tmp___8 != 0L) {
    {
#line 675
    warn_slowpath_null("fs/nfs/write.c", 675);
    }
  } else {

  }
  {
#line 675
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 676
  kref_get(& req->wb_kref);
#line 677
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 678
  return;
}
}
#line 683 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_inode_remove_request(struct nfs_page *req ) 
{ 
  struct inode *inode ;
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct nfs_page *head ;
  int tmp___0 ;
  long tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;

  {
  {
#line 685
  inode = ((req->wb_context)->dentry)->d_inode;
#line 686
  tmp = NFS_I((struct inode  const  *)inode);
#line 686
  nfsi = tmp;
#line 689
  tmp___2 = nfs_page_group_sync_on_bit(req, 10U);
  }
#line 689
  if ((int )tmp___2) {
    {
#line 690
    head = req->wb_head;
#line 692
    ldv_spin_lock_72(& inode->i_lock);
#line 693
    tmp___0 = PageSwapCache((struct page  const  *)head->wb_page);
#line 693
    tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
    }
#line 693
    if (tmp___1 != 0L) {
      {
#line 694
      (head->wb_page)->__annonCompField56.private = 0UL;
#line 695
      ClearPagePrivate(head->wb_page);
#line 696
      clear_bit(1L, (unsigned long volatile   *)(& head->wb_flags));
      }
    } else {

    }
    {
#line 698
    nfsi->npages = nfsi->npages - 1UL;
#line 699
    ldv_spin_unlock_73(& inode->i_lock);
    }
  } else {

  }
  {
#line 702
  tmp___3 = test_and_set_bit(4L, (unsigned long volatile   *)(& req->wb_flags));
  }
#line 702
  if (tmp___3 != 0) {
    {
#line 703
    nfs_release_request(req);
    }
  } else {

  }
#line 704
  return;
}
}
#line 707 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_mark_request_dirty(struct nfs_page *req ) 
{ 


  {
  {
#line 709
  __set_page_dirty_nobuffers(req->wb_page);
  }
#line 710
  return;
}
}
#line 727 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_request_add_commit_list(struct nfs_page *req , struct list_head *dst , struct nfs_commit_info *cinfo ) 
{ 
  struct address_space *tmp ;

  {
  {
#line 730
  set_bit(2L, (unsigned long volatile   *)(& req->wb_flags));
#line 731
  ldv_spin_lock_80___2(cinfo->lock);
#line 732
  nfs_list_add_request(req, dst);
#line 733
  (cinfo->mds)->ncommit = (cinfo->mds)->ncommit + 1UL;
#line 734
  ldv_spin_unlock_81___2(cinfo->lock);
  }
#line 735
  if ((unsigned long )cinfo->dreq == (unsigned long )((struct nfs_direct_req *)0)) {
    {
#line 736
    inc_zone_page_state(req->wb_page, 17);
#line 737
    tmp = page_file_mapping(req->wb_page);
#line 737
    inc_bdi_stat(tmp->backing_dev_info, 0);
#line 739
    __mark_inode_dirty(((req->wb_context)->dentry)->d_inode, 2);
    }
  } else {

  }
#line 741
  return;
}
}
#line 743 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_request_add_commit_list[28U]  = 
#line 743
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'q',      'u', 
        'e',      's',      't',      '_', 
        'a',      'd',      'd',      '_', 
        'c',      'o',      'm',      'm', 
        'i',      't',      '_',      'l', 
        'i',      's',      't',      '\000'};
#line 743
struct kernel_symbol  const  __ksymtab_nfs_request_add_commit_list ;
#line 743 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_request_add_commit_list  =    {(unsigned long )(& nfs_request_add_commit_list), (char const   *)(& __kstrtab_nfs_request_add_commit_list)};
#line 757 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_request_remove_commit_list(struct nfs_page *req , struct nfs_commit_info *cinfo ) 
{ 
  int tmp ;

  {
  {
#line 760
  tmp = test_and_set_bit(2L, (unsigned long volatile   *)(& req->wb_flags));
  }
#line 760
  if (tmp == 0) {
#line 761
    return;
  } else {

  }
  {
#line 762
  nfs_list_remove_request(req);
#line 763
  (cinfo->mds)->ncommit = (cinfo->mds)->ncommit - 1UL;
  }
#line 764
  return;
}
}
#line 765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_request_remove_commit_list[31U]  = 
#line 765
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'q',      'u', 
        'e',      's',      't',      '_', 
        'r',      'e',      'm',      'o', 
        'v',      'e',      '_',      'c', 
        'o',      'm',      'm',      'i', 
        't',      '_',      'l',      'i', 
        's',      't',      '\000'};
#line 765
struct kernel_symbol  const  __ksymtab_nfs_request_remove_commit_list ;
#line 765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_request_remove_commit_list  =    {(unsigned long )(& nfs_request_remove_commit_list), (char const   *)(& __kstrtab_nfs_request_remove_commit_list)};
#line 767 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_init_cinfo_from_inode(struct nfs_commit_info *cinfo , struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 770
  cinfo->lock = & inode->i_lock;
#line 771
  tmp = NFS_I((struct inode  const  *)inode);
#line 771
  cinfo->mds = & tmp->commit_info;
#line 772
  cinfo->ds = pnfs_get_ds_info(inode);
#line 773
  cinfo->dreq = (struct nfs_direct_req *)0;
#line 774
  cinfo->completion_ops = & nfs_commit_completion_ops;
  }
#line 775
  return;
}
}
#line 777 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_init_cinfo(struct nfs_commit_info *cinfo , struct inode *inode , struct nfs_direct_req *dreq ) 
{ 


  {
#line 781
  if ((unsigned long )dreq != (unsigned long )((struct nfs_direct_req *)0)) {
    {
#line 782
    nfs_init_cinfo_from_dreq(cinfo, dreq);
    }
  } else {
    {
#line 784
    nfs_init_cinfo_from_inode(cinfo, inode);
    }
  }
#line 785
  return;
}
}
#line 786 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_init_cinfo[15U]  = 
#line 786
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'i',      't', 
        '_',      'c',      'i',      'n', 
        'f',      'o',      '\000'};
#line 786
struct kernel_symbol  const  __ksymtab_nfs_init_cinfo ;
#line 786 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_init_cinfo  =    {(unsigned long )(& nfs_init_cinfo), (char const   *)(& __kstrtab_nfs_init_cinfo)};
#line 792 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_mark_request_commit(struct nfs_page *req , struct pnfs_layout_segment *lseg ,
                             struct nfs_commit_info *cinfo ) 
{ 
  bool tmp ;

  {
  {
#line 795
  tmp = pnfs_mark_request_commit(req, lseg, cinfo);
  }
#line 795
  if ((int )tmp) {
#line 796
    return;
  } else {

  }
  {
#line 797
  nfs_request_add_commit_list(req, & (cinfo->mds)->list, cinfo);
  }
#line 798
  return;
}
}
#line 801 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_clear_page_commit(struct page *page ) 
{ 
  struct address_space *tmp ;

  {
  {
#line 803
  dec_zone_page_state(page, 17);
#line 804
  tmp = page_file_mapping(page);
#line 804
  dec_bdi_stat(tmp->backing_dev_info, 0);
  }
#line 805
  return;
}
}
#line 809 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_clear_request_commit(struct nfs_page *req ) 
{ 
  struct inode *inode ;
  struct nfs_commit_info cinfo ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 811
  tmp___1 = constant_test_bit(2L, (unsigned long const volatile   *)(& req->wb_flags));
  }
#line 811
  if (tmp___1 != 0) {
    {
#line 812
    inode = ((req->wb_context)->dentry)->d_inode;
#line 815
    nfs_init_cinfo_from_inode(& cinfo, inode);
#line 816
    tmp = pnfs_clear_request_commit(req, & cinfo);
    }
#line 816
    if (tmp) {
#line 816
      tmp___0 = 0;
    } else {
#line 816
      tmp___0 = 1;
    }
#line 816
    if (tmp___0) {
      {
#line 817
      nfs_request_remove_commit_list(req, & cinfo);
      }
    } else {

    }
    {
#line 819
    nfs_clear_page_commit(req->wb_page);
    }
  } else {

  }
#line 821
  return;
}
}
#line 824 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
__inline static int nfs_write_need_commit(struct nfs_pgio_header *hdr ) 
{ 


  {
#line 826
  if ((int )hdr->writeverf.committed == 1) {
#line 827
    return ((unsigned long )hdr->lseg == (unsigned long )((struct pnfs_layout_segment *)0));
  } else {

  }
#line 828
  return ((int )hdr->writeverf.committed != 2);
}
}
#line 862 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_write_completion(struct nfs_pgio_header *hdr ) 
{ 
  struct nfs_commit_info cinfo ;
  unsigned long bytes ;
  int tmp ;
  struct nfs_page *req ;
  struct nfs_page *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 865
  bytes = 0UL;
#line 867
  tmp = constant_test_bit(2L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 867
  if (tmp != 0) {
#line 868
    goto out;
  } else {

  }
  {
#line 869
  nfs_init_cinfo_from_inode(& cinfo, hdr->inode);
  }
#line 870
  goto ldv_56837;
  ldv_56836: 
  {
#line 871
  tmp___0 = nfs_list_entry(hdr->pages.next);
#line 871
  req = tmp___0;
#line 873
  bytes = bytes + (unsigned long )req->wb_bytes;
#line 874
  nfs_list_remove_request(req);
#line 875
  tmp___1 = constant_test_bit(0L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 875
  if (tmp___1 != 0 && hdr->good_bytes < bytes) {
    {
#line 877
    nfs_set_pageerror(req->wb_page);
#line 878
    nfs_context_set_write_error(req->wb_context, hdr->error);
    }
#line 879
    goto remove_req;
  } else {

  }
  {
#line 881
  tmp___2 = constant_test_bit(4L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 881
  if (tmp___2 != 0) {
    {
#line 882
    nfs_mark_request_dirty(req);
    }
#line 883
    goto next;
  } else {

  }
  {
#line 885
  tmp___3 = constant_test_bit(3L, (unsigned long const volatile   *)(& hdr->flags));
  }
#line 885
  if (tmp___3 != 0) {
    {
#line 886
    memcpy((void *)(& req->wb_verf), (void const   *)(& hdr->verf.verifier), 8UL);
#line 887
    nfs_mark_request_commit(req, hdr->lseg, & cinfo);
    }
#line 888
    goto next;
  } else {

  }
  remove_req: 
  {
#line 891
  nfs_inode_remove_request(req);
  }
  next: 
  {
#line 893
  nfs_unlock_request(req);
#line 894
  nfs_end_page_writeback(req);
#line 895
  nfs_release_request(req);
  }
  ldv_56837: 
  {
#line 870
  tmp___4 = list_empty((struct list_head  const  *)(& hdr->pages));
  }
#line 870
  if (tmp___4 == 0) {
#line 872
    goto ldv_56836;
  } else {

  }

  out: 
  {
#line 898
  (*(hdr->release))(hdr);
  }
#line 899
  return;
}
}
#line 903 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
unsigned long nfs_reqs_to_commit(struct nfs_commit_info *cinfo ) 
{ 


  {
#line 905
  return ((cinfo->mds)->ncommit);
}
}
#line 910 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_scan_commit_list(struct list_head *src , struct list_head *dst , struct nfs_commit_info *cinfo ,
                         int max ) 
{ 
  struct nfs_page *req ;
  struct nfs_page *tmp ;
  int ret ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp___0 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 914
  ret = 0;
#line 916
  __mptr = (struct list_head  const  *)src->next;
#line 916
  req = (struct nfs_page *)__mptr;
#line 916
  __mptr___0 = (struct list_head  const  *)req->wb_list.next;
#line 916
  tmp = (struct nfs_page *)__mptr___0;
#line 916
  goto ldv_56863;
  ldv_56862: 
  {
#line 917
  tmp___0 = nfs_lock_request(req);
  }
#line 917
  if (tmp___0 == 0) {
#line 918
    goto ldv_56857;
  } else {

  }
  {
#line 919
  kref_get(& req->wb_kref);
#line 920
  __might_sleep("fs/nfs/write.c", 920, 1);
#line 920
  tmp___1 = __cond_resched_lock(cinfo->lock);
  }
#line 920
  if (tmp___1 != 0) {
#line 921
    __mptr___1 = (struct list_head  const  *)req->wb_list.next;
#line 921
    tmp = (struct nfs_page *)__mptr___1;
  } else {

  }
  {
#line 922
  nfs_request_remove_commit_list(req, cinfo);
#line 923
  nfs_list_add_request(req, dst);
#line 924
  ret = ret + 1;
  }
#line 925
  if (ret == max && (unsigned long )cinfo->dreq == (unsigned long )((struct nfs_direct_req *)0)) {
#line 926
    goto ldv_56861;
  } else {

  }
  ldv_56857: 
#line 916
  req = tmp;
#line 916
  __mptr___2 = (struct list_head  const  *)tmp->wb_list.next;
#line 916
  tmp = (struct nfs_page *)__mptr___2;
  ldv_56863: ;
#line 916
  if ((unsigned long )(& req->wb_list) != (unsigned long )src) {
#line 918
    goto ldv_56862;
  } else {

  }
  ldv_56861: ;
#line 928
  return (ret);
}
}
#line 941 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_scan_commit(struct inode *inode , struct list_head *dst , struct nfs_commit_info *cinfo ) 
{ 
  int ret ;
  int max ;
  int tmp ;

  {
  {
#line 944
  ret = 0;
#line 946
  ldv_spin_lock_80___2(cinfo->lock);
  }
#line 947
  if ((cinfo->mds)->ncommit != 0UL) {
    {
#line 948
    max = 2147483647;
#line 950
    ret = nfs_scan_commit_list(& (cinfo->mds)->list, dst, cinfo, max);
#line 952
    tmp = pnfs_scan_commit_lists(inode, cinfo, 2147483647 - ret);
#line 952
    ret = ret + tmp;
    }
  } else {

  }
  {
#line 954
  ldv_spin_unlock_81___2(cinfo->lock);
  }
#line 955
  return (ret);
}
}
#line 978 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_page *nfs_try_to_update_request(struct inode *inode , struct page *page ,
                                                  unsigned int offset , unsigned int bytes ) 
{ 
  struct nfs_page *req ;
  unsigned int rqend ;
  unsigned int end ;
  int error ;
  int tmp ;
  struct nfs_inode *tmp___0 ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int __ret_warn_on___0 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;

  {
  {
#line 988
  tmp = PagePrivate((struct page  const  *)page);
  }
#line 988
  if (tmp == 0) {
#line 989
    return ((struct nfs_page *)0);
  } else {

  }
  {
#line 991
  end = offset + bytes;
#line 992
  ldv_spin_lock_72(& inode->i_lock);
  }
  ldv_56895: 
  {
#line 995
  tmp___0 = NFS_I((struct inode  const  *)inode);
#line 995
  req = nfs_page_find_head_request_locked(tmp___0, page);
  }
#line 996
  if ((unsigned long )req == (unsigned long )((struct nfs_page *)0)) {
#line 997
    goto out_unlock;
  } else {

  }
  {
#line 1000
  __ret_warn_once = (unsigned long )req->wb_head != (unsigned long )req;
#line 1000
  tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 1000
  if (tmp___3 != 0L) {
    {
#line 1000
    __ret_warn_on = ! __warned;
#line 1000
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1000
    if (tmp___1 != 0L) {
      {
#line 1000
      warn_slowpath_null("fs/nfs/write.c", 1000);
      }
    } else {

    }
    {
#line 1000
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1000
    if (tmp___2 != 0L) {
#line 1000
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 1000
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 1001
  __ret_warn_once___0 = (unsigned long )req->wb_this_page != (unsigned long )req;
#line 1001
  tmp___6 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 1001
  if (tmp___6 != 0L) {
    {
#line 1001
    __ret_warn_on___0 = ! __warned___0;
#line 1001
    tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 1001
    if (tmp___4 != 0L) {
      {
#line 1001
      warn_slowpath_null("fs/nfs/write.c", 1001);
      }
    } else {

    }
    {
#line 1001
    tmp___5 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 1001
    if (tmp___5 != 0L) {
#line 1001
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 1001
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
#line 1003
  rqend = req->wb_offset + req->wb_bytes;
  }
#line 1010
  if (offset > rqend || end < req->wb_offset) {
#line 1012
    goto out_flushme;
  } else {

  }
  {
#line 1014
  tmp___7 = nfs_lock_request(req);
  }
#line 1014
  if (tmp___7 != 0) {
#line 1015
    goto ldv_56893;
  } else {

  }
  {
#line 1018
  ldv_spin_unlock_73(& inode->i_lock);
#line 1019
  error = nfs_wait_on_request(req);
#line 1020
  nfs_release_request(req);
  }
#line 1021
  if (error != 0) {
#line 1022
    goto out_err;
  } else {

  }
  {
#line 1023
  ldv_spin_lock_72(& inode->i_lock);
  }
#line 1024
  goto ldv_56895;
  ldv_56893: ;
#line 1027
  if (offset < req->wb_offset) {
#line 1028
    req->wb_offset = offset;
#line 1029
    req->wb_pgbase = offset;
  } else {

  }
#line 1031
  if (end > rqend) {
#line 1032
    req->wb_bytes = end - req->wb_offset;
  } else {
#line 1034
    req->wb_bytes = rqend - req->wb_offset;
  }
  out_unlock: ;
#line 1036
  if ((unsigned long )req != (unsigned long )((struct nfs_page *)0)) {
    {
#line 1037
    nfs_clear_request_commit(req);
    }
  } else {

  }
  {
#line 1038
  ldv_spin_unlock_73(& inode->i_lock);
  }
#line 1039
  return (req);
  out_flushme: 
  {
#line 1041
  ldv_spin_unlock_73(& inode->i_lock);
#line 1042
  nfs_release_request(req);
#line 1043
  error = nfs_wb_page(inode, page);
  }
  out_err: 
  {
#line 1045
  tmp___8 = ERR_PTR((long )error);
  }
#line 1045
  return ((struct nfs_page *)tmp___8);
}
}
#line 1055 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_page *nfs_setup_write_request(struct nfs_open_context *ctx , struct page *page ,
                                                unsigned int offset , unsigned int bytes ) 
{ 
  struct inode *inode ;
  struct address_space *tmp ;
  struct nfs_page *req ;
  bool tmp___0 ;

  {
  {
#line 1058
  tmp = page_file_mapping(page);
#line 1058
  inode = tmp->host;
#line 1061
  req = nfs_try_to_update_request(inode, page, offset, bytes);
  }
#line 1062
  if ((unsigned long )req != (unsigned long )((struct nfs_page *)0)) {
#line 1063
    goto out;
  } else {

  }
  {
#line 1064
  req = nfs_create_request(ctx, page, (struct nfs_page *)0, offset, bytes);
#line 1065
  tmp___0 = IS_ERR((void const   *)req);
  }
#line 1065
  if ((int )tmp___0) {
#line 1066
    goto out;
  } else {

  }
  {
#line 1067
  nfs_inode_add_request(inode, req);
  }
  out: ;
#line 1069
  return (req);
}
}
#line 1072 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_writepage_setup(struct nfs_open_context *ctx , struct page *page ,
                               unsigned int offset , unsigned int count ) 
{ 
  struct nfs_page *req ;
  long tmp ;
  bool tmp___0 ;

  {
  {
#line 1077
  req = nfs_setup_write_request(ctx, page, offset, count);
#line 1078
  tmp___0 = IS_ERR((void const   *)req);
  }
#line 1078
  if ((int )tmp___0) {
    {
#line 1079
    tmp = PTR_ERR((void const   *)req);
    }
#line 1079
    return ((int )tmp);
  } else {

  }
  {
#line 1081
  nfs_grow_file(page, offset, count);
#line 1082
  nfs_mark_uptodate(req);
#line 1083
  nfs_mark_request_dirty(req);
#line 1084
  nfs_unlock_and_release_request(req);
  }
#line 1085
  return (0);
}
}
#line 1088 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_flush_incompatible(struct file *file , struct page *page ) 
{ 
  struct nfs_open_context *ctx ;
  struct nfs_open_context *tmp ;
  struct nfs_lock_context *l_ctx ;
  struct nfs_page *req ;
  int do_flush ;
  int status ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct address_space *tmp___3 ;

  {
  {
#line 1090
  tmp = nfs_file_open_context(file);
#line 1090
  ctx = tmp;
  }
  ldv_56921: 
  {
#line 1103
  req = nfs_page_find_head_request(page);
  }
#line 1104
  if ((unsigned long )req == (unsigned long )((struct nfs_page *)0)) {
#line 1105
    return (0);
  } else {

  }
#line 1106
  l_ctx = req->wb_lock_context;
#line 1107
  do_flush = (unsigned long )req->wb_page != (unsigned long )page || (unsigned long )req->wb_context != (unsigned long )ctx;
#line 1109
  do_flush = do_flush | ((unsigned long )req->wb_this_page != (unsigned long )req);
#line 1110
  if ((unsigned long )l_ctx != (unsigned long )((struct nfs_lock_context *)0) && (unsigned long )((ctx->dentry)->d_inode)->i_flock != (unsigned long )((struct file_lock *)0)) {
    {
#line 1111
    tmp___0 = get_current();
    }
#line 1111
    if ((unsigned long )l_ctx->lockowner.l_owner != (unsigned long )tmp___0->files) {
#line 1111
      tmp___2 = 1;
    } else {
      {
#line 1111
      tmp___1 = get_current();
      }
#line 1111
      if (l_ctx->lockowner.l_pid != tmp___1->tgid) {
#line 1111
        tmp___2 = 1;
      } else {
#line 1111
        tmp___2 = 0;
      }
    }
#line 1111
    do_flush = do_flush | tmp___2;
  } else {

  }
  {
#line 1114
  nfs_release_request(req);
  }
#line 1115
  if (do_flush == 0) {
#line 1116
    return (0);
  } else {

  }
  {
#line 1117
  tmp___3 = page_file_mapping(page);
#line 1117
  status = nfs_wb_page(tmp___3->host, page);
  }
#line 1118
  if (status == 0) {
#line 1120
    goto ldv_56921;
  } else {

  }

#line 1119
  return (status);
}
}
#line 1133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_key_timeout_notify(struct file *filp , struct inode *inode ) 
{ 
  struct nfs_open_context *ctx ;
  struct nfs_open_context *tmp ;
  struct rpc_auth *auth ;
  struct nfs_server *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1135
  tmp = nfs_file_open_context(filp);
#line 1135
  ctx = tmp;
#line 1136
  tmp___0 = NFS_SERVER((struct inode  const  *)inode);
#line 1136
  auth = (tmp___0->client)->cl_auth;
#line 1138
  tmp___1 = rpcauth_key_timeout_notify(auth, ctx->cred);
  }
#line 1138
  return (tmp___1);
}
}
#line 1144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
bool nfs_ctx_key_to_expire(struct nfs_open_context *ctx ) 
{ 
  bool tmp ;

  {
  {
#line 1146
  tmp = rpcauth_cred_key_to_expire(ctx->cred);
  }
#line 1146
  return (tmp);
}
}
#line 1154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static bool nfs_write_pageuptodate(struct page *page , struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 1156
  tmp = NFS_I((struct inode  const  *)inode);
#line 1156
  nfsi = tmp;
#line 1158
  tmp___0 = nfs_have_delegated_attributes(inode);
  }
#line 1158
  if (tmp___0 != 0) {
#line 1159
    goto out;
  } else {

  }
#line 1160
  if ((nfsi->cache_validity & 32UL) != 0UL) {
#line 1161
    return (0);
  } else {

  }
  {
#line 1162
  __asm__  volatile   ("": : : "memory");
#line 1163
  tmp___1 = constant_test_bit(3L, (unsigned long const volatile   *)(& nfsi->flags));
  }
#line 1163
  if (tmp___1 != 0) {
#line 1164
    return (0);
  } else {

  }
  out: ;
#line 1166
  if ((nfsi->cache_validity & 2UL) != 0UL) {
#line 1167
    return (0);
  } else {

  }
  {
#line 1168
  tmp___2 = PageUptodate(page);
  }
#line 1168
  return (tmp___2 != 0);
}
}
#line 1179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_can_extend_write(struct file *file , struct page *page , struct inode *inode ) 
{ 
  bool tmp ;
  int tmp___0 ;
  struct nfs_rpc_ops  const  *tmp___1 ;
  int tmp___2 ;

  {
#line 1181
  if ((file->f_flags & 4096U) != 0U) {
#line 1182
    return (0);
  } else {

  }
  {
#line 1183
  tmp = nfs_write_pageuptodate(page, inode);
  }
#line 1183
  if (tmp) {
#line 1183
    tmp___0 = 0;
  } else {
#line 1183
    tmp___0 = 1;
  }
#line 1183
  if (tmp___0) {
#line 1184
    return (0);
  } else {

  }
  {
#line 1185
  tmp___1 = NFS_PROTO((struct inode  const  *)inode);
#line 1185
  tmp___2 = (*(tmp___1->have_delegation))(inode, 2U);
  }
#line 1185
  if (tmp___2 != 0) {
#line 1186
    return (1);
  } else {

  }
#line 1187
  if ((unsigned long )inode->i_flock == (unsigned long )((struct file_lock *)0) || (((inode->i_flock)->fl_start == 0LL && (inode->i_flock)->fl_end == 9223372036854775807LL) && (unsigned int )(inode->i_flock)->fl_type != 0U)) {
#line 1190
    return (1);
  } else {

  }
#line 1191
  return (0);
}
}
#line 1200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_updatepage(struct file *file , struct page *page , unsigned int offset , unsigned int count ) 
{ 
  struct nfs_open_context *ctx ;
  struct nfs_open_context *tmp ;
  struct inode *inode ;
  struct address_space *tmp___0 ;
  int status ;
  loff_t tmp___1 ;
  long tmp___2 ;
  unsigned int _max1 ;
  unsigned int _max2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  loff_t tmp___5 ;
  long tmp___6 ;

  {
  {
#line 1203
  tmp = nfs_file_open_context(file);
#line 1203
  ctx = tmp;
#line 1204
  tmp___0 = page_file_mapping(page);
#line 1204
  inode = tmp___0->host;
#line 1205
  status = 0;
#line 1207
  nfs_inc_stats___4((struct inode  const  *)inode, 7);
#line 1209
  tmp___2 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 1209
  if (tmp___2 != 0L) {
    {
#line 1209
    tmp___1 = page_file_offset(page);
#line 1209
    printk("\001dNFS:       nfs_updatepage(%pD2 %d@%lld)\n", file, count, tmp___1 + (loff_t )offset);
    }
  } else {

  }
  {
#line 1212
  tmp___4 = nfs_can_extend_write(file, page, inode);
  }
#line 1212
  if (tmp___4 != 0) {
    {
#line 1213
    _max1 = count + offset;
#line 1213
    tmp___3 = nfs_page_length(page);
#line 1213
    _max2 = tmp___3;
#line 1213
    count = _max1 > _max2 ? _max1 : _max2;
#line 1214
    offset = 0U;
    }
  } else {

  }
  {
#line 1217
  status = nfs_writepage_setup(ctx, page, offset, count);
  }
#line 1218
  if (status < 0) {
    {
#line 1219
    nfs_set_pageerror(page);
    }
  } else {
    {
#line 1221
    __set_page_dirty_nobuffers(page);
    }
  }
  {
#line 1223
  tmp___6 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 1223
  if (tmp___6 != 0L) {
    {
#line 1223
    tmp___5 = i_size_read((struct inode  const  *)inode);
#line 1223
    printk("\001dNFS:       nfs_updatepage returns %d (isize %lld)\n", status, tmp___5);
    }
  } else {

  }
#line 1225
  return (status);
}
}
#line 1228 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int flush_task_priority(int how ) 
{ 


  {
  {
#line 1231
  if ((how & 24) == 16) {
#line 1231
    goto case_16;
  } else {

  }
#line 1233
  if ((how & 24) == 8) {
#line 1233
    goto case_8;
  } else {

  }
#line 1230
  goto switch_break;
  case_16: /* CIL Label */ ;
#line 1232
  return (1);
  case_8: /* CIL Label */ ;
#line 1234
  return (-1);
  switch_break: /* CIL Label */ ;
  }
#line 1236
  return (0);
}
}
#line 1239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_initiate_write(struct nfs_pgio_header *hdr , struct rpc_message *msg ,
                               struct rpc_task_setup *task_setup_data , int how ) 
{ 
  struct inode *inode ;
  int priority ;
  int tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  struct nfs_server *tmp___1 ;

  {
  {
#line 1243
  inode = hdr->inode;
#line 1244
  tmp = flush_task_priority(how);
#line 1244
  priority = tmp;
#line 1246
  task_setup_data->priority = (signed char )priority;
#line 1247
  tmp___0 = NFS_PROTO((struct inode  const  *)inode);
#line 1247
  (*(tmp___0->write_setup))(hdr, msg);
#line 1249
  tmp___1 = NFS_SERVER((struct inode  const  *)inode);
#line 1249
  nfs4_state_protect_write(tmp___1->nfs_client, & task_setup_data->rpc_client, msg,
                           hdr);
  }
#line 1251
  return;
}
}
#line 1257 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_redirty_request(struct nfs_page *req ) 
{ 


  {
  {
#line 1259
  nfs_mark_request_dirty(req);
#line 1260
  nfs_unlock_request(req);
#line 1261
  nfs_end_page_writeback(req);
#line 1262
  nfs_release_request(req);
  }
#line 1263
  return;
}
}
#line 1265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_async_write_error(struct list_head *head ) 
{ 
  struct nfs_page *req ;
  int tmp ;

  {
#line 1269
  goto ldv_56976;
  ldv_56975: 
  {
#line 1270
  req = nfs_list_entry(head->next);
#line 1271
  nfs_list_remove_request(req);
#line 1272
  nfs_redirty_request(req);
  }
  ldv_56976: 
  {
#line 1269
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 1269
  if (tmp == 0) {
#line 1271
    goto ldv_56975;
  } else {

  }

#line 1276
  return;
}
}
#line 1276 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_pgio_completion_ops  const  nfs_async_write_completion_ops  =    {& nfs_async_write_error, 0, & nfs_write_completion};
#line 1281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_pageio_init_write(struct nfs_pageio_descriptor *pgio , struct inode *inode ,
                           int ioflags , bool force_mds , struct nfs_pgio_completion_ops  const  *compl_ops ) 
{ 
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  struct nfs_pageio_ops  const  *pg_ops ;

  {
  {
#line 1285
  tmp = NFS_SERVER((struct inode  const  *)inode);
#line 1285
  server = tmp;
#line 1286
  pg_ops = & nfs_pgio_rw_ops;
  }
#line 1289
  if ((unsigned long )server->pnfs_curr_ld != (unsigned long )((struct pnfs_layoutdriver_type *)0) && ! force_mds) {
#line 1290
    pg_ops = (server->pnfs_curr_ld)->pg_write_ops;
  } else {

  }
  {
#line 1292
  nfs_pageio_init(pgio, inode, pg_ops, compl_ops, & nfs_rw_write_ops, (size_t )server->wsize,
                  ioflags);
  }
#line 1294
  return;
}
}
#line 1295 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_pageio_init_write[22U]  = 
#line 1295
  {      'n',      'f',      's',      '_', 
        'p',      'a',      'g',      'e', 
        'i',      'o',      '_',      'i', 
        'n',      'i',      't',      '_', 
        'w',      'r',      'i',      't', 
        'e',      '\000'};
#line 1295
struct kernel_symbol  const  __ksymtab_nfs_pageio_init_write ;
#line 1295 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_pageio_init_write  =    {(unsigned long )(& nfs_pageio_init_write), (char const   *)(& __kstrtab_nfs_pageio_init_write)};
#line 1297 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_pageio_reset_write_mds(struct nfs_pageio_descriptor *pgio ) 
{ 
  struct nfs_server *tmp ;

  {
  {
#line 1299
  pgio->pg_ops = & nfs_pgio_rw_ops;
#line 1300
  tmp = NFS_SERVER((struct inode  const  *)pgio->pg_inode);
#line 1300
  pgio->pg_bsize = (size_t )tmp->wsize;
  }
#line 1301
  return;
}
}
#line 1302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_pageio_reset_write_mds[27U]  = 
#line 1302
  {      'n',      'f',      's',      '_', 
        'p',      'a',      'g',      'e', 
        'i',      'o',      '_',      'r', 
        'e',      's',      'e',      't', 
        '_',      'w',      'r',      'i', 
        't',      'e',      '_',      'm', 
        'd',      's',      '\000'};
#line 1302
struct kernel_symbol  const  __ksymtab_nfs_pageio_reset_write_mds ;
#line 1302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_pageio_reset_write_mds  =    {(unsigned long )(& nfs_pageio_reset_write_mds), (char const   *)(& __kstrtab_nfs_pageio_reset_write_mds)};
#line 1305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_commit_prepare(struct rpc_task *task , void *calldata ) 
{ 
  struct nfs_commit_data *data ;
  struct nfs_rpc_ops  const  *tmp ;

  {
  {
#line 1307
  data = (struct nfs_commit_data *)calldata;
#line 1309
  tmp = NFS_PROTO((struct inode  const  *)data->inode);
#line 1309
  (*(tmp->commit_rpc_prepare))(task, data);
  }
#line 1310
  return;
}
}
#line 1312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_writeback_release_common(struct nfs_pgio_header *hdr ) 
{ 
  int status ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1314
  status = hdr->task.tk_status;
#line 1316
  if (status >= 0) {
    {
#line 1316
    tmp___2 = nfs_write_need_commit(hdr);
    }
#line 1316
    if (tmp___2 != 0) {
      {
#line 1317
      ldv_spin_lock_76___3(& hdr->lock);
#line 1318
      tmp___1 = constant_test_bit(4L, (unsigned long const volatile   *)(& hdr->flags));
      }
#line 1318
      if (tmp___1 != 0) {

      } else {
        {
#line 1320
        tmp___0 = test_and_set_bit(3L, (unsigned long volatile   *)(& hdr->flags));
        }
#line 1320
        if (tmp___0 == 0) {
          {
#line 1321
          memcpy((void *)(& hdr->verf), (void const   *)(& hdr->writeverf), 12UL);
          }
        } else {
          {
#line 1322
          tmp = memcmp((void const   *)(& hdr->verf), (void const   *)(& hdr->writeverf),
                       12UL);
          }
#line 1322
          if (tmp != 0) {
            {
#line 1323
            set_bit(4L, (unsigned long volatile   *)(& hdr->flags));
            }
          } else {

          }
        }
      }
      {
#line 1324
      ldv_spin_unlock_77___2(& hdr->lock);
      }
    } else {

    }
  } else {

  }
#line 1326
  return;
}
}
#line 1331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_should_remove_suid(struct inode  const  *inode ) 
{ 
  umode_t mode ;
  int kill ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 1333
  mode = inode->i_mode;
#line 1334
  kill = 0;
#line 1337
  tmp = __builtin_expect(((int )mode & 2048) != 0, 0L);
  }
#line 1337
  if (tmp != 0L) {
#line 1338
    kill = 2048;
  } else {

  }
  {
#line 1344
  tmp___0 = __builtin_expect(((unsigned int )mode & 1032U) == 1032U, 0L);
  }
#line 1344
  if (tmp___0 != 0L) {
#line 1345
    kill = kill | 4096;
  } else {

  }
  {
#line 1347
  tmp___1 = __builtin_expect(kill != 0, 0L);
  }
#line 1347
  if (tmp___1 != 0L) {
    {
#line 1347
    tmp___2 = __builtin_expect(((int )mode & 61440) == 32768, 0L);
    }
#line 1347
    if (tmp___2 != 0L) {
#line 1348
      return (kill);
    } else {

    }
  } else {

  }
#line 1350
  return (0);
}
}
#line 1356 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_writeback_done(struct rpc_task *task , struct nfs_pgio_header *hdr ,
                              struct inode *inode ) 
{ 
  int status ;
  struct nfs_rpc_ops  const  *tmp ;
  unsigned long complain ;
  struct nfs_server *tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
  {
#line 1369
  tmp = NFS_PROTO((struct inode  const  *)inode);
#line 1369
  status = (*(tmp->write_done))(task, hdr);
  }
#line 1370
  if (status != 0) {
#line 1371
    return (status);
  } else {

  }
  {
#line 1372
  nfs_add_stats___2((struct inode  const  *)inode, 5, (long )hdr->res.count);
  }
#line 1375
  if ((int )(hdr->res.verf)->committed < (int )hdr->args.stable && task->tk_status >= 0) {
#line 1388
    if ((long )(complain - (unsigned long )jiffies) < 0L) {
      {
#line 1389
      tmp___1 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
      }
#line 1389
      if (tmp___1 != 0L) {
        {
#line 1389
        tmp___0 = NFS_SERVER((struct inode  const  *)inode);
#line 1389
        printk("\001dNFS:       faulty NFS server %s: (committed = %d) != (stable = %d)\n",
               (tmp___0->nfs_client)->cl_hostname, (int )(hdr->res.verf)->committed,
               (int )hdr->args.stable);
        }
      } else {

      }
#line 1393
      complain = (unsigned long )jiffies + 75000UL;
    } else {

    }
  } else {

  }
  {
#line 1399
  tmp___2 = nfs_should_remove_suid((struct inode  const  *)inode);
  }
#line 1399
  if (tmp___2 != 0) {
    {
#line 1400
    nfs_mark_for_revalidate___2(inode);
    }
  } else {

  }
#line 1401
  return (0);
}
}
#line 1407 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_writeback_result(struct rpc_task *task , struct nfs_pgio_header *hdr ) 
{ 
  struct nfs_pgio_args *argp ;
  struct nfs_pgio_res *resp ;
  unsigned long complain ;

  {
#line 1410
  argp = & hdr->args;
#line 1411
  resp = & hdr->res;
#line 1413
  if (resp->count < argp->count) {
    {
#line 1417
    nfs_inc_stats___4((struct inode  const  *)hdr->inode, 23);
    }
#line 1420
    if (resp->count == 0U) {
#line 1421
      if ((long )(complain - (unsigned long )jiffies) < 0L) {
        {
#line 1422
        printk("\fNFS: Server wrote zero bytes, expected %u.\n", argp->count);
#line 1425
        complain = (unsigned long )jiffies + 75000UL;
        }
      } else {

      }
      {
#line 1427
      nfs_set_pgio_error(hdr, -5, (loff_t )argp->offset);
#line 1428
      task->tk_status = -5;
      }
#line 1429
      return;
    } else {

    }
#line 1432
    if ((int )(resp->verf)->committed != 0) {
#line 1434
      hdr->mds_offset = hdr->mds_offset + (__u64 )resp->count;
#line 1435
      argp->offset = argp->offset + (__u64 )resp->count;
#line 1436
      argp->pgbase = argp->pgbase + resp->count;
#line 1437
      argp->count = argp->count - resp->count;
    } else {
#line 1442
      argp->stable = 2;
    }
    {
#line 1444
    rpc_restart_call_prepare(task);
    }
  } else {

  }
#line 1446
  return;
}
}
#line 1450 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_commit_set_lock(struct nfs_inode *nfsi , int may_wait ) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 1454
  tmp = test_and_set_bit(7L, (unsigned long volatile   *)(& nfsi->flags));
  }
#line 1454
  if (tmp == 0) {
#line 1455
    return (1);
  } else {

  }
#line 1456
  if (may_wait == 0) {
#line 1457
    return (0);
  } else {

  }
  {
#line 1458
  ret = out_of_line_wait_on_bit_lock((void *)(& nfsi->flags), 7, & nfs_wait_bit_killable,
                                     130U);
  }
#line 1462
  return (ret < 0 ? ret : 1);
}
}
#line 1465 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_commit_clear_lock(struct nfs_inode *nfsi ) 
{ 


  {
  {
#line 1467
  clear_bit(7L, (unsigned long volatile   *)(& nfsi->flags));
#line 1468
  __asm__  volatile   ("": : : "memory");
#line 1469
  wake_up_bit((void *)(& nfsi->flags), 7);
  }
#line 1470
  return;
}
}
#line 1472 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_commitdata_release(struct nfs_commit_data *data ) 
{ 


  {
  {
#line 1474
  put_nfs_open_context(data->context);
#line 1475
  nfs_commit_free(data);
  }
#line 1476
  return;
}
}
#line 1477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_commitdata_release[23U]  = 
#line 1477
  {      'n',      'f',      's',      '_', 
        'c',      'o',      'm',      'm', 
        'i',      't',      'd',      'a', 
        't',      'a',      '_',      'r', 
        'e',      'l',      'e',      'a', 
        's',      'e',      '\000'};
#line 1477
struct kernel_symbol  const  __ksymtab_nfs_commitdata_release ;
#line 1477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_commitdata_release  =    {(unsigned long )(& nfs_commitdata_release), (char const   *)(& __kstrtab_nfs_commitdata_release)};
#line 1479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_initiate_commit(struct rpc_clnt *clnt , struct nfs_commit_data *data , struct rpc_call_ops  const  *call_ops ,
                        int how , int flags ) 
{ 
  struct rpc_task *task ;
  int priority ;
  int tmp ;
  struct rpc_message msg ;
  struct rpc_task_setup task_setup_data ;
  struct nfs_rpc_ops  const  *tmp___0 ;
  long tmp___1 ;
  struct nfs_server *tmp___2 ;
  long tmp___3 ;
  bool tmp___4 ;

  {
  {
#line 1484
  tmp = flush_task_priority(how);
#line 1484
  priority = tmp;
#line 1485
  msg.rpc_proc = 0;
#line 1485
  msg.rpc_argp = (void *)(& data->args);
#line 1485
  msg.rpc_resp = (void *)(& data->res);
#line 1485
  msg.rpc_cred = data->cred;
#line 1490
  task_setup_data.task = & data->task;
#line 1490
  task_setup_data.rpc_client = clnt;
#line 1490
  task_setup_data.rpc_message = (struct rpc_message  const  *)(& msg);
#line 1490
  task_setup_data.callback_ops = call_ops;
#line 1490
  task_setup_data.callback_data = (void *)data;
#line 1490
  task_setup_data.workqueue = nfsiod_workqueue;
#line 1490
  task_setup_data.flags = (unsigned short )((int )((short )flags) | 1);
#line 1490
  task_setup_data.priority = (signed char )priority;
#line 1501
  tmp___0 = NFS_PROTO((struct inode  const  *)data->inode);
#line 1501
  (*(tmp___0->commit_setup))(data, & msg);
#line 1503
  tmp___1 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 1503
  if (tmp___1 != 0L) {
    {
#line 1503
    printk("\001dNFS: %5u initiated commit call\n", (int )data->task.tk_pid);
    }
  } else {

  }
  {
#line 1505
  tmp___2 = NFS_SERVER((struct inode  const  *)data->inode);
#line 1505
  nfs4_state_protect(tmp___2->nfs_client, 6UL, & task_setup_data.rpc_client, & msg);
#line 1508
  task = rpc_run_task((struct rpc_task_setup  const  *)(& task_setup_data));
#line 1509
  tmp___4 = IS_ERR((void const   *)task);
  }
#line 1509
  if ((int )tmp___4) {
    {
#line 1510
    tmp___3 = PTR_ERR((void const   *)task);
    }
#line 1510
    return ((int )tmp___3);
  } else {

  }
#line 1511
  if (how & 1) {
    {
#line 1512
    rpc_wait_for_completion_task(task);
    }
  } else {

  }
  {
#line 1513
  rpc_put_task(task);
  }
#line 1514
  return (0);
}
}
#line 1516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_initiate_commit[20U]  = 
#line 1516
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'i',      't', 
        'i',      'a',      't',      'e', 
        '_',      'c',      'o',      'm', 
        'm',      'i',      't',      '\000'};
#line 1516
struct kernel_symbol  const  __ksymtab_nfs_initiate_commit ;
#line 1516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_initiate_commit  =    {(unsigned long )(& nfs_initiate_commit), (char const   *)(& __kstrtab_nfs_initiate_commit)};
#line 1521 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_init_commit(struct nfs_commit_data *data , struct list_head *head , struct pnfs_layout_segment *lseg ,
                     struct nfs_commit_info *cinfo ) 
{ 
  struct nfs_page *first ;
  struct nfs_page *tmp ;
  struct inode *inode ;

  {
  {
#line 1526
  tmp = nfs_list_entry(head->next);
#line 1526
  first = tmp;
#line 1527
  inode = ((first->wb_context)->dentry)->d_inode;
#line 1532
  list_splice_init(head, & data->pages);
#line 1534
  data->inode = inode;
#line 1535
  data->cred = (first->wb_context)->cred;
#line 1536
  data->lseg = lseg;
#line 1537
  data->mds_ops = & nfs_commit_ops;
#line 1538
  data->completion_ops = cinfo->completion_ops;
#line 1539
  data->dreq = cinfo->dreq;
#line 1541
  data->args.fh = NFS_FH((struct inode  const  *)data->inode);
#line 1543
  data->args.offset = 0ULL;
#line 1544
  data->args.count = 0U;
#line 1545
  data->context = get_nfs_open_context(first->wb_context);
#line 1546
  data->res.fattr = & data->fattr;
#line 1547
  data->res.verf = & data->verf;
#line 1548
  nfs_fattr_init(& data->fattr);
  }
#line 1549
  return;
}
}
#line 1550 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_init_commit[16U]  = 
#line 1550
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'i',      't', 
        '_',      'c',      'o',      'm', 
        'm',      'i',      't',      '\000'};
#line 1550
struct kernel_symbol  const  __ksymtab_nfs_init_commit ;
#line 1550 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_init_commit  =    {(unsigned long )(& nfs_init_commit), (char const   *)(& __kstrtab_nfs_init_commit)};
#line 1552 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_retry_commit(struct list_head *page_list , struct pnfs_layout_segment *lseg ,
                      struct nfs_commit_info *cinfo ) 
{ 
  struct nfs_page *req ;
  struct address_space *tmp ;
  int tmp___0 ;

  {
#line 1558
  goto ldv_57114;
  ldv_57113: 
  {
#line 1559
  req = nfs_list_entry(page_list->next);
#line 1560
  nfs_list_remove_request(req);
#line 1561
  nfs_mark_request_commit(req, lseg, cinfo);
  }
#line 1562
  if ((unsigned long )cinfo->dreq == (unsigned long )((struct nfs_direct_req *)0)) {
    {
#line 1563
    dec_zone_page_state(req->wb_page, 17);
#line 1564
    tmp = page_file_mapping(req->wb_page);
#line 1564
    dec_bdi_stat(tmp->backing_dev_info, 0);
    }
  } else {

  }
  {
#line 1567
  nfs_unlock_and_release_request(req);
  }
  ldv_57114: 
  {
#line 1558
  tmp___0 = list_empty((struct list_head  const  *)page_list);
  }
#line 1558
  if (tmp___0 == 0) {
#line 1560
    goto ldv_57113;
  } else {

  }

#line 1565
  return;
}
}
#line 1570 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_retry_commit[17U]  = 
#line 1570
  {      'n',      'f',      's',      '_', 
        'r',      'e',      't',      'r', 
        'y',      '_',      'c',      'o', 
        'm',      'm',      'i',      't', 
        '\000'};
#line 1570
struct kernel_symbol  const  __ksymtab_nfs_retry_commit ;
#line 1570 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_retry_commit  =    {(unsigned long )(& nfs_retry_commit), (char const   *)(& __kstrtab_nfs_retry_commit)};
#line 1576 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_commit_list(struct inode *inode , struct list_head *head , int how ,
                           struct nfs_commit_info *cinfo ) 
{ 
  struct nfs_commit_data *data ;
  struct rpc_clnt *tmp ;
  int tmp___0 ;
  struct nfs_inode *tmp___1 ;

  {
  {
#line 1581
  data = nfs_commitdata_alloc();
  }
#line 1583
  if ((unsigned long )data == (unsigned long )((struct nfs_commit_data *)0)) {
#line 1584
    goto out_bad;
  } else {

  }
  {
#line 1587
  nfs_init_commit(data, head, (struct pnfs_layout_segment *)0, cinfo);
#line 1588
  atomic_inc(& (cinfo->mds)->rpcs_out);
#line 1589
  tmp = NFS_CLIENT((struct inode  const  *)inode);
#line 1589
  tmp___0 = nfs_initiate_commit(tmp, data, data->mds_ops, how, 0);
  }
#line 1589
  return (tmp___0);
  out_bad: 
  {
#line 1592
  nfs_retry_commit(head, (struct pnfs_layout_segment *)0, cinfo);
#line 1593
  tmp___1 = NFS_I((struct inode  const  *)inode);
#line 1593
  (*((cinfo->completion_ops)->error_cleanup))(tmp___1);
  }
#line 1594
  return (-12);
}
}
#line 1600 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_commit_done(struct rpc_task *task , void *calldata ) 
{ 
  struct nfs_commit_data *data ;
  long tmp ;
  struct nfs_rpc_ops  const  *tmp___0 ;

  {
  {
#line 1602
  data = (struct nfs_commit_data *)calldata;
#line 1604
  tmp = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 1604
  if (tmp != 0L) {
    {
#line 1604
    printk("\001dNFS: %5u nfs_commit_done (status %d)\n", (int )task->tk_pid, task->tk_status);
    }
  } else {

  }
  {
#line 1608
  tmp___0 = NFS_PROTO((struct inode  const  *)data->inode);
#line 1608
  (*(tmp___0->commit_done))(task, data);
  }
#line 1609
  return;
}
}
#line 1611 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_commit_release_pages(struct nfs_commit_data *data ) 
{ 
  struct nfs_page *req ;
  int status ;
  struct nfs_commit_info cinfo ;
  loff_t tmp ;
  __u64 tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  struct nfs_inode *tmp___7 ;
  int tmp___8 ;

  {
#line 1614
  status = data->task.tk_status;
#line 1617
  goto ldv_57146;
  ldv_57145: 
  {
#line 1618
  req = nfs_list_entry(data->pages.next);
#line 1619
  nfs_list_remove_request(req);
#line 1620
  nfs_clear_page_commit(req->wb_page);
#line 1622
  tmp___1 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 1622
  if (tmp___1 != 0L) {
    {
#line 1622
    tmp = req_offset(req);
#line 1622
    tmp___0 = NFS_FILEID((struct inode  const  *)((req->wb_context)->dentry)->d_inode);
#line 1622
    printk("\001dNFS:       commit (%s/%llu %d@%lld)", (char *)(& (((req->wb_context)->dentry)->d_sb)->s_id),
           tmp___0, req->wb_bytes, tmp);
    }
  } else {

  }
#line 1627
  if (status < 0) {
    {
#line 1628
    nfs_context_set_write_error(req->wb_context, status);
#line 1629
    nfs_inode_remove_request(req);
#line 1630
    tmp___2 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
    }
#line 1630
    if (tmp___2 != 0L) {
      {
#line 1630
      printk("\001d, error = %d\n", status);
      }
    } else {

    }
#line 1631
    goto next;
  } else {

  }
  {
#line 1636
  tmp___4 = memcmp((void const   *)(& req->wb_verf), (void const   *)(& data->verf.verifier),
                   8UL);
  }
#line 1636
  if (tmp___4 == 0) {
    {
#line 1638
    nfs_inode_remove_request(req);
#line 1639
    tmp___3 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
    }
#line 1639
    if (tmp___3 != 0L) {
      {
#line 1639
      printk("\001d OK\n");
      }
    } else {

    }
#line 1640
    goto next;
  } else {

  }
  {
#line 1643
  tmp___5 = __builtin_expect((nfs_debug & 8U) != 0U, 0L);
  }
#line 1643
  if (tmp___5 != 0L) {
    {
#line 1643
    printk("\001d mismatch\n");
    }
  } else {

  }
  {
#line 1644
  nfs_mark_request_dirty(req);
#line 1645
  set_bit(1L, (unsigned long volatile   *)(& (req->wb_context)->flags));
  }
  next: 
  {
#line 1647
  nfs_unlock_and_release_request(req);
  }
  ldv_57146: 
  {
#line 1617
  tmp___6 = list_empty((struct list_head  const  *)(& data->pages));
  }
#line 1617
  if (tmp___6 == 0) {
#line 1619
    goto ldv_57145;
  } else {

  }
  {
#line 1649
  nfs_init_cinfo(& cinfo, data->inode, data->dreq);
#line 1650
  tmp___8 = atomic_dec_and_test(& (cinfo.mds)->rpcs_out);
  }
#line 1650
  if (tmp___8 != 0) {
    {
#line 1651
    tmp___7 = NFS_I((struct inode  const  *)data->inode);
#line 1651
    nfs_commit_clear_lock(tmp___7);
    }
  } else {

  }
#line 1652
  return;
}
}
#line 1654 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static void nfs_commit_release(void *calldata ) 
{ 
  struct nfs_commit_data *data ;

  {
  {
#line 1656
  data = (struct nfs_commit_data *)calldata;
#line 1658
  (*((data->completion_ops)->completion))(data);
#line 1659
  nfs_commitdata_release((struct nfs_commit_data *)calldata);
  }
#line 1660
  return;
}
}
#line 1662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct rpc_call_ops  const  nfs_commit_ops  =    {& nfs_commit_prepare, & nfs_commit_done, 0, & nfs_commit_release};
#line 1668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_commit_completion_ops  const  nfs_commit_completion_ops  =    {& nfs_commit_clear_lock, & nfs_commit_release_pages};
#line 1673 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_generic_commit_list(struct inode *inode , struct list_head *head , int how ,
                            struct nfs_commit_info *cinfo ) 
{ 
  int status ;

  {
  {
#line 1678
  status = pnfs_commit_list(inode, head, how, cinfo);
  }
#line 1679
  if (status == 1) {
    {
#line 1680
    status = nfs_commit_list(inode, head, how, cinfo);
    }
  } else {

  }
#line 1681
  return (status);
}
}
#line 1684 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_commit_inode(struct inode *inode , int how ) 
{ 
  struct list_head head ;
  struct nfs_commit_info cinfo ;
  int may_wait ;
  int res ;
  struct nfs_inode *tmp ;
  int error ;
  struct nfs_inode *tmp___0 ;
  struct nfs_inode *tmp___1 ;

  {
  {
#line 1686
  head.next = & head;
#line 1686
  head.prev = & head;
#line 1688
  may_wait = how & 1;
#line 1691
  tmp = NFS_I((struct inode  const  *)inode);
#line 1691
  res = nfs_commit_set_lock(tmp, may_wait);
  }
#line 1692
  if (res <= 0) {
#line 1693
    goto out_mark_dirty;
  } else {

  }
  {
#line 1694
  nfs_init_cinfo_from_inode(& cinfo, inode);
#line 1695
  res = nfs_scan_commit(inode, & head, & cinfo);
  }
#line 1696
  if (res != 0) {
    {
#line 1699
    error = nfs_generic_commit_list(inode, & head, how, & cinfo);
    }
#line 1700
    if (error < 0) {
#line 1701
      return (error);
    } else {

    }
#line 1702
    if (may_wait == 0) {
#line 1703
      goto out_mark_dirty;
    } else {

    }
    {
#line 1704
    tmp___0 = NFS_I((struct inode  const  *)inode);
#line 1704
    error = wait_on_bit((void *)(& tmp___0->flags), 7, & nfs_wait_bit_killable, 130U);
    }
#line 1708
    if (error < 0) {
#line 1709
      return (error);
    } else {

    }
  } else {
    {
#line 1711
    tmp___1 = NFS_I((struct inode  const  *)inode);
#line 1711
    nfs_commit_clear_lock(tmp___1);
    }
  }
#line 1712
  return (res);
  out_mark_dirty: 
  {
#line 1719
  __mark_inode_dirty(inode, 2);
  }
#line 1720
  return (res);
}
}
#line 1723 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static int nfs_commit_unstable_pages(struct inode *inode , struct writeback_control *wbc ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  int flags ;
  int ret ;

  {
  {
#line 1725
  tmp = NFS_I((struct inode  const  *)inode);
#line 1725
  nfsi = tmp;
#line 1726
  flags = 1;
#line 1727
  ret = 0;
  }
#line 1730
  if (nfsi->commit_info.ncommit == 0UL) {
#line 1731
    return (ret);
  } else {

  }
#line 1733
  if ((unsigned int )wbc->sync_mode == 0U) {
#line 1737
    if (nfsi->commit_info.ncommit <= nfsi->npages >> 1) {
#line 1738
      goto out_mark_dirty;
    } else {

    }
#line 1741
    flags = 0;
  } else {

  }
  {
#line 1744
  ret = nfs_commit_inode(inode, flags);
  }
#line 1745
  if (ret >= 0) {
#line 1746
    if ((unsigned int )wbc->sync_mode == 0U) {
#line 1747
      if ((long )ret < wbc->nr_to_write) {
#line 1748
        wbc->nr_to_write = wbc->nr_to_write - (long )ret;
      } else {
#line 1750
        wbc->nr_to_write = 0L;
      }
    } else {

    }
#line 1752
    return (0);
  } else {

  }
  out_mark_dirty: 
  {
#line 1755
  __mark_inode_dirty(inode, 2);
  }
#line 1756
  return (ret);
}
}
#line 1765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_write_inode(struct inode *inode , struct writeback_control *wbc ) 
{ 
  int tmp ;

  {
  {
#line 1767
  tmp = nfs_commit_unstable_pages(inode, wbc);
  }
#line 1767
  return (tmp);
}
}
#line 1769 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_write_inode[16U]  = 
#line 1769
  {      'n',      'f',      's',      '_', 
        'w',      'r',      'i',      't', 
        'e',      '_',      'i',      'n', 
        'o',      'd',      'e',      '\000'};
#line 1769
struct kernel_symbol  const  __ksymtab_nfs_write_inode ;
#line 1769 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_write_inode  =    {(unsigned long )(& nfs_write_inode), (char const   *)(& __kstrtab_nfs_write_inode)};
#line 1774 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_wb_all(struct inode *inode ) 
{ 
  struct writeback_control wbc ;
  int ret ;

  {
  {
#line 1776
  wbc.nr_to_write = 9223372036854775807L;
#line 1776
  wbc.pages_skipped = 0L;
#line 1776
  wbc.range_start = 0LL;
#line 1776
  wbc.range_end = 9223372036854775807LL;
#line 1776
  wbc.sync_mode = 1;
#line 1776
  wbc.for_kupdate = 0U;
#line 1776
  wbc.for_background = 0U;
#line 1776
  wbc.tagged_writepages = 0U;
#line 1776
  wbc.for_reclaim = 0U;
#line 1776
  wbc.range_cyclic = 0U;
#line 1776
  wbc.for_sync = 0U;
#line 1784
  trace_nfs_writeback_inode_enter((struct inode  const  *)inode);
#line 1786
  ret = sync_inode(inode, & wbc);
#line 1788
  trace_nfs_writeback_inode_exit((struct inode  const  *)inode, ret);
  }
#line 1789
  return (ret);
}
}
#line 1791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static char const   __kstrtab_nfs_wb_all[11U]  = 
#line 1791
  {      'n',      'f',      's',      '_', 
        'w',      'b',      '_',      'a', 
        'l',      'l',      '\000'};
#line 1791
struct kernel_symbol  const  __ksymtab_nfs_wb_all ;
#line 1791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
struct kernel_symbol  const  __ksymtab_nfs_wb_all  =    {(unsigned long )(& nfs_wb_all), (char const   *)(& __kstrtab_nfs_wb_all)};
#line 1793 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_wb_page_cancel(struct inode *inode , struct page *page ) 
{ 
  struct nfs_page *req ;
  int ret ;
  long tmp ;
  bool tmp___0 ;

  {
  {
#line 1796
  ret = 0;
#line 1798
  wait_on_page_writeback(page);
#line 1802
  req = nfs_lock_and_join_requests(page, 0);
#line 1804
  tmp___0 = IS_ERR((void const   *)req);
  }
#line 1804
  if ((int )tmp___0) {
    {
#line 1805
    tmp = PTR_ERR((void const   *)req);
#line 1805
    ret = (int )tmp;
    }
  } else
#line 1806
  if ((unsigned long )req != (unsigned long )((struct nfs_page *)0)) {
    {
#line 1811
    nfs_inode_remove_request(req);
#line 1816
    cancel_dirty_page(page, 4096U);
#line 1817
    nfs_unlock_and_release_request(req);
    }
  } else {

  }
#line 1820
  return (ret);
}
}
#line 1826 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_wb_page(struct inode *inode , struct page *page ) 
{ 
  loff_t range_start ;
  loff_t tmp ;
  loff_t range_end ;
  struct writeback_control wbc ;
  int ret ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1828
  tmp = page_file_offset(page);
#line 1828
  range_start = tmp;
#line 1829
  range_end = range_start + 4095LL;
#line 1830
  wbc.nr_to_write = 0L;
#line 1830
  wbc.pages_skipped = 0L;
#line 1830
  wbc.range_start = range_start;
#line 1830
  wbc.range_end = range_end;
#line 1830
  wbc.sync_mode = 1;
#line 1830
  wbc.for_kupdate = 0U;
#line 1830
  wbc.for_background = 0U;
#line 1830
  wbc.tagged_writepages = 0U;
#line 1830
  wbc.for_reclaim = 0U;
#line 1830
  wbc.range_cyclic = 0U;
#line 1830
  wbc.for_sync = 0U;
#line 1838
  trace_nfs_writeback_page_enter((struct inode  const  *)inode);
  }
  ldv_57220: 
  {
#line 1841
  wait_on_page_writeback(page);
#line 1842
  tmp___0 = clear_page_dirty_for_io(page);
  }
#line 1842
  if (tmp___0 != 0) {
    {
#line 1843
    ret = nfs_writepage_locked(page, & wbc);
    }
#line 1844
    if (ret < 0) {
#line 1845
      goto out_error;
    } else {

    }
#line 1846
    goto ldv_57218;
  } else {

  }
  {
#line 1848
  ret = 0;
#line 1849
  tmp___1 = PagePrivate((struct page  const  *)page);
  }
#line 1849
  if (tmp___1 == 0) {
#line 1850
    goto ldv_57219;
  } else {

  }
  {
#line 1851
  ret = nfs_commit_inode(inode, 1);
  }
#line 1852
  if (ret < 0) {
#line 1853
    goto out_error;
  } else {

  }
  ldv_57218: ;
#line 1854
  goto ldv_57220;
  ldv_57219: ;
  out_error: 
  {
#line 1856
  trace_nfs_writeback_page_exit((struct inode  const  *)inode, ret);
  }
#line 1857
  return (ret);
}
}
#line 1861 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_migrate_page(struct address_space *mapping , struct page *newpage , struct page *page ,
                     enum migrate_mode mode ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1872
  tmp = PagePrivate((struct page  const  *)page);
  }
#line 1872
  if (tmp != 0) {
#line 1873
    return (-16);
  } else {

  }
  {
#line 1875
  tmp___0 = nfs_fscache_release_page(page, 208U);
  }
#line 1875
  if (tmp___0 == 0) {
#line 1876
    return (-16);
  } else {

  }
  {
#line 1878
  tmp___1 = migrate_page(mapping, newpage, page, mode);
  }
#line 1878
  return (tmp___1);
}
}
#line 1882 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
int nfs_init_writepagecache(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 1884
  nfs_wdata_cachep = kmem_cache_create("nfs_write_data", 968UL, 0UL, 8192UL, (void (*)(void * ))0);
  }
#line 1888
  if ((unsigned long )nfs_wdata_cachep == (unsigned long )((struct kmem_cache *)0)) {
#line 1889
    return (-12);
  } else {

  }
  {
#line 1891
  nfs_wdata_mempool = mempool_create_slab_pool(32, nfs_wdata_cachep);
  }
#line 1893
  if ((unsigned long )nfs_wdata_mempool == (unsigned long )((mempool_t *)0)) {
#line 1894
    goto out_destroy_write_cache;
  } else {

  }
  {
#line 1896
  nfs_cdata_cachep = kmem_cache_create("nfs_commit_data", 688UL, 0UL, 8192UL, (void (*)(void * ))0);
  }
#line 1900
  if ((unsigned long )nfs_cdata_cachep == (unsigned long )((struct kmem_cache *)0)) {
#line 1901
    goto out_destroy_write_mempool;
  } else {

  }
  {
#line 1903
  nfs_commit_mempool = mempool_create_slab_pool(4, nfs_cdata_cachep);
  }
#line 1905
  if ((unsigned long )nfs_commit_mempool == (unsigned long )((mempool_t *)0)) {
#line 1906
    goto out_destroy_commit_cache;
  } else {

  }
  {
#line 1924
  tmp = int_sqrt(totalram_pages);
#line 1924
  nfs_congestion_kb = (int )(tmp * 16UL << 2);
  }
#line 1925
  if (nfs_congestion_kb > 262144) {
#line 1926
    nfs_congestion_kb = 262144;
  } else {

  }
#line 1928
  return (0);
  out_destroy_commit_cache: 
  {
#line 1931
  kmem_cache_destroy(nfs_cdata_cachep);
  }
  out_destroy_write_mempool: 
  {
#line 1933
  mempool_destroy(nfs_wdata_mempool);
  }
  out_destroy_write_cache: 
  {
#line 1935
  kmem_cache_destroy(nfs_wdata_cachep);
  }
#line 1936
  return (-12);
}
}
#line 1939 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
void nfs_destroy_writepagecache(void) 
{ 


  {
  {
#line 1941
  mempool_destroy(nfs_commit_mempool);
#line 1942
  kmem_cache_destroy(nfs_cdata_cachep);
#line 1943
  mempool_destroy(nfs_wdata_mempool);
#line 1944
  kmem_cache_destroy(nfs_wdata_cachep);
  }
#line 1945
  return;
}
}
#line 1947 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/write.c"
static struct nfs_rw_ops  const  nfs_rw_write_ops  =    {2U, & nfs_writehdr_alloc, & nfs_writehdr_free, & nfs_writeback_release_common,
    & nfs_writeback_done, & nfs_writeback_result, & nfs_initiate_write};
#line 892 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_write.c.aux"
__inline static void ldv_spin_lock_74(spinlock_t *lock ) 
{ 


  {
  {
#line 895
  ldv_spin_lock_cl_lock_of_nfs_client();
#line 897
  spin_lock(lock);
  }
#line 898
  return;
}
}
#line 901 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_write.c.aux"
__inline static void ldv_spin_unlock_75(spinlock_t *lock ) 
{ 


  {
  {
#line 904
  ldv_spin_unlock_cl_lock_of_nfs_client();
#line 906
  spin_unlock(lock);
  }
#line 907
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_return_address(unsigned int  ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 32
__inline static long PTR_ERR(void const   *ptr ) ;
#line 689 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
__inline static void rep_nop(void) 
{ 


  {
#line 691
  __asm__  volatile   ("rep; nop": : : "memory");
#line 692
  return;
}
}
#line 694 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/arch/x86/include/asm/processor.h"
__inline static void cpu_relax(void) 
{ 


  {
  {
#line 696
  rep_nop();
  }
#line 697
  return;
}
}
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_82(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 429
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 433
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 437
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 441
__inline static void ldv_spin_unlock_83___0(spinlock_t *lock ) ;
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
__inline static void seqcount_lockdep_reader_access(seqcount_t const   *s ) 
{ 
  seqcount_t *l ;
  unsigned long flags ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 75
  l = (seqcount_t *)s;
#line 78
  flags = arch_local_irq_save();
#line 78
  trace_hardirqs_off();
#line 79
  tmp = __builtin_return_address(0U);
#line 79
  lock_acquire(& l->dep_map, 0U, 0, 2, 1, (struct lockdep_map *)0, (unsigned long )tmp);
#line 80
  tmp___0 = __builtin_return_address(0U);
#line 80
  lock_release(& l->dep_map, 1, (unsigned long )tmp___0);
#line 81
  tmp___1 = arch_irqs_disabled_flags(flags);
  }
#line 81
  if (tmp___1 != 0) {
    {
#line 81
    arch_local_irq_restore(flags);
#line 81
    trace_hardirqs_off();
    }
  } else {
    {
#line 81
    trace_hardirqs_on();
#line 81
    arch_local_irq_restore(flags);
    }
  }
#line 83
  return;
}
}
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
__inline static unsigned int __read_seqcount_begin(seqcount_t const   *s ) 
{ 
  unsigned int ret ;
  long tmp ;

  {
  repeat: 
  {
#line 111
  ret = *((unsigned int const volatile   *)(& s->sequence));
#line 112
  tmp = __builtin_expect((long )((int )ret) & 1L, 0L);
  }
#line 112
  if (tmp != 0L) {
    {
#line 113
    cpu_relax();
    }
#line 114
    goto repeat;
  } else {

  }
#line 116
  return (ret);
}
}
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
__inline static unsigned int raw_read_seqcount_begin(seqcount_t const   *s ) 
{ 
  unsigned int ret ;
  unsigned int tmp ;

  {
  {
#line 130
  tmp = __read_seqcount_begin(s);
#line 130
  ret = tmp;
#line 131
  __asm__  volatile   ("": : : "memory");
  }
#line 132
  return (ret);
}
}
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
__inline static unsigned int read_seqcount_begin(seqcount_t const   *s ) 
{ 
  unsigned int tmp ;

  {
  {
#line 146
  seqcount_lockdep_reader_access(s);
#line 147
  tmp = raw_read_seqcount_begin(s);
  }
#line 147
  return (tmp);
}
}
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
__inline static int __read_seqcount_retry(seqcount_t const   *s , unsigned int start ) 
{ 
  long tmp ;

  {
  {
#line 189
  tmp = __builtin_expect((unsigned int )s->sequence != start, 0L);
  }
#line 189
  return ((int )tmp);
}
}
#line 202 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
__inline static int read_seqcount_retry(seqcount_t const   *s , unsigned int start ) 
{ 
  int tmp ;

  {
  {
#line 204
  __asm__  volatile   ("": : : "memory");
#line 205
  tmp = __read_seqcount_retry(s, start);
  }
#line 205
  return (tmp);
}
}
#line 283 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
__inline static unsigned int read_seqbegin(seqlock_t const   *sl ) 
{ 
  unsigned int tmp ;

  {
  {
#line 285
  tmp = read_seqcount_begin(& sl->seqcount);
  }
#line 285
  return (tmp);
}
}
#line 288 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/seqlock.h"
__inline static unsigned int read_seqretry(seqlock_t const   *sl , unsigned int start ) 
{ 
  int tmp ;

  {
  {
#line 290
  tmp = read_seqcount_retry(& sl->seqcount, start);
  }
#line 290
  return ((unsigned int )tmp);
}
}
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/timer.h"
extern struct tvec_base boot_tvec_bases ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
extern void delayed_work_timer_fn(unsigned long  ) ;
#line 433
extern bool queue_delayed_work_on(int  , struct workqueue_struct * , struct delayed_work * ,
                                  unsigned long  ) ;
#line 450
extern bool cancel_delayed_work(struct delayed_work * ) ;
#line 485 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
__inline static bool queue_delayed_work(struct workqueue_struct *wq , struct delayed_work *dwork ,
                                        unsigned long delay ) 
{ 
  bool tmp ;

  {
  {
#line 489
  tmp = queue_delayed_work_on(8192, wq, dwork, delay);
  }
#line 489
  return (tmp);
}
}
#line 558 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/workqueue.h"
__inline static bool schedule_delayed_work(struct delayed_work *dwork , unsigned long delay ) 
{ 
  bool tmp ;

  {
  {
#line 561
  tmp = queue_delayed_work(system_wq, dwork, delay);
  }
#line 561
  return (tmp);
}
}
#line 226 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/dcache.h"
extern seqlock_t rename_lock ;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/mount.h"
extern struct vfsmount *mntget(struct vfsmount * ) ;
#line 85
extern struct vfsmount *vfs_kern_mount(struct file_system_type * , int  , char const   * ,
                                       void * ) ;
#line 89
extern void mnt_set_expiry(struct vfsmount * , struct list_head * ) ;
#line 90
extern void mark_mounts_for_expiry(struct list_head * ) ;
#line 503 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
int nfs_mountpoint_expiry_timeout ;
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
struct vfsmount *nfs_submount(struct nfs_server *server , struct dentry *dentry ,
                              struct nfs_fh *fh , struct nfs_fattr *fattr ) ;
#line 389
struct vfsmount *nfs_do_submount(struct dentry *dentry , struct nfs_fh *fh , struct nfs_fattr *fattr ,
                                 rpc_authflavor_t authflavor ) ;
#line 499 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
__inline static char *nfs_devname(struct dentry *dentry , char *buffer , ssize_t buflen ) 
{ 
  char *dummy ;
  char *tmp ;

  {
  {
#line 503
  tmp = nfs_path(& dummy, dentry, buffer, buflen, 1U);
  }
#line 503
  return (tmp);
}
}
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static void nfs_expire_automounts(struct work_struct *work ) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static struct list_head nfs_automount_list  =    {& nfs_automount_list, & nfs_automount_list};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static struct delayed_work nfs_automount_task  =    {{{137438953424L}, {& nfs_automount_task.work.entry, & nfs_automount_task.work.entry},
     & nfs_expire_automounts, {(struct lock_class_key *)(& nfs_automount_task.work),
                               {0, 0}, "(nfs_automount_task).work", 0, 0UL}}, {{0,
                                                                                (struct list_head *)1953723489},
                                                                               0UL,
                                                                               (struct tvec_base *)((unsigned long )(& boot_tvec_bases) + 2UL),
                                                                               & delayed_work_timer_fn,
                                                                               (unsigned long )(& nfs_automount_task),
                                                                               -1,
                                                                               0,
                                                                               0,
                                                                               {(char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0,
                                                                                (char)0},
                                                                               {(struct lock_class_key *)"fs/nfs/namespace.c:27",
                                                                                {0,
                                                                                 0},
                                                                                "fs/nfs/namespace.c:27",
                                                                                0,
                                                                                0UL}},
    0, 0};
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
int nfs_mountpoint_expiry_timeout  =    125000;
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
char *nfs_path(char **p , struct dentry *dentry , char *buffer , ssize_t buflen ,
               unsigned int flags ) 
{ 
  char *end ;
  int namelen ;
  unsigned int seq ;
  char const   *base ;
  unsigned int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  size_t tmp___1 ;
  unsigned int tmp___2 ;
  void *tmp___3 ;

  {
  rename_retry: 
  {
#line 59
  end = buffer + (unsigned long )buflen;
#line 60
  end = end - 1;
#line 60
  *end = 0;
#line 61
  buflen = buflen - 1L;
#line 63
  seq = read_seqbegin((seqlock_t const   *)(& rename_lock));
#line 64
  rcu_read_lock___0();
  }
  ldv_53720: 
  {
#line 66
  ldv_spin_lock_82(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
  }
#line 67
  if ((unsigned long )dentry == (unsigned long )dentry->d_parent) {
#line 68
    goto ldv_53718;
  } else {

  }
#line 69
  namelen = (int )dentry->d_name.__annonCompField25.__annonCompField24.len;
#line 70
  buflen = buflen - (ssize_t )(namelen + 1);
#line 71
  if (buflen < 0L) {
#line 72
    goto Elong_unlock;
  } else {

  }
  {
#line 73
  end = end + - ((unsigned long )namelen);
#line 74
  memcpy((void *)end, (void const   *)dentry->d_name.name, (size_t )namelen);
#line 75
  end = end - 1;
#line 75
  *end = 47;
#line 76
  ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 77
  dentry = dentry->d_parent;
  }
#line 78
  goto ldv_53720;
  ldv_53718: 
  {
#line 79
  tmp = read_seqretry((seqlock_t const   *)(& rename_lock), seq);
  }
#line 79
  if (tmp != 0U) {
    {
#line 80
    ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 81
    rcu_read_unlock___0();
    }
#line 82
    goto rename_retry;
  } else {

  }
#line 84
  if ((int )flags & 1 && (int )((signed char )*end) != 47) {
#line 85
    buflen = buflen - 1L;
#line 85
    if (buflen < 0L) {
      {
#line 86
      ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 87
      rcu_read_unlock___0();
      }
#line 88
      goto Elong;
    } else {

    }
#line 90
    end = end - 1;
#line 90
    *end = 47;
  } else {

  }
#line 92
  *p = end;
#line 93
  base = (char const   *)dentry->d_fsdata;
#line 94
  if ((unsigned long )base == (unsigned long )((char const   *)0)) {
    {
#line 95
    ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 96
    rcu_read_unlock___0();
#line 97
    __ret_warn_on = 1;
#line 97
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 97
    if (tmp___0 != 0L) {
      {
#line 97
      warn_slowpath_null("fs/nfs/namespace.c", 97);
      }
    } else {

    }
    {
#line 97
    __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 98
    return (end);
  } else {

  }
  {
#line 100
  tmp___1 = strlen(base);
#line 100
  namelen = (int )tmp___1;
  }
#line 101
  if ((int )flags & 1) {
#line 103
    goto ldv_53725;
    ldv_53724: 
#line 104
    namelen = namelen - 1;
    ldv_53725: ;
#line 103
    if (namelen > 0 && (int )((signed char )*(base + ((unsigned long )namelen + 0xffffffffffffffffUL))) == 47) {
#line 105
      goto ldv_53724;
    } else {

    }

  } else {

  }
#line 106
  buflen = buflen - (ssize_t )namelen;
#line 107
  if (buflen < 0L) {
    {
#line 108
    ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 109
    rcu_read_unlock___0();
    }
#line 110
    goto Elong;
  } else {

  }
  {
#line 112
  end = end + - ((unsigned long )namelen);
#line 113
  memcpy((void *)end, (void const   *)base, (size_t )namelen);
#line 114
  ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 115
  rcu_read_unlock___0();
  }
#line 116
  return (end);
  Elong_unlock: 
  {
#line 118
  ldv_spin_unlock_83___0(& dentry->d_lockref.__annonCompField23.__annonCompField22.lock);
#line 119
  rcu_read_unlock___0();
#line 120
  tmp___2 = read_seqretry((seqlock_t const   *)(& rename_lock), seq);
  }
#line 120
  if (tmp___2 != 0U) {
#line 121
    goto rename_retry;
  } else {

  }
  Elong: 
  {
#line 123
  tmp___3 = ERR_PTR(-36L);
  }
#line 123
  return ((char *)tmp___3);
}
}
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static char const   __kstrtab_nfs_path[9U]  = 
#line 125
  {      'n',      'f',      's',      '_', 
        'p',      'a',      't',      'h', 
        '\000'};
#line 125
struct kernel_symbol  const  __ksymtab_nfs_path ;
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
struct kernel_symbol  const  __ksymtab_nfs_path  =    {(unsigned long )(& nfs_path), (char const   *)(& __kstrtab_nfs_path)};
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
struct vfsmount *nfs_d_automount(struct path *path ) 
{ 
  struct vfsmount *mnt ;
  struct nfs_server *server ;
  struct nfs_server *tmp ;
  struct nfs_fh *fh ;
  struct nfs_fattr *fattr ;
  long tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  long tmp___3 ;
  bool tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  bool tmp___9 ;

  {
  {
#line 142
  tmp = NFS_SERVER((struct inode  const  *)(path->dentry)->d_inode);
#line 142
  server = tmp;
#line 143
  fh = (struct nfs_fh *)0;
#line 144
  fattr = (struct nfs_fattr *)0;
#line 146
  tmp___0 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 146
  if (tmp___0 != 0L) {
    {
#line 146
    printk("\001d--> nfs_d_automount()\n");
    }
  } else {

  }
  {
#line 148
  tmp___1 = ERR_PTR(-116L);
#line 148
  mnt = (struct vfsmount *)tmp___1;
  }
#line 149
  if ((unsigned long )path->dentry == (unsigned long )(path->dentry)->d_parent) {
#line 150
    goto out_nofree;
  } else {

  }
  {
#line 152
  tmp___2 = ERR_PTR(-12L);
#line 152
  mnt = (struct vfsmount *)tmp___2;
#line 153
  fh = nfs_alloc_fhandle();
#line 154
  fattr = nfs_alloc_fattr();
  }
#line 155
  if ((unsigned long )fh == (unsigned long )((struct nfs_fh *)0) || (unsigned long )fattr == (unsigned long )((struct nfs_fattr *)0)) {
#line 156
    goto out;
  } else {

  }
  {
#line 158
  tmp___3 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 158
  if (tmp___3 != 0L) {
    {
#line 158
    printk("\001d%s: enter\n", "nfs_d_automount");
    }
  } else {

  }
  {
#line 160
  mnt = (*(((server->nfs_client)->rpc_ops)->submount))(server, path->dentry, fh, fattr);
#line 161
  tmp___4 = IS_ERR((void const   *)mnt);
  }
#line 161
  if ((int )tmp___4) {
#line 162
    goto out;
  } else {

  }
  {
#line 164
  tmp___5 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 164
  if (tmp___5 != 0L) {
    {
#line 164
    printk("\001d%s: done, success\n", "nfs_d_automount");
    }
  } else {

  }
  {
#line 165
  mntget(mnt);
#line 166
  mnt_set_expiry(mnt, & nfs_automount_list);
#line 167
  schedule_delayed_work(& nfs_automount_task, (unsigned long )nfs_mountpoint_expiry_timeout);
  }
  out: 
  {
#line 170
  nfs_free_fattr((struct nfs_fattr  const  *)fattr);
#line 171
  nfs_free_fhandle((struct nfs_fh  const  *)fh);
  }
  out_nofree: 
  {
#line 173
  tmp___9 = IS_ERR((void const   *)mnt);
  }
#line 173
  if ((int )tmp___9) {
    {
#line 174
    tmp___7 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
    }
#line 174
    if (tmp___7 != 0L) {
      {
#line 174
      tmp___6 = PTR_ERR((void const   *)mnt);
#line 174
      printk("\001d<-- %s(): error %ld\n", "nfs_d_automount", tmp___6);
      }
    } else {

    }
  } else {
    {
#line 176
    tmp___8 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
    }
#line 176
    if (tmp___8 != 0L) {
      {
#line 176
      printk("\001d<-- %s() = %p\n", "nfs_d_automount", mnt);
      }
    } else {

    }
  }
#line 177
  return (mnt);
}
}
#line 181 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static int nfs_namespace_getattr(struct vfsmount *mnt , struct dentry *dentry , struct kstat *stat ) 
{ 
  int tmp ;
  struct nfs_fh *tmp___0 ;

  {
  {
#line 183
  tmp___0 = NFS_FH((struct inode  const  *)dentry->d_inode);
  }
#line 183
  if ((unsigned int )tmp___0->size != 0U) {
    {
#line 184
    tmp = nfs_getattr(mnt, dentry, stat);
    }
#line 184
    return (tmp);
  } else {

  }
  {
#line 185
  generic_fillattr(dentry->d_inode, stat);
  }
#line 186
  return (0);
}
}
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static int nfs_namespace_setattr(struct dentry *dentry , struct iattr *attr ) 
{ 
  int tmp ;
  struct nfs_fh *tmp___0 ;

  {
  {
#line 192
  tmp___0 = NFS_FH((struct inode  const  *)dentry->d_inode);
  }
#line 192
  if ((unsigned int )tmp___0->size != 0U) {
    {
#line 193
    tmp = nfs_setattr(dentry, attr);
    }
#line 193
    return (tmp);
  } else {

  }
#line 194
  return (-13);
}
}
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
struct inode_operations  const  nfs_mountpoint_inode_operations  = 
#line 197
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, & nfs_setattr, & nfs_getattr, 0,
    0, 0, 0, 0, 0, 0, 0, 0};
#line 202 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
struct inode_operations  const  nfs_referral_inode_operations  = 
#line 202
     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, & nfs_namespace_setattr, & nfs_namespace_getattr,
    0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static void nfs_expire_automounts(struct work_struct *work ) 
{ 
  struct list_head *list ;
  int tmp ;

  {
  {
#line 209
  list = & nfs_automount_list;
#line 211
  mark_mounts_for_expiry(list);
#line 212
  tmp = list_empty((struct list_head  const  *)list);
  }
#line 212
  if (tmp == 0) {
    {
#line 213
    schedule_delayed_work(& nfs_automount_task, (unsigned long )nfs_mountpoint_expiry_timeout);
    }
  } else {

  }
#line 214
  return;
}
}
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
void nfs_release_automount_timer(void) 
{ 
  int tmp ;

  {
  {
#line 218
  tmp = list_empty((struct list_head  const  *)(& nfs_automount_list));
  }
#line 218
  if (tmp != 0) {
    {
#line 219
    cancel_delayed_work(& nfs_automount_task);
    }
  } else {

  }
#line 220
  return;
}
}
#line 225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static struct vfsmount *nfs_do_clone_mount(struct nfs_server *server , char const   *devname ,
                                           struct nfs_clone_mount *mountdata ) 
{ 
  struct vfsmount *tmp ;

  {
  {
#line 229
  tmp = vfs_kern_mount(& nfs_xdev_fs_type, 0, devname, (void *)mountdata);
  }
#line 229
  return (tmp);
}
}
#line 240 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
struct vfsmount *nfs_do_submount(struct dentry *dentry , struct nfs_fh *fh , struct nfs_fattr *fattr ,
                                 rpc_authflavor_t authflavor ) 
{ 
  struct nfs_clone_mount mountdata ;
  struct vfsmount *mnt ;
  void *tmp ;
  char *page ;
  unsigned long tmp___0 ;
  char *devname ;
  long tmp___1 ;
  long tmp___2 ;
  bool tmp___3 ;
  struct nfs_server *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
  {
#line 243
  mountdata.sb = (struct super_block  const  *)dentry->d_sb;
#line 243
  mountdata.dentry = (struct dentry  const  *)dentry;
#line 243
  mountdata.fh = fh;
#line 243
  mountdata.fattr = fattr;
#line 243
  mountdata.hostname = 0;
#line 243
  mountdata.mnt_path = 0;
#line 243
  mountdata.addr = 0;
#line 243
  mountdata.addrlen = 0UL;
#line 243
  mountdata.authflavor = authflavor;
#line 250
  tmp = ERR_PTR(-12L);
#line 250
  mnt = (struct vfsmount *)tmp;
#line 251
  tmp___0 = __get_free_pages(131280U, 0U);
#line 251
  page = (char *)tmp___0;
#line 254
  tmp___1 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 254
  if (tmp___1 != 0L) {
    {
#line 254
    printk("\001d--> nfs_do_submount()\n");
    }
  } else {

  }
  {
#line 256
  tmp___2 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 256
  if (tmp___2 != 0L) {
    {
#line 256
    printk("\001d%s: submounting on %pd2\n", "nfs_do_submount", dentry);
    }
  } else {

  }
#line 258
  if ((unsigned long )page == (unsigned long )((char *)0)) {
#line 259
    goto out;
  } else {

  }
  {
#line 260
  devname = nfs_devname(dentry, page, 4096L);
#line 261
  mnt = (struct vfsmount *)devname;
#line 262
  tmp___3 = IS_ERR((void const   *)devname);
  }
#line 262
  if ((int )tmp___3) {
#line 263
    goto free_page;
  } else {

  }
  {
#line 264
  tmp___4 = NFS_SB((struct super_block  const  *)dentry->d_sb);
#line 264
  mnt = nfs_do_clone_mount(tmp___4, (char const   *)devname, & mountdata);
  }
  free_page: 
  {
#line 266
  free_pages((unsigned long )page, 0U);
  }
  out: 
  {
#line 268
  tmp___5 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 268
  if (tmp___5 != 0L) {
    {
#line 268
    printk("\001d%s: done\n", "nfs_do_submount");
    }
  } else {

  }
  {
#line 270
  tmp___6 = __builtin_expect((long )((int )nfs_debug) & 1L, 0L);
  }
#line 270
  if (tmp___6 != 0L) {
    {
#line 270
    printk("\001d<-- nfs_do_submount() = %p\n", mnt);
    }
  } else {

  }
#line 271
  return (mnt);
}
}
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static char const   __kstrtab_nfs_do_submount[16U]  = 
#line 273
  {      'n',      'f',      's',      '_', 
        'd',      'o',      '_',      's', 
        'u',      'b',      'm',      'o', 
        'u',      'n',      't',      '\000'};
#line 273
struct kernel_symbol  const  __ksymtab_nfs_do_submount ;
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
struct kernel_symbol  const  __ksymtab_nfs_do_submount  =    {(unsigned long )(& nfs_do_submount), (char const   *)(& __kstrtab_nfs_do_submount)};
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
struct vfsmount *nfs_submount(struct nfs_server *server , struct dentry *dentry ,
                              struct nfs_fh *fh , struct nfs_fattr *fattr ) 
{ 
  int err ;
  struct dentry *parent ;
  struct dentry *tmp ;
  void *tmp___0 ;
  struct vfsmount *tmp___1 ;

  {
  {
#line 279
  tmp = dget_parent(dentry);
#line 279
  parent = tmp;
#line 282
  err = (*(((server->nfs_client)->rpc_ops)->lookup))(parent->d_inode, & dentry->d_name,
                                                     fh, fattr, (struct nfs4_label *)0);
#line 283
  dput(parent);
  }
#line 284
  if (err != 0) {
    {
#line 285
    tmp___0 = ERR_PTR((long )err);
    }
#line 285
    return ((struct vfsmount *)tmp___0);
  } else {

  }
  {
#line 287
  tmp___1 = nfs_do_submount(dentry, fh, fattr, ((server->client)->cl_auth)->au_flavor);
  }
#line 287
  return (tmp___1);
}
}
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
static char const   __kstrtab_nfs_submount[13U]  = 
#line 289
  {      'n',      'f',      's',      '_', 
        's',      'u',      'b',      'm', 
        'o',      'u',      'n',      't', 
        '\000'};
#line 289
struct kernel_symbol  const  __ksymtab_nfs_submount ;
#line 289 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/namespace.c"
struct kernel_symbol  const  __ksymtab_nfs_submount  =    {(unsigned long )(& nfs_submount), (char const   *)(& __kstrtab_nfs_submount)};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) ;
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/xdr.h"
extern __be32 *xdr_encode_opaque(__be32 * , void const   * , unsigned int  ) ;
#line 217
extern __be32 *xdr_reserve_space(struct xdr_stream * , size_t  ) ;
#line 228
extern __be32 *xdr_inline_decode(struct xdr_stream * , size_t  ) ;
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sunrpc/clnt.h"
extern int rpc_call_sync(struct rpc_clnt * , struct rpc_message  const  * , int  ) ;
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/internal.h"
void nfs_umount(struct nfs_mount_request  const  *info ) ;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct rpc_program  const  mnt_program ;
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct __anonstruct_mnt_errtbl_290 mnt_errtbl[5U]  = {      {0U, 0}, 
        {1U, -1}, 
        {2U, -2}, 
        {13U, -13}, 
        {22U, -22}};
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct __anonstruct_mnt3_errtbl_291 mnt3_errtbl[10U]  = 
#line 113
  {      {0U, 0}, 
        {1U, -1}, 
        {2U, -2}, 
        {5U, -5}, 
        {13U, -13}, 
        {20U, -20}, 
        {22U, -22}, 
        {63U, -36}, 
        {10004U, -524}, 
        {10006U, -121}};
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
int nfs_mount(struct nfs_mount_request *info ) 
{ 
  struct mountres result ;
  struct rpc_message msg ;
  struct rpc_create_args args ;
  struct rpc_clnt *mnt_clnt ;
  int status ;
  long tmp ;
  size_t tmp___0 ;
  bool tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;

  {
  {
#line 149
  result.errno = 0;
#line 149
  result.fh = info->fh;
#line 149
  result.auth_count = info->auth_flav_len;
#line 149
  result.auth_flavors = info->auth_flavs;
#line 154
  msg.rpc_proc = 0;
#line 154
  msg.rpc_argp = (void *)info->dirpath;
#line 154
  msg.rpc_resp = (void *)(& result);
#line 154
  msg.rpc_cred = 0;
#line 158
  args.net = info->net;
#line 158
  args.protocol = (int )info->protocol;
#line 158
  args.address = info->sap;
#line 158
  args.addrsize = info->salen;
#line 158
  args.saddress = 0;
#line 158
  args.timeout = 0;
#line 158
  args.servername = (char const   *)info->hostname;
#line 158
  args.program = & mnt_program;
#line 158
  args.prognumber = 0U;
#line 158
  args.version = info->version;
#line 158
  args.authflavor = 1U;
#line 158
  args.flags = 0UL;
#line 158
  args.client_name = 0;
#line 158
  args.bc_xprt = 0;
#line 171
  tmp = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 171
  if (tmp != 0L) {
    {
#line 171
    printk("\001dNFS: sending MNT request for %s:%s\n", (unsigned long )info->hostname != (unsigned long )((char *)0) ? info->hostname : (char *)"server",
           info->dirpath);
    }
  } else {

  }
  {
#line 175
  tmp___0 = strlen((char const   *)info->dirpath);
  }
#line 175
  if (tmp___0 > 1024UL) {
#line 176
    return (-36);
  } else {

  }
#line 178
  if (info->noresvport != 0) {
#line 179
    args.flags = args.flags | 8UL;
  } else {

  }
  {
#line 181
  mnt_clnt = rpc_create(& args);
#line 182
  tmp___1 = IS_ERR((void const   *)mnt_clnt);
  }
#line 182
  if ((int )tmp___1) {
#line 183
    goto out_clnt_err;
  } else {

  }
#line 185
  if (info->version == 3U) {
#line 186
    msg.rpc_proc = mnt_clnt->cl_procinfo + 1UL;
  } else {
#line 188
    msg.rpc_proc = mnt_clnt->cl_procinfo + 1UL;
  }
  {
#line 190
  status = rpc_call_sync(mnt_clnt, (struct rpc_message  const  *)(& msg), 4608);
#line 191
  rpc_shutdown_client(mnt_clnt);
  }
#line 193
  if (status < 0) {
#line 194
    goto out_call_err;
  } else {

  }
#line 195
  if (result.errno != 0) {
#line 196
    goto out_mnt_err;
  } else {

  }
  {
#line 198
  tmp___2 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 198
  if (tmp___2 != 0L) {
    {
#line 198
    printk("\001dNFS: MNT request succeeded\n");
    }
  } else {

  }
#line 199
  status = 0;
#line 205
  if (info->version != 3U || *(info->auth_flav_len) == 0U) {
    {
#line 206
    tmp___3 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
    }
#line 206
    if (tmp___3 != 0L) {
      {
#line 206
      printk("\001dNFS: Faking up auth_flavs list\n");
      }
    } else {

    }
#line 207
    *(info->auth_flavs) = 0U;
#line 208
    *(info->auth_flav_len) = 1U;
  } else {

  }
  out: ;
#line 211
  return (status);
  out_clnt_err: 
  {
#line 214
  tmp___4 = PTR_ERR((void const   *)mnt_clnt);
#line 214
  status = (int )tmp___4;
#line 215
  tmp___5 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 215
  if (tmp___5 != 0L) {
    {
#line 215
    printk("\001dNFS: failed to create MNT RPC client, status=%d\n", status);
    }
  } else {

  }
#line 216
  goto out;
  out_call_err: 
  {
#line 219
  tmp___6 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 219
  if (tmp___6 != 0L) {
    {
#line 219
    printk("\001dNFS: MNT request failed, status=%d\n", status);
    }
  } else {

  }
#line 220
  goto out;
  out_mnt_err: 
  {
#line 223
  tmp___7 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 223
  if (tmp___7 != 0L) {
    {
#line 223
    printk("\001dNFS: MNT server returned result %d\n", result.errno);
    }
  } else {

  }
#line 224
  status = result.errno;
#line 225
  goto out;
}
}
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
void nfs_umount(struct nfs_mount_request  const  *info ) 
{ 
  struct rpc_timeout nfs_umnt_timeout ;
  struct rpc_create_args args ;
  struct rpc_message msg ;
  struct rpc_clnt *clnt ;
  int status ;
  size_t tmp ;
  bool tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;

  {
  {
#line 237
  nfs_umnt_timeout.to_initval = 250UL;
#line 237
  nfs_umnt_timeout.to_maxval = 750UL;
#line 237
  nfs_umnt_timeout.to_increment = 0UL;
#line 237
  nfs_umnt_timeout.to_retries = 2U;
#line 237
  nfs_umnt_timeout.to_exponential = (unsigned char)0;
#line 242
  args.net = info->net;
#line 242
  args.protocol = 17;
#line 242
  args.address = info->sap;
#line 242
  args.addrsize = info->salen;
#line 242
  args.saddress = 0;
#line 242
  args.timeout = & nfs_umnt_timeout;
#line 242
  args.servername = (char const   *)info->hostname;
#line 242
  args.program = & mnt_program;
#line 242
  args.prognumber = 0U;
#line 242
  args.version = info->version;
#line 242
  args.authflavor = 1U;
#line 242
  args.flags = 16UL;
#line 242
  args.client_name = 0;
#line 242
  args.bc_xprt = 0;
#line 254
  msg.rpc_proc = 0;
#line 254
  msg.rpc_argp = (void *)info->dirpath;
#line 254
  msg.rpc_resp = 0;
#line 254
  msg.rpc_cred = 0;
#line 260
  tmp = strlen((char const   *)info->dirpath);
  }
#line 260
  if (tmp > 1024UL) {
#line 261
    return;
  } else {

  }
#line 263
  if ((int )info->noresvport != 0) {
#line 264
    args.flags = args.flags | 8UL;
  } else {

  }
  {
#line 266
  clnt = rpc_create(& args);
#line 267
  tmp___0 = IS_ERR((void const   *)clnt);
  }
#line 267
  if ((int )tmp___0) {
#line 268
    goto out_clnt_err;
  } else {

  }
  {
#line 270
  tmp___1 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 270
  if (tmp___1 != 0L) {
    {
#line 270
    printk("\001dNFS: sending UMNT request for %s:%s\n", (unsigned long )info->hostname != (unsigned long )((char */* const  */)0) ? info->hostname : (char */* const  */)"server",
           info->dirpath);
    }
  } else {

  }
#line 273
  if ((unsigned int )info->version == 3U) {
#line 274
    msg.rpc_proc = clnt->cl_procinfo + 3UL;
  } else {
#line 276
    msg.rpc_proc = clnt->cl_procinfo + 3UL;
  }
  {
#line 278
  status = rpc_call_sync(clnt, (struct rpc_message  const  *)(& msg), 0);
#line 279
  rpc_shutdown_client(clnt);
#line 281
  tmp___2 = __builtin_expect(status < 0, 0L);
  }
#line 281
  if (tmp___2 != 0L) {
#line 282
    goto out_call_err;
  } else {

  }
#line 284
  return;
  out_clnt_err: 
  {
#line 287
  tmp___4 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 287
  if (tmp___4 != 0L) {
    {
#line 287
    tmp___3 = PTR_ERR((void const   *)clnt);
#line 287
    printk("\001dNFS: failed to create UMNT RPC client, status=%ld\n", tmp___3);
    }
  } else {

  }
#line 289
  return;
  out_call_err: 
  {
#line 292
  tmp___5 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 292
  if (tmp___5 != 0L) {
    {
#line 292
    printk("\001dNFS: UMNT request failed, status=%d\n", status);
    }
  } else {

  }
#line 293
  return;
}
}
#line 299 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static void encode_mntdirpath(struct xdr_stream *xdr , char const   *pathname ) 
{ 
  u32 pathname_len ;
  size_t tmp ;
  __be32 *p ;

  {
  {
#line 301
  tmp = strlen(pathname);
#line 301
  pathname_len = (u32 const   )tmp;
#line 304
  p = xdr_reserve_space(xdr, (size_t )(pathname_len + 4U));
#line 305
  xdr_encode_opaque(p, (void const   *)pathname, pathname_len);
  }
#line 306
  return;
}
}
#line 308 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static void mnt_xdr_enc_dirpath(struct rpc_rqst *req , struct xdr_stream *xdr , char const   *dirpath ) 
{ 


  {
  {
#line 311
  encode_mntdirpath(xdr, dirpath);
  }
#line 312
  return;
}
}
#line 323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static int decode_status(struct xdr_stream *xdr , struct mountres *res ) 
{ 
  unsigned int i ;
  u32 status ;
  __be32 *p ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 329
  p = xdr_inline_decode(xdr, 4UL);
#line 330
  tmp = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U), 0L);
  }
#line 330
  if (tmp != 0L) {
#line 331
    return (-5);
  } else {

  }
  {
#line 332
  status = __be32_to_cpup((__be32 const   *)p);
#line 334
  i = 0U;
  }
#line 334
  goto ldv_52848;
  ldv_52847: ;
#line 335
  if (mnt_errtbl[i].status == status) {
#line 336
    res->errno = mnt_errtbl[i].errno;
#line 337
    return (0);
  } else {

  }
#line 334
  i = i + 1U;
  ldv_52848: ;
#line 334
  if (i <= 4U) {
#line 336
    goto ldv_52847;
  } else {

  }
  {
#line 341
  tmp___0 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 341
  if (tmp___0 != 0L) {
    {
#line 341
    printk("\001dNFS: unrecognized MNT status code: %u\n", status);
    }
  } else {

  }
#line 342
  res->errno = -13;
#line 343
  return (0);
}
}
#line 346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static int decode_fhandle(struct xdr_stream *xdr , struct mountres *res ) 
{ 
  struct nfs_fh *fh ;
  __be32 *p ;
  long tmp ;

  {
  {
#line 348
  fh = res->fh;
#line 351
  p = xdr_inline_decode(xdr, 32UL);
#line 352
  tmp = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U), 0L);
  }
#line 352
  if (tmp != 0L) {
#line 353
    return (-5);
  } else {

  }
  {
#line 355
  fh->size = 32U;
#line 356
  memcpy((void *)(& fh->data), (void const   *)p, 32UL);
  }
#line 357
  return (0);
}
}
#line 360 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static int mnt_xdr_dec_mountres(struct rpc_rqst *req , struct xdr_stream *xdr , struct mountres *res ) 
{ 
  int status ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 366
  status = decode_status(xdr, res);
#line 367
  tmp = __builtin_expect(status != 0, 0L);
  }
#line 367
  if (tmp != 0L) {
#line 368
    return (status);
  } else {
    {
#line 367
    tmp___0 = __builtin_expect(res->errno != 0, 0L);
    }
#line 367
    if (tmp___0 != 0L) {
#line 368
      return (status);
    } else {

    }
  }
  {
#line 369
  tmp___1 = decode_fhandle(xdr, res);
  }
#line 369
  return (tmp___1);
}
}
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static int decode_fhs_status(struct xdr_stream *xdr , struct mountres *res ) 
{ 
  unsigned int i ;
  u32 status ;
  __be32 *p ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 378
  p = xdr_inline_decode(xdr, 4UL);
#line 379
  tmp = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U), 0L);
  }
#line 379
  if (tmp != 0L) {
#line 380
    return (-5);
  } else {

  }
  {
#line 381
  status = __be32_to_cpup((__be32 const   *)p);
#line 383
  i = 0U;
  }
#line 383
  goto ldv_52872;
  ldv_52871: ;
#line 384
  if (mnt3_errtbl[i].status == status) {
#line 385
    res->errno = mnt3_errtbl[i].errno;
#line 386
    return (0);
  } else {

  }
#line 383
  i = i + 1U;
  ldv_52872: ;
#line 383
  if (i <= 9U) {
#line 385
    goto ldv_52871;
  } else {

  }
  {
#line 390
  tmp___0 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 390
  if (tmp___0 != 0L) {
    {
#line 390
    printk("\001dNFS: unrecognized MNT3 status code: %u\n", status);
    }
  } else {

  }
#line 391
  res->errno = -13;
#line 392
  return (0);
}
}
#line 395 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static int decode_fhandle3(struct xdr_stream *xdr , struct mountres *res ) 
{ 
  struct nfs_fh *fh ;
  u32 size ;
  __be32 *p ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 397
  fh = res->fh;
#line 401
  p = xdr_inline_decode(xdr, 4UL);
#line 402
  tmp = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U), 0L);
  }
#line 402
  if (tmp != 0L) {
#line 403
    return (-5);
  } else {

  }
  {
#line 405
  size = __be32_to_cpup((__be32 const   *)p);
  }
#line 406
  if (size - 1U > 63U) {
#line 407
    return (-5);
  } else {

  }
  {
#line 409
  p = xdr_inline_decode(xdr, (size_t )size);
#line 410
  tmp___0 = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U),
                             0L);
  }
#line 410
  if (tmp___0 != 0L) {
#line 411
    return (-5);
  } else {

  }
  {
#line 413
  fh->size = (unsigned short )size;
#line 414
  memcpy((void *)(& fh->data), (void const   *)p, (size_t )size);
  }
#line 415
  return (0);
}
}
#line 418 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static int decode_auth_flavors(struct xdr_stream *xdr , struct mountres *res ) 
{ 
  rpc_authflavor_t *flavors ;
  unsigned int *count ;
  u32 entries ;
  u32 i ;
  __be32 *p ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  __be32 *tmp___2 ;
  long tmp___3 ;

  {
#line 420
  flavors = res->auth_flavors;
#line 421
  count = res->auth_count;
#line 425
  if (*count == 0U) {
#line 426
    return (0);
  } else {

  }
  {
#line 428
  p = xdr_inline_decode(xdr, 4UL);
#line 429
  tmp = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U), 0L);
  }
#line 429
  if (tmp != 0L) {
#line 430
    return (-5);
  } else {

  }
  {
#line 431
  entries = __be32_to_cpup((__be32 const   *)p);
#line 432
  tmp___0 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 432
  if (tmp___0 != 0L) {
    {
#line 432
    printk("\001dNFS: received %u auth flavors\n", entries);
    }
  } else {

  }
#line 433
  if (entries > 12U) {
#line 434
    entries = 12U;
  } else {

  }
  {
#line 436
  p = xdr_inline_decode(xdr, (size_t )(entries * 4U));
#line 437
  tmp___1 = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U),
                             0L);
  }
#line 437
  if (tmp___1 != 0L) {
#line 438
    return (-5);
  } else {

  }
#line 440
  if (entries > *count) {
#line 441
    entries = *count;
  } else {

  }
#line 443
  i = 0U;
#line 443
  goto ldv_52891;
  ldv_52890: 
  {
#line 444
  tmp___2 = p;
#line 444
  p = p + 1;
#line 444
  *(flavors + (unsigned long )i) = __be32_to_cpup((__be32 const   *)tmp___2);
#line 445
  tmp___3 = __builtin_expect((nfs_debug & 1024U) != 0U, 0L);
  }
#line 445
  if (tmp___3 != 0L) {
    {
#line 445
    printk("\001dNFS:   auth flavor[%u]: %d\n", i, *(flavors + (unsigned long )i));
    }
  } else {

  }
#line 443
  i = i + 1U;
  ldv_52891: ;
#line 443
  if (i < entries) {
#line 445
    goto ldv_52890;
  } else {

  }
#line 447
  *count = i;
#line 449
  return (0);
}
}
#line 452 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static int mnt_xdr_dec_mountres3(struct rpc_rqst *req , struct xdr_stream *xdr , struct mountres *res ) 
{ 
  int status ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
  {
#line 458
  status = decode_fhs_status(xdr, res);
#line 459
  tmp = __builtin_expect(status != 0, 0L);
  }
#line 459
  if (tmp != 0L) {
#line 460
    return (status);
  } else {
    {
#line 459
    tmp___0 = __builtin_expect(res->errno != 0, 0L);
    }
#line 459
    if (tmp___0 != 0L) {
#line 460
      return (status);
    } else {

    }
  }
  {
#line 461
  status = decode_fhandle3(xdr, res);
#line 462
  tmp___1 = __builtin_expect(status != 0, 0L);
  }
#line 462
  if (tmp___1 != 0L) {
#line 463
    res->errno = -521;
#line 464
    return (0);
  } else {

  }
  {
#line 466
  tmp___2 = decode_auth_flavors(xdr, res);
  }
#line 466
  return (tmp___2);
}
}
#line 469 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct rpc_procinfo mnt_procedures[4U]  = {      {0U, 0, 0, 0U, 0U, 0U, 0U, 0U, 0}, 
        {1U, (void (*)(void * , struct xdr_stream * , void * ))(& mnt_xdr_enc_dirpath),
      (int (*)(void * , struct xdr_stream * , void * ))(& mnt_xdr_dec_mountres), 257U,
      9U, 0U, 0U, 1U, "MOUNT"}, 
        {0U, 0, 0, 0U, 0U, 0U, 0U, 0U, 0}, 
        {3U, (void (*)(void * , struct xdr_stream * , void * ))(& mnt_xdr_enc_dirpath),
      0, 257U, 0U, 0U, 0U, 3U, "UMOUNT"}};
#line 488 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct rpc_procinfo mnt3_procedures[4U]  = {      {0U, 0, 0, 0U, 0U, 0U, 0U, 0U, 0}, 
        {1U, (void (*)(void * , struct xdr_stream * , void * ))(& mnt_xdr_enc_dirpath),
      (int (*)(void * , struct xdr_stream * , void * ))(& mnt_xdr_dec_mountres3),
      257U, 22U, 0U, 0U, 1U, "MOUNT"}, 
        {0U, 0, 0, 0U, 0U, 0U, 0U, 0U, 0}, 
        {3U, (void (*)(void * , struct xdr_stream * , void * ))(& mnt_xdr_enc_dirpath),
      0, 257U, 0U, 0U, 0U, 3U, "UMOUNT"}};
#line 508 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct rpc_version  const  mnt_version1  =    {1U, 4U, (struct rpc_procinfo *)(& mnt_procedures)};
#line 514 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct rpc_version  const  mnt_version3  =    {3U, 4U, (struct rpc_procinfo *)(& mnt3_procedures)};
#line 520 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct rpc_version  const  *mnt_version[4U]  = {      (struct rpc_version  const  *)0,      & mnt_version1,      (struct rpc_version  const  *)0,      & mnt_version3};
#line 527 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct rpc_stat mnt_stats  ;
#line 529 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/mount_clnt.c"
static struct rpc_program  const  mnt_program  =    {"mount", 100005U, 4U, (struct rpc_version  const  **)(& mnt_version), & mnt_stats,
    0};
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_refresh_inode_enter[24U]  = 
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'f',      'r', 
        'e',      's',      'h',      '_', 
        'i',      'n',      'o',      'd', 
        'e',      '_',      'e',      'n', 
        't',      'e',      'r',      '\000'};
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_refresh_inode_enter  =    {(char const   *)(& __tpstrtab_nfs_refresh_inode_enter), {{0}, (struct jump_entry *)0,
                                                             0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_refresh_inode_exit[23U]  = 
#line 143
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'f',      'r', 
        'e',      's',      'h',      '_', 
        'i',      'n',      'o',      'd', 
        'e',      '_',      'e',      'x', 
        'i',      't',      '\000'};
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_refresh_inode_exit  =    {(char const   *)(& __tpstrtab_nfs_refresh_inode_exit), {{0}, (struct jump_entry *)0,
                                                            0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_revalidate_inode_enter[27U]  = 
#line 144
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'v',      'a', 
        'l',      'i',      'd',      'a', 
        't',      'e',      '_',      'i', 
        'n',      'o',      'd',      'e', 
        '_',      'e',      'n',      't', 
        'e',      'r',      '\000'};
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_revalidate_inode_enter  =    {(char const   *)(& __tpstrtab_nfs_revalidate_inode_enter), {{0}, (struct jump_entry *)0,
                                                                0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_revalidate_inode_exit[26U]  = 
#line 145
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'v',      'a', 
        'l',      'i',      'd',      'a', 
        't',      'e',      '_',      'i', 
        'n',      'o',      'd',      'e', 
        '_',      'e',      'x',      'i', 
        't',      '\000'};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_revalidate_inode_exit  =    {(char const   *)(& __tpstrtab_nfs_revalidate_inode_exit), {{0}, (struct jump_entry *)0,
                                                               0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_invalidate_mapping_enter[29U]  = 
#line 146
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'v',      'a', 
        'l',      'i',      'd',      'a', 
        't',      'e',      '_',      'm', 
        'a',      'p',      'p',      'i', 
        'n',      'g',      '_',      'e', 
        'n',      't',      'e',      'r', 
        '\000'};
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_invalidate_mapping_enter  =    {(char const   *)(& __tpstrtab_nfs_invalidate_mapping_enter), {{0}, (struct jump_entry *)0,
                                                                  0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_invalidate_mapping_exit[28U]  = 
#line 147
  {      'n',      'f',      's',      '_', 
        'i',      'n',      'v',      'a', 
        'l',      'i',      'd',      'a', 
        't',      'e',      '_',      'm', 
        'a',      'p',      'p',      'i', 
        'n',      'g',      '_',      'e', 
        'x',      'i',      't',      '\000'};
#line 147 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_invalidate_mapping_exit  =    {(char const   *)(& __tpstrtab_nfs_invalidate_mapping_exit), {{0}, (struct jump_entry *)0,
                                                                 0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_getattr_enter[18U]  = 
#line 148
  {      'n',      'f',      's',      '_', 
        'g',      'e',      't',      'a', 
        't',      't',      'r',      '_', 
        'e',      'n',      't',      'e', 
        'r',      '\000'};
#line 148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_getattr_enter  =    {(char const   *)(& __tpstrtab_nfs_getattr_enter), {{0}, (struct jump_entry *)0,
                                                       0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_getattr_exit[17U]  = 
#line 149
  {      'n',      'f',      's',      '_', 
        'g',      'e',      't',      'a', 
        't',      't',      'r',      '_', 
        'e',      'x',      'i',      't', 
        '\000'};
#line 149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_getattr_exit  =    {(char const   *)(& __tpstrtab_nfs_getattr_exit), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_setattr_enter[18U]  = 
#line 150
  {      'n',      'f',      's',      '_', 
        's',      'e',      't',      'a', 
        't',      't',      'r',      '_', 
        'e',      'n',      't',      'e', 
        'r',      '\000'};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_setattr_enter  =    {(char const   *)(& __tpstrtab_nfs_setattr_enter), {{0}, (struct jump_entry *)0,
                                                       0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_setattr_exit[17U]  = 
#line 151
  {      'n',      'f',      's',      '_', 
        's',      'e',      't',      'a', 
        't',      't',      'r',      '_', 
        'e',      'x',      'i',      't', 
        '\000'};
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_setattr_exit  =    {(char const   *)(& __tpstrtab_nfs_setattr_exit), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_writeback_page_enter[25U]  = 
#line 152
  {      'n',      'f',      's',      '_', 
        'w',      'r',      'i',      't', 
        'e',      'b',      'a',      'c', 
        'k',      '_',      'p',      'a', 
        'g',      'e',      '_',      'e', 
        'n',      't',      'e',      'r', 
        '\000'};
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_writeback_page_enter  =    {(char const   *)(& __tpstrtab_nfs_writeback_page_enter), {{0}, (struct jump_entry *)0,
                                                              0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_writeback_page_exit[24U]  = 
#line 153
  {      'n',      'f',      's',      '_', 
        'w',      'r',      'i',      't', 
        'e',      'b',      'a',      'c', 
        'k',      '_',      'p',      'a', 
        'g',      'e',      '_',      'e', 
        'x',      'i',      't',      '\000'};
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_writeback_page_exit  =    {(char const   *)(& __tpstrtab_nfs_writeback_page_exit), {{0}, (struct jump_entry *)0,
                                                             0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_writeback_inode_enter[26U]  = 
#line 154
  {      'n',      'f',      's',      '_', 
        'w',      'r',      'i',      't', 
        'e',      'b',      'a',      'c', 
        'k',      '_',      'i',      'n', 
        'o',      'd',      'e',      '_', 
        'e',      'n',      't',      'e', 
        'r',      '\000'};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_writeback_inode_enter  =    {(char const   *)(& __tpstrtab_nfs_writeback_inode_enter), {{0}, (struct jump_entry *)0,
                                                               0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_writeback_inode_exit[25U]  = 
#line 155
  {      'n',      'f',      's',      '_', 
        'w',      'r',      'i',      't', 
        'e',      'b',      'a',      'c', 
        'k',      '_',      'i',      'n', 
        'o',      'd',      'e',      '_', 
        'e',      'x',      'i',      't', 
        '\000'};
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_writeback_inode_exit  =    {(char const   *)(& __tpstrtab_nfs_writeback_inode_exit), {{0}, (struct jump_entry *)0,
                                                              0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_fsync_enter[16U]  = 
#line 156
  {      'n',      'f',      's',      '_', 
        'f',      's',      'y',      'n', 
        'c',      '_',      'e',      'n', 
        't',      'e',      'r',      '\000'};
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_fsync_enter  =    {(char const   *)(& __tpstrtab_nfs_fsync_enter), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_fsync_exit[15U]  = 
#line 157
  {      'n',      'f',      's',      '_', 
        'f',      's',      'y',      'n', 
        'c',      '_',      'e',      'x', 
        'i',      't',      '\000'};
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_fsync_exit  =    {(char const   *)(& __tpstrtab_nfs_fsync_exit), {{0}, (struct jump_entry *)0, 0},
    (void (*)(void))0, (void (*)(void))0, (struct tracepoint_func *)0};
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_access_enter[17U]  = 
#line 158
  {      'n',      'f',      's',      '_', 
        'a',      'c',      'c',      'e', 
        's',      's',      '_',      'e', 
        'n',      't',      'e',      'r', 
        '\000'};
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_access_enter  =    {(char const   *)(& __tpstrtab_nfs_access_enter), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_access_exit[16U]  = 
#line 159
  {      'n',      'f',      's',      '_', 
        'a',      'c',      'c',      'e', 
        's',      's',      '_',      'e', 
        'x',      'i',      't',      '\000'};
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_access_exit  =    {(char const   *)(& __tpstrtab_nfs_access_exit), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_lookup_enter[17U]  = 
#line 258
  {      'n',      'f',      's',      '_', 
        'l',      'o',      'o',      'k', 
        'u',      'p',      '_',      'e', 
        'n',      't',      'e',      'r', 
        '\000'};
#line 258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_lookup_enter  =    {(char const   *)(& __tpstrtab_nfs_lookup_enter), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_lookup_exit[16U]  = 
#line 259
  {      'n',      'f',      's',      '_', 
        'l',      'o',      'o',      'k', 
        'u',      'p',      '_',      'e', 
        'x',      'i',      't',      '\000'};
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_lookup_exit  =    {(char const   *)(& __tpstrtab_nfs_lookup_exit), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_lookup_revalidate_enter[28U]  = 
#line 260
  {      'n',      'f',      's',      '_', 
        'l',      'o',      'o',      'k', 
        'u',      'p',      '_',      'r', 
        'e',      'v',      'a',      'l', 
        'i',      'd',      'a',      't', 
        'e',      '_',      'e',      'n', 
        't',      'e',      'r',      '\000'};
#line 260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_lookup_revalidate_enter  =    {(char const   *)(& __tpstrtab_nfs_lookup_revalidate_enter), {{0}, (struct jump_entry *)0,
                                                                 0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_lookup_revalidate_exit[27U]  = 
#line 261
  {      'n',      'f',      's',      '_', 
        'l',      'o',      'o',      'k', 
        'u',      'p',      '_',      'r', 
        'e',      'v',      'a',      'l', 
        'i',      'd',      'a',      't', 
        'e',      '_',      'e',      'x', 
        'i',      't',      '\000'};
#line 261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_lookup_revalidate_exit  =    {(char const   *)(& __tpstrtab_nfs_lookup_revalidate_exit), {{0}, (struct jump_entry *)0,
                                                                0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 313 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_atomic_open_enter[22U]  = 
#line 313
  {      'n',      'f',      's',      '_', 
        'a',      't',      'o',      'm', 
        'i',      'c',      '_',      'o', 
        'p',      'e',      'n',      '_', 
        'e',      'n',      't',      'e', 
        'r',      '\000'};
#line 313 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_atomic_open_enter  =    {(char const   *)(& __tpstrtab_nfs_atomic_open_enter), {{0}, (struct jump_entry *)0,
                                                           0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_atomic_open_exit[21U]  = 
#line 354
  {      'n',      'f',      's',      '_', 
        'a',      't',      'o',      'm', 
        'i',      'c',      '_',      'o', 
        'p',      'e',      'n',      '_', 
        'e',      'x',      'i',      't', 
        '\000'};
#line 354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_atomic_open_exit  =    {(char const   *)(& __tpstrtab_nfs_atomic_open_exit), {{0}, (struct jump_entry *)0,
                                                          0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_create_enter[17U]  = 
#line 387
  {      'n',      'f',      's',      '_', 
        'c',      'r',      'e',      'a', 
        't',      'e',      '_',      'e', 
        'n',      't',      'e',      'r', 
        '\000'};
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_create_enter  =    {(char const   *)(& __tpstrtab_nfs_create_enter), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 424 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_create_exit[16U]  = 
#line 424
  {      'n',      'f',      's',      '_', 
        'c',      'r',      'e',      'a', 
        't',      'e',      '_',      'e', 
        'x',      'i',      't',      '\000'};
#line 424 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_create_exit  =    {(char const   *)(& __tpstrtab_nfs_create_exit), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 503 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_mknod_enter[16U]  = 
#line 503
  {      'n',      'f',      's',      '_', 
        'm',      'k',      'n',      'o', 
        'd',      '_',      'e',      'n', 
        't',      'e',      'r',      '\000'};
#line 503 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_mknod_enter  =    {(char const   *)(& __tpstrtab_nfs_mknod_enter), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 504 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_mknod_exit[15U]  = 
#line 504
  {      'n',      'f',      's',      '_', 
        'm',      'k',      'n',      'o', 
        'd',      '_',      'e',      'x', 
        'i',      't',      '\000'};
#line 504 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_mknod_exit  =    {(char const   *)(& __tpstrtab_nfs_mknod_exit), {{0}, (struct jump_entry *)0, 0},
    (void (*)(void))0, (void (*)(void))0, (struct tracepoint_func *)0};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_mkdir_enter[16U]  = 
#line 505
  {      'n',      'f',      's',      '_', 
        'm',      'k',      'd',      'i', 
        'r',      '_',      'e',      'n', 
        't',      'e',      'r',      '\000'};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_mkdir_enter  =    {(char const   *)(& __tpstrtab_nfs_mkdir_enter), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 506 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_mkdir_exit[15U]  = 
#line 506
  {      'n',      'f',      's',      '_', 
        'm',      'k',      'd',      'i', 
        'r',      '_',      'e',      'x', 
        'i',      't',      '\000'};
#line 506 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_mkdir_exit  =    {(char const   *)(& __tpstrtab_nfs_mkdir_exit), {{0}, (struct jump_entry *)0, 0},
    (void (*)(void))0, (void (*)(void))0, (struct tracepoint_func *)0};
#line 507 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_rmdir_enter[16U]  = 
#line 507
  {      'n',      'f',      's',      '_', 
        'r',      'm',      'd',      'i', 
        'r',      '_',      'e',      'n', 
        't',      'e',      'r',      '\000'};
#line 507 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_rmdir_enter  =    {(char const   *)(& __tpstrtab_nfs_rmdir_enter), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 508 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_rmdir_exit[15U]  = 
#line 508
  {      'n',      'f',      's',      '_', 
        'r',      'm',      'd',      'i', 
        'r',      '_',      'e',      'x', 
        'i',      't',      '\000'};
#line 508 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_rmdir_exit  =    {(char const   *)(& __tpstrtab_nfs_rmdir_exit), {{0}, (struct jump_entry *)0, 0},
    (void (*)(void))0, (void (*)(void))0, (struct tracepoint_func *)0};
#line 509 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_remove_enter[17U]  = 
#line 509
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'm',      'o', 
        'v',      'e',      '_',      'e', 
        'n',      't',      'e',      'r', 
        '\000'};
#line 509 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_remove_enter  =    {(char const   *)(& __tpstrtab_nfs_remove_enter), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_remove_exit[16U]  = 
#line 510
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'm',      'o', 
        'v',      'e',      '_',      'e', 
        'x',      'i',      't',      '\000'};
#line 510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_remove_exit  =    {(char const   *)(& __tpstrtab_nfs_remove_exit), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 511 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_unlink_enter[17U]  = 
#line 511
  {      'n',      'f',      's',      '_', 
        'u',      'n',      'l',      'i', 
        'n',      'k',      '_',      'e', 
        'n',      't',      'e',      'r', 
        '\000'};
#line 511 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_unlink_enter  =    {(char const   *)(& __tpstrtab_nfs_unlink_enter), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 512 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_unlink_exit[16U]  = 
#line 512
  {      'n',      'f',      's',      '_', 
        'u',      'n',      'l',      'i', 
        'n',      'k',      '_',      'e', 
        'x',      'i',      't',      '\000'};
#line 512 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_unlink_exit  =    {(char const   *)(& __tpstrtab_nfs_unlink_exit), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_symlink_enter[18U]  = 
#line 513
  {      'n',      'f',      's',      '_', 
        's',      'y',      'm',      'l', 
        'i',      'n',      'k',      '_', 
        'e',      'n',      't',      'e', 
        'r',      '\000'};
#line 513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_symlink_enter  =    {(char const   *)(& __tpstrtab_nfs_symlink_enter), {{0}, (struct jump_entry *)0,
                                                       0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 514 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_symlink_exit[17U]  = 
#line 514
  {      'n',      'f',      's',      '_', 
        's',      'y',      'm',      'l', 
        'i',      'n',      'k',      '_', 
        'e',      'x',      'i',      't', 
        '\000'};
#line 514 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_symlink_exit  =    {(char const   *)(& __tpstrtab_nfs_symlink_exit), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 547 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_link_enter[15U]  = 
#line 547
  {      'n',      'f',      's',      '_', 
        'l',      'i',      'n',      'k', 
        '_',      'e',      'n',      't', 
        'e',      'r',      '\000'};
#line 547 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_link_enter  =    {(char const   *)(& __tpstrtab_nfs_link_enter), {{0}, (struct jump_entry *)0, 0},
    (void (*)(void))0, (void (*)(void))0, (struct tracepoint_func *)0};
#line 584 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_link_exit[14U]  = 
#line 584
  {      'n',      'f',      's',      '_', 
        'l',      'i',      'n',      'k', 
        '_',      'e',      'x',      'i', 
        't',      '\000'};
#line 584 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_link_exit  =    {(char const   *)(& __tpstrtab_nfs_link_exit), {{0}, (struct jump_entry *)0, 0},
    (void (*)(void))0, (void (*)(void))0, (struct tracepoint_func *)0};
#line 685 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_rename_enter[17U]  = 
#line 685
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'n',      'a', 
        'm',      'e',      '_',      'e', 
        'n',      't',      'e',      'r', 
        '\000'};
#line 685 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_rename_enter  =    {(char const   *)(& __tpstrtab_nfs_rename_enter), {{0}, (struct jump_entry *)0,
                                                      0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_rename_exit[16U]  = 
#line 686
  {      'n',      'f',      's',      '_', 
        'r',      'e',      'n',      'a', 
        'm',      'e',      '_',      'e', 
        'x',      'i',      't',      '\000'};
#line 686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_rename_exit  =    {(char const   *)(& __tpstrtab_nfs_rename_exit), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_sillyrename_rename[23U]  = 
#line 688
  {      'n',      'f',      's',      '_', 
        's',      'i',      'l',      'l', 
        'y',      'r',      'e',      'n', 
        'a',      'm',      'e',      '_', 
        'r',      'e',      'n',      'a', 
        'm',      'e',      '\000'};
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_sillyrename_rename  =    {(char const   *)(& __tpstrtab_nfs_sillyrename_rename), {{0}, (struct jump_entry *)0,
                                                            0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 723 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
static char const   __tpstrtab_nfs_sillyrename_unlink[23U]  = 
#line 723
  {      'n',      'f',      's',      '_', 
        's',      'i',      'l',      'l', 
        'y',      'r',      'e',      'n', 
        'a',      'm',      'e',      '_', 
        'u',      'n',      'l',      'i', 
        'n',      'k',      '\000'};
#line 723 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/nfstrace.h"
struct tracepoint __tracepoint_nfs_sillyrename_unlink  =    {(char const   *)(& __tpstrtab_nfs_sillyrename_unlink), {{0}, (struct jump_entry *)0,
                                                            0}, (void (*)(void))0,
    (void (*)(void))0, (struct tracepoint_func *)0};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sysctl.h"
extern int proc_dointvec(struct ctl_table * , int  , void * , size_t * , loff_t * ) ;
#line 48
extern int proc_dointvec_jiffies(struct ctl_table * , int  , void * , size_t * , loff_t * ) ;
#line 186
extern struct ctl_table_header *register_sysctl_table(struct ctl_table * ) ;
#line 190
extern void unregister_sysctl_table(struct ctl_table_header * ) ;
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/sysctl.c"
static struct ctl_table_header *nfs_callback_sysctl_table  ;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/sysctl.c"
static struct ctl_table nfs_cb_sysctls[3U]  = {      {"nfs_mountpoint_timeout", (void *)(& nfs_mountpoint_expiry_timeout), 4, 420U,
      0, & proc_dointvec_jiffies, 0, 0, 0}, 
        {"nfs_congestion_kb", (void *)(& nfs_congestion_kb), 4, 420U, 0, & proc_dointvec,
      0, 0, 0}};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/sysctl.c"
static struct ctl_table nfs_cb_sysctl_dir[2U]  = {      {"nfs", 0, 0, 365U, (struct ctl_table *)(& nfs_cb_sysctls), 0, 0, 0, 0}};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/sysctl.c"
static struct ctl_table nfs_cb_sysctl_root[2U]  = {      {"fs", 0, 0, 365U, (struct ctl_table *)(& nfs_cb_sysctl_dir), 0, 0, 0, 0}};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/sysctl.c"
int nfs_register_sysctl(void) 
{ 


  {
  {
#line 54
  nfs_callback_sysctl_table = register_sysctl_table((struct ctl_table *)(& nfs_cb_sysctl_root));
  }
#line 55
  if ((unsigned long )nfs_callback_sysctl_table == (unsigned long )((struct ctl_table_header *)0)) {
#line 56
    return (-12);
  } else {

  }
#line 57
  return (0);
}
}
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/sysctl.c"
void nfs_unregister_sysctl(void) 
{ 


  {
  {
#line 62
  unregister_sysctl_table(nfs_callback_sysctl_table);
#line 63
  nfs_callback_sysctl_table = (struct ctl_table_header *)0;
  }
#line 64
  return;
}
}
#line 181 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_fscache.c.aux"
void ldv_spin_lock_nfs_fscache_keys_lock(void) ;
#line 182
void ldv_spin_unlock_nfs_fscache_keys_lock(void) ;
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/spinlock.h"
__inline static void ldv_spin_lock_76___7(spinlock_t *lock ) ;
#line 377
__inline static void ldv_spin_lock_76___7(spinlock_t *lock ) ;
#line 417
__inline static void ldv_spin_unlock_77___6(spinlock_t *lock ) ;
#line 421
__inline static void ldv_spin_unlock_77___6(spinlock_t *lock ) ;
#line 425
__inline static void ldv_spin_unlock_77___6(spinlock_t *lock ) ;
#line 2309 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fs.h"
__inline static bool inode_is_open_for_write(struct inode  const  *inode ) 
{ 
  int tmp ;

  {
  {
#line 2311
  tmp = atomic_read(& inode->i_writecount);
  }
#line 2311
  return (tmp > 0);
}
}
#line 198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static int PageLocked(struct page  const  *page ) 
{ 
  int tmp ;

  {
  {
#line 198
  tmp = constant_test_bit(0L, (unsigned long const volatile   *)(& page->flags));
  }
#line 198
  return (tmp);
}
}
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagemap.h"
__inline static gfp_t mapping_gfp_mask(struct address_space *mapping ) 
{ 


  {
#line 85
  return ((gfp_t )mapping->flags & 33554431U);
}
}
#line 637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 270 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/nfs_fs.h"
__inline static struct fscache_cookie *nfs_i_fscache(struct inode *inode ) 
{ 
  struct nfs_inode *tmp ;

  {
  {
#line 273
  tmp = NFS_I((struct inode  const  *)inode);
  }
#line 273
  return (tmp->fscache);
}
}
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/iostat.h"
__inline static void nfs_add_fscache_stats(struct inode *inode , enum nfs_stat_fscachecounters stat ,
                                           long addend ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  struct nfs_server *tmp ;
  struct nfs_server *tmp___0 ;
  struct nfs_server *tmp___1 ;
  struct nfs_server *tmp___2 ;
  struct nfs_server *tmp___3 ;
  struct nfs_server *tmp___4 ;
  struct nfs_server *tmp___5 ;
  struct nfs_server *tmp___6 ;
  struct nfs_server *tmp___7 ;
  struct nfs_server *tmp___8 ;
  struct nfs_server *tmp___9 ;
  struct nfs_server *tmp___10 ;
  int pao_ID_____0 ;
  struct nfs_server *tmp___11 ;
  struct nfs_server *tmp___12 ;
  struct nfs_server *tmp___13 ;
  struct nfs_server *tmp___14 ;
  struct nfs_server *tmp___15 ;
  struct nfs_server *tmp___16 ;
  struct nfs_server *tmp___17 ;
  struct nfs_server *tmp___18 ;
  struct nfs_server *tmp___19 ;
  struct nfs_server *tmp___20 ;
  struct nfs_server *tmp___21 ;
  struct nfs_server *tmp___22 ;
  int pao_ID_____1 ;
  struct nfs_server *tmp___23 ;
  struct nfs_server *tmp___24 ;
  struct nfs_server *tmp___25 ;
  struct nfs_server *tmp___26 ;
  struct nfs_server *tmp___27 ;
  struct nfs_server *tmp___28 ;
  struct nfs_server *tmp___29 ;
  struct nfs_server *tmp___30 ;
  struct nfs_server *tmp___31 ;
  struct nfs_server *tmp___32 ;
  struct nfs_server *tmp___33 ;
  struct nfs_server *tmp___34 ;
  int pao_ID_____2 ;
  struct nfs_server *tmp___35 ;
  struct nfs_server *tmp___36 ;
  struct nfs_server *tmp___37 ;
  struct nfs_server *tmp___38 ;
  struct nfs_server *tmp___39 ;
  struct nfs_server *tmp___40 ;
  struct nfs_server *tmp___41 ;
  struct nfs_server *tmp___42 ;
  struct nfs_server *tmp___43 ;
  struct nfs_server *tmp___44 ;
  struct nfs_server *tmp___45 ;
  struct nfs_server *tmp___46 ;

  {
#line 56
  __vpp_verify = (void const   *)0;
  {
#line 56
  if (8UL == 1UL) {
#line 56
    goto case_1;
  } else {

  }
#line 56
  if (8UL == 2UL) {
#line 56
    goto case_2___0;
  } else {

  }
#line 56
  if (8UL == 4UL) {
#line 56
    goto case_4___1;
  } else {

  }
#line 56
  if (8UL == 8UL) {
#line 56
    goto case_8___2;
  } else {

  }
#line 56
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 56
  pao_ID__ = 0;
  {
#line 56
  if (8UL == 1UL) {
#line 56
    goto case_1___0;
  } else {

  }
#line 56
  if (8UL == 2UL) {
#line 56
    goto case_2;
  } else {

  }
#line 56
  if (8UL == 4UL) {
#line 56
    goto case_4;
  } else {

  }
#line 56
  if (8UL == 8UL) {
#line 56
    goto case_8;
  } else {

  }
#line 56
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 56
  if (pao_ID__ == 1) {
    {
#line 56
    tmp = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incb %%gs:%P0": "+m" ((tmp->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID__ == -1) {
    {
#line 56
    tmp___0 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decb %%gs:%P0": "+m" ((tmp___0->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___1 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addb %1, %%gs:%P0": "+m" ((tmp___1->io_stats)->fscache[(unsigned int )stat]): "qi" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52946;
  case_2: /* CIL Label */ ;
#line 56
  if (pao_ID__ == 1) {
    {
#line 56
    tmp___2 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___2->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID__ == -1) {
    {
#line 56
    tmp___3 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decw %%gs:%P0": "+m" ((tmp___3->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___4 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addw %1, %%gs:%P0": "+m" ((tmp___4->io_stats)->fscache[(unsigned int )stat]): "ri" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52946;
  case_4: /* CIL Label */ ;
#line 56
  if (pao_ID__ == 1) {
    {
#line 56
    tmp___5 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___5->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID__ == -1) {
    {
#line 56
    tmp___6 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decl %%gs:%P0": "+m" ((tmp___6->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___7 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addl %1, %%gs:%P0": "+m" ((tmp___7->io_stats)->fscache[(unsigned int )stat]): "ri" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52946;
  case_8: /* CIL Label */ ;
#line 56
  if (pao_ID__ == 1) {
    {
#line 56
    tmp___8 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___8->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID__ == -1) {
    {
#line 56
    tmp___9 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decq %%gs:%P0": "+m" ((tmp___9->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___10 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addq %1, %%gs:%P0": "+m" ((tmp___10->io_stats)->fscache[(unsigned int )stat]): "re" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52946;
  switch_default: /* CIL Label */ 
  {
#line 56
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_52946: ;
#line 56
  goto ldv_52951;
  case_2___0: /* CIL Label */ 
#line 56
  pao_ID_____0 = 0;
  {
#line 56
  if (8UL == 1UL) {
#line 56
    goto case_1___1;
  } else {

  }
#line 56
  if (8UL == 2UL) {
#line 56
    goto case_2___1;
  } else {

  }
#line 56
  if (8UL == 4UL) {
#line 56
    goto case_4___0;
  } else {

  }
#line 56
  if (8UL == 8UL) {
#line 56
    goto case_8___0;
  } else {

  }
#line 56
  goto switch_default___0;
  case_1___1: /* CIL Label */ ;
#line 56
  if (pao_ID_____0 == 1) {
    {
#line 56
    tmp___11 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___11->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____0 == -1) {
    {
#line 56
    tmp___12 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decb %%gs:%P0": "+m" ((tmp___12->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___13 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addb %1, %%gs:%P0": "+m" ((tmp___13->io_stats)->fscache[(unsigned int )stat]): "qi" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52957;
  case_2___1: /* CIL Label */ ;
#line 56
  if (pao_ID_____0 == 1) {
    {
#line 56
    tmp___14 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___14->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____0 == -1) {
    {
#line 56
    tmp___15 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decw %%gs:%P0": "+m" ((tmp___15->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___16 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addw %1, %%gs:%P0": "+m" ((tmp___16->io_stats)->fscache[(unsigned int )stat]): "ri" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52957;
  case_4___0: /* CIL Label */ ;
#line 56
  if (pao_ID_____0 == 1) {
    {
#line 56
    tmp___17 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___17->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____0 == -1) {
    {
#line 56
    tmp___18 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decl %%gs:%P0": "+m" ((tmp___18->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___19 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addl %1, %%gs:%P0": "+m" ((tmp___19->io_stats)->fscache[(unsigned int )stat]): "ri" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52957;
  case_8___0: /* CIL Label */ ;
#line 56
  if (pao_ID_____0 == 1) {
    {
#line 56
    tmp___20 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___20->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____0 == -1) {
    {
#line 56
    tmp___21 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decq %%gs:%P0": "+m" ((tmp___21->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___22 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addq %1, %%gs:%P0": "+m" ((tmp___22->io_stats)->fscache[(unsigned int )stat]): "re" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52957;
  switch_default___0: /* CIL Label */ 
  {
#line 56
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_52957: ;
#line 56
  goto ldv_52951;
  case_4___1: /* CIL Label */ 
#line 56
  pao_ID_____1 = 0;
  {
#line 56
  if (8UL == 1UL) {
#line 56
    goto case_1___2;
  } else {

  }
#line 56
  if (8UL == 2UL) {
#line 56
    goto case_2___2;
  } else {

  }
#line 56
  if (8UL == 4UL) {
#line 56
    goto case_4___2;
  } else {

  }
#line 56
  if (8UL == 8UL) {
#line 56
    goto case_8___1;
  } else {

  }
#line 56
  goto switch_default___1;
  case_1___2: /* CIL Label */ ;
#line 56
  if (pao_ID_____1 == 1) {
    {
#line 56
    tmp___23 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___23->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____1 == -1) {
    {
#line 56
    tmp___24 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decb %%gs:%P0": "+m" ((tmp___24->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___25 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addb %1, %%gs:%P0": "+m" ((tmp___25->io_stats)->fscache[(unsigned int )stat]): "qi" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52967;
  case_2___2: /* CIL Label */ ;
#line 56
  if (pao_ID_____1 == 1) {
    {
#line 56
    tmp___26 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___26->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____1 == -1) {
    {
#line 56
    tmp___27 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decw %%gs:%P0": "+m" ((tmp___27->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___28 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addw %1, %%gs:%P0": "+m" ((tmp___28->io_stats)->fscache[(unsigned int )stat]): "ri" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52967;
  case_4___2: /* CIL Label */ ;
#line 56
  if (pao_ID_____1 == 1) {
    {
#line 56
    tmp___29 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___29->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____1 == -1) {
    {
#line 56
    tmp___30 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decl %%gs:%P0": "+m" ((tmp___30->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___31 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addl %1, %%gs:%P0": "+m" ((tmp___31->io_stats)->fscache[(unsigned int )stat]): "ri" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52967;
  case_8___1: /* CIL Label */ ;
#line 56
  if (pao_ID_____1 == 1) {
    {
#line 56
    tmp___32 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___32->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____1 == -1) {
    {
#line 56
    tmp___33 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decq %%gs:%P0": "+m" ((tmp___33->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___34 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addq %1, %%gs:%P0": "+m" ((tmp___34->io_stats)->fscache[(unsigned int )stat]): "re" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52967;
  switch_default___1: /* CIL Label */ 
  {
#line 56
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_52967: ;
#line 56
  goto ldv_52951;
  case_8___2: /* CIL Label */ 
#line 56
  pao_ID_____2 = 0;
  {
#line 56
  if (8UL == 1UL) {
#line 56
    goto case_1___3;
  } else {

  }
#line 56
  if (8UL == 2UL) {
#line 56
    goto case_2___3;
  } else {

  }
#line 56
  if (8UL == 4UL) {
#line 56
    goto case_4___3;
  } else {

  }
#line 56
  if (8UL == 8UL) {
#line 56
    goto case_8___3;
  } else {

  }
#line 56
  goto switch_default___2;
  case_1___3: /* CIL Label */ ;
#line 56
  if (pao_ID_____2 == 1) {
    {
#line 56
    tmp___35 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___35->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____2 == -1) {
    {
#line 56
    tmp___36 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decb %%gs:%P0": "+m" ((tmp___36->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___37 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addb %1, %%gs:%P0": "+m" ((tmp___37->io_stats)->fscache[(unsigned int )stat]): "qi" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52977;
  case_2___3: /* CIL Label */ ;
#line 56
  if (pao_ID_____2 == 1) {
    {
#line 56
    tmp___38 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___38->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____2 == -1) {
    {
#line 56
    tmp___39 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decw %%gs:%P0": "+m" ((tmp___39->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___40 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addw %1, %%gs:%P0": "+m" ((tmp___40->io_stats)->fscache[(unsigned int )stat]): "ri" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52977;
  case_4___3: /* CIL Label */ ;
#line 56
  if (pao_ID_____2 == 1) {
    {
#line 56
    tmp___41 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___41->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____2 == -1) {
    {
#line 56
    tmp___42 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decl %%gs:%P0": "+m" ((tmp___42->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___43 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addl %1, %%gs:%P0": "+m" ((tmp___43->io_stats)->fscache[(unsigned int )stat]): "ri" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52977;
  case_8___3: /* CIL Label */ ;
#line 56
  if (pao_ID_____2 == 1) {
    {
#line 56
    tmp___44 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___44->io_stats)->fscache[(unsigned int )stat]));
    }
  } else
#line 56
  if (pao_ID_____2 == -1) {
    {
#line 56
    tmp___45 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("decq %%gs:%P0": "+m" ((tmp___45->io_stats)->fscache[(unsigned int )stat]));
    }
  } else {
    {
#line 56
    tmp___46 = NFS_SERVER((struct inode  const  *)inode);
#line 56
    __asm__  ("addq %1, %%gs:%P0": "+m" ((tmp___46->io_stats)->fscache[(unsigned int )stat]): "re" ((unsigned long long )addend));
    }
  }
#line 56
  goto ldv_52977;
  switch_default___2: /* CIL Label */ 
  {
#line 56
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_52977: ;
#line 56
  goto ldv_52951;
  switch_default___3: /* CIL Label */ 
  {
#line 56
  __bad_size_call_parameter();
  }
#line 56
  goto ldv_52951;
  switch_break: /* CIL Label */ ;
  }
  ldv_52951: ;
#line 57
  return;
}
}
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
extern struct fscache_cookie *__fscache_acquire_cookie(struct fscache_cookie * , struct fscache_cookie_def  const  * ,
                                                       void * , bool  ) ;
#line 221
extern void __fscache_relinquish_cookie(struct fscache_cookie * , bool  ) ;
#line 227
extern int __fscache_read_or_alloc_page(struct fscache_cookie * , struct page * ,
                                        void (*)(struct page * , void * , int  ) ,
                                        void * , gfp_t  ) ;
#line 232
extern int __fscache_read_or_alloc_pages(struct fscache_cookie * , struct address_space * ,
                                         struct list_head * , unsigned int * , void (*)(struct page * ,
                                                                                        void * ,
                                                                                        int  ) ,
                                         void * , gfp_t  ) ;
#line 240
extern int __fscache_write_page(struct fscache_cookie * , struct page * , gfp_t  ) ;
#line 241
extern void __fscache_uncache_page(struct fscache_cookie * , struct page * ) ;
#line 244
extern bool __fscache_maybe_release_page(struct fscache_cookie * , struct page * ,
                                         gfp_t  ) ;
#line 246
extern void __fscache_uncache_all_inode_pages(struct fscache_cookie * , struct inode * ) ;
#line 250
extern void __fscache_disable_cookie(struct fscache_cookie * , bool  ) ;
#line 251
extern void __fscache_enable_cookie(struct fscache_cookie * , bool (*)(void * ) ,
                                    void * ) ;
#line 341 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static struct fscache_cookie *fscache_acquire_cookie(struct fscache_cookie *parent ,
                                                              struct fscache_cookie_def  const  *def ,
                                                              void *netfs_data , bool enable ) 
{ 
  struct fscache_cookie *tmp ;
  bool tmp___0 ;

  {
#line 347
  if ((unsigned long )parent != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 347
    tmp___0 = fscache_cookie_enabled(parent);
    }
#line 347
    if ((int )tmp___0) {
      {
#line 348
      tmp = __fscache_acquire_cookie(parent, def, netfs_data, (int )enable);
      }
#line 348
      return (tmp);
    } else {
#line 351
      return ((struct fscache_cookie *)0);
    }
  } else {
#line 351
    return ((struct fscache_cookie *)0);
  }
}
}
#line 367 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_relinquish_cookie(struct fscache_cookie *cookie , bool retire ) 
{ 


  {
#line 369
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 370
    __fscache_relinquish_cookie(cookie, (int )retire);
    }
  } else {

  }
#line 371
  return;
}
}
#line 542 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static int fscache_read_or_alloc_page(struct fscache_cookie *cookie , struct page *page ,
                                               void (*end_io_func)(struct page * ,
                                                                   void * , int  ) ,
                                               void *context , gfp_t gfp ) 
{ 
  int tmp ;
  bool tmp___0 ;

  {
#line 548
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 548
    tmp___0 = fscache_cookie_enabled(cookie);
    }
#line 548
    if ((int )tmp___0) {
      {
#line 549
      tmp = __fscache_read_or_alloc_page(cookie, page, end_io_func, context, gfp);
      }
#line 549
      return (tmp);
    } else {
#line 552
      return (-105);
    }
  } else {
#line 552
    return (-105);
  }
}
}
#line 591 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static int fscache_read_or_alloc_pages(struct fscache_cookie *cookie , struct address_space *mapping ,
                                                struct list_head *pages , unsigned int *nr_pages ,
                                                void (*end_io_func)(struct page * ,
                                                                    void * , int  ) ,
                                                void *context , gfp_t gfp ) 
{ 
  int tmp ;
  bool tmp___0 ;

  {
#line 599
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 599
    tmp___0 = fscache_cookie_enabled(cookie);
    }
#line 599
    if ((int )tmp___0) {
      {
#line 600
      tmp = __fscache_read_or_alloc_pages(cookie, mapping, pages, nr_pages, end_io_func,
                                          context, gfp);
      }
#line 600
      return (tmp);
    } else {
#line 604
      return (-105);
    }
  } else {
#line 604
    return (-105);
  }
}
}
#line 675 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static int fscache_write_page(struct fscache_cookie *cookie , struct page *page ,
                                       gfp_t gfp ) 
{ 
  int tmp ;
  bool tmp___0 ;

  {
#line 679
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 679
    tmp___0 = fscache_cookie_enabled(cookie);
    }
#line 679
    if ((int )tmp___0) {
      {
#line 680
      tmp = __fscache_write_page(cookie, page, gfp);
      }
#line 680
      return (tmp);
    } else {
#line 682
      return (-105);
    }
  } else {
#line 682
    return (-105);
  }
}
}
#line 700 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_uncache_page(struct fscache_cookie *cookie , struct page *page ) 
{ 


  {
#line 703
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 704
    __fscache_uncache_page(cookie, page);
    }
  } else {

  }
#line 705
  return;
}
}
#line 761 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static bool fscache_maybe_release_page(struct fscache_cookie *cookie , struct page *page ,
                                                gfp_t gfp ) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
#line 765
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 765
    tmp___0 = PagePrivate2((struct page  const  *)page);
    }
#line 765
    if (tmp___0 != 0) {
      {
#line 766
      tmp = __fscache_maybe_release_page(cookie, page, gfp);
      }
#line 766
      return (tmp);
    } else {

    }
  } else {

  }
#line 767
  return (0);
}
}
#line 782 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_uncache_all_inode_pages(struct fscache_cookie *cookie ,
                                                     struct inode *inode ) 
{ 


  {
#line 785
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 786
    __fscache_uncache_all_inode_pages(cookie, inode);
    }
  } else {

  }
#line 787
  return;
}
}
#line 804 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_disable_cookie(struct fscache_cookie *cookie , bool invalidate ) 
{ 
  bool tmp ;

  {
#line 806
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 806
    tmp = fscache_cookie_enabled(cookie);
    }
#line 806
    if ((int )tmp) {
      {
#line 807
      __fscache_disable_cookie(cookie, (int )invalidate);
      }
    } else {

    }
  } else {

  }
#line 808
  return;
}
}
#line 824 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_enable_cookie(struct fscache_cookie *cookie , bool (*can_enable)(void * ) ,
                                           void *data ) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
#line 828
  if ((unsigned long )cookie != (unsigned long )((struct fscache_cookie *)0)) {
    {
#line 828
    tmp = fscache_cookie_enabled(cookie);
    }
#line 828
    if (tmp) {
#line 828
      tmp___0 = 0;
    } else {
#line 828
      tmp___0 = 1;
    }
#line 828
    if (tmp___0) {
      {
#line 829
      __fscache_enable_cookie(cookie, can_enable, data);
      }
    } else {

    }
  } else {

  }
#line 830
  return;
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.h"
struct fscache_netfs nfs_fscache_netfs ;
#line 63
struct fscache_cookie_def  const  nfs_fscache_server_index_def ;
#line 64
struct fscache_cookie_def  const  nfs_fscache_super_index_def ;
#line 65
struct fscache_cookie_def  const  nfs_fscache_inode_object_def ;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
static struct rb_root nfs_fscache_keys  =    {(struct rb_node *)0};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
static spinlock_t nfs_fscache_keys_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "nfs_fscache_keys_lock",
                                                     0, 0UL}}}};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void nfs_fscache_get_client_cookie(struct nfs_client *clp ) 
{ 
  long tmp ;

  {
  {
#line 40
  clp->fscache = fscache_acquire_cookie(nfs_fscache_netfs.primary_index, & nfs_fscache_server_index_def,
                                        (void *)clp, 1);
#line 43
  tmp = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 43
  if (tmp != 0L) {
    {
#line 43
    printk("\001dNFS: get client cookie (0x%p/0x%p)\n", clp, clp->fscache);
    }
  } else {

  }
#line 44
  return;
}
}
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void nfs_fscache_release_client_cookie(struct nfs_client *clp ) 
{ 
  long tmp ;

  {
  {
#line 52
  tmp = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 52
  if (tmp != 0L) {
    {
#line 52
    printk("\001dNFS: releasing client cookie (0x%p/0x%p)\n", clp, clp->fscache);
    }
  } else {

  }
  {
#line 55
  fscache_relinquish_cookie(clp->fscache, 0);
#line 56
  clp->fscache = (struct fscache_cookie *)0;
  }
#line 57
  return;
}
}
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void nfs_fscache_get_super_cookie(struct super_block *sb , char const   *uniq , int ulen ) 
{ 
  struct nfs_fscache_key *key ;
  struct nfs_fscache_key *xkey ;
  struct nfs_server *nfss ;
  struct nfs_server *tmp ;
  struct rb_node **p ;
  struct rb_node *parent ;
  int diff ;
  void *tmp___0 ;
  struct rb_node  const  *__mptr ;
  long tmp___1 ;

  {
  {
#line 70
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 70
  nfss = tmp;
  }
#line 74
  if ((unsigned long )uniq == (unsigned long )((char const   *)0)) {
#line 75
    uniq = "";
#line 76
    ulen = 1;
  } else {

  }
  {
#line 79
  tmp___0 = kzalloc((unsigned long )ulen + 96UL, 208U);
#line 79
  key = (struct nfs_fscache_key *)tmp___0;
  }
#line 80
  if ((unsigned long )key == (unsigned long )((struct nfs_fscache_key *)0)) {
#line 81
    return;
  } else {

  }
  {
#line 83
  key->nfs_client = nfss->nfs_client;
#line 84
  key->key.super.s_flags = sb->s_flags & 31UL;
#line 85
  key->key.nfs_server.flags = nfss->flags;
#line 86
  key->key.nfs_server.rsize = nfss->rsize;
#line 87
  key->key.nfs_server.wsize = nfss->wsize;
#line 88
  key->key.nfs_server.acregmin = nfss->acregmin;
#line 89
  key->key.nfs_server.acregmax = nfss->acregmax;
#line 90
  key->key.nfs_server.acdirmin = nfss->acdirmin;
#line 91
  key->key.nfs_server.acdirmax = nfss->acdirmax;
#line 92
  key->key.nfs_server.fsid = nfss->fsid;
#line 93
  key->key.rpc_auth.au_flavor = ((nfss->client)->cl_auth)->au_flavor;
#line 95
  key->key.uniq_len = (u8 )ulen;
#line 96
  memcpy((void *)(& key->key.uniquifier), (void const   *)uniq, (size_t )ulen);
#line 98
  ldv_spin_lock_76___7(& nfs_fscache_keys_lock);
#line 99
  p = & nfs_fscache_keys.rb_node;
#line 100
  parent = (struct rb_node *)0;
  }
#line 101
  goto ldv_53447;
  ldv_53448: 
#line 102
  parent = *p;
#line 103
  __mptr = (struct rb_node  const  *)parent;
#line 103
  xkey = (struct nfs_fscache_key *)__mptr;
#line 105
  if ((unsigned long )key->nfs_client < (unsigned long )xkey->nfs_client) {
#line 106
    goto go_left;
  } else {

  }
#line 107
  if ((unsigned long )key->nfs_client > (unsigned long )xkey->nfs_client) {
#line 108
    goto go_right;
  } else {

  }
  {
#line 110
  diff = memcmp((void const   *)(& key->key), (void const   *)(& xkey->key), 64UL);
  }
#line 111
  if (diff < 0) {
#line 112
    goto go_left;
  } else {

  }
#line 113
  if (diff > 0) {
#line 114
    goto go_right;
  } else {

  }
#line 116
  if ((unsigned int )key->key.uniq_len == 0U) {
#line 117
    goto non_unique;
  } else {

  }
  {
#line 118
  diff = memcmp((void const   *)(& key->key.uniquifier), (void const   *)(& xkey->key.uniquifier),
                (size_t )key->key.uniq_len);
  }
#line 121
  if (diff < 0) {
#line 122
    goto go_left;
  } else {

  }
#line 123
  if (diff > 0) {
#line 124
    goto go_right;
  } else {

  }
#line 125
  goto non_unique;
  go_left: 
#line 128
  p = & (*p)->rb_left;
#line 129
  goto ldv_53447;
  go_right: 
#line 131
  p = & (*p)->rb_right;
  ldv_53447: ;
#line 101
  if ((unsigned long )*p != (unsigned long )((struct rb_node *)0)) {
#line 103
    goto ldv_53448;
  } else {

  }
  {
#line 134
  rb_link_node(& key->node, parent, p);
#line 135
  rb_insert_color(& key->node, & nfs_fscache_keys);
#line 136
  ldv_spin_unlock_77___6(& nfs_fscache_keys_lock);
#line 137
  nfss->fscache_key = key;
#line 140
  nfss->fscache = fscache_acquire_cookie((nfss->nfs_client)->fscache, & nfs_fscache_super_index_def,
                                         (void *)nfss, 1);
#line 143
  tmp___1 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 143
  if (tmp___1 != 0L) {
    {
#line 143
    printk("\001dNFS: get superblock cookie (0x%p/0x%p)\n", nfss, nfss->fscache);
    }
  } else {

  }
#line 145
  return;
  non_unique: 
  {
#line 148
  ldv_spin_unlock_77___6(& nfs_fscache_keys_lock);
#line 149
  kfree((void const   *)key);
#line 150
  nfss->fscache_key = (struct nfs_fscache_key *)0;
#line 151
  nfss->fscache = (struct fscache_cookie *)0;
#line 152
  printk("\fNFS: Cache request denied due to non-unique superblock keys\n");
  }
#line 153
  return;
}
}
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void nfs_fscache_release_super_cookie(struct super_block *sb ) 
{ 
  struct nfs_server *nfss ;
  struct nfs_server *tmp ;
  long tmp___0 ;

  {
  {
#line 161
  tmp = NFS_SB((struct super_block  const  *)sb);
#line 161
  nfss = tmp;
#line 163
  tmp___0 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 163
  if (tmp___0 != 0L) {
    {
#line 163
    printk("\001dNFS: releasing superblock cookie (0x%p/0x%p)\n", nfss, nfss->fscache);
    }
  } else {

  }
  {
#line 166
  fscache_relinquish_cookie(nfss->fscache, 0);
#line 167
  nfss->fscache = (struct fscache_cookie *)0;
  }
#line 169
  if ((unsigned long )nfss->fscache_key != (unsigned long )((struct nfs_fscache_key *)0)) {
    {
#line 170
    ldv_spin_lock_76___7(& nfs_fscache_keys_lock);
#line 171
    rb_erase(& (nfss->fscache_key)->node, & nfs_fscache_keys);
#line 172
    ldv_spin_unlock_77___6(& nfs_fscache_keys_lock);
#line 173
    kfree((void const   *)nfss->fscache_key);
#line 174
    nfss->fscache_key = (struct nfs_fscache_key *)0;
    }
  } else {

  }
#line 176
  return;
}
}
#line 181 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void nfs_fscache_init_inode(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct nfs_server *tmp___0 ;

  {
  {
#line 183
  tmp = NFS_I((struct inode  const  *)inode);
#line 183
  nfsi = tmp;
#line 185
  nfsi->fscache = (struct fscache_cookie *)0;
  }
#line 186
  if (((int )inode->i_mode & 61440) != 32768) {
#line 187
    return;
  } else {

  }
  {
#line 188
  tmp___0 = NFS_SB((struct super_block  const  *)inode->i_sb);
#line 188
  nfsi->fscache = fscache_acquire_cookie(tmp___0->fscache, & nfs_fscache_inode_object_def,
                                         (void *)nfsi, 0);
  }
#line 190
  return;
}
}
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void nfs_fscache_clear_inode(struct inode *inode ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct fscache_cookie *cookie ;
  struct fscache_cookie *tmp___0 ;
  long tmp___1 ;

  {
  {
#line 198
  tmp = NFS_I((struct inode  const  *)inode);
#line 198
  nfsi = tmp;
#line 199
  tmp___0 = nfs_i_fscache(inode);
#line 199
  cookie = tmp___0;
#line 201
  tmp___1 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 201
  if (tmp___1 != 0L) {
    {
#line 201
    printk("\001dNFS: clear cookie (0x%p/0x%p)\n", nfsi, cookie);
    }
  } else {

  }
  {
#line 203
  fscache_relinquish_cookie(cookie, 0);
#line 204
  nfsi->fscache = (struct fscache_cookie *)0;
  }
#line 205
  return;
}
}
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
static bool nfs_fscache_can_enable(void *data ) 
{ 
  struct inode *inode ;
  bool tmp ;
  int tmp___0 ;

  {
  {
#line 209
  inode = (struct inode *)data;
#line 211
  tmp = inode_is_open_for_write((struct inode  const  *)inode);
  }
#line 211
  if ((int )tmp != 0) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return ((bool )tmp___0);
}
}
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void nfs_fscache_open_file(struct inode *inode , struct file *filp ) 
{ 
  struct nfs_inode *nfsi ;
  struct nfs_inode *tmp ;
  struct fscache_cookie *cookie ;
  struct fscache_cookie *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  struct nfs_inode *tmp___3 ;
  bool tmp___4 ;
  bool tmp___5 ;

  {
  {
#line 235
  tmp = NFS_I((struct inode  const  *)inode);
#line 235
  nfsi = tmp;
#line 236
  tmp___0 = nfs_i_fscache(inode);
#line 236
  cookie = tmp___0;
  }
#line 238
  if ((unsigned long )cookie == (unsigned long )((struct fscache_cookie *)0)) {
#line 239
    return;
  } else {

  }
  {
#line 241
  tmp___5 = inode_is_open_for_write((struct inode  const  *)inode);
  }
#line 241
  if ((int )tmp___5) {
    {
#line 242
    tmp___1 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
    }
#line 242
    if (tmp___1 != 0L) {
      {
#line 242
      printk("\001dNFS: nfsi 0x%p disabling cache\n", nfsi);
      }
    } else {

    }
    {
#line 243
    clear_bit(5L, (unsigned long volatile   *)(& nfsi->flags));
#line 244
    fscache_disable_cookie(cookie, 1);
#line 245
    fscache_uncache_all_inode_pages(cookie, inode);
    }
  } else {
    {
#line 247
    tmp___2 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
    }
#line 247
    if (tmp___2 != 0L) {
      {
#line 247
      printk("\001dNFS: nfsi 0x%p enabling cache\n", nfsi);
      }
    } else {

    }
    {
#line 248
    fscache_enable_cookie(cookie, & nfs_fscache_can_enable, (void *)inode);
#line 249
    tmp___4 = fscache_cookie_enabled(cookie);
    }
#line 249
    if ((int )tmp___4) {
      {
#line 250
      tmp___3 = NFS_I((struct inode  const  *)inode);
#line 250
      set_bit(5L, (unsigned long volatile   *)(& tmp___3->flags));
      }
    } else {

    }
  }
#line 252
  return;
}
}
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
static char const   __kstrtab_nfs_fscache_open_file[22U]  = 
#line 253
  {      'n',      'f',      's',      '_', 
        'f',      's',      'c',      'a', 
        'c',      'h',      'e',      '_', 
        'o',      'p',      'e',      'n', 
        '_',      'f',      'i',      'l', 
        'e',      '\000'};
#line 253
struct kernel_symbol  const  __ksymtab_nfs_fscache_open_file ;
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
struct kernel_symbol  const  __ksymtab_nfs_fscache_open_file  =    {(unsigned long )(& nfs_fscache_open_file), (char const   *)(& __kstrtab_nfs_fscache_open_file)};
#line 260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
int nfs_fscache_release_page(struct page *page , gfp_t gfp ) 
{ 
  struct fscache_cookie *cookie ;
  struct fscache_cookie *tmp ;
  long tmp___0 ;
  struct nfs_inode *tmp___1 ;
  long tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 262
  tmp___5 = PagePrivate2((struct page  const  *)page);
  }
#line 262
  if (tmp___5 != 0) {
    {
#line 263
    tmp = nfs_i_fscache((page->__annonCompField47.mapping)->host);
#line 263
    cookie = tmp;
#line 265
    tmp___0 = __builtin_expect((unsigned long )cookie == (unsigned long )((struct fscache_cookie *)0),
                               0L);
    }
#line 265
    if (tmp___0 != 0L) {
      {
#line 265
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/fscache.c"),
                           "i" (265), "i" (12UL));
#line 265
      __builtin_unreachable();
      }
    } else {

    }
    {
#line 266
    tmp___2 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
    }
#line 266
    if (tmp___2 != 0L) {
      {
#line 266
      tmp___1 = NFS_I((struct inode  const  *)(page->__annonCompField47.mapping)->host);
#line 266
      printk("\001dNFS: fscache releasepage (0x%p/0x%p/0x%p)\n", cookie, page, tmp___1);
      }
    } else {

    }
    {
#line 269
    tmp___3 = fscache_maybe_release_page(cookie, page, gfp);
    }
#line 269
    if (tmp___3) {
#line 269
      tmp___4 = 0;
    } else {
#line 269
      tmp___4 = 1;
    }
#line 269
    if (tmp___4) {
#line 270
      return (0);
    } else {

    }
    {
#line 272
    nfs_add_fscache_stats((page->__annonCompField47.mapping)->host, 4, 1L);
    }
  } else {

  }
#line 276
  return (1);
}
}
#line 283 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void __nfs_fscache_invalidate_page(struct page *page , struct inode *inode ) 
{ 
  struct fscache_cookie *cookie ;
  struct fscache_cookie *tmp ;
  long tmp___0 ;
  struct nfs_inode *tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;

  {
  {
#line 285
  tmp = nfs_i_fscache(inode);
#line 285
  cookie = tmp;
#line 287
  tmp___0 = __builtin_expect((unsigned long )cookie == (unsigned long )((struct fscache_cookie *)0),
                             0L);
  }
#line 287
  if (tmp___0 != 0L) {
    {
#line 287
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/fscache.c"),
                         "i" (287), "i" (12UL));
#line 287
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 289
  tmp___2 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 289
  if (tmp___2 != 0L) {
    {
#line 289
    tmp___1 = NFS_I((struct inode  const  *)inode);
#line 289
    printk("\001dNFS: fscache invalidatepage (0x%p/0x%p/0x%p)\n", cookie, page, tmp___1);
    }
  } else {

  }
  {
#line 292
  fscache_wait_on_page_write(cookie, page);
#line 294
  tmp___3 = PageLocked((struct page  const  *)page);
#line 294
  tmp___4 = __builtin_expect(tmp___3 == 0, 0L);
  }
#line 294
  if (tmp___4 != 0L) {
    {
#line 294
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/fscache.c"),
                         "i" (294), "i" (12UL));
#line 294
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 295
  fscache_uncache_page(cookie, page);
#line 296
  nfs_add_fscache_stats((page->__annonCompField47.mapping)->host, 4, 1L);
  }
#line 297
  return;
}
}
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
static void nfs_readpage_from_fscache_complete(struct page *page , void *context ,
                                               int error ) 
{ 
  long tmp ;

  {
  {
#line 308
  tmp = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 308
  if (tmp != 0L) {
    {
#line 308
    printk("\001dNFS: readpage_from_fscache_complete (0x%p/0x%p/%d)\n", page, context,
           error);
    }
  } else {

  }
#line 314
  if (error == 0) {
    {
#line 315
    SetPageUptodate(page);
#line 316
    unlock_page(page);
    }
  } else {
    {
#line 318
    error = nfs_readpage_async((struct nfs_open_context *)context, (page->__annonCompField47.mapping)->host,
                               page);
    }
#line 319
    if (error != 0) {
      {
#line 320
      unlock_page(page);
      }
    } else {

    }
  }
#line 322
  return;
}
}
#line 327 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
int __nfs_readpage_from_fscache(struct nfs_open_context *ctx , struct inode *inode ,
                                struct page *page ) 
{ 
  int ret ;
  struct fscache_cookie *tmp ;
  long tmp___0 ;
  struct fscache_cookie *tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;

  {
  {
#line 332
  tmp___0 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 332
  if (tmp___0 != 0L) {
    {
#line 332
    tmp = nfs_i_fscache(inode);
#line 332
    printk("\001dNFS: readpage_from_fscache(fsc:%p/p:%p(i:%lx f:%lx)/0x%p)\n", tmp,
           page, page->__annonCompField53.__annonCompField48.index, page->flags, inode);
    }
  } else {

  }
  {
#line 336
  tmp___1 = nfs_i_fscache(inode);
#line 336
  ret = fscache_read_or_alloc_page(tmp___1, page, & nfs_readpage_from_fscache_complete,
                                   (void *)ctx, 208U);
  }
  {
#line 343
  if (ret == 0) {
#line 343
    goto case_0;
  } else {

  }
#line 349
  if (ret == -105) {
#line 349
    goto case_neg_105;
  } else {

  }
#line 350
  if (ret == -61) {
#line 350
    goto case_neg_61;
  } else {

  }
#line 356
  goto switch_default;
  case_0: /* CIL Label */ 
  {
#line 344
  tmp___2 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 344
  if (tmp___2 != 0L) {
    {
#line 344
    printk("\001dNFS:    readpage_from_fscache: BIO submitted\n");
    }
  } else {

  }
  {
#line 346
  nfs_add_fscache_stats(inode, 0, 1L);
  }
#line 347
  return (ret);
  case_neg_105: /* CIL Label */ ;
  case_neg_61: /* CIL Label */ 
  {
#line 351
  nfs_add_fscache_stats(inode, 1, 1L);
#line 352
  tmp___3 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 352
  if (tmp___3 != 0L) {
    {
#line 352
    printk("\001dNFS:    readpage_from_fscache %d\n", ret);
    }
  } else {

  }
#line 354
  return (1);
  switch_default: /* CIL Label */ 
  {
#line 357
  tmp___4 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 357
  if (tmp___4 != 0L) {
    {
#line 357
    printk("\001dNFS:    readpage_from_fscache %d\n", ret);
    }
  } else {

  }
  {
#line 358
  nfs_add_fscache_stats(inode, 1, 1L);
  }
  switch_break: /* CIL Label */ ;
  }
#line 360
  return (ret);
}
}
#line 366 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
int __nfs_readpages_from_fscache(struct nfs_open_context *ctx , struct inode *inode ,
                                 struct address_space *mapping , struct list_head *pages ,
                                 unsigned int *nr_pages ) 
{ 
  unsigned int npages ;
  int ret ;
  struct fscache_cookie *tmp ;
  long tmp___0 ;
  gfp_t tmp___1 ;
  struct fscache_cookie *tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;

  {
  {
#line 372
  npages = *nr_pages;
#line 375
  tmp___0 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 375
  if (tmp___0 != 0L) {
    {
#line 375
    tmp = nfs_i_fscache(inode);
#line 375
    printk("\001dNFS: nfs_getpages_from_fscache (0x%p/%u/0x%p)\n", tmp, npages, inode);
    }
  } else {

  }
  {
#line 378
  tmp___1 = mapping_gfp_mask(mapping);
#line 378
  tmp___2 = nfs_i_fscache(inode);
#line 378
  ret = fscache_read_or_alloc_pages(tmp___2, mapping, pages, nr_pages, & nfs_readpage_from_fscache_complete,
                                    (void *)ctx, tmp___1);
  }
#line 383
  if (*nr_pages < npages) {
    {
#line 384
    nfs_add_fscache_stats(inode, 0, (long )npages);
    }
  } else {

  }
#line 386
  if (*nr_pages != 0U) {
    {
#line 387
    nfs_add_fscache_stats(inode, 1, (long )*nr_pages);
    }
  } else {

  }
  {
#line 391
  if (ret == 0) {
#line 391
    goto case_0;
  } else {

  }
#line 399
  if (ret == -105) {
#line 399
    goto case_neg_105;
  } else {

  }
#line 400
  if (ret == -61) {
#line 400
    goto case_neg_61;
  } else {

  }
#line 405
  goto switch_default;
  case_0: /* CIL Label */ 
  {
#line 392
  tmp___3 = list_empty((struct list_head  const  *)pages);
#line 392
  tmp___4 = __builtin_expect(tmp___3 == 0, 0L);
  }
#line 392
  if (tmp___4 != 0L) {
    {
#line 392
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/fscache.c"),
                         "i" (392), "i" (12UL));
#line 392
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 393
  tmp___5 = __builtin_expect(*nr_pages != 0U, 0L);
  }
#line 393
  if (tmp___5 != 0L) {
    {
#line 393
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"fs/nfs/fscache.c"),
                         "i" (393), "i" (12UL));
#line 393
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 394
  tmp___6 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 394
  if (tmp___6 != 0L) {
    {
#line 394
    printk("\001dNFS: nfs_getpages_from_fscache: submitted\n");
    }
  } else {

  }
#line 397
  return (ret);
  case_neg_105: /* CIL Label */ ;
  case_neg_61: /* CIL Label */ 
  {
#line 401
  tmp___7 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 401
  if (tmp___7 != 0L) {
    {
#line 401
    printk("\001dNFS: nfs_getpages_from_fscache: no page: %d\n", ret);
    }
  } else {

  }
#line 403
  return (1);
  switch_default: /* CIL Label */ 
  {
#line 406
  tmp___8 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 406
  if (tmp___8 != 0L) {
    {
#line 406
    printk("\001dNFS: nfs_getpages_from_fscache: ret  %d\n", ret);
    }
  } else {

  }
  switch_break: /* CIL Label */ ;
  }
#line 410
  return (ret);
}
}
#line 417 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache.c"
void __nfs_readpage_to_fscache(struct inode *inode , struct page *page , int sync ) 
{ 
  int ret ;
  struct fscache_cookie *tmp ;
  long tmp___0 ;
  struct fscache_cookie *tmp___1 ;
  long tmp___2 ;
  struct fscache_cookie *tmp___3 ;

  {
  {
#line 421
  tmp___0 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 421
  if (tmp___0 != 0L) {
    {
#line 421
    tmp = nfs_i_fscache(inode);
#line 421
    printk("\001dNFS: readpage_to_fscache(fsc:%p/p:%p(i:%lx f:%lx)/%d)\n", tmp, page,
           page->__annonCompField53.__annonCompField48.index, page->flags, sync);
    }
  } else {

  }
  {
#line 425
  tmp___1 = nfs_i_fscache(inode);
#line 425
  ret = fscache_write_page(tmp___1, page, 208U);
#line 426
  tmp___2 = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 426
  if (tmp___2 != 0L) {
    {
#line 426
    printk("\001dNFS:     readpage_to_fscache: p:%p(i:%lu f:%lx) ret %d\n", page,
           page->__annonCompField53.__annonCompField48.index, page->flags, ret);
    }
  } else {

  }
#line 430
  if (ret != 0) {
    {
#line 431
    tmp___3 = nfs_i_fscache(inode);
#line 431
    fscache_uncache_page(tmp___3, page);
#line 432
    nfs_add_fscache_stats(inode, 3, 1L);
#line 434
    nfs_add_fscache_stats(inode, 4, 1L);
    }
  } else {
    {
#line 436
    nfs_add_fscache_stats(inode, 2, 1L);
    }
  }
#line 437
  return;
}
}
#line 910 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_fscache.c.aux"
__inline static void ldv_spin_lock_76___7(spinlock_t *lock ) 
{ 


  {
  {
#line 913
  ldv_spin_lock_nfs_fscache_keys_lock();
#line 915
  spin_lock(lock);
  }
#line 916
  return;
}
}
#line 919 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/weaver/.tmp_fscache.c.aux"
__inline static void ldv_spin_unlock_77___6(spinlock_t *lock ) 
{ 


  {
  {
#line 922
  ldv_spin_unlock_nfs_fscache_keys_lock();
#line 924
  spin_unlock(lock);
  }
#line 925
  return;
}
}
#line 223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/page-flags.h"
__inline static void ClearPagePrivate2(struct page *page ) 
{ 


  {
  {
#line 223
  clear_bit(12L, (unsigned long volatile   *)(& page->flags));
  }
#line 224
  return;
}
}
#line 2720 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/sched.h"
extern int _cond_resched(void) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagevec.h"
extern void __pagevec_release(struct pagevec * ) ;
#line 30
extern unsigned int pagevec_lookup(struct pagevec * , struct address_space * , unsigned long  ,
                                   unsigned int  ) ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagevec.h"
__inline static void pagevec_init(struct pagevec *pvec , int cold ) 
{ 


  {
#line 38
  pvec->nr = 0UL;
#line 39
  pvec->cold = (unsigned long )cold;
#line 40
  return;
}
}
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagevec.h"
__inline static unsigned int pagevec_count(struct pagevec *pvec ) 
{ 


  {
#line 49
  return ((unsigned int )pvec->nr);
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/pagevec.h"
__inline static void pagevec_release(struct pagevec *pvec ) 
{ 
  unsigned int tmp ;

  {
  {
#line 68
  tmp = pagevec_count(pvec);
  }
#line 68
  if (tmp != 0U) {
    {
#line 69
    __pagevec_release(pvec);
    }
  } else {

  }
#line 70
  return;
}
}
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
extern int __fscache_register_netfs(struct fscache_netfs * ) ;
#line 213
extern void __fscache_unregister_netfs(struct fscache_netfs * ) ;
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static int fscache_register_netfs(struct fscache_netfs *netfs ) 
{ 
  int tmp ;

  {
  {
#line 267
  tmp = __fscache_register_netfs(netfs);
  }
#line 267
  return (tmp);
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/include/linux/fscache.h"
__inline static void fscache_unregister_netfs(struct fscache_netfs *netfs ) 
{ 


  {
  {
#line 287
  __fscache_unregister_netfs(netfs);
  }
#line 288
  return;
}
}
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
struct fscache_netfs nfs_fscache_netfs  =    {0U, "nfs", 0, {0, 0}};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
int nfs_fscache_register(void) 
{ 
  int tmp ;

  {
  {
#line 40
  tmp = fscache_register_netfs(& nfs_fscache_netfs);
  }
#line 40
  return (tmp);
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
void nfs_fscache_unregister(void) 
{ 


  {
  {
#line 48
  fscache_unregister_netfs(& nfs_fscache_netfs);
  }
#line 49
  return;
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static uint16_t nfs_server_get_key(void const   *cookie_netfs_data , void *buffer ,
                                   uint16_t bufmax ) 
{ 
  struct nfs_client  const  *clp ;
  struct sockaddr_in6  const  *sin6 ;
  struct sockaddr_in  const  *sin ;
  struct nfs_server_key *key ;
  uint16_t len ;

  {
  {
#line 71
  clp = (struct nfs_client  const  *)cookie_netfs_data;
#line 72
  sin6 = (struct sockaddr_in6  const  *)(& clp->cl_addr);
#line 73
  sin = (struct sockaddr_in  const  *)(& clp->cl_addr);
#line 74
  key = (struct nfs_server_key *)buffer;
#line 75
  len = 8U;
#line 77
  key->nfsversion = (uint16_t )(clp->rpc_ops)->version;
#line 78
  key->family = clp->cl_addr.ss_family;
#line 80
  memset((void *)key, 0, (size_t )len);
  }
  {
#line 83
  if ((int )clp->cl_addr.ss_family == 2) {
#line 83
    goto case_2;
  } else {

  }
#line 89
  if ((int )clp->cl_addr.ss_family == 10) {
#line 89
    goto case_10;
  } else {

  }
#line 95
  goto switch_default;
  case_2: /* CIL Label */ 
#line 84
  key->port = sin->sin_port;
#line 85
  key->addr[0].ipv4_addr = sin->sin_addr;
#line 86
  len = (unsigned int )len + 4U;
#line 87
  goto ldv_53215;
  case_10: /* CIL Label */ 
#line 90
  key->port = sin6->sin6_port;
#line 91
  key->addr[0].ipv6_addr = sin6->sin6_addr;
#line 92
  len = (unsigned int )len + 16U;
#line 93
  goto ldv_53215;
  switch_default: /* CIL Label */ 
  {
#line 96
  printk("\fNFS: Unknown network family \'%d\'\n", (int )clp->cl_addr.ss_family);
#line 98
  len = 0U;
  }
#line 99
  goto ldv_53215;
  switch_break: /* CIL Label */ ;
  }
  ldv_53215: ;
#line 102
  return (len);
}
}
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
struct fscache_cookie_def  const  nfs_fscache_server_index_def  = 
#line 110
     {{'N', 'F', 'S', '.', 's', 'e', 'r', 'v', 'e', 'r', '\000'}, 0U, 0, & nfs_server_get_key,
    0, 0, 0, 0, 0, 0, 0};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static uint16_t nfs_super_get_key(void const   *cookie_netfs_data , void *buffer ,
                                  uint16_t bufmax ) 
{ 
  struct nfs_fscache_key  const  *key ;
  struct nfs_server  const  *nfss ;
  uint16_t len ;

  {
#line 123
  nfss = (struct nfs_server  const  *)cookie_netfs_data;
#line 126
  key = (struct nfs_fscache_key  const  *)nfss->fscache_key;
#line 127
  len = (unsigned int )((uint16_t )key->key.uniq_len) + 64U;
#line 128
  if ((int )len > (int )bufmax) {
#line 129
    len = 0U;
  } else {
    {
#line 131
    memcpy(buffer, (void const   *)(& key->key), 64UL);
#line 132
    memcpy(buffer + 64UL, (void const   *)(& key->key.uniquifier), (size_t )key->key.uniq_len);
    }
  }
#line 136
  return (len);
}
}
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
struct fscache_cookie_def  const  nfs_fscache_super_index_def  = 
#line 144
     {{'N', 'F', 'S', '.', 's', 'u', 'p', 'e', 'r', '\000'}, 0U, 0, & nfs_super_get_key,
    0, 0, 0, 0, 0, 0, 0};
#line 169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static uint16_t nfs_fscache_inode_get_key(void const   *cookie_netfs_data , void *buffer ,
                                          uint16_t bufmax ) 
{ 
  struct nfs_inode  const  *nfsi ;
  uint16_t nsize ;

  {
  {
#line 172
  nfsi = (struct nfs_inode  const  *)cookie_netfs_data;
#line 176
  nsize = nfsi->fh.size;
#line 177
  memcpy(buffer, (void const   *)(& nfsi->fh.data), (size_t )nsize);
  }
#line 178
  return (nsize);
}
}
#line 187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static void nfs_fscache_inode_get_attr(void const   *cookie_netfs_data , uint64_t *size ) 
{ 
  struct nfs_inode  const  *nfsi ;

  {
#line 190
  nfsi = (struct nfs_inode  const  *)cookie_netfs_data;
#line 192
  *size = (uint64_t )nfsi->vfs_inode.i_size;
#line 193
  return;
}
}
#line 203 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static uint16_t nfs_fscache_inode_get_aux(void const   *cookie_netfs_data , void *buffer ,
                                          uint16_t bufmax ) 
{ 
  struct nfs_fscache_inode_auxdata auxdata ;
  struct nfs_inode  const  *nfsi ;
  struct nfs_server *tmp ;

  {
  {
#line 207
  nfsi = (struct nfs_inode  const  *)cookie_netfs_data;
#line 209
  memset((void *)(& auxdata), 0, 48UL);
#line 210
  auxdata.size = nfsi->vfs_inode.i_size;
#line 211
  auxdata.mtime = nfsi->vfs_inode.i_mtime;
#line 212
  auxdata.ctime = nfsi->vfs_inode.i_ctime;
#line 214
  tmp = NFS_SERVER(& nfsi->vfs_inode);
  }
#line 214
  if ((unsigned int )((tmp->nfs_client)->rpc_ops)->version == 4U) {
#line 215
    auxdata.change_attr = nfsi->vfs_inode.i_version;
  } else {

  }
#line 217
  if ((unsigned int )bufmax > 48U) {
#line 218
    bufmax = 48U;
  } else {

  }
  {
#line 220
  memcpy(buffer, (void const   *)(& auxdata), (size_t )bufmax);
  }
#line 221
  return (bufmax);
}
}
#line 231 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static enum fscache_checkaux nfs_fscache_inode_check_aux(void *cookie_netfs_data ,
                                                         void const   *data , uint16_t datalen ) 
{ 
  struct nfs_fscache_inode_auxdata auxdata ;
  struct nfs_inode *nfsi ;
  struct nfs_server *tmp ;
  int tmp___0 ;

  {
#line 236
  nfsi = (struct nfs_inode *)cookie_netfs_data;
#line 238
  if ((unsigned int )datalen != 48U) {
#line 239
    return (2);
  } else {

  }
  {
#line 241
  memset((void *)(& auxdata), 0, 48UL);
#line 242
  auxdata.size = nfsi->vfs_inode.i_size;
#line 243
  auxdata.mtime = nfsi->vfs_inode.i_mtime;
#line 244
  auxdata.ctime = nfsi->vfs_inode.i_ctime;
#line 246
  tmp = NFS_SERVER((struct inode  const  *)(& nfsi->vfs_inode));
  }
#line 246
  if ((unsigned int )((tmp->nfs_client)->rpc_ops)->version == 4U) {
#line 247
    auxdata.change_attr = nfsi->vfs_inode.i_version;
  } else {

  }
  {
#line 249
  tmp___0 = memcmp(data, (void const   *)(& auxdata), (size_t )datalen);
  }
#line 249
  if (tmp___0 != 0) {
#line 250
    return (2);
  } else {

  }
#line 252
  return (0);
}
}
#line 262 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static void nfs_fscache_inode_now_uncached(void *cookie_netfs_data ) 
{ 
  struct nfs_inode *nfsi ;
  struct pagevec pvec ;
  unsigned long first ;
  int loop ;
  int nr_pages ;
  long tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
  {
#line 264
  nfsi = (struct nfs_inode *)cookie_netfs_data;
#line 269
  pagevec_init(& pvec, 0);
#line 270
  first = 0UL;
#line 272
  tmp = __builtin_expect((nfs_debug & 2048U) != 0U, 0L);
  }
#line 272
  if (tmp != 0L) {
    {
#line 272
    printk("\001dNFS: nfs_inode_now_uncached: nfs_inode 0x%p\n", nfsi);
    }
  } else {

  }
  ldv_53272: 
  {
#line 276
  tmp___0 = pagevec_count(& pvec);
#line 276
  tmp___1 = pagevec_lookup(& pvec, nfsi->vfs_inode.i_mapping, first, 14U - tmp___0);
#line 276
  nr_pages = (int )tmp___1;
  }
#line 280
  if (nr_pages == 0) {
#line 281
    goto ldv_53267;
  } else {

  }
#line 283
  loop = 0;
#line 283
  goto ldv_53269;
  ldv_53268: 
  {
#line 284
  ClearPagePrivate2(pvec.pages[loop]);
#line 283
  loop = loop + 1;
  }
  ldv_53269: ;
#line 283
  if (loop < nr_pages) {
#line 285
    goto ldv_53268;
  } else {

  }
  {
#line 286
  first = (pvec.pages[nr_pages + -1])->__annonCompField53.__annonCompField48.index + 1UL;
#line 288
  pvec.nr = (unsigned long )nr_pages;
#line 289
  pagevec_release(& pvec);
#line 290
  __might_sleep("fs/nfs/fscache-index.c", 290, 0);
#line 290
  _cond_resched();
  }
#line 291
  goto ldv_53272;
  ldv_53267: ;
#line 293
  return;
}
}
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static void nfs_fh_get_context(void *cookie_netfs_data , void *context ) 
{ 


  {
  {
#line 304
  get_nfs_open_context((struct nfs_open_context *)context);
  }
#line 305
  return;
}
}
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
static void nfs_fh_put_context(void *cookie_netfs_data , void *context ) 
{ 


  {
#line 314
  if ((unsigned long )context != (unsigned long )((void *)0)) {
    {
#line 315
    put_nfs_open_context((struct nfs_open_context *)context);
    }
  } else {

  }
#line 316
  return;
}
}
#line 327 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/lkbce/fs/nfs/fscache-index.c"
struct fscache_cookie_def  const  nfs_fscache_inode_object_def  = 
#line 327
     {{'N', 'F', 'S', '.', 'f', 'h', '\000'}, 1U, 0, & nfs_fscache_inode_get_key, & nfs_fscache_inode_get_attr,
    & nfs_fscache_inode_get_aux, & nfs_fscache_inode_check_aux, & nfs_fh_get_context,
    & nfs_fh_put_context, 0, & nfs_fscache_inode_now_uncached};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device  const  *dev ) ;
#line 24
int ldv_dev_set_drvdata(struct device *dev , void *data ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_xzalloc(size_t size ) ;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 29
  if ((unsigned long )dev != (unsigned long )((struct device  const  *)0) && (unsigned long )dev->p != (unsigned long )((struct device_private */* const  */)0)) {
#line 30
    return ((dev->p)->driver_data);
  } else {

  }
#line 32
  return ((void *)0);
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev , void *data ) 
{ 
  void *tmp ;

  {
  {
#line 43
  tmp = ldv_xzalloc(8UL);
#line 43
  dev->p = (struct device_private *)tmp;
#line 44
  (dev->p)->driver_data = data;
  }
#line 46
  return (0);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_zalloc(size_t size ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host , unsigned int size ) 
{ 
  struct spi_master *master ;
  void *tmp ;

  {
  {
#line 27
  tmp = ldv_zalloc((unsigned long )size + 2280UL);
#line 27
  master = (struct spi_master *)tmp;
  }
#line 29
  if ((unsigned long )master == (unsigned long )((struct spi_master *)0)) {
#line 30
    return ((struct spi_master *)0);
  } else {

  }
  {
#line 32
  ldv_dev_set_drvdata(& master->dev, (void *)(master + 1UL));
  }
#line 34
  return (master);
}
}
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/err.h"
long ldv_is_err(void const   *ptr ) ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/err.c"
long ldv_is_err(void const   *ptr ) 
{ 


  {
#line 22
  return ((unsigned long )ptr > 4294967295UL);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/err.c"
void *ldv_err_ptr(long error ) 
{ 


  {
#line 27
  return ((void *)(4294967295L - error));
}
}
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/err.c"
long ldv_ptr_err(void const   *ptr ) 
{ 


  {
#line 32
  return ((long )(4294967295UL - (unsigned long )ptr));
}
}
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/err.c"
long ldv_is_err_or_null(void const   *ptr ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 37
  if ((unsigned long )ptr == (unsigned long )((void const   *)0)) {
#line 37
    tmp___0 = 1;
  } else {
    {
#line 37
    tmp = ldv_is_err(ptr);
    }
#line 37
    if (tmp != 0L) {
#line 37
      tmp___0 = 1;
    } else {
#line 37
      tmp___0 = 0;
    }
  }
#line 37
  return ((long )tmp___0);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void) ;
#line 42
void ldv_switch_to_process_context(void) ;
#line 50
bool ldv_in_interrupt_context(void) ;
#line 133
int ldv_post_probe(int probe_ret_val ) ;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
static bool __ldv_in_interrupt_context  =    0;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void) 
{ 


  {
#line 30
  __ldv_in_interrupt_context = 1;
#line 31
  return;
}
}
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
void ldv_switch_to_process_context(void) 
{ 


  {
#line 36
  __ldv_in_interrupt_context = 0;
#line 37
  return;
}
}
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
bool ldv_in_interrupt_context(void) 
{ 


  {
#line 41
  return (__ldv_in_interrupt_context);
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
static int ldv_filter_positive_int(int val ) 
{ 


  {
  {
#line 46
  __VERIFIER_assume(val <= 0);
  }
#line 47
  return (val);
}
}
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_post_init(int init_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 56
  tmp = ldv_filter_positive_int(init_ret_val);
  }
#line 56
  return (tmp);
}
}
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 62
  tmp = ldv_filter_positive_int(probe_ret_val);
  }
#line 62
  return (tmp);
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val ) 
{ 
  int tmp ;

  {
  {
#line 68
  tmp = ldv_filter_positive_int(ret_val);
  }
#line 68
  return (tmp);
}
}
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n , size_t size , gfp_t flags ) ;
#line 28
extern void ldv_check_alloc_flags(gfp_t  ) ;
#line 29
extern void ldv_after_alloc(void * ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_malloc(size_t size ) ;
#line 24
void *ldv_calloc(size_t nmemb , size_t size ) ;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kmalloc(size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 25
  ldv_check_alloc_flags(flags);
#line 26
  res = ldv_malloc(size);
#line 27
  ldv_after_alloc(res);
  }
#line 29
  return (res);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 36
  ldv_check_alloc_flags(flags);
#line 37
  res = ldv_calloc(n, size);
#line 38
  ldv_after_alloc(res);
  }
#line 40
  return (res);
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kzalloc(size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 47
  ldv_check_alloc_flags(flags);
#line 48
  res = ldv_zalloc(size);
#line 49
  ldv_after_alloc(res);
  }
#line 51
  return (res);
}
}
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n , size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 58
  ldv_check_alloc_flags(flags);
#line 59
  res = ldv_malloc(n * size);
#line 60
  ldv_after_alloc(res);
  }
#line 62
  return (res);
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/common.h"
extern void __VERIFIER_error(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/gcc.c"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 26
  return (exp);
}
}
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/gcc.c"
void __builtin_trap(void) 
{ 


  {
  {
#line 37
  __VERIFIER_error();
  }
#line 38
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.h"
extern void *external_allocated_data(void) ;
#line 33
void *ldv_malloc_unknown_size(void) ;
#line 34
void *ldv_calloc_unknown_size(void) ;
#line 35
void *ldv_zalloc_unknown_size(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
extern void *malloc(size_t  ) ;
#line 25
extern void *calloc(size_t  , size_t  ) ;
#line 26
extern void free(void * ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_malloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 31
  tmp___1 = ldv_undef_int();
  }
#line 31
  if (tmp___1 != 0) {
    {
#line 32
    tmp = malloc(size);
#line 32
    res = tmp;
#line 34
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 35
    tmp___0 = ldv_is_err((void const   *)res);
#line 35
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 37
    return (res);
  } else {
#line 40
    return ((void *)0);
  }
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_calloc(size_t nmemb , size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 45
  tmp___1 = ldv_undef_int();
  }
#line 45
  if (tmp___1 != 0) {
    {
#line 46
    tmp = calloc(nmemb, size);
#line 46
    res = tmp;
#line 48
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 49
    tmp___0 = ldv_is_err((void const   *)res);
#line 49
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 51
    return (res);
  } else {
#line 54
    return ((void *)0);
  }
}
}
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_zalloc(size_t size ) 
{ 
  void *tmp ;

  {
  {
#line 59
  tmp = ldv_calloc(1UL, size);
  }
#line 59
  return (tmp);
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void ldv_free(void *s ) 
{ 


  {
  {
#line 64
  free(s);
  }
#line 65
  return;
}
}
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xmalloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 69
  tmp = malloc(size);
#line 69
  res = tmp;
#line 71
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 72
  tmp___0 = ldv_is_err((void const   *)res);
#line 72
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 74
  return (res);
}
}
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xzalloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 79
  tmp = calloc(1UL, size);
#line 79
  res = tmp;
#line 81
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 82
  tmp___0 = ldv_is_err((void const   *)res);
#line 82
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 84
  return (res);
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_malloc_unknown_size(void) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 89
  tmp___1 = ldv_undef_int();
  }
#line 89
  if (tmp___1 != 0) {
    {
#line 90
    tmp = external_allocated_data();
#line 90
    res = tmp;
#line 92
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 93
    tmp___0 = ldv_is_err((void const   *)res);
#line 93
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 95
    return (res);
  } else {
#line 98
    return ((void *)0);
  }
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_calloc_unknown_size(void) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 103
  tmp___1 = ldv_undef_int();
  }
#line 103
  if (tmp___1 != 0) {
    {
#line 104
    tmp = external_allocated_data();
#line 104
    res = tmp;
#line 106
    memset(res, 0, 8UL);
#line 107
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 108
    tmp___0 = ldv_is_err((void const   *)res);
#line 108
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 110
    return (res);
  } else {
#line 113
    return ((void *)0);
  }
}
}
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_zalloc_unknown_size(void) 
{ 
  void *tmp ;

  {
  {
#line 118
  tmp = ldv_calloc_unknown_size();
  }
#line 118
  return (tmp);
}
}
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 123
  tmp = external_allocated_data();
#line 123
  res = tmp;
#line 125
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 126
  tmp___0 = ldv_is_err((void const   *)res);
#line 126
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 128
  return (res);
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_long(void) ;
#line 24
unsigned int ldv_undef_uint(void) ;
#line 25
unsigned long ldv_undef_ulong(void) ;
#line 26
unsigned long long ldv_undef_ulonglong(void) ;
#line 27
void *ldv_undef_ptr(void) ;
#line 30
int ldv_undef_int_positive(void) ;
#line 33
int ldv_undef_int_negative(void) ;
#line 36
int ldv_undef_int_nonpositive(void) ;
#line 39
void *ldv_undef_ptr_non_null(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
extern int __VERIFIER_nondet_int(void) ;
#line 26
extern long __VERIFIER_nondet_long(void) ;
#line 33
extern unsigned int __VERIFIER_nondet_uint(void) ;
#line 36
extern unsigned long __VERIFIER_nondet_ulong(void) ;
#line 37
extern unsigned long long __VERIFIER_nondet_ulonglong(void) ;
#line 38
extern void *__VERIFIER_nondet_pointer(void) ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int(void) 
{ 
  int tmp ;

  {
  {
#line 43
  tmp = __VERIFIER_nondet_int();
  }
#line 43
  return (tmp);
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_long(void) 
{ 
  long tmp ;

  {
  {
#line 48
  tmp = __VERIFIER_nondet_long();
  }
#line 48
  return ((int )tmp);
}
}
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned int ldv_undef_uint(void) 
{ 
  unsigned int tmp ;

  {
  {
#line 53
  tmp = __VERIFIER_nondet_uint();
  }
#line 53
  return (tmp);
}
}
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
void *ldv_undef_ptr(void) 
{ 
  void *tmp ;

  {
  {
#line 58
  tmp = __VERIFIER_nondet_pointer();
  }
#line 58
  return (tmp);
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned long ldv_undef_ulong(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 63
  tmp = __VERIFIER_nondet_ulong();
  }
#line 63
  return (tmp);
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void) 
{ 
  unsigned long long tmp ;

  {
  {
#line 68
  tmp = __VERIFIER_nondet_ulonglong();
  }
#line 68
  return (tmp);
}
}
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_positive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 73
  tmp = ldv_undef_int();
#line 73
  ret = tmp;
#line 75
  __VERIFIER_assume(ret > 0);
  }
#line 77
  return (ret);
}
}
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_negative(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 82
  tmp = ldv_undef_int();
#line 82
  ret = tmp;
#line 84
  __VERIFIER_assume(ret < 0);
  }
#line 86
  return (ret);
}
}
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_nonpositive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 91
  tmp = ldv_undef_int();
#line 91
  ret = tmp;
#line 93
  __VERIFIER_assume(ret <= 0);
  }
#line 95
  return (ret);
}
}
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/job/root/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void) 
{ 
  void *ret ;
  int tmp ;

  {
  {
#line 100
  tmp = ldv_undef_int();
#line 100
  ret = (void *)((long )tmp);
#line 102
  __VERIFIER_assume((unsigned long )ret != (unsigned long )((void *)0));
  }
#line 104
  return (ret);
}
}
#line 1 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/rsg/models/spinlock.bk.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(int expr ) ;
#line 2
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(int expr ) ;
#line 3
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(int expr ) ;
#line 4
void ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(int expr ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin__xmit_lock_of_netdev_queue  =    1;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 28
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 30
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 32
  ldv_spin__xmit_lock_of_netdev_queue = 2;
  }
#line 33
  return;
}
}
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 39
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin__xmit_lock_of_netdev_queue == 2);
#line 41
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 2);
#line 43
  ldv_spin__xmit_lock_of_netdev_queue = 1;
  }
#line 44
  return;
}
}
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 52
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 54
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 57
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 60
  if (is_spin_held_by_another_thread != 0) {
#line 62
    return (0);
  } else {
#line 66
    ldv_spin__xmit_lock_of_netdev_queue = 2;
#line 68
    return (1);
  }
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 76
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 78
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 1);
  }
#line 79
  return;
}
}
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 87
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 90
  if (ldv_spin__xmit_lock_of_netdev_queue == 1 && is_spin_held_by_another_thread == 0) {
#line 92
    return (0);
  } else {
#line 96
    return (1);
  }
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;

  {
  {
#line 104
  tmp = ldv_spin_is_locked__xmit_lock_of_netdev_queue();
  }
#line 104
  return (tmp == 0);
}
}
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 113
  is_spin_contended = ldv_undef_int();
  }
#line 116
  if (is_spin_contended != 0) {
#line 118
    return (0);
  } else {
#line 122
    return (1);
  }
}
}
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 132
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 134
  __VERIFIER_assume(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 137
  atomic_value_after_dec = ldv_undef_int();
  }
#line 140
  if (atomic_value_after_dec == 0) {
#line 142
    ldv_spin__xmit_lock_of_netdev_queue = 2;
#line 144
    return (1);
  } else {

  }
#line 148
  return (0);
}
}
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_addr_list_lock_of_net_device  =    1;
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 156
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_addr_list_lock_of_net_device == 1);
#line 158
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 1);
#line 160
  ldv_spin_addr_list_lock_of_net_device = 2;
  }
#line 161
  return;
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 167
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_addr_list_lock_of_net_device == 2);
#line 169
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 2);
#line 171
  ldv_spin_addr_list_lock_of_net_device = 1;
  }
#line 172
  return;
}
}
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 180
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_addr_list_lock_of_net_device == 1);
#line 182
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 1);
#line 185
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 188
  if (is_spin_held_by_another_thread != 0) {
#line 190
    return (0);
  } else {
#line 194
    ldv_spin_addr_list_lock_of_net_device = 2;
#line 196
    return (1);
  }
}
}
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 204
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_addr_list_lock_of_net_device == 1);
#line 206
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 1);
  }
#line 207
  return;
}
}
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 215
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 218
  if (ldv_spin_addr_list_lock_of_net_device == 1 && is_spin_held_by_another_thread == 0) {
#line 220
    return (0);
  } else {
#line 224
    return (1);
  }
}
}
#line 229 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 232
  tmp = ldv_spin_is_locked_addr_list_lock_of_net_device();
  }
#line 232
  return (tmp == 0);
}
}
#line 236 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 241
  is_spin_contended = ldv_undef_int();
  }
#line 244
  if (is_spin_contended != 0) {
#line 246
    return (0);
  } else {
#line 250
    return (1);
  }
}
}
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_addr_list_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 260
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_addr_list_lock_of_net_device == 1);
#line 262
  __VERIFIER_assume(ldv_spin_addr_list_lock_of_net_device == 1);
#line 265
  atomic_value_after_dec = ldv_undef_int();
  }
#line 268
  if (atomic_value_after_dec == 0) {
#line 270
    ldv_spin_addr_list_lock_of_net_device = 2;
#line 272
    return (1);
  } else {

  }
#line 276
  return (0);
}
}
#line 278 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_alloc_lock_of_task_struct  =    1;
#line 281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 284
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_alloc_lock_of_task_struct == 1);
#line 286
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 1);
#line 288
  ldv_spin_alloc_lock_of_task_struct = 2;
  }
#line 289
  return;
}
}
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 295
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_alloc_lock_of_task_struct == 2);
#line 297
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 2);
#line 299
  ldv_spin_alloc_lock_of_task_struct = 1;
  }
#line 300
  return;
}
}
#line 303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 308
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_alloc_lock_of_task_struct == 1);
#line 310
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 1);
#line 313
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 316
  if (is_spin_held_by_another_thread != 0) {
#line 318
    return (0);
  } else {
#line 322
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 324
    return (1);
  }
}
}
#line 329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 332
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_alloc_lock_of_task_struct == 1);
#line 334
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 1);
  }
#line 335
  return;
}
}
#line 338 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 343
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 346
  if (ldv_spin_alloc_lock_of_task_struct == 1 && is_spin_held_by_another_thread == 0) {
#line 348
    return (0);
  } else {
#line 352
    return (1);
  }
}
}
#line 357 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 360
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
  }
#line 360
  return (tmp == 0);
}
}
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 369
  is_spin_contended = ldv_undef_int();
  }
#line 372
  if (is_spin_contended != 0) {
#line 374
    return (0);
  } else {
#line 378
    return (1);
  }
}
}
#line 383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 388
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_alloc_lock_of_task_struct == 1);
#line 390
  __VERIFIER_assume(ldv_spin_alloc_lock_of_task_struct == 1);
#line 393
  atomic_value_after_dec = ldv_undef_int();
  }
#line 396
  if (atomic_value_after_dec == 0) {
#line 398
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 400
    return (1);
  } else {

  }
#line 404
  return (0);
}
}
#line 406 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_cl_lock_of_nfs_client  =    1;
#line 409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_cl_lock_of_nfs_client(void) 
{ 


  {
  {
#line 412
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_cl_lock_of_nfs_client == 1);
#line 414
  __VERIFIER_assume(ldv_spin_cl_lock_of_nfs_client == 1);
#line 416
  ldv_spin_cl_lock_of_nfs_client = 2;
  }
#line 417
  return;
}
}
#line 420 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_cl_lock_of_nfs_client(void) 
{ 


  {
  {
#line 423
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_cl_lock_of_nfs_client == 2);
#line 425
  __VERIFIER_assume(ldv_spin_cl_lock_of_nfs_client == 2);
#line 427
  ldv_spin_cl_lock_of_nfs_client = 1;
  }
#line 428
  return;
}
}
#line 431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_cl_lock_of_nfs_client(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 436
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_cl_lock_of_nfs_client == 1);
#line 438
  __VERIFIER_assume(ldv_spin_cl_lock_of_nfs_client == 1);
#line 441
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 444
  if (is_spin_held_by_another_thread != 0) {
#line 446
    return (0);
  } else {
#line 450
    ldv_spin_cl_lock_of_nfs_client = 2;
#line 452
    return (1);
  }
}
}
#line 457 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_cl_lock_of_nfs_client(void) 
{ 


  {
  {
#line 460
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_cl_lock_of_nfs_client == 1);
#line 462
  __VERIFIER_assume(ldv_spin_cl_lock_of_nfs_client == 1);
  }
#line 463
  return;
}
}
#line 466 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_cl_lock_of_nfs_client(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 471
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 474
  if (ldv_spin_cl_lock_of_nfs_client == 1 && is_spin_held_by_another_thread == 0) {
#line 476
    return (0);
  } else {
#line 480
    return (1);
  }
}
}
#line 485 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_cl_lock_of_nfs_client(void) 
{ 
  int tmp ;

  {
  {
#line 488
  tmp = ldv_spin_is_locked_cl_lock_of_nfs_client();
  }
#line 488
  return (tmp == 0);
}
}
#line 492 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_cl_lock_of_nfs_client(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 497
  is_spin_contended = ldv_undef_int();
  }
#line 500
  if (is_spin_contended != 0) {
#line 502
    return (0);
  } else {
#line 506
    return (1);
  }
}
}
#line 511 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_cl_lock_of_nfs_client(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 516
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_cl_lock_of_nfs_client == 1);
#line 518
  __VERIFIER_assume(ldv_spin_cl_lock_of_nfs_client == 1);
#line 521
  atomic_value_after_dec = ldv_undef_int();
  }
#line 524
  if (atomic_value_after_dec == 0) {
#line 526
    ldv_spin_cl_lock_of_nfs_client = 2;
#line 528
    return (1);
  } else {

  }
#line 532
  return (0);
}
}
#line 534 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_i_lock_of_inode  =    1;
#line 537 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
  {
#line 540
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_i_lock_of_inode == 1);
#line 542
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 1);
#line 544
  ldv_spin_i_lock_of_inode = 2;
  }
#line 545
  return;
}
}
#line 548 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
  {
#line 551
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_i_lock_of_inode == 2);
#line 553
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 2);
#line 555
  ldv_spin_i_lock_of_inode = 1;
  }
#line 556
  return;
}
}
#line 559 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 564
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_i_lock_of_inode == 1);
#line 566
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 1);
#line 569
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 572
  if (is_spin_held_by_another_thread != 0) {
#line 574
    return (0);
  } else {
#line 578
    ldv_spin_i_lock_of_inode = 2;
#line 580
    return (1);
  }
}
}
#line 585 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
  {
#line 588
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_i_lock_of_inode == 1);
#line 590
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 1);
  }
#line 591
  return;
}
}
#line 594 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 599
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 602
  if (ldv_spin_i_lock_of_inode == 1 && is_spin_held_by_another_thread == 0) {
#line 604
    return (0);
  } else {
#line 608
    return (1);
  }
}
}
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;

  {
  {
#line 616
  tmp = ldv_spin_is_locked_i_lock_of_inode();
  }
#line 616
  return (tmp == 0);
}
}
#line 620 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 625
  is_spin_contended = ldv_undef_int();
  }
#line 628
  if (is_spin_contended != 0) {
#line 630
    return (0);
  } else {
#line 634
    return (1);
  }
}
}
#line 639 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 644
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_i_lock_of_inode == 1);
#line 646
  __VERIFIER_assume(ldv_spin_i_lock_of_inode == 1);
#line 649
  atomic_value_after_dec = ldv_undef_int();
  }
#line 652
  if (atomic_value_after_dec == 0) {
#line 654
    ldv_spin_i_lock_of_inode = 2;
#line 656
    return (1);
  } else {

  }
#line 660
  return (0);
}
}
#line 662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock  =    1;
#line 665 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock(void) 
{ 


  {
  {
#line 668
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock == 1);
#line 670
  __VERIFIER_assume(ldv_spin_lock == 1);
#line 672
  ldv_spin_lock = 2;
  }
#line 673
  return;
}
}
#line 676 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock(void) 
{ 


  {
  {
#line 679
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock == 2);
#line 681
  __VERIFIER_assume(ldv_spin_lock == 2);
#line 683
  ldv_spin_lock = 1;
  }
#line 684
  return;
}
}
#line 687 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 692
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock == 1);
#line 694
  __VERIFIER_assume(ldv_spin_lock == 1);
#line 697
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 700
  if (is_spin_held_by_another_thread != 0) {
#line 702
    return (0);
  } else {
#line 706
    ldv_spin_lock = 2;
#line 708
    return (1);
  }
}
}
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock(void) 
{ 


  {
  {
#line 716
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock == 1);
#line 718
  __VERIFIER_assume(ldv_spin_lock == 1);
  }
#line 719
  return;
}
}
#line 722 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 727
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 730
  if (ldv_spin_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 732
    return (0);
  } else {
#line 736
    return (1);
  }
}
}
#line 741 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock(void) 
{ 
  int tmp ;

  {
  {
#line 744
  tmp = ldv_spin_is_locked_lock();
  }
#line 744
  return (tmp == 0);
}
}
#line 748 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 753
  is_spin_contended = ldv_undef_int();
  }
#line 756
  if (is_spin_contended != 0) {
#line 758
    return (0);
  } else {
#line 762
    return (1);
  }
}
}
#line 767 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 772
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock == 1);
#line 774
  __VERIFIER_assume(ldv_spin_lock == 1);
#line 777
  atomic_value_after_dec = ldv_undef_int();
  }
#line 780
  if (atomic_value_after_dec == 0) {
#line 782
    ldv_spin_lock = 2;
#line 784
    return (1);
  } else {

  }
#line 788
  return (0);
}
}
#line 790 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  =    1;
#line 793 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 796
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 798
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 800
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
  }
#line 801
  return;
}
}
#line 804 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 807
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_NOT_ARG_SIGN == 2);
#line 809
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 2);
#line 811
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
  }
#line 812
  return;
}
}
#line 815 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 820
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 822
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 825
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 828
  if (is_spin_held_by_another_thread != 0) {
#line 830
    return (0);
  } else {
#line 834
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 836
    return (1);
  }
}
}
#line 841 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 844
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 846
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
  }
#line 847
  return;
}
}
#line 850 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 855
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 858
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && is_spin_held_by_another_thread == 0) {
#line 860
    return (0);
  } else {
#line 864
    return (1);
  }
}
}
#line 869 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 872
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
  }
#line 872
  return (tmp == 0);
}
}
#line 876 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 881
  is_spin_contended = ldv_undef_int();
  }
#line 884
  if (is_spin_contended != 0) {
#line 886
    return (0);
  } else {
#line 890
    return (1);
  }
}
}
#line 895 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 900
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 902
  __VERIFIER_assume(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 905
  atomic_value_after_dec = ldv_undef_int();
  }
#line 908
  if (atomic_value_after_dec == 0) {
#line 910
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 912
    return (1);
  } else {

  }
#line 916
  return (0);
}
}
#line 918 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_nfs_commit_info  =    1;
#line 921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_nfs_commit_info(void) 
{ 


  {
  {
#line 924
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_nfs_commit_info == 1);
#line 926
  __VERIFIER_assume(ldv_spin_lock_of_nfs_commit_info == 1);
#line 928
  ldv_spin_lock_of_nfs_commit_info = 2;
  }
#line 929
  return;
}
}
#line 932 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_nfs_commit_info(void) 
{ 


  {
  {
#line 935
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_nfs_commit_info == 2);
#line 937
  __VERIFIER_assume(ldv_spin_lock_of_nfs_commit_info == 2);
#line 939
  ldv_spin_lock_of_nfs_commit_info = 1;
  }
#line 940
  return;
}
}
#line 943 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_nfs_commit_info(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 948
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_commit_info == 1);
#line 950
  __VERIFIER_assume(ldv_spin_lock_of_nfs_commit_info == 1);
#line 953
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 956
  if (is_spin_held_by_another_thread != 0) {
#line 958
    return (0);
  } else {
#line 962
    ldv_spin_lock_of_nfs_commit_info = 2;
#line 964
    return (1);
  }
}
}
#line 969 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_nfs_commit_info(void) 
{ 


  {
  {
#line 972
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_commit_info == 1);
#line 974
  __VERIFIER_assume(ldv_spin_lock_of_nfs_commit_info == 1);
  }
#line 975
  return;
}
}
#line 978 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_nfs_commit_info(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 983
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 986
  if (ldv_spin_lock_of_nfs_commit_info == 1 && is_spin_held_by_another_thread == 0) {
#line 988
    return (0);
  } else {
#line 992
    return (1);
  }
}
}
#line 997 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_nfs_commit_info(void) 
{ 
  int tmp ;

  {
  {
#line 1000
  tmp = ldv_spin_is_locked_lock_of_nfs_commit_info();
  }
#line 1000
  return (tmp == 0);
}
}
#line 1004 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_nfs_commit_info(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1009
  is_spin_contended = ldv_undef_int();
  }
#line 1012
  if (is_spin_contended != 0) {
#line 1014
    return (0);
  } else {
#line 1018
    return (1);
  }
}
}
#line 1023 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_nfs_commit_info(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1028
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_commit_info == 1);
#line 1030
  __VERIFIER_assume(ldv_spin_lock_of_nfs_commit_info == 1);
#line 1033
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1036
  if (atomic_value_after_dec == 0) {
#line 1038
    ldv_spin_lock_of_nfs_commit_info = 2;
#line 1040
    return (1);
  } else {

  }
#line 1044
  return (0);
}
}
#line 1046 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_nfs_direct_req  =    1;
#line 1049 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_nfs_direct_req(void) 
{ 


  {
  {
#line 1052
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_nfs_direct_req == 1);
#line 1054
  __VERIFIER_assume(ldv_spin_lock_of_nfs_direct_req == 1);
#line 1056
  ldv_spin_lock_of_nfs_direct_req = 2;
  }
#line 1057
  return;
}
}
#line 1060 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_nfs_direct_req(void) 
{ 


  {
  {
#line 1063
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_nfs_direct_req == 2);
#line 1065
  __VERIFIER_assume(ldv_spin_lock_of_nfs_direct_req == 2);
#line 1067
  ldv_spin_lock_of_nfs_direct_req = 1;
  }
#line 1068
  return;
}
}
#line 1071 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_nfs_direct_req(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1076
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_direct_req == 1);
#line 1078
  __VERIFIER_assume(ldv_spin_lock_of_nfs_direct_req == 1);
#line 1081
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1084
  if (is_spin_held_by_another_thread != 0) {
#line 1086
    return (0);
  } else {
#line 1090
    ldv_spin_lock_of_nfs_direct_req = 2;
#line 1092
    return (1);
  }
}
}
#line 1097 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_nfs_direct_req(void) 
{ 


  {
  {
#line 1100
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_direct_req == 1);
#line 1102
  __VERIFIER_assume(ldv_spin_lock_of_nfs_direct_req == 1);
  }
#line 1103
  return;
}
}
#line 1106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_nfs_direct_req(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1111
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1114
  if (ldv_spin_lock_of_nfs_direct_req == 1 && is_spin_held_by_another_thread == 0) {
#line 1116
    return (0);
  } else {
#line 1120
    return (1);
  }
}
}
#line 1125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_nfs_direct_req(void) 
{ 
  int tmp ;

  {
  {
#line 1128
  tmp = ldv_spin_is_locked_lock_of_nfs_direct_req();
  }
#line 1128
  return (tmp == 0);
}
}
#line 1132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_nfs_direct_req(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1137
  is_spin_contended = ldv_undef_int();
  }
#line 1140
  if (is_spin_contended != 0) {
#line 1142
    return (0);
  } else {
#line 1146
    return (1);
  }
}
}
#line 1151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_nfs_direct_req(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1156
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_direct_req == 1);
#line 1158
  __VERIFIER_assume(ldv_spin_lock_of_nfs_direct_req == 1);
#line 1161
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1164
  if (atomic_value_after_dec == 0) {
#line 1166
    ldv_spin_lock_of_nfs_direct_req = 2;
#line 1168
    return (1);
  } else {

  }
#line 1172
  return (0);
}
}
#line 1174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_nfs_pgio_header  =    1;
#line 1177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_nfs_pgio_header(void) 
{ 


  {
  {
#line 1180
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_nfs_pgio_header == 1);
#line 1182
  __VERIFIER_assume(ldv_spin_lock_of_nfs_pgio_header == 1);
#line 1184
  ldv_spin_lock_of_nfs_pgio_header = 2;
  }
#line 1185
  return;
}
}
#line 1188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_nfs_pgio_header(void) 
{ 


  {
  {
#line 1191
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_nfs_pgio_header == 2);
#line 1193
  __VERIFIER_assume(ldv_spin_lock_of_nfs_pgio_header == 2);
#line 1195
  ldv_spin_lock_of_nfs_pgio_header = 1;
  }
#line 1196
  return;
}
}
#line 1199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_nfs_pgio_header(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1204
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_pgio_header == 1);
#line 1206
  __VERIFIER_assume(ldv_spin_lock_of_nfs_pgio_header == 1);
#line 1209
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1212
  if (is_spin_held_by_another_thread != 0) {
#line 1214
    return (0);
  } else {
#line 1218
    ldv_spin_lock_of_nfs_pgio_header = 2;
#line 1220
    return (1);
  }
}
}
#line 1225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_nfs_pgio_header(void) 
{ 


  {
  {
#line 1228
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_pgio_header == 1);
#line 1230
  __VERIFIER_assume(ldv_spin_lock_of_nfs_pgio_header == 1);
  }
#line 1231
  return;
}
}
#line 1234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_nfs_pgio_header(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1239
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1242
  if (ldv_spin_lock_of_nfs_pgio_header == 1 && is_spin_held_by_another_thread == 0) {
#line 1244
    return (0);
  } else {
#line 1248
    return (1);
  }
}
}
#line 1253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_nfs_pgio_header(void) 
{ 
  int tmp ;

  {
  {
#line 1256
  tmp = ldv_spin_is_locked_lock_of_nfs_pgio_header();
  }
#line 1256
  return (tmp == 0);
}
}
#line 1260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_nfs_pgio_header(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1265
  is_spin_contended = ldv_undef_int();
  }
#line 1268
  if (is_spin_contended != 0) {
#line 1270
    return (0);
  } else {
#line 1274
    return (1);
  }
}
}
#line 1279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_nfs_pgio_header(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1284
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_nfs_pgio_header == 1);
#line 1286
  __VERIFIER_assume(ldv_spin_lock_of_nfs_pgio_header == 1);
#line 1289
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1292
  if (atomic_value_after_dec == 0) {
#line 1294
    ldv_spin_lock_of_nfs_pgio_header = 2;
#line 1296
    return (1);
  } else {

  }
#line 1300
  return (0);
}
}
#line 1302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lock_of_res_counter  =    1;
#line 1305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lock_of_res_counter(void) 
{ 


  {
  {
#line 1308
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lock_of_res_counter == 1);
#line 1310
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 1);
#line 1312
  ldv_spin_lock_of_res_counter = 2;
  }
#line 1313
  return;
}
}
#line 1316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lock_of_res_counter(void) 
{ 


  {
  {
#line 1319
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lock_of_res_counter == 2);
#line 1321
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 2);
#line 1323
  ldv_spin_lock_of_res_counter = 1;
  }
#line 1324
  return;
}
}
#line 1327 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lock_of_res_counter(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1332
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_res_counter == 1);
#line 1334
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 1);
#line 1337
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1340
  if (is_spin_held_by_another_thread != 0) {
#line 1342
    return (0);
  } else {
#line 1346
    ldv_spin_lock_of_res_counter = 2;
#line 1348
    return (1);
  }
}
}
#line 1353 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lock_of_res_counter(void) 
{ 


  {
  {
#line 1356
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_res_counter == 1);
#line 1358
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 1);
  }
#line 1359
  return;
}
}
#line 1362 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lock_of_res_counter(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1367
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1370
  if (ldv_spin_lock_of_res_counter == 1 && is_spin_held_by_another_thread == 0) {
#line 1372
    return (0);
  } else {
#line 1376
    return (1);
  }
}
}
#line 1381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lock_of_res_counter(void) 
{ 
  int tmp ;

  {
  {
#line 1384
  tmp = ldv_spin_is_locked_lock_of_res_counter();
  }
#line 1384
  return (tmp == 0);
}
}
#line 1388 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lock_of_res_counter(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1393
  is_spin_contended = ldv_undef_int();
  }
#line 1396
  if (is_spin_contended != 0) {
#line 1398
    return (0);
  } else {
#line 1402
    return (1);
  }
}
}
#line 1407 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lock_of_res_counter(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1412
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lock_of_res_counter == 1);
#line 1414
  __VERIFIER_assume(ldv_spin_lock_of_res_counter == 1);
#line 1417
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1420
  if (atomic_value_after_dec == 0) {
#line 1422
    ldv_spin_lock_of_res_counter = 2;
#line 1424
    return (1);
  } else {

  }
#line 1428
  return (0);
}
}
#line 1430 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_lru_lock_of_netns_frags  =    1;
#line 1433 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 1436
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1438
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1440
  ldv_spin_lru_lock_of_netns_frags = 2;
  }
#line 1441
  return;
}
}
#line 1444 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 1447
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_lru_lock_of_netns_frags == 2);
#line 1449
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 2);
#line 1451
  ldv_spin_lru_lock_of_netns_frags = 1;
  }
#line 1452
  return;
}
}
#line 1455 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_lru_lock_of_netns_frags(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1460
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1462
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1465
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1468
  if (is_spin_held_by_another_thread != 0) {
#line 1470
    return (0);
  } else {
#line 1474
    ldv_spin_lru_lock_of_netns_frags = 2;
#line 1476
    return (1);
  }
}
}
#line 1481 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 1484
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1486
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 1);
  }
#line 1487
  return;
}
}
#line 1490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_lru_lock_of_netns_frags(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1495
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1498
  if (ldv_spin_lru_lock_of_netns_frags == 1 && is_spin_held_by_another_thread == 0) {
#line 1500
    return (0);
  } else {
#line 1504
    return (1);
  }
}
}
#line 1509 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_lru_lock_of_netns_frags(void) 
{ 
  int tmp ;

  {
  {
#line 1512
  tmp = ldv_spin_is_locked_lru_lock_of_netns_frags();
  }
#line 1512
  return (tmp == 0);
}
}
#line 1516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_lru_lock_of_netns_frags(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1521
  is_spin_contended = ldv_undef_int();
  }
#line 1524
  if (is_spin_contended != 0) {
#line 1526
    return (0);
  } else {
#line 1530
    return (1);
  }
}
}
#line 1535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_lru_lock_of_netns_frags(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1540
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1542
  __VERIFIER_assume(ldv_spin_lru_lock_of_netns_frags == 1);
#line 1545
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1548
  if (atomic_value_after_dec == 0) {
#line 1550
    ldv_spin_lru_lock_of_netns_frags = 2;
#line 1552
    return (1);
  } else {

  }
#line 1556
  return (0);
}
}
#line 1558 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_nfs_access_lru_lock  =    1;
#line 1561 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_nfs_access_lru_lock(void) 
{ 


  {
  {
#line 1564
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_nfs_access_lru_lock == 1);
#line 1566
  __VERIFIER_assume(ldv_spin_nfs_access_lru_lock == 1);
#line 1568
  ldv_spin_nfs_access_lru_lock = 2;
  }
#line 1569
  return;
}
}
#line 1572 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_nfs_access_lru_lock(void) 
{ 


  {
  {
#line 1575
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_nfs_access_lru_lock == 2);
#line 1577
  __VERIFIER_assume(ldv_spin_nfs_access_lru_lock == 2);
#line 1579
  ldv_spin_nfs_access_lru_lock = 1;
  }
#line 1580
  return;
}
}
#line 1583 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_nfs_access_lru_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1588
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_access_lru_lock == 1);
#line 1590
  __VERIFIER_assume(ldv_spin_nfs_access_lru_lock == 1);
#line 1593
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1596
  if (is_spin_held_by_another_thread != 0) {
#line 1598
    return (0);
  } else {
#line 1602
    ldv_spin_nfs_access_lru_lock = 2;
#line 1604
    return (1);
  }
}
}
#line 1609 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_nfs_access_lru_lock(void) 
{ 


  {
  {
#line 1612
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_access_lru_lock == 1);
#line 1614
  __VERIFIER_assume(ldv_spin_nfs_access_lru_lock == 1);
  }
#line 1615
  return;
}
}
#line 1618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_nfs_access_lru_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1623
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1626
  if (ldv_spin_nfs_access_lru_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 1628
    return (0);
  } else {
#line 1632
    return (1);
  }
}
}
#line 1637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_nfs_access_lru_lock(void) 
{ 
  int tmp ;

  {
  {
#line 1640
  tmp = ldv_spin_is_locked_nfs_access_lru_lock();
  }
#line 1640
  return (tmp == 0);
}
}
#line 1644 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_nfs_access_lru_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1649
  is_spin_contended = ldv_undef_int();
  }
#line 1652
  if (is_spin_contended != 0) {
#line 1654
    return (0);
  } else {
#line 1658
    return (1);
  }
}
}
#line 1663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_nfs_access_lru_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1668
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_access_lru_lock == 1);
#line 1670
  __VERIFIER_assume(ldv_spin_nfs_access_lru_lock == 1);
#line 1673
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1676
  if (atomic_value_after_dec == 0) {
#line 1678
    ldv_spin_nfs_access_lru_lock = 2;
#line 1680
    return (1);
  } else {

  }
#line 1684
  return (0);
}
}
#line 1686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_nfs_client_lock_of_nfs_net  =    1;
#line 1689 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_nfs_client_lock_of_nfs_net(void) 
{ 


  {
  {
#line 1692
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_nfs_client_lock_of_nfs_net == 1);
#line 1694
  __VERIFIER_assume(ldv_spin_nfs_client_lock_of_nfs_net == 1);
#line 1696
  ldv_spin_nfs_client_lock_of_nfs_net = 2;
  }
#line 1697
  return;
}
}
#line 1700 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_nfs_client_lock_of_nfs_net(void) 
{ 


  {
  {
#line 1703
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_nfs_client_lock_of_nfs_net == 2);
#line 1705
  __VERIFIER_assume(ldv_spin_nfs_client_lock_of_nfs_net == 2);
#line 1707
  ldv_spin_nfs_client_lock_of_nfs_net = 1;
  }
#line 1708
  return;
}
}
#line 1711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_nfs_client_lock_of_nfs_net(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1716
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_client_lock_of_nfs_net == 1);
#line 1718
  __VERIFIER_assume(ldv_spin_nfs_client_lock_of_nfs_net == 1);
#line 1721
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1724
  if (is_spin_held_by_another_thread != 0) {
#line 1726
    return (0);
  } else {
#line 1730
    ldv_spin_nfs_client_lock_of_nfs_net = 2;
#line 1732
    return (1);
  }
}
}
#line 1737 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_nfs_client_lock_of_nfs_net(void) 
{ 


  {
  {
#line 1740
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_client_lock_of_nfs_net == 1);
#line 1742
  __VERIFIER_assume(ldv_spin_nfs_client_lock_of_nfs_net == 1);
  }
#line 1743
  return;
}
}
#line 1746 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_nfs_client_lock_of_nfs_net(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1751
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1754
  if (ldv_spin_nfs_client_lock_of_nfs_net == 1 && is_spin_held_by_another_thread == 0) {
#line 1756
    return (0);
  } else {
#line 1760
    return (1);
  }
}
}
#line 1765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_nfs_client_lock_of_nfs_net(void) 
{ 
  int tmp ;

  {
  {
#line 1768
  tmp = ldv_spin_is_locked_nfs_client_lock_of_nfs_net();
  }
#line 1768
  return (tmp == 0);
}
}
#line 1772 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_nfs_client_lock_of_nfs_net(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1777
  is_spin_contended = ldv_undef_int();
  }
#line 1780
  if (is_spin_contended != 0) {
#line 1782
    return (0);
  } else {
#line 1786
    return (1);
  }
}
}
#line 1791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_nfs_client_lock_of_nfs_net(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1796
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_client_lock_of_nfs_net == 1);
#line 1798
  __VERIFIER_assume(ldv_spin_nfs_client_lock_of_nfs_net == 1);
#line 1801
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1804
  if (atomic_value_after_dec == 0) {
#line 1806
    ldv_spin_nfs_client_lock_of_nfs_net = 2;
#line 1808
    return (1);
  } else {

  }
#line 1812
  return (0);
}
}
#line 1814 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_nfs_fscache_keys_lock  =    1;
#line 1817 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_nfs_fscache_keys_lock(void) 
{ 


  {
  {
#line 1820
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_nfs_fscache_keys_lock == 1);
#line 1822
  __VERIFIER_assume(ldv_spin_nfs_fscache_keys_lock == 1);
#line 1824
  ldv_spin_nfs_fscache_keys_lock = 2;
  }
#line 1825
  return;
}
}
#line 1828 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_nfs_fscache_keys_lock(void) 
{ 


  {
  {
#line 1831
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_nfs_fscache_keys_lock == 2);
#line 1833
  __VERIFIER_assume(ldv_spin_nfs_fscache_keys_lock == 2);
#line 1835
  ldv_spin_nfs_fscache_keys_lock = 1;
  }
#line 1836
  return;
}
}
#line 1839 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_nfs_fscache_keys_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1844
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_fscache_keys_lock == 1);
#line 1846
  __VERIFIER_assume(ldv_spin_nfs_fscache_keys_lock == 1);
#line 1849
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1852
  if (is_spin_held_by_another_thread != 0) {
#line 1854
    return (0);
  } else {
#line 1858
    ldv_spin_nfs_fscache_keys_lock = 2;
#line 1860
    return (1);
  }
}
}
#line 1865 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_nfs_fscache_keys_lock(void) 
{ 


  {
  {
#line 1868
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_fscache_keys_lock == 1);
#line 1870
  __VERIFIER_assume(ldv_spin_nfs_fscache_keys_lock == 1);
  }
#line 1871
  return;
}
}
#line 1874 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_nfs_fscache_keys_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1879
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1882
  if (ldv_spin_nfs_fscache_keys_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 1884
    return (0);
  } else {
#line 1888
    return (1);
  }
}
}
#line 1893 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_nfs_fscache_keys_lock(void) 
{ 
  int tmp ;

  {
  {
#line 1896
  tmp = ldv_spin_is_locked_nfs_fscache_keys_lock();
  }
#line 1896
  return (tmp == 0);
}
}
#line 1900 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_nfs_fscache_keys_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 1905
  is_spin_contended = ldv_undef_int();
  }
#line 1908
  if (is_spin_contended != 0) {
#line 1910
    return (0);
  } else {
#line 1914
    return (1);
  }
}
}
#line 1919 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_nfs_fscache_keys_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 1924
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_fscache_keys_lock == 1);
#line 1926
  __VERIFIER_assume(ldv_spin_nfs_fscache_keys_lock == 1);
#line 1929
  atomic_value_after_dec = ldv_undef_int();
  }
#line 1932
  if (atomic_value_after_dec == 0) {
#line 1934
    ldv_spin_nfs_fscache_keys_lock = 2;
#line 1936
    return (1);
  } else {

  }
#line 1940
  return (0);
}
}
#line 1942 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_nfs_version_lock  =    1;
#line 1945 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_nfs_version_lock(void) 
{ 


  {
  {
#line 1948
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_nfs_version_lock == 1);
#line 1950
  __VERIFIER_assume(ldv_spin_nfs_version_lock == 1);
#line 1952
  ldv_spin_nfs_version_lock = 2;
  }
#line 1953
  return;
}
}
#line 1956 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_nfs_version_lock(void) 
{ 


  {
  {
#line 1959
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_nfs_version_lock == 2);
#line 1961
  __VERIFIER_assume(ldv_spin_nfs_version_lock == 2);
#line 1963
  ldv_spin_nfs_version_lock = 1;
  }
#line 1964
  return;
}
}
#line 1967 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_nfs_version_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 1972
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_version_lock == 1);
#line 1974
  __VERIFIER_assume(ldv_spin_nfs_version_lock == 1);
#line 1977
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 1980
  if (is_spin_held_by_another_thread != 0) {
#line 1982
    return (0);
  } else {
#line 1986
    ldv_spin_nfs_version_lock = 2;
#line 1988
    return (1);
  }
}
}
#line 1993 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_nfs_version_lock(void) 
{ 


  {
  {
#line 1996
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_version_lock == 1);
#line 1998
  __VERIFIER_assume(ldv_spin_nfs_version_lock == 1);
  }
#line 1999
  return;
}
}
#line 2002 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_nfs_version_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2007
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2010
  if (ldv_spin_nfs_version_lock == 1 && is_spin_held_by_another_thread == 0) {
#line 2012
    return (0);
  } else {
#line 2016
    return (1);
  }
}
}
#line 2021 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_nfs_version_lock(void) 
{ 
  int tmp ;

  {
  {
#line 2024
  tmp = ldv_spin_is_locked_nfs_version_lock();
  }
#line 2024
  return (tmp == 0);
}
}
#line 2028 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_nfs_version_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2033
  is_spin_contended = ldv_undef_int();
  }
#line 2036
  if (is_spin_contended != 0) {
#line 2038
    return (0);
  } else {
#line 2042
    return (1);
  }
}
}
#line 2047 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_nfs_version_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2052
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_nfs_version_lock == 1);
#line 2054
  __VERIFIER_assume(ldv_spin_nfs_version_lock == 1);
#line 2057
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2060
  if (atomic_value_after_dec == 0) {
#line 2062
    ldv_spin_nfs_version_lock = 2;
#line 2064
    return (1);
  } else {

  }
#line 2068
  return (0);
}
}
#line 2070 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_node_size_lock_of_pglist_data  =    1;
#line 2073 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 2076
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2078
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2080
  ldv_spin_node_size_lock_of_pglist_data = 2;
  }
#line 2081
  return;
}
}
#line 2084 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 2087
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_node_size_lock_of_pglist_data == 2);
#line 2089
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 2);
#line 2091
  ldv_spin_node_size_lock_of_pglist_data = 1;
  }
#line 2092
  return;
}
}
#line 2095 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2100
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2102
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2105
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2108
  if (is_spin_held_by_another_thread != 0) {
#line 2110
    return (0);
  } else {
#line 2114
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 2116
    return (1);
  }
}
}
#line 2121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 2124
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2126
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 1);
  }
#line 2127
  return;
}
}
#line 2130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2135
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2138
  if (ldv_spin_node_size_lock_of_pglist_data == 1 && is_spin_held_by_another_thread == 0) {
#line 2140
    return (0);
  } else {
#line 2144
    return (1);
  }
}
}
#line 2149 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 2152
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
  }
#line 2152
  return (tmp == 0);
}
}
#line 2156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2161
  is_spin_contended = ldv_undef_int();
  }
#line 2164
  if (is_spin_contended != 0) {
#line 2166
    return (0);
  } else {
#line 2170
    return (1);
  }
}
}
#line 2175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2180
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2182
  __VERIFIER_assume(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2185
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2188
  if (atomic_value_after_dec == 0) {
#line 2190
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 2192
    return (1);
  } else {

  }
#line 2196
  return (0);
}
}
#line 2198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_ptl  =    1;
#line 2201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_ptl(void) 
{ 


  {
  {
#line 2204
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_ptl == 1);
#line 2206
  __VERIFIER_assume(ldv_spin_ptl == 1);
#line 2208
  ldv_spin_ptl = 2;
  }
#line 2209
  return;
}
}
#line 2212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_ptl(void) 
{ 


  {
  {
#line 2215
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_ptl == 2);
#line 2217
  __VERIFIER_assume(ldv_spin_ptl == 2);
#line 2219
  ldv_spin_ptl = 1;
  }
#line 2220
  return;
}
}
#line 2223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_ptl(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2228
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_ptl == 1);
#line 2230
  __VERIFIER_assume(ldv_spin_ptl == 1);
#line 2233
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2236
  if (is_spin_held_by_another_thread != 0) {
#line 2238
    return (0);
  } else {
#line 2242
    ldv_spin_ptl = 2;
#line 2244
    return (1);
  }
}
}
#line 2249 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_ptl(void) 
{ 


  {
  {
#line 2252
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_ptl == 1);
#line 2254
  __VERIFIER_assume(ldv_spin_ptl == 1);
  }
#line 2255
  return;
}
}
#line 2258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_ptl(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2263
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2266
  if (ldv_spin_ptl == 1 && is_spin_held_by_another_thread == 0) {
#line 2268
    return (0);
  } else {
#line 2272
    return (1);
  }
}
}
#line 2277 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 2280
  tmp = ldv_spin_is_locked_ptl();
  }
#line 2280
  return (tmp == 0);
}
}
#line 2284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_ptl(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2289
  is_spin_contended = ldv_undef_int();
  }
#line 2292
  if (is_spin_contended != 0) {
#line 2294
    return (0);
  } else {
#line 2298
    return (1);
  }
}
}
#line 2303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_ptl(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2308
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_ptl == 1);
#line 2310
  __VERIFIER_assume(ldv_spin_ptl == 1);
#line 2313
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2316
  if (atomic_value_after_dec == 0) {
#line 2318
    ldv_spin_ptl = 2;
#line 2320
    return (1);
  } else {

  }
#line 2324
  return (0);
}
}
#line 2326 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_siglock_of_sighand_struct  =    1;
#line 2329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 2332
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_siglock_of_sighand_struct == 1);
#line 2334
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 1);
#line 2336
  ldv_spin_siglock_of_sighand_struct = 2;
  }
#line 2337
  return;
}
}
#line 2340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 2343
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_siglock_of_sighand_struct == 2);
#line 2345
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 2);
#line 2347
  ldv_spin_siglock_of_sighand_struct = 1;
  }
#line 2348
  return;
}
}
#line 2351 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2356
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_siglock_of_sighand_struct == 1);
#line 2358
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 1);
#line 2361
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2364
  if (is_spin_held_by_another_thread != 0) {
#line 2366
    return (0);
  } else {
#line 2370
    ldv_spin_siglock_of_sighand_struct = 2;
#line 2372
    return (1);
  }
}
}
#line 2377 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 2380
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_siglock_of_sighand_struct == 1);
#line 2382
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 1);
  }
#line 2383
  return;
}
}
#line 2386 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2391
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2394
  if (ldv_spin_siglock_of_sighand_struct == 1 && is_spin_held_by_another_thread == 0) {
#line 2396
    return (0);
  } else {
#line 2400
    return (1);
  }
}
}
#line 2405 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 2408
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
  }
#line 2408
  return (tmp == 0);
}
}
#line 2412 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2417
  is_spin_contended = ldv_undef_int();
  }
#line 2420
  if (is_spin_contended != 0) {
#line 2422
    return (0);
  } else {
#line 2426
    return (1);
  }
}
}
#line 2431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2436
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_siglock_of_sighand_struct == 1);
#line 2438
  __VERIFIER_assume(ldv_spin_siglock_of_sighand_struct == 1);
#line 2441
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2444
  if (atomic_value_after_dec == 0) {
#line 2446
    ldv_spin_siglock_of_sighand_struct = 2;
#line 2448
    return (1);
  } else {

  }
#line 2452
  return (0);
}
}
#line 2454 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_slock_of_NOT_ARG_SIGN  =    1;
#line 2457 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_slock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 2460
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2462
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2464
  ldv_spin_slock_of_NOT_ARG_SIGN = 2;
  }
#line 2465
  return;
}
}
#line 2468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_slock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 2471
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_slock_of_NOT_ARG_SIGN == 2);
#line 2473
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 2);
#line 2475
  ldv_spin_slock_of_NOT_ARG_SIGN = 1;
  }
#line 2476
  return;
}
}
#line 2479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_slock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2484
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2486
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2489
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2492
  if (is_spin_held_by_another_thread != 0) {
#line 2494
    return (0);
  } else {
#line 2498
    ldv_spin_slock_of_NOT_ARG_SIGN = 2;
#line 2500
    return (1);
  }
}
}
#line 2505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_slock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 2508
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2510
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
  }
#line 2511
  return;
}
}
#line 2514 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_slock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2519
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2522
  if (ldv_spin_slock_of_NOT_ARG_SIGN == 1 && is_spin_held_by_another_thread == 0) {
#line 2524
    return (0);
  } else {
#line 2528
    return (1);
  }
}
}
#line 2533 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_slock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 2536
  tmp = ldv_spin_is_locked_slock_of_NOT_ARG_SIGN();
  }
#line 2536
  return (tmp == 0);
}
}
#line 2540 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_slock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2545
  is_spin_contended = ldv_undef_int();
  }
#line 2548
  if (is_spin_contended != 0) {
#line 2550
    return (0);
  } else {
#line 2554
    return (1);
  }
}
}
#line 2559 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_slock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2564
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2566
  __VERIFIER_assume(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2569
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2572
  if (atomic_value_after_dec == 0) {
#line 2574
    ldv_spin_slock_of_NOT_ARG_SIGN = 2;
#line 2576
    return (1);
  } else {

  }
#line 2580
  return (0);
}
}
#line 2582 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_tx_global_lock_of_net_device  =    1;
#line 2585 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 2588
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_tx_global_lock_of_net_device == 1);
#line 2590
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 1);
#line 2592
  ldv_spin_tx_global_lock_of_net_device = 2;
  }
#line 2593
  return;
}
}
#line 2596 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 2599
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_tx_global_lock_of_net_device == 2);
#line 2601
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 2);
#line 2603
  ldv_spin_tx_global_lock_of_net_device = 1;
  }
#line 2604
  return;
}
}
#line 2607 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2612
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tx_global_lock_of_net_device == 1);
#line 2614
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 1);
#line 2617
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2620
  if (is_spin_held_by_another_thread != 0) {
#line 2622
    return (0);
  } else {
#line 2626
    ldv_spin_tx_global_lock_of_net_device = 2;
#line 2628
    return (1);
  }
}
}
#line 2633 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 2636
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tx_global_lock_of_net_device == 1);
#line 2638
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 1);
  }
#line 2639
  return;
}
}
#line 2642 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2647
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2650
  if (ldv_spin_tx_global_lock_of_net_device == 1 && is_spin_held_by_another_thread == 0) {
#line 2652
    return (0);
  } else {
#line 2656
    return (1);
  }
}
}
#line 2661 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 2664
  tmp = ldv_spin_is_locked_tx_global_lock_of_net_device();
  }
#line 2664
  return (tmp == 0);
}
}
#line 2668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2673
  is_spin_contended = ldv_undef_int();
  }
#line 2676
  if (is_spin_contended != 0) {
#line 2678
    return (0);
  } else {
#line 2682
    return (1);
  }
}
}
#line 2687 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_tx_global_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2692
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_tx_global_lock_of_net_device == 1);
#line 2694
  __VERIFIER_assume(ldv_spin_tx_global_lock_of_net_device == 1);
#line 2697
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2700
  if (atomic_value_after_dec == 0) {
#line 2702
    ldv_spin_tx_global_lock_of_net_device = 2;
#line 2704
    return (1);
  } else {

  }
#line 2708
  return (0);
}
}
#line 2710 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
static int ldv_spin_xpt_lock_of_svc_xprt  =    1;
#line 2713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_lock_xpt_lock_of_svc_xprt(void) 
{ 


  {
  {
#line 2716
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(ldv_spin_xpt_lock_of_svc_xprt == 1);
#line 2718
  __VERIFIER_assume(ldv_spin_xpt_lock_of_svc_xprt == 1);
#line 2720
  ldv_spin_xpt_lock_of_svc_xprt = 2;
  }
#line 2721
  return;
}
}
#line 2724 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_xpt_lock_of_svc_xprt(void) 
{ 


  {
  {
#line 2727
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(ldv_spin_xpt_lock_of_svc_xprt == 2);
#line 2729
  __VERIFIER_assume(ldv_spin_xpt_lock_of_svc_xprt == 2);
#line 2731
  ldv_spin_xpt_lock_of_svc_xprt = 1;
  }
#line 2732
  return;
}
}
#line 2735 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_trylock_xpt_lock_of_svc_xprt(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2740
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_xpt_lock_of_svc_xprt == 1);
#line 2742
  __VERIFIER_assume(ldv_spin_xpt_lock_of_svc_xprt == 1);
#line 2745
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2748
  if (is_spin_held_by_another_thread != 0) {
#line 2750
    return (0);
  } else {
#line 2754
    ldv_spin_xpt_lock_of_svc_xprt = 2;
#line 2756
    return (1);
  }
}
}
#line 2761 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_spin_unlock_wait_xpt_lock_of_svc_xprt(void) 
{ 


  {
  {
#line 2764
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_xpt_lock_of_svc_xprt == 1);
#line 2766
  __VERIFIER_assume(ldv_spin_xpt_lock_of_svc_xprt == 1);
  }
#line 2767
  return;
}
}
#line 2770 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_locked_xpt_lock_of_svc_xprt(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
  {
#line 2775
  is_spin_held_by_another_thread = ldv_undef_int();
  }
#line 2778
  if (ldv_spin_xpt_lock_of_svc_xprt == 1 && is_spin_held_by_another_thread == 0) {
#line 2780
    return (0);
  } else {
#line 2784
    return (1);
  }
}
}
#line 2789 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_can_lock_xpt_lock_of_svc_xprt(void) 
{ 
  int tmp ;

  {
  {
#line 2792
  tmp = ldv_spin_is_locked_xpt_lock_of_svc_xprt();
  }
#line 2792
  return (tmp == 0);
}
}
#line 2796 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_spin_is_contended_xpt_lock_of_svc_xprt(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 2801
  is_spin_contended = ldv_undef_int();
  }
#line 2804
  if (is_spin_contended != 0) {
#line 2806
    return (0);
  } else {
#line 2810
    return (1);
  }
}
}
#line 2815 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_atomic_dec_and_lock_xpt_lock_of_svc_xprt(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 2820
  ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(ldv_spin_xpt_lock_of_svc_xprt == 1);
#line 2822
  __VERIFIER_assume(ldv_spin_xpt_lock_of_svc_xprt == 1);
#line 2825
  atomic_value_after_dec = ldv_undef_int();
  }
#line 2828
  if (atomic_value_after_dec == 0) {
#line 2830
    ldv_spin_xpt_lock_of_svc_xprt = 2;
#line 2832
    return (1);
  } else {

  }
#line 2836
  return (0);
}
}
#line 2839 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
void ldv_check_final_state(void) 
{ 


  {
  {
#line 2842
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin__xmit_lock_of_netdev_queue == 1);
#line 2844
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_addr_list_lock_of_net_device == 1);
#line 2846
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_alloc_lock_of_task_struct == 1);
#line 2848
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_cl_lock_of_nfs_client == 1);
#line 2850
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_i_lock_of_inode == 1);
#line 2852
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock == 1);
#line 2854
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_NOT_ARG_SIGN == 1);
#line 2856
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_nfs_commit_info == 1);
#line 2858
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_nfs_direct_req == 1);
#line 2860
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_nfs_pgio_header == 1);
#line 2862
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lock_of_res_counter == 1);
#line 2864
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_lru_lock_of_netns_frags == 1);
#line 2866
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_nfs_access_lru_lock == 1);
#line 2868
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_nfs_client_lock_of_nfs_net == 1);
#line 2870
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_nfs_fscache_keys_lock == 1);
#line 2872
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_nfs_version_lock == 1);
#line 2874
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_node_size_lock_of_pglist_data == 1);
#line 2876
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_ptl == 1);
#line 2878
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_siglock_of_sighand_struct == 1);
#line 2880
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_slock_of_NOT_ARG_SIGN == 1);
#line 2882
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_tx_global_lock_of_net_device == 1);
#line 2884
  ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(ldv_spin_xpt_lock_of_svc_xprt == 1);
  }
#line 2885
  return;
}
}
#line 2888 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/tr/linux/kernel/locking/spinlock.c"
int ldv_exclusive_spin_is_locked(void) 
{ 


  {
#line 2891
  if (ldv_spin__xmit_lock_of_netdev_queue == 2) {
#line 2893
    return (1);
  } else {

  }
#line 2896
  if (ldv_spin_addr_list_lock_of_net_device == 2) {
#line 2898
    return (1);
  } else {

  }
#line 2901
  if (ldv_spin_alloc_lock_of_task_struct == 2) {
#line 2903
    return (1);
  } else {

  }
#line 2906
  if (ldv_spin_cl_lock_of_nfs_client == 2) {
#line 2908
    return (1);
  } else {

  }
#line 2911
  if (ldv_spin_i_lock_of_inode == 2) {
#line 2913
    return (1);
  } else {

  }
#line 2916
  if (ldv_spin_lock == 2) {
#line 2918
    return (1);
  } else {

  }
#line 2921
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {
#line 2923
    return (1);
  } else {

  }
#line 2926
  if (ldv_spin_lock_of_nfs_commit_info == 2) {
#line 2928
    return (1);
  } else {

  }
#line 2931
  if (ldv_spin_lock_of_nfs_direct_req == 2) {
#line 2933
    return (1);
  } else {

  }
#line 2936
  if (ldv_spin_lock_of_nfs_pgio_header == 2) {
#line 2938
    return (1);
  } else {

  }
#line 2941
  if (ldv_spin_lock_of_res_counter == 2) {
#line 2943
    return (1);
  } else {

  }
#line 2946
  if (ldv_spin_lru_lock_of_netns_frags == 2) {
#line 2948
    return (1);
  } else {

  }
#line 2951
  if (ldv_spin_nfs_access_lru_lock == 2) {
#line 2953
    return (1);
  } else {

  }
#line 2956
  if (ldv_spin_nfs_client_lock_of_nfs_net == 2) {
#line 2958
    return (1);
  } else {

  }
#line 2961
  if (ldv_spin_nfs_fscache_keys_lock == 2) {
#line 2963
    return (1);
  } else {

  }
#line 2966
  if (ldv_spin_nfs_version_lock == 2) {
#line 2968
    return (1);
  } else {

  }
#line 2971
  if (ldv_spin_node_size_lock_of_pglist_data == 2) {
#line 2973
    return (1);
  } else {

  }
#line 2976
  if (ldv_spin_ptl == 2) {
#line 2978
    return (1);
  } else {

  }
#line 2981
  if (ldv_spin_siglock_of_sighand_struct == 2) {
#line 2983
    return (1);
  } else {

  }
#line 2986
  if (ldv_spin_slock_of_NOT_ARG_SIGN == 2) {
#line 2988
    return (1);
  } else {

  }
#line 2991
  if (ldv_spin_tx_global_lock_of_net_device == 2) {
#line 2993
    return (1);
  } else {

  }
#line 2996
  if (ldv_spin_xpt_lock_of_svc_xprt == 2) {
#line 2998
    return (1);
  } else {

  }
#line 3001
  return (0);
}
}
#line 3 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(int expr ) 
{ 


  {
#line 4
  if (! expr) {
    {
#line 5
    __VERIFIER_error();
    }
  } else {

  }
#line 6
  return;
}
}
#line 7 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock_try(int expr ) 
{ 


  {
#line 8
  if (! expr) {
    {
#line 9
    __VERIFIER_error();
    }
  } else {

  }
#line 10
  return;
}
}
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock(int expr ) 
{ 


  {
#line 12
  if (! expr) {
    {
#line 13
    __VERIFIER_error();
    }
  } else {

  }
#line 14
  return;
}
}
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/93b7dfb214c2286d98a1d31d87facd21/klever-core-work-dir/14/vtg/fs/nfs/nfs.ko/linux:kernel:locking:spinlock/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_locking_spinlock__one_thread_locked_at_exit(int expr ) 
{ 


  {
#line 16
  if (! expr) {
    {
#line 17
    __VERIFIER_error();
    }
  } else {

  }
#line 18
  return;
}
}
