/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 7 ".tmp_clnt.c"
struct device;
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/err.h"
struct module;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef unsigned short umode_t;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef _Bool bool;
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __s32 int32_t;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __u8 uint8_t;
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __u32 uint32_t;
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __u64 uint64_t;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef unsigned int fmode_t;
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef unsigned int oom_flags_t;
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 188
struct hlist_node;
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 203 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 686 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
struct task_struct;
#line 687
struct lockdep_map;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/lockdep.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/printk.h"
struct file_operations;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dynamic_debug.h"
struct net_device;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/sysinfo.h"
struct completion;
#line 24
struct pt_regs;
#line 386 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kernel.h"
struct pid;
#line 630
struct mm_struct;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/ptrace.h"
struct __anonstruct____missing_field_name_9 {
   unsigned int a ;
   unsigned int b ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/ptrace.h"
struct __anonstruct____missing_field_name_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/ptrace.h"
union __anonunion____missing_field_name_8 {
   struct __anonstruct____missing_field_name_9 __annonCompField4 ;
   struct __anonstruct____missing_field_name_10 __annonCompField5 ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion____missing_field_name_8 __annonCompField6 ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};
#line 214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;
#line 302
struct page;
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 310
struct file;
#line 323
struct seq_file;
#line 355
struct thread_struct;
#line 357
struct cpumask;
#line 358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/pgtable_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
#line 327
struct arch_spinlock;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/vm86.h"
union __anonunion____missing_field_name_15 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_15 __annonCompField7 ;
};
#line 306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/bug.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/special_insns.h"
struct exec_domain;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/personality.h"
struct map_segment;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 293 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_20 {
   u64 rip ;
   u64 rdp ;
};
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_19 {
   struct __anonstruct____missing_field_name_20 __annonCompField11 ;
   struct __anonstruct____missing_field_name_21 __annonCompField12 ;
};
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_19 __annonCompField13 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion____missing_field_name_22 __annonCompField14 ;
};
#line 345 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 366 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 371 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 377 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 383 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 391 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 438
struct kmem_cache;
#line 439
struct perf_event;
#line 440 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 581 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 581 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 11 ;
};
#line 579
struct sock;
#line 580
struct kobject;
#line 581
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 587 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/lockdep.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63
struct vm_area_struct;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 198
struct timespec;
#line 199
struct compat_timespec;
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysfs.h"
struct __anonstruct_futex_26 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysfs.h"
struct __anonstruct_nanosleep_27 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 200
struct pollfd;
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysfs.h"
struct __anonstruct_poll_28 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysfs.h"
union __anonunion____missing_field_name_25 {
   struct __anonstruct_futex_26 futex ;
   struct __anonstruct_nanosleep_27 nanosleep ;
   struct __anonstruct_poll_28 poll ;
};
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysfs.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_25 __annonCompField16 ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned int sig_on_uaccess_error : 1 ;
   unsigned int uaccess_err : 1 ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/spinlock_types.h"
union __anonunion____missing_field_name_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion____missing_field_name_29 __annonCompField17 ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/rwlock.h"
struct __anonstruct____missing_field_name_31 {
   u32 read ;
   s32 write ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_30 {
   s64 lock ;
   struct __anonstruct____missing_field_name_31 __annonCompField18 ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_30 arch_rwlock_t;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/rwlock.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_types.h"
struct __anonstruct____missing_field_name_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_types.h"
union __anonunion____missing_field_name_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct____missing_field_name_33 __annonCompField19 ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion____missing_field_name_32 __annonCompField20 ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 402 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mutex.h"
struct kref {
   atomic_t refcount ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
struct __wait_queue;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kdev_t.h"
struct inode;
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kdev_t.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cdev.h"
struct backing_dev_info;
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/miscdevice.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 254
struct rw_semaphore;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/plist.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rwsem.h"
struct seqcount {
   unsigned int sequence ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 177 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 270 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seqlock.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
struct notifier_block;
#line 1014 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 313 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ktime.h"
typedef union ktime ktime_t;
#line 371
struct tvec_base;
#line 372 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 266
struct workqueue_struct;
#line 267
struct work_struct;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 236 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ioport.h"
struct klist_node;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 301
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 308
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 316
struct wakeup_source;
#line 506 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};
#line 513
struct dev_pm_qos;
#line 513 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool ignore_children : 1 ;
   bool early_init : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int run_wake : 1 ;
   unsigned int runtime_auto : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
#line 570 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/highuid.h"
struct user_namespace;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197
struct dma_map_ops;
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct device_driver;
#line 16
struct driver_private;
#line 17
struct class;
#line 18
struct subsys_private;
#line 19
struct bus_type;
#line 20
struct device_node;
#line 21
struct iommu_ops;
#line 22
struct iommu_group;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct device_attribute;
#line 55
struct driver_attribute;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};
#line 123
struct device_type;
#line 180
struct of_device_id;
#line 180
struct acpi_device_id;
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 301
struct class_attribute;
#line 301 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 396 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 449 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * , kuid_t * , kgid_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 582 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 591 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct acpi_dev_node {
   void *handle ;
};
#line 596
struct dma_coherent_mem;
#line 596 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 730 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/device.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm_qos.h"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
#line 50
enum dev_pm_qos_req_type {
    DEV_PM_QOS_LATENCY = 1,
    DEV_PM_QOS_FLAGS = 2
} ;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm_qos.h"
union __anonunion_data_36 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm_qos.h"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_36 data ;
   struct device *dev ;
};
#line 64
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm_qos.h"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pm_qos.h"
struct dev_pm_qos {
   struct pm_qos_constraints latency ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *latency_req ;
   struct dev_pm_qos_request *flags_req ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_101 {
   unsigned long bits[16U] ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_101 nodemask_t;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_102 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_102 mm_context_t;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/pci_iomap.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rculist.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 888 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct ctl_table;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 67
struct return_instance;
#line 67
struct uprobe;
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct return_instance *return_instances ;
   unsigned int depth ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 128
struct address_space;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_130 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_134 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_133 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_134 __annonCompField32 ;
   int units ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_132 {
   union __anonunion____missing_field_name_133 __annonCompField33 ;
   atomic_t _count ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_131 {
   unsigned long counters ;
   struct __anonstruct____missing_field_name_132 __annonCompField34 ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_129 {
   union __anonunion____missing_field_name_130 __annonCompField31 ;
   union __anonunion____missing_field_name_131 __annonCompField35 ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
struct __anonstruct____missing_field_name_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 129
struct slab;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_135 {
   struct list_head lru ;
   struct __anonstruct____missing_field_name_136 __annonCompField37 ;
   struct list_head list ;
   struct slab *slab_page ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
union __anonunion____missing_field_name_137 {
   unsigned long private ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct____missing_field_name_129 __annonCompField36 ;
   union __anonunion____missing_field_name_135 __annonCompField38 ;
   union __anonunion____missing_field_name_137 __annonCompField39 ;
   unsigned long debug_flags ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm_types.h"
struct __anonstruct_linear_139 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm_types.h"
union __anonunion_shared_138 {
   struct __anonstruct_linear_139 linear ;
   struct list_head nonlinear ;
};
#line 220
struct anon_vma;
#line 220
struct vm_operations_struct;
#line 220
struct mempolicy;
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_138 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 311 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 324
struct linux_binfmt;
#line 324
struct mmu_notifier_mm;
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_next_reset ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   int first_nid ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
};
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1840 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1041 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/uapi/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sem.h"
struct sem_undo_list;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/socket.h"
struct __kernel_sockaddr_storage {
   __kernel_sa_family_t ss_family ;
   char __data[126U] ;
};
#line 18
struct cred;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_141 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_141 sync_serial_settings;
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_142 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_142 te1_settings;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_143 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_143 raw_hdlc_proto;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_144 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_144 fr_proto;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_145 {
   unsigned int dlci ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_145 fr_proto_pvc;
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_146 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_146 fr_proto_pvc_info;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_147 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_147 cisco_proto;
#line 95 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_148 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_148 ifs_ifsu ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_149 {
   char ifrn_name[16U] ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_150 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_149 ifr_ifrn ;
   union __anonunion_ifr_ifru_150 ifr_ifru ;
};
#line 232
struct hlist_bl_node;
#line 232 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/if.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rculist_bl.h"
struct __anonstruct____missing_field_name_153 {
   u32 hash ;
   u32 len ;
};
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rculist_bl.h"
union __anonunion____missing_field_name_152 {
   struct __anonstruct____missing_field_name_153 __annonCompField40 ;
   u64 hash_len ;
};
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rculist_bl.h"
struct qstr {
   union __anonunion____missing_field_name_152 __annonCompField41 ;
   unsigned char const   *name ;
};
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
union __anonunion_d_u_154 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_154 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_weak_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 414 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/percpu-rwsem.h"
struct block_device;
#line 31
struct io_context;
#line 32
struct cgroup_subsys_state;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/fs.h"
struct export_operations;
#line 58
struct kiocb;
#line 59
struct pipe_inode_info;
#line 60
struct poll_table_struct;
#line 61
struct kstatfs;
#line 62
struct swap_info_struct;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 241 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/projid.h"
typedef projid_t kprojid_t;
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
typedef long long qsize_t;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
union __anonunion____missing_field_name_156 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct kqid {
   union __anonunion____missing_field_name_156 __annonCompField42 ;
   enum quota_type type ;
};
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
union __anonunion_arg_158 {
   char *buf ;
   void *data ;
};
#line 340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_157 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_158 arg ;
   int error ;
};
#line 340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_157 read_descriptor_t;
#line 343 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 402 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 424
struct request_queue;
#line 425
struct hd_struct;
#line 425
struct gendisk;
#line 425 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 497
struct posix_acl;
#line 498
struct inode_operations;
#line 498 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_159 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 498 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_160 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 498
struct file_lock;
#line 498 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
union __anonunion____missing_field_name_161 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 498 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion____missing_field_name_159 __annonCompField43 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion____missing_field_name_160 __annonCompField44 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_161 __annonCompField45 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 728 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 736 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 759 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
union __anonunion_f_u_162 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 759 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct file {
   union __anonunion_f_u_162 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 902
struct files_struct;
#line 902 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 903 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 908 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 920
struct net;
#line 925
struct nlm_lockowner;
#line 926 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_164 {
   struct list_head link ;
   int state ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_163 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_164 afs ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_163 fl_u ;
};
#line 1012 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1218 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1234
struct file_system_type;
#line 1234
struct super_operations;
#line 1234
struct xattr_handler;
#line 1234
struct mtd_info;
#line 1234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1471 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
#line 1547 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1590 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1803 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 4 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_165 {
   unsigned long sig[1U] ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_165 sigset_t;
#line 25
struct siginfo;
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_167 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_168 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_169 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_170 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_171 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_172 {
   long _band ;
   int _fd ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_173 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_166 {
   int _pad[28U] ;
   struct __anonstruct__kill_167 _kill ;
   struct __anonstruct__timer_168 _timer ;
   struct __anonstruct__rt_169 _rt ;
   struct __anonstruct__sigchld_170 _sigchld ;
   struct __anonstruct__sigfault_171 _sigfault ;
   struct __anonstruct__sigpoll_172 _sigpoll ;
   struct __anonstruct__sigsys_173 _sigsys ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_166 _sifields ;
};
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 251 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};
#line 463 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
struct __anonstruct____missing_field_name_177 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
union __anonunion____missing_field_name_176 {
   struct __anonstruct____missing_field_name_177 __annonCompField46 ;
   struct callback_head rcu ;
};
#line 124
struct ctl_table_set;
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion____missing_field_name_176 __annonCompField47 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_header * , struct ctl_table * ) ;
};
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct signal_struct;
#line 36
struct key_type;
#line 38
struct keyring_list;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_178 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/key.h"
union __anonunion____missing_field_name_179 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/key.h"
union __anonunion_type_data_180 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/key.h"
union __anonunion_payload_181 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion____missing_field_name_178 __annonCompField48 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_179 __annonCompField49 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_180 type_data ;
   union __anonunion_payload_181 payload ;
};
#line 323
struct audit_context;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 344
struct llist_node;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct cfs_rq;
#line 122
struct task_group;
#line 334 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 385 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 393 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 400 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 412 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 432 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 468
struct autogroup;
#line 469
struct tty_struct;
#line 469
struct taskstats;
#line 469
struct tty_audit_buf;
#line 469 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 648 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 692
struct reclaim_state;
#line 693 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 708 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 919
struct uts_namespace;
#line 920 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 927 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 939 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 974 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 1010
struct rt_rq;
#line 1010 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1034
struct mem_cgroup;
#line 1034 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1411
struct sched_class;
#line 1411
struct css_set;
#line 1411
struct compat_robust_list_head;
#line 1411
struct ftrace_ret_stack;
#line 1411 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned int brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int no_new_privs : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   int numa_migrate_seq ;
   unsigned int numa_scan_period ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 272 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 276 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/random.h"
enum ldv_20698 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/net.h"
typedef enum ldv_20698 socket_state;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/net.h"
struct proto_ops;
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   int (*set_peek_off)(struct sock * , int  ) ;
};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 64
struct memcg_cache_params;
#line 64
struct kmem_cache_node;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
struct __anonstruct____missing_field_name_198 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
#line 305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
union __anonunion____missing_field_name_197 {
   struct kmem_cache *memcg_caches[0U] ;
   struct __anonstruct____missing_field_name_198 __annonCompField51 ;
};
#line 305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion____missing_field_name_197 __annonCompField52 ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/checksum.h"
struct sk_buff;
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/checksum.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow_keys.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 330
struct sec_path;
#line 330 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
struct __anonstruct____missing_field_name_202 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 330 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_201 {
   __wsum csum ;
   struct __anonstruct____missing_field_name_202 __annonCompField54 ;
};
#line 330 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
union __anonunion____missing_field_name_203 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 reserved_tailroom ;
};
#line 330 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion____missing_field_name_201 __annonCompField55 ;
   __u32 priority ;
   __u8 local_df : 1 ;
   __u8 cloned : 1 ;
   __u8 ip_summed : 2 ;
   __u8 nohdr : 1 ;
   __u8 nfctinfo : 3 ;
   __u8 pkt_type : 3 ;
   __u8 fclone : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 peeked : 1 ;
   __u8 nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   __u8 ndisc_nodetype : 2 ;
   __u8 pfmemalloc : 1 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_rxhash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 head_frag : 1 ;
   __u8 encapsulation : 1 ;
   __u32 secmark ;
   union __anonunion____missing_field_name_203 __annonCompField56 ;
   sk_buff_data_t inner_transport_header ;
   sk_buff_data_t inner_network_header ;
   sk_buff_data_t inner_mac_header ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 547
struct dst_entry;
#line 615
struct rtable;
#line 2933 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 166 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 382 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 425 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 458 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 474 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 494 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 505 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 524 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 550 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 684 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 692 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 768 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 249
struct prot_inuse;
#line 250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[32U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[8U] ;
};
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[95U] ;
};
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[28U] ;
};
#line 118
struct proc_dir_entry;
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   struct list_head lru_list ;
   spinlock_t lru_lock ;
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_frag.h"
struct tcpm_hash_bucket;
#line 177
struct ipv4_devconf;
#line 178
struct fib_rules_ops;
#line 179
struct fib_table;
#line 180
struct inet_peer_base;
#line 180
struct xt_table;
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_tcp_ecn ;
   kgid_t sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/ipv4.h"
struct neighbour;
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 32
struct rt6_info;
#line 32
struct rt6_statistics;
#line 32
struct fib6_table;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 82
struct sctp_mib;
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/ipv6.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics[1U] ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/proc_fs.h"
struct in_addr {
   __be32 s_addr ;
};
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/in.h"
union __anonunion_in6_u_206 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_206 in6_u ;
};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netfilter.h"
struct jump_entry;
#line 99
struct static_key_mod;
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netfilter.h"
struct static_key {
   atomic_t enabled ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};
#line 321 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netfilter.h"
struct nlattr;
#line 336
struct nf_logger;
#line 337 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger  const  *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/netfilter.h"
struct ebt_table;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/x_tables.h"
struct hlist_nulls_node;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 63
struct ip_conntrack_stat;
#line 63
struct nf_ct_event_notifier;
#line 63
struct nf_exp_event_notifier;
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct hlist_nulls_head tmpl ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
};
#line 489 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   unsigned int proc_inum ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t rt_genid ;
};
#line 122 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/prio_heap.h"
struct idr_layer {
   int prefix ;
   unsigned long bitmap[4U] ;
   struct idr_layer *ary[256U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   int cur ;
   spinlock_t lock ;
};
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};
#line 213 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/idr.h"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t (*list)(struct dentry * , char * , size_t  , char const   * , size_t  ,
                  int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t  , int  ,
              int  ) ;
};
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/xattr.h"
struct simple_xattrs {
   struct list_head head ;
   spinlock_t lock ;
};
#line 98
struct cgroupfs_root;
#line 99
struct cgroup_subsys;
#line 100
struct cgroup;
#line 101
struct css_id;
#line 102
struct eventfd_ctx;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
   struct work_struct dput_work ;
};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct cgroup_name {
   struct callback_head callback_head ;
   char name[] ;
};
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   int id ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_name *name ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroupfs_root *root ;
   struct list_head css_sets ;
   struct list_head allcg_node ;
   struct list_head cft_q_node ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct callback_head callback_head ;
   struct work_struct free_work ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct simple_xattrs xattrs ;
};
#line 249 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct cgroupfs_root {
   struct super_block *sb ;
   unsigned long subsys_mask ;
   int hierarchy_id ;
   unsigned long actual_subsys_mask ;
   struct list_head subsys_list ;
   struct cgroup top_cgroup ;
   int number_of_cgroups ;
   struct list_head root_list ;
   struct list_head allcg_list ;
   unsigned long flags ;
   struct ida cgroup_ida ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 333 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct callback_head callback_head ;
};
#line 377 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct cgroup_map_cb {
   int (*fill)(struct cgroup_map_cb * , char const   * , u64  ) ;
   void *state ;
};
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   int (*open)(struct inode * , struct file * ) ;
   ssize_t (*read)(struct cgroup * , struct cftype * , struct file * , char * , size_t  ,
                   loff_t * ) ;
   u64 (*read_u64)(struct cgroup * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup * , struct cftype * ) ;
   int (*read_map)(struct cgroup * , struct cftype * , struct cgroup_map_cb * ) ;
   int (*read_seq_string)(struct cgroup * , struct cftype * , struct seq_file * ) ;
   ssize_t (*write)(struct cgroup * , struct cftype * , struct file * , char const   * ,
                    size_t  , loff_t * ) ;
   int (*write_u64)(struct cgroup * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup * , unsigned int  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*register_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ,
                         char const   * ) ;
   void (*unregister_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ) ;
};
#line 502 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct cftype_set {
   struct list_head node ;
   struct cftype *cfts ;
};
#line 547
struct cgroup_taskset;
#line 557 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup * ) ;
   int (*css_online)(struct cgroup * ) ;
   void (*css_offline)(struct cgroup * ) ;
   void (*css_free)(struct cgroup * ) ;
   int (*can_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup * , struct cgroup * , struct task_struct * ) ;
   void (*bind)(struct cgroup * ) ;
   int subsys_id ;
   int disabled ;
   int early_init ;
   bool use_id ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   char const   *name ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/hardirq.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/security.h"
struct xfrm_policy;
#line 100
struct xfrm_state;
#line 120
struct request_sock;
#line 3091
struct mnt_namespace;
#line 3092
struct ipc_namespace;
#line 3093 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns ;
   struct net *net_ns ;
};
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 145 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 449 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/if_link.h"
struct netpoll_info;
#line 27
struct phy_device;
#line 28
struct wireless_dev;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 196
struct neigh_parms;
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 251 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 343
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 391 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 392 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 502
struct Qdisc;
#line 502 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 564 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 576 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 588 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 639 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 649 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 673 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 684 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 700 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , __be16  , u16  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , __be16  , u16  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * , gfp_t  ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
   int (*ndo_bridge_setlink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_bridge_getlink)(struct sk_buff * , u32  , u32  , struct net_device * ,
                             u32  ) ;
   int (*ndo_bridge_dellink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_change_carrier)(struct net_device * , bool  ) ;
};
#line 1028
enum ldv_26210 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 1037
enum ldv_26211 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
} ;
#line 1042
struct iw_handler_def;
#line 1042
struct iw_public_data;
#line 1042
struct vlan_info;
#line 1042
struct in_device;
#line 1042
struct dn_dev;
#line 1042
struct inet6_dev;
#line 1042
struct cpu_rmap;
#line 1042
struct pcpu_lstats;
#line 1042
struct pcpu_tstats;
#line 1042
struct pcpu_dstats;
#line 1042
struct pcpu_vstats;
#line 1042 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
union __anonunion____missing_field_name_217 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};
#line 1042
struct garp_port;
#line 1042
struct mrp_port;
#line 1042
struct rtnl_link_ops;
#line 1042 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head upper_dev_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   unsigned char broadcast[32U] ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   struct cpu_rmap *rx_cpu_rmap ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   enum ldv_26210 reg_state : 8 ;
   bool dismantle ;
   enum ldv_26211 rtnl_link_state : 16 ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion____missing_field_name_217 __annonCompField60 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 560 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pagemap.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/elf.h"
struct kernel_param;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/elf.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/moduleparam.h"
struct kparam_string;
#line 47
struct kparam_array;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/moduleparam.h"
union __anonunion____missing_field_name_223 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion____missing_field_name_223 __annonCompField61 ;
};
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 452
struct tracepoint;
#line 453 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/moduleparam.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
struct module_param_attrs;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 201
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
} ;
#line 208 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 222
struct module_sect_attrs;
#line 222
struct module_notes_attrs;
#line 222
struct ftrace_event_call;
#line 222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kallsyms.h"
struct nameidata {
   struct path path ;
   struct qstr last ;
   struct path root ;
   struct inode *inode ;
   unsigned int flags ;
   unsigned int seq ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[9U] ;
};
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/namei.h"
struct vfsmount {
   struct dentry *mnt_root ;
   struct super_block *mnt_sb ;
   int mnt_flags ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/utsname.h"
struct new_utsname {
   char sysname[65U] ;
   char nodename[65U] ;
   char release[65U] ;
   char version[65U] ;
   char machine[65U] ;
   char domainname[65U] ;
};
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/utsname.h"
struct uts_namespace {
   struct kref kref ;
   struct new_utsname name ;
   struct user_namespace *user_ns ;
   unsigned int proc_inum ;
};
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/utsname.h"
struct sockaddr_un {
   __kernel_sa_family_t sun_family ;
   char sun_path[108U] ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/msg_prot.h"
typedef u32 rpc_authflavor_t;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
struct xdr_buf {
   struct kvec head[1U] ;
   struct kvec tail[1U] ;
   struct page **pages ;
   unsigned int page_base ;
   unsigned int page_len ;
   unsigned int flags ;
   unsigned int buflen ;
   unsigned int len ;
};
#line 194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
struct xdr_stream {
   __be32 *p ;
   struct xdr_buf *buf ;
   __be32 *end ;
   struct kvec *iov ;
   struct kvec scratch ;
   struct page **page_ptr ;
   unsigned int nwords ;
};
#line 229
struct rpc_procinfo;
#line 230
struct rpc_cred;
#line 230 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
struct rpc_message {
   struct rpc_procinfo *rpc_proc ;
   void *rpc_argp ;
   void *rpc_resp ;
   struct rpc_cred *rpc_cred ;
};
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_call_ops;
#line 31
struct rpc_wait_queue;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_wait {
   struct list_head list ;
   struct list_head links ;
   struct list_head timer_list ;
   unsigned long expires ;
};
#line 39
struct rpc_clnt;
#line 39
struct rpc_rqst;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
union __anonunion_u_224 {
   struct work_struct tk_work ;
   struct rpc_wait tk_wait ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_task {
   atomic_t tk_count ;
   struct list_head tk_task ;
   struct rpc_clnt *tk_client ;
   struct rpc_rqst *tk_rqstp ;
   struct rpc_message tk_msg ;
   void (*tk_callback)(struct rpc_task * ) ;
   void (*tk_action)(struct rpc_task * ) ;
   struct rpc_call_ops  const  *tk_ops ;
   void *tk_calldata ;
   unsigned long tk_timeout ;
   unsigned long tk_runstate ;
   struct workqueue_struct *tk_workqueue ;
   struct rpc_wait_queue *tk_waitqueue ;
   union __anonunion_u_224 u ;
   ktime_t tk_start ;
   pid_t tk_owner ;
   int tk_status ;
   unsigned short tk_flags ;
   unsigned short tk_timeouts ;
   unsigned short tk_pid ;
   unsigned char tk_priority : 2 ;
   unsigned char tk_garb_retry : 2 ;
   unsigned char tk_cred_retry : 2 ;
   unsigned char tk_rebind_retry : 2 ;
};
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_call_ops {
   void (*rpc_call_prepare)(struct rpc_task * , void * ) ;
   void (*rpc_call_done)(struct rpc_task * , void * ) ;
   void (*rpc_count_stats)(struct rpc_task * , void * ) ;
   void (*rpc_release)(void * ) ;
};
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_task_setup {
   struct rpc_task *task ;
   struct rpc_clnt *rpc_client ;
   struct rpc_message  const  *rpc_message ;
   struct rpc_call_ops  const  *callback_ops ;
   void *callback_data ;
   struct workqueue_struct *workqueue ;
   unsigned short flags ;
   signed char priority ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_timer {
   struct timer_list timer ;
   struct list_head list ;
   unsigned long expires ;
};
#line 185 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_wait_queue {
   spinlock_t lock ;
   struct list_head tasks[4U] ;
   pid_t owner ;
   unsigned char maxpriority ;
   unsigned char priority ;
   unsigned char nr ;
   unsigned short qlen ;
   struct rpc_timer timer_list ;
   char const   *name ;
};
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_timeout {
   unsigned long to_initval ;
   unsigned long to_maxval ;
   unsigned long to_increment ;
   unsigned int to_retries ;
   unsigned char to_exponential ;
};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
enum rpc_display_format_t {
    RPC_DISPLAY_ADDR = 0,
    RPC_DISPLAY_PORT = 1,
    RPC_DISPLAY_PROTO = 2,
    RPC_DISPLAY_HEX_ADDR = 3,
    RPC_DISPLAY_HEX_PORT = 4,
    RPC_DISPLAY_NETID = 5,
    RPC_DISPLAY_MAX = 6
} ;
#line 47
struct rpc_xprt;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
struct rpc_rqst {
   struct rpc_xprt *rq_xprt ;
   struct xdr_buf rq_snd_buf ;
   struct xdr_buf rq_rcv_buf ;
   struct rpc_task *rq_task ;
   struct rpc_cred *rq_cred ;
   __be32 rq_xid ;
   int rq_cong ;
   u32 rq_seqno ;
   int rq_enc_pages_num ;
   struct page **rq_enc_pages ;
   void (*rq_release_snd_buf)(struct rpc_rqst * ) ;
   struct list_head rq_list ;
   __u32 *rq_buffer ;
   size_t rq_callsize ;
   size_t rq_rcvsize ;
   size_t rq_xmit_bytes_sent ;
   size_t rq_reply_bytes_recvd ;
   struct xdr_buf rq_private_buf ;
   unsigned long rq_majortimeo ;
   unsigned long rq_timeout ;
   ktime_t rq_rtt ;
   unsigned int rq_retries ;
   unsigned int rq_connect_cookie ;
   u32 rq_bytes_sent ;
   ktime_t rq_xtime ;
   int rq_ntrans ;
   struct list_head rq_bc_list ;
   unsigned long rq_bc_pa_state ;
   struct list_head rq_bc_pa_list ;
};
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
struct rpc_xprt_ops {
   void (*set_buffer_size)(struct rpc_xprt * , size_t  , size_t  ) ;
   int (*reserve_xprt)(struct rpc_xprt * , struct rpc_task * ) ;
   void (*release_xprt)(struct rpc_xprt * , struct rpc_task * ) ;
   void (*alloc_slot)(struct rpc_xprt * , struct rpc_task * ) ;
   void (*rpcbind)(struct rpc_task * ) ;
   void (*set_port)(struct rpc_xprt * , unsigned short  ) ;
   void (*connect)(struct rpc_xprt * , struct rpc_task * ) ;
   void *(*buf_alloc)(struct rpc_task * , size_t  ) ;
   void (*buf_free)(void * ) ;
   int (*send_request)(struct rpc_task * ) ;
   void (*set_retrans_timeout)(struct rpc_task * ) ;
   void (*timer)(struct rpc_xprt * , struct rpc_task * ) ;
   void (*release_request)(struct rpc_task * ) ;
   void (*close)(struct rpc_xprt * ) ;
   void (*destroy)(struct rpc_xprt * ) ;
   void (*print_stats)(struct rpc_xprt * , struct seq_file * ) ;
};
#line 139
struct svc_xprt;
#line 139
struct svc_serv;
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
struct __anonstruct_stat_225 {
   unsigned long bind_count ;
   unsigned long connect_count ;
   unsigned long connect_start ;
   unsigned long connect_time ;
   unsigned long sends ;
   unsigned long recvs ;
   unsigned long bad_xids ;
   unsigned long max_slots ;
   unsigned long long req_u ;
   unsigned long long bklog_u ;
   unsigned long long sending_u ;
   unsigned long long pending_u ;
};
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
struct rpc_xprt {
   atomic_t count ;
   struct rpc_xprt_ops *ops ;
   struct rpc_timeout  const  *timeout ;
   struct __kernel_sockaddr_storage addr ;
   size_t addrlen ;
   int prot ;
   unsigned long cong ;
   unsigned long cwnd ;
   size_t max_payload ;
   unsigned int tsh_size ;
   struct rpc_wait_queue binding ;
   struct rpc_wait_queue sending ;
   struct rpc_wait_queue pending ;
   struct rpc_wait_queue backlog ;
   struct list_head free ;
   unsigned int max_reqs ;
   unsigned int min_reqs ;
   atomic_t num_reqs ;
   unsigned long state ;
   unsigned char resvport : 1 ;
   unsigned int swapper ;
   unsigned int bind_index ;
   unsigned long bind_timeout ;
   unsigned long reestablish_timeout ;
   unsigned int connect_cookie ;
   struct work_struct task_cleanup ;
   struct timer_list timer ;
   unsigned long last_used ;
   unsigned long idle_timeout ;
   spinlock_t transport_lock ;
   spinlock_t reserve_lock ;
   u32 xid ;
   struct rpc_task *snd_task ;
   struct svc_xprt *bc_xprt ;
   struct svc_serv *bc_serv ;
   unsigned int bc_alloc_count ;
   spinlock_t bc_pa_lock ;
   struct list_head bc_pa_list ;
   struct list_head recv ;
   struct __anonstruct_stat_225 stat ;
   struct net *xprt_net ;
   char const   *servername ;
   char const   *address_strings[6U] ;
};
#line 251 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
struct xprt_create {
   int ident ;
   struct net *net ;
   struct sockaddr *srcaddr ;
   struct sockaddr *dstaddr ;
   size_t addrlen ;
   char const   *servername ;
   struct svc_xprt *bc_xprt ;
   unsigned int flags ;
};
#line 412
struct rpcsec_gss_info;
#line 413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
struct auth_cred {
   kuid_t uid ;
   kgid_t gid ;
   struct group_info *group_info ;
   char const   *principal ;
   unsigned char machine_cred : 1 ;
};
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_auth;
#line 36
struct rpc_credops;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_cred {
   struct hlist_node cr_hash ;
   struct list_head cr_lru ;
   struct callback_head cr_rcu ;
   struct rpc_auth *cr_auth ;
   struct rpc_credops  const  *cr_ops ;
   unsigned long cr_magic ;
   unsigned long cr_expire ;
   unsigned long cr_flags ;
   atomic_t cr_count ;
   kuid_t cr_uid ;
};
#line 56
struct rpc_cred_cache;
#line 57
struct rpc_authops;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_auth {
   unsigned int au_cslack ;
   unsigned int au_rslack ;
   unsigned int au_verfsize ;
   unsigned int au_flags ;
   struct rpc_authops  const  *au_ops ;
   rpc_authflavor_t au_flavor ;
   atomic_t au_count ;
   struct rpc_cred_cache *au_credcache ;
};
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_authops {
   struct module *owner ;
   rpc_authflavor_t au_flavor ;
   char *au_name ;
   struct rpc_auth *(*create)(struct rpc_clnt * , rpc_authflavor_t  ) ;
   void (*destroy)(struct rpc_auth * ) ;
   struct rpc_cred *(*lookup_cred)(struct rpc_auth * , struct auth_cred * , int  ) ;
   struct rpc_cred *(*crcreate)(struct rpc_auth * , struct auth_cred * , int  ) ;
   int (*pipes_create)(struct rpc_auth * ) ;
   void (*pipes_destroy)(struct rpc_auth * ) ;
   int (*list_pseudoflavors)(rpc_authflavor_t * , int  ) ;
   rpc_authflavor_t (*info2flavor)(struct rpcsec_gss_info * ) ;
   int (*flavor2info)(rpc_authflavor_t  , struct rpcsec_gss_info * ) ;
};
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_credops {
   char const   *cr_name ;
   int (*cr_init)(struct rpc_auth * , struct rpc_cred * ) ;
   void (*crdestroy)(struct rpc_cred * ) ;
   int (*crmatch)(struct auth_cred * , struct rpc_cred * , int  ) ;
   struct rpc_cred *(*crbind)(struct rpc_task * , struct rpc_cred * , int  ) ;
   __be32 *(*crmarshal)(struct rpc_task * , __be32 * ) ;
   int (*crrefresh)(struct rpc_task * ) ;
   __be32 *(*crvalidate)(struct rpc_task * , __be32 * ) ;
   int (*crwrap_req)(struct rpc_task * , void (*)(void * , struct xdr_stream * , void * ) ,
                     void * , __be32 * , void * ) ;
   int (*crunwrap_resp)(struct rpc_task * , int (*)(void * , struct xdr_stream * ,
                                                    void * ) , void * , __be32 * ,
                        void * ) ;
};
#line 172
struct rpc_program;
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_stat {
   struct rpc_program  const  *program ;
   unsigned int netcnt ;
   unsigned int netudpcnt ;
   unsigned int nettcpcnt ;
   unsigned int nettcpconn ;
   unsigned int netreconn ;
   unsigned int rpccnt ;
   unsigned int rpcretrans ;
   unsigned int rpcauthrefresh ;
   unsigned int rpcgarbage ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/stats.h"
struct svc_program;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/stats.h"
struct svc_stat {
   struct svc_program *program ;
   unsigned int netcnt ;
   unsigned int netudpcnt ;
   unsigned int nettcpcnt ;
   unsigned int nettcpconn ;
   unsigned int rpccnt ;
   unsigned int rpcbadfmt ;
   unsigned int rpcbadauth ;
   unsigned int rpcbadclnt ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/stats.h"
struct rpc_rtt {
   unsigned long timeo ;
   unsigned long srtt[5U] ;
   unsigned long sdrtt[5U] ;
   int ntimeouts[5U] ;
};
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   void *sysctl ;
};
#line 564 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 226 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/res_counter.h"
struct kioctx;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/aio.h"
typedef int kiocb_cancel_fn(struct kiocb * , struct io_event * );
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/aio.h"
union __anonunion_ki_obj_227 {
   void *user ;
   struct task_struct *tsk ;
};
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/aio.h"
struct kiocb {
   atomic_t ki_users ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   kiocb_cancel_fn *ki_cancel ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_227 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/aio.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct callback_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
};
#line 133
struct neigh_table;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 409
struct dn_route;
#line 409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/neighbour.h"
union __anonunion____missing_field_name_231 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion____missing_field_name_231 __annonCompField62 ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
struct __anonstruct_socket_lock_t_232 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_232 socket_lock_t;
#line 123
struct proto;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
typedef __u32 __portpair;
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
typedef __u64 __addrpair;
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
struct __anonstruct____missing_field_name_234 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_233 {
   __addrpair skc_addrpair ;
   struct __anonstruct____missing_field_name_234 __annonCompField63 ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_235 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
struct __anonstruct____missing_field_name_237 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_236 {
   __portpair skc_portpair ;
   struct __anonstruct____missing_field_name_237 __annonCompField66 ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_238 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
union __anonunion____missing_field_name_239 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
struct sock_common {
   union __anonunion____missing_field_name_233 __annonCompField64 ;
   union __anonunion____missing_field_name_235 __annonCompField65 ;
   union __anonunion____missing_field_name_236 __annonCompField67 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 4 ;
   int skc_bound_dev_if ;
   union __anonunion____missing_field_name_238 __annonCompField68 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion____missing_field_name_239 __annonCompField69 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 210
struct cg_proto;
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
struct __anonstruct_sk_backlog_240 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_240 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int sk_shutdown : 2 ;
   unsigned int sk_no_check : 2 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 864
struct request_sock_ops;
#line 865
struct timewait_sock_ops;
#line 866
struct inet_hashinfo;
#line 867
struct raw_hashinfo;
#line 882
struct udp_table;
#line 882 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
union __anonunion_h_241 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 882 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*release_cb)(struct sock * ) ;
   void (*mtu_reduced)(struct sock * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_241 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 1006 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 375 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 866 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
struct rpc_iostats;
#line 866 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
struct rpc_clnt {
   atomic_t cl_count ;
   struct list_head cl_clients ;
   struct list_head cl_tasks ;
   spinlock_t cl_lock ;
   struct rpc_xprt *cl_xprt ;
   struct rpc_procinfo *cl_procinfo ;
   u32 cl_prog ;
   u32 cl_vers ;
   u32 cl_maxproc ;
   char const   *cl_protname ;
   struct rpc_auth *cl_auth ;
   struct rpc_stat *cl_stats ;
   struct rpc_iostats *cl_metrics ;
   unsigned int cl_softrtry : 1 ;
   unsigned int cl_discrtry : 1 ;
   unsigned int cl_autobind : 1 ;
   unsigned int cl_chatty : 1 ;
   struct rpc_rtt *cl_rtt ;
   struct rpc_timeout  const  *cl_timeout ;
   int cl_nodelen ;
   char cl_nodename[32U] ;
   struct dentry *cl_dentry ;
   struct rpc_clnt *cl_parent ;
   struct rpc_rtt cl_rtt_default ;
   struct rpc_timeout cl_timeout_default ;
   struct rpc_program  const  *cl_program ;
   char *cl_principal ;
};
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_version;
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_program {
   char const   *name ;
   u32 number ;
   unsigned int nrvers ;
   struct rpc_version  const  **version ;
   struct rpc_stat *stats ;
   char const   *pipe_dir_name ;
};
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_version {
   u32 number ;
   unsigned int nrprocs ;
   struct rpc_procinfo *procs ;
};
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_procinfo {
   u32 p_proc ;
   void (*p_encode)(void * , struct xdr_stream * , void * ) ;
   int (*p_decode)(void * , struct xdr_stream * , void * ) ;
   unsigned int p_arglen ;
   unsigned int p_replen ;
   unsigned int p_count ;
   unsigned int p_timer ;
   u32 p_statidx ;
   char const   *p_name ;
};
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_create_args {
   struct net *net ;
   int protocol ;
   struct sockaddr *address ;
   size_t addrsize ;
   struct sockaddr *saddress ;
   struct rpc_timeout  const  *timeout ;
   char const   *servername ;
   struct rpc_program  const  *program ;
   u32 prognumber ;
   u32 version ;
   rpc_authflavor_t authflavor ;
   unsigned long flags ;
   char *client_name ;
   struct svc_xprt *bc_xprt ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
struct cache_detail;
#line 95 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
struct rpc_iostats {
   unsigned long om_ops ;
   unsigned long om_ntrans ;
   unsigned long om_timeouts ;
   unsigned long long om_bytes_sent ;
   unsigned long long om_bytes_recv ;
   ktime_t om_queue ;
   ktime_t om_rtt ;
   ktime_t om_execute ;
};
#line 81 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/metrics.h"
struct cache_head {
   struct cache_head *next ;
   time_t expiry_time ;
   time_t last_refresh ;
   struct kref ref ;
   unsigned long flags ;
};
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
struct cache_detail_procfs {
   struct proc_dir_entry *proc_ent ;
   struct proc_dir_entry *flush_ent ;
   struct proc_dir_entry *channel_ent ;
   struct proc_dir_entry *content_ent ;
};
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
struct cache_detail_pipefs {
   struct dentry *dir ;
};
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
union __anonunion_u_252 {
   struct cache_detail_procfs procfs ;
   struct cache_detail_pipefs pipefs ;
};
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
struct cache_detail {
   struct module *owner ;
   int hash_size ;
   struct cache_head **hash_table ;
   rwlock_t hash_lock ;
   atomic_t inuse ;
   char *name ;
   void (*cache_put)(struct kref * ) ;
   int (*cache_upcall)(struct cache_detail * , struct cache_head * ) ;
   void (*cache_request)(struct cache_detail * , struct cache_head * , char ** , int * ) ;
   int (*cache_parse)(struct cache_detail * , char * , int  ) ;
   int (*cache_show)(struct seq_file * , struct cache_detail * , struct cache_head * ) ;
   void (*warn_no_listener)(struct cache_detail * , int  ) ;
   struct cache_head *(*alloc)(void) ;
   int (*match)(struct cache_head * , struct cache_head * ) ;
   void (*init)(struct cache_head * , struct cache_head * ) ;
   void (*update)(struct cache_head * , struct cache_head * ) ;
   time_t flush_time ;
   struct list_head others ;
   time_t nextcheck ;
   int entries ;
   struct list_head queue ;
   atomic_t readers ;
   time_t last_close ;
   time_t last_warn ;
   union __anonunion_u_252 u ;
   struct net *net ;
};
#line 126
struct cache_deferred_req;
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
struct cache_req {
   struct cache_deferred_req *(*defer)(struct cache_req * ) ;
   int thread_wait ;
};
#line 136 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
struct cache_deferred_req {
   struct hlist_node hash ;
   struct list_head recent ;
   struct cache_head *item ;
   void *owner ;
   void (*revisit)(struct cache_deferred_req * , int  ) ;
};
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
struct svc_cred {
   kuid_t cr_uid ;
   kgid_t cr_gid ;
   struct group_info *cr_group_info ;
   u32 cr_flavor ;
   char *cr_principal ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcauth.h"
struct svc_rqst;
#line 35
struct auth_ops;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcauth.h"
struct auth_domain {
   struct kref ref ;
   struct hlist_node hash ;
   char *name ;
   struct auth_ops *flavour ;
};
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcauth.h"
struct auth_ops {
   char *name ;
   struct module *owner ;
   int flavour ;
   int (*accept)(struct svc_rqst * , __be32 * ) ;
   int (*release)(struct svc_rqst * ) ;
   void (*domain_release)(struct auth_domain * ) ;
   int (*set_client)(struct svc_rqst * ) ;
};
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_pool_stats {
   unsigned long packets ;
   unsigned long sockets_queued ;
   unsigned long threads_woken ;
   unsigned long threads_timedout ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_pool {
   unsigned int sp_id ;
   spinlock_t sp_lock ;
   struct list_head sp_threads ;
   struct list_head sp_sockets ;
   unsigned int sp_nrthreads ;
   struct list_head sp_all_threads ;
   struct svc_pool_stats sp_stats ;
   int sp_task_pending ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_serv {
   struct svc_program *sv_program ;
   struct svc_stat *sv_stats ;
   spinlock_t sv_lock ;
   unsigned int sv_nrthreads ;
   unsigned int sv_maxconn ;
   unsigned int sv_max_payload ;
   unsigned int sv_max_mesg ;
   unsigned int sv_xdrsize ;
   struct list_head sv_permsocks ;
   struct list_head sv_tempsocks ;
   int sv_tmpcnt ;
   struct timer_list sv_temptimer ;
   char *sv_name ;
   unsigned int sv_nrpools ;
   struct svc_pool *sv_pools ;
   void (*sv_shutdown)(struct svc_serv * , struct net * ) ;
   struct module *sv_module ;
   int (*sv_function)(void * ) ;
   struct list_head sv_cb_list ;
   spinlock_t sv_cb_lock ;
   wait_queue_head_t sv_cb_waitq ;
   struct svc_xprt *sv_bc_xprt ;
};
#line 216
struct svc_procedure;
#line 216
struct svc_deferred_req;
#line 216
struct svc_cacherep;
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_rqst {
   struct list_head rq_list ;
   struct list_head rq_all ;
   struct svc_xprt *rq_xprt ;
   struct __kernel_sockaddr_storage rq_addr ;
   size_t rq_addrlen ;
   struct __kernel_sockaddr_storage rq_daddr ;
   size_t rq_daddrlen ;
   struct svc_serv *rq_server ;
   struct svc_pool *rq_pool ;
   struct svc_procedure *rq_procinfo ;
   struct auth_ops *rq_authop ;
   struct svc_cred rq_cred ;
   void *rq_xprt_ctxt ;
   struct svc_deferred_req *rq_deferred ;
   int rq_usedeferral ;
   size_t rq_xprt_hlen ;
   struct xdr_buf rq_arg ;
   struct xdr_buf rq_res ;
   struct page *rq_pages[259U] ;
   struct page **rq_respages ;
   int rq_resused ;
   struct page **rq_next_page ;
   struct kvec rq_vec[259U] ;
   __be32 rq_xid ;
   u32 rq_prog ;
   u32 rq_vers ;
   u32 rq_proc ;
   u32 rq_prot ;
   unsigned short rq_secure : 1 ;
   void *rq_argp ;
   void *rq_resp ;
   void *rq_auth_data ;
   int rq_reserved ;
   struct cache_req rq_chandle ;
   bool rq_dropme ;
   struct auth_domain *rq_client ;
   struct auth_domain *rq_gssclient ;
   int rq_cachetype ;
   struct svc_cacherep *rq_cacherep ;
   int rq_splice_ok ;
   wait_queue_head_t rq_wait ;
   struct task_struct *rq_task ;
};
#line 351 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_deferred_req {
   u32 prot ;
   struct svc_xprt *xprt ;
   struct __kernel_sockaddr_storage addr ;
   size_t addrlen ;
   struct __kernel_sockaddr_storage daddr ;
   size_t daddrlen ;
   struct cache_deferred_req handle ;
   size_t xprt_hlen ;
   int argslen ;
   __be32 args[0U] ;
};
#line 364
struct svc_version;
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_program {
   struct svc_program *pg_next ;
   u32 pg_prog ;
   unsigned int pg_lovers ;
   unsigned int pg_hivers ;
   unsigned int pg_nvers ;
   struct svc_version **pg_vers ;
   char *pg_name ;
   char *pg_class ;
   struct svc_stat *pg_stats ;
   int (*pg_authenticate)(struct svc_rqst * ) ;
};
#line 380 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_version {
   u32 vs_vers ;
   u32 vs_nproc ;
   struct svc_procedure *vs_proc ;
   u32 vs_xdrsize ;
   unsigned int vs_hidden : 1 ;
   int (*vs_dispatch)(struct svc_rqst * , __be32 * ) ;
};
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_procedure {
   __be32 (*pc_func)(struct svc_rqst * , void * , void * ) ;
   int (*pc_decode)(void * , __be32 * , void * ) ;
   int (*pc_encode)(void * , __be32 * , void * ) ;
   int (*pc_release)(void * , __be32 * , void * ) ;
   unsigned int pc_argsize ;
   unsigned int pc_ressize ;
   unsigned int pc_count ;
   unsigned int pc_cachetype ;
   unsigned int pc_xdrressize ;
};
#line 462 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
struct svc_xprt_ops {
   struct svc_xprt *(*xpo_create)(struct svc_serv * , struct net * , struct sockaddr * ,
                                  int  , int  ) ;
   struct svc_xprt *(*xpo_accept)(struct svc_xprt * ) ;
   int (*xpo_has_wspace)(struct svc_xprt * ) ;
   int (*xpo_recvfrom)(struct svc_rqst * ) ;
   void (*xpo_prep_reply_hdr)(struct svc_rqst * ) ;
   int (*xpo_sendto)(struct svc_rqst * ) ;
   void (*xpo_release_rqst)(struct svc_rqst * ) ;
   void (*xpo_detach)(struct svc_xprt * ) ;
   void (*xpo_free)(struct svc_xprt * ) ;
};
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
struct svc_xprt_class {
   char const   *xcl_name ;
   struct module *xcl_owner ;
   struct svc_xprt_ops *xcl_ops ;
   struct list_head xcl_list ;
   u32 xcl_max_payload ;
};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
struct svc_xprt {
   struct svc_xprt_class *xpt_class ;
   struct svc_xprt_ops *xpt_ops ;
   struct kref xpt_ref ;
   struct list_head xpt_list ;
   struct list_head xpt_ready ;
   unsigned long xpt_flags ;
   struct svc_serv *xpt_server ;
   atomic_t xpt_reserved ;
   struct mutex xpt_mutex ;
   spinlock_t xpt_lock ;
   void *xpt_auth_cache ;
   struct list_head xpt_deferred ;
   struct __kernel_sockaddr_storage xpt_local ;
   size_t xpt_locallen ;
   struct __kernel_sockaddr_storage xpt_remote ;
   size_t xpt_remotelen ;
   struct rpc_wait_queue xpt_bc_pending ;
   struct list_head xpt_users ;
   struct net *xpt_net ;
   struct rpc_xprt *xpt_bc_xprt ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc.h"
struct net_generic {
   unsigned int len ;
   struct callback_head rcu ;
   void *ptr[0U] ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/generic.h"
struct sunrpc_net {
   struct proc_dir_entry *proc_net_rpc ;
   struct cache_detail *ip_map_cache ;
   struct cache_detail *unix_gid_cache ;
   struct cache_detail *rsc_cache ;
   struct cache_detail *rsi_cache ;
   struct super_block *pipefs_sb ;
   struct mutex pipefs_sb_lock ;
   struct list_head all_clients ;
   spinlock_t rpc_client_lock ;
   struct rpc_clnt *rpcb_local_clnt ;
   struct rpc_clnt *rpcb_local_clnt4 ;
   spinlock_t rpcb_clnt_lock ;
   unsigned int rpcb_users ;
   unsigned int rpcb_is_af_local : 1 ;
   struct mutex gssp_lock ;
   wait_queue_head_t gssp_wq ;
   struct rpc_clnt *gssp_clnt ;
   int use_gss_proxy ;
   int pipe_version ;
   atomic_t pipe_users ;
   struct proc_dir_entry *use_gssp_proc ;
   unsigned int gssd_running ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_suseconds_t;
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/time.h"
struct timeval {
   __kernel_time_t tv_sec ;
   __kernel_suseconds_t tv_usec ;
};
#line 263 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 271 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
struct xprt_class {
   struct list_head list ;
   int ident ;
   struct rpc_xprt *(*setup)(struct xprt_create * ) ;
   struct module *owner ;
   char name[32U] ;
};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
struct xdr_skb_reader {
   struct sk_buff *skb ;
   unsigned int offset ;
   size_t count ;
   __wsum csum ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/types.h"
typedef __u16 __le16;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
typedef struct ctl_table ctl_table;
#line 64 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/net.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netfilter.h"
struct flowi;
#line 274 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netfilter.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
struct __anonstruct_ports_207 {
   __be16 dport ;
   __be16 sport ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
struct __anonstruct_icmpt_208 {
   __u8 type ;
   __u8 code ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
struct __anonstruct_dnports_209 {
   __le16 dport ;
   __le16 sport ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
struct __anonstruct_mht_210 {
   __u8 type ;
};
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_207 ports ;
   struct __anonstruct_icmpt_208 icmpt ;
   struct __anonstruct_dnports_209 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_210 mht ;
};
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
};
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
};
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
};
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
union __anonunion_u_211 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/flow.h"
struct flowi {
   union __anonunion_u_211 u ;
};
#line 637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
enum sock_flags {
    SOCK_DEAD = 0,
    SOCK_DONE = 1,
    SOCK_URGINLINE = 2,
    SOCK_KEEPOPEN = 3,
    SOCK_LINGER = 4,
    SOCK_DESTROY = 5,
    SOCK_BROADCAST = 6,
    SOCK_TIMESTAMP = 7,
    SOCK_ZAPPED = 8,
    SOCK_USE_WRITE_QUEUE = 9,
    SOCK_DBG = 10,
    SOCK_RCVTSTAMP = 11,
    SOCK_RCVTSTAMPNS = 12,
    SOCK_LOCALROUTE = 13,
    SOCK_QUEUE_SHRUNK = 14,
    SOCK_MEMALLOC = 15,
    SOCK_TIMESTAMPING_TX_HARDWARE = 16,
    SOCK_TIMESTAMPING_TX_SOFTWARE = 17,
    SOCK_TIMESTAMPING_RX_HARDWARE = 18,
    SOCK_TIMESTAMPING_RX_SOFTWARE = 19,
    SOCK_TIMESTAMPING_SOFTWARE = 20,
    SOCK_TIMESTAMPING_RAW_HARDWARE = 21,
    SOCK_TIMESTAMPING_SYS_HARDWARE = 22,
    SOCK_FASYNC = 23,
    SOCK_RXQ_OVFL = 24,
    SOCK_ZEROCOPY = 25,
    SOCK_WIFI_STATUS = 26,
    SOCK_NOFCS = 27,
    SOCK_FILTER_LOCKED = 28,
    SOCK_SELECT_ERR_QUEUE = 29
} ;
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/request_sock.h"
struct listen_sock {
   u8 max_qlen_log ;
   u8 synflood_warned ;
   int qlen ;
   int qlen_young ;
   int clock_hand ;
   u32 hash_rnd ;
   u32 nr_table_entries ;
   struct request_sock *syn_table[0U] ;
};
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/request_sock.h"
struct fastopen_queue {
   struct request_sock *rskq_rst_head ;
   struct request_sock *rskq_rst_tail ;
   spinlock_t lock ;
   int qlen ;
   int max_qlen ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/request_sock.h"
struct request_sock_queue {
   struct request_sock *rskq_accept_head ;
   struct request_sock *rskq_accept_tail ;
   rwlock_t syn_wait_lock ;
   u8 rskq_defer_accept ;
   struct listen_sock *listen_opt ;
   struct fastopen_queue *fastopenq ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/hash.h"
struct ip_options {
   __be32 faddr ;
   __be32 nexthop ;
   unsigned char optlen ;
   unsigned char srr ;
   unsigned char rr ;
   unsigned char ts ;
   unsigned char is_strictroute : 1 ;
   unsigned char srr_is_hit : 1 ;
   unsigned char is_changed : 1 ;
   unsigned char rr_needaddr : 1 ;
   unsigned char ts_needtime : 1 ;
   unsigned char ts_needaddr : 1 ;
   unsigned char router_alert ;
   unsigned char cipso ;
   unsigned char __pad2 ;
   unsigned char __data[0U] ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_sock.h"
struct ip_options_rcu {
   struct callback_head rcu ;
   struct ip_options opt ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_sock.h"
struct inet_cork {
   unsigned int flags ;
   __be32 addr ;
   struct ip_options *opt ;
   unsigned int fragsize ;
   int length ;
   struct dst_entry *dst ;
   u8 tx_flags ;
};
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_sock.h"
struct inet_cork_full {
   struct inet_cork base ;
   struct flowi fl ;
};
#line 113
struct ip_mc_socklist;
#line 114
struct ipv6_pinfo;
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_sock.h"
struct inet_sock {
   struct sock sk ;
   struct ipv6_pinfo *pinet6 ;
   __be32 inet_saddr ;
   __s16 uc_ttl ;
   __u16 cmsg_flags ;
   __be16 inet_sport ;
   __u16 inet_id ;
   struct ip_options_rcu *inet_opt ;
   int rx_dst_ifindex ;
   __u8 tos ;
   __u8 min_ttl ;
   __u8 mc_ttl ;
   __u8 pmtudisc ;
   __u8 recverr : 1 ;
   __u8 is_icsk : 1 ;
   __u8 freebind : 1 ;
   __u8 hdrincl : 1 ;
   __u8 mc_loop : 1 ;
   __u8 transparent : 1 ;
   __u8 mc_all : 1 ;
   __u8 nodefrag : 1 ;
   __u8 rcv_tos ;
   int uc_index ;
   int mc_index ;
   __be32 mc_addr ;
   struct ip_mc_socklist *mc_list ;
   struct inet_cork_full cork ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/udp.h"
struct inet_bind_bucket;
#line 79
struct tcp_congestion_ops;
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/udp.h"
struct inet_connection_sock_af_ops {
   int (*queue_xmit)(struct sk_buff * , struct flowi * ) ;
   void (*send_check)(struct sock * , struct sk_buff * ) ;
   int (*rebuild_header)(struct sock * ) ;
   void (*sk_rx_dst_set)(struct sock * , struct sk_buff  const  * ) ;
   int (*conn_request)(struct sock * , struct sk_buff * ) ;
   struct sock *(*syn_recv_sock)(struct sock * , struct sk_buff * , struct request_sock * ,
                                 struct dst_entry * ) ;
   u16 net_header_len ;
   u16 net_frag_header_len ;
   u16 sockaddr_len ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   void (*addr2sockaddr)(struct sock * , struct sockaddr * ) ;
   int (*bind_conflict)(struct sock  const  * , struct inet_bind_bucket  const  * ,
                        bool  ) ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_connection_sock.h"
struct __anonstruct_icsk_ack_239 {
   __u8 pending ;
   __u8 quick ;
   __u8 pingpong ;
   __u8 blocked ;
   __u32 ato ;
   unsigned long timeout ;
   __u32 lrcvtime ;
   __u16 last_seg_size ;
   __u16 rcv_mss ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_connection_sock.h"
struct __anonstruct_icsk_mtup_240 {
   int enabled ;
   int search_high ;
   int search_low ;
   int probe_size ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_connection_sock.h"
struct inet_connection_sock {
   struct inet_sock icsk_inet ;
   struct request_sock_queue icsk_accept_queue ;
   struct inet_bind_bucket *icsk_bind_hash ;
   unsigned long icsk_timeout ;
   struct timer_list icsk_retransmit_timer ;
   struct timer_list icsk_delack_timer ;
   __u32 icsk_rto ;
   __u32 icsk_pmtu_cookie ;
   struct tcp_congestion_ops  const  *icsk_ca_ops ;
   struct inet_connection_sock_af_ops  const  *icsk_af_ops ;
   unsigned int (*icsk_sync_mss)(struct sock * , u32  ) ;
   __u8 icsk_ca_state ;
   __u8 icsk_retransmits ;
   __u8 icsk_pending ;
   __u8 icsk_backoff ;
   __u8 icsk_syn_retries ;
   __u8 icsk_probes_out ;
   __u16 icsk_ext_hdr_len ;
   struct __anonstruct_icsk_ack_239 icsk_ack ;
   struct __anonstruct_icsk_mtup_240 icsk_mtup ;
   u32 icsk_ca_priv[16U] ;
   u32 icsk_user_timeout ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
struct tcp_fastopen_cookie {
   s8 len ;
   u8 val[16U] ;
};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
struct tcp_sack_block {
   u32 start_seq ;
   u32 end_seq ;
};
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
struct tcp_options_received {
   long ts_recent_stamp ;
   u32 ts_recent ;
   u32 rcv_tsval ;
   u32 rcv_tsecr ;
   u16 saw_tstamp : 1 ;
   u16 tstamp_ok : 1 ;
   u16 dsack : 1 ;
   u16 wscale_ok : 1 ;
   u16 sack_ok : 4 ;
   u16 snd_wscale : 4 ;
   u16 rcv_wscale : 4 ;
   u8 num_sacks ;
   u16 user_mss ;
   u16 mss_clamp ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
struct __anonstruct_ucopy_241 {
   struct sk_buff_head prequeue ;
   struct task_struct *task ;
   struct iovec *iov ;
   int memory ;
   int len ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
struct __anonstruct_rcv_rtt_est_242 {
   u32 rtt ;
   u32 seq ;
   u32 time ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
struct __anonstruct_rcvq_space_243 {
   int space ;
   u32 seq ;
   u32 time ;
};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
struct __anonstruct_mtu_probe_244 {
   u32 probe_seq_start ;
   u32 probe_seq_end ;
};
#line 133
struct tcp_sock_af_ops;
#line 133
struct tcp_md5sig_info;
#line 133
struct tcp_fastopen_request;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
struct tcp_sock {
   struct inet_connection_sock inet_conn ;
   u16 tcp_header_len ;
   u16 xmit_size_goal_segs ;
   __be32 pred_flags ;
   u32 rcv_nxt ;
   u32 copied_seq ;
   u32 rcv_wup ;
   u32 snd_nxt ;
   u32 snd_una ;
   u32 snd_sml ;
   u32 rcv_tstamp ;
   u32 lsndtime ;
   u32 tsoffset ;
   struct list_head tsq_node ;
   unsigned long tsq_flags ;
   struct __anonstruct_ucopy_241 ucopy ;
   u32 snd_wl1 ;
   u32 snd_wnd ;
   u32 max_window ;
   u32 mss_cache ;
   u32 window_clamp ;
   u32 rcv_ssthresh ;
   u16 advmss ;
   u8 unused ;
   u8 nonagle : 4 ;
   u8 thin_lto : 1 ;
   u8 thin_dupack : 1 ;
   u8 repair : 1 ;
   u8 frto : 1 ;
   u8 repair_queue ;
   u8 do_early_retrans : 1 ;
   u8 syn_data : 1 ;
   u8 syn_fastopen : 1 ;
   u8 syn_data_acked : 1 ;
   u32 tlp_high_seq ;
   u32 srtt ;
   u32 mdev ;
   u32 mdev_max ;
   u32 rttvar ;
   u32 rtt_seq ;
   u32 packets_out ;
   u32 retrans_out ;
   u16 urg_data ;
   u8 ecn_flags ;
   u8 reordering ;
   u32 snd_up ;
   u8 keepalive_probes ;
   struct tcp_options_received rx_opt ;
   u32 snd_ssthresh ;
   u32 snd_cwnd ;
   u32 snd_cwnd_cnt ;
   u32 snd_cwnd_clamp ;
   u32 snd_cwnd_used ;
   u32 snd_cwnd_stamp ;
   u32 prior_cwnd ;
   u32 prr_delivered ;
   u32 prr_out ;
   u32 rcv_wnd ;
   u32 write_seq ;
   u32 pushed_seq ;
   u32 lost_out ;
   u32 sacked_out ;
   u32 fackets_out ;
   u32 tso_deferred ;
   struct sk_buff *lost_skb_hint ;
   struct sk_buff *scoreboard_skb_hint ;
   struct sk_buff *retransmit_skb_hint ;
   struct sk_buff_head out_of_order_queue ;
   struct tcp_sack_block duplicate_sack[1U] ;
   struct tcp_sack_block selective_acks[4U] ;
   struct tcp_sack_block recv_sack_cache[4U] ;
   struct sk_buff *highest_sack ;
   int lost_cnt_hint ;
   u32 retransmit_high ;
   u32 lost_retrans_low ;
   u32 prior_ssthresh ;
   u32 high_seq ;
   u32 retrans_stamp ;
   u32 undo_marker ;
   int undo_retrans ;
   u32 total_retrans ;
   u32 urg_seq ;
   unsigned int keepalive_time ;
   unsigned int keepalive_intvl ;
   int linger2 ;
   struct __anonstruct_rcv_rtt_est_242 rcv_rtt_est ;
   struct __anonstruct_rcvq_space_243 rcvq_space ;
   struct __anonstruct_mtu_probe_244 mtu_probe ;
   u32 mtu_info ;
   struct tcp_sock_af_ops  const  *af_specific ;
   struct tcp_md5sig_info *md5sig_info ;
   struct tcp_fastopen_request *fastopen_req ;
   struct request_sock *fastopen_rsk ;
};
#line 341
struct tcp_md5sig_key;
#line 102 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/msg_prot.h"
typedef __be32 rpc_fraghdr;
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/timer.h"
struct in6_pktinfo {
   struct in6_addr ipi6_addr ;
   int ipi6_ifindex ;
};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ipv6.h"
struct ipv6_rt_hdr {
   __u8 nexthdr ;
   __u8 hdrlen ;
   __u8 type ;
   __u8 segments_left ;
};
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/ipv6.h"
struct ipv6_opt_hdr {
   __u8 nexthdr ;
   __u8 hdrlen ;
};
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ipv6.h"
struct ipv6_mc_socklist;
#line 127
struct ipv6_ac_socklist;
#line 128
struct ipv6_fl_socklist;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ipv6.h"
struct __anonstruct_bits_249 {
   __u16 srcrt : 1 ;
   __u16 osrcrt : 1 ;
   __u16 rxinfo : 1 ;
   __u16 rxoinfo : 1 ;
   __u16 rxhlim : 1 ;
   __u16 rxohlim : 1 ;
   __u16 hopopts : 1 ;
   __u16 ohopopts : 1 ;
   __u16 dstopts : 1 ;
   __u16 odstopts : 1 ;
   __u16 rxflow : 1 ;
   __u16 rxtclass : 1 ;
   __u16 rxpmtu : 1 ;
   __u16 rxorigdstaddr : 1 ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ipv6.h"
union __anonunion_rxopt_248 {
   struct __anonstruct_bits_249 bits ;
   __u16 all ;
};
#line 129
struct ipv6_txoptions;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ipv6.h"
struct __anonstruct_cork_250 {
   struct ipv6_txoptions *opt ;
   u8 hop_limit ;
   u8 tclass ;
};
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ipv6.h"
struct ipv6_pinfo {
   struct in6_addr saddr ;
   struct in6_addr rcv_saddr ;
   struct in6_addr daddr ;
   struct in6_pktinfo sticky_pktinfo ;
   struct in6_addr  const  *daddr_cache ;
   struct in6_addr  const  *saddr_cache ;
   __be32 flow_label ;
   __u32 frag_size ;
   __u16 __unused_1 : 7 ;
   __s16 hop_limit : 9 ;
   __u16 mc_loop : 1 ;
   __u16 __unused_2 : 6 ;
   __s16 mcast_hops : 9 ;
   int ucast_oif ;
   int mcast_oif ;
   union __anonunion_rxopt_248 rxopt ;
   __u16 recverr : 1 ;
   __u16 sndflow : 1 ;
   __u16 pmtudisc : 2 ;
   __u16 ipv6only : 1 ;
   __u16 srcprefs : 3 ;
   __u16 dontfrag : 1 ;
   __u8 min_hopcount ;
   __u8 tclass ;
   __u8 rcv_tclass ;
   __u32 dst_cookie ;
   __u32 rx_dst_cookie ;
   struct ipv6_mc_socklist *ipv6_mc_list ;
   struct ipv6_ac_socklist *ipv6_ac_list ;
   struct ipv6_fl_socklist *ipv6_fl_list ;
   struct ipv6_txoptions *opt ;
   struct sk_buff *pktoptions ;
   struct sk_buff *rxpmtu ;
   struct __anonstruct_cork_250 cork ;
};
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/if_inet6.h"
struct ip6_sf_socklist {
   unsigned int sl_max ;
   unsigned int sl_count ;
   struct in6_addr sl_addr[0U] ;
};
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/if_inet6.h"
struct ipv6_mc_socklist {
   struct in6_addr addr ;
   int ifindex ;
   struct ipv6_mc_socklist *next ;
   rwlock_t sflock ;
   unsigned int sfmode ;
   struct ip6_sf_socklist *sflist ;
   struct callback_head rcu ;
};
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/if_inet6.h"
struct ipv6_ac_socklist {
   struct in6_addr acl_addr ;
   int acl_ifindex ;
   struct ipv6_ac_socklist *acl_next ;
};
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
struct ipv6_txoptions {
   int tot_len ;
   __u16 opt_flen ;
   __u16 opt_nflen ;
   struct ipv6_opt_hdr *hopopt ;
   struct ipv6_opt_hdr *dst0opt ;
   struct ipv6_rt_hdr *srcrt ;
   struct ipv6_opt_hdr *dst1opt ;
};
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
union __anonunion_owner_251 {
   struct pid *pid ;
   kuid_t uid ;
};
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
struct ip6_flowlabel {
   struct ip6_flowlabel *next ;
   __be32 label ;
   atomic_t users ;
   struct in6_addr dst ;
   struct ipv6_txoptions *opt ;
   unsigned long linger ;
   struct callback_head rcu ;
   u8 share ;
   union __anonunion_owner_251 owner ;
   unsigned long lastuse ;
   unsigned long expires ;
   struct net *fl_net ;
};
#line 236 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
struct ipv6_fl_socklist {
   struct ipv6_fl_socklist *next ;
   struct ip6_flowlabel *fl ;
   struct callback_head rcu ;
};
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
struct svc_sock {
   struct svc_xprt sk_xprt ;
   struct socket *sk_sock ;
   struct sock *sk_sk ;
   void (*sk_ostate)(struct sock * ) ;
   void (*sk_odata)(struct sock * , int  ) ;
   void (*sk_owspace)(struct sock * ) ;
   __be32 sk_reclen ;
   u32 sk_tcplen ;
   u32 sk_datalen ;
   struct page *sk_pages[259U] ;
};
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/udp.h"
struct udp_hslot {
   struct hlist_nulls_head head ;
   int count ;
   spinlock_t lock ;
};
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 731 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/interrupt.h"
union __anonunion____missing_field_name_257 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 731 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/interrupt.h"
struct inetpeer_addr_base {
   union __anonunion____missing_field_name_257 __annonCompField71 ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inetpeer.h"
union __anonunion____missing_field_name_258 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inetpeer.h"
struct __anonstruct____missing_field_name_260 {
   atomic_t rid ;
   atomic_t ip_id_count ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inetpeer.h"
union __anonunion____missing_field_name_259 {
   struct __anonstruct____missing_field_name_260 __annonCompField73 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion____missing_field_name_258 __annonCompField72 ;
   union __anonunion____missing_field_name_259 __annonCompField74 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   u32 flush_seq ;
   int total ;
};
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
};
#line 319 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_hashtables.h"
struct inet_bind_bucket {
   struct net *ib_net ;
   unsigned short port ;
   signed char fastreuse ;
   signed char fastreuseport ;
   kuid_t fastuid ;
   int num_owners ;
   struct hlist_node node ;
   struct hlist_head owners ;
};
#line 96 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 751 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_FAST_ACK = 4,
    CA_EVENT_SLOW_ACK = 5
} ;
#line 760 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   unsigned long flags ;
   void (*init)(struct sock * ) ;
   void (*release)(struct sock * ) ;
   u32 (*ssthresh)(struct sock * ) ;
   u32 (*min_cwnd)(struct sock  const  * ) ;
   void (*cong_avoid)(struct sock * , u32  , u32  ) ;
   void (*set_state)(struct sock * , u8  ) ;
   void (*cwnd_event)(struct sock * , enum tcp_ca_event  ) ;
   u32 (*undo_cwnd)(struct sock * ) ;
   void (*pkts_acked)(struct sock * , u32  , s32  ) ;
   void (*get_info)(struct sock * , u32  , struct sk_buff * ) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
union tcp_md5_addr {
   struct in_addr a4 ;
   struct in6_addr a6 ;
};
#line 1214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
struct tcp_md5sig_key {
   struct hlist_node node ;
   u8 keylen ;
   u8 family ;
   union tcp_md5_addr addr ;
   u8 key[80U] ;
   struct callback_head rcu ;
};
#line 1225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
struct tcp_md5sig_info {
   struct hlist_head head ;
   struct callback_head rcu ;
};
#line 1305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
struct tcp_fastopen_request {
   struct tcp_fastopen_cookie cookie ;
   struct msghdr *data ;
   size_t size ;
   int copied ;
};
#line 1558 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
struct tcp_sock_af_ops {
   struct tcp_md5sig_key *(*md5_lookup)(struct sock * , struct sock * ) ;
   int (*calc_md5_hash)(char * , struct tcp_md5sig_key * , struct sock  const  * ,
                        struct request_sock  const  * , struct sk_buff  const  * ) ;
   int (*md5_parse)(struct sock * , char * , int  ) ;
};
#line 1590 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
struct rpc_buffer {
   size_t len ;
   char data[] ;
};
#line 214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
struct sock_xprt {
   struct rpc_xprt xprt ;
   struct socket *sock ;
   struct sock *inet ;
   __be32 tcp_fraghdr ;
   __be32 tcp_xid ;
   __be32 tcp_calldir ;
   u32 tcp_offset ;
   u32 tcp_reclen ;
   unsigned long tcp_copied ;
   unsigned long tcp_flags ;
   struct delayed_work connect_worker ;
   struct __kernel_sockaddr_storage srcaddr ;
   unsigned short srcport ;
   size_t rcvsize ;
   size_t sndsize ;
   void (*old_data_ready)(struct sock * , int  ) ;
   void (*old_state_change)(struct sock * ) ;
   void (*old_write_space)(struct sock * ) ;
};
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____39;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____40;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____41;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____42;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____43;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____44;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____45;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____46;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____47;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____48;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____49;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____50;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____51;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____52;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____53;
#line 1026 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____54;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____55;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____56;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____57;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____58;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____59;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____60;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____61;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____62;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____63;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____64;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____65;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____66;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____67;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____68;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____69;
#line 1030 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
typedef unsigned long pao_T_____70;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
struct wait_bit_key {
   void *flags ;
   int bit_nr ;
};
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct ring_buffer;
#line 169
struct ring_buffer_iter;
#line 190 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ring_buffer.h"
struct trace_seq;
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ring_buffer.h"
struct trace_seq {
   unsigned char buffer[4096U] ;
   unsigned int len ;
   unsigned int readpos ;
   int full ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/trace_seq.h"
union __anonunion____missing_field_name_252 {
   __u64 sample_period ;
   __u64 sample_freq ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/trace_seq.h"
union __anonunion____missing_field_name_253 {
   __u32 wakeup_events ;
   __u32 wakeup_watermark ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/trace_seq.h"
union __anonunion____missing_field_name_254 {
   __u64 bp_addr ;
   __u64 config1 ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/trace_seq.h"
union __anonunion____missing_field_name_255 {
   __u64 bp_len ;
   __u64 config2 ;
};
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/trace_seq.h"
struct perf_event_attr {
   __u32 type ;
   __u32 size ;
   __u64 config ;
   union __anonunion____missing_field_name_252 __annonCompField70 ;
   __u64 sample_type ;
   __u64 read_format ;
   __u64 disabled : 1 ;
   __u64 inherit : 1 ;
   __u64 pinned : 1 ;
   __u64 exclusive : 1 ;
   __u64 exclude_user : 1 ;
   __u64 exclude_kernel : 1 ;
   __u64 exclude_hv : 1 ;
   __u64 exclude_idle : 1 ;
   __u64 mmap : 1 ;
   __u64 comm : 1 ;
   __u64 freq : 1 ;
   __u64 inherit_stat : 1 ;
   __u64 enable_on_exec : 1 ;
   __u64 task : 1 ;
   __u64 watermark : 1 ;
   __u64 precise_ip : 2 ;
   __u64 mmap_data : 1 ;
   __u64 sample_id_all : 1 ;
   __u64 exclude_host : 1 ;
   __u64 exclude_guest : 1 ;
   __u64 exclude_callchain_kernel : 1 ;
   __u64 exclude_callchain_user : 1 ;
   __u64 __reserved_1 : 41 ;
   union __anonunion____missing_field_name_253 __annonCompField71 ;
   __u32 bp_type ;
   union __anonunion____missing_field_name_254 __annonCompField72 ;
   union __anonunion____missing_field_name_255 __annonCompField73 ;
   __u64 branch_sample_type ;
   __u64 sample_regs_user ;
   __u32 sample_stack_user ;
   __u32 __reserved_2 ;
};
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/perf_event.h"
struct __anonstruct____missing_field_name_257 {
   __u64 mem_op : 5 ;
   __u64 mem_lvl : 14 ;
   __u64 mem_snoop : 5 ;
   __u64 mem_lock : 2 ;
   __u64 mem_dtlb : 7 ;
   __u64 mem_rsvd : 31 ;
};
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/perf_event.h"
union perf_mem_data_src {
   __u64 val ;
   struct __anonstruct____missing_field_name_257 __annonCompField75 ;
};
#line 222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/perf_event.h"
struct pidmap {
   atomic_t nr_free ;
   void *page ;
};
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pid_namespace.h"
struct bsd_acct_struct;
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pid_namespace.h"
struct pid_namespace {
   struct kref kref ;
   struct pidmap pidmap[128U] ;
   int last_pid ;
   unsigned int nr_hashed ;
   struct task_struct *child_reaper ;
   struct kmem_cache *pid_cachep ;
   unsigned int level ;
   struct pid_namespace *parent ;
   struct vfsmount *proc_mnt ;
   struct dentry *proc_self ;
   struct bsd_acct_struct *bacct ;
   struct user_namespace *user_ns ;
   struct work_struct proc_work ;
   kgid_t pid_gid ;
   int hide_pid ;
   int reboot ;
   unsigned int proc_inum ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/local.h"
struct __anonstruct_local_t_261 {
   atomic_long_t a ;
};
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local_t_261 local_t;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/local64.h"
struct __anonstruct_local64_t_262 {
   local_t a ;
};
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/local64.h"
typedef struct __anonstruct_local64_t_262 local64_t;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct arch_hw_breakpoint {
   unsigned long address ;
   u8 len ;
   u8 type ;
};
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/hw_breakpoint.h"
struct pmu;
#line 96 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/ftrace.h"
struct ftrace_hash;
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace.h"
struct ftrace_ops;
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace.h"
struct ftrace_ops {
   void (*func)(unsigned long  , unsigned long  , struct ftrace_ops * , struct pt_regs * ) ;
   struct ftrace_ops *next ;
   unsigned long flags ;
   int *disabled ;
   struct ftrace_hash *notrace_hash ;
   struct ftrace_hash *filter_hash ;
   struct mutex regex_lock ;
};
#line 683 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace.h"
struct ftrace_ret_stack {
   unsigned long ret ;
   unsigned long func ;
   unsigned long long calltime ;
   unsigned long long subtime ;
   unsigned long fp ;
};
#line 234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cpu.h"
struct irq_work {
   unsigned long flags ;
   struct llist_node llnode ;
   void (*func)(struct irq_work * ) ;
};
#line 9 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_regs.h"
struct perf_callchain_entry {
   __u64 nr ;
   __u64 ip[127U] ;
};
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct perf_raw_record {
   u32 size ;
   void *data ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct perf_branch_entry {
   __u64 from ;
   __u64 to ;
   __u64 mispred : 1 ;
   __u64 predicted : 1 ;
   __u64 reserved : 62 ;
};
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct perf_branch_stack {
   __u64 nr ;
   struct perf_branch_entry entries[0U] ;
};
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct perf_regs_user {
   __u64 abi ;
   struct pt_regs *regs ;
};
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct hw_perf_event_extra {
   u64 config ;
   unsigned int reg ;
   int alloc ;
   int idx ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct __anonstruct____missing_field_name_265 {
   u64 config ;
   u64 last_tag ;
   unsigned long config_base ;
   unsigned long event_base ;
   int event_base_rdpmc ;
   int idx ;
   int last_cpu ;
   int flags ;
   struct hw_perf_event_extra extra_reg ;
   struct hw_perf_event_extra branch_reg ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct __anonstruct____missing_field_name_266 {
   struct hrtimer hrtimer ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct __anonstruct____missing_field_name_267 {
   struct task_struct *tp_target ;
   struct list_head tp_list ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct __anonstruct____missing_field_name_268 {
   struct task_struct *bp_target ;
   struct arch_hw_breakpoint info ;
   struct list_head bp_list ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
union __anonunion____missing_field_name_264 {
   struct __anonstruct____missing_field_name_265 __annonCompField77 ;
   struct __anonstruct____missing_field_name_266 __annonCompField78 ;
   struct __anonstruct____missing_field_name_267 __annonCompField79 ;
   struct __anonstruct____missing_field_name_268 __annonCompField80 ;
};
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct hw_perf_event {
   union __anonunion____missing_field_name_264 __annonCompField81 ;
   int state ;
   local64_t prev_count ;
   u64 sample_period ;
   u64 last_period ;
   local64_t period_left ;
   u64 interrupts_seq ;
   u64 interrupts ;
   u64 freq_time_stamp ;
   u64 freq_count_stamp ;
};
#line 167
struct perf_cpu_context;
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct pmu {
   struct list_head entry ;
   struct device *dev ;
   struct attribute_group  const  **attr_groups ;
   char *name ;
   int type ;
   int *pmu_disable_count ;
   struct perf_cpu_context *pmu_cpu_context ;
   int task_ctx_nr ;
   void (*pmu_enable)(struct pmu * ) ;
   void (*pmu_disable)(struct pmu * ) ;
   int (*event_init)(struct perf_event * ) ;
   int (*add)(struct perf_event * , int  ) ;
   void (*del)(struct perf_event * , int  ) ;
   void (*start)(struct perf_event * , int  ) ;
   void (*stop)(struct perf_event * , int  ) ;
   void (*read)(struct perf_event * ) ;
   void (*start_txn)(struct pmu * ) ;
   int (*commit_txn)(struct pmu * ) ;
   void (*cancel_txn)(struct pmu * ) ;
   int (*event_idx)(struct perf_event * ) ;
   void (*flush_branch_stack)(void) ;
};
#line 268
enum perf_event_active_state {
    PERF_EVENT_STATE_ERROR = -2,
    PERF_EVENT_STATE_OFF = -1,
    PERF_EVENT_STATE_INACTIVE = 0,
    PERF_EVENT_STATE_ACTIVE = 1
} ;
#line 275
struct perf_sample_data;
#line 297
struct perf_cgroup;
#line 298
struct event_filter;
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct perf_event {
   struct list_head group_entry ;
   struct list_head event_entry ;
   struct list_head sibling_list ;
   struct hlist_node hlist_entry ;
   int nr_siblings ;
   int group_flags ;
   struct perf_event *group_leader ;
   struct pmu *pmu ;
   enum perf_event_active_state state ;
   unsigned int attach_state ;
   local64_t count ;
   atomic64_t child_count ;
   u64 total_time_enabled ;
   u64 total_time_running ;
   u64 tstamp_enabled ;
   u64 tstamp_running ;
   u64 tstamp_stopped ;
   u64 shadow_ctx_time ;
   struct perf_event_attr attr ;
   u16 header_size ;
   u16 id_header_size ;
   u16 read_size ;
   struct hw_perf_event hw ;
   struct perf_event_context *ctx ;
   atomic_long_t refcount ;
   atomic64_t child_total_time_enabled ;
   atomic64_t child_total_time_running ;
   struct mutex child_mutex ;
   struct list_head child_list ;
   struct perf_event *parent ;
   int oncpu ;
   int cpu ;
   struct list_head owner_entry ;
   struct task_struct *owner ;
   struct mutex mmap_mutex ;
   atomic_t mmap_count ;
   struct ring_buffer *rb ;
   struct list_head rb_entry ;
   wait_queue_head_t waitq ;
   struct fasync_struct *fasync ;
   int pending_wakeup ;
   int pending_kill ;
   int pending_disable ;
   struct irq_work pending ;
   atomic_t event_limit ;
   void (*destroy)(struct perf_event * ) ;
   struct callback_head callback_head ;
   struct pid_namespace *ns ;
   u64 id ;
   void (*overflow_handler)(struct perf_event * , struct perf_sample_data * , struct pt_regs * ) ;
   void *overflow_handler_context ;
   struct ftrace_event_call *tp_event ;
   struct event_filter *filter ;
   struct ftrace_ops ftrace_ops ;
   struct perf_cgroup *cgrp ;
   int cgrp_defer_enabled ;
};
#line 429
enum perf_event_context_type {
    task_context = 0,
    cpu_context = 1
} ;
#line 434 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct perf_event_context {
   struct pmu *pmu ;
   enum perf_event_context_type type ;
   raw_spinlock_t lock ;
   struct mutex mutex ;
   struct list_head pinned_groups ;
   struct list_head flexible_groups ;
   struct list_head event_list ;
   int nr_events ;
   int nr_active ;
   int is_active ;
   int nr_stat ;
   int nr_freq ;
   int rotate_disable ;
   atomic_t refcount ;
   struct task_struct *task ;
   u64 time ;
   u64 timestamp ;
   struct perf_event_context *parent_ctx ;
   u64 parent_gen ;
   u64 generation ;
   int pin_count ;
   int nr_cgroups ;
   int nr_branch_stack ;
   struct callback_head callback_head ;
};
#line 488 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct perf_cpu_context {
   struct perf_event_context ctx ;
   struct perf_event_context *task_ctx ;
   int active_oncpu ;
   int exclusive ;
   struct list_head rotation_list ;
   int jiffies_interval ;
   struct pmu *unique_pmu ;
   struct perf_cgroup *cgrp ;
};
#line 550 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct __anonstruct_tid_entry_269 {
   u32 pid ;
   u32 tid ;
};
#line 550 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct __anonstruct_cpu_entry_270 {
   u32 cpu ;
   u32 reserved ;
};
#line 550 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/perf_event.h"
struct perf_sample_data {
   u64 type ;
   u64 ip ;
   struct __anonstruct_tid_entry_269 tid_entry ;
   u64 time ;
   u64 addr ;
   u64 id ;
   u64 stream_id ;
   struct __anonstruct_cpu_entry_270 cpu_entry ;
   u64 period ;
   union perf_mem_data_src data_src ;
   struct perf_callchain_entry *callchain ;
   struct perf_raw_record *raw ;
   struct perf_branch_stack *br_stack ;
   struct perf_regs_user regs_user ;
   u64 stack_user_size ;
   u64 weight ;
};
#line 837
struct trace_array;
#line 838
struct trace_buffer;
#line 839
struct tracer;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace_event.h"
struct trace_iterator;
#line 41
struct trace_event;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace_event.h"
struct trace_entry {
   unsigned short type ;
   unsigned char flags ;
   unsigned char preempt_count ;
   int pid ;
};
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace_event.h"
struct trace_iterator {
   struct trace_array *tr ;
   struct tracer *trace ;
   struct trace_buffer *trace_buffer ;
   void *private ;
   int cpu_file ;
   struct mutex mutex ;
   struct ring_buffer_iter **buffer_iter ;
   unsigned long iter_flags ;
   struct trace_seq tmp_seq ;
   cpumask_var_t started ;
   bool snapshot ;
   struct trace_seq seq ;
   struct trace_entry *ent ;
   unsigned long lost_events ;
   int leftover ;
   int ent_size ;
   int cpu ;
   u64 ts ;
   loff_t pos ;
   long idx ;
};
#line 108
enum print_line_t;
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace_event.h"
struct trace_event_functions {
   enum print_line_t (*trace)(struct trace_iterator * , int  , struct trace_event * ) ;
   enum print_line_t (*raw)(struct trace_iterator * , int  , struct trace_event * ) ;
   enum print_line_t (*hex)(struct trace_iterator * , int  , struct trace_event * ) ;
   enum print_line_t (*binary)(struct trace_iterator * , int  , struct trace_event * ) ;
};
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace_event.h"
struct trace_event {
   struct hlist_node node ;
   struct list_head list ;
   int type ;
   struct trace_event_functions *funcs ;
};
#line 127
enum print_line_t {
    TRACE_TYPE_PARTIAL_LINE = 0,
    TRACE_TYPE_HANDLED = 1,
    TRACE_TYPE_UNHANDLED = 2,
    TRACE_TYPE_NO_CONSUME = 3
} ;
#line 164
enum trace_reg {
    TRACE_REG_REGISTER = 0,
    TRACE_REG_UNREGISTER = 1,
    TRACE_REG_PERF_REGISTER = 2,
    TRACE_REG_PERF_UNREGISTER = 3,
    TRACE_REG_PERF_OPEN = 4,
    TRACE_REG_PERF_CLOSE = 5,
    TRACE_REG_PERF_ADD = 6,
    TRACE_REG_PERF_DEL = 7
} ;
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace_event.h"
struct ftrace_event_class {
   char *system ;
   void *probe ;
   void *perf_probe ;
   int (*reg)(struct ftrace_event_call * , enum trace_reg  , void * ) ;
   int (*define_fields)(struct ftrace_event_call * ) ;
   struct list_head *(*get_fields)(struct ftrace_event_call * ) ;
   struct list_head fields ;
   int (*raw_init)(struct ftrace_event_call * ) ;
};
#line 213 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ftrace_event.h"
struct ftrace_event_call {
   struct list_head list ;
   struct ftrace_event_class *class ;
   char *name ;
   struct trace_event event ;
   char const   *print_fmt ;
   struct event_filter *filter ;
   struct list_head *files ;
   void *mod ;
   void *data ;
   int flags ;
   int perf_refcount ;
   struct hlist_head *perf_events ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/gss_api.h"
struct rpcsec_gss_oid {
   unsigned int len ;
   u8 data[32U] ;
};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/gss_api.h"
struct rpcsec_gss_info {
   struct rpcsec_gss_oid oid ;
   u32 qop ;
   u32 service ;
};
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/gss_api.h"
struct rpc_cred_cache {
   struct hlist_head *hashtable ;
   unsigned int hashbits ;
   spinlock_t lock ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   struct uid_gid_extent extent[5U] ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   unsigned int proc_inum ;
   bool may_mount_sysfs ;
   bool may_mount_proc ;
};
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/user_namespace.h"
struct unx_cred {
   struct rpc_cred uc_base ;
   kgid_t uc_gid ;
   kgid_t uc_gids[16U] ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
struct generic_cred {
   struct rpc_cred gc_base ;
   struct auth_cred acred ;
};
#line 6 ".tmp_svc.c"
struct __va_list_tag;
#line 6 ".tmp_svc.c"
typedef struct __va_list_tag __va_list_tag;
#line 40 "/home/debian/klever-inst/klever-addons/CIF/bin/aspectator-bin/bin/../lib64/gcc/x86_64-unknown-linux-gnu/4.6.0/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/home/debian/klever-inst/klever-addons/CIF/bin/aspectator-bin/bin/../lib64/gcc/x86_64-unknown-linux-gnu/4.6.0/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/printk.h"
struct va_format {
   char const   *fmt ;
   va_list *va ;
};
#line 259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[5U] ;
   unsigned long nr_free ;
};
#line 87
struct pglist_data;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
};
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 201
struct zone;
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   struct zone *zone ;
};
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 246 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   s8 stat_threshold ;
   s8 vm_stat_diff[34U] ;
};
#line 256
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    __MAX_NR_ZONES = 4
} ;
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct zone {
   unsigned long watermark[3U] ;
   unsigned long percpu_drift_mark ;
   unsigned long lowmem_reserve[4U] ;
   unsigned long dirty_balance_reserve ;
   int node ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct per_cpu_pageset *pageset ;
   spinlock_t lock ;
   int all_unreclaimable ;
   bool compact_blockskip_flush ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn ;
   seqlock_t span_seqlock ;
   struct free_area free_area[11U] ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   struct lruvec lruvec ;
   unsigned long pages_scanned ;
   unsigned long flags ;
   atomic_long_t vm_stat[34U] ;
   unsigned int inactive_ratio ;
   struct zone_padding _pad2_ ;
   wait_queue_head_t *wait_table ;
   unsigned long wait_table_hash_nr_entries ;
   unsigned long wait_table_bits ;
   struct pglist_data *zone_pgdat ;
   unsigned long zone_start_pfn ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   unsigned long managed_pages ;
   char const   *name ;
};
#line 549 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct zonelist_cache {
   unsigned short z_to_n[4096U] ;
   unsigned long fullzones[64U] ;
   unsigned long last_full_zap ;
};
#line 636 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 649 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct zonelist {
   struct zonelist_cache *zlcache_ptr ;
   struct zoneref _zonerefs[4097U] ;
   struct zonelist_cache zlcache ;
};
#line 687 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[4U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   nodemask_t reclaim_nodes ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_max_order ;
   enum zone_type classzone_idx ;
   spinlock_t numabalancing_migrate_lock ;
   unsigned long numabalancing_migrate_next_window ;
   unsigned long numabalancing_migrate_nr_pages ;
};
#line 747 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mmzone.h"
typedef struct pglist_data pg_data_t;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
struct svc_pool_map {
   int count ;
   int mode ;
   unsigned int npools ;
   unsigned int *pool_to ;
   unsigned int *to_pool ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/socket.h"
struct cmsghdr {
   __kernel_size_t cmsg_len ;
   int cmsg_level ;
   int cmsg_type ;
};
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/in.h"
struct in_pktinfo {
   int ipi_ifindex ;
   struct in_addr ipi_spec_dst ;
   struct in_addr ipi_addr ;
};
#line 242 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
union __anonunion_buffer_262 {
   struct cmsghdr hdr ;
   long all[5U] ;
};
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
union __anonunion_buffer_264 {
   struct cmsghdr hdr ;
   long all[5U] ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/netns.h"
struct unix_domain {
   struct auth_domain h ;
};
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
struct ip_map {
   struct cache_head h ;
   char m_class[8U] ;
   struct in6_addr m_addr ;
   struct unix_domain *m_client ;
};
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
union __anonunion_address_253 {
   struct sockaddr sa ;
   struct sockaddr_in s4 ;
   struct sockaddr_in6 s6 ;
};
#line 402 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
struct unix_gid {
   struct cache_head h ;
   kuid_t uid ;
   struct group_info *gi ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 2267 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
typedef int pao_T_____15;
#line 2267 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
typedef int pao_T_____16;
#line 2267 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
typedef int pao_T_____17;
#line 2267 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
typedef int pao_T_____18;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_addr.c.aux"
struct ldv_struct_timer_scenario_13 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
struct rpcbind_args {
   struct rpc_xprt *r_xprt ;
   u32 r_prog ;
   u32 r_vers ;
   u32 r_prot ;
   unsigned short r_port ;
   char const   *r_netid ;
   char const   *r_addr ;
   char const   *r_owner ;
   int r_status ;
};
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
struct rpcb_info {
   u32 rpc_vers ;
   struct rpc_procinfo *rpc_proc ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 9 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/unaligned/generic.h"
struct xdr_netobj {
   unsigned int len ;
   u8 *data ;
};
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
struct xdr_array2_desc;
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
struct xdr_array2_desc {
   unsigned int elem_size ;
   unsigned int array_len ;
   unsigned int array_maxlen ;
   int (*xcode)(struct xdr_array2_desc * , void * ) ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/net_namespace.h"
struct pernet_operations {
   struct list_head list ;
   int (*init)(struct net * ) ;
   void (*exit)(struct net * ) ;
   void (*exit_batch)(struct list_head * ) ;
   int *id ;
   size_t size ;
};
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc_syms.c"
struct ldv_struct_insmod_14 {
   int signal_pending ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/poll.h"
typedef struct poll_table_struct poll_table;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/stats.h"
struct rpc_pipe_msg {
   struct list_head list ;
   void *data ;
   size_t len ;
   size_t copied ;
   int errno ;
};
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
struct rpc_pipe_ops {
   ssize_t (*upcall)(struct file * , struct rpc_pipe_msg * , char * , size_t  ) ;
   ssize_t (*downcall)(struct file * , char const   * , size_t  ) ;
   void (*release_pipe)(struct inode * ) ;
   int (*open_pipe)(struct inode * ) ;
   void (*destroy_msg)(struct rpc_pipe_msg * ) ;
};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
struct rpc_pipe {
   struct list_head pipe ;
   struct list_head in_upcall ;
   struct list_head in_downcall ;
   int pipelen ;
   int nreaders ;
   int nwriters ;
   int flags ;
   struct delayed_work queue_timeout ;
   struct rpc_pipe_ops  const  *ops ;
   spinlock_t lock ;
   struct dentry *dentry ;
};
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
struct rpc_inode {
   struct inode vfs_inode ;
   void *private ;
   struct rpc_pipe *pipe ;
   wait_queue_head_t waitq ;
};
#line 572 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct thread_deferred_req {
   struct cache_deferred_req handle ;
   struct completion completion ;
};
#line 736 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct cache_queue {
   struct list_head list ;
   int reader ;
};
#line 741 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct cache_request {
   struct cache_queue q ;
   struct cache_head *item ;
   char *buf ;
   int len ;
   int readers ;
};
#line 748 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct cache_reader {
   struct cache_queue q ;
   int offset ;
};
#line 1267 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct handle {
   struct cache_detail *cd ;
};
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
struct ldv_struct_seq_release_private_19 {
   struct seq_file *arg0 ;
   int signal_pending ;
};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
struct ldv_struct_traverse_kernel_items_scenario_11 {
   struct seq_file *arg0 ;
   struct seq_operations *arg1 ;
   int signal_pending ;
};
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_ino_t;
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/types.h"
typedef __kernel_ino_t ino_t;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 462 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
struct rpc_filelist {
   char const   *name ;
   struct file_operations  const  *i_fop ;
   umode_t mode ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
struct svc_xpt_user {
   struct list_head list ;
   void (*callback)(struct svc_xpt_user * ) ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 255
enum hrtimer_restart;
#line 226 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess.h"
struct __large_struct {
   unsigned long buf[100U] ;
};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
enum hrtimer_restart;
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
};
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kthread.h"
struct kthread_work;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work * ) ;
   wait_queue_head_t done ;
   struct kthread_worker *worker ;
};
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spi/spi.h"
struct spi_master;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 mode ;
   u8 bits_per_word ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};
#line 147
struct spi_message;
#line 206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device * ) ;
   int (*transfer)(struct spi_device * , struct spi_message * ) ;
   void (*cleanup)(struct spi_device * ) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool busy ;
   bool running ;
   bool rt ;
   int (*prepare_transfer_hardware)(struct spi_master * ) ;
   int (*transfer_one_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_transfer_hardware)(struct spi_master * ) ;
   int *cs_gpios ;
};
#line 528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void * ) ;
   void *context ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
#line 1 "<compiler builtins>"
int __builtin_bswap32(int  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/err.h"
long ldv_is_err(void const   *ptr ) ;
#line 29
void *ldv_err_ptr(long error ) ;
#line 30
long ldv_ptr_err(void const   *ptr ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size , gfp_t flags ) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
  {
#line 62
  __list_add(new, head, head->next);
  }
#line 63
  return;
}
}
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
  {
#line 76
  __list_add(new, head->prev, head);
  }
#line 77
  return;
}
}
#line 112
extern void list_del(struct list_head * ) ;
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 109
  return;
}
}
#line 318 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 320
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 328
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 333
  return (oldbit);
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 53
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  int tmp ;

  {
  {
#line 60
  tmp = __builtin_bswap32(val);
  }
#line 60
  return ((__u32 )tmp);
}
}
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 361
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 356 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/paravirt_types.h"
extern struct pv_irq_ops pv_irq_ops ;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
  {
#line 14
  if (8UL == 1UL) {
#line 14
    goto case_1;
  } else {

  }
#line 14
  if (8UL == 2UL) {
#line 14
    goto case_2;
  } else {

  }
#line 14
  if (8UL == 4UL) {
#line 14
    goto case_4;
  } else {

  }
#line 14
  if (8UL == 8UL) {
#line 14
    goto case_8;
  } else {

  }
#line 14
  goto switch_default;
  case_1: /* CIL Label */ 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_3002;
  case_2: /* CIL Label */ 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_3002;
  case_4: /* CIL Label */ 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_3002;
  case_8: /* CIL Label */ 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_3002;
  switch_default: /* CIL Label */ 
  {
#line 14
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_3002: ;
#line 14
  return (pfo_ret__);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/string_64.h"
extern void *memcpy(void * , void const   * , size_t  ) ;
#line 60
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 115 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/string.h"
extern char *kstrdup(char const   * , gfp_t  ) ;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/paravirt.h"
extern int ( /* missing proto */  __builtin_unreachable)() ;
#line 822 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_save_flags(void) 
{ 
  unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  {
#line 824
  __edi = __edi;
#line 824
  __esi = __esi;
#line 824
  __edx = __edx;
#line 824
  __ecx = __ecx;
#line 824
  __eax = __eax;
#line 824
  tmp = __builtin_expect((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0),
                         0L);
  }
#line 824
  if (tmp != 0L) {
    {
#line 824
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/paravirt.h"),
                         "i" (824), "i" (12UL));
#line 824
    __builtin_unreachable();
    }
  } else {

  }
#line 824
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (44UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 824
  __ret = __eax;
#line 824
  return (__ret);
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 155 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/irqflags.h"
__inline static int arch_irqs_disabled_flags(unsigned long flags ) 
{ 


  {
#line 157
  return ((flags & 512UL) == 0UL);
}
}
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/cmpxchg.h"
extern void __cmpxchg_wrong_size(void) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 193 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 195
  __old = old;
#line 195
  __new = new;
  {
#line 195
  if (4UL == 1UL) {
#line 195
    goto case_1;
  } else {

  }
#line 195
  if (4UL == 2UL) {
#line 195
    goto case_2;
  } else {

  }
#line 195
  if (4UL == 4UL) {
#line 195
    goto case_4;
  } else {

  }
#line 195
  if (4UL == 8UL) {
#line 195
    goto case_8;
  } else {

  }
#line 195
  goto switch_default;
  case_1: /* CIL Label */ 
#line 195
  __ptr = (u8 volatile   *)(& v->counter);
#line 195
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
#line 195
  goto ldv_5598;
  case_2: /* CIL Label */ 
#line 195
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 195
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
#line 195
  goto ldv_5598;
  case_4: /* CIL Label */ 
#line 195
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 195
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
#line 195
  goto ldv_5598;
  case_8: /* CIL Label */ 
#line 195
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 195
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
#line 195
  goto ldv_5598;
  switch_default: /* CIL Label */ 
  {
#line 195
  __cmpxchg_wrong_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_5598: ;
#line 195
  return (__ret);
}
}
#line 212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static int __atomic_add_unless(atomic_t *v , int a , int u ) 
{ 
  int c ;
  int old ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 215
  c = atomic_read((atomic_t const   *)v);
  }
  ldv_5627: 
  {
#line 217
  tmp = __builtin_expect(c == u, 0L);
  }
#line 217
  if (tmp != 0L) {
#line 218
    goto ldv_5626;
  } else {

  }
  {
#line 219
  old = atomic_cmpxchg(v, c, c + a);
#line 220
  tmp___0 = __builtin_expect(old == c, 1L);
  }
#line 220
  if (tmp___0 != 0L) {
#line 221
    goto ldv_5626;
  } else {

  }
#line 222
  c = old;
#line 223
  goto ldv_5627;
  ldv_5626: ;
#line 224
  return (c);
}
}
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/atomic.h"
__inline static int atomic_add_unless(atomic_t *v , int a , int u ) 
{ 
  int tmp ;

  {
  {
#line 17
  tmp = __atomic_add_unless(v, a, u);
  }
#line 17
  return (tmp != u);
}
}
#line 10 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/debug_locks.h"
extern int debug_locks ;
#line 333 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 337
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 342
extern int lock_is_held(struct lockdep_map * ) ;
#line 578
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 205 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 207 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
  {
#line 210
  if (8UL == 1UL) {
#line 210
    goto case_1;
  } else {

  }
#line 210
  if (8UL == 2UL) {
#line 210
    goto case_2;
  } else {

  }
#line 210
  if (8UL == 4UL) {
#line 210
    goto case_4;
  } else {

  }
#line 210
  if (8UL == 8UL) {
#line 210
    goto case_8;
  } else {

  }
#line 210
  goto switch_default;
  case_1: /* CIL Label */ 
#line 210
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 210
  goto ldv_6293;
  case_2: /* CIL Label */ 
#line 210
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 210
  goto ldv_6293;
  case_4: /* CIL Label */ 
#line 210
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 210
  goto ldv_6293;
  case_8: /* CIL Label */ 
#line 210
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 210
  goto ldv_6293;
  switch_default: /* CIL Label */ 
  {
#line 210
  __bad_percpu_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_6293: 
#line 210
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 212
  return (ti);
}
}
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp___0 ;

  {
  {
#line 93
  tmp___0 = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
  }
#line 93
  return (tmp___0);
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 282
  return (& lock->__annonCompField20.rlock);
}
}
#line 291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
  {
#line 293
  _raw_spin_lock(& lock->__annonCompField20.rlock);
  }
#line 294
  return;
}
}
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
  {
#line 333
  _raw_spin_unlock(& lock->__annonCompField20.rlock);
  }
#line 334
  return;
}
}
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 881
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 883
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 886
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 
  struct thread_info *tmp ;

  {
  {
#line 198
  tmp = current_thread_info();
#line 198
  tmp->preempt_count = tmp->preempt_count + 1;
#line 198
  __asm__  volatile   ("": : : "memory");
  }
#line 199
  return;
}
}
#line 201 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void) 
{ 
  struct thread_info *tmp ;

  {
  {
#line 203
  __asm__  volatile   ("": : : "memory");
#line 203
  tmp = current_thread_info();
#line 203
  tmp->preempt_count = tmp->preempt_count + -1;
#line 203
  __asm__  volatile   ("": : : "memory");
  }
#line 204
  return;
}
}
#line 306
extern int rcu_is_cpu_idle(void) ;
#line 310
extern bool rcu_lockdep_current_cpu_online(void) ;
#line 320 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
  {
#line 322
  lock_acquire(map, 0U, 0, 2, 1, (struct lockdep_map *)0, (unsigned long )((void *)0));
  }
#line 324
  return;
}
}
#line 325 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
  {
#line 327
  lock_release(map, 1, (unsigned long )((void *)0));
  }
#line 329
  return;
}
}
#line 330
extern struct lockdep_map rcu_lock_map ;
#line 332
extern struct lockdep_map rcu_sched_lock_map ;
#line 333
extern int debug_lockdep_rcu_enabled(void) ;
#line 355 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
__inline static int rcu_read_lock_held(void) 
{ 
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 357
  tmp = debug_lockdep_rcu_enabled();
  }
#line 357
  if (tmp == 0) {
#line 358
    return (1);
  } else {

  }
  {
#line 359
  tmp___0 = rcu_is_cpu_idle();
  }
#line 359
  if (tmp___0 != 0) {
#line 360
    return (0);
  } else {

  }
  {
#line 361
  tmp___1 = rcu_lockdep_current_cpu_online();
  }
#line 361
  if (tmp___1) {
#line 361
    tmp___2 = 0;
  } else {
#line 361
    tmp___2 = 1;
  }
#line 361
  if (tmp___2) {
#line 362
    return (0);
  } else {

  }
  {
#line 363
  tmp___3 = lock_is_held(& rcu_lock_map);
  }
#line 363
  return (tmp___3);
}
}
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 
  int lockdep_opinion ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  unsigned long _flags ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 406
  lockdep_opinion = 0;
#line 408
  tmp = debug_lockdep_rcu_enabled();
  }
#line 408
  if (tmp == 0) {
#line 409
    return (1);
  } else {

  }
  {
#line 410
  tmp___0 = rcu_is_cpu_idle();
  }
#line 410
  if (tmp___0 != 0) {
#line 411
    return (0);
  } else {

  }
  {
#line 412
  tmp___1 = rcu_lockdep_current_cpu_online();
  }
#line 412
  if (tmp___1) {
#line 412
    tmp___2 = 0;
  } else {
#line 412
    tmp___2 = 1;
  }
#line 412
  if (tmp___2) {
#line 413
    return (0);
  } else {

  }
#line 414
  if (debug_locks != 0) {
    {
#line 415
    lockdep_opinion = lock_is_held(& rcu_sched_lock_map);
    }
  } else {

  }
#line 416
  if (lockdep_opinion != 0) {
#line 416
    tmp___5 = 1;
  } else {
    {
#line 416
    tmp___3 = current_thread_info();
    }
#line 416
    if (tmp___3->preempt_count != 0) {
#line 416
      tmp___5 = 1;
    } else {
      {
#line 416
      _flags = arch_local_save_flags();
#line 416
      tmp___4 = arch_irqs_disabled_flags(_flags);
      }
#line 416
      if (tmp___4 != 0) {
#line 416
        tmp___5 = 1;
      } else {
#line 416
        tmp___5 = 0;
      }
    }
  }
#line 416
  return (tmp___5);
}
}
#line 774 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 776
  __rcu_read_lock();
#line 778
  rcu_lock_acquire(& rcu_lock_map);
#line 779
  tmp = debug_lockdep_rcu_enabled();
  }
#line 779
  if (tmp != 0 && ! __warned) {
    {
#line 779
    tmp___0 = rcu_is_cpu_idle();
    }
#line 779
    if (tmp___0 != 0) {
      {
#line 779
      __warned = 1;
#line 779
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 780, "rcu_read_lock() used illegally while idle");
      }
    } else {

    }
  } else {

  }
#line 782
  return;
}
}
#line 798 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 800
  tmp = debug_lockdep_rcu_enabled();
  }
#line 800
  if (tmp != 0 && ! __warned) {
    {
#line 800
    tmp___0 = rcu_is_cpu_idle();
    }
#line 800
    if (tmp___0 != 0) {
      {
#line 800
      __warned = 1;
#line 800
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 801, "rcu_read_unlock() used illegally while idle");
      }
    } else {

    }
  } else {

  }
  {
#line 802
  rcu_lock_release(& rcu_lock_map);
#line 804
  __rcu_read_unlock();
  }
#line 805
  return;
}
}
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
extern unsigned int full_name_hash(unsigned char const   * , unsigned int  ) ;
#line 401
extern void dput(struct dentry * ) ;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/signal.h"
__inline static int sigismember(sigset_t *set , int _sig ) 
{ 
  unsigned long sig ;

  {
#line 59
  sig = (unsigned long )(_sig + -1);
#line 61
  return ((int )(set->sig[0] >> (int )sig) & 1);
}
}
#line 306 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2361 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
  {
#line 2363
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
  }
#line 2363
  return (tmp);
}
}
#line 2387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  {
#line 2389
  tmp = test_tsk_thread_flag(p, 2);
#line 2389
  tmp___0 = __builtin_expect(tmp != 0, 0L);
  }
#line 2389
  return ((int )tmp___0);
}
}
#line 2392 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
__inline static int __fatal_signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  {
#line 2394
  tmp = sigismember(& p->pending.signal, 9);
#line 2394
  tmp___0 = __builtin_expect(tmp != 0, 0L);
  }
#line 2394
  return ((int )tmp___0);
}
}
#line 2397 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
__inline static int fatal_signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2399
  tmp = signal_pending(p);
  }
#line 2399
  if (tmp != 0) {
    {
#line 2399
    tmp___0 = __fatal_signal_pending(p);
    }
#line 2399
    if (tmp___0 != 0) {
#line 2399
      tmp___1 = 1;
    } else {
#line 2399
      tmp___1 = 0;
    }
  } else {
#line 2399
    tmp___1 = 0;
  }
#line 2399
  return (tmp___1);
}
}
#line 209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/net.h"
extern int __sock_create(struct net * , int  , int  , int  , struct socket ** , int  ) ;
#line 217
extern void sock_release(struct socket * ) ;
#line 260
extern int kernel_bind(struct socket * , struct sockaddr * , int  ) ;
#line 265
extern int kernel_connect(struct socket * , struct sockaddr * , int  , int  ) ;
#line 267
extern int kernel_getsockname(struct socket * , struct sockaddr * , int * ) ;
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 517
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key ) 
{ 


  {
#line 16
  __asm__  volatile   ("":);
#line 23
  return (0);

#line 25
  return (1);
}
}
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key ) 
{ 
  bool tmp ;

  {
  {
#line 101
  tmp = arch_static_branch(key);
  }
#line 101
  return (tmp);
}
}
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/net_namespace.h"
extern void __put_net(struct net * ) ;
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/net_namespace.h"
__inline static struct net *get_net(struct net *net ) 
{ 


  {
  {
#line 163
  atomic_inc(& net->count);
  }
#line 164
  return (net);
}
}
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/net_namespace.h"
__inline static void put_net(struct net *net ) 
{ 
  int tmp ;

  {
  {
#line 181
  tmp = atomic_dec_and_test(& net->count);
  }
#line 181
  if (tmp != 0) {
    {
#line 182
    __put_net(net);
    }
  } else {

  }
#line 183
  return;
}
}
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/utsname.h"
__inline static struct new_utsname *utsname(void) 
{ 
  struct task_struct *tmp ;

  {
  {
#line 73
  tmp = get_current();
  }
#line 73
  return (& ((tmp->nsproxy)->uts_ns)->name);
}
}
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/debug.h"
unsigned int rpc_debug ;
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
__inline static int xdr_adjust_iovec(struct kvec *iov , __be32 *p ) 
{ 
  size_t tmp ;

  {
#line 146
  tmp = (size_t )((long )p - (long )iov->iov_base);
#line 146
  iov->iov_len = tmp;
#line 146
  return ((int )tmp);
}
}
#line 214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct rpc_task *rpc_new_task(struct rpc_task_setup  const  *setup_data ) ;
#line 215
struct rpc_task *rpc_run_task(struct rpc_task_setup  const  *task_setup_data ) ;
#line 216
struct rpc_task *rpc_run_bc_task(struct rpc_rqst *req , struct rpc_call_ops  const  *tk_ops ) ;
#line 218
void rpc_put_task(struct rpc_task *task ) ;
#line 220
void rpc_exit_task(struct rpc_task *task ) ;
#line 221
void rpc_exit(struct rpc_task *task , int status ) ;
#line 222
void rpc_release_calldata(struct rpc_call_ops  const  *ops , void *calldata ) ;
#line 223
void rpc_killall_tasks(struct rpc_clnt *clnt ) ;
#line 224
void rpc_execute(struct rpc_task *task ) ;
#line 234
void rpc_wake_up_queued_task(struct rpc_wait_queue *queue , struct rpc_task *task ) ;
#line 243
void rpc_delay(struct rpc_task *task , unsigned long delay ) ;
#line 246
int rpciod_up(void) ;
#line 247
void rpciod_down(void) ;
#line 251
void rpc_show_tasks(struct net *net ) ;
#line 256
void rpc_prepare_task(struct rpc_task *task ) ;
#line 274 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
__inline static char const   *rpc_qname(struct rpc_wait_queue  const  *q ) 
{ 


  {
#line 276
  return ((unsigned long )q != (unsigned long )((struct rpc_wait_queue  const  *)0) && (unsigned long )q->name != (unsigned long )((char const   */* const  */)0) ? (char const   *)q->name : "unknown");
}
}
#line 283 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
struct rpc_xprt *xprt_create_transport(struct xprt_create *args ) ;
#line 284
void xprt_connect(struct rpc_task *task ) ;
#line 285
void xprt_reserve(struct rpc_task *task ) ;
#line 286
void xprt_retry_reserve(struct rpc_task *task ) ;
#line 291
int xprt_prepare_transmit(struct rpc_task *task ) ;
#line 292
void xprt_transmit(struct rpc_task *task ) ;
#line 293
void xprt_end_transmit(struct rpc_task *task ) ;
#line 294
int xprt_adjust_timeout(struct rpc_rqst *req ) ;
#line 297
void xprt_release(struct rpc_task *task ) ;
#line 298
struct rpc_xprt *xprt_get(struct rpc_xprt *xprt ) ;
#line 299
void xprt_put(struct rpc_xprt *xprt ) ;
#line 305 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static __be32 *xprt_skip_transport_header(struct rpc_xprt *xprt , __be32 *p ) 
{ 


  {
#line 307
  return (p + (unsigned long )xprt->tsh_size);
}
}
#line 327
void xprt_conditional_disconnect(struct rpc_xprt *xprt , unsigned int cookie ) ;
#line 354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static int xprt_connected(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 356
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& xprt->state));
  }
#line 356
  return (tmp);
}
}
#line 391 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static int xprt_bound(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 393
  tmp = constant_test_bit(4U, (unsigned long const volatile   *)(& xprt->state));
  }
#line 393
  return (tmp);
}
}
#line 396 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static void xprt_clear_bound(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 398
  clear_bit(4, (unsigned long volatile   *)(& xprt->state));
  }
#line 399
  return;
}
}
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_authops  const  authnull_ops ;
#line 143
struct rpc_auth *rpcauth_create(rpc_authflavor_t pseudoflavor , struct rpc_clnt *clnt ) ;
#line 144
void rpcauth_release(struct rpc_auth *auth ) ;
#line 154
void put_rpccred(struct rpc_cred *cred ) ;
#line 155
__be32 *rpcauth_marshcred(struct rpc_task *task , __be32 *p ) ;
#line 156
__be32 *rpcauth_checkverf(struct rpc_task *task , __be32 *p ) ;
#line 157
int rpcauth_wrap_req(struct rpc_task *task , void (*encode)(void * , struct xdr_stream * ,
                                                            void * ) , void *rqstp ,
                     __be32 *data , void *obj ) ;
#line 158
int rpcauth_unwrap_resp(struct rpc_task *task , int (*decode)(void * , struct xdr_stream * ,
                                                              void * ) , void *rqstp ,
                        __be32 *data , void *obj ) ;
#line 159
int rpcauth_refreshcred(struct rpc_task *task ) ;
#line 160
void rpcauth_invalcred(struct rpc_task *task ) ;
#line 161
int rpcauth_uptodatecred(struct rpc_task *task ) ;
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
__inline static struct rpc_cred *get_rpccred(struct rpc_cred *cred ) 
{ 


  {
  {
#line 169
  atomic_inc(& cred->cr_count);
  }
#line 170
  return (cred);
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/timer.h"
void rpc_init_rtt(struct rpc_rtt *rt , unsigned long timeo ) ;
#line 696 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
extern struct static_key memalloc_socks ;
#line 697 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static int sk_memalloc_socks(void) 
{ 
  bool tmp ;

  {
  {
#line 699
  tmp = static_key_false(& memalloc_socks);
  }
#line 699
  return ((int )tmp);
}
}
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
struct rpc_clnt *rpc_create(struct rpc_create_args *args ) ;
#line 131
struct rpc_clnt *rpc_bind_new_program(struct rpc_clnt *old , struct rpc_program  const  *program ,
                                      u32 vers ) ;
#line 133
void rpc_task_reset_client(struct rpc_task *task , struct rpc_clnt *clnt ) ;
#line 134
struct rpc_clnt *rpc_clone_client(struct rpc_clnt *clnt ) ;
#line 135
struct rpc_clnt *rpc_clone_client_set_auth(struct rpc_clnt *clnt , rpc_authflavor_t flavor ) ;
#line 137
void rpc_shutdown_client(struct rpc_clnt *clnt ) ;
#line 138
void rpc_release_client(struct rpc_clnt *clnt ) ;
#line 139
void rpc_task_release_client(struct rpc_task *task ) ;
#line 150
void rpc_call_start(struct rpc_task *task ) ;
#line 151
int rpc_call_async(struct rpc_clnt *clnt , struct rpc_message  const  *msg , int flags ,
                   struct rpc_call_ops  const  *tk_ops , void *data ) ;
#line 155
int rpc_call_sync(struct rpc_clnt *clnt , struct rpc_message  const  *msg , int flags ) ;
#line 157
struct rpc_task *rpc_call_null(struct rpc_clnt *clnt , struct rpc_cred *cred , int flags ) ;
#line 159
int rpc_restart_call_prepare(struct rpc_task *task ) ;
#line 160
int rpc_restart_call(struct rpc_task *task ) ;
#line 161
void rpc_setbufsize(struct rpc_clnt *clnt , unsigned int sndsize , unsigned int rcvsize ) ;
#line 162
int rpc_protocol(struct rpc_clnt *clnt ) ;
#line 163
struct net *rpc_net_ns(struct rpc_clnt *clnt ) ;
#line 164
size_t rpc_max_payload(struct rpc_clnt *clnt ) ;
#line 165
unsigned long rpc_get_timeout(struct rpc_clnt *clnt ) ;
#line 166
void rpc_force_rebind(struct rpc_clnt *clnt ) ;
#line 167
size_t rpc_peeraddr(struct rpc_clnt *clnt , struct sockaddr *buf , size_t bufsize ) ;
#line 168
char const   *rpc_peeraddr2str(struct rpc_clnt *clnt , enum rpc_display_format_t format ) ;
#line 169
int rpc_localaddr(struct rpc_clnt *clnt , struct sockaddr *buf , size_t buflen ) ;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/addr.h"
__inline static void rpc_set_port(struct sockaddr *sap , unsigned short const   port ) 
{ 
  __u16 tmp ;
  __u16 tmp___0 ;

  {
  {
#line 37
  if ((int )sap->sa_family == 2) {
#line 37
    goto case_2;
  } else {

  }
#line 40
  if ((int )sap->sa_family == 10) {
#line 40
    goto case_10;
  } else {

  }
#line 36
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 38
  tmp = __fswab16((int )port);
#line 38
  ((struct sockaddr_in *)sap)->sin_port = tmp;
  }
#line 39
  goto ldv_45755;
  case_10: /* CIL Label */ 
  {
#line 41
  tmp___0 = __fswab16((int )port);
#line 41
  ((struct sockaddr_in6 *)sap)->sin6_port = tmp___0;
  }
#line 42
  goto ldv_45755;
  switch_break: /* CIL Label */ ;
  }
  ldv_45755: ;
#line 45
  return;
}
}
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
int rpc_pipefs_notifier_register(struct notifier_block *nb ) ;
#line 58
void rpc_pipefs_notifier_unregister(struct notifier_block *nb ) ;
#line 65
struct dentry *rpc_d_lookup_sb(struct super_block  const  *sb , unsigned char const   *dir_name ) ;
#line 68
struct super_block *rpc_get_sb_net(struct net  const  *net ) ;
#line 69
void rpc_put_sb_net(struct net  const  *net ) ;
#line 76
struct dentry *rpc_create_client_dir(struct dentry *dentry , struct qstr *name , struct rpc_clnt *rpc_client ) ;
#line 77
int rpc_remove_client_dir(struct dentry *dentry ) ;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/metrics.h"
struct rpc_iostats *rpc_alloc_iostats(struct rpc_clnt *clnt ) ;
#line 80
void rpc_free_iostats(struct rpc_iostats *stats ) ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/bc_xprt.h"
void xprt_free_bc_request(struct rpc_rqst *req ) ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_call_status ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
__inline static void trace_rpc_call_status(struct rpc_task *task ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 32
  tmp___1 = static_key_false(& __tracepoint_rpc_call_status.key);
  }
#line 32
  if ((int )tmp___1) {
    {
#line 32
    __rcu_read_lock();
#line 32
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_rpc_call_status.funcs));
#line 32
    tmp = debug_lockdep_rcu_enabled();
    }
#line 32
    if (tmp != 0 && ! __warned) {
      {
#line 32
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 32
      if (tmp___0 == 0) {
        {
#line 32
        __warned = 1;
#line 32
        lockdep_rcu_suspicious("include/trace/events/sunrpc.h", 36, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 32
    it_func_ptr = _________p1;
#line 32
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_46668: 
      {
#line 32
      it_func = it_func_ptr->func;
#line 32
      __data = it_func_ptr->data;
#line 32
      (*((void (*)(void * , struct rpc_task * ))it_func))(__data, task);
#line 32
      it_func_ptr = it_func_ptr + 1;
      }
#line 32
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 34
        goto ldv_46668;
      } else {

      }

    } else {

    }
    {
#line 32
    __rcu_read_unlock();
    }
  } else {

  }
#line 34
  return;
}
}
#line 42
struct tracepoint __tracepoint_rpc_bind_status ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
__inline static void trace_rpc_bind_status(struct rpc_task *task ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 38
  tmp___1 = static_key_false(& __tracepoint_rpc_bind_status.key);
  }
#line 38
  if ((int )tmp___1) {
    {
#line 38
    __rcu_read_lock();
#line 38
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_rpc_bind_status.funcs));
#line 38
    tmp = debug_lockdep_rcu_enabled();
    }
#line 38
    if (tmp != 0 && ! __warned) {
      {
#line 38
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 38
      if (tmp___0 == 0) {
        {
#line 38
        __warned = 1;
#line 38
        lockdep_rcu_suspicious("include/trace/events/sunrpc.h", 42, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 38
    it_func_ptr = _________p1;
#line 38
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_46699: 
      {
#line 38
      it_func = it_func_ptr->func;
#line 38
      __data = it_func_ptr->data;
#line 38
      (*((void (*)(void * , struct rpc_task * ))it_func))(__data, task);
#line 38
      it_func_ptr = it_func_ptr + 1;
      }
#line 38
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 40
        goto ldv_46699;
      } else {

      }

    } else {

    }
    {
#line 38
    __rcu_read_unlock();
    }
  } else {

  }
#line 40
  return;
}
}
#line 62
struct tracepoint __tracepoint_rpc_connect_status ;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
__inline static void trace_rpc_connect_status(struct rpc_task *task , int status ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 44
  tmp___1 = static_key_false(& __tracepoint_rpc_connect_status.key);
  }
#line 44
  if ((int )tmp___1) {
    {
#line 44
    __rcu_read_lock();
#line 44
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_rpc_connect_status.funcs));
#line 44
    tmp = debug_lockdep_rcu_enabled();
    }
#line 44
    if (tmp != 0 && ! __warned) {
      {
#line 44
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 44
      if (tmp___0 == 0) {
        {
#line 44
        __warned = 1;
#line 44
        lockdep_rcu_suspicious("include/trace/events/sunrpc.h", 62, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 44
    it_func_ptr = _________p1;
#line 44
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_46732: 
      {
#line 44
      it_func = it_func_ptr->func;
#line 44
      __data = it_func_ptr->data;
#line 44
      (*((void (*)(void * , struct rpc_task * , int  ))it_func))(__data, task, status);
#line 44
      it_func_ptr = it_func_ptr + 1;
      }
#line 44
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_46732;
      } else {

      }

    } else {

    }
    {
#line 44
    __rcu_read_unlock();
    }
  } else {

  }
#line 46
  return;
}
}
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc.h"
__inline static int rpc_reply_expected(struct rpc_task *task ) 
{ 


  {
#line 42
  return ((unsigned long )task->tk_msg.rpc_proc != (unsigned long )((struct rpc_procinfo *)0) && (unsigned long )(task->tk_msg.rpc_proc)->p_decode != (unsigned long )((int (*)(void * ,
                                                                                                                                                                                struct xdr_stream * ,
                                                                                                                                                                                void * ))0));
}
}
#line 50
int rpc_clients_notifier_register(void) ;
#line 51
void rpc_clients_notifier_unregister(void) ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/netns/generic.h"
__inline static void *net_generic(struct net  const  *net , int id ) 
{ 
  struct net_generic *ng ;
  void *ptr ;
  struct net_generic *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
  {
#line 39
  rcu_read_lock();
#line 40
  _________p1 = *((struct net_generic * const volatile  *)(& net->gen));
#line 40
  tmp = debug_lockdep_rcu_enabled();
  }
#line 40
  if (tmp != 0 && ! __warned) {
    {
#line 40
    tmp___0 = rcu_read_lock_held();
    }
#line 40
    if (tmp___0 == 0) {
      {
#line 40
      __warned = 1;
#line 40
      lockdep_rcu_suspicious("include/net/netns/generic.h", 40, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 40
  ng = _________p1;
#line 41
  tmp___1 = __builtin_expect(id == 0, 0L);
  }
#line 41
  if (tmp___1 != 0L) {
    {
#line 41
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/net/netns/generic.h"),
                         "i" (41), "i" (12UL));
#line 41
    __builtin_unreachable();
    }
  } else {
    {
#line 41
    tmp___2 = __builtin_expect((unsigned int )id > ng->len, 0L);
    }
#line 41
    if (tmp___2 != 0L) {
      {
#line 41
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/net/netns/generic.h"),
                           "i" (41), "i" (12UL));
#line 41
      __builtin_unreachable();
      }
    } else {

    }
  }
  {
#line 42
  ptr = ng->ptr[id + -1];
#line 43
  rcu_read_unlock();
#line 45
  tmp___3 = __builtin_expect((unsigned long )ptr == (unsigned long )((void *)0), 0L);
  }
#line 45
  if (tmp___3 != 0L) {
    {
#line 45
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/net/netns/generic.h"),
                         "i" (45), "i" (12UL));
#line 45
    __builtin_unreachable();
    }
  } else {

  }
#line 46
  return (ptr);
}
}
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/netns.h"
int sunrpc_net_id ;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static wait_queue_head_t destroy_wait  =    {{{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "destroy_wait.lock",
                                                      0, 0UL}}}}, {& destroy_wait.task_list,
                                                                   & destroy_wait.task_list}};
#line 60
static void call_start(struct rpc_task *task ) ;
#line 61
static void call_reserve(struct rpc_task *task ) ;
#line 62
static void call_reserveresult(struct rpc_task *task ) ;
#line 63
static void call_allocate(struct rpc_task *task ) ;
#line 64
static void call_decode(struct rpc_task *task ) ;
#line 65
static void call_bind(struct rpc_task *task ) ;
#line 66
static void call_bind_status(struct rpc_task *task ) ;
#line 67
static void call_transmit(struct rpc_task *task ) ;
#line 69
static void call_bc_transmit(struct rpc_task *task ) ;
#line 71
static void call_status(struct rpc_task *task ) ;
#line 72
static void call_transmit_status(struct rpc_task *task ) ;
#line 73
static void call_refresh(struct rpc_task *task ) ;
#line 74
static void call_refreshresult(struct rpc_task *task ) ;
#line 75
static void call_timeout(struct rpc_task *task ) ;
#line 76
static void call_connect(struct rpc_task *task ) ;
#line 77
static void call_connect_status(struct rpc_task *task ) ;
#line 79
static __be32 *rpc_encode_header(struct rpc_task *task ) ;
#line 80
static __be32 *rpc_verify_header(struct rpc_task *task ) ;
#line 81
static int rpc_ping(struct rpc_clnt *clnt ) ;
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_register_client(struct rpc_clnt *clnt ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sunrpc_net *sn ;
  void *tmp___0 ;

  {
  {
#line 85
  tmp = rpc_net_ns(clnt);
#line 85
  net = tmp;
#line 86
  tmp___0 = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 86
  sn = (struct sunrpc_net *)tmp___0;
#line 88
  spin_lock(& sn->rpc_client_lock);
#line 89
  list_add(& clnt->cl_clients, & sn->all_clients);
#line 90
  spin_unlock(& sn->rpc_client_lock);
  }
#line 91
  return;
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_unregister_client(struct rpc_clnt *clnt ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct sunrpc_net *sn ;
  void *tmp___0 ;

  {
  {
#line 95
  tmp = rpc_net_ns(clnt);
#line 95
  net = tmp;
#line 96
  tmp___0 = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 96
  sn = (struct sunrpc_net *)tmp___0;
#line 98
  spin_lock(& sn->rpc_client_lock);
#line 99
  list_del(& clnt->cl_clients);
#line 100
  spin_unlock(& sn->rpc_client_lock);
  }
#line 101
  return;
}
}
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void __rpc_clnt_remove_pipedir(struct rpc_clnt *clnt ) 
{ 


  {
#line 105
  if ((unsigned long )clnt->cl_dentry != (unsigned long )((struct dentry *)0)) {
#line 106
    if ((unsigned long )clnt->cl_auth != (unsigned long )((struct rpc_auth *)0) && (unsigned long )((clnt->cl_auth)->au_ops)->pipes_destroy != (unsigned long )((void (*/* const  */)(struct rpc_auth * ))0)) {
      {
#line 107
      (*(((clnt->cl_auth)->au_ops)->pipes_destroy))(clnt->cl_auth);
      }
    } else {

    }
    {
#line 108
    rpc_remove_client_dir(clnt->cl_dentry);
    }
  } else {

  }
#line 110
  clnt->cl_dentry = (struct dentry *)0;
#line 111
  return;
}
}
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_clnt_remove_pipedir(struct rpc_clnt *clnt ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct super_block *pipefs_sb ;

  {
  {
#line 115
  tmp = rpc_net_ns(clnt);
#line 115
  net = tmp;
#line 118
  pipefs_sb = rpc_get_sb_net((struct net  const  *)net);
  }
#line 119
  if ((unsigned long )pipefs_sb != (unsigned long )((struct super_block *)0)) {
    {
#line 120
    __rpc_clnt_remove_pipedir(clnt);
#line 121
    rpc_put_sb_net((struct net  const  *)net);
    }
  } else {

  }
#line 123
  return;
}
}
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct dentry *rpc_setup_pipedir_sb(struct super_block *sb , struct rpc_clnt *clnt ,
                                           char const   *dir_name ) 
{ 
  uint32_t clntid ;
  char name[15U] ;
  struct qstr q ;
  struct dentry *dir ;
  struct dentry *dentry ;
  int error ;
  uint32_t tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 131
  q.__annonCompField41.__annonCompField40.hash = 0U;
#line 131
  q.__annonCompField41.__annonCompField40.len = 0U;
#line 131
  q.name = (unsigned char const   *)(& name);
#line 135
  dir = rpc_d_lookup_sb((struct super_block  const  *)sb, (unsigned char const   *)dir_name);
  }
#line 136
  if ((unsigned long )dir == (unsigned long )((struct dentry *)0)) {
    {
#line 137
    printk("\016RPC: pipefs directory doesn\'t exist: %s\n", dir_name);
    }
#line 138
    return (dir);
  } else {

  }
  ldv_47086: 
  {
#line 141
  tmp = clntid;
#line 141
  clntid = clntid + 1U;
#line 141
  tmp___0 = snprintf((char *)(& name), 15UL, "clnt%x", tmp);
#line 141
  q.__annonCompField41.__annonCompField40.len = (u32 )tmp___0;
#line 142
  name[14UL] = 0;
#line 143
  q.__annonCompField41.__annonCompField40.hash = full_name_hash(q.name, q.__annonCompField41.__annonCompField40.len);
#line 144
  dentry = rpc_create_client_dir(dir, & q, clnt);
#line 145
  tmp___1 = IS_ERR((void const   *)dentry);
  }
#line 145
  if (tmp___1 == 0L) {
#line 146
    goto ldv_47085;
  } else {

  }
  {
#line 147
  tmp___2 = PTR_ERR((void const   *)dentry);
#line 147
  error = (int )tmp___2;
  }
#line 148
  if (error != -17) {
    {
#line 149
    printk("\016RPC: Couldn\'t create pipefs entry %s/%s, error %d\n", dir_name, (char *)(& name),
           error);
    }
#line 152
    goto ldv_47085;
  } else {

  }
#line 154
  goto ldv_47086;
  ldv_47085: 
  {
#line 155
  dput(dir);
  }
#line 156
  return (dentry);
}
}
#line 160 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static int rpc_setup_pipedir(struct rpc_clnt *clnt , char const   *dir_name ) 
{ 
  struct net *net ;
  struct net *tmp ;
  struct super_block *pipefs_sb ;
  struct dentry *dentry ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 162
  tmp = rpc_net_ns(clnt);
#line 162
  net = tmp;
#line 166
  clnt->cl_dentry = (struct dentry *)0;
  }
#line 167
  if ((unsigned long )dir_name == (unsigned long )((char const   *)0)) {
#line 168
    return (0);
  } else {

  }
  {
#line 169
  pipefs_sb = rpc_get_sb_net((struct net  const  *)net);
  }
#line 170
  if ((unsigned long )pipefs_sb == (unsigned long )((struct super_block *)0)) {
#line 171
    return (0);
  } else {

  }
  {
#line 172
  dentry = rpc_setup_pipedir_sb(pipefs_sb, clnt, dir_name);
#line 173
  rpc_put_sb_net((struct net  const  *)net);
#line 174
  tmp___1 = IS_ERR((void const   *)dentry);
  }
#line 174
  if (tmp___1 != 0L) {
    {
#line 175
    tmp___0 = PTR_ERR((void const   *)dentry);
    }
#line 175
    return ((int )tmp___0);
  } else {

  }
#line 176
  clnt->cl_dentry = dentry;
#line 177
  return (0);
}
}
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
__inline static int rpc_clnt_skip_event(struct rpc_clnt *clnt , unsigned long event ) 
{ 


  {
#line 182
  if ((event == 0UL && (unsigned long )clnt->cl_dentry != (unsigned long )((struct dentry *)0)) || (event == 1UL && (unsigned long )clnt->cl_dentry == (unsigned long )((struct dentry *)0))) {
#line 184
    return (1);
  } else {

  }
#line 185
  return (0);
}
}
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static int __rpc_clnt_handle_event(struct rpc_clnt *clnt , unsigned long event , struct super_block *sb ) 
{ 
  struct dentry *dentry ;
  int err ;
  long tmp ;
  long tmp___0 ;

  {
#line 192
  err = 0;
  {
#line 195
  if (event == 0UL) {
#line 195
    goto case_0;
  } else {

  }
#line 209
  if (event == 1UL) {
#line 209
    goto case_1;
  } else {

  }
#line 212
  goto switch_default;
  case_0: /* CIL Label */ 
  {
#line 196
  dentry = rpc_setup_pipedir_sb(sb, clnt, (clnt->cl_program)->pipe_dir_name);
  }
#line 198
  if ((unsigned long )dentry == (unsigned long )((struct dentry *)0)) {
#line 199
    return (-2);
  } else {

  }
  {
#line 200
  tmp___0 = IS_ERR((void const   *)dentry);
  }
#line 200
  if (tmp___0 != 0L) {
    {
#line 201
    tmp = PTR_ERR((void const   *)dentry);
    }
#line 201
    return ((int )tmp);
  } else {

  }
#line 202
  clnt->cl_dentry = dentry;
#line 203
  if ((unsigned long )((clnt->cl_auth)->au_ops)->pipes_create != (unsigned long )((int (*/* const  */)(struct rpc_auth * ))0)) {
    {
#line 204
    err = (*(((clnt->cl_auth)->au_ops)->pipes_create))(clnt->cl_auth);
    }
#line 205
    if (err != 0) {
      {
#line 206
      __rpc_clnt_remove_pipedir(clnt);
      }
    } else {

    }
  } else {

  }
#line 208
  goto ldv_47106;
  case_1: /* CIL Label */ 
  {
#line 210
  __rpc_clnt_remove_pipedir(clnt);
  }
#line 211
  goto ldv_47106;
  switch_default: /* CIL Label */ 
  {
#line 213
  printk("\v%s: unknown event: %ld\n", "__rpc_clnt_handle_event", event);
  }
#line 214
  return (-524);
  switch_break: /* CIL Label */ ;
  }
  ldv_47106: ;
#line 216
  return (err);
}
}
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static int __rpc_pipefs_event(struct rpc_clnt *clnt , unsigned long event , struct super_block *sb ) 
{ 
  int error ;
  int tmp ;

  {
#line 222
  error = 0;
  ldv_47117: 
  {
#line 225
  tmp = rpc_clnt_skip_event(clnt, event);
  }
#line 225
  if (tmp == 0) {
    {
#line 226
    error = __rpc_clnt_handle_event(clnt, event, sb);
    }
  } else {

  }
#line 227
  if (error != 0 || (unsigned long )clnt == (unsigned long )clnt->cl_parent) {
#line 228
    goto ldv_47116;
  } else {

  }
#line 224
  clnt = clnt->cl_parent;
#line 229
  goto ldv_47117;
  ldv_47116: ;
#line 230
  return (error);
}
}
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct rpc_clnt *rpc_get_client_for_event(struct net *net , int event ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  struct rpc_clnt *clnt ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 235
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 235
  sn = (struct sunrpc_net *)tmp;
#line 238
  spin_lock(& sn->rpc_client_lock);
#line 239
  __mptr = (struct list_head  const  *)sn->all_clients.next;
#line 239
  clnt = (struct rpc_clnt *)((char *)__mptr + 0xfffffffffffffff8UL);
  }
#line 239
  goto ldv_47130;
  ldv_47129: ;
#line 240
  if ((unsigned long )(clnt->cl_program)->pipe_dir_name == (unsigned long )((char const   */* const  */)0)) {
#line 241
    goto ldv_47128;
  } else {

  }
  {
#line 242
  tmp___0 = rpc_clnt_skip_event(clnt, (unsigned long )event);
  }
#line 242
  if (tmp___0 != 0) {
#line 243
    goto ldv_47128;
  } else {

  }
  {
#line 244
  tmp___1 = atomic_add_unless(& clnt->cl_count, 1, 0);
  }
#line 244
  if (tmp___1 == 0) {
#line 245
    goto ldv_47128;
  } else {

  }
  {
#line 246
  spin_unlock(& sn->rpc_client_lock);
  }
#line 247
  return (clnt);
  ldv_47128: 
#line 239
  __mptr___0 = (struct list_head  const  *)clnt->cl_clients.next;
#line 239
  clnt = (struct rpc_clnt *)((char *)__mptr___0 + 0xfffffffffffffff8UL);
  ldv_47130: ;
#line 239
  if ((unsigned long )(& clnt->cl_clients) != (unsigned long )(& sn->all_clients)) {
#line 241
    goto ldv_47129;
  } else {

  }
  {
#line 249
  spin_unlock(& sn->rpc_client_lock);
  }
#line 250
  return ((struct rpc_clnt *)0);
}
}
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static int rpc_pipefs_event(struct notifier_block *nb , unsigned long event , void *ptr ) 
{ 
  struct super_block *sb ;
  struct rpc_clnt *clnt ;
  int error ;

  {
#line 256
  sb = (struct super_block *)ptr;
#line 258
  error = 0;
#line 260
  goto ldv_47142;
  ldv_47141: 
  {
#line 261
  error = __rpc_pipefs_event(clnt, event, sb);
#line 262
  rpc_release_client(clnt);
  }
#line 263
  if (error != 0) {
#line 264
    goto ldv_47140;
  } else {

  }
  ldv_47142: 
  {
#line 260
  clnt = rpc_get_client_for_event((struct net *)sb->s_fs_info, (int )event);
  }
#line 260
  if ((unsigned long )clnt != (unsigned long )((struct rpc_clnt *)0)) {
#line 262
    goto ldv_47141;
  } else {

  }
  ldv_47140: ;
#line 266
  return (error);
}
}
#line 269 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct notifier_block rpc_clients_block  =    {& rpc_pipefs_event, 0, 1};
#line 274 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
int rpc_clients_notifier_register(void) 
{ 
  int tmp ;

  {
  {
#line 276
  tmp = rpc_pipefs_notifier_register(& rpc_clients_block);
  }
#line 276
  return (tmp);
}
}
#line 279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_clients_notifier_unregister(void) 
{ 


  {
  {
#line 281
  rpc_pipefs_notifier_unregister(& rpc_clients_block);
  }
#line 281
  return;
}
}
#line 284 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_clnt_set_nodename(struct rpc_clnt *clnt , char const   *nodename ) 
{ 
  size_t tmp ;

  {
  {
#line 286
  tmp = strlen(nodename);
#line 286
  clnt->cl_nodelen = (int )tmp;
  }
#line 287
  if (clnt->cl_nodelen > 32) {
#line 288
    clnt->cl_nodelen = 32;
  } else {

  }
  {
#line 289
  memcpy((void *)(& clnt->cl_nodename), (void const   *)nodename, (size_t )clnt->cl_nodelen);
  }
#line 290
  return;
}
}
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct rpc_clnt *rpc_new_client(struct rpc_create_args  const  *args , struct rpc_xprt *xprt ) 
{ 
  struct rpc_program  const  *program ;
  struct rpc_version  const  *version ;
  struct rpc_clnt *clnt ;
  struct rpc_auth *auth ;
  int err ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  struct new_utsname *tmp___5 ;
  void *tmp___6 ;

  {
  {
#line 294
  program = args->program;
#line 296
  clnt = (struct rpc_clnt *)0;
#line 301
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 301
  if (tmp != 0L) {
    {
#line 301
    printk("\001dRPC:       creating %s client for %s (xprt %p)\n", program->name,
           args->servername, xprt);
    }
  } else {

  }
  {
#line 304
  err = rpciod_up();
  }
#line 305
  if (err != 0) {
#line 306
    goto out_no_rpciod;
  } else {

  }
#line 308
  err = -22;
#line 309
  if ((unsigned int )args->version >= (unsigned int )program->nrvers) {
#line 310
    goto out_err;
  } else {

  }
#line 311
  version = *(program->version + (unsigned long )args->version);
#line 312
  if ((unsigned long )version == (unsigned long )((struct rpc_version  const  *)0)) {
#line 313
    goto out_err;
  } else {

  }
  {
#line 315
  err = -12;
#line 316
  tmp___0 = kzalloc(416UL, 208U);
#line 316
  clnt = (struct rpc_clnt *)tmp___0;
  }
#line 317
  if ((unsigned long )clnt == (unsigned long )((struct rpc_clnt *)0)) {
#line 318
    goto out_err;
  } else {

  }
  {
#line 319
  clnt->cl_parent = clnt;
#line 321
  __asm__  volatile   ("": : : "memory");
#line 321
  clnt->cl_xprt = xprt;
#line 322
  clnt->cl_procinfo = version->procs;
#line 323
  clnt->cl_maxproc = version->nrprocs;
#line 324
  clnt->cl_protname = program->name;
#line 325
  clnt->cl_prog = (unsigned int )args->prognumber != 0U ? args->prognumber : program->number;
#line 326
  clnt->cl_vers = version->number;
#line 327
  clnt->cl_stats = program->stats;
#line 328
  clnt->cl_metrics = rpc_alloc_iostats(clnt);
#line 329
  err = -12;
  }
#line 330
  if ((unsigned long )clnt->cl_metrics == (unsigned long )((struct rpc_iostats *)0)) {
#line 331
    goto out_no_stats;
  } else {

  }
  {
#line 332
  clnt->cl_program = program;
#line 333
  INIT_LIST_HEAD(& clnt->cl_tasks);
#line 334
  spinlock_check(& clnt->cl_lock);
#line 334
  __raw_spin_lock_init(& clnt->cl_lock.__annonCompField20.rlock, "&(&clnt->cl_lock)->rlock",
                       & __key);
#line 336
  tmp___1 = xprt_bound(xprt);
  }
#line 336
  if (tmp___1 == 0) {
#line 337
    clnt->cl_autobind = 1U;
  } else {

  }
#line 339
  clnt->cl_timeout = xprt->timeout;
#line 340
  if ((unsigned long )args->timeout != (unsigned long )((struct rpc_timeout  const  */* const  */)0)) {
    {
#line 341
    memcpy((void *)(& clnt->cl_timeout_default), (void const   *)args->timeout, 32UL);
#line 343
    clnt->cl_timeout = (struct rpc_timeout  const  *)(& clnt->cl_timeout_default);
    }
  } else {

  }
  {
#line 346
  clnt->cl_rtt = & clnt->cl_rtt_default;
#line 347
  rpc_init_rtt(& clnt->cl_rtt_default, (clnt->cl_timeout)->to_initval);
#line 348
  clnt->cl_principal = (char *)0;
  }
#line 349
  if ((unsigned long )args->client_name != (unsigned long )((char */* const  */)0)) {
    {
#line 350
    clnt->cl_principal = kstrdup((char const   *)args->client_name, 208U);
    }
#line 351
    if ((unsigned long )clnt->cl_principal == (unsigned long )((char *)0)) {
#line 352
      goto out_no_principal;
    } else {

    }
  } else {

  }
  {
#line 355
  atomic_set(& clnt->cl_count, 1);
#line 357
  err = rpc_setup_pipedir(clnt, program->pipe_dir_name);
  }
#line 358
  if (err < 0) {
#line 359
    goto out_no_path;
  } else {

  }
  {
#line 361
  auth = rpcauth_create(args->authflavor, clnt);
#line 362
  tmp___4 = IS_ERR((void const   *)auth);
  }
#line 362
  if (tmp___4 != 0L) {
    {
#line 363
    tmp___2 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 363
    if (tmp___2 != 0L) {
      {
#line 363
      printk("\001dRPC:       Couldn\'t create auth handle (flavor %u)\n", args->authflavor);
      }
    } else {

    }
    {
#line 365
    tmp___3 = PTR_ERR((void const   *)auth);
#line 365
    err = (int )tmp___3;
    }
#line 366
    goto out_no_auth;
  } else {

  }
  {
#line 370
  tmp___5 = utsname();
#line 370
  rpc_clnt_set_nodename(clnt, (char const   *)(& tmp___5->nodename));
#line 371
  rpc_register_client(clnt);
  }
#line 372
  return (clnt);
  out_no_auth: 
  {
#line 375
  rpc_clnt_remove_pipedir(clnt);
  }
  out_no_path: 
  {
#line 377
  kfree((void const   *)clnt->cl_principal);
  }
  out_no_principal: 
  {
#line 379
  rpc_free_iostats(clnt->cl_metrics);
  }
  out_no_stats: 
  {
#line 381
  kfree((void const   *)clnt);
  }
  out_err: 
  {
#line 383
  rpciod_down();
  }
  out_no_rpciod: 
  {
#line 385
  xprt_put(xprt);
#line 386
  tmp___6 = ERR_PTR((long )err);
  }
#line 386
  return ((struct rpc_clnt *)tmp___6);
}
}
#line 399 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
struct rpc_clnt *rpc_create(struct rpc_create_args *args ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_clnt *clnt ;
  struct xprt_create xprtargs ;
  char servername[48U] ;
  struct sockaddr_un *sun ;
  struct sockaddr_in *sin ;
  struct sockaddr_in6 *sin6 ;
  void *tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int err ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 403
  xprtargs.ident = args->protocol;
#line 403
  xprtargs.net = args->net;
#line 403
  xprtargs.srcaddr = args->saddress;
#line 403
  xprtargs.dstaddr = args->address;
#line 403
  xprtargs.addrlen = args->addrsize;
#line 403
  xprtargs.servername = args->servername;
#line 403
  xprtargs.bc_xprt = args->bc_xprt;
#line 403
  xprtargs.flags = 0U;
#line 414
  if ((args->flags & 128UL) != 0UL) {
#line 415
    xprtargs.flags = xprtargs.flags | 1U;
  } else {

  }
#line 416
  if ((args->flags & 256UL) != 0UL) {
#line 417
    xprtargs.flags = xprtargs.flags | 2U;
  } else {

  }
#line 422
  if ((unsigned long )xprtargs.servername == (unsigned long )((char const   *)0)) {
#line 423
    sun = (struct sockaddr_un *)args->address;
#line 425
    sin = (struct sockaddr_in *)args->address;
#line 427
    sin6 = (struct sockaddr_in6 *)args->address;
#line 430
    servername[0] = 0;
    {
#line 432
    if ((int )(args->address)->sa_family == 1) {
#line 432
      goto case_1;
    } else {

    }
#line 436
    if ((int )(args->address)->sa_family == 2) {
#line 436
      goto case_2;
    } else {

    }
#line 440
    if ((int )(args->address)->sa_family == 10) {
#line 440
      goto case_10;
    } else {

    }
#line 444
    goto switch_default;
    case_1: /* CIL Label */ 
    {
#line 433
    snprintf((char *)(& servername), 48UL, "%s", (char *)(& sun->sun_path));
    }
#line 435
    goto ldv_47181;
    case_2: /* CIL Label */ 
    {
#line 437
    snprintf((char *)(& servername), 48UL, "%pI4", & sin->sin_addr.s_addr);
    }
#line 439
    goto ldv_47181;
    case_10: /* CIL Label */ 
    {
#line 441
    snprintf((char *)(& servername), 48UL, "%pI6", & sin6->sin6_addr);
    }
#line 443
    goto ldv_47181;
    switch_default: /* CIL Label */ 
    {
#line 447
    tmp = ERR_PTR(-22L);
    }
#line 447
    return ((struct rpc_clnt *)tmp);
    switch_break: /* CIL Label */ ;
    }
    ldv_47181: 
#line 449
    xprtargs.servername = (char const   *)(& servername);
  } else {

  }
  {
#line 452
  xprt = xprt_create_transport(& xprtargs);
#line 453
  tmp___0 = IS_ERR((void const   *)xprt);
  }
#line 453
  if (tmp___0 != 0L) {
#line 454
    return ((struct rpc_clnt *)xprt);
  } else {

  }
#line 462
  xprt->resvport = 1U;
#line 463
  if ((args->flags & 8UL) != 0UL) {
#line 464
    xprt->resvport = 0U;
  } else {

  }
  {
#line 466
  clnt = rpc_new_client((struct rpc_create_args  const  *)args, xprt);
#line 467
  tmp___1 = IS_ERR((void const   *)clnt);
  }
#line 467
  if (tmp___1 != 0L) {
#line 468
    return (clnt);
  } else {

  }
#line 470
  if ((args->flags & 16UL) == 0UL) {
    {
#line 471
    tmp___2 = rpc_ping(clnt);
#line 471
    err = tmp___2;
    }
#line 472
    if (err != 0) {
      {
#line 473
      rpc_shutdown_client(clnt);
#line 474
      tmp___3 = ERR_PTR((long )err);
      }
#line 474
      return ((struct rpc_clnt *)tmp___3);
    } else {

    }
  } else {

  }
#line 478
  clnt->cl_softrtry = 1U;
#line 479
  if ((int )args->flags & 1) {
#line 480
    clnt->cl_softrtry = 0U;
  } else {

  }
#line 482
  if ((args->flags & 4UL) != 0UL) {
#line 483
    clnt->cl_autobind = 1U;
  } else {

  }
#line 484
  if ((args->flags & 32UL) != 0UL) {
#line 485
    clnt->cl_discrtry = 1U;
  } else {

  }
#line 486
  if ((args->flags & 64UL) == 0UL) {
#line 487
    clnt->cl_chatty = 1U;
  } else {

  }
#line 489
  return (clnt);
}
}
#line 498 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct rpc_clnt *__rpc_clone_client(struct rpc_create_args *args , struct rpc_clnt *clnt ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_clnt *new ;
  int err ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;

  {
  {
#line 505
  err = -12;
#line 506
  rcu_read_lock();
#line 507
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 507
  tmp = debug_lockdep_rcu_enabled();
  }
#line 507
  if (tmp != 0 && ! __warned) {
    {
#line 507
    tmp___0 = rcu_read_lock_held();
    }
#line 507
    if (tmp___0 == 0) {
      {
#line 507
      __warned = 1;
#line 507
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 507, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 507
  xprt = xprt_get(_________p1);
#line 508
  rcu_read_unlock();
  }
#line 509
  if ((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0)) {
#line 510
    goto out_err;
  } else {

  }
  {
#line 511
  args->servername = xprt->servername;
#line 513
  new = rpc_new_client((struct rpc_create_args  const  *)args, xprt);
#line 514
  tmp___2 = IS_ERR((void const   *)new);
  }
#line 514
  if (tmp___2 != 0L) {
    {
#line 515
    tmp___1 = PTR_ERR((void const   *)new);
#line 515
    err = (int )tmp___1;
    }
#line 516
    goto out_err;
  } else {

  }
  {
#line 519
  atomic_inc(& clnt->cl_count);
#line 520
  new->cl_parent = clnt;
#line 523
  new->cl_autobind = 0U;
#line 524
  new->cl_softrtry = clnt->cl_softrtry;
#line 525
  new->cl_discrtry = clnt->cl_discrtry;
#line 526
  new->cl_chatty = clnt->cl_chatty;
  }
#line 527
  return (new);
  out_err: 
  {
#line 530
  tmp___3 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 530
  if (tmp___3 != 0L) {
    {
#line 530
    printk("\001dRPC:       %s: returned error %d\n", "__rpc_clone_client", err);
    }
  } else {

  }
  {
#line 531
  tmp___4 = ERR_PTR((long )err);
  }
#line 531
  return ((struct rpc_clnt *)tmp___4);
}
}
#line 541 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
struct rpc_clnt *rpc_clone_client(struct rpc_clnt *clnt ) 
{ 
  struct rpc_create_args args ;
  struct rpc_clnt *tmp ;

  {
  {
#line 543
  args.net = 0;
#line 543
  args.protocol = 0;
#line 543
  args.address = 0;
#line 543
  args.addrsize = 0UL;
#line 543
  args.saddress = 0;
#line 543
  args.timeout = 0;
#line 543
  args.servername = 0;
#line 543
  args.program = clnt->cl_program;
#line 543
  args.prognumber = clnt->cl_prog;
#line 543
  args.version = clnt->cl_vers;
#line 543
  args.authflavor = (clnt->cl_auth)->au_flavor;
#line 543
  args.flags = 0UL;
#line 543
  args.client_name = clnt->cl_principal;
#line 543
  args.bc_xprt = 0;
#line 550
  tmp = __rpc_clone_client(& args, clnt);
  }
#line 550
  return (tmp);
}
}
#line 563 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
struct rpc_clnt *rpc_clone_client_set_auth(struct rpc_clnt *clnt , rpc_authflavor_t flavor ) 
{ 
  struct rpc_create_args args ;
  struct rpc_clnt *tmp ;

  {
  {
#line 565
  args.net = 0;
#line 565
  args.protocol = 0;
#line 565
  args.address = 0;
#line 565
  args.addrsize = 0UL;
#line 565
  args.saddress = 0;
#line 565
  args.timeout = 0;
#line 565
  args.servername = 0;
#line 565
  args.program = clnt->cl_program;
#line 565
  args.prognumber = clnt->cl_prog;
#line 565
  args.version = clnt->cl_vers;
#line 565
  args.authflavor = flavor;
#line 565
  args.flags = 0UL;
#line 565
  args.client_name = clnt->cl_principal;
#line 565
  args.bc_xprt = 0;
#line 572
  tmp = __rpc_clone_client(& args, clnt);
  }
#line 572
  return (tmp);
}
}
#line 580 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_killall_tasks(struct rpc_clnt *clnt ) 
{ 
  struct rpc_task *rovr ;
  int tmp ;
  long tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 585
  tmp = list_empty((struct list_head  const  *)(& clnt->cl_tasks));
  }
#line 585
  if (tmp != 0) {
#line 586
    return;
  } else {

  }
  {
#line 587
  tmp___0 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 587
  if (tmp___0 != 0L) {
    {
#line 587
    printk("\001dRPC:       killing all tasks for client %p\n", clnt);
    }
  } else {

  }
  {
#line 591
  spin_lock(& clnt->cl_lock);
#line 592
  __mptr = (struct list_head  const  *)clnt->cl_tasks.next;
#line 592
  rovr = (struct rpc_task *)((char *)__mptr + 0xfffffffffffffff8UL);
  }
#line 592
  goto ldv_47236;
  ldv_47235: 
  {
#line 593
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& rovr->tk_runstate));
  }
#line 593
  if (tmp___1 == 0) {
#line 594
    goto ldv_47234;
  } else {

  }
#line 595
  if (((int )rovr->tk_flags & 256) == 0) {
    {
#line 596
    rovr->tk_flags = (unsigned int )rovr->tk_flags | 256U;
#line 597
    rpc_exit(rovr, -5);
#line 598
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& rovr->tk_runstate));
    }
#line 598
    if (tmp___2 != 0) {
      {
#line 599
      rpc_wake_up_queued_task(rovr->tk_waitqueue, rovr);
      }
    } else {

    }
  } else {

  }
  ldv_47234: 
#line 592
  __mptr___0 = (struct list_head  const  *)rovr->tk_task.next;
#line 592
  rovr = (struct rpc_task *)((char *)__mptr___0 + 0xfffffffffffffff8UL);
  ldv_47236: ;
#line 592
  if ((unsigned long )(& rovr->tk_task) != (unsigned long )(& clnt->cl_tasks)) {
#line 594
    goto ldv_47235;
  } else {

  }
  {
#line 603
  spin_unlock(& clnt->cl_lock);
  }
#line 604
  return;
}
}
#line 611 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_shutdown_client(struct rpc_clnt *clnt ) 
{ 
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
  {
#line 613
  __might_sleep("net/sunrpc/clnt.c", 613, 0);
#line 615
  tmp___1 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 615
  if (tmp___1 != 0L) {
    {
#line 615
    rcu_read_lock();
#line 615
    _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 615
    tmp = debug_lockdep_rcu_enabled();
    }
#line 615
    if (tmp != 0 && ! __warned) {
      {
#line 615
      tmp___0 = rcu_read_lock_held();
      }
#line 615
      if (tmp___0 == 0) {
        {
#line 615
        __warned = 1;
#line 615
        lockdep_rcu_suspicious("net/sunrpc/clnt.c", 617, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
    {
#line 615
    printk("\001dRPC:       shutting down %s client for %s\n", clnt->cl_protname,
           _________p1->servername);
#line 615
    rcu_read_unlock();
    }
  } else {

  }
#line 619
  goto ldv_47256;
  ldv_47255: 
  {
#line 620
  rpc_killall_tasks(clnt);
#line 621
  __ret = 250L;
#line 621
  tmp___5 = list_empty((struct list_head  const  *)(& clnt->cl_tasks));
  }
#line 621
  if (tmp___5 == 0) {
    {
#line 621
    tmp___2 = get_current();
#line 621
    __wait.flags = 0U;
#line 621
    __wait.private = (void *)tmp___2;
#line 621
    __wait.func = & autoremove_wake_function;
#line 621
    __wait.task_list.next = & __wait.task_list;
#line 621
    __wait.task_list.prev = & __wait.task_list;
    }
    ldv_47253: 
    {
#line 621
    prepare_to_wait(& destroy_wait, & __wait, 2);
#line 621
    tmp___3 = list_empty((struct list_head  const  *)(& clnt->cl_tasks));
    }
#line 621
    if (tmp___3 != 0) {
#line 621
      goto ldv_47252;
    } else {

    }
    {
#line 621
    __ret = schedule_timeout(__ret);
    }
#line 621
    if (__ret == 0L) {
#line 621
      goto ldv_47252;
    } else {

    }
#line 621
    goto ldv_47253;
    ldv_47252: ;
#line 621
    if (__ret == 0L) {
      {
#line 621
      tmp___4 = list_empty((struct list_head  const  *)(& clnt->cl_tasks));
      }
#line 621
      if (tmp___4 != 0) {
#line 621
        __ret = 1L;
      } else {

      }
    } else {

    }
    {
#line 621
    finish_wait(& destroy_wait, & __wait);
    }
  } else {

  }
  ldv_47256: 
  {
#line 619
  tmp___6 = list_empty((struct list_head  const  *)(& clnt->cl_tasks));
  }
#line 619
  if (tmp___6 == 0) {
#line 621
    goto ldv_47255;
  } else {

  }
  {
#line 625
  rpc_release_client(clnt);
  }
#line 626
  return;
}
}
#line 633 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_free_client(struct rpc_clnt *clnt ) 
{ 
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct rpc_xprt *_________p1___0 ;
  bool __warned___0 ;
  int tmp___2 ;

  {
  {
#line 635
  tmp___1 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 635
  if (tmp___1 != 0L) {
    {
#line 635
    rcu_read_lock();
#line 635
    _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 635
    tmp = debug_lockdep_rcu_enabled();
    }
#line 635
    if (tmp != 0 && ! __warned) {
      {
#line 635
      tmp___0 = rcu_read_lock_held();
      }
#line 635
      if (tmp___0 == 0) {
        {
#line 635
        __warned = 1;
#line 635
        lockdep_rcu_suspicious("net/sunrpc/clnt.c", 637, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
    {
#line 635
    printk("\001dRPC:       destroying %s client for %s\n", clnt->cl_protname, _________p1->servername);
#line 635
    rcu_read_unlock();
    }
  } else {

  }
#line 638
  if ((unsigned long )clnt->cl_parent != (unsigned long )clnt) {
    {
#line 639
    rpc_release_client(clnt->cl_parent);
    }
  } else {

  }
  {
#line 640
  rpc_unregister_client(clnt);
#line 641
  rpc_clnt_remove_pipedir(clnt);
#line 642
  rpc_free_iostats(clnt->cl_metrics);
#line 643
  kfree((void const   *)clnt->cl_principal);
#line 644
  clnt->cl_metrics = (struct rpc_iostats *)0;
#line 645
  _________p1___0 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 645
  tmp___2 = debug_lockdep_rcu_enabled();
  }
#line 645
  if (tmp___2 != 0 && ! __warned___0) {
    {
#line 645
    rcu_read_lock_held();
    }
  } else {

  }
  {
#line 645
  xprt_put(_________p1___0);
#line 646
  rpciod_down();
#line 647
  kfree((void const   *)clnt);
  }
#line 648
  return;
}
}
#line 654 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_free_auth(struct rpc_clnt *clnt ) 
{ 
  int tmp ;

  {
#line 656
  if ((unsigned long )clnt->cl_auth == (unsigned long )((struct rpc_auth *)0)) {
    {
#line 657
    rpc_free_client(clnt);
    }
#line 658
    return;
  } else {

  }
  {
#line 666
  atomic_inc(& clnt->cl_count);
#line 667
  rpcauth_release(clnt->cl_auth);
#line 668
  clnt->cl_auth = (struct rpc_auth *)0;
#line 669
  tmp = atomic_dec_and_test(& clnt->cl_count);
  }
#line 669
  if (tmp != 0) {
    {
#line 670
    rpc_free_client(clnt);
    }
  } else {

  }
#line 671
  return;
}
}
#line 677 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_release_client(struct rpc_clnt *clnt ) 
{ 
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 679
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 679
  if (tmp != 0L) {
    {
#line 679
    printk("\001dRPC:       rpc_release_client(%p)\n", clnt);
    }
  } else {

  }
  {
#line 681
  tmp___0 = list_empty((struct list_head  const  *)(& clnt->cl_tasks));
  }
#line 681
  if (tmp___0 != 0) {
    {
#line 682
    __wake_up(& destroy_wait, 3U, 1, (void *)0);
    }
  } else {

  }
  {
#line 683
  tmp___1 = atomic_dec_and_test(& clnt->cl_count);
  }
#line 683
  if (tmp___1 != 0) {
    {
#line 684
    rpc_free_auth(clnt);
    }
  } else {

  }
#line 685
  return;
}
}
#line 698 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
struct rpc_clnt *rpc_bind_new_program(struct rpc_clnt *old , struct rpc_program  const  *program ,
                                      u32 vers ) 
{ 
  struct rpc_create_args args ;
  struct rpc_clnt *clnt ;
  int err ;
  long tmp ;
  void *tmp___0 ;

  {
  {
#line 702
  args.net = 0;
#line 702
  args.protocol = 0;
#line 702
  args.address = 0;
#line 702
  args.addrsize = 0UL;
#line 702
  args.saddress = 0;
#line 702
  args.timeout = 0;
#line 702
  args.servername = 0;
#line 702
  args.program = program;
#line 702
  args.prognumber = program->number;
#line 702
  args.version = vers;
#line 702
  args.authflavor = (old->cl_auth)->au_flavor;
#line 702
  args.flags = 0UL;
#line 702
  args.client_name = old->cl_principal;
#line 702
  args.bc_xprt = 0;
#line 712
  clnt = __rpc_clone_client(& args, old);
#line 713
  tmp = IS_ERR((void const   *)clnt);
  }
#line 713
  if (tmp != 0L) {
#line 714
    goto out;
  } else {

  }
  {
#line 715
  err = rpc_ping(clnt);
  }
#line 716
  if (err != 0) {
    {
#line 717
    rpc_shutdown_client(clnt);
#line 718
    tmp___0 = ERR_PTR((long )err);
#line 718
    clnt = (struct rpc_clnt *)tmp___0;
    }
  } else {

  }
  out: ;
#line 721
  return (clnt);
}
}
#line 725 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_task_release_client(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;

  {
#line 727
  clnt = task->tk_client;
#line 729
  if ((unsigned long )clnt != (unsigned long )((struct rpc_clnt *)0)) {
    {
#line 731
    spin_lock(& clnt->cl_lock);
#line 732
    list_del(& task->tk_task);
#line 733
    spin_unlock(& clnt->cl_lock);
#line 734
    task->tk_client = (struct rpc_clnt *)0;
#line 736
    rpc_release_client(clnt);
    }
  } else {

  }
#line 738
  return;
}
}
#line 741 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_task_set_client(struct rpc_task *task , struct rpc_clnt *clnt ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 743
  if ((unsigned long )clnt != (unsigned long )((struct rpc_clnt *)0)) {
    {
#line 744
    rpc_task_release_client(task);
#line 745
    task->tk_client = clnt;
#line 746
    atomic_inc(& clnt->cl_count);
    }
#line 747
    if ((unsigned int )*((unsigned char *)clnt + 176UL) != 0U) {
#line 748
      task->tk_flags = (unsigned int )task->tk_flags | 512U;
    } else {

    }
    {
#line 749
    tmp___1 = sk_memalloc_socks();
    }
#line 749
    if (tmp___1 != 0) {
      {
#line 752
      rcu_read_lock();
#line 753
      _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 753
      tmp = debug_lockdep_rcu_enabled();
      }
#line 753
      if (tmp != 0 && ! __warned) {
        {
#line 753
        tmp___0 = rcu_read_lock_held();
        }
#line 753
        if (tmp___0 == 0) {
          {
#line 753
          __warned = 1;
#line 753
          lockdep_rcu_suspicious("net/sunrpc/clnt.c", 753, "suspicious rcu_dereference_check() usage");
          }
        } else {

        }
      } else {

      }
#line 753
      xprt = _________p1;
#line 754
      if (xprt->swapper != 0U) {
#line 755
        task->tk_flags = (unsigned int )task->tk_flags | 2U;
      } else {

      }
      {
#line 756
      rcu_read_unlock();
      }
    } else {

    }
    {
#line 759
    spin_lock(& clnt->cl_lock);
#line 760
    list_add_tail(& task->tk_task, & clnt->cl_tasks);
#line 761
    spin_unlock(& clnt->cl_lock);
    }
  } else {

  }
#line 763
  return;
}
}
#line 765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_task_reset_client(struct rpc_task *task , struct rpc_clnt *clnt ) 
{ 


  {
  {
#line 767
  rpc_task_release_client(task);
#line 768
  rpc_task_set_client(task, clnt);
  }
#line 769
  return;
}
}
#line 774 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_task_set_rpc_message(struct rpc_task *task , struct rpc_message  const  *msg ) 
{ 


  {
#line 776
  if ((unsigned long )msg != (unsigned long )((struct rpc_message  const  *)0)) {
#line 777
    task->tk_msg.rpc_proc = msg->rpc_proc;
#line 778
    task->tk_msg.rpc_argp = msg->rpc_argp;
#line 779
    task->tk_msg.rpc_resp = msg->rpc_resp;
#line 780
    if ((unsigned long )msg->rpc_cred != (unsigned long )((struct rpc_cred */* const  */)0)) {
      {
#line 781
      task->tk_msg.rpc_cred = get_rpccred(msg->rpc_cred);
      }
    } else {

    }
  } else {

  }
#line 783
  return;
}
}
#line 789 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_default_callback(struct rpc_task *task , void *data ) 
{ 


  {
#line 791
  return;
}
}
#line 793 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct rpc_call_ops  const  rpc_default_ops  =    {0, & rpc_default_callback, 0, 0};
#line 801 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
struct rpc_task *rpc_run_task(struct rpc_task_setup  const  *task_setup_data ) 
{ 
  struct rpc_task *task ;
  long tmp ;

  {
  {
#line 805
  task = rpc_new_task(task_setup_data);
#line 806
  tmp = IS_ERR((void const   *)task);
  }
#line 806
  if (tmp != 0L) {
#line 807
    goto out;
  } else {

  }
  {
#line 809
  rpc_task_set_client(task, task_setup_data->rpc_client);
#line 810
  rpc_task_set_rpc_message(task, task_setup_data->rpc_message);
  }
#line 812
  if ((unsigned long )task->tk_action == (unsigned long )((void (*)(struct rpc_task * ))0)) {
    {
#line 813
    rpc_call_start(task);
    }
  } else {

  }
  {
#line 815
  atomic_inc(& task->tk_count);
#line 816
  rpc_execute(task);
  }
  out: ;
#line 818
  return (task);
}
}
#line 828 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
int rpc_call_sync(struct rpc_clnt *clnt , struct rpc_message  const  *msg , int flags ) 
{ 
  struct rpc_task *task ;
  struct rpc_task_setup task_setup_data ;
  int status ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
  {
#line 831
  task_setup_data.task = 0;
#line 831
  task_setup_data.rpc_client = clnt;
#line 831
  task_setup_data.rpc_message = msg;
#line 831
  task_setup_data.callback_ops = & rpc_default_ops;
#line 831
  task_setup_data.callback_data = 0;
#line 831
  task_setup_data.workqueue = 0;
#line 831
  task_setup_data.flags = (unsigned short )flags;
#line 831
  task_setup_data.priority = (signed char)0;
#line 839
  __ret_warn_once = flags & 1;
#line 839
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 839
  if (tmp___1 != 0L) {
    {
#line 839
    __ret_warn_on = ! __warned;
#line 839
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 839
    if (tmp != 0L) {
      {
#line 839
      warn_slowpath_null("net/sunrpc/clnt.c", 839);
      }
    } else {

    }
    {
#line 839
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 839
    if (tmp___0 != 0L) {
#line 839
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 839
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 840
  if (flags & 1) {
    {
#line 841
    rpc_release_calldata(task_setup_data.callback_ops, task_setup_data.callback_data);
    }
#line 843
    return (-22);
  } else {

  }
  {
#line 846
  task = rpc_run_task((struct rpc_task_setup  const  *)(& task_setup_data));
#line 847
  tmp___3 = IS_ERR((void const   *)task);
  }
#line 847
  if (tmp___3 != 0L) {
    {
#line 848
    tmp___2 = PTR_ERR((void const   *)task);
    }
#line 848
    return ((int )tmp___2);
  } else {

  }
  {
#line 849
  status = task->tk_status;
#line 850
  rpc_put_task(task);
  }
#line 851
  return (status);
}
}
#line 864 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
int rpc_call_async(struct rpc_clnt *clnt , struct rpc_message  const  *msg , int flags ,
                   struct rpc_call_ops  const  *tk_ops , void *data ) 
{ 
  struct rpc_task *task ;
  struct rpc_task_setup task_setup_data ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 868
  task_setup_data.task = 0;
#line 868
  task_setup_data.rpc_client = clnt;
#line 868
  task_setup_data.rpc_message = msg;
#line 868
  task_setup_data.callback_ops = tk_ops;
#line 868
  task_setup_data.callback_data = data;
#line 868
  task_setup_data.workqueue = 0;
#line 868
  task_setup_data.flags = (unsigned short )((int )((short )flags) | 1);
#line 868
  task_setup_data.priority = (signed char)0;
#line 876
  task = rpc_run_task((struct rpc_task_setup  const  *)(& task_setup_data));
#line 877
  tmp___0 = IS_ERR((void const   *)task);
  }
#line 877
  if (tmp___0 != 0L) {
    {
#line 878
    tmp = PTR_ERR((void const   *)task);
    }
#line 878
    return ((int )tmp);
  } else {

  }
  {
#line 879
  rpc_put_task(task);
  }
#line 880
  return (0);
}
}
#line 891 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
struct rpc_task *rpc_run_bc_task(struct rpc_rqst *req , struct rpc_call_ops  const  *tk_ops ) 
{ 
  struct rpc_task *task ;
  struct xdr_buf *xbufp ;
  struct rpc_task_setup task_setup_data ;
  long tmp ;
  long tmp___0 ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___1 ;
  int __ret_warn_on ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;

  {
  {
#line 895
  xbufp = & req->rq_snd_buf;
#line 896
  task_setup_data.task = 0;
#line 896
  task_setup_data.rpc_client = 0;
#line 896
  task_setup_data.rpc_message = 0;
#line 896
  task_setup_data.callback_ops = tk_ops;
#line 896
  task_setup_data.callback_data = 0;
#line 896
  task_setup_data.workqueue = 0;
#line 896
  task_setup_data.flags = (unsigned short)0;
#line 896
  task_setup_data.priority = (signed char)0;
#line 900
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 900
  if (tmp != 0L) {
    {
#line 900
    printk("\001dRPC: rpc_run_bc_task req= %p\n", req);
    }
  } else {

  }
  {
#line 904
  task = rpc_new_task((struct rpc_task_setup  const  *)(& task_setup_data));
#line 905
  tmp___0 = IS_ERR((void const   *)task);
  }
#line 905
  if (tmp___0 != 0L) {
    {
#line 906
    xprt_free_bc_request(req);
    }
#line 907
    goto out;
  } else {

  }
  {
#line 909
  task->tk_rqstp = req;
#line 915
  xbufp->len = ((unsigned int )xbufp->head[0].iov_len + xbufp->page_len) + (unsigned int )xbufp->tail[0].iov_len;
#line 918
  task->tk_action = & call_bc_transmit;
#line 919
  atomic_inc(& task->tk_count);
#line 920
  tmp___1 = atomic_read((atomic_t const   *)(& task->tk_count));
#line 920
  __ret_warn_once = tmp___1 != 2;
#line 920
  tmp___4 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 920
  if (tmp___4 != 0L) {
    {
#line 920
    __ret_warn_on = ! __warned;
#line 920
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 920
    if (tmp___2 != 0L) {
      {
#line 920
      warn_slowpath_null("net/sunrpc/clnt.c", 920);
      }
    } else {

    }
    {
#line 920
    tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 920
    if (tmp___3 != 0L) {
#line 920
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 920
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 921
  rpc_execute(task);
  }
  out: 
  {
#line 924
  tmp___5 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 924
  if (tmp___5 != 0L) {
    {
#line 924
    printk("\001dRPC: rpc_run_bc_task: task= %p\n", task);
    }
  } else {

  }
#line 925
  return (task);
}
}
#line 930 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_call_start(struct rpc_task *task ) 
{ 


  {
#line 932
  task->tk_action = & call_start;
#line 933
  return;
}
}
#line 944 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
size_t rpc_peeraddr(struct rpc_clnt *clnt , struct sockaddr *buf , size_t bufsize ) 
{ 
  size_t bytes ;
  struct rpc_xprt *xprt ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 949
  rcu_read_lock();
#line 950
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 950
  tmp = debug_lockdep_rcu_enabled();
  }
#line 950
  if (tmp != 0 && ! __warned) {
    {
#line 950
    tmp___0 = rcu_read_lock_held();
    }
#line 950
    if (tmp___0 == 0) {
      {
#line 950
      __warned = 1;
#line 950
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 950, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
#line 950
  xprt = _________p1;
#line 952
  bytes = xprt->addrlen;
#line 953
  if (bytes > bufsize) {
#line 954
    bytes = bufsize;
  } else {

  }
  {
#line 955
  memcpy((void *)buf, (void const   *)(& xprt->addr), bytes);
#line 956
  rcu_read_unlock();
  }
#line 958
  return (bytes);
}
}
#line 971 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
char const   *rpc_peeraddr2str(struct rpc_clnt *clnt , enum rpc_display_format_t format ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 976
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 976
  tmp = debug_lockdep_rcu_enabled();
  }
#line 976
  if (tmp != 0 && ! __warned) {
    {
#line 976
    tmp___0 = rcu_read_lock_held();
    }
#line 976
    if (tmp___0 == 0) {
      {
#line 976
      __warned = 1;
#line 976
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 976, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
#line 976
  xprt = _________p1;
#line 978
  if ((unsigned long )xprt->address_strings[(unsigned int )format] != (unsigned long )((char const   *)0)) {
#line 979
    return (xprt->address_strings[(unsigned int )format]);
  } else {
#line 981
    return ("unprintable");
  }
}
}
#line 985 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct sockaddr_in  const  rpc_inaddr_loopback  =    {2U, (unsigned short)0, {0U}, {(unsigned char)0, (unsigned char)0, (unsigned char)0,
                                  (unsigned char)0, (unsigned char)0, (unsigned char)0,
                                  (unsigned char)0, (unsigned char)0}};
#line 990 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct sockaddr_in6  const  rpc_in6addr_loopback  =    {10U, (unsigned short)0, 0U, {{{0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
                                   0U, 0U, 0U, 0U}}}, 0U};
#line 1003 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static int rpc_sockname(struct net *net , struct sockaddr *sap , size_t salen , struct sockaddr *buf ,
                        int buflen ) 
{ 
  struct socket *sock ;
  int err ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  struct sockaddr_in6 *sin6 ;
  long tmp___3 ;

  {
  {
#line 1009
  err = __sock_create(net, (int )sap->sa_family, 2, 17, & sock, 1);
  }
#line 1011
  if (err < 0) {
    {
#line 1012
    tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 1012
    if (tmp != 0L) {
      {
#line 1012
      printk("\001dRPC:       can\'t create UDP socket (%d)\n", err);
      }
    } else {

    }
#line 1013
    goto out;
  } else {

  }
  {
#line 1017
  if ((int )sap->sa_family == 2) {
#line 1017
    goto case_2;
  } else {

  }
#line 1022
  if ((int )sap->sa_family == 10) {
#line 1022
    goto case_10;
  } else {

  }
#line 1027
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 1018
  err = kernel_bind(sock, (struct sockaddr *)(& rpc_inaddr_loopback), 16);
  }
#line 1021
  goto ldv_47453;
  case_10: /* CIL Label */ 
  {
#line 1023
  err = kernel_bind(sock, (struct sockaddr *)(& rpc_in6addr_loopback), 28);
  }
#line 1026
  goto ldv_47453;
  switch_default: /* CIL Label */ 
#line 1028
  err = -97;
#line 1029
  goto out;
  switch_break: /* CIL Label */ ;
  }
  ldv_47453: ;
#line 1031
  if (err < 0) {
    {
#line 1032
    tmp___0 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 1032
    if (tmp___0 != 0L) {
      {
#line 1032
      printk("\001dRPC:       can\'t bind UDP socket (%d)\n", err);
      }
    } else {

    }
#line 1033
    goto out_release;
  } else {

  }
  {
#line 1036
  err = kernel_connect(sock, sap, (int )salen, 0);
  }
#line 1037
  if (err < 0) {
    {
#line 1038
    tmp___1 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 1038
    if (tmp___1 != 0L) {
      {
#line 1038
      printk("\001dRPC:       can\'t connect UDP socket (%d)\n", err);
      }
    } else {

    }
#line 1039
    goto out_release;
  } else {

  }
  {
#line 1042
  err = kernel_getsockname(sock, buf, & buflen);
  }
#line 1043
  if (err < 0) {
    {
#line 1044
    tmp___2 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 1044
    if (tmp___2 != 0L) {
      {
#line 1044
      printk("\001dRPC:       getsockname failed (%d)\n", err);
      }
    } else {

    }
#line 1045
    goto out_release;
  } else {

  }
#line 1048
  err = 0;
#line 1049
  if ((unsigned int )buf->sa_family == 10U) {
#line 1050
    sin6 = (struct sockaddr_in6 *)buf;
#line 1051
    sin6->sin6_scope_id = 0U;
  } else {

  }
  {
#line 1053
  tmp___3 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1053
  if (tmp___3 != 0L) {
    {
#line 1053
    printk("\001dRPC:       %s succeeded\n", "rpc_sockname");
    }
  } else {

  }
  out_release: 
  {
#line 1056
  sock_release(sock);
  }
  out: ;
#line 1058
  return (err);
}
}
#line 1069 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static int rpc_anyaddr(int family , struct sockaddr *buf , size_t buflen ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
  {
#line 1072
  if (family == 2) {
#line 1072
    goto case_2;
  } else {

  }
#line 1078
  if (family == 10) {
#line 1078
    goto case_10;
  } else {

  }
#line 1083
  goto switch_default;
  case_2: /* CIL Label */ ;
#line 1073
  if (buflen <= 15UL) {
#line 1074
    return (-22);
  } else {

  }
  {
#line 1075
  memcpy((void *)buf, (void const   *)(& rpc_inaddr_loopback), 16UL);
  }
#line 1077
  goto ldv_47465;
  case_10: /* CIL Label */ ;
#line 1079
  if (buflen <= 27UL) {
#line 1080
    return (-22);
  } else {

  }
  {
#line 1081
  memcpy((void *)buf, (void const   *)(& rpc_in6addr_loopback), 28UL);
  }
  switch_default: /* CIL Label */ 
  {
#line 1084
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1084
  if (tmp != 0L) {
    {
#line 1084
    printk("\001dRPC:       %s: address family not supported\n", "rpc_anyaddr");
    }
  } else {

  }
#line 1086
  return (-97);
  switch_break: /* CIL Label */ ;
  }
  ldv_47465: 
  {
#line 1088
  tmp___0 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1088
  if (tmp___0 != 0L) {
    {
#line 1088
    printk("\001dRPC:       %s: succeeded\n", "rpc_anyaddr");
    }
  } else {

  }
#line 1089
  return (0);
}
}
#line 1108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
int rpc_localaddr(struct rpc_clnt *clnt , struct sockaddr *buf , size_t buflen ) 
{ 
  struct __kernel_sockaddr_storage address ;
  struct sockaddr *sap ;
  struct rpc_xprt *xprt ;
  struct net *net ;
  size_t salen ;
  int err ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1111
  sap = (struct sockaddr *)(& address);
#line 1117
  rcu_read_lock();
#line 1118
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1118
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1118
  if (tmp != 0 && ! __warned) {
    {
#line 1118
    tmp___0 = rcu_read_lock_held();
    }
#line 1118
    if (tmp___0 == 0) {
      {
#line 1118
      __warned = 1;
#line 1118
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1118, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1118
  xprt = _________p1;
#line 1119
  salen = xprt->addrlen;
#line 1120
  memcpy((void *)sap, (void const   *)(& xprt->addr), salen);
#line 1121
  net = get_net(xprt->xprt_net);
#line 1122
  rcu_read_unlock();
#line 1124
  rpc_set_port(sap, 0);
#line 1125
  err = rpc_sockname(net, sap, salen, buf, (int )buflen);
#line 1126
  put_net(net);
  }
#line 1127
  if (err != 0) {
    {
#line 1129
    tmp___1 = rpc_anyaddr((int )sap->sa_family, buf, buflen);
    }
#line 1129
    return (tmp___1);
  } else {

  }
#line 1130
  return (0);
}
}
#line 1135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_setbufsize(struct rpc_clnt *clnt , unsigned int sndsize , unsigned int rcvsize ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1139
  rcu_read_lock();
#line 1140
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1140
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1140
  if (tmp != 0 && ! __warned) {
    {
#line 1140
    tmp___0 = rcu_read_lock_held();
    }
#line 1140
    if (tmp___0 == 0) {
      {
#line 1140
      __warned = 1;
#line 1140
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1140, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
#line 1140
  xprt = _________p1;
#line 1141
  if ((unsigned long )(xprt->ops)->set_buffer_size != (unsigned long )((void (*)(struct rpc_xprt * ,
                                                                                 size_t  ,
                                                                                 size_t  ))0)) {
    {
#line 1142
    (*((xprt->ops)->set_buffer_size))(xprt, (size_t )sndsize, (size_t )rcvsize);
    }
  } else {

  }
  {
#line 1143
  rcu_read_unlock();
  }
#line 1144
  return;
}
}
#line 1152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
int rpc_protocol(struct rpc_clnt *clnt ) 
{ 
  int protocol ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1156
  rcu_read_lock();
#line 1157
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1157
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1157
  if (tmp != 0 && ! __warned) {
    {
#line 1157
    tmp___0 = rcu_read_lock_held();
    }
#line 1157
    if (tmp___0 == 0) {
      {
#line 1157
      __warned = 1;
#line 1157
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1157, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1157
  protocol = _________p1->prot;
#line 1158
  rcu_read_unlock();
  }
#line 1159
  return (protocol);
}
}
#line 1168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
struct net *rpc_net_ns(struct rpc_clnt *clnt ) 
{ 
  struct net *ret ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1172
  rcu_read_lock();
#line 1173
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1173
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1173
  if (tmp != 0 && ! __warned) {
    {
#line 1173
    tmp___0 = rcu_read_lock_held();
    }
#line 1173
    if (tmp___0 == 0) {
      {
#line 1173
      __warned = 1;
#line 1173
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1173, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1173
  ret = _________p1->xprt_net;
#line 1174
  rcu_read_unlock();
  }
#line 1175
  return (ret);
}
}
#line 1188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
size_t rpc_max_payload(struct rpc_clnt *clnt ) 
{ 
  size_t ret ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1192
  rcu_read_lock();
#line 1193
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1193
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1193
  if (tmp != 0 && ! __warned) {
    {
#line 1193
    tmp___0 = rcu_read_lock_held();
    }
#line 1193
    if (tmp___0 == 0) {
      {
#line 1193
      __warned = 1;
#line 1193
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1193, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1193
  ret = _________p1->max_payload;
#line 1194
  rcu_read_unlock();
  }
#line 1195
  return (ret);
}
}
#line 1203 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
unsigned long rpc_get_timeout(struct rpc_clnt *clnt ) 
{ 
  unsigned long ret ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1207
  rcu_read_lock();
#line 1208
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1208
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1208
  if (tmp != 0 && ! __warned) {
    {
#line 1208
    tmp___0 = rcu_read_lock_held();
    }
#line 1208
    if (tmp___0 == 0) {
      {
#line 1208
      __warned = 1;
#line 1208
      lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1208, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1208
  ret = (_________p1->timeout)->to_initval;
#line 1209
  rcu_read_unlock();
  }
#line 1210
  return (ret);
}
}
#line 1219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_force_rebind(struct rpc_clnt *clnt ) 
{ 
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 1221
  if ((unsigned int )*((unsigned char *)clnt + 176UL) != 0U) {
    {
#line 1222
    rcu_read_lock();
#line 1223
    _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1223
    tmp = debug_lockdep_rcu_enabled();
    }
#line 1223
    if (tmp != 0 && ! __warned) {
      {
#line 1223
      tmp___0 = rcu_read_lock_held();
      }
#line 1223
      if (tmp___0 == 0) {
        {
#line 1223
        __warned = 1;
#line 1223
        lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1223, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
    {
#line 1223
    xprt_clear_bound(_________p1);
#line 1224
    rcu_read_unlock();
    }
  } else {

  }
#line 1226
  return;
}
}
#line 1234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
int rpc_restart_call_prepare(struct rpc_task *task ) 
{ 


  {
#line 1236
  if (((int )task->tk_flags & 256) != 0) {
#line 1237
    return (0);
  } else {

  }
#line 1238
  task->tk_action = & call_start;
#line 1239
  if ((unsigned long )(task->tk_ops)->rpc_call_prepare != (unsigned long )((void (*/* const  */)(struct rpc_task * ,
                                                                                                 void * ))0)) {
#line 1240
    task->tk_action = & rpc_prepare_task;
  } else {

  }
#line 1241
  return (1);
}
}
#line 1250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
int rpc_restart_call(struct rpc_task *task ) 
{ 


  {
#line 1252
  if (((int )task->tk_flags & 256) != 0) {
#line 1253
    return (0);
  } else {

  }
#line 1254
  task->tk_action = & call_start;
#line 1255
  return (1);
}
}
#line 1260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static char const   *rpc_proc_name(struct rpc_task  const  *task ) 
{ 
  struct rpc_procinfo  const  *proc ;

  {
#line 1262
  proc = (struct rpc_procinfo  const  *)task->tk_msg.rpc_proc;
#line 1264
  if ((unsigned long )proc != (unsigned long )((struct rpc_procinfo  const  *)0)) {
#line 1265
    if ((unsigned long )proc->p_name != (unsigned long )((char const   */* const  */)0)) {
#line 1266
      return ((char const   *)proc->p_name);
    } else {
#line 1268
      return ("NULL");
    }
  } else {
#line 1270
    return ("no proc");
  }
}
}
#line 1281 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_start(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;
  char const   *tmp ;
  long tmp___0 ;

  {
  {
#line 1283
  clnt = task->tk_client;
#line 1285
  tmp___0 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1285
  if (tmp___0 != 0L) {
    {
#line 1285
    tmp = rpc_proc_name((struct rpc_task  const  *)task);
#line 1285
    printk("\001dRPC: %5u call_start %s%d proc %s (%s)\n", (int )task->tk_pid, clnt->cl_protname,
           clnt->cl_vers, tmp, (int )task->tk_flags & 1 ? (char *)"async" : (char *)"sync");
    }
  } else {

  }
#line 1291
  (task->tk_msg.rpc_proc)->p_count = (task->tk_msg.rpc_proc)->p_count + 1U;
#line 1292
  (clnt->cl_stats)->rpccnt = (clnt->cl_stats)->rpccnt + 1U;
#line 1293
  task->tk_action = & call_reserve;
#line 1294
  return;
}
}
#line 1300 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_reserve(struct rpc_task *task ) 
{ 
  long tmp ;

  {
  {
#line 1302
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1302
  if (tmp != 0L) {
    {
#line 1302
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_reserve", task->tk_status);
    }
  } else {

  }
  {
#line 1304
  task->tk_status = 0;
#line 1305
  task->tk_action = & call_reserveresult;
#line 1306
  xprt_reserve(task);
  }
#line 1307
  return;
}
}
#line 1309
static void call_retry_reserve(struct rpc_task *task ) ;
#line 1315 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_reserveresult(struct rpc_task *task ) 
{ 
  int status ;
  long tmp ;

  {
  {
#line 1317
  status = task->tk_status;
#line 1319
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1319
  if (tmp != 0L) {
    {
#line 1319
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_reserveresult",
           task->tk_status);
    }
  } else {

  }
#line 1325
  task->tk_status = 0;
#line 1326
  if (status >= 0) {
#line 1327
    if ((unsigned long )task->tk_rqstp != (unsigned long )((struct rpc_rqst *)0)) {
#line 1328
      task->tk_action = & call_refresh;
#line 1329
      return;
    } else {

    }
    {
#line 1332
    printk("\v%s: status=%d, but no request slot, exiting\n", "call_reserveresult",
           status);
#line 1334
    rpc_exit(task, -5);
    }
#line 1335
    return;
  } else {

  }
#line 1342
  if ((unsigned long )task->tk_rqstp != (unsigned long )((struct rpc_rqst *)0)) {
    {
#line 1343
    printk("\v%s: status=%d, request allocated anyway\n", "call_reserveresult", status);
#line 1345
    xprt_release(task);
    }
  } else {

  }
  {
#line 1349
  if (status == -12) {
#line 1349
    goto case_neg_12;
  } else {

  }
#line 1351
  if (status == -11) {
#line 1351
    goto case_neg_11;
  } else {

  }
#line 1354
  if (status == -5) {
#line 1354
    goto case_neg_5;
  } else {

  }
#line 1356
  goto switch_default;
  case_neg_12: /* CIL Label */ 
  {
#line 1350
  rpc_delay(task, 62UL);
  }
  case_neg_11: /* CIL Label */ 
#line 1352
  task->tk_action = & call_retry_reserve;
#line 1353
  return;
  case_neg_5: /* CIL Label */ ;
#line 1355
  goto ldv_47612;
  switch_default: /* CIL Label */ 
  {
#line 1357
  printk("\v%s: unrecognized error %d, exiting\n", "call_reserveresult", status);
  }
#line 1359
  goto ldv_47612;
  switch_break: /* CIL Label */ ;
  }
  ldv_47612: 
  {
#line 1361
  rpc_exit(task, status);
  }
#line 1362
  return;
}
}
#line 1368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_retry_reserve(struct rpc_task *task ) 
{ 
  long tmp ;

  {
  {
#line 1370
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1370
  if (tmp != 0L) {
    {
#line 1370
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_retry_reserve",
           task->tk_status);
    }
  } else {

  }
  {
#line 1372
  task->tk_status = 0;
#line 1373
  task->tk_action = & call_reserveresult;
#line 1374
  xprt_retry_reserve(task);
  }
#line 1375
  return;
}
}
#line 1381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_refresh(struct rpc_task *task ) 
{ 
  long tmp ;

  {
  {
#line 1383
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1383
  if (tmp != 0L) {
    {
#line 1383
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_refresh", task->tk_status);
    }
  } else {

  }
  {
#line 1385
  task->tk_action = & call_refreshresult;
#line 1386
  task->tk_status = 0;
#line 1387
  ((task->tk_client)->cl_stats)->rpcauthrefresh = ((task->tk_client)->cl_stats)->rpcauthrefresh + 1U;
#line 1388
  rpcauth_refreshcred(task);
  }
#line 1389
  return;
}
}
#line 1395 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_refreshresult(struct rpc_task *task ) 
{ 
  int status ;
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 1397
  status = task->tk_status;
#line 1399
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1399
  if (tmp != 0L) {
    {
#line 1399
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_refreshresult",
           task->tk_status);
    }
  } else {

  }
#line 1401
  task->tk_status = 0;
#line 1402
  task->tk_action = & call_refresh;
  {
#line 1404
  if (status == 0) {
#line 1404
    goto case_0;
  } else {

  }
#line 1412
  if (status == -110) {
#line 1412
    goto case_neg_110;
  } else {

  }
#line 1414
  if (status == -11) {
#line 1414
    goto case_neg_11;
  } else {

  }
#line 1416
  if (status == -127) {
#line 1416
    goto case_neg_127;
  } else {

  }
#line 1403
  goto switch_break;
  case_0: /* CIL Label */ 
  {
#line 1405
  tmp___0 = rpcauth_uptodatecred(task);
  }
#line 1405
  if (tmp___0 != 0) {
#line 1406
    task->tk_action = & call_allocate;
#line 1407
    return;
  } else {

  }
  case_neg_110: /* CIL Label */ 
  {
#line 1413
  rpc_delay(task, 750UL);
  }
  case_neg_11: /* CIL Label */ 
#line 1415
  status = -13;
  case_neg_127: /* CIL Label */ ;
#line 1417
  if ((unsigned int )*((unsigned char *)task + 238UL) == 0U) {
#line 1418
    goto ldv_47631;
  } else {

  }
  {
#line 1419
  task->tk_cred_retry = (unsigned char )((int )task->tk_cred_retry - 1);
#line 1420
  tmp___1 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1420
  if (tmp___1 != 0L) {
    {
#line 1420
    printk("\001dRPC: %5u %s: retry refresh creds\n", (int )task->tk_pid, "call_refreshresult");
    }
  } else {

  }
#line 1422
  return;
  switch_break: /* CIL Label */ ;
  }
  ldv_47631: 
  {
#line 1424
  tmp___2 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1424
  if (tmp___2 != 0L) {
    {
#line 1424
    printk("\001dRPC: %5u %s: refresh creds failed with error %d\n", (int )task->tk_pid,
           "call_refreshresult", status);
    }
  } else {

  }
  {
#line 1426
  rpc_exit(task, status);
  }
#line 1427
  return;
}
}
#line 1434 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_allocate(struct rpc_task *task ) 
{ 
  unsigned int slack ;
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  struct rpc_procinfo *proc ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;
  long tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
  {
#line 1436
  slack = (((task->tk_rqstp)->rq_cred)->cr_auth)->au_cslack;
#line 1437
  req = task->tk_rqstp;
#line 1438
  xprt = req->rq_xprt;
#line 1439
  proc = task->tk_msg.rpc_proc;
#line 1441
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1441
  if (tmp != 0L) {
    {
#line 1441
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_allocate",
           task->tk_status);
    }
  } else {

  }
#line 1443
  task->tk_status = 0;
#line 1444
  task->tk_action = & call_bind;
#line 1446
  if ((unsigned long )req->rq_buffer != (unsigned long )((__u32 *)0U)) {
#line 1447
    return;
  } else {

  }
#line 1449
  if (proc->p_proc != 0U) {
    {
#line 1450
    tmp___0 = __builtin_expect(proc->p_arglen == 0U, 0L);
    }
#line 1450
    if (tmp___0 != 0L) {
      {
#line 1450
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/clnt.c"),
                           "i" (1450), "i" (12UL));
#line 1450
      __builtin_unreachable();
      }
    } else {

    }
#line 1451
    if ((unsigned long )proc->p_decode != (unsigned long )((int (*)(void * , struct xdr_stream * ,
                                                                    void * ))0)) {
      {
#line 1452
      tmp___1 = __builtin_expect(proc->p_replen == 0U, 0L);
      }
#line 1452
      if (tmp___1 != 0L) {
        {
#line 1452
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/clnt.c"),
                             "i" (1452), "i" (12UL));
#line 1452
        __builtin_unreachable();
        }
      } else {

      }
    } else {

    }
  } else {

  }
  {
#line 1460
  req->rq_callsize = (size_t )(((slack << 1) + proc->p_arglen) + 6U);
#line 1461
  req->rq_callsize = req->rq_callsize << 2;
#line 1462
  req->rq_rcvsize = (size_t )((slack + proc->p_replen) + 4U);
#line 1463
  req->rq_rcvsize = req->rq_rcvsize << 2;
#line 1465
  tmp___2 = (*((xprt->ops)->buf_alloc))(task, req->rq_callsize + req->rq_rcvsize);
#line 1465
  req->rq_buffer = (__u32 *)tmp___2;
  }
#line 1467
  if ((unsigned long )req->rq_buffer != (unsigned long )((__u32 *)0U)) {
#line 1468
    return;
  } else {

  }
  {
#line 1470
  tmp___3 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1470
  if (tmp___3 != 0L) {
    {
#line 1470
    printk("\001dRPC: %5u rpc_buffer allocation failed\n", (int )task->tk_pid);
    }
  } else {

  }
#line 1472
  if ((int )task->tk_flags & 1) {
    {
#line 1473
    task->tk_action = & call_allocate;
#line 1474
    rpc_delay(task, 15UL);
    }
#line 1475
    return;
  } else {
    {
#line 1472
    tmp___4 = get_current();
#line 1472
    tmp___5 = fatal_signal_pending(tmp___4);
    }
#line 1472
    if (tmp___5 == 0) {
      {
#line 1473
      task->tk_action = & call_allocate;
#line 1474
      rpc_delay(task, 15UL);
      }
#line 1475
      return;
    } else {

    }
  }
  {
#line 1478
  rpc_exit(task, -512);
  }
#line 1479
  return;
}
}
#line 1482 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
__inline static int rpc_task_need_encode(struct rpc_task *task ) 
{ 


  {
#line 1484
  return ((task->tk_rqstp)->rq_snd_buf.len == 0U);
}
}
#line 1488 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
__inline static void rpc_task_force_reencode(struct rpc_task *task ) 
{ 


  {
#line 1490
  (task->tk_rqstp)->rq_snd_buf.len = 0U;
#line 1491
  (task->tk_rqstp)->rq_bytes_sent = 0U;
#line 1492
  return;
}
}
#line 1495 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
__inline static void rpc_xdr_buf_init(struct xdr_buf *buf , void *start , size_t len ) 
{ 


  {
#line 1497
  buf->head[0].iov_base = start;
#line 1498
  buf->head[0].iov_len = len;
#line 1499
  buf->tail[0].iov_len = 0UL;
#line 1500
  buf->page_len = 0U;
#line 1501
  buf->flags = 0U;
#line 1502
  buf->len = 0U;
#line 1503
  buf->buflen = (unsigned int )len;
#line 1504
  return;
}
}
#line 1510 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_xdr_encode(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  void (*encode)(void * , struct xdr_stream * , void * ) ;
  __be32 *p ;
  long tmp ;

  {
  {
#line 1512
  req = task->tk_rqstp;
#line 1516
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1516
  if (tmp != 0L) {
    {
#line 1516
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "rpc_xdr_encode",
           task->tk_status);
    }
  } else {

  }
  {
#line 1518
  rpc_xdr_buf_init(& req->rq_snd_buf, (void *)req->rq_buffer, req->rq_callsize);
#line 1521
  rpc_xdr_buf_init(& req->rq_rcv_buf, (void *)((char *)req->rq_buffer + req->rq_callsize),
                   req->rq_rcvsize);
#line 1525
  p = rpc_encode_header(task);
  }
#line 1526
  if ((unsigned long )p == (unsigned long )((__be32 *)0U)) {
    {
#line 1527
    printk("\016RPC: couldn\'t encode RPC header, exit EIO\n");
#line 1528
    rpc_exit(task, -5);
    }
#line 1529
    return;
  } else {

  }
#line 1532
  encode = (task->tk_msg.rpc_proc)->p_encode;
#line 1533
  if ((unsigned long )encode == (unsigned long )((void (*)(void * , struct xdr_stream * ,
                                                           void * ))0)) {
#line 1534
    return;
  } else {

  }
  {
#line 1536
  task->tk_status = rpcauth_wrap_req(task, encode, (void *)req, p, task->tk_msg.rpc_argp);
  }
#line 1538
  return;
}
}
#line 1544 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_bind(struct rpc_task *task ) 
{ 
  struct rpc_xprt *xprt ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 1546
  xprt = (task->tk_rqstp)->rq_xprt;
#line 1548
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1548
  if (tmp != 0L) {
    {
#line 1548
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_bind", task->tk_status);
    }
  } else {

  }
  {
#line 1550
  task->tk_action = & call_connect;
#line 1551
  tmp___0 = xprt_bound(xprt);
  }
#line 1551
  if (tmp___0 == 0) {
    {
#line 1552
    task->tk_action = & call_bind_status;
#line 1553
    task->tk_timeout = xprt->bind_timeout;
#line 1554
    (*((xprt->ops)->rpcbind))(task);
    }
  } else {

  }
#line 1556
  return;
}
}
#line 1562 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_bind_status(struct rpc_task *task ) 
{ 
  int status ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
#line 1564
  status = -5;
#line 1566
  if (task->tk_status >= 0) {
    {
#line 1567
    tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 1567
    if (tmp != 0L) {
      {
#line 1567
      printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_bind_status",
             task->tk_status);
      }
    } else {

    }
#line 1568
    task->tk_status = 0;
#line 1569
    task->tk_action = & call_connect;
#line 1570
    return;
  } else {

  }
  {
#line 1573
  trace_rpc_bind_status(task);
  }
  {
#line 1575
  if (task->tk_status == -12) {
#line 1575
    goto case_neg_12;
  } else {

  }
#line 1579
  if (task->tk_status == -13) {
#line 1579
    goto case_neg_13;
  } else {

  }
#line 1592
  if (task->tk_status == -110) {
#line 1592
    goto case_neg_110;
  } else {

  }
#line 1596
  if (task->tk_status == -96) {
#line 1596
    goto case_neg_96;
  } else {

  }
#line 1601
  if (task->tk_status == -93) {
#line 1601
    goto case_neg_93;
  } else {

  }
#line 1607
  if (task->tk_status == -111) {
#line 1607
    goto case_neg_111;
  } else {

  }
#line 1608
  if (task->tk_status == -104) {
#line 1608
    goto case_neg_104;
  } else {

  }
#line 1609
  if (task->tk_status == -107) {
#line 1609
    goto case_neg_107;
  } else {

  }
#line 1610
  if (task->tk_status == -112) {
#line 1610
    goto case_neg_112;
  } else {

  }
#line 1611
  if (task->tk_status == -113) {
#line 1611
    goto case_neg_113;
  } else {

  }
#line 1612
  if (task->tk_status == -101) {
#line 1612
    goto case_neg_101;
  } else {

  }
#line 1613
  if (task->tk_status == -32) {
#line 1613
    goto case_neg_32;
  } else {

  }
#line 1622
  goto switch_default;
  case_neg_12: /* CIL Label */ 
  {
#line 1576
  tmp___0 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1576
  if (tmp___0 != 0L) {
    {
#line 1576
    printk("\001dRPC: %5u rpcbind out of memory\n", (int )task->tk_pid);
    }
  } else {

  }
  {
#line 1577
  rpc_delay(task, 62UL);
  }
#line 1578
  goto retry_timeout;
  case_neg_13: /* CIL Label */ 
  {
#line 1580
  tmp___1 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1580
  if (tmp___1 != 0L) {
    {
#line 1580
    printk("\001dRPC: %5u remote rpcbind: RPC program/version unavailable\n", (int )task->tk_pid);
    }
  } else {

  }
#line 1583
  if ((task->tk_msg.rpc_proc)->p_proc == 0U) {
#line 1584
    status = -95;
#line 1585
    goto ldv_47671;
  } else {

  }
#line 1587
  if ((unsigned int )*((unsigned char *)task + 238UL) == 0U) {
#line 1588
    goto ldv_47671;
  } else {

  }
  {
#line 1589
  task->tk_rebind_retry = (unsigned char )((int )task->tk_rebind_retry - 1);
#line 1590
  rpc_delay(task, 750UL);
  }
#line 1591
  goto retry_timeout;
  case_neg_110: /* CIL Label */ 
  {
#line 1593
  tmp___2 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1593
  if (tmp___2 != 0L) {
    {
#line 1593
    printk("\001dRPC: %5u rpcbind request timed out\n", (int )task->tk_pid);
    }
  } else {

  }
#line 1595
  goto retry_timeout;
  case_neg_96: /* CIL Label */ 
  {
#line 1598
  tmp___3 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1598
  if (tmp___3 != 0L) {
    {
#line 1598
    printk("\001dRPC: %5u unrecognized remote rpcbind service\n", (int )task->tk_pid);
    }
  } else {

  }
#line 1600
  goto ldv_47671;
  case_neg_93: /* CIL Label */ 
  {
#line 1602
  tmp___4 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1602
  if (tmp___4 != 0L) {
    {
#line 1602
    printk("\001dRPC: %5u remote rpcbind version unavailable, retrying\n", (int )task->tk_pid);
    }
  } else {

  }
#line 1604
  task->tk_status = 0;
#line 1605
  task->tk_action = & call_bind;
#line 1606
  return;
  case_neg_111: /* CIL Label */ ;
  case_neg_104: /* CIL Label */ ;
  case_neg_107: /* CIL Label */ ;
  case_neg_112: /* CIL Label */ ;
  case_neg_113: /* CIL Label */ ;
  case_neg_101: /* CIL Label */ ;
  case_neg_32: /* CIL Label */ 
  {
#line 1614
  tmp___5 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1614
  if (tmp___5 != 0L) {
    {
#line 1614
    printk("\001dRPC: %5u remote rpcbind unreachable: %d\n", (int )task->tk_pid, task->tk_status);
    }
  } else {

  }
#line 1616
  if (((int )task->tk_flags & 1024) == 0) {
    {
#line 1617
    rpc_delay(task, 1250UL);
    }
#line 1618
    goto retry_timeout;
  } else {

  }
#line 1620
  status = task->tk_status;
#line 1621
  goto ldv_47671;
  switch_default: /* CIL Label */ 
  {
#line 1623
  tmp___6 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1623
  if (tmp___6 != 0L) {
    {
#line 1623
    printk("\001dRPC: %5u unrecognized rpcbind error (%d)\n", (int )task->tk_pid,
           - task->tk_status);
    }
  } else {

  }
  switch_break: /* CIL Label */ ;
  }
  ldv_47671: 
  {
#line 1627
  rpc_exit(task, status);
  }
#line 1628
  return;
  retry_timeout: 
#line 1631
  task->tk_action = & call_timeout;
#line 1632
  return;
}
}
#line 1638 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_connect(struct rpc_task *task ) 
{ 
  struct rpc_xprt *xprt ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1640
  xprt = (task->tk_rqstp)->rq_xprt;
#line 1642
  tmp___0 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1642
  if (tmp___0 != 0L) {
    {
#line 1642
    tmp = xprt_connected(xprt);
#line 1642
    printk("\001dRPC: %5u call_connect xprt %p %s connected\n", (int )task->tk_pid,
           xprt, tmp != 0 ? (char *)"is" : (char *)"is not");
    }
  } else {

  }
  {
#line 1646
  task->tk_action = & call_transmit;
#line 1647
  tmp___1 = xprt_connected(xprt);
  }
#line 1647
  if (tmp___1 == 0) {
#line 1648
    task->tk_action = & call_connect_status;
#line 1649
    if (task->tk_status < 0) {
#line 1650
      return;
    } else {

    }
#line 1651
    if (((int )task->tk_flags & 8192) != 0) {
      {
#line 1652
      rpc_exit(task, -107);
      }
#line 1653
      return;
    } else {

    }
    {
#line 1655
    xprt_connect(task);
    }
  } else {

  }
#line 1657
  return;
}
}
#line 1663 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_connect_status(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;
  int status ;
  long tmp ;

  {
  {
#line 1665
  clnt = task->tk_client;
#line 1666
  status = task->tk_status;
#line 1668
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1668
  if (tmp != 0L) {
    {
#line 1668
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_connect_status",
           task->tk_status);
    }
  } else {

  }
  {
#line 1670
  trace_rpc_connect_status(task, status);
  }
  {
#line 1673
  if (status == -110) {
#line 1673
    goto case_neg_110;
  } else {

  }
#line 1676
  if (status == -111) {
#line 1676
    goto case_neg_111;
  } else {

  }
#line 1677
  if (status == -104) {
#line 1677
    goto case_neg_104;
  } else {

  }
#line 1678
  if (status == -101) {
#line 1678
    goto case_neg_101;
  } else {

  }
#line 1682
  if (status == 0) {
#line 1682
    goto case_0;
  } else {

  }
#line 1683
  if (status == -11) {
#line 1683
    goto case_neg_11;
  } else {

  }
#line 1671
  goto switch_break;
  case_neg_110: /* CIL Label */ 
#line 1674
  task->tk_action = & call_timeout;
#line 1675
  return;
  case_neg_111: /* CIL Label */ ;
  case_neg_104: /* CIL Label */ ;
  case_neg_101: /* CIL Label */ ;
#line 1679
  if (((int )task->tk_flags & 1024) != 0) {
#line 1680
    goto ldv_47697;
  } else {

  }
  case_0: /* CIL Label */ ;
  case_neg_11: /* CIL Label */ 
#line 1684
  task->tk_status = 0;
#line 1685
  (clnt->cl_stats)->netreconn = (clnt->cl_stats)->netreconn + 1U;
#line 1686
  task->tk_action = & call_transmit;
#line 1687
  return;
  switch_break: /* CIL Label */ ;
  }
  ldv_47697: 
  {
#line 1689
  rpc_exit(task, status);
  }
#line 1690
  return;
}
}
#line 1696 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_transmit(struct rpc_task *task ) 
{ 
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1698
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1698
  if (tmp != 0L) {
    {
#line 1698
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_transmit",
           task->tk_status);
    }
  } else {

  }
#line 1700
  task->tk_action = & call_status;
#line 1701
  if (task->tk_status < 0) {
#line 1702
    return;
  } else {

  }
  {
#line 1703
  task->tk_status = xprt_prepare_transmit(task);
  }
#line 1704
  if (task->tk_status != 0) {
#line 1705
    return;
  } else {

  }
  {
#line 1706
  task->tk_action = & call_transmit_status;
#line 1708
  tmp___0 = rpc_task_need_encode(task);
  }
#line 1708
  if (tmp___0 != 0) {
    {
#line 1709
    rpc_xdr_encode(task);
    }
#line 1711
    if (task->tk_status != 0) {
#line 1713
      if (task->tk_status == -11) {
        {
#line 1714
        rpc_delay(task, 15UL);
        }
      } else {
        {
#line 1716
        rpc_exit(task, task->tk_status);
        }
      }
#line 1717
      return;
    } else {

    }
  } else {

  }
  {
#line 1720
  xprt_transmit(task);
  }
#line 1721
  if (task->tk_status < 0) {
#line 1722
    return;
  } else {

  }
  {
#line 1727
  call_transmit_status(task);
#line 1728
  tmp___1 = rpc_reply_expected(task);
  }
#line 1728
  if (tmp___1 != 0) {
#line 1729
    return;
  } else {

  }
  {
#line 1730
  task->tk_action = & rpc_exit_task;
#line 1731
  rpc_wake_up_queued_task(& ((task->tk_rqstp)->rq_xprt)->pending, task);
  }
#line 1732
  return;
}
}
#line 1738 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_transmit_status(struct rpc_task *task ) 
{ 
  long tmp ;

  {
#line 1740
  task->tk_action = & call_status;
#line 1746
  if (task->tk_status == 0) {
    {
#line 1747
    xprt_end_transmit(task);
#line 1748
    rpc_task_force_reencode(task);
    }
#line 1749
    return;
  } else {

  }
  {
#line 1753
  if (task->tk_status == -11) {
#line 1753
    goto case_neg_11;
  } else {

  }
#line 1766
  if (task->tk_status == -111) {
#line 1766
    goto case_neg_111;
  } else {

  }
#line 1767
  if (task->tk_status == -112) {
#line 1767
    goto case_neg_112;
  } else {

  }
#line 1768
  if (task->tk_status == -113) {
#line 1768
    goto case_neg_113;
  } else {

  }
#line 1769
  if (task->tk_status == -101) {
#line 1769
    goto case_neg_101;
  } else {

  }
#line 1775
  if (task->tk_status == -104) {
#line 1775
    goto case_neg_104;
  } else {

  }
#line 1776
  if (task->tk_status == -107) {
#line 1776
    goto case_neg_107;
  } else {

  }
#line 1777
  if (task->tk_status == -32) {
#line 1777
    goto case_neg_32;
  } else {

  }
#line 1755
  goto switch_default;
  case_neg_11: /* CIL Label */ ;
#line 1754
  goto ldv_47708;
  switch_default: /* CIL Label */ 
  {
#line 1756
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1756
  if (tmp != 0L) {
    {
#line 1756
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_transmit_status",
           task->tk_status);
    }
  } else {

  }
  {
#line 1757
  xprt_end_transmit(task);
#line 1758
  rpc_task_force_reencode(task);
  }
#line 1759
  goto ldv_47708;
  case_neg_111: /* CIL Label */ ;
  case_neg_112: /* CIL Label */ ;
  case_neg_113: /* CIL Label */ ;
  case_neg_101: /* CIL Label */ ;
#line 1770
  if (((int )task->tk_flags & 1024) != 0) {
    {
#line 1771
    xprt_end_transmit(task);
#line 1772
    rpc_exit(task, task->tk_status);
    }
#line 1773
    goto ldv_47708;
  } else {

  }
  case_neg_104: /* CIL Label */ ;
  case_neg_107: /* CIL Label */ ;
  case_neg_32: /* CIL Label */ 
  {
#line 1778
  rpc_task_force_reencode(task);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_47708: ;
#line 1781
  return;
}
}
#line 1788 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_bc_transmit(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  long tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 1790
  req = task->tk_rqstp;
#line 1792
  task->tk_status = xprt_prepare_transmit(task);
  }
#line 1793
  if (task->tk_status == -11) {
#line 1798
    task->tk_status = 0;
#line 1799
    task->tk_action = & call_bc_transmit;
#line 1800
    return;
  } else {

  }
#line 1803
  task->tk_action = & rpc_exit_task;
#line 1804
  if (task->tk_status < 0) {
    {
#line 1805
    printk("\rRPC: Could not send backchannel reply error: %d\n", task->tk_status);
    }
#line 1807
    return;
  } else {

  }
  {
#line 1810
  xprt_transmit(task);
#line 1811
  xprt_end_transmit(task);
#line 1812
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1812
  if (tmp != 0L) {
    {
#line 1812
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_bc_transmit",
           task->tk_status);
    }
  } else {

  }
  {
#line 1814
  if (task->tk_status == 0) {
#line 1814
    goto case_0;
  } else {

  }
#line 1817
  if (task->tk_status == -112) {
#line 1817
    goto case_neg_112;
  } else {

  }
#line 1818
  if (task->tk_status == -113) {
#line 1818
    goto case_neg_113;
  } else {

  }
#line 1819
  if (task->tk_status == -101) {
#line 1819
    goto case_neg_101;
  } else {

  }
#line 1820
  if (task->tk_status == -110) {
#line 1820
    goto case_neg_110;
  } else {

  }
#line 1833
  goto switch_default;
  case_0: /* CIL Label */ ;
#line 1816
  goto ldv_47724;
  case_neg_112: /* CIL Label */ ;
  case_neg_113: /* CIL Label */ ;
  case_neg_101: /* CIL Label */ ;
  case_neg_110: /* CIL Label */ 
  {
#line 1828
  printk("\rRPC: Could not send backchannel reply error: %d\n", task->tk_status);
#line 1830
  xprt_conditional_disconnect(req->rq_xprt, req->rq_connect_cookie);
  }
#line 1832
  goto ldv_47724;
  switch_default: /* CIL Label */ 
  {
#line 1838
  __ret_warn_once = task->tk_status == -11;
#line 1838
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 1838
  if (tmp___2 != 0L) {
    {
#line 1838
    __ret_warn_on = ! __warned;
#line 1838
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1838
    if (tmp___0 != 0L) {
      {
#line 1838
      warn_slowpath_null("net/sunrpc/clnt.c", 1838);
      }
    } else {

    }
    {
#line 1838
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1838
    if (tmp___1 != 0L) {
#line 1838
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 1838
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 1839
  printk("\rRPC: Could not send backchannel reply error: %d\n", task->tk_status);
  }
#line 1841
  goto ldv_47724;
  switch_break: /* CIL Label */ ;
  }
  ldv_47724: 
  {
#line 1843
  rpc_wake_up_queued_task(& (req->rq_xprt)->pending, task);
  }
#line 1844
  return;
}
}
#line 1851 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_status(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;
  struct rpc_rqst *req ;
  int status ;
  long tmp ;

  {
#line 1853
  clnt = task->tk_client;
#line 1854
  req = task->tk_rqstp;
#line 1857
  if (req->rq_reply_bytes_recvd != 0UL && req->rq_bytes_sent == 0U) {
#line 1858
    task->tk_status = (int )req->rq_reply_bytes_recvd;
  } else {

  }
  {
#line 1860
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1860
  if (tmp != 0L) {
    {
#line 1860
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_status", task->tk_status);
    }
  } else {

  }
#line 1862
  status = task->tk_status;
#line 1863
  if (status >= 0) {
#line 1864
    task->tk_action = & call_decode;
#line 1865
    return;
  } else {

  }
  {
#line 1868
  trace_rpc_call_status(task);
#line 1869
  task->tk_status = 0;
  }
  {
#line 1871
  if (status == -112) {
#line 1871
    goto case_neg_112;
  } else {

  }
#line 1872
  if (status == -113) {
#line 1872
    goto case_neg_113;
  } else {

  }
#line 1873
  if (status == -101) {
#line 1873
    goto case_neg_101;
  } else {

  }
#line 1879
  if (status == -110) {
#line 1879
    goto case_neg_110;
  } else {

  }
#line 1885
  if (status == -104) {
#line 1885
    goto case_neg_104;
  } else {

  }
#line 1886
  if (status == -111) {
#line 1886
    goto case_neg_111;
  } else {

  }
#line 1889
  if (status == -32) {
#line 1889
    goto case_neg_32;
  } else {

  }
#line 1890
  if (status == -107) {
#line 1890
    goto case_neg_107;
  } else {

  }
#line 1893
  if (status == -11) {
#line 1893
    goto case_neg_11;
  } else {

  }
#line 1896
  if (status == -5) {
#line 1896
    goto case_neg_5;
  } else {

  }
#line 1900
  goto switch_default;
  case_neg_112: /* CIL Label */ ;
  case_neg_113: /* CIL Label */ ;
  case_neg_101: /* CIL Label */ 
  {
#line 1878
  rpc_delay(task, 750UL);
  }
  case_neg_110: /* CIL Label */ 
#line 1880
  task->tk_action = & call_timeout;
#line 1881
  if ((unsigned int )*((unsigned char *)task->tk_client + 176UL) != 0U) {
    {
#line 1882
    xprt_conditional_disconnect(req->rq_xprt, req->rq_connect_cookie);
    }
  } else {

  }
#line 1884
  goto ldv_47746;
  case_neg_104: /* CIL Label */ ;
  case_neg_111: /* CIL Label */ 
  {
#line 1887
  rpc_force_rebind(clnt);
#line 1888
  rpc_delay(task, 750UL);
  }
  case_neg_32: /* CIL Label */ ;
  case_neg_107: /* CIL Label */ 
#line 1891
  task->tk_action = & call_bind;
#line 1892
  goto ldv_47746;
  case_neg_11: /* CIL Label */ 
#line 1894
  task->tk_action = & call_transmit;
#line 1895
  goto ldv_47746;
  case_neg_5: /* CIL Label */ 
  {
#line 1898
  rpc_exit(task, status);
  }
#line 1899
  goto ldv_47746;
  switch_default: /* CIL Label */ ;
#line 1901
  if ((unsigned int )*((unsigned char *)clnt + 176UL) != 0U) {
    {
#line 1902
    printk("%s: RPC call returned error %d\n", clnt->cl_protname, - status);
    }
  } else {

  }
  {
#line 1904
  rpc_exit(task, status);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_47746: ;
#line 1907
  return;
}
}
#line 1914 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_timeout(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp___2 ;
  int tmp___3 ;
  struct rpc_xprt *_________p1___0 ;
  bool __warned___0 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 1916
  clnt = task->tk_client;
#line 1918
  tmp___0 = xprt_adjust_timeout(task->tk_rqstp);
  }
#line 1918
  if (tmp___0 == 0) {
    {
#line 1919
    tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 1919
    if (tmp != 0L) {
      {
#line 1919
      printk("\001dRPC: %5u call_timeout (minor)\n", (int )task->tk_pid);
      }
    } else {

    }
#line 1920
    goto retry;
  } else {

  }
  {
#line 1923
  tmp___1 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1923
  if (tmp___1 != 0L) {
    {
#line 1923
    printk("\001dRPC: %5u call_timeout (major)\n", (int )task->tk_pid);
    }
  } else {

  }
#line 1924
  task->tk_timeouts = (unsigned short )((int )task->tk_timeouts + 1);
#line 1926
  if (((int )task->tk_flags & 1024) != 0) {
    {
#line 1927
    rpc_exit(task, -110);
    }
#line 1928
    return;
  } else {

  }
#line 1930
  if (((int )task->tk_flags & 4608) != 0) {
#line 1931
    if ((unsigned int )*((unsigned char *)clnt + 176UL) != 0U) {
      {
#line 1932
      rcu_read_lock();
#line 1935
      _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1935
      tmp___2 = debug_lockdep_rcu_enabled();
      }
#line 1935
      if (tmp___2 != 0 && ! __warned) {
        {
#line 1935
        tmp___3 = rcu_read_lock_held();
        }
#line 1935
        if (tmp___3 == 0) {
          {
#line 1935
          __warned = 1;
#line 1935
          lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1935, "suspicious rcu_dereference_check() usage");
          }
        } else {

        }
      } else {

      }
      {
#line 1935
      printk("\r%s: server %s not responding, timed out\n", clnt->cl_protname, _________p1->servername);
#line 1936
      rcu_read_unlock();
      }
    } else {

    }
#line 1938
    if (((int )task->tk_flags & 4096) != 0) {
      {
#line 1939
      rpc_exit(task, -110);
      }
    } else {
      {
#line 1941
      rpc_exit(task, -5);
      }
    }
#line 1942
    return;
  } else {

  }
#line 1945
  if (((int )task->tk_flags & 32) == 0) {
#line 1946
    task->tk_flags = (unsigned int )task->tk_flags | 32U;
#line 1947
    if ((unsigned int )*((unsigned char *)clnt + 176UL) != 0U) {
      {
#line 1948
      rcu_read_lock();
#line 1951
      _________p1___0 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1951
      tmp___4 = debug_lockdep_rcu_enabled();
      }
#line 1951
      if (tmp___4 != 0 && ! __warned___0) {
        {
#line 1951
        tmp___5 = rcu_read_lock_held();
        }
#line 1951
        if (tmp___5 == 0) {
          {
#line 1951
          __warned___0 = 1;
#line 1951
          lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1951, "suspicious rcu_dereference_check() usage");
          }
        } else {

        }
      } else {

      }
      {
#line 1951
      printk("\r%s: server %s not responding, still trying\n", clnt->cl_protname,
             _________p1___0->servername);
#line 1952
      rcu_read_unlock();
      }
    } else {

    }
  } else {

  }
  {
#line 1955
  rpc_force_rebind(clnt);
#line 1960
  rpcauth_invalcred(task);
  }
  retry: 
#line 1963
  (clnt->cl_stats)->rpcretrans = (clnt->cl_stats)->rpcretrans + 1U;
#line 1964
  task->tk_action = & call_bind;
#line 1965
  task->tk_status = 0;
#line 1966
  return;
}
}
#line 1972 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void call_decode(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;
  struct rpc_rqst *req ;
  int (*decode)(void * , struct xdr_stream * , void * ) ;
  __be32 *p ;
  long tmp ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  int __ret_warn_on ;
  int tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  void *tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;

  {
  {
#line 1974
  clnt = task->tk_client;
#line 1975
  req = task->tk_rqstp;
#line 1976
  decode = (task->tk_msg.rpc_proc)->p_decode;
#line 1979
  tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 1979
  if (tmp != 0L) {
    {
#line 1979
    printk("\001dRPC: %5u %s (status %d)\n", (int )task->tk_pid, "call_decode", task->tk_status);
    }
  } else {

  }
#line 1981
  if (((int )task->tk_flags & 32) != 0) {
#line 1982
    if ((unsigned int )*((unsigned char *)clnt + 176UL) != 0U) {
      {
#line 1983
      rcu_read_lock();
#line 1986
      _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 1986
      tmp___0 = debug_lockdep_rcu_enabled();
      }
#line 1986
      if (tmp___0 != 0 && ! __warned) {
        {
#line 1986
        tmp___1 = rcu_read_lock_held();
        }
#line 1986
        if (tmp___1 == 0) {
          {
#line 1986
          __warned = 1;
#line 1986
          lockdep_rcu_suspicious("net/sunrpc/clnt.c", 1986, "suspicious rcu_dereference_check() usage");
          }
        } else {

        }
      } else {

      }
      {
#line 1986
      printk("\r%s: server %s OK\n", clnt->cl_protname, _________p1->servername);
#line 1987
      rcu_read_unlock();
      }
    } else {

    }
#line 1989
    task->tk_flags = (unsigned int )task->tk_flags & 65503U;
  } else {

  }
  {
#line 1996
  __asm__  volatile   ("": : : "memory");
#line 1997
  req->rq_rcv_buf.len = req->rq_private_buf.len;
#line 2000
  tmp___2 = memcmp((void const   *)(& req->rq_rcv_buf), (void const   *)(& req->rq_private_buf),
                   64UL);
#line 2000
  __ret_warn_on = tmp___2 != 0;
#line 2000
  tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 2000
  if (tmp___3 != 0L) {
    {
#line 2000
    warn_slowpath_null("net/sunrpc/clnt.c", 2001);
    }
  } else {

  }
  {
#line 2000
  __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 2003
  if (req->rq_rcv_buf.len <= 11U) {
#line 2004
    if (((int )task->tk_flags & 4608) == 0) {
#line 2005
      task->tk_action = & call_bind;
#line 2006
      (clnt->cl_stats)->rpcretrans = (clnt->cl_stats)->rpcretrans + 1U;
#line 2007
      goto out_retry;
    } else {

    }
    {
#line 2009
    tmp___4 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2009
    if (tmp___4 != 0L) {
      {
#line 2009
      printk("\001dRPC:       %s: too small RPC reply size (%d bytes)\n", clnt->cl_protname,
             task->tk_status);
      }
    } else {

    }
#line 2011
    task->tk_action = & call_timeout;
#line 2012
    goto out_retry;
  } else {

  }
  {
#line 2015
  p = rpc_verify_header(task);
#line 2016
  tmp___6 = IS_ERR((void const   *)p);
  }
#line 2016
  if (tmp___6 != 0L) {
    {
#line 2017
    tmp___5 = ERR_PTR(-11L);
    }
#line 2017
    if ((unsigned long )((void *)p) == (unsigned long )tmp___5) {
#line 2018
      goto out_retry;
    } else {

    }
#line 2019
    return;
  } else {

  }
#line 2022
  task->tk_action = & rpc_exit_task;
#line 2024
  if ((unsigned long )decode != (unsigned long )((int (*)(void * , struct xdr_stream * ,
                                                          void * ))0)) {
    {
#line 2025
    task->tk_status = rpcauth_unwrap_resp(task, decode, (void *)req, p, task->tk_msg.rpc_resp);
    }
  } else {

  }
  {
#line 2028
  tmp___7 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 2028
  if (tmp___7 != 0L) {
    {
#line 2028
    printk("\001dRPC: %5u call_decode result %d\n", (int )task->tk_pid, task->tk_status);
    }
  } else {

  }
#line 2030
  return;
  out_retry: 
#line 2032
  task->tk_status = 0;
#line 2034
  if ((unsigned long )task->tk_rqstp == (unsigned long )req) {
#line 2035
    req->rq_rcv_buf.len = 0U;
#line 2035
    req->rq_reply_bytes_recvd = 0UL;
#line 2036
    if ((unsigned int )*((unsigned char *)task->tk_client + 176UL) != 0U) {
      {
#line 2037
      xprt_conditional_disconnect(req->rq_xprt, req->rq_connect_cookie);
      }
    } else {

    }
  } else {

  }
#line 2040
  return;
}
}
#line 2043 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static __be32 *rpc_encode_header(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;
  struct rpc_rqst *req ;
  __be32 *p ;
  __be32 *tmp ;
  __be32 *tmp___0 ;
  __be32 *tmp___1 ;
  __be32 *tmp___2 ;
  __u32 tmp___3 ;
  __be32 *tmp___4 ;
  __u32 tmp___5 ;
  __be32 *tmp___6 ;
  __u32 tmp___7 ;
  int tmp___8 ;

  {
  {
#line 2045
  clnt = task->tk_client;
#line 2046
  req = task->tk_rqstp;
#line 2047
  p = (__be32 *)req->rq_snd_buf.head[0].iov_base;
#line 2051
  p = xprt_skip_transport_header(req->rq_xprt, p);
#line 2052
  tmp = p;
#line 2052
  p = p + 1;
#line 2052
  *tmp = req->rq_xid;
#line 2053
  tmp___0 = p;
#line 2053
  p = p + 1;
#line 2053
  *tmp___0 = 0U;
#line 2054
  tmp___1 = p;
#line 2054
  p = p + 1;
#line 2054
  *tmp___1 = 33554432U;
#line 2055
  tmp___2 = p;
#line 2055
  p = p + 1;
#line 2055
  tmp___3 = __fswab32(clnt->cl_prog);
#line 2055
  *tmp___2 = tmp___3;
#line 2056
  tmp___4 = p;
#line 2056
  p = p + 1;
#line 2056
  tmp___5 = __fswab32(clnt->cl_vers);
#line 2056
  *tmp___4 = tmp___5;
#line 2057
  tmp___6 = p;
#line 2057
  p = p + 1;
#line 2057
  tmp___7 = __fswab32((task->tk_msg.rpc_proc)->p_proc);
#line 2057
  *tmp___6 = tmp___7;
#line 2058
  p = rpcauth_marshcred(task, p);
#line 2059
  tmp___8 = xdr_adjust_iovec((struct kvec *)(& req->rq_snd_buf.head), p);
#line 2059
  req->rq_snd_buf.len = (unsigned int )tmp___8;
  }
#line 2060
  return (p);
}
}
#line 2064 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static __be32 *rpc_verify_header(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;
  struct kvec *iov ;
  int len ;
  __be32 *p ;
  u32 n ;
  int error ;
  long tmp ;
  long tmp___0 ;
  __be32 *tmp___1 ;
  __u32 tmp___2 ;
  __be32 *tmp___3 ;
  __u32 tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  __be32 *tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;
  long tmp___10 ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  long tmp___14 ;
  __be32 *tmp___15 ;
  __u32 tmp___16 ;
  long tmp___17 ;
  __be32 *tmp___18 ;
  __u32 tmp___19 ;
  struct rpc_xprt *_________p1___0 ;
  bool __warned___0 ;
  int tmp___20 ;
  int tmp___21 ;
  long tmp___22 ;
  struct rpc_xprt *_________p1___1 ;
  bool __warned___1 ;
  int tmp___23 ;
  int tmp___24 ;
  long tmp___25 ;
  struct rpc_xprt *_________p1___2 ;
  bool __warned___2 ;
  int tmp___26 ;
  int tmp___27 ;
  char const   *tmp___28 ;
  long tmp___29 ;
  long tmp___30 ;
  long tmp___31 ;
  long tmp___32 ;
  void *tmp___33 ;
  long tmp___34 ;
  void *tmp___35 ;
  long tmp___36 ;

  {
#line 2066
  clnt = task->tk_client;
#line 2067
  iov = (struct kvec *)(& (task->tk_rqstp)->rq_rcv_buf.head);
#line 2068
  len = (int )((task->tk_rqstp)->rq_rcv_buf.len >> 2);
#line 2069
  p = (__be32 *)iov->iov_base;
#line 2071
  error = -13;
#line 2073
  if (((task->tk_rqstp)->rq_rcv_buf.len & 3U) != 0U) {
    {
#line 2079
    tmp = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2079
    if (tmp != 0L) {
      {
#line 2079
      printk("\001dRPC: %5u %s: XDR representation not a multiple of 4 bytes: 0x%x\n",
             (int )task->tk_pid, "rpc_verify_header", (task->tk_rqstp)->rq_rcv_buf.len);
      }
    } else {

    }
#line 2082
    goto out_eio;
  } else {

  }
#line 2084
  len = len + -3;
#line 2084
  if (len < 0) {
#line 2085
    goto out_overflow;
  } else {

  }
  {
#line 2087
  p = p + 1UL;
#line 2088
  tmp___1 = p;
#line 2088
  p = p + 1;
#line 2088
  tmp___2 = __fswab32(*tmp___1);
#line 2088
  n = tmp___2;
  }
#line 2088
  if (n != 1U) {
    {
#line 2089
    tmp___0 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2089
    if (tmp___0 != 0L) {
      {
#line 2089
      printk("\001dRPC: %5u %s: not an RPC reply: %x\n", (int )task->tk_pid, "rpc_verify_header",
             n);
      }
    } else {

    }
#line 2091
    goto out_garbage;
  } else {

  }
  {
#line 2094
  tmp___15 = p;
#line 2094
  p = p + 1;
#line 2094
  tmp___16 = __fswab32(*tmp___15);
#line 2094
  n = tmp___16;
  }
#line 2094
  if (n != 0U) {
#line 2095
    len = len - 1;
#line 2095
    if (len < 0) {
#line 2096
      goto out_overflow;
    } else {

    }
    {
#line 2097
    tmp___3 = p;
#line 2097
    p = p + 1;
#line 2097
    tmp___4 = __fswab32(*tmp___3);
#line 2097
    n = tmp___4;
    }
    {
#line 2098
    if (n == 1U) {
#line 2098
      goto case_1;
    } else {

    }
#line 2100
    if (n == 0U) {
#line 2100
      goto case_0;
    } else {

    }
#line 2105
    goto switch_default;
    case_1: /* CIL Label */ ;
#line 2099
    goto ldv_47799;
    case_0: /* CIL Label */ 
    {
#line 2101
    tmp___5 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2101
    if (tmp___5 != 0L) {
      {
#line 2101
      printk("\001dRPC: %5u %s: RPC call version mismatch!\n", (int )task->tk_pid,
             "rpc_verify_header");
      }
    } else {

    }
#line 2103
    error = -93;
#line 2104
    goto out_err;
    switch_default: /* CIL Label */ 
    {
#line 2106
    tmp___6 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2106
    if (tmp___6 != 0L) {
      {
#line 2106
      printk("\001dRPC: %5u %s: RPC call rejected, unknown error: %x\n", (int )task->tk_pid,
             "rpc_verify_header", n);
      }
    } else {

    }
#line 2109
    goto out_eio;
    switch_break: /* CIL Label */ ;
    }
    ldv_47799: 
#line 2111
    len = len - 1;
#line 2111
    if (len < 0) {
#line 2112
      goto out_overflow;
    } else {

    }
    {
#line 2113
    tmp___7 = p;
#line 2113
    p = p + 1;
#line 2113
    tmp___8 = __fswab32(*tmp___7);
#line 2113
    n = tmp___8;
    }
    {
#line 2114
    if (n == 2U) {
#line 2114
      goto case_2;
    } else {

    }
#line 2115
    if (n == 4U) {
#line 2115
      goto case_4;
    } else {

    }
#line 2116
    if (n == 13U) {
#line 2116
      goto case_13;
    } else {

    }
#line 2117
    if (n == 14U) {
#line 2117
      goto case_14;
    } else {

    }
#line 2128
    if (n == 1U) {
#line 2128
      goto case_1___0;
    } else {

    }
#line 2129
    if (n == 3U) {
#line 2129
      goto case_3;
    } else {

    }
#line 2138
    if (n == 5U) {
#line 2138
      goto case_5;
    } else {

    }
#line 2145
    goto switch_default___0;
    case_2: /* CIL Label */ ;
    case_4: /* CIL Label */ ;
    case_13: /* CIL Label */ ;
    case_14: /* CIL Label */ ;
#line 2118
    if ((unsigned int )*((unsigned char *)task + 238UL) == 0U) {
#line 2119
      goto ldv_47807;
    } else {

    }
    {
#line 2120
    task->tk_cred_retry = (unsigned char )((int )task->tk_cred_retry - 1);
#line 2121
    tmp___9 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2121
    if (tmp___9 != 0L) {
      {
#line 2121
      printk("\001dRPC: %5u %s: retry stale creds\n", (int )task->tk_pid, "rpc_verify_header");
      }
    } else {

    }
    {
#line 2123
    rpcauth_invalcred(task);
#line 2125
    xprt_release(task);
#line 2126
    task->tk_action = & call_reserve;
    }
#line 2127
    goto out_retry;
    case_1___0: /* CIL Label */ ;
    case_3: /* CIL Label */ ;
#line 2131
    if ((unsigned int )*((unsigned char *)task + 238UL) == 0U) {
#line 2132
      goto ldv_47807;
    } else {

    }
    {
#line 2133
    task->tk_garb_retry = (unsigned char )((int )task->tk_garb_retry - 1);
#line 2134
    tmp___10 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2134
    if (tmp___10 != 0L) {
      {
#line 2134
      printk("\001dRPC: %5u %s: retry garbled creds\n", (int )task->tk_pid, "rpc_verify_header");
      }
    } else {

    }
#line 2136
    task->tk_action = & call_bind;
#line 2137
    goto out_retry;
    case_5: /* CIL Label */ 
    {
#line 2139
    rcu_read_lock();
#line 2142
    _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 2142
    tmp___11 = debug_lockdep_rcu_enabled();
    }
#line 2142
    if (tmp___11 != 0 && ! __warned) {
      {
#line 2142
      tmp___12 = rcu_read_lock_held();
      }
#line 2142
      if (tmp___12 == 0) {
        {
#line 2142
        __warned = 1;
#line 2142
        lockdep_rcu_suspicious("net/sunrpc/clnt.c", 2142, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
    {
#line 2142
    printk("\rRPC: server %s requires stronger authentication.\n", _________p1->servername);
#line 2143
    rcu_read_unlock();
    }
#line 2144
    goto ldv_47807;
    switch_default___0: /* CIL Label */ 
    {
#line 2146
    tmp___13 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2146
    if (tmp___13 != 0L) {
      {
#line 2146
      printk("\001dRPC: %5u %s: unknown auth error: %x\n", (int )task->tk_pid, "rpc_verify_header",
             n);
      }
    } else {

    }
#line 2148
    error = -5;
    switch_break___0: /* CIL Label */ ;
    }
    ldv_47807: 
    {
#line 2150
    tmp___14 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2150
    if (tmp___14 != 0L) {
      {
#line 2150
      printk("\001dRPC: %5u %s: call rejected %d\n", (int )task->tk_pid, "rpc_verify_header",
             n);
      }
    } else {

    }
#line 2152
    goto out_err;
  } else {

  }
  {
#line 2154
  p = rpcauth_checkverf(task, p);
  }
#line 2154
  if ((unsigned long )p == (unsigned long )((__be32 *)0U)) {
    {
#line 2155
    tmp___17 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2155
    if (tmp___17 != 0L) {
      {
#line 2155
      printk("\001dRPC: %5u %s: auth check failed\n", (int )task->tk_pid, "rpc_verify_header");
      }
    } else {

    }
#line 2157
    goto out_garbage;
  } else {

  }
#line 2159
  len = (int )((unsigned int )(((long )p - (long )iov->iov_base) / 4L) + 4294967295U);
#line 2160
  if (len < 0) {
#line 2161
    goto out_overflow;
  } else {

  }
  {
#line 2162
  tmp___18 = p;
#line 2162
  p = p + 1;
#line 2162
  tmp___19 = __fswab32(*tmp___18);
#line 2162
  n = tmp___19;
  }
  {
#line 2163
  if (n == 0U) {
#line 2163
    goto case_0___0;
  } else {

  }
#line 2165
  if (n == 1U) {
#line 2165
    goto case_1___1;
  } else {

  }
#line 2172
  if (n == 2U) {
#line 2172
    goto case_2___0;
  } else {

  }
#line 2180
  if (n == 3U) {
#line 2180
    goto case_3___0;
  } else {

  }
#line 2189
  if (n == 4U) {
#line 2189
    goto case_4___0;
  } else {

  }
#line 2193
  goto switch_default___1;
  case_0___0: /* CIL Label */ ;
#line 2164
  return (p);
  case_1___1: /* CIL Label */ 
  {
#line 2166
  tmp___22 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 2166
  if (tmp___22 != 0L) {
    {
#line 2166
    rcu_read_lock();
#line 2166
    _________p1___0 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 2166
    tmp___20 = debug_lockdep_rcu_enabled();
    }
#line 2166
    if (tmp___20 != 0 && ! __warned___0) {
      {
#line 2166
      tmp___21 = rcu_read_lock_held();
      }
#line 2166
      if (tmp___21 == 0) {
        {
#line 2166
        __warned___0 = 1;
#line 2166
        lockdep_rcu_suspicious("net/sunrpc/clnt.c", 2169, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
    {
#line 2166
    printk("\001dRPC: %5u %s: program %u is unsupported by server %s\n", (int )task->tk_pid,
           "rpc_verify_header", clnt->cl_prog, _________p1___0->servername);
#line 2166
    rcu_read_unlock();
    }
  } else {

  }
#line 2170
  error = -96;
#line 2171
  goto out_err;
  case_2___0: /* CIL Label */ 
  {
#line 2173
  tmp___25 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 2173
  if (tmp___25 != 0L) {
    {
#line 2173
    rcu_read_lock();
#line 2173
    _________p1___1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 2173
    tmp___23 = debug_lockdep_rcu_enabled();
    }
#line 2173
    if (tmp___23 != 0 && ! __warned___1) {
      {
#line 2173
      tmp___24 = rcu_read_lock_held();
      }
#line 2173
      if (tmp___24 == 0) {
        {
#line 2173
        __warned___1 = 1;
#line 2173
        lockdep_rcu_suspicious("net/sunrpc/clnt.c", 2177, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
    {
#line 2173
    printk("\001dRPC: %5u %s: program %u, version %u unsupported by server %s\n",
           (int )task->tk_pid, "rpc_verify_header", clnt->cl_prog, clnt->cl_vers,
           _________p1___1->servername);
#line 2173
    rcu_read_unlock();
    }
  } else {

  }
#line 2178
  error = -93;
#line 2179
  goto out_err;
  case_3___0: /* CIL Label */ 
  {
#line 2181
  tmp___29 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 2181
  if (tmp___29 != 0L) {
    {
#line 2181
    rcu_read_lock();
#line 2181
    _________p1___2 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 2181
    tmp___26 = debug_lockdep_rcu_enabled();
    }
#line 2181
    if (tmp___26 != 0 && ! __warned___2) {
      {
#line 2181
      tmp___27 = rcu_read_lock_held();
      }
#line 2181
      if (tmp___27 == 0) {
        {
#line 2181
        __warned___2 = 1;
#line 2181
        lockdep_rcu_suspicious("net/sunrpc/clnt.c", 2186, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
    {
#line 2181
    tmp___28 = rpc_proc_name((struct rpc_task  const  *)task);
#line 2181
    printk("\001dRPC: %5u %s: proc %s unsupported by program %u, version %u on server %s\n",
           (int )task->tk_pid, "rpc_verify_header", tmp___28, clnt->cl_prog, clnt->cl_vers,
           _________p1___2->servername);
#line 2181
    rcu_read_unlock();
    }
  } else {

  }
#line 2187
  error = -95;
#line 2188
  goto out_err;
  case_4___0: /* CIL Label */ 
  {
#line 2190
  tmp___30 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 2190
  if (tmp___30 != 0L) {
    {
#line 2190
    printk("\001dRPC: %5u %s: server saw garbage\n", (int )task->tk_pid, "rpc_verify_header");
    }
  } else {

  }
#line 2192
  goto ldv_47830;
  switch_default___1: /* CIL Label */ 
  {
#line 2194
  tmp___31 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 2194
  if (tmp___31 != 0L) {
    {
#line 2194
    printk("\001dRPC: %5u %s: server accept status: %x\n", (int )task->tk_pid, "rpc_verify_header",
           n);
    }
  } else {

  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_47830: ;
  out_garbage: 
#line 2200
  (clnt->cl_stats)->rpcgarbage = (clnt->cl_stats)->rpcgarbage + 1U;
#line 2201
  if ((unsigned int )*((unsigned char *)task + 238UL) != 0U) {
    {
#line 2202
    task->tk_garb_retry = (unsigned char )((int )task->tk_garb_retry - 1);
#line 2203
    tmp___32 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
    }
#line 2203
    if (tmp___32 != 0L) {
      {
#line 2203
      printk("\001dRPC: %5u %s: retrying\n", (int )task->tk_pid, "rpc_verify_header");
      }
    } else {

    }
#line 2205
    task->tk_action = & call_bind;
    out_retry: 
    {
#line 2207
    tmp___33 = ERR_PTR(-11L);
    }
#line 2207
    return ((__be32 *)tmp___33);
  } else {

  }
  out_eio: 
#line 2210
  error = -5;
  out_err: 
  {
#line 2212
  rpc_exit(task, error);
#line 2213
  tmp___34 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 2213
  if (tmp___34 != 0L) {
    {
#line 2213
    printk("\001dRPC: %5u %s: call failed with error %d\n", (int )task->tk_pid, "rpc_verify_header",
           error);
    }
  } else {

  }
  {
#line 2215
  tmp___35 = ERR_PTR((long )error);
  }
#line 2215
  return ((__be32 *)tmp___35);
  out_overflow: 
  {
#line 2217
  tmp___36 = __builtin_expect((rpc_debug & 2U) != 0U, 0L);
  }
#line 2217
  if (tmp___36 != 0L) {
    {
#line 2217
    printk("\001dRPC: %5u %s: server reply was truncated.\n", (int )task->tk_pid,
           "rpc_verify_header");
    }
  } else {

  }
#line 2219
  goto out_garbage;
}
}
#line 2222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpcproc_encode_null(void *rqstp , struct xdr_stream *xdr , void *obj ) 
{ 


  {
#line 2224
  return;
}
}
#line 2226 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static int rpcproc_decode_null(void *rqstp , struct xdr_stream *xdr , void *obj ) 
{ 


  {
#line 2228
  return (0);
}
}
#line 2231 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static struct rpc_procinfo rpcproc_null  = 
#line 2231
     {0U, & rpcproc_encode_null, & rpcproc_decode_null, 0U, 0U, 0U, 0U, 0U, 0};
#line 2236 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static int rpc_ping(struct rpc_clnt *clnt ) 
{ 
  struct rpc_message msg ;
  int err ;

  {
  {
#line 2238
  msg.rpc_proc = & rpcproc_null;
#line 2238
  msg.rpc_argp = 0;
#line 2238
  msg.rpc_resp = 0;
#line 2238
  msg.rpc_cred = 0;
#line 2242
  msg.rpc_cred = (*(authnull_ops.lookup_cred))((struct rpc_auth *)0, (struct auth_cred *)0,
                                               0);
#line 2243
  err = rpc_call_sync(clnt, (struct rpc_message  const  *)(& msg), 1536);
#line 2244
  put_rpccred(msg.rpc_cred);
  }
#line 2245
  return (err);
}
}
#line 2248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
struct rpc_task *rpc_call_null(struct rpc_clnt *clnt , struct rpc_cred *cred , int flags ) 
{ 
  struct rpc_message msg ;
  struct rpc_task_setup task_setup_data ;
  struct rpc_task *tmp ;

  {
  {
#line 2250
  msg.rpc_proc = & rpcproc_null;
#line 2250
  msg.rpc_argp = 0;
#line 2250
  msg.rpc_resp = 0;
#line 2250
  msg.rpc_cred = cred;
#line 2254
  task_setup_data.task = 0;
#line 2254
  task_setup_data.rpc_client = clnt;
#line 2254
  task_setup_data.rpc_message = (struct rpc_message  const  *)(& msg);
#line 2254
  task_setup_data.callback_ops = & rpc_default_ops;
#line 2254
  task_setup_data.callback_data = 0;
#line 2254
  task_setup_data.workqueue = 0;
#line 2254
  task_setup_data.flags = (unsigned short )flags;
#line 2254
  task_setup_data.priority = (signed char)0;
#line 2260
  tmp = rpc_run_task((struct rpc_task_setup  const  *)(& task_setup_data));
  }
#line 2260
  return (tmp);
}
}
#line 2265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_show_header(void) 
{ 


  {
  {
#line 2267
  printk("\016-pid- flgs status -client- --rqstp- -timeout ---ops--\n");
  }
#line 2268
  return;
}
}
#line 2271 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
static void rpc_show_task(struct rpc_clnt  const  *clnt , struct rpc_task  const  *task ) 
{ 
  char const   *rpc_waitq ;
  int tmp ;
  char const   *tmp___0 ;

  {
  {
#line 2274
  rpc_waitq = "none";
#line 2276
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 2276
  if (tmp != 0) {
    {
#line 2277
    rpc_waitq = rpc_qname((struct rpc_wait_queue  const  *)task->tk_waitqueue);
    }
  } else {

  }
  {
#line 2279
  tmp___0 = rpc_proc_name(task);
#line 2279
  printk("\016%5u %04x %6d %8p %8p %8ld %8p %sv%u %s a:%ps q:%s\n", (int )task->tk_pid,
         (int )task->tk_flags, task->tk_status, clnt, task->tk_rqstp, task->tk_timeout,
         task->tk_ops, clnt->cl_protname, clnt->cl_vers, tmp___0, task->tk_action,
         rpc_waitq);
  }
#line 2284
  return;
}
}
#line 2286 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/clnt.c"
void rpc_show_tasks(struct net *net ) 
{ 
  struct rpc_clnt *clnt ;
  struct rpc_task *task ;
  int header ;
  struct sunrpc_net *sn ;
  void *tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;

  {
  {
#line 2290
  header = 0;
#line 2291
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 2291
  sn = (struct sunrpc_net *)tmp;
#line 2293
  spin_lock(& sn->rpc_client_lock);
#line 2294
  __mptr = (struct list_head  const  *)sn->all_clients.next;
#line 2294
  clnt = (struct rpc_clnt *)((char *)__mptr + 0xfffffffffffffff8UL);
  }
#line 2294
  goto ldv_47890;
  ldv_47889: 
  {
#line 2295
  spin_lock(& clnt->cl_lock);
#line 2296
  __mptr___0 = (struct list_head  const  *)clnt->cl_tasks.next;
#line 2296
  task = (struct rpc_task *)((char *)__mptr___0 + 0xfffffffffffffff8UL);
  }
#line 2296
  goto ldv_47887;
  ldv_47886: ;
#line 2297
  if (header == 0) {
    {
#line 2298
    rpc_show_header();
#line 2299
    header = header + 1;
    }
  } else {

  }
  {
#line 2301
  rpc_show_task((struct rpc_clnt  const  *)clnt, (struct rpc_task  const  *)task);
#line 2296
  __mptr___1 = (struct list_head  const  *)task->tk_task.next;
#line 2296
  task = (struct rpc_task *)((char *)__mptr___1 + 0xfffffffffffffff8UL);
  }
  ldv_47887: ;
#line 2296
  if ((unsigned long )(& task->tk_task) != (unsigned long )(& clnt->cl_tasks)) {
#line 2298
    goto ldv_47886;
  } else {

  }
  {
#line 2303
  spin_unlock(& clnt->cl_lock);
#line 2294
  __mptr___2 = (struct list_head  const  *)clnt->cl_clients.next;
#line 2294
  clnt = (struct rpc_clnt *)((char *)__mptr___2 + 0xfffffffffffffff8UL);
  }
  ldv_47890: ;
#line 2294
  if ((unsigned long )(& clnt->cl_clients) != (unsigned long )(& sn->all_clients)) {
#line 2296
    goto ldv_47889;
  } else {

  }
  {
#line 2305
  spin_unlock(& sn->rpc_client_lock);
  }
#line 2306
  return;
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_clnt.c.aux"
__inline static void *ERR_PTR(long error ) 
{ 
  void *tmp ;

  {
  {
#line 90
  tmp = ldv_err_ptr(error);
  }
#line 90
  return (tmp);
}
}
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_clnt.c.aux"
__inline static long PTR_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 97
  tmp = ldv_ptr_err(ptr);
  }
#line 97
  return (tmp);
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_clnt.c.aux"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 104
  tmp = ldv_is_err(ptr);
  }
#line 104
  return (tmp);
}
}
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_clnt.c.aux"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 147
  tmp = ldv_kzalloc(size, flags);
  }
#line 147
  return (tmp);
}
}
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
extern void __list_del_entry(struct list_head * ) ;
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
  }
#line 146
  return;
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 70
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 72
  return;
}
}
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 201
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 204
  return (oldbit);
}
}
#line 248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 252
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 256
  return (oldbit);
}
}
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_bh(raw_spinlock_t * ) ;
#line 40
extern void _raw_spin_unlock_bh(raw_spinlock_t * ) ;
#line 296 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
__inline static void spin_lock_bh(spinlock_t *lock ) 
{ 


  {
  {
#line 298
  _raw_spin_lock_bh(& lock->__annonCompField20.rlock);
  }
#line 299
  return;
}
}
#line 336 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
__inline static void spin_unlock_bh(spinlock_t *lock ) 
{ 


  {
  {
#line 338
  _raw_spin_unlock_bh(& lock->__annonCompField20.rlock);
  }
#line 339
  return;
}
}
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/time.h"
extern struct timeval ns_to_timeval(s64 const    ) ;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 294
extern unsigned long usecs_to_jiffies(unsigned int const    ) ;
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ktime.h"
__inline static s64 ktime_to_us(ktime_t const   kt ) 
{ 
  struct timeval tv ;
  struct timeval tmp ;

  {
  {
#line 306
  tmp = ns_to_timeval(kt.tv64);
#line 306
  tv = tmp;
  }
#line 307
  return ((long long )tv.tv_sec * 1000000LL + (long long )tv.tv_usec);
}
}
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
extern void init_timer_key(struct timer_list * , unsigned int  , char const   * ,
                           struct lock_class_key * ) ;
#line 183
static int ldv_mod_timer_11(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) ;
#line 248
static int ldv_del_timer_sync_10(struct timer_list *ldv_func_arg1 ) ;
#line 252
static int ldv_del_timer_sync_12(struct timer_list *ldv_func_arg1 ) ;
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
extern void __init_work(struct work_struct * , int  ) ;
#line 426
extern bool queue_work_on(int  , struct workqueue_struct * , struct work_struct * ) ;
#line 442
extern bool cancel_work_sync(struct work_struct * ) ;
#line 466 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
__inline static bool queue_work(struct workqueue_struct *wq , struct work_struct *work ) 
{ 
  bool tmp ;

  {
  {
#line 469
  tmp = queue_work_on(4096, wq, work);
  }
#line 469
  return (tmp);
}
}
#line 327 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/hrtimer.h"
extern ktime_t ktime_get(void) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/random.h"
extern u32 prandom_u32(void) ;
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kmod.h"
extern int __request_module(bool  , char const   *  , ...) ;
#line 225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
void rpc_init_priority_wait_queue(struct rpc_wait_queue *queue , char const   *qname ) ;
#line 226
void rpc_init_wait_queue(struct rpc_wait_queue *queue , char const   *qname ) ;
#line 227
void rpc_destroy_wait_queue(struct rpc_wait_queue *queue ) ;
#line 228
void rpc_sleep_on(struct rpc_wait_queue *q , struct rpc_task *task , void (*action)(struct rpc_task * ) ) ;
#line 230
void rpc_sleep_on_priority(struct rpc_wait_queue *q , struct rpc_task *task , void (*action)(struct rpc_task * ) ,
                           int priority ) ;
#line 236
void rpc_wake_up(struct rpc_wait_queue *queue ) ;
#line 237
struct rpc_task *rpc_wake_up_next(struct rpc_wait_queue *queue ) ;
#line 238
struct rpc_task *rpc_wake_up_first(struct rpc_wait_queue *queue , bool (*func)(struct rpc_task * ,
                                                                               void * ) ,
                                   void *data ) ;
#line 241
void rpc_wake_up_status(struct rpc_wait_queue *queue , int status ) ;
#line 255
struct workqueue_struct *rpciod_workqueue ;
#line 247 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static int bc_prealloc(struct rpc_rqst *req ) 
{ 
  int tmp ;

  {
  {
#line 249
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& req->rq_bc_pa_state));
  }
#line 249
  return (tmp);
}
}
#line 287
int xprt_reserve_xprt(struct rpc_xprt *xprt , struct rpc_task *task ) ;
#line 288
int xprt_reserve_xprt_cong(struct rpc_xprt *xprt , struct rpc_task *task ) ;
#line 289
void xprt_alloc_slot(struct rpc_xprt *xprt , struct rpc_task *task ) ;
#line 290
void xprt_lock_and_alloc_slot(struct rpc_xprt *xprt , struct rpc_task *task ) ;
#line 295
void xprt_release_xprt(struct rpc_xprt *xprt , struct rpc_task *task ) ;
#line 296
void xprt_release_xprt_cong(struct rpc_xprt *xprt , struct rpc_task *task ) ;
#line 300
struct rpc_xprt *xprt_alloc(struct net *net , size_t size , unsigned int num_prealloc ,
                            unsigned int max_alloc ) ;
#line 303
void xprt_free(struct rpc_xprt *xprt ) ;
#line 313
int xprt_register_transport(struct xprt_class *transport ) ;
#line 314
int xprt_unregister_transport(struct xprt_class *transport ) ;
#line 315
int xprt_load_transport(char const   *transport_name ) ;
#line 316
void xprt_set_retrans_timeout_def(struct rpc_task *task ) ;
#line 317
void xprt_set_retrans_timeout_rtt(struct rpc_task *task ) ;
#line 318
void xprt_wake_pending_tasks(struct rpc_xprt *xprt , int status ) ;
#line 319
void xprt_wait_for_buffer_space(struct rpc_task *task , void (*action)(struct rpc_task * ) ) ;
#line 320
void xprt_write_space(struct rpc_xprt *xprt ) ;
#line 321
void xprt_adjust_cwnd(struct rpc_xprt *xprt , struct rpc_task *task , int result ) ;
#line 322
struct rpc_rqst *xprt_lookup_rqst(struct rpc_xprt *xprt , __be32 xid ) ;
#line 323
void xprt_complete_rqst(struct rpc_task *task , int copied ) ;
#line 324
void xprt_release_rqst_cong(struct rpc_task *task ) ;
#line 325
void xprt_disconnect_done(struct rpc_xprt *xprt ) ;
#line 326
void xprt_force_disconnect(struct rpc_xprt *xprt ) ;
#line 349 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static void xprt_clear_connected(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 351
  clear_bit(1, (unsigned long volatile   *)(& xprt->state));
  }
#line 352
  return;
}
}
#line 381 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static int xprt_test_and_set_connecting(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 383
  tmp = test_and_set_bit(2, (unsigned long volatile   *)(& xprt->state));
  }
#line 383
  return (tmp);
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/timer.h"
void rpc_update_rtt(struct rpc_rtt *rt , unsigned int timer , long m ) ;
#line 24
unsigned long rpc_calc_rto(struct rpc_rtt *rt , unsigned int timer ) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/timer.h"
__inline static void rpc_set_timeo(struct rpc_rtt *rt , int timer , int ntimeo ) 
{ 
  int *t ;

  {
#line 29
  if (timer == 0) {
#line 30
    return;
  } else {

  }
#line 31
  t = (int *)(& rt->ntimeouts) + ((unsigned long )timer + 0xffffffffffffffffUL);
#line 32
  if (ntimeo < *t) {
#line 33
    if (*t > 0) {
#line 34
      *t = *t - 1;
    } else {

    }
  } else {
#line 36
    if (ntimeo > 8) {
#line 37
      ntimeo = 8;
    } else {

    }
#line 38
    *t = ntimeo;
  }
#line 40
  return;
}
}
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/timer.h"
__inline static int rpc_ntimeo(struct rpc_rtt *rt , int timer ) 
{ 


  {
#line 44
  if (timer == 0) {
#line 45
    return (0);
  } else {

  }
#line 46
  return (rt->ntimeouts[timer + -1]);
}
}
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/metrics.h"
void rpc_count_iostats(struct rpc_task  const  *task , struct rpc_iostats *stats ) ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_init(struct rpc_xprt *xprt , struct net *net ) ;
#line 66
static void xprt_request_init(struct rpc_task *task , struct rpc_xprt *xprt ) ;
#line 67
static void xprt_connect_status(struct rpc_task *task ) ;
#line 68
static int __xprt_get_cong(struct rpc_xprt *xprt , struct rpc_task *task ) ;
#line 69
static void xprt_destroy(struct rpc_xprt *xprt ) ;
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static spinlock_t xprt_list_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "xprt_list_lock",
                                                     0, 0UL}}}};
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static struct list_head xprt_list  =    {& xprt_list, & xprt_list};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
int xprt_register_transport(struct xprt_class *transport ) 
{ 
  struct xprt_class *t ;
  int result ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 109
  result = -17;
#line 110
  spin_lock(& xprt_list_lock);
#line 111
  __mptr = (struct list_head  const  *)xprt_list.next;
#line 111
  t = (struct xprt_class *)__mptr;
  }
#line 111
  goto ldv_46658;
  ldv_46657: ;
#line 113
  if (t->ident == transport->ident) {
#line 114
    goto out;
  } else {

  }
#line 111
  __mptr___0 = (struct list_head  const  *)t->list.next;
#line 111
  t = (struct xprt_class *)__mptr___0;
  ldv_46658: ;
#line 111
  if ((unsigned long )(& t->list) != (unsigned long )(& xprt_list)) {
#line 113
    goto ldv_46657;
  } else {

  }
  {
#line 117
  list_add_tail(& transport->list, & xprt_list);
#line 118
  printk("\016RPC: Registered %s transport module.\n", (char *)(& transport->name));
#line 120
  result = 0;
  }
  out: 
  {
#line 123
  spin_unlock(& xprt_list_lock);
  }
#line 124
  return (result);
}
}
#line 136 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
int xprt_unregister_transport(struct xprt_class *transport ) 
{ 
  struct xprt_class *t ;
  int result ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 141
  result = 0;
#line 142
  spin_lock(& xprt_list_lock);
#line 143
  __mptr = (struct list_head  const  *)xprt_list.next;
#line 143
  t = (struct xprt_class *)__mptr;
  }
#line 143
  goto ldv_46677;
  ldv_46676: ;
#line 144
  if ((unsigned long )t == (unsigned long )transport) {
    {
#line 145
    printk("\016RPC: Unregistered %s transport module.\n", (char *)(& transport->name));
#line 148
    list_del_init(& transport->list);
    }
#line 149
    goto out;
  } else {

  }
#line 143
  __mptr___0 = (struct list_head  const  *)t->list.next;
#line 143
  t = (struct xprt_class *)__mptr___0;
  ldv_46677: ;
#line 143
  if ((unsigned long )(& t->list) != (unsigned long )(& xprt_list)) {
#line 145
    goto ldv_46676;
  } else {

  }
#line 152
  result = -2;
  out: 
  {
#line 155
  spin_unlock(& xprt_list_lock);
  }
#line 156
  return (result);
}
}
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
int xprt_load_transport(char const   *transport_name ) 
{ 
  struct xprt_class *t ;
  int result ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 173
  result = 0;
#line 174
  spin_lock(& xprt_list_lock);
#line 175
  __mptr = (struct list_head  const  *)xprt_list.next;
#line 175
  t = (struct xprt_class *)__mptr;
  }
#line 175
  goto ldv_46696;
  ldv_46695: 
  {
#line 176
  tmp = strcmp((char const   *)(& t->name), transport_name);
  }
#line 176
  if (tmp == 0) {
    {
#line 177
    spin_unlock(& xprt_list_lock);
    }
#line 178
    goto out;
  } else {

  }
#line 175
  __mptr___0 = (struct list_head  const  *)t->list.next;
#line 175
  t = (struct xprt_class *)__mptr___0;
  ldv_46696: ;
#line 175
  if ((unsigned long )(& t->list) != (unsigned long )(& xprt_list)) {
#line 177
    goto ldv_46695;
  } else {

  }
  {
#line 181
  spin_unlock(& xprt_list_lock);
#line 182
  result = __request_module(1, "xprt%s", transport_name);
  }
  out: ;
#line 184
  return (result);
}
}
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
int xprt_reserve_xprt(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  int priority ;
  int tmp ;
  long tmp___0 ;

  {
  {
#line 199
  req = task->tk_rqstp;
#line 202
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->state));
  }
#line 202
  if (tmp != 0) {
#line 203
    if ((unsigned long )task == (unsigned long )xprt->snd_task) {
#line 204
      return (1);
    } else {

    }
#line 205
    goto out_sleep;
  } else {

  }
#line 207
  xprt->snd_task = task;
#line 208
  if ((unsigned long )req != (unsigned long )((struct rpc_rqst *)0)) {
#line 209
    req->rq_bytes_sent = 0U;
#line 210
    req->rq_ntrans = req->rq_ntrans + 1;
  } else {

  }
#line 213
  return (1);
  out_sleep: 
  {
#line 216
  tmp___0 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 216
  if (tmp___0 != 0L) {
    {
#line 216
    printk("\001dRPC: %5u failed to lock transport %p\n", (int )task->tk_pid, xprt);
    }
  } else {

  }
#line 218
  task->tk_timeout = 0UL;
#line 219
  task->tk_status = -11;
#line 220
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
#line 221
    priority = -1;
  } else
#line 222
  if (req->rq_ntrans == 0) {
#line 223
    priority = 0;
  } else {
#line 225
    priority = 1;
  }
  {
#line 226
  rpc_sleep_on_priority(& xprt->sending, task, (void (*)(struct rpc_task * ))0, priority);
  }
#line 227
  return (0);
}
}
#line 231 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_clear_locked(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 233
  xprt->snd_task = (struct rpc_task *)0;
#line 234
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& xprt->state));
  }
#line 234
  if (tmp == 0) {
    {
#line 235
    __asm__  volatile   ("": : : "memory");
#line 236
    clear_bit(0, (unsigned long volatile   *)(& xprt->state));
#line 237
    __asm__  volatile   ("": : : "memory");
    }
  } else {
    {
#line 239
    queue_work(rpciod_workqueue, & xprt->task_cleanup);
    }
  }
#line 240
  return;
}
}
#line 250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
int xprt_reserve_xprt_cong(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  int priority ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 252
  req = task->tk_rqstp;
#line 255
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->state));
  }
#line 255
  if (tmp != 0) {
#line 256
    if ((unsigned long )task == (unsigned long )xprt->snd_task) {
#line 257
      return (1);
    } else {

    }
#line 258
    goto out_sleep;
  } else {

  }
#line 260
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
#line 261
    xprt->snd_task = task;
#line 262
    return (1);
  } else {

  }
  {
#line 264
  tmp___0 = __xprt_get_cong(xprt, task);
  }
#line 264
  if (tmp___0 != 0) {
#line 265
    xprt->snd_task = task;
#line 266
    req->rq_bytes_sent = 0U;
#line 267
    req->rq_ntrans = req->rq_ntrans + 1;
#line 268
    return (1);
  } else {

  }
  {
#line 270
  xprt_clear_locked(xprt);
  }
  out_sleep: 
  {
#line 272
  tmp___1 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 272
  if (tmp___1 != 0L) {
    {
#line 272
    printk("\001dRPC: %5u failed to lock transport %p\n", (int )task->tk_pid, xprt);
    }
  } else {

  }
#line 273
  task->tk_timeout = 0UL;
#line 274
  task->tk_status = -11;
#line 275
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
#line 276
    priority = -1;
  } else
#line 277
  if (req->rq_ntrans == 0) {
#line 278
    priority = 0;
  } else {
#line 280
    priority = 1;
  }
  {
#line 281
  rpc_sleep_on_priority(& xprt->sending, task, (void (*)(struct rpc_task * ))0, priority);
  }
#line 282
  return (0);
}
}
#line 286 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
__inline static int xprt_lock_write(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  int retval ;

  {
  {
#line 290
  spin_lock_bh(& xprt->transport_lock);
#line 291
  retval = (*((xprt->ops)->reserve_xprt))(xprt, task);
#line 292
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 293
  return (retval);
}
}
#line 296 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static bool __xprt_lock_write_func(struct rpc_task *task , void *data ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_rqst *req ;

  {
#line 298
  xprt = (struct rpc_xprt *)data;
#line 301
  req = task->tk_rqstp;
#line 302
  xprt->snd_task = task;
#line 303
  if ((unsigned long )req != (unsigned long )((struct rpc_rqst *)0)) {
#line 304
    req->rq_bytes_sent = 0U;
#line 305
    req->rq_ntrans = req->rq_ntrans + 1;
  } else {

  }
#line 307
  return (1);
}
}
#line 310 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void __xprt_lock_write_next(struct rpc_xprt *xprt ) 
{ 
  int tmp ;
  struct rpc_task *tmp___0 ;

  {
  {
#line 312
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->state));
  }
#line 312
  if (tmp != 0) {
#line 313
    return;
  } else {

  }
  {
#line 315
  tmp___0 = rpc_wake_up_first(& xprt->sending, & __xprt_lock_write_func, (void *)xprt);
  }
#line 315
  if ((unsigned long )tmp___0 != (unsigned long )((struct rpc_task *)0)) {
#line 316
    return;
  } else {

  }
  {
#line 317
  xprt_clear_locked(xprt);
  }
#line 318
  return;
}
}
#line 320 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static bool __xprt_lock_write_cong_func(struct rpc_task *task , void *data ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_rqst *req ;
  int tmp ;

  {
#line 322
  xprt = (struct rpc_xprt *)data;
#line 325
  req = task->tk_rqstp;
#line 326
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
#line 327
    xprt->snd_task = task;
#line 328
    return (1);
  } else {

  }
  {
#line 330
  tmp = __xprt_get_cong(xprt, task);
  }
#line 330
  if (tmp != 0) {
#line 331
    xprt->snd_task = task;
#line 332
    req->rq_bytes_sent = 0U;
#line 333
    req->rq_ntrans = req->rq_ntrans + 1;
#line 334
    return (1);
  } else {

  }
#line 336
  return (0);
}
}
#line 339 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void __xprt_lock_write_next_cong(struct rpc_xprt *xprt ) 
{ 
  int tmp ;
  struct rpc_task *tmp___0 ;

  {
  {
#line 341
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->state));
  }
#line 341
  if (tmp != 0) {
#line 342
    return;
  } else {

  }
#line 343
  if (xprt->cong >= xprt->cwnd) {
#line 344
    goto out_unlock;
  } else {

  }
  {
#line 345
  tmp___0 = rpc_wake_up_first(& xprt->sending, & __xprt_lock_write_cong_func, (void *)xprt);
  }
#line 345
  if ((unsigned long )tmp___0 != (unsigned long )((struct rpc_task *)0)) {
#line 346
    return;
  } else {

  }
  out_unlock: 
  {
#line 348
  xprt_clear_locked(xprt);
  }
#line 349
  return;
}
}
#line 358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_release_xprt(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 


  {
#line 360
  if ((unsigned long )xprt->snd_task == (unsigned long )task) {
    {
#line 361
    xprt_clear_locked(xprt);
#line 362
    __xprt_lock_write_next(xprt);
    }
  } else {

  }
#line 364
  return;
}
}
#line 375 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_release_xprt_cong(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 


  {
#line 377
  if ((unsigned long )xprt->snd_task == (unsigned long )task) {
    {
#line 378
    xprt_clear_locked(xprt);
#line 379
    __xprt_lock_write_next_cong(xprt);
    }
  } else {

  }
#line 381
  return;
}
}
#line 384 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
__inline static void xprt_release_write(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 


  {
  {
#line 386
  spin_lock_bh(& xprt->transport_lock);
#line 387
  (*((xprt->ops)->release_xprt))(xprt, task);
#line 388
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 389
  return;
}
}
#line 396 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static int __xprt_get_cong(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  long tmp ;

  {
#line 398
  req = task->tk_rqstp;
#line 400
  if (req->rq_cong != 0) {
#line 401
    return (1);
  } else {

  }
  {
#line 402
  tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 402
  if (tmp != 0L) {
    {
#line 402
    printk("\001dRPC: %5u xprt_cwnd_limited cong = %lu cwnd = %lu\n", (int )task->tk_pid,
           xprt->cong, xprt->cwnd);
    }
  } else {

  }
#line 404
  if (xprt->cong >= xprt->cwnd) {
#line 405
    return (0);
  } else {

  }
#line 406
  req->rq_cong = 1;
#line 407
  xprt->cong = xprt->cong + 256UL;
#line 408
  return (1);
}
}
#line 416 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void __xprt_put_cong(struct rpc_xprt *xprt , struct rpc_rqst *req ) 
{ 


  {
#line 418
  if (req->rq_cong == 0) {
#line 419
    return;
  } else {

  }
  {
#line 420
  req->rq_cong = 0;
#line 421
  xprt->cong = xprt->cong - 256UL;
#line 422
  __xprt_lock_write_next_cong(xprt);
  }
#line 423
  return;
}
}
#line 431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_release_rqst_cong(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;

  {
  {
#line 433
  req = task->tk_rqstp;
#line 435
  __xprt_put_cong(req->rq_xprt, req);
  }
#line 436
  return;
}
}
#line 447 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_adjust_cwnd(struct rpc_xprt *xprt , struct rpc_task *task , int result ) 
{ 
  struct rpc_rqst *req ;
  unsigned long cwnd ;
  long tmp ;

  {
#line 449
  req = task->tk_rqstp;
#line 450
  cwnd = xprt->cwnd;
#line 452
  if (result >= 0 && cwnd <= xprt->cong) {
#line 455
    cwnd = cwnd + ((cwnd >> 1) + 65536UL) / cwnd;
#line 456
    if (cwnd > (unsigned long )(xprt->max_reqs << 8)) {
#line 457
      cwnd = (unsigned long )(xprt->max_reqs << 8);
    } else {

    }
    {
#line 458
    __xprt_lock_write_next_cong(xprt);
    }
  } else
#line 459
  if (result == -110) {
#line 460
    cwnd = cwnd >> 1;
#line 461
    if (cwnd <= 255UL) {
#line 462
      cwnd = 256UL;
    } else {

    }
  } else {

  }
  {
#line 464
  tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 464
  if (tmp != 0L) {
    {
#line 464
    printk("\001dRPC:       cong %ld, cwnd was %ld, now %ld\n", xprt->cong, xprt->cwnd,
           cwnd);
    }
  } else {

  }
  {
#line 466
  xprt->cwnd = cwnd;
#line 467
  __xprt_put_cong(xprt, req);
  }
#line 468
  return;
}
}
#line 477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_wake_pending_tasks(struct rpc_xprt *xprt , int status ) 
{ 


  {
#line 479
  if (status < 0) {
    {
#line 480
    rpc_wake_up_status(& xprt->pending, status);
    }
  } else {
    {
#line 482
    rpc_wake_up(& xprt->pending);
    }
  }
#line 483
  return;
}
}
#line 495 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_wait_for_buffer_space(struct rpc_task *task , void (*action)(struct rpc_task * ) ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;

  {
  {
#line 497
  req = task->tk_rqstp;
#line 498
  xprt = req->rq_xprt;
#line 500
  task->tk_timeout = ((int )task->tk_flags & 4608) != 0 ? req->rq_timeout : 0UL;
#line 501
  rpc_sleep_on(& xprt->pending, task, action);
  }
#line 502
  return;
}
}
#line 511 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_write_space(struct rpc_xprt *xprt ) 
{ 
  long tmp ;

  {
  {
#line 513
  spin_lock_bh(& xprt->transport_lock);
  }
#line 514
  if ((unsigned long )xprt->snd_task != (unsigned long )((struct rpc_task *)0)) {
    {
#line 515
    tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
    }
#line 515
    if (tmp != 0L) {
      {
#line 515
      printk("\001dRPC:       write space: waking waiting task on xprt %p\n", xprt);
      }
    } else {

    }
    {
#line 517
    rpc_wake_up_queued_task(& xprt->pending, xprt->snd_task);
    }
  } else {

  }
  {
#line 519
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 520
  return;
}
}
#line 531 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_set_retrans_timeout_def(struct rpc_task *task ) 
{ 


  {
#line 533
  task->tk_timeout = (task->tk_rqstp)->rq_timeout;
#line 534
  return;
}
}
#line 543 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_set_retrans_timeout_rtt(struct rpc_task *task ) 
{ 
  int timer ;
  struct rpc_clnt *clnt ;
  struct rpc_rtt *rtt ;
  struct rpc_rqst *req ;
  unsigned long max_timeout ;
  int tmp ;

  {
  {
#line 545
  timer = (int )(task->tk_msg.rpc_proc)->p_timer;
#line 546
  clnt = task->tk_client;
#line 547
  rtt = clnt->cl_rtt;
#line 548
  req = task->tk_rqstp;
#line 549
  max_timeout = (clnt->cl_timeout)->to_maxval;
#line 551
  task->tk_timeout = rpc_calc_rto(rtt, (unsigned int )timer);
#line 552
  tmp = rpc_ntimeo(rtt, timer);
#line 552
  task->tk_timeout = task->tk_timeout << (int )((unsigned int )tmp + req->rq_retries);
  }
#line 553
  if (task->tk_timeout > max_timeout || task->tk_timeout == 0UL) {
#line 554
    task->tk_timeout = max_timeout;
  } else {

  }
#line 555
  return;
}
}
#line 558 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_reset_majortimeo(struct rpc_rqst *req ) 
{ 
  struct rpc_timeout  const  *to ;

  {
#line 560
  to = ((req->rq_task)->tk_client)->cl_timeout;
#line 562
  req->rq_majortimeo = req->rq_timeout;
#line 563
  if ((unsigned int )((unsigned char )to->to_exponential) != 0U) {
#line 564
    req->rq_majortimeo = req->rq_majortimeo << (int )to->to_retries;
  } else {
#line 566
    req->rq_majortimeo = req->rq_majortimeo + (unsigned long )to->to_increment * (unsigned long )to->to_retries;
  }
#line 567
  if (req->rq_majortimeo > (unsigned long )to->to_maxval || req->rq_majortimeo == 0UL) {
#line 568
    req->rq_majortimeo = to->to_maxval;
  } else {

  }
#line 569
  req->rq_majortimeo = req->rq_majortimeo + (unsigned long )jiffies;
#line 570
  return;
}
}
#line 577 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
int xprt_adjust_timeout(struct rpc_rqst *req ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_timeout  const  *to ;
  int status ;

  {
#line 579
  xprt = req->rq_xprt;
#line 580
  to = ((req->rq_task)->tk_client)->cl_timeout;
#line 581
  status = 0;
#line 583
  if ((long )((unsigned long )jiffies - req->rq_majortimeo) < 0L) {
#line 584
    if ((unsigned int )((unsigned char )to->to_exponential) != 0U) {
#line 585
      req->rq_timeout = req->rq_timeout << 1;
    } else {
#line 587
      req->rq_timeout = req->rq_timeout + (unsigned long )to->to_increment;
    }
#line 588
    if ((unsigned long )to->to_maxval != 0UL && req->rq_timeout >= (unsigned long )to->to_maxval) {
#line 589
      req->rq_timeout = to->to_maxval;
    } else {

    }
#line 590
    req->rq_retries = req->rq_retries + 1U;
  } else {
    {
#line 592
    req->rq_timeout = to->to_initval;
#line 593
    req->rq_retries = 0U;
#line 594
    xprt_reset_majortimeo(req);
#line 596
    spin_lock_bh(& xprt->transport_lock);
#line 597
    rpc_init_rtt(((req->rq_task)->tk_client)->cl_rtt, to->to_initval);
#line 598
    spin_unlock_bh(& xprt->transport_lock);
#line 599
    status = -110;
    }
  }
#line 602
  if (req->rq_timeout == 0UL) {
    {
#line 603
    printk("\fxprt_adjust_timeout: rq_timeout = 0!\n");
#line 604
    req->rq_timeout = 1250UL;
    }
  } else {

  }
#line 606
  return (status);
}
}
#line 609 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_autoclose(struct work_struct *work ) 
{ 
  struct rpc_xprt *xprt ;
  struct work_struct  const  *__mptr ;

  {
  {
#line 612
  __mptr = (struct work_struct  const  *)work;
#line 612
  xprt = (struct rpc_xprt *)((char *)__mptr + 0xfffffffffffffa08UL);
#line 614
  (*((xprt->ops)->close))(xprt);
#line 615
  clear_bit(3, (unsigned long volatile   *)(& xprt->state));
#line 616
  xprt_release_write(xprt, (struct rpc_task *)0);
  }
#line 617
  return;
}
}
#line 624 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_disconnect_done(struct rpc_xprt *xprt ) 
{ 
  long tmp ;

  {
  {
#line 626
  tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 626
  if (tmp != 0L) {
    {
#line 626
    printk("\001dRPC:       disconnected transport %p\n", xprt);
    }
  } else {

  }
  {
#line 627
  spin_lock_bh(& xprt->transport_lock);
#line 628
  xprt_clear_connected(xprt);
#line 629
  xprt_wake_pending_tasks(xprt, -11);
#line 630
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 631
  return;
}
}
#line 639 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_force_disconnect(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 642
  spin_lock_bh(& xprt->transport_lock);
#line 643
  set_bit(3U, (unsigned long volatile   *)(& xprt->state));
#line 645
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->state));
  }
#line 645
  if (tmp == 0) {
    {
#line 646
    queue_work(rpciod_workqueue, & xprt->task_cleanup);
    }
  } else {

  }
  {
#line 647
  xprt_wake_pending_tasks(xprt, -11);
#line 648
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 649
  return;
}
}
#line 662 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_conditional_disconnect(struct rpc_xprt *xprt , unsigned int cookie ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 665
  spin_lock_bh(& xprt->transport_lock);
  }
#line 666
  if (cookie != xprt->connect_cookie) {
#line 667
    goto out;
  } else {

  }
  {
#line 668
  tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& xprt->state));
  }
#line 668
  if (tmp != 0) {
#line 669
    goto out;
  } else {
    {
#line 668
    tmp___0 = xprt_connected(xprt);
    }
#line 668
    if (tmp___0 == 0) {
#line 669
      goto out;
    } else {

    }
  }
  {
#line 670
  set_bit(3U, (unsigned long volatile   *)(& xprt->state));
#line 672
  tmp___1 = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->state));
  }
#line 672
  if (tmp___1 == 0) {
    {
#line 673
    queue_work(rpciod_workqueue, & xprt->task_cleanup);
    }
  } else {

  }
  {
#line 674
  xprt_wake_pending_tasks(xprt, -11);
  }
  out: 
  {
#line 676
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 677
  return;
}
}
#line 680 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_init_autodisconnect(unsigned long data ) 
{ 
  struct rpc_xprt *xprt ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 682
  xprt = (struct rpc_xprt *)data;
#line 684
  spin_lock(& xprt->transport_lock);
#line 685
  tmp = list_empty((struct list_head  const  *)(& xprt->recv));
  }
#line 685
  if (tmp == 0) {
#line 686
    goto out_abort;
  } else {

  }
  {
#line 687
  tmp___0 = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->state));
  }
#line 687
  if (tmp___0 != 0) {
#line 688
    goto out_abort;
  } else {

  }
  {
#line 689
  spin_unlock(& xprt->transport_lock);
#line 690
  set_bit(8U, (unsigned long volatile   *)(& xprt->state));
#line 691
  queue_work(rpciod_workqueue, & xprt->task_cleanup);
  }
#line 692
  return;
  out_abort: 
  {
#line 694
  spin_unlock(& xprt->transport_lock);
  }
#line 695
  return;
}
}
#line 702 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_connect(struct rpc_task *task ) 
{ 
  struct rpc_xprt *xprt ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
  {
#line 704
  xprt = (task->tk_rqstp)->rq_xprt;
#line 706
  tmp___0 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 706
  if (tmp___0 != 0L) {
    {
#line 706
    tmp = xprt_connected(xprt);
#line 706
    printk("\001dRPC: %5u xprt_connect xprt %p %s connected\n", (int )task->tk_pid,
           xprt, tmp != 0 ? (char *)"is" : (char *)"is not");
    }
  } else {

  }
  {
#line 709
  tmp___1 = xprt_bound(xprt);
  }
#line 709
  if (tmp___1 == 0) {
#line 710
    task->tk_status = -11;
#line 711
    return;
  } else {

  }
  {
#line 713
  tmp___2 = xprt_lock_write(xprt, task);
  }
#line 713
  if (tmp___2 == 0) {
#line 714
    return;
  } else {

  }
  {
#line 716
  tmp___3 = test_and_clear_bit(3, (unsigned long volatile   *)(& xprt->state));
  }
#line 716
  if (tmp___3 != 0) {
    {
#line 717
    (*((xprt->ops)->close))(xprt);
    }
  } else {

  }
  {
#line 719
  tmp___6 = xprt_connected(xprt);
  }
#line 719
  if (tmp___6 != 0) {
    {
#line 720
    xprt_release_write(xprt, task);
    }
  } else {
    {
#line 722
    (task->tk_rqstp)->rq_bytes_sent = 0U;
#line 723
    task->tk_timeout = (task->tk_rqstp)->rq_timeout;
#line 724
    rpc_sleep_on(& xprt->pending, task, & xprt_connect_status);
#line 726
    tmp___4 = constant_test_bit(6U, (unsigned long const volatile   *)(& xprt->state));
    }
#line 726
    if (tmp___4 != 0) {
#line 727
      return;
    } else {

    }
    {
#line 728
    tmp___5 = xprt_test_and_set_connecting(xprt);
    }
#line 728
    if (tmp___5 != 0) {
#line 729
      return;
    } else {

    }
    {
#line 730
    xprt->stat.connect_start = jiffies;
#line 731
    (*((xprt->ops)->connect))(xprt, task);
    }
  }
#line 733
  return;
}
}
#line 735 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_connect_status(struct rpc_task *task ) 
{ 
  struct rpc_xprt *xprt ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 737
  xprt = (task->tk_rqstp)->rq_xprt;
#line 739
  if (task->tk_status == 0) {
    {
#line 740
    xprt->stat.connect_count = xprt->stat.connect_count + 1UL;
#line 741
    xprt->stat.connect_time = xprt->stat.connect_time + ((unsigned long )jiffies - xprt->stat.connect_start);
#line 742
    tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
    }
#line 742
    if (tmp != 0L) {
      {
#line 742
      printk("\001dRPC: %5u xprt_connect_status: connection established\n", (int )task->tk_pid);
      }
    } else {

    }
#line 744
    return;
  } else {

  }
  {
#line 748
  if (task->tk_status == -11) {
#line 748
    goto case_neg_11;
  } else {

  }
#line 751
  if (task->tk_status == -110) {
#line 751
    goto case_neg_110;
  } else {

  }
#line 755
  goto switch_default;
  case_neg_11: /* CIL Label */ 
  {
#line 749
  tmp___0 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 749
  if (tmp___0 != 0L) {
    {
#line 749
    printk("\001dRPC: %5u xprt_connect_status: retrying\n", (int )task->tk_pid);
    }
  } else {

  }
#line 750
  goto ldv_46928;
  case_neg_110: /* CIL Label */ 
  {
#line 752
  tmp___1 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 752
  if (tmp___1 != 0L) {
    {
#line 752
    printk("\001dRPC: %5u xprt_connect_status: connect attempt timed out\n", (int )task->tk_pid);
    }
  } else {

  }
#line 754
  goto ldv_46928;
  switch_default: /* CIL Label */ 
  {
#line 756
  tmp___2 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 756
  if (tmp___2 != 0L) {
    {
#line 756
    printk("\001dRPC: %5u xprt_connect_status: error %d connecting to server %s\n",
           (int )task->tk_pid, - task->tk_status, xprt->servername);
    }
  } else {

  }
  {
#line 759
  xprt_release_write(xprt, task);
#line 760
  task->tk_status = -5;
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_46928: ;
#line 763
  return;
}
}
#line 770 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
struct rpc_rqst *xprt_lookup_rqst(struct rpc_xprt *xprt , __be32 xid ) 
{ 
  struct rpc_rqst *entry ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 774
  __mptr = (struct list_head  const  *)xprt->recv.next;
#line 774
  entry = (struct rpc_rqst *)((char *)__mptr + 0xffffffffffffff48UL);
#line 774
  goto ldv_46941;
  ldv_46940: ;
#line 775
  if (entry->rq_xid == xid) {
#line 776
    return (entry);
  } else {

  }
#line 774
  __mptr___0 = (struct list_head  const  *)entry->rq_list.next;
#line 774
  entry = (struct rpc_rqst *)((char *)__mptr___0 + 0xffffffffffffff48UL);
  ldv_46941: ;
#line 774
  if ((unsigned long )(& entry->rq_list) != (unsigned long )(& xprt->recv)) {
#line 776
    goto ldv_46940;
  } else {

  }
  {
#line 778
  tmp___0 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 778
  if (tmp___0 != 0L) {
    {
#line 778
    tmp = __fswab32(xid);
#line 778
    printk("\001dRPC:       xprt_lookup_rqst did not find xid %08x\n", tmp);
    }
  } else {

  }
#line 780
  xprt->stat.bad_xids = xprt->stat.bad_xids + 1UL;
#line 781
  return ((struct rpc_rqst *)0);
}
}
#line 785 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_update_rtt(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_rtt *rtt ;
  unsigned int timer ;
  long m ;
  s64 tmp ;
  unsigned long tmp___0 ;

  {
  {
#line 787
  req = task->tk_rqstp;
#line 788
  rtt = (task->tk_client)->cl_rtt;
#line 789
  timer = (task->tk_msg.rpc_proc)->p_timer;
#line 790
  tmp = ktime_to_us(req->rq_rtt);
#line 790
  tmp___0 = usecs_to_jiffies((unsigned int const   )tmp);
#line 790
  m = (long )tmp___0;
  }
#line 792
  if (timer != 0U) {
#line 793
    if (req->rq_ntrans == 1) {
      {
#line 794
      rpc_update_rtt(rtt, timer, m);
      }
    } else {

    }
    {
#line 795
    rpc_set_timeo(rtt, (int )timer, req->rq_ntrans + -1);
    }
  } else {

  }
#line 797
  return;
}
}
#line 806 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_complete_rqst(struct rpc_task *task , int copied ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  __u32 tmp ;
  long tmp___0 ;
  ktime_t __constr_expr_0 ;
  ktime_t tmp___1 ;

  {
  {
#line 808
  req = task->tk_rqstp;
#line 809
  xprt = req->rq_xprt;
#line 811
  tmp___0 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 811
  if (tmp___0 != 0L) {
    {
#line 811
    tmp = __fswab32(req->rq_xid);
#line 811
    printk("\001dRPC: %5u xid %08x complete (%d bytes received)\n", (int )task->tk_pid,
           tmp, copied);
    }
  } else {

  }
  {
#line 814
  xprt->stat.recvs = xprt->stat.recvs + 1UL;
#line 815
  tmp___1 = ktime_get();
#line 815
  __constr_expr_0.tv64 = tmp___1.tv64 - req->rq_xtime.tv64;
#line 815
  req->rq_rtt = __constr_expr_0;
  }
#line 816
  if ((unsigned long )(xprt->ops)->timer != (unsigned long )((void (*)(struct rpc_xprt * ,
                                                                       struct rpc_task * ))0)) {
    {
#line 817
    xprt_update_rtt(task);
    }
  } else {

  }
  {
#line 819
  list_del_init(& req->rq_list);
#line 820
  req->rq_private_buf.len = (unsigned int )copied;
#line 823
  __asm__  volatile   ("": : : "memory");
#line 824
  req->rq_reply_bytes_recvd = (size_t )copied;
#line 825
  rpc_wake_up_queued_task(& xprt->pending, task);
  }
#line 826
  return;
}
}
#line 829 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_timer(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  long tmp ;

  {
#line 831
  req = task->tk_rqstp;
#line 832
  xprt = req->rq_xprt;
#line 834
  if (task->tk_status != -110) {
#line 835
    return;
  } else {

  }
  {
#line 836
  tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 836
  if (tmp != 0L) {
    {
#line 836
    printk("\001dRPC: %5u xprt_timer\n", (int )task->tk_pid);
    }
  } else {

  }
  {
#line 838
  spin_lock_bh(& xprt->transport_lock);
  }
#line 839
  if (req->rq_reply_bytes_recvd == 0UL) {
#line 840
    if ((unsigned long )(xprt->ops)->timer != (unsigned long )((void (*)(struct rpc_xprt * ,
                                                                         struct rpc_task * ))0)) {
      {
#line 841
      (*((xprt->ops)->timer))(xprt, task);
      }
    } else {

    }
  } else {
#line 843
    task->tk_status = 0;
  }
  {
#line 844
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 845
  return;
}
}
#line 847 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
__inline static int xprt_has_timer(struct rpc_xprt *xprt ) 
{ 


  {
#line 849
  return (xprt->idle_timeout != 0UL);
}
}
#line 857 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
int xprt_prepare_transmit(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  int err ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 859
  req = task->tk_rqstp;
#line 860
  xprt = req->rq_xprt;
#line 861
  err = 0;
#line 863
  tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 863
  if (tmp != 0L) {
    {
#line 863
    printk("\001dRPC: %5u xprt_prepare_transmit\n", (int )task->tk_pid);
    }
  } else {

  }
  {
#line 865
  spin_lock_bh(& xprt->transport_lock);
  }
#line 866
  if (req->rq_reply_bytes_recvd != 0UL && req->rq_bytes_sent == 0U) {
#line 867
    err = (int )req->rq_reply_bytes_recvd;
#line 868
    goto out_unlock;
  } else {

  }
  {
#line 870
  tmp___0 = (*((xprt->ops)->reserve_xprt))(xprt, task);
  }
#line 870
  if (tmp___0 == 0) {
#line 871
    err = -11;
  } else {

  }
  out_unlock: 
  {
#line 873
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 874
  return (err);
}
}
#line 877 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_end_transmit(struct rpc_task *task ) 
{ 


  {
  {
#line 879
  xprt_release_write((task->tk_rqstp)->rq_xprt, task);
  }
#line 880
  return;
}
}
#line 888 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_transmit(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  int status ;
  int numreqs ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 890
  req = task->tk_rqstp;
#line 891
  xprt = req->rq_xprt;
#line 894
  tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 894
  if (tmp != 0L) {
    {
#line 894
    printk("\001dRPC: %5u xprt_transmit(%u)\n", (int )task->tk_pid, req->rq_snd_buf.len);
    }
  } else {

  }
#line 896
  if (req->rq_reply_bytes_recvd == 0UL) {
    {
#line 897
    tmp___0 = list_empty((struct list_head  const  *)(& req->rq_list));
    }
#line 897
    if (tmp___0 != 0) {
      {
#line 897
      tmp___1 = rpc_reply_expected(task);
      }
#line 897
      if (tmp___1 != 0) {
        {
#line 901
        spin_lock_bh(& xprt->transport_lock);
#line 903
        memcpy((void *)(& req->rq_private_buf), (void const   *)(& req->rq_rcv_buf),
               64UL);
#line 906
        list_add_tail(& req->rq_list, & xprt->recv);
#line 907
        spin_unlock_bh(& xprt->transport_lock);
#line 908
        xprt_reset_majortimeo(req);
#line 910
        ldv_del_timer_sync_10(& xprt->timer);
        }
      } else {

      }
    } else {

    }
  } else
#line 912
  if (req->rq_bytes_sent == 0U) {
#line 913
    return;
  } else {

  }
  {
#line 915
  req->rq_connect_cookie = xprt->connect_cookie;
#line 916
  req->rq_xtime = ktime_get();
#line 917
  status = (*((xprt->ops)->send_request))(task);
  }
#line 918
  if (status != 0) {
#line 919
    task->tk_status = status;
#line 920
    return;
  } else {

  }
  {
#line 923
  tmp___2 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 923
  if (tmp___2 != 0L) {
    {
#line 923
    printk("\001dRPC: %5u xmit complete\n", (int )task->tk_pid);
    }
  } else {

  }
  {
#line 924
  task->tk_flags = (unsigned int )task->tk_flags | 2048U;
#line 925
  spin_lock_bh(& xprt->transport_lock);
#line 927
  (*((xprt->ops)->set_retrans_timeout))(task);
#line 929
  numreqs = atomic_read((atomic_t const   *)(& xprt->num_reqs));
  }
#line 930
  if ((unsigned long )numreqs > xprt->stat.max_slots) {
#line 931
    xprt->stat.max_slots = (unsigned long )numreqs;
  } else {

  }
  {
#line 932
  xprt->stat.sends = xprt->stat.sends + 1UL;
#line 933
  xprt->stat.req_u = xprt->stat.req_u + (unsigned long long )(xprt->stat.sends - xprt->stat.recvs);
#line 934
  xprt->stat.bklog_u = xprt->stat.bklog_u + (unsigned long long )xprt->backlog.qlen;
#line 935
  xprt->stat.sending_u = xprt->stat.sending_u + (unsigned long long )xprt->sending.qlen;
#line 936
  xprt->stat.pending_u = xprt->stat.pending_u + (unsigned long long )xprt->pending.qlen;
#line 939
  tmp___4 = xprt_connected(xprt);
  }
#line 939
  if (tmp___4 == 0) {
#line 940
    task->tk_status = -107;
  } else
#line 941
  if (req->rq_reply_bytes_recvd == 0UL) {
    {
#line 941
    tmp___3 = rpc_reply_expected(task);
    }
#line 941
    if (tmp___3 != 0) {
      {
#line 946
      rpc_sleep_on(& xprt->pending, task, & xprt_timer);
      }
    } else {

    }
  } else {

  }
  {
#line 948
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 949
  return;
}
}
#line 951 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_add_backlog(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 


  {
  {
#line 953
  set_bit(9U, (unsigned long volatile   *)(& xprt->state));
#line 954
  rpc_sleep_on(& xprt->backlog, task, (void (*)(struct rpc_task * ))0);
  }
#line 955
  return;
}
}
#line 957 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_wake_up_backlog(struct rpc_xprt *xprt ) 
{ 
  struct rpc_task *tmp ;

  {
  {
#line 959
  tmp = rpc_wake_up_next(& xprt->backlog);
  }
#line 959
  if ((unsigned long )tmp == (unsigned long )((struct rpc_task *)0)) {
    {
#line 960
    clear_bit(9, (unsigned long volatile   *)(& xprt->state));
    }
  } else {

  }
#line 961
  return;
}
}
#line 963 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static bool xprt_throttle_congested(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  bool ret ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 965
  ret = 0;
#line 967
  tmp = constant_test_bit(9U, (unsigned long const volatile   *)(& xprt->state));
  }
#line 967
  if (tmp == 0) {
#line 968
    goto out;
  } else {

  }
  {
#line 969
  spin_lock(& xprt->reserve_lock);
#line 970
  tmp___0 = constant_test_bit(9U, (unsigned long const volatile   *)(& xprt->state));
  }
#line 970
  if (tmp___0 != 0) {
    {
#line 971
    rpc_sleep_on(& xprt->backlog, task, (void (*)(struct rpc_task * ))0);
#line 972
    ret = 1;
    }
  } else {

  }
  {
#line 974
  spin_unlock(& xprt->reserve_lock);
  }
  out: ;
#line 976
  return (ret);
}
}
#line 979 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static struct rpc_rqst *xprt_dynamic_alloc_slot(struct rpc_xprt *xprt , gfp_t gfp_flags ) 
{ 
  struct rpc_rqst *req ;
  void *tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
  {
#line 981
  tmp = ERR_PTR(-11L);
#line 981
  req = (struct rpc_rqst *)tmp;
#line 983
  tmp___0 = atomic_add_unless(& xprt->num_reqs, 1, (int )xprt->max_reqs);
  }
#line 983
  if (tmp___0 == 0) {
#line 984
    goto out;
  } else {

  }
  {
#line 985
  tmp___1 = kzalloc(400UL, gfp_flags);
#line 985
  req = (struct rpc_rqst *)tmp___1;
  }
#line 986
  if ((unsigned long )req != (unsigned long )((struct rpc_rqst *)0)) {
#line 987
    goto out;
  } else {

  }
  {
#line 988
  atomic_dec(& xprt->num_reqs);
#line 989
  tmp___2 = ERR_PTR(-12L);
#line 989
  req = (struct rpc_rqst *)tmp___2;
  }
  out: ;
#line 991
  return (req);
}
}
#line 994 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static bool xprt_dynamic_free_slot(struct rpc_xprt *xprt , struct rpc_rqst *req ) 
{ 
  int tmp ;

  {
  {
#line 996
  tmp = atomic_add_unless(& xprt->num_reqs, -1, (int )xprt->min_reqs);
  }
#line 996
  if (tmp != 0) {
    {
#line 997
    kfree((void const   *)req);
    }
#line 998
    return (1);
  } else {

  }
#line 1000
  return (0);
}
}
#line 1003 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_alloc_slot(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct list_head  const  *__mptr ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
  {
#line 1007
  spin_lock(& xprt->reserve_lock);
#line 1008
  tmp = list_empty((struct list_head  const  *)(& xprt->free));
  }
#line 1008
  if (tmp == 0) {
    {
#line 1009
    __mptr = (struct list_head  const  *)xprt->free.next;
#line 1009
    req = (struct rpc_rqst *)((char *)__mptr + 0xffffffffffffff48UL);
#line 1010
    list_del(& req->rq_list);
    }
#line 1011
    goto out_init_req;
  } else {

  }
  {
#line 1013
  req = xprt_dynamic_alloc_slot(xprt, 512U);
#line 1014
  tmp___0 = IS_ERR((void const   *)req);
  }
#line 1014
  if (tmp___0 == 0L) {
#line 1015
    goto out_init_req;
  } else {

  }
  {
#line 1016
  tmp___1 = PTR_ERR((void const   *)req);
  }
  {
#line 1017
  if (tmp___1 == -12L) {
#line 1017
    goto case_neg_12;
  } else {

  }
#line 1022
  if (tmp___1 == -11L) {
#line 1022
    goto case_neg_11;
  } else {

  }
#line 1025
  goto switch_default;
  case_neg_12: /* CIL Label */ 
  {
#line 1018
  tmp___2 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 1018
  if (tmp___2 != 0L) {
    {
#line 1018
    printk("\001dRPC:       dynamic allocation of request slot failed! Retrying\n");
    }
  } else {

  }
#line 1020
  task->tk_status = -12;
#line 1021
  goto ldv_47028;
  case_neg_11: /* CIL Label */ 
  {
#line 1023
  xprt_add_backlog(xprt, task);
#line 1024
  tmp___3 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 1024
  if (tmp___3 != 0L) {
    {
#line 1024
    printk("\001dRPC:       waiting for request slot\n");
    }
  } else {

  }
  switch_default: /* CIL Label */ 
#line 1026
  task->tk_status = -11;
  switch_break: /* CIL Label */ ;
  }
  ldv_47028: 
  {
#line 1028
  spin_unlock(& xprt->reserve_lock);
  }
#line 1029
  return;
  out_init_req: 
  {
#line 1031
  task->tk_status = 0;
#line 1032
  task->tk_rqstp = req;
#line 1033
  xprt_request_init(task, xprt);
#line 1034
  spin_unlock(& xprt->reserve_lock);
  }
#line 1035
  return;
}
}
#line 1038 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_lock_and_alloc_slot(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  int tmp ;

  {
  {
#line 1045
  tmp = xprt_lock_write(xprt, task);
  }
#line 1045
  if (tmp != 0) {
    {
#line 1046
    xprt_alloc_slot(xprt, task);
#line 1047
    xprt_release_write(xprt, task);
    }
  } else {

  }
#line 1049
  return;
}
}
#line 1052 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_free_slot(struct rpc_xprt *xprt , struct rpc_rqst *req ) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
  {
#line 1054
  spin_lock(& xprt->reserve_lock);
#line 1055
  tmp = xprt_dynamic_free_slot(xprt, req);
  }
#line 1055
  if (tmp) {
#line 1055
    tmp___0 = 0;
  } else {
#line 1055
    tmp___0 = 1;
  }
#line 1055
  if (tmp___0) {
    {
#line 1056
    memset((void *)req, 0, 400UL);
#line 1057
    list_add(& req->rq_list, & xprt->free);
    }
  } else {

  }
  {
#line 1059
  xprt_wake_up_backlog(xprt);
#line 1060
  spin_unlock(& xprt->reserve_lock);
  }
#line 1061
  return;
}
}
#line 1063 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_free_all_slots(struct rpc_xprt *xprt ) 
{ 
  struct rpc_rqst *req ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 1066
  goto ldv_47060;
  ldv_47059: 
  {
#line 1067
  __mptr = (struct list_head  const  *)xprt->free.next;
#line 1067
  req = (struct rpc_rqst *)((char *)__mptr + 0xffffffffffffff48UL);
#line 1068
  list_del(& req->rq_list);
#line 1069
  kfree((void const   *)req);
  }
  ldv_47060: 
  {
#line 1066
  tmp = list_empty((struct list_head  const  *)(& xprt->free));
  }
#line 1066
  if (tmp == 0) {
#line 1068
    goto ldv_47059;
  } else {

  }

#line 1073
  return;
}
}
#line 1073 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
struct rpc_xprt *xprt_alloc(struct net *net , size_t size , unsigned int num_prealloc ,
                            unsigned int max_alloc ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_rqst *req ;
  int i ;
  void *tmp ;
  void *tmp___0 ;

  {
  {
#line 1081
  tmp = kzalloc(size, 208U);
#line 1081
  xprt = (struct rpc_xprt *)tmp;
  }
#line 1082
  if ((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0)) {
#line 1083
    goto out;
  } else {

  }
  {
#line 1085
  xprt_init(xprt, net);
#line 1087
  i = 0;
  }
#line 1087
  goto ldv_47074;
  ldv_47073: 
  {
#line 1088
  tmp___0 = kzalloc(400UL, 208U);
#line 1088
  req = (struct rpc_rqst *)tmp___0;
  }
#line 1089
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
#line 1090
    goto ldv_47072;
  } else {

  }
  {
#line 1091
  list_add(& req->rq_list, & xprt->free);
#line 1087
  i = i + 1;
  }
  ldv_47074: ;
#line 1087
  if ((unsigned int )i < num_prealloc) {
#line 1089
    goto ldv_47073;
  } else {

  }
  ldv_47072: ;
#line 1093
  if ((unsigned int )i < num_prealloc) {
#line 1094
    goto out_free;
  } else {

  }
#line 1095
  if (max_alloc > num_prealloc) {
#line 1096
    xprt->max_reqs = max_alloc;
  } else {
#line 1098
    xprt->max_reqs = num_prealloc;
  }
  {
#line 1099
  xprt->min_reqs = num_prealloc;
#line 1100
  atomic_set(& xprt->num_reqs, (int )num_prealloc);
  }
#line 1102
  return (xprt);
  out_free: 
  {
#line 1105
  xprt_free(xprt);
  }
  out: ;
#line 1107
  return ((struct rpc_xprt *)0);
}
}
#line 1111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_free(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 1113
  put_net(xprt->xprt_net);
#line 1114
  xprt_free_all_slots(xprt);
#line 1115
  kfree((void const   *)xprt);
  }
#line 1116
  return;
}
}
#line 1127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_reserve(struct rpc_task *task ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
#line 1131
  task->tk_status = 0;
#line 1132
  if ((unsigned long )task->tk_rqstp != (unsigned long )((struct rpc_rqst *)0)) {
#line 1133
    return;
  } else {

  }
  {
#line 1135
  task->tk_timeout = 0UL;
#line 1136
  task->tk_status = -11;
#line 1137
  rcu_read_lock();
#line 1138
  _________p1 = *((struct rpc_xprt * volatile  *)(& (task->tk_client)->cl_xprt));
#line 1138
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1138
  if (tmp != 0 && ! __warned) {
    {
#line 1138
    tmp___0 = rcu_read_lock_held();
    }
#line 1138
    if (tmp___0 == 0) {
      {
#line 1138
      __warned = 1;
#line 1138
      lockdep_rcu_suspicious("net/sunrpc/xprt.c", 1138, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1138
  xprt = _________p1;
#line 1139
  tmp___1 = xprt_throttle_congested(xprt, task);
  }
#line 1139
  if (tmp___1) {
#line 1139
    tmp___2 = 0;
  } else {
#line 1139
    tmp___2 = 1;
  }
#line 1139
  if (tmp___2) {
    {
#line 1140
    (*((xprt->ops)->alloc_slot))(xprt, task);
    }
  } else {

  }
  {
#line 1141
  rcu_read_unlock();
  }
#line 1142
  return;
}
}
#line 1153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_retry_reserve(struct rpc_task *task ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 1157
  task->tk_status = 0;
#line 1158
  if ((unsigned long )task->tk_rqstp != (unsigned long )((struct rpc_rqst *)0)) {
#line 1159
    return;
  } else {

  }
  {
#line 1161
  task->tk_timeout = 0UL;
#line 1162
  task->tk_status = -11;
#line 1163
  rcu_read_lock();
#line 1164
  _________p1 = *((struct rpc_xprt * volatile  *)(& (task->tk_client)->cl_xprt));
#line 1164
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1164
  if (tmp != 0 && ! __warned) {
    {
#line 1164
    tmp___0 = rcu_read_lock_held();
    }
#line 1164
    if (tmp___0 == 0) {
      {
#line 1164
      __warned = 1;
#line 1164
      lockdep_rcu_suspicious("net/sunrpc/xprt.c", 1164, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1164
  xprt = _________p1;
#line 1165
  (*((xprt->ops)->alloc_slot))(xprt, task);
#line 1166
  rcu_read_unlock();
  }
#line 1167
  return;
}
}
#line 1169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
__inline static __be32 xprt_alloc_xid(struct rpc_xprt *xprt ) 
{ 
  u32 tmp ;

  {
#line 1171
  tmp = xprt->xid;
#line 1171
  xprt->xid = xprt->xid + 1U;
#line 1171
  return (tmp);
}
}
#line 1174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
__inline static void xprt_init_xid(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 1176
  xprt->xid = prandom_u32();
  }
#line 1177
  return;
}
}
#line 1179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_request_init(struct rpc_task *task , struct rpc_xprt *xprt ) 
{ 
  struct rpc_rqst *req ;
  __u32 tmp ;
  long tmp___0 ;

  {
  {
#line 1181
  req = task->tk_rqstp;
#line 1183
  INIT_LIST_HEAD(& req->rq_list);
#line 1184
  req->rq_timeout = ((task->tk_client)->cl_timeout)->to_initval;
#line 1185
  req->rq_task = task;
#line 1186
  req->rq_xprt = xprt;
#line 1187
  req->rq_buffer = (__u32 *)0U;
#line 1188
  req->rq_xid = xprt_alloc_xid(xprt);
#line 1189
  req->rq_release_snd_buf = (void (*)(struct rpc_rqst * ))0;
#line 1190
  xprt_reset_majortimeo(req);
#line 1191
  tmp___0 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 1191
  if (tmp___0 != 0L) {
    {
#line 1191
    tmp = __fswab32(req->rq_xid);
#line 1191
    printk("\001dRPC: %5u reserved req %p xid %08x\n", (int )task->tk_pid, req, tmp);
    }
  } else {

  }
#line 1192
  return;
}
}
#line 1200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_release(struct rpc_task *task ) 
{ 
  struct rpc_xprt *xprt ;
  struct rpc_rqst *req ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 1203
  req = task->tk_rqstp;
#line 1205
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
#line 1206
    if ((unsigned long )task->tk_client != (unsigned long )((struct rpc_clnt *)0)) {
      {
#line 1207
      rcu_read_lock();
#line 1208
      _________p1 = *((struct rpc_xprt * volatile  *)(& (task->tk_client)->cl_xprt));
#line 1208
      tmp = debug_lockdep_rcu_enabled();
      }
#line 1208
      if (tmp != 0 && ! __warned) {
        {
#line 1208
        tmp___0 = rcu_read_lock_held();
        }
#line 1208
        if (tmp___0 == 0) {
          {
#line 1208
          __warned = 1;
#line 1208
          lockdep_rcu_suspicious("net/sunrpc/xprt.c", 1208, "suspicious rcu_dereference_check() usage");
          }
        } else {

        }
      } else {

      }
#line 1208
      xprt = _________p1;
#line 1209
      if ((unsigned long )xprt->snd_task == (unsigned long )task) {
        {
#line 1210
        xprt_release_write(xprt, task);
        }
      } else {

      }
      {
#line 1211
      rcu_read_unlock();
      }
    } else {

    }
#line 1213
    return;
  } else {

  }
#line 1216
  xprt = req->rq_xprt;
#line 1217
  if ((unsigned long )(task->tk_ops)->rpc_count_stats != (unsigned long )((void (*/* const  */)(struct rpc_task * ,
                                                                                                void * ))0)) {
    {
#line 1218
    (*((task->tk_ops)->rpc_count_stats))(task, task->tk_calldata);
    }
  } else
#line 1219
  if ((unsigned long )task->tk_client != (unsigned long )((struct rpc_clnt *)0)) {
    {
#line 1220
    rpc_count_iostats((struct rpc_task  const  *)task, (task->tk_client)->cl_metrics);
    }
  } else {

  }
  {
#line 1221
  spin_lock_bh(& xprt->transport_lock);
#line 1222
  (*((xprt->ops)->release_xprt))(xprt, task);
  }
#line 1223
  if ((unsigned long )(xprt->ops)->release_request != (unsigned long )((void (*)(struct rpc_task * ))0)) {
    {
#line 1224
    (*((xprt->ops)->release_request))(task);
    }
  } else {

  }
  {
#line 1225
  tmp___1 = list_empty((struct list_head  const  *)(& req->rq_list));
  }
#line 1225
  if (tmp___1 == 0) {
    {
#line 1226
    list_del(& req->rq_list);
    }
  } else {

  }
  {
#line 1227
  xprt->last_used = jiffies;
#line 1228
  tmp___2 = list_empty((struct list_head  const  *)(& xprt->recv));
  }
#line 1228
  if (tmp___2 != 0) {
    {
#line 1228
    tmp___3 = xprt_has_timer(xprt);
    }
#line 1228
    if (tmp___3 != 0) {
      {
#line 1229
      ldv_mod_timer_11(& xprt->timer, xprt->last_used + xprt->idle_timeout);
      }
    } else {

    }
  } else {

  }
  {
#line 1231
  spin_unlock_bh(& xprt->transport_lock);
  }
#line 1232
  if ((unsigned long )req->rq_buffer != (unsigned long )((__u32 *)0U)) {
    {
#line 1233
    (*((xprt->ops)->buf_free))((void *)req->rq_buffer);
    }
  } else {

  }
#line 1234
  if ((unsigned long )req->rq_cred != (unsigned long )((struct rpc_cred *)0)) {
    {
#line 1235
    put_rpccred(req->rq_cred);
    }
  } else {

  }
#line 1236
  task->tk_rqstp = (struct rpc_rqst *)0;
#line 1237
  if ((unsigned long )req->rq_release_snd_buf != (unsigned long )((void (*)(struct rpc_rqst * ))0)) {
    {
#line 1238
    (*(req->rq_release_snd_buf))(req);
    }
  } else {

  }
  {
#line 1240
  tmp___4 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 1240
  if (tmp___4 != 0L) {
    {
#line 1240
    printk("\001dRPC: %5u release request %p\n", (int )task->tk_pid, req);
    }
  } else {

  }
  {
#line 1241
  tmp___5 = bc_prealloc(req);
#line 1241
  tmp___6 = __builtin_expect(tmp___5 == 0, 1L);
  }
#line 1241
  if (tmp___6 != 0L) {
    {
#line 1242
    xprt_free_slot(xprt, req);
    }
  } else {
    {
#line 1244
    xprt_free_bc_request(req);
    }
  }
#line 1245
  return;
}
}
#line 1247 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_init(struct rpc_xprt *xprt , struct net *net ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
  {
#line 1249
  atomic_set(& xprt->count, 1);
#line 1251
  spinlock_check(& xprt->transport_lock);
#line 1251
  __raw_spin_lock_init(& xprt->transport_lock.__annonCompField20.rlock, "&(&xprt->transport_lock)->rlock",
                       & __key);
#line 1252
  spinlock_check(& xprt->reserve_lock);
#line 1252
  __raw_spin_lock_init(& xprt->reserve_lock.__annonCompField20.rlock, "&(&xprt->reserve_lock)->rlock",
                       & __key___0);
#line 1254
  INIT_LIST_HEAD(& xprt->free);
#line 1255
  INIT_LIST_HEAD(& xprt->recv);
#line 1257
  spinlock_check(& xprt->bc_pa_lock);
#line 1257
  __raw_spin_lock_init(& xprt->bc_pa_lock.__annonCompField20.rlock, "&(&xprt->bc_pa_lock)->rlock",
                       & __key___1);
#line 1258
  INIT_LIST_HEAD(& xprt->bc_pa_list);
#line 1261
  xprt->last_used = jiffies;
#line 1262
  xprt->cwnd = 256UL;
#line 1263
  xprt->bind_index = 0U;
#line 1265
  rpc_init_wait_queue(& xprt->binding, "xprt_binding");
#line 1266
  rpc_init_wait_queue(& xprt->pending, "xprt_pending");
#line 1267
  rpc_init_priority_wait_queue(& xprt->sending, "xprt_sending");
#line 1268
  rpc_init_priority_wait_queue(& xprt->backlog, "xprt_backlog");
#line 1270
  xprt_init_xid(xprt);
#line 1272
  xprt->xprt_net = get_net(net);
  }
#line 1273
  return;
}
}
#line 1280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
struct rpc_xprt *xprt_create_transport(struct xprt_create *args ) 
{ 
  struct rpc_xprt *xprt ;
  struct xprt_class *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  void *tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  int tmp___3 ;
  void *tmp___4 ;
  size_t tmp___5 ;
  char *tmp___6 ;
  void *tmp___7 ;
  long tmp___8 ;

  {
  {
#line 1285
  spin_lock(& xprt_list_lock);
#line 1286
  __mptr = (struct list_head  const  *)xprt_list.next;
#line 1286
  t = (struct xprt_class *)__mptr;
  }
#line 1286
  goto ldv_47145;
  ldv_47144: ;
#line 1287
  if (t->ident == args->ident) {
    {
#line 1288
    spin_unlock(& xprt_list_lock);
    }
#line 1289
    goto found;
  } else {

  }
#line 1286
  __mptr___0 = (struct list_head  const  *)t->list.next;
#line 1286
  t = (struct xprt_class *)__mptr___0;
  ldv_47145: ;
#line 1286
  if ((unsigned long )(& t->list) != (unsigned long )(& xprt_list)) {
#line 1288
    goto ldv_47144;
  } else {

  }
  {
#line 1292
  spin_unlock(& xprt_list_lock);
#line 1293
  printk("\vRPC: transport (%d) not supported\n", args->ident);
#line 1294
  tmp = ERR_PTR(-5L);
  }
#line 1294
  return ((struct rpc_xprt *)tmp);
  found: 
  {
#line 1297
  xprt = (*(t->setup))(args);
#line 1298
  tmp___2 = IS_ERR((void const   *)xprt);
  }
#line 1298
  if (tmp___2 != 0L) {
    {
#line 1299
    tmp___1 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
    }
#line 1299
    if (tmp___1 != 0L) {
      {
#line 1299
      tmp___0 = PTR_ERR((void const   *)xprt);
#line 1299
      printk("\001dRPC:       xprt_create_transport: failed, %ld\n", - tmp___0);
      }
    } else {

    }
#line 1301
    goto out;
  } else {

  }
#line 1303
  if ((args->flags & 2U) != 0U) {
#line 1304
    xprt->idle_timeout = 0UL;
  } else {

  }
  {
#line 1305
  __init_work(& xprt->task_cleanup, 0);
#line 1305
  __constr_expr_0.counter = 137438953408L;
#line 1305
  xprt->task_cleanup.data = __constr_expr_0;
#line 1305
  lockdep_init_map(& xprt->task_cleanup.lockdep_map, "(&xprt->task_cleanup)", & __key,
                   0);
#line 1305
  INIT_LIST_HEAD(& xprt->task_cleanup.entry);
#line 1305
  xprt->task_cleanup.func = & xprt_autoclose;
#line 1306
  tmp___3 = xprt_has_timer(xprt);
  }
#line 1306
  if (tmp___3 != 0) {
    {
#line 1307
    init_timer_key(& xprt->timer, 0U, "((&xprt->timer))", & __key___0);
#line 1307
    xprt->timer.function = & xprt_init_autodisconnect;
#line 1307
    xprt->timer.data = (unsigned long )xprt;
    }
  } else {
    {
#line 1310
    init_timer_key(& xprt->timer, 0U, "(&xprt->timer)", & __key___1);
    }
  }
  {
#line 1312
  tmp___5 = strlen(args->servername);
  }
#line 1312
  if (tmp___5 > 256UL) {
    {
#line 1313
    xprt_destroy(xprt);
#line 1314
    tmp___4 = ERR_PTR(-22L);
    }
#line 1314
    return ((struct rpc_xprt *)tmp___4);
  } else {

  }
  {
#line 1316
  tmp___6 = kstrdup(args->servername, 208U);
#line 1316
  xprt->servername = (char const   *)tmp___6;
  }
#line 1317
  if ((unsigned long )xprt->servername == (unsigned long )((char const   *)0)) {
    {
#line 1318
    xprt_destroy(xprt);
#line 1319
    tmp___7 = ERR_PTR(-12L);
    }
#line 1319
    return ((struct rpc_xprt *)tmp___7);
  } else {

  }
  {
#line 1322
  tmp___8 = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 1322
  if (tmp___8 != 0L) {
    {
#line 1322
    printk("\001dRPC:       created transport %p with %u slots\n", xprt, xprt->max_reqs);
    }
  } else {

  }
  out: ;
#line 1325
  return (xprt);
}
}
#line 1333 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
static void xprt_destroy(struct rpc_xprt *xprt ) 
{ 
  long tmp ;

  {
  {
#line 1335
  tmp = __builtin_expect((long )((int )rpc_debug) & 1L, 0L);
  }
#line 1335
  if (tmp != 0L) {
    {
#line 1335
    printk("\001dRPC:       destroying transport %p\n", xprt);
    }
  } else {

  }
  {
#line 1336
  ldv_del_timer_sync_12(& xprt->timer);
#line 1338
  rpc_destroy_wait_queue(& xprt->binding);
#line 1339
  rpc_destroy_wait_queue(& xprt->pending);
#line 1340
  rpc_destroy_wait_queue(& xprt->sending);
#line 1341
  rpc_destroy_wait_queue(& xprt->backlog);
#line 1342
  cancel_work_sync(& xprt->task_cleanup);
#line 1343
  kfree((void const   *)xprt->servername);
#line 1347
  (*((xprt->ops)->destroy))(xprt);
  }
#line 1348
  return;
}
}
#line 1355 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
void xprt_put(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 1357
  tmp = atomic_dec_and_test(& xprt->count);
  }
#line 1357
  if (tmp != 0) {
    {
#line 1358
    xprt_destroy(xprt);
    }
  } else {

  }
#line 1359
  return;
}
}
#line 1366 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprt.c"
struct rpc_xprt *xprt_get(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 1368
  tmp = atomic_add_unless(& xprt->count, 1, 0);
  }
#line 1368
  if (tmp != 0) {
#line 1369
    return (xprt);
  } else {

  }
#line 1370
  return ((struct rpc_xprt *)0);
}
}
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprt.c.aux"
extern int ldv_emg_del_timer_sync(struct timer_list * ) ;
#line 77
extern int ldv_emg_mod_timer(struct timer_list * , unsigned long  ) ;
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprt.c.aux"
static int ldv_del_timer_sync_10(struct timer_list *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 156
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  }
#line 156
  return (tmp);
}
}
#line 160 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprt.c.aux"
static int ldv_mod_timer_11(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 164
  tmp = ldv_emg_mod_timer(ldv_func_arg1, ldv_func_arg2);
  }
#line 164
  return (tmp);
}
}
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprt.c.aux"
static int ldv_del_timer_sync_12(struct timer_list *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 172
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  }
#line 172
  return (tmp);
}
}
#line 329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
  {
#line 334
  tmp = alloc_pages_current(gfp_mask, order);
  }
#line 334
  return (tmp);
}
}
#line 769 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 771
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum ) 
{ 


  {
#line 24
  __asm__  ("  addl %1,%0\n  adcl $0xffff,%0": "=r" (sum): "r" (sum << 16), "0" (sum & 4294901760U));
#line 29
  return ((__sum16 )(~ sum >> 16));
}
}
#line 129
extern __wsum csum_partial(void const   * , int  , __wsum  ) ;
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/checksum.h"
__inline static __wsum csum_add(__wsum csum , __wsum addend ) 
{ 
  u32 res ;

  {
#line 62
  res = csum;
#line 63
  res = res + addend;
#line 64
  return (res + (u32 )(res < addend));
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/checksum.h"
__inline static __wsum csum_block_add(__wsum csum , __wsum csum2 , int offset ) 
{ 
  u32 sum ;
  __wsum tmp ;

  {
#line 75
  sum = csum2;
#line 76
  if (offset & 1) {
#line 77
    sum = ((sum & 16711935U) << 8) + ((sum >> 8) & 16711935U);
  } else {

  }
  {
#line 78
  tmp = csum_add(csum, sum);
  }
#line 78
  return (tmp);
}
}
#line 2468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
extern __wsum skb_checksum(struct sk_buff  const  * , int  , int  , __wsum  ) ;
#line 2470
extern int skb_copy_bits(struct sk_buff  const  * , int  , void * , int  ) ;
#line 2474
extern __wsum skb_copy_and_csum_bits(struct sk_buff  const  * , int  , u8 * , int  ,
                                     __wsum  ) ;
#line 2661 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
__inline static int skb_csum_unnecessary(struct sk_buff  const  *skb ) 
{ 


  {
#line 2663
  return ((int )skb->ip_summed & 1);
}
}
#line 2714 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
extern void netdev_rx_csum_fault(struct net_device * ) ;
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
  {
#line 68
  __rcu_read_lock();
#line 69
  tmp = lowmem_page_address((struct page  const  *)page);
  }
#line 69
  return (tmp);
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
  {
#line 75
  __rcu_read_unlock();
  }
#line 76
  return;
}
}
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
size_t xdr_skb_read_bits(struct xdr_skb_reader *desc , void *to , size_t len ) ;
#line 173
int csum_partial_copy_to_xdr(struct xdr_buf *xdr , struct sk_buff *skb ) ;
#line 174
ssize_t xdr_partial_copy_from_skb(struct xdr_buf *xdr , unsigned int base , struct xdr_skb_reader *desc ,
                                  size_t (*copy_actor)(struct xdr_skb_reader * , void * ,
                                                       size_t  ) ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/socklib.c"
size_t xdr_skb_read_bits(struct xdr_skb_reader *desc , void *to , size_t len ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 31
  if (len > desc->count) {
#line 32
    len = desc->count;
  } else {

  }
  {
#line 33
  tmp = skb_copy_bits((struct sk_buff  const  *)desc->skb, (int )desc->offset, to,
                      (int )len);
#line 33
  tmp___0 = __builtin_expect(tmp != 0, 0L);
  }
#line 33
  if (tmp___0 != 0L) {
#line 34
    return (0UL);
  } else {

  }
#line 35
  desc->count = desc->count - len;
#line 36
  desc->offset = desc->offset + (unsigned int )len;
#line 37
  return (len);
}
}
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/socklib.c"
static size_t xdr_skb_read_and_csum_bits(struct xdr_skb_reader *desc , void *to ,
                                         size_t len ) 
{ 
  unsigned int pos ;
  __wsum csum2 ;

  {
#line 54
  if (len > desc->count) {
#line 55
    len = desc->count;
  } else {

  }
  {
#line 56
  pos = desc->offset;
#line 57
  csum2 = skb_copy_and_csum_bits((struct sk_buff  const  *)desc->skb, (int )pos, (u8 *)to,
                                 (int )len, 0U);
#line 58
  desc->csum = csum_block_add(desc->csum, csum2, (int )pos);
#line 59
  desc->count = desc->count - len;
#line 60
  desc->offset = desc->offset + (unsigned int )len;
  }
#line 61
  return (len);
}
}
#line 130
extern void __compiletime_assert_130(void) ;
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/socklib.c"
ssize_t xdr_partial_copy_from_skb(struct xdr_buf *xdr , unsigned int base , struct xdr_skb_reader *desc ,
                                  size_t (*copy_actor)(struct xdr_skb_reader * , void * ,
                                                       size_t  ) ) 
{ 
  struct page **ppage ;
  unsigned int len ;
  unsigned int pglen ;
  ssize_t copied ;
  size_t ret ;
  long tmp ;
  long tmp___0 ;
  char *kaddr ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  bool __cond ;
  size_t tmp___4 ;

  {
#line 74
  ppage = xdr->pages;
#line 75
  pglen = xdr->page_len;
#line 76
  copied = 0L;
#line 79
  len = (unsigned int )xdr->head[0].iov_len;
#line 80
  if (base < len) {
    {
#line 81
    len = len - base;
#line 82
    ret = (*copy_actor)(desc, (void *)((char *)xdr->head[0].iov_base + (unsigned long )base),
                        (size_t )len);
#line 83
    copied = (ssize_t )((unsigned long )copied + ret);
    }
#line 84
    if (ret != (size_t )len || desc->count == 0UL) {
#line 85
      goto out;
    } else {

    }
#line 86
    base = 0U;
  } else {
#line 88
    base = base - len;
  }
  {
#line 90
  tmp = __builtin_expect(pglen == 0U, 0L);
  }
#line 90
  if (tmp != 0L) {
#line 91
    goto copy_tail;
  } else {

  }
  {
#line 92
  tmp___0 = __builtin_expect(base >= pglen, 0L);
  }
#line 92
  if (tmp___0 != 0L) {
#line 93
    base = base - pglen;
#line 94
    goto copy_tail;
  } else {

  }
#line 96
  if (base != 0U || xdr->page_base != 0U) {
#line 97
    pglen = pglen - base;
#line 98
    base = base + xdr->page_base;
#line 99
    ppage = ppage + (unsigned long )(base >> 12);
#line 100
    base = base & 4095U;
  } else {

  }
  ldv_41974: 
  {
#line 107
  tmp___2 = __builtin_expect((unsigned long )*ppage == (unsigned long )((struct page *)0),
                             0L);
  }
#line 107
  if (tmp___2 != 0L) {
    {
#line 108
    *ppage = alloc_pages(32U, 0U);
#line 109
    tmp___1 = __builtin_expect((unsigned long )*ppage == (unsigned long )((struct page *)0),
                               0L);
    }
#line 109
    if (tmp___1 != 0L) {
#line 110
      if (copied == 0L) {
#line 111
        copied = -12L;
      } else {

      }
#line 112
      goto out;
    } else {

    }
  } else {

  }
  {
#line 116
  len = 4096U;
#line 117
  tmp___3 = kmap_atomic(*ppage);
#line 117
  kaddr = (char *)tmp___3;
  }
#line 118
  if (base != 0U) {
#line 119
    len = len - base;
#line 120
    if (pglen < len) {
#line 121
      len = pglen;
    } else {

    }
    {
#line 122
    ret = (*copy_actor)(desc, (void *)(kaddr + (unsigned long )base), (size_t )len);
#line 123
    base = 0U;
    }
  } else {
#line 125
    if (pglen < len) {
#line 126
      len = pglen;
    } else {

    }
    {
#line 127
    ret = (*copy_actor)(desc, (void *)kaddr, (size_t )len);
    }
  }
#line 130
  __cond = 0;
#line 130
  if ((int )__cond) {
    {
#line 130
    __compiletime_assert_130();
    }
  } else {

  }
  {
#line 130
  __kunmap_atomic((void *)kaddr);
#line 131
  copied = (ssize_t )((unsigned long )copied + ret);
  }
#line 132
  if (ret != (size_t )len || desc->count == 0UL) {
#line 133
    goto out;
  } else {

  }
#line 134
  ppage = ppage + 1;
#line 135
  pglen = pglen - len;
#line 135
  if (pglen != 0U) {
#line 137
    goto ldv_41974;
  } else {

  }

  copy_tail: 
#line 137
  len = (unsigned int )xdr->tail[0].iov_len;
#line 138
  if (base < len) {
    {
#line 139
    tmp___4 = (*copy_actor)(desc, (void *)((char *)xdr->tail[0].iov_base + (unsigned long )base),
                            (size_t )(len - base));
#line 139
    copied = (ssize_t )((unsigned long )copied + tmp___4);
    }
  } else {

  }
  out: ;
#line 141
  return (copied);
}
}
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/socklib.c"
int csum_partial_copy_to_xdr(struct xdr_buf *xdr , struct sk_buff *skb ) 
{ 
  struct xdr_skb_reader desc ;
  int tmp ;
  ssize_t tmp___0 ;
  __wsum csum2 ;
  __sum16 tmp___1 ;
  long tmp___2 ;
  ssize_t tmp___3 ;

  {
  {
#line 157
  desc.skb = skb;
#line 158
  desc.offset = 8U;
#line 159
  desc.count = (size_t )(skb->len - desc.offset);
#line 161
  tmp = skb_csum_unnecessary((struct sk_buff  const  *)skb);
  }
#line 161
  if (tmp != 0) {
#line 162
    goto no_checksum;
  } else {

  }
  {
#line 164
  desc.csum = csum_partial((void const   *)skb->data, (int )desc.offset, skb->__annonCompField55.csum);
#line 165
  tmp___0 = xdr_partial_copy_from_skb(xdr, 0U, & desc, & xdr_skb_read_and_csum_bits);
  }
#line 165
  if (tmp___0 < 0L) {
#line 166
    return (-1);
  } else {

  }
#line 167
  if (desc.offset != skb->len) {
    {
#line 169
    csum2 = skb_checksum((struct sk_buff  const  *)skb, (int )desc.offset, (int )(skb->len - desc.offset),
                         0U);
#line 170
    desc.csum = csum_block_add(desc.csum, csum2, (int )desc.offset);
    }
  } else {

  }
#line 172
  if (desc.count != 0UL) {
#line 173
    return (-1);
  } else {

  }
  {
#line 174
  tmp___1 = csum_fold(desc.csum);
  }
#line 174
  if ((unsigned int )tmp___1 != 0U) {
#line 175
    return (-1);
  } else {

  }
  {
#line 176
  tmp___2 = __builtin_expect((unsigned int )*((unsigned char *)skb + 124UL) == 8U,
                             0L);
  }
#line 176
  if (tmp___2 != 0L) {
    {
#line 177
    netdev_rx_csum_fault(skb->dev);
    }
  } else {

  }
#line 178
  return (0);
  no_checksum: 
  {
#line 180
  tmp___3 = xdr_partial_copy_from_skb(xdr, 0U, & desc, & xdr_skb_read_bits);
  }
#line 180
  if (tmp___3 < 0L) {
#line 181
    return (-1);
  } else {

  }
#line 182
  if (desc.count != 0UL) {
#line 183
    return (-1);
  } else {

  }
#line 184
  return (0);
}
}
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprtsock.c.aux"
int ldv_try_module_get(struct module *module ) ;
#line 14
void ldv_module_put(struct module *module ) ;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/export.h"
extern struct module __this_module ;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 129
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 130
  return;
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/page_64.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/string.h"
extern size_t strlcpy(char * , char const   * , size_t  ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/debug_locks.h"
extern void debug_check_no_locks_freed(void const   * , unsigned long  ) ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rwlock_api_smp.h"
extern void _raw_read_lock_bh(rwlock_t * ) ;
#line 21
extern void _raw_write_lock_bh(rwlock_t * ) ;
#line 32
extern void _raw_read_unlock_bh(rwlock_t * ) ;
#line 33
extern void _raw_write_unlock_bh(rwlock_t * ) ;
#line 171 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mutex.h"
extern int mutex_trylock(struct mutex * ) ;
#line 172
extern void mutex_unlock(struct mutex * ) ;
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
extern void delayed_work_timer_fn(unsigned long  ) ;
#line 428
extern bool queue_delayed_work_on(int  , struct workqueue_struct * , struct delayed_work * ,
                                  unsigned long  ) ;
#line 445
extern bool cancel_delayed_work(struct delayed_work * ) ;
#line 446
extern bool cancel_delayed_work_sync(struct delayed_work * ) ;
#line 480 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
__inline static bool queue_delayed_work(struct workqueue_struct *wq , struct delayed_work *dwork ,
                                        unsigned long delay ) 
{ 
  bool tmp ;

  {
  {
#line 484
  tmp = queue_delayed_work_on(4096, wq, dwork, delay);
  }
#line 484
  return (tmp);
}
}
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/delay.h"
extern unsigned long msleep_interruptible(unsigned int  ) ;
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 366 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sysctl.h"
extern int proc_dointvec_minmax(struct ctl_table * , int  , void * , size_t * , loff_t * ) ;
#line 48
extern int proc_dointvec_jiffies(struct ctl_table * , int  , void * , size_t * , loff_t * ) ;
#line 186
extern struct ctl_table_header *register_sysctl_table(struct ctl_table * ) ;
#line 190
extern void unregister_sysctl_table(struct ctl_table_header * ) ;
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 278
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 1288 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff  const  *skb ) 
{ 


  {
#line 1290
  return ((unsigned int )skb->len - (unsigned int )skb->data_len);
}
}
#line 2443
extern struct sk_buff *skb_recv_datagram(struct sock * , unsigned int  , int  , int * ) ;
#line 2463
extern void skb_free_datagram(struct sock * , struct sk_buff * ) ;
#line 2493 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
__inline static void *skb_header_pointer(struct sk_buff  const  *skb , int offset ,
                                         int len , void *buffer ) 
{ 
  int hlen ;
  unsigned int tmp ;
  int tmp___0 ;

  {
  {
#line 2496
  tmp = skb_headlen(skb);
#line 2496
  hlen = (int )tmp;
  }
#line 2498
  if (hlen - offset >= len) {
#line 2499
    return ((void *)(skb->data + (unsigned long )offset));
  } else {

  }
  {
#line 2501
  tmp___0 = skb_copy_bits(skb, offset, buffer, len);
  }
#line 2501
  if (tmp___0 < 0) {
#line 2502
    return ((void *)0);
  } else {

  }
#line 2504
  return (buffer);
}
}
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seq_file.h"
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/net_namespace.h"
__inline static struct net *read_pnet(struct net * const  *pnet ) 
{ 


  {
#line 252
  return ((struct net *)*pnet);
}
}
#line 468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
static bool ldv_try_module_get_11(struct module *ldv_func_arg1 ) ;
#line 472
static bool ldv_try_module_get_12(struct module *ldv_func_arg1 ) ;
#line 476
static bool ldv_try_module_get_13(struct module *ldv_func_arg1 ) ;
#line 480
static bool ldv_try_module_get_14(struct module *ldv_func_arg1 ) ;
#line 486
static void ldv_module_put_10(struct module *ldv_func_arg1 ) ;
#line 685 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static void sock_reset_flag(struct sock *sk , enum sock_flags flag ) 
{ 


  {
  {
#line 687
  __clear_bit((int )flag, (unsigned long volatile   *)(& sk->sk_flags));
  }
#line 688
  return;
}
}
#line 690 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static bool sock_flag(struct sock  const  *sk , enum sock_flags flag ) 
{ 
  int tmp___0 ;

  {
  {
#line 692
  tmp___0 = variable_test_bit((int )flag, (unsigned long const volatile   *)(& sk->sk_flags));
  }
#line 692
  return (tmp___0 != 0);
}
}
#line 733 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static int sk_stream_min_wspace(struct sock  const  *sk ) 
{ 


  {
#line 735
  return ((int )(sk->sk_wmem_queued >> 1));
}
}
#line 738 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static int sk_stream_wspace(struct sock  const  *sk ) 
{ 


  {
#line 740
  return ((int )sk->sk_sndbuf - (int )sk->sk_wmem_queued);
}
}
#line 860
extern void sk_set_memalloc(struct sock * ) ;
#line 861
extern void sk_clear_memalloc(struct sock * ) ;
#line 1568
extern ssize_t sock_no_sendpage(struct socket * , struct page * , int  , size_t  ,
                                int  ) ;
#line 2088 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static bool sock_writeable(struct sock  const  *sk ) 
{ 
  int tmp ;

  {
  {
#line 2090
  tmp = atomic_read(& sk->sk_wmem_alloc);
  }
#line 2090
  return (tmp < (int )(sk->sk_sndbuf >> 1));
}
}
#line 2212 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static struct net *sock_net(struct sock  const  *sk ) 
{ 
  struct net *tmp ;

  {
  {
#line 2214
  tmp = read_pnet(& sk->__sk_common.skc_net);
  }
#line 2214
  return (tmp);
}
}
#line 337 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/tcp.h"
__inline static struct tcp_sock *tcp_sk(struct sock  const  *sk ) 
{ 


  {
#line 339
  return ((struct tcp_sock *)sk);
}
}
#line 244 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
void *rpc_malloc(struct rpc_task *task , size_t size ) ;
#line 245
void rpc_free(void *buffer ) ;
#line 328 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
int xs_swapper(struct rpc_xprt *xprt , int enable ) ;
#line 344 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static void xprt_set_connected(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 346
  set_bit(1U, (unsigned long volatile   *)(& xprt->state));
  }
#line 347
  return;
}
}
#line 359 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static int xprt_test_and_set_connected(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 361
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& xprt->state));
  }
#line 361
  return (tmp);
}
}
#line 369 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static void xprt_clear_connecting(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 371
  __asm__  volatile   ("": : : "memory");
#line 372
  clear_bit(2, (unsigned long volatile   *)(& xprt->state));
#line 373
  __asm__  volatile   ("": : : "memory");
  }
#line 374
  return;
}
}
#line 386 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static void xprt_set_bound(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 388
  test_and_set_bit(4, (unsigned long volatile   *)(& xprt->state));
  }
#line 389
  return;
}
}
#line 148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
void rpcb_getport_async(struct rpc_task *task ) ;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/addr.h"
size_t rpc_ntop(struct sockaddr  const  *sap , char *buf , size_t const   buflen ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/addr.h"
__inline static unsigned short rpc_get_port(struct sockaddr  const  *sap ) 
{ 
  __u16 tmp ;
  __u16 tmp___0 ;

  {
  {
#line 25
  if ((int )sap->sa_family == 2) {
#line 25
    goto case_2;
  } else {

  }
#line 27
  if ((int )sap->sa_family == 10) {
#line 27
    goto case_10;
  } else {

  }
#line 24
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 26
  tmp = __fswab16((int )((struct sockaddr_in *)sap)->sin_port);
  }
#line 26
  return (tmp);
  case_10: /* CIL Label */ 
  {
#line 28
  tmp___0 = __fswab16((int )((struct sockaddr_in6 *)sap)->sin6_port);
  }
#line 28
  return (tmp___0);
  switch_break: /* CIL Label */ ;
  }
#line 30
  return (0U);
}
}
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/addr.h"
__inline static void rpc_set_port___0(struct sockaddr *sap , unsigned short const   port ) 
{ 
  __u16 tmp ;
  __u16 tmp___0 ;

  {
  {
#line 37
  if ((int )sap->sa_family == 2) {
#line 37
    goto case_2;
  } else {

  }
#line 40
  if ((int )sap->sa_family == 10) {
#line 40
    goto case_10;
  } else {

  }
#line 36
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 38
  tmp = __fswab16((int )port);
#line 38
  ((struct sockaddr_in *)sap)->sin_port = tmp;
  }
#line 39
  goto ldv_45546;
  case_10: /* CIL Label */ 
  {
#line 41
  tmp___0 = __fswab16((int )port);
#line 41
  ((struct sockaddr_in6 *)sap)->sin6_port = tmp___0;
  }
#line 42
  goto ldv_45546;
  switch_break: /* CIL Label */ ;
  }
  ldv_45546: ;
#line 45
  return;
}
}
#line 12 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprtsock.h"
int init_socket_xprt(void) ;
#line 13
void cleanup_socket_xprt(void) ;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/bc_xprt.h"
struct rpc_rqst *xprt_alloc_bc_request(struct rpc_xprt *xprt ) ;
#line 590 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/tcp.h"
extern int tcp_read_sock(struct sock * , read_descriptor_t * , int (*)(read_descriptor_t * ,
                                                                       struct sk_buff * ,
                                                                       unsigned int  ,
                                                                       size_t  ) ) ;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc.h"
int svc_send_common(struct socket *sock , struct xdr_buf *xdr , struct page *headpage ,
                    unsigned long headoffset , struct page *tailpage , unsigned long tailoffset ) ;
#line 52
static void xs_close(struct rpc_xprt *xprt ) ;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int xprt_udp_slot_table_entries  =    16U;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int xprt_tcp_slot_table_entries  =    2U;
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int xprt_max_tcp_slot_table_entries  =    65536U;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int xprt_min_resvport  =    665U;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int xprt_max_resvport  =    1023U;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int xs_tcp_fin_timeout  =    3750U;
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int min_slot_table_size  =    2U;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int max_slot_table_size  =    65536U;
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int max_tcp_slot_table_limit  =    65536U;
#line 81 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int xprt_min_resvport_limit  =    1U;
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned int xprt_max_resvport_limit  =    65535U;
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct ctl_table_header *sunrpc_table_header  ;
#line 90 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static ctl_table xs_tunables_table[7U]  = {      {"udp_slot_table_entries", (void *)(& xprt_udp_slot_table_entries), 4, 420U,
      0, & proc_dointvec_minmax, 0, (void *)(& min_slot_table_size), (void *)(& max_slot_table_size)}, 
        {"tcp_slot_table_entries",
      (void *)(& xprt_tcp_slot_table_entries), 4, 420U, 0, & proc_dointvec_minmax,
      0, (void *)(& min_slot_table_size), (void *)(& max_slot_table_size)}, 
        {"tcp_max_slot_table_entries", (void *)(& xprt_max_tcp_slot_table_entries), 4,
      420U, 0, & proc_dointvec_minmax, 0, (void *)(& min_slot_table_size), (void *)(& max_tcp_slot_table_limit)}, 
        {"min_resvport",
      (void *)(& xprt_min_resvport), 4, 420U, 0, & proc_dointvec_minmax, 0, (void *)(& xprt_min_resvport_limit),
      (void *)(& xprt_max_resvport_limit)}, 
        {"max_resvport", (void *)(& xprt_max_resvport), 4, 420U, 0, & proc_dointvec_minmax,
      0, (void *)(& xprt_min_resvport_limit), (void *)(& xprt_max_resvport_limit)}, 
        {"tcp_fin_timeout",
      (void *)(& xs_tcp_fin_timeout), 4, 420U, 0, & proc_dointvec_jiffies, 0, 0, 0}};
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static ctl_table sunrpc_table[2U]  = {      {"sunrpc", 0, 0, 365U, (struct ctl_table *)(& xs_tunables_table), 0, 0, 0, 0}};
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_pktdump(char *msg , u32 *packet , unsigned int count ) 
{ 


  {
#line 213
  return;
}
}
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static struct sockaddr *xs_addr(struct rpc_xprt *xprt ) 
{ 


  {
#line 277
  return ((struct sockaddr *)(& xprt->addr));
}
}
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static struct sockaddr_un *xs_addr_un(struct rpc_xprt *xprt ) 
{ 


  {
#line 282
  return ((struct sockaddr_un *)(& xprt->addr));
}
}
#line 285 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static struct sockaddr_in *xs_addr_in(struct rpc_xprt *xprt ) 
{ 


  {
#line 287
  return ((struct sockaddr_in *)(& xprt->addr));
}
}
#line 290 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static struct sockaddr_in6 *xs_addr_in6(struct rpc_xprt *xprt ) 
{ 


  {
#line 292
  return ((struct sockaddr_in6 *)(& xprt->addr));
}
}
#line 295 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_format_common_peer_addresses(struct rpc_xprt *xprt ) 
{ 
  struct sockaddr *sap ;
  struct sockaddr *tmp ;
  struct sockaddr_in6 *sin6 ;
  struct sockaddr_in *sin ;
  struct sockaddr_un *sun ;
  char buf[128U] ;
  char *tmp___0 ;
  char *tmp___1 ;
  __u32 tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;

  {
  {
#line 297
  tmp = xs_addr(xprt);
#line 297
  sap = tmp;
  }
  {
#line 304
  if ((int )sap->sa_family == 1) {
#line 304
    goto case_1;
  } else {

  }
#line 310
  if ((int )sap->sa_family == 2) {
#line 310
    goto case_2;
  } else {

  }
#line 317
  if ((int )sap->sa_family == 10) {
#line 317
    goto case_10;
  } else {

  }
#line 324
  goto switch_default;
  case_1: /* CIL Label */ 
  {
#line 305
  sun = xs_addr_un(xprt);
#line 306
  strlcpy((char *)(& buf), (char const   *)(& sun->sun_path), 128UL);
#line 307
  tmp___0 = kstrdup((char const   *)(& buf), 208U);
#line 307
  xprt->address_strings[0] = (char const   *)tmp___0;
  }
#line 309
  goto ldv_50031;
  case_2: /* CIL Label */ 
  {
#line 311
  rpc_ntop((struct sockaddr  const  *)sap, (char *)(& buf), 128UL);
#line 312
  tmp___1 = kstrdup((char const   *)(& buf), 208U);
#line 312
  xprt->address_strings[0] = (char const   *)tmp___1;
#line 314
  sin = xs_addr_in(xprt);
#line 315
  tmp___2 = __fswab32(sin->sin_addr.s_addr);
#line 315
  snprintf((char *)(& buf), 128UL, "%08x", tmp___2);
  }
#line 316
  goto ldv_50031;
  case_10: /* CIL Label */ 
  {
#line 318
  rpc_ntop((struct sockaddr  const  *)sap, (char *)(& buf), 128UL);
#line 319
  tmp___3 = kstrdup((char const   *)(& buf), 208U);
#line 319
  xprt->address_strings[0] = (char const   *)tmp___3;
#line 321
  sin6 = xs_addr_in6(xprt);
#line 322
  snprintf((char *)(& buf), 128UL, "%pi6", & sin6->sin6_addr);
  }
#line 323
  goto ldv_50031;
  switch_default: /* CIL Label */ 
  {
#line 325
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/xprtsock.c"),
                       "i" (325), "i" (12UL));
#line 325
  __builtin_unreachable();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50031: 
  {
#line 328
  tmp___4 = kstrdup((char const   *)(& buf), 208U);
#line 328
  xprt->address_strings[3] = (char const   *)tmp___4;
  }
#line 329
  return;
}
}
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_format_common_peer_ports(struct rpc_xprt *xprt ) 
{ 
  struct sockaddr *sap ;
  struct sockaddr *tmp ;
  char buf[128U] ;
  unsigned short tmp___0 ;
  char *tmp___1 ;
  unsigned short tmp___2 ;
  char *tmp___3 ;

  {
  {
#line 333
  tmp = xs_addr(xprt);
#line 333
  sap = tmp;
#line 336
  tmp___0 = rpc_get_port((struct sockaddr  const  *)sap);
#line 336
  snprintf((char *)(& buf), 128UL, "%u", (int )tmp___0);
#line 337
  tmp___1 = kstrdup((char const   *)(& buf), 208U);
#line 337
  xprt->address_strings[1] = (char const   *)tmp___1;
#line 339
  tmp___2 = rpc_get_port((struct sockaddr  const  *)sap);
#line 339
  snprintf((char *)(& buf), 128UL, "%4hx", (int )tmp___2);
#line 340
  tmp___3 = kstrdup((char const   *)(& buf), 208U);
#line 340
  xprt->address_strings[4] = (char const   *)tmp___3;
  }
#line 341
  return;
}
}
#line 343 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_format_peer_addresses(struct rpc_xprt *xprt , char const   *protocol ,
                                     char const   *netid ) 
{ 


  {
  {
#line 347
  xprt->address_strings[2] = protocol;
#line 348
  xprt->address_strings[5] = netid;
#line 349
  xs_format_common_peer_addresses(xprt);
#line 350
  xs_format_common_peer_ports(xprt);
  }
#line 351
  return;
}
}
#line 353 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_update_peer_port(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 355
  kfree((void const   *)xprt->address_strings[4]);
#line 356
  kfree((void const   *)xprt->address_strings[1]);
#line 358
  xs_format_common_peer_ports(xprt);
  }
#line 359
  return;
}
}
#line 361 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_free_peer_addresses(struct rpc_xprt *xprt ) 
{ 
  unsigned int i ;

  {
#line 365
  i = 0U;
#line 365
  goto ldv_50057;
  ldv_50056: ;
  {
#line 367
  if (i == 2U) {
#line 367
    goto case_2;
  } else {

  }
#line 368
  if (i == 5U) {
#line 368
    goto case_5;
  } else {

  }
#line 370
  goto switch_default;
  case_2: /* CIL Label */ ;
  case_5: /* CIL Label */ ;
#line 369
  goto ldv_50054;
  switch_default: /* CIL Label */ 
  {
#line 371
  kfree((void const   *)xprt->address_strings[i]);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50054: 
#line 365
  i = i + 1U;
  ldv_50057: ;
#line 365
  if (i <= 5U) {
#line 367
    goto ldv_50056;
  } else {

  }

#line 372
  return;
}
}
#line 377 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_send_kvec(struct socket *sock , struct sockaddr *addr , int addrlen ,
                        struct kvec *vec , unsigned int base , int more ) 
{ 
  struct msghdr msg ;
  struct kvec iov ;
  int tmp ;
  int tmp___0 ;

  {
#line 379
  msg.msg_name = (void *)addr;
#line 379
  msg.msg_namelen = addrlen;
#line 379
  msg.msg_iov = 0;
#line 379
  msg.msg_iovlen = 0UL;
#line 379
  msg.msg_control = 0;
#line 379
  msg.msg_controllen = 0UL;
#line 379
  msg.msg_flags = more != 0 ? 49216U : 16448U;
#line 384
  iov.iov_base = vec->iov_base + (unsigned long )base;
#line 384
  iov.iov_len = vec->iov_len - (size_t )base;
#line 389
  if (iov.iov_len != 0UL) {
    {
#line 390
    tmp = kernel_sendmsg(sock, & msg, & iov, 1UL, iov.iov_len);
    }
#line 390
    return (tmp);
  } else {

  }
  {
#line 391
  tmp___0 = kernel_sendmsg(sock, & msg, (struct kvec *)0, 0UL, 0UL);
  }
#line 391
  return (tmp___0);
}
}
#line 394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_send_pagedata(struct socket *sock , struct xdr_buf *xdr , unsigned int base ,
                            int more , bool zerocopy ) 
{ 
  ssize_t (*do_sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
  struct page **ppage ;
  unsigned int remainder ;
  int err ;
  int sent ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int flags ;
  ssize_t tmp ;

  {
#line 400
  sent = 0;
#line 402
  remainder = xdr->page_len - base;
#line 403
  base = base + xdr->page_base;
#line 404
  ppage = xdr->pages + (unsigned long )(base >> 12);
#line 405
  base = base & 4095U;
#line 406
  do_sendpage = (sock->ops)->sendpage;
#line 407
  if (! zerocopy) {
#line 408
    do_sendpage = & sock_no_sendpage;
  } else {

  }
  ldv_50092: 
#line 410
  __min1 = 4096U - base;
#line 410
  __min2 = remainder;
#line 410
  len = __min1 < __min2 ? __min1 : __min2;
#line 411
  flags = 16448;
#line 413
  remainder = remainder - len;
#line 414
  if (remainder != 0U || more != 0) {
#line 415
    flags = flags | 32768;
  } else {

  }
  {
#line 416
  tmp = (*do_sendpage)(sock, *ppage, (int )base, (size_t )len, flags);
#line 416
  err = (int )tmp;
  }
#line 417
  if (remainder == 0U || (unsigned int )err != len) {
#line 418
    goto ldv_50091;
  } else {

  }
#line 419
  sent = sent + err;
#line 420
  ppage = ppage + 1;
#line 421
  base = 0U;
#line 422
  goto ldv_50092;
  ldv_50091: ;
#line 423
  if (sent == 0) {
#line 424
    return (err);
  } else {

  }
#line 425
  if (err > 0) {
#line 426
    sent = sent + err;
  } else {

  }
#line 427
  return (sent);
}
}
#line 440 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_sendpages(struct socket *sock , struct sockaddr *addr , int addrlen ,
                        struct xdr_buf *xdr , unsigned int base , bool zerocopy ) 
{ 
  unsigned int remainder ;
  int err ;
  int sent ;
  long tmp ;
  unsigned int len ;
  unsigned int len___0 ;

  {
  {
#line 442
  remainder = xdr->len - base;
#line 443
  sent = 0;
#line 445
  tmp = __builtin_expect((unsigned long )sock == (unsigned long )((struct socket *)0),
                         0L);
  }
#line 445
  if (tmp != 0L) {
#line 446
    return (-88);
  } else {

  }
  {
#line 448
  clear_bit(0, (unsigned long volatile   *)(& sock->flags));
  }
#line 449
  if (base != 0U) {
#line 450
    addr = (struct sockaddr *)0;
#line 451
    addrlen = 0;
  } else {

  }
#line 454
  if ((size_t )base < xdr->head[0].iov_len || (unsigned long )addr != (unsigned long )((struct sockaddr *)0)) {
    {
#line 455
    len = (unsigned int )xdr->head[0].iov_len - base;
#line 456
    remainder = remainder - len;
#line 457
    err = xs_send_kvec(sock, addr, addrlen, (struct kvec *)(& xdr->head), base, remainder != 0U);
    }
#line 458
    if (remainder == 0U || (unsigned int )err != len) {
#line 459
      goto out;
    } else {

    }
#line 460
    sent = sent + err;
#line 461
    base = 0U;
  } else {
#line 463
    base = base - (unsigned int )xdr->head[0].iov_len;
  }
#line 465
  if (base < xdr->page_len) {
    {
#line 466
    len___0 = xdr->page_len - base;
#line 467
    remainder = remainder - len___0;
#line 468
    err = xs_send_pagedata(sock, xdr, base, remainder != 0U, (int )zerocopy);
    }
#line 469
    if (remainder == 0U || (unsigned int )err != len___0) {
#line 470
      goto out;
    } else {

    }
#line 471
    sent = sent + err;
#line 472
    base = 0U;
  } else {
#line 474
    base = base - xdr->page_len;
  }
#line 476
  if ((size_t )base >= xdr->tail[0].iov_len) {
#line 477
    return (sent);
  } else {

  }
  {
#line 478
  err = xs_send_kvec(sock, (struct sockaddr *)0, 0, (struct kvec *)(& xdr->tail),
                     base, 0);
  }
  out: ;
#line 480
  if (sent == 0) {
#line 481
    return (err);
  } else {

  }
#line 482
  if (err > 0) {
#line 483
    sent = sent + err;
  } else {

  }
#line 484
  return (sent);
}
}
#line 487 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_nospace_callback(struct rpc_task *task ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;

  {
  {
#line 489
  __mptr = (struct rpc_xprt  const  *)(task->tk_rqstp)->rq_xprt;
#line 489
  transport = (struct sock_xprt *)__mptr;
#line 491
  (transport->inet)->sk_write_pending = (transport->inet)->sk_write_pending - 1;
#line 492
  clear_bit(0, (unsigned long volatile   *)(& (transport->sock)->flags));
  }
#line 493
  return;
}
}
#line 500 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_nospace(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct sock *sk ;
  int ret ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 502
  req = task->tk_rqstp;
#line 503
  xprt = req->rq_xprt;
#line 504
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 504
  transport = (struct sock_xprt *)__mptr;
#line 505
  sk = transport->inet;
#line 506
  ret = -11;
#line 508
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 508
  if (tmp != 0L) {
    {
#line 508
    printk("\001dRPC: %5u xmit incomplete (%u left of %u)\n", (int )task->tk_pid,
           req->rq_snd_buf.len - req->rq_bytes_sent, req->rq_snd_buf.len);
    }
  } else {

  }
  {
#line 513
  spin_lock_bh(& xprt->transport_lock);
#line 516
  tmp___1 = xprt_connected(xprt);
  }
#line 516
  if (tmp___1 != 0) {
    {
#line 517
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& (transport->sock)->flags));
    }
#line 517
    if (tmp___0 != 0) {
      {
#line 522
      set_bit(2U, (unsigned long volatile   *)(& (transport->sock)->flags));
#line 523
      sk->sk_write_pending = sk->sk_write_pending + 1;
#line 525
      xprt_wait_for_buffer_space(task, & xs_nospace_callback);
      }
    } else {

    }
  } else {
    {
#line 528
    clear_bit(0, (unsigned long volatile   *)(& (transport->sock)->flags));
#line 529
    ret = -107;
    }
  }
  {
#line 532
  spin_unlock_bh(& xprt->transport_lock);
#line 535
  (*(sk->sk_write_space))(sk);
  }
#line 536
  return (ret);
}
}
#line 542 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_encode_stream_record_marker(struct xdr_buf *buf ) 
{ 
  u32 reclen ;
  rpc_fraghdr *base ;
  __u32 tmp ;

  {
  {
#line 544
  reclen = buf->len - 4U;
#line 545
  base = (rpc_fraghdr *)buf->head[0].iov_base;
#line 546
  tmp = __fswab32(reclen | 2147483648U);
#line 546
  *base = tmp;
  }
#line 547
  return;
}
}
#line 560 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_local_send_request(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct xdr_buf *xdr ;
  int status ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 562
  req = task->tk_rqstp;
#line 563
  xprt = req->rq_xprt;
#line 565
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 565
  transport = (struct sock_xprt *)__mptr;
#line 566
  xdr = & req->rq_snd_buf;
#line 569
  xs_encode_stream_record_marker(& req->rq_snd_buf);
#line 571
  xs_pktdump((char *)"packet data:", (u32 *)((struct kvec *)(& req->rq_snd_buf.head))->iov_base,
             (unsigned int )((struct kvec *)(& req->rq_snd_buf.head))->iov_len);
#line 574
  status = xs_sendpages(transport->sock, (struct sockaddr *)0, 0, xdr, req->rq_bytes_sent,
                        1);
#line 576
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 576
  if (tmp != 0L) {
    {
#line 576
    printk("\001dRPC:       %s(%u) = %d\n", "xs_local_send_request", xdr->len - req->rq_bytes_sent,
           status);
    }
  } else {

  }
  {
#line 578
  tmp___1 = __builtin_expect(status >= 0, 1L);
  }
#line 578
  if (tmp___1 != 0L) {
    {
#line 579
    req->rq_bytes_sent = req->rq_bytes_sent + (u32 )status;
#line 580
    req->rq_xmit_bytes_sent = req->rq_xmit_bytes_sent + (size_t )status;
#line 581
    tmp___0 = __builtin_expect(req->rq_bytes_sent >= req->rq_snd_buf.len, 1L);
    }
#line 581
    if (tmp___0 != 0L) {
#line 582
      req->rq_bytes_sent = 0U;
#line 583
      return (0);
    } else {

    }
#line 585
    status = -11;
  } else {

  }
  {
#line 589
  if (status == -11) {
#line 589
    goto case_neg_11;
  } else {

  }
#line 595
  if (status == -32) {
#line 595
    goto case_neg_32;
  } else {

  }
#line 592
  goto switch_default;
  case_neg_11: /* CIL Label */ 
  {
#line 590
  status = xs_nospace(task);
  }
#line 591
  goto ldv_50140;
  switch_default: /* CIL Label */ 
  {
#line 593
  tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 593
  if (tmp___2 != 0L) {
    {
#line 593
    printk("\001dRPC:       sendmsg returned unrecognized error %d\n", - status);
    }
  } else {

  }
  case_neg_32: /* CIL Label */ 
  {
#line 596
  xs_close(xprt);
#line 597
  status = -107;
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50140: ;
#line 600
  return (status);
}
}
#line 614 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_udp_send_request(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct xdr_buf *xdr ;
  int status ;
  int tmp ;
  struct sockaddr *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 616
  req = task->tk_rqstp;
#line 617
  xprt = req->rq_xprt;
#line 618
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 618
  transport = (struct sock_xprt *)__mptr;
#line 619
  xdr = & req->rq_snd_buf;
#line 622
  xs_pktdump((char *)"packet data:", (u32 *)((struct kvec *)(& req->rq_snd_buf.head))->iov_base,
             (unsigned int )((struct kvec *)(& req->rq_snd_buf.head))->iov_len);
#line 626
  tmp = xprt_bound(xprt);
  }
#line 626
  if (tmp == 0) {
#line 627
    return (-107);
  } else {

  }
  {
#line 628
  tmp___0 = xs_addr(xprt);
#line 628
  status = xs_sendpages(transport->sock, tmp___0, (int )xprt->addrlen, xdr, req->rq_bytes_sent,
                        1);
#line 633
  tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 633
  if (tmp___1 != 0L) {
    {
#line 633
    printk("\001dRPC:       xs_udp_send_request(%u) = %d\n", xdr->len - req->rq_bytes_sent,
           status);
    }
  } else {

  }
#line 636
  if (status >= 0) {
#line 637
    req->rq_xmit_bytes_sent = req->rq_xmit_bytes_sent + (size_t )status;
#line 638
    if ((unsigned int )status >= req->rq_snd_buf.len) {
#line 639
      return (0);
    } else {

    }
#line 641
    status = -11;
  } else {

  }
  {
#line 645
  if (status == -88) {
#line 645
    goto case_neg_88;
  } else {

  }
#line 649
  if (status == -11) {
#line 649
    goto case_neg_11;
  } else {

  }
#line 655
  if (status == -101) {
#line 655
    goto case_neg_101;
  } else {

  }
#line 656
  if (status == -32) {
#line 656
    goto case_neg_32;
  } else {

  }
#line 657
  if (status == -111) {
#line 657
    goto case_neg_111;
  } else {

  }
#line 652
  goto switch_default;
  case_neg_88: /* CIL Label */ 
#line 646
  status = -107;
#line 648
  goto ldv_50154;
  case_neg_11: /* CIL Label */ 
  {
#line 650
  status = xs_nospace(task);
  }
#line 651
  goto ldv_50154;
  switch_default: /* CIL Label */ 
  {
#line 653
  tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 653
  if (tmp___2 != 0L) {
    {
#line 653
    printk("\001dRPC:       sendmsg returned unrecognized error %d\n", - status);
    }
  } else {

  }
  case_neg_101: /* CIL Label */ ;
  case_neg_32: /* CIL Label */ ;
  case_neg_111: /* CIL Label */ 
  {
#line 660
  clear_bit(0, (unsigned long volatile   *)(& (transport->sock)->flags));
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50154: ;
#line 663
  return (status);
}
}
#line 673 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_shutdown(struct rpc_xprt *xprt ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct socket *sock ;

  {
#line 675
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 675
  transport = (struct sock_xprt *)__mptr;
#line 676
  sock = transport->sock;
#line 678
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
    {
#line 679
    kernel_sock_shutdown(sock, 1);
    }
  } else {

  }
#line 680
  return;
}
}
#line 696 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_tcp_send_request(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct xdr_buf *xdr ;
  bool zerocopy ;
  int status ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 698
  req = task->tk_rqstp;
#line 699
  xprt = req->rq_xprt;
#line 700
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 700
  transport = (struct sock_xprt *)__mptr;
#line 701
  xdr = & req->rq_snd_buf;
#line 702
  zerocopy = 1;
#line 705
  xs_encode_stream_record_marker(& req->rq_snd_buf);
#line 707
  xs_pktdump((char *)"packet data:", (u32 *)((struct kvec *)(& req->rq_snd_buf.head))->iov_base,
             (unsigned int )((struct kvec *)(& req->rq_snd_buf.head))->iov_len);
  }
#line 714
  if (((int )task->tk_flags & 2048) != 0) {
#line 715
    zerocopy = 0;
  } else {

  }
  ldv_50180: 
  {
#line 721
  status = xs_sendpages(transport->sock, (struct sockaddr *)0, 0, xdr, req->rq_bytes_sent,
                        (int )zerocopy);
#line 725
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 725
  if (tmp != 0L) {
    {
#line 725
    printk("\001dRPC:       xs_tcp_send_request(%u) = %d\n", xdr->len - req->rq_bytes_sent,
           status);
    }
  } else {

  }
  {
#line 728
  tmp___0 = __builtin_expect(status < 0, 0L);
  }
#line 728
  if (tmp___0 != 0L) {
#line 729
    goto ldv_50178;
  } else {

  }
  {
#line 733
  req->rq_bytes_sent = req->rq_bytes_sent + (u32 )status;
#line 734
  req->rq_xmit_bytes_sent = req->rq_xmit_bytes_sent + (size_t )status;
#line 735
  tmp___1 = __builtin_expect(req->rq_bytes_sent >= req->rq_snd_buf.len, 1L);
  }
#line 735
  if (tmp___1 != 0L) {
#line 736
    req->rq_bytes_sent = 0U;
#line 737
    return (0);
  } else {

  }
#line 740
  if (status != 0) {
#line 741
    goto ldv_50179;
  } else {

  }
#line 742
  status = -11;
#line 743
  goto ldv_50178;
  ldv_50179: ;
#line 744
  goto ldv_50180;
  ldv_50178: ;
  {
#line 747
  if (status == -88) {
#line 747
    goto case_neg_88;
  } else {

  }
#line 751
  if (status == -11) {
#line 751
    goto case_neg_11;
  } else {

  }
#line 757
  if (status == -104) {
#line 757
    goto case_neg_104;
  } else {

  }
#line 759
  if (status == -111) {
#line 759
    goto case_neg_111;
  } else {

  }
#line 760
  if (status == -107) {
#line 760
    goto case_neg_107;
  } else {

  }
#line 761
  if (status == -32) {
#line 761
    goto case_neg_32;
  } else {

  }
#line 754
  goto switch_default;
  case_neg_88: /* CIL Label */ 
#line 748
  status = -107;
#line 750
  goto ldv_50182;
  case_neg_11: /* CIL Label */ 
  {
#line 752
  status = xs_nospace(task);
  }
#line 753
  goto ldv_50182;
  switch_default: /* CIL Label */ 
  {
#line 755
  tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 755
  if (tmp___2 != 0L) {
    {
#line 755
    printk("\001dRPC:       sendmsg returned unrecognized error %d\n", - status);
    }
  } else {

  }
  case_neg_104: /* CIL Label */ 
  {
#line 758
  xs_tcp_shutdown(xprt);
  }
  case_neg_111: /* CIL Label */ ;
  case_neg_107: /* CIL Label */ ;
  case_neg_32: /* CIL Label */ 
  {
#line 762
  clear_bit(0, (unsigned long volatile   *)(& (transport->sock)->flags));
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50182: ;
#line 765
  return (status);
}
}
#line 777 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_release_xprt(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;

  {
#line 781
  if ((unsigned long )task != (unsigned long )xprt->snd_task) {
#line 782
    return;
  } else {

  }
#line 783
  if ((unsigned long )task == (unsigned long )((struct rpc_task *)0)) {
#line 784
    goto out_release;
  } else {

  }
#line 785
  req = task->tk_rqstp;
#line 786
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
#line 787
    goto out_release;
  } else {

  }
#line 788
  if (req->rq_bytes_sent == 0U) {
#line 789
    goto out_release;
  } else {

  }
#line 790
  if (req->rq_bytes_sent == req->rq_snd_buf.len) {
#line 791
    goto out_release;
  } else {

  }
  {
#line 792
  set_bit(3U, (unsigned long volatile   *)(& xprt->state));
  }
  out_release: 
  {
#line 794
  xprt_release_xprt(xprt, task);
  }
#line 795
  return;
}
}
#line 797 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_save_old_callbacks(struct sock_xprt *transport , struct sock *sk ) 
{ 


  {
#line 799
  transport->old_data_ready = sk->sk_data_ready;
#line 800
  transport->old_state_change = sk->sk_state_change;
#line 801
  transport->old_write_space = sk->sk_write_space;
#line 802
  return;
}
}
#line 804 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_restore_old_callbacks(struct sock_xprt *transport , struct sock *sk ) 
{ 


  {
#line 806
  sk->sk_data_ready = transport->old_data_ready;
#line 807
  sk->sk_state_change = transport->old_state_change;
#line 808
  sk->sk_write_space = transport->old_write_space;
#line 809
  return;
}
}
#line 811 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_reset_transport(struct sock_xprt *transport ) 
{ 
  struct socket *sock ;
  struct sock *sk ;

  {
#line 813
  sock = transport->sock;
#line 814
  sk = transport->inet;
#line 816
  if ((unsigned long )sk == (unsigned long )((struct sock *)0)) {
#line 817
    return;
  } else {

  }
  {
#line 819
  transport->srcport = 0U;
#line 821
  _raw_write_lock_bh(& sk->sk_callback_lock);
#line 822
  transport->inet = (struct sock *)0;
#line 823
  transport->sock = (struct socket *)0;
#line 825
  sk->sk_user_data = (void *)0;
#line 827
  xs_restore_old_callbacks(transport, sk);
#line 828
  _raw_write_unlock_bh(& sk->sk_callback_lock);
#line 830
  sk->sk_no_check = 0U;
#line 832
  sock_release(sock);
  }
#line 833
  return;
}
}
#line 845 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_close(struct rpc_xprt *xprt ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  long tmp ;

  {
  {
#line 847
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 847
  transport = (struct sock_xprt *)__mptr;
#line 849
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 849
  if (tmp != 0L) {
    {
#line 849
    printk("\001dRPC:       xs_close xprt %p\n", xprt);
    }
  } else {

  }
  {
#line 851
  xs_reset_transport(transport);
#line 852
  xprt->reestablish_timeout = 0UL;
#line 854
  __asm__  volatile   ("": : : "memory");
#line 855
  clear_bit(7, (unsigned long volatile   *)(& xprt->state));
#line 856
  clear_bit(3, (unsigned long volatile   *)(& xprt->state));
#line 857
  clear_bit(6, (unsigned long volatile   *)(& xprt->state));
#line 858
  __asm__  volatile   ("": : : "memory");
#line 859
  xprt_disconnect_done(xprt);
  }
#line 860
  return;
}
}
#line 862 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_close(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 864
  tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& xprt->state));
  }
#line 864
  if (tmp != 0) {
    {
#line 865
    xs_close(xprt);
    }
  } else {
    {
#line 867
    xs_tcp_shutdown(xprt);
    }
  }
#line 868
  return;
}
}
#line 870 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_local_destroy(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 872
  xs_close(xprt);
#line 873
  xs_free_peer_addresses(xprt);
#line 874
  xprt_free(xprt);
#line 875
  ldv_module_put_10(& __this_module);
  }
#line 876
  return;
}
}
#line 883 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_destroy(struct rpc_xprt *xprt ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  long tmp ;

  {
  {
#line 885
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 885
  transport = (struct sock_xprt *)__mptr;
#line 887
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 887
  if (tmp != 0L) {
    {
#line 887
    printk("\001dRPC:       xs_destroy xprt %p\n", xprt);
    }
  } else {

  }
  {
#line 889
  cancel_delayed_work_sync(& transport->connect_worker);
#line 891
  xs_local_destroy(xprt);
  }
#line 892
  return;
}
}
#line 894 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static struct rpc_xprt *xprt_from_sock(struct sock *sk ) 
{ 


  {
#line 896
  return ((struct rpc_xprt *)sk->sk_user_data);
}
}
#line 899 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_local_copy_to_xdr(struct xdr_buf *xdr , struct sk_buff *skb ) 
{ 
  struct xdr_skb_reader desc ;
  ssize_t tmp ;

  {
  {
#line 901
  desc.skb = skb;
#line 901
  desc.offset = 4U;
#line 901
  desc.count = (unsigned long )skb->len - 4UL;
#line 901
  desc.csum = 0U;
#line 907
  tmp = xdr_partial_copy_from_skb(xdr, 0U, & desc, & xdr_skb_read_bits);
  }
#line 907
  if (tmp < 0L) {
#line 908
    return (-1);
  } else {

  }
#line 909
  if (desc.count != 0UL) {
#line 910
    return (-1);
  } else {

  }
#line 911
  return (0);
}
}
#line 921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_local_data_ready(struct sock *sk , int len ) 
{ 
  struct rpc_task *task ;
  struct rpc_xprt *xprt ;
  struct rpc_rqst *rovr ;
  struct sk_buff *skb ;
  int err ;
  int repsize ;
  int copied ;
  u32 _xid ;
  __be32 *xp ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
  {
#line 931
  _raw_read_lock_bh(& sk->sk_callback_lock);
#line 932
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 932
  if (tmp != 0L) {
    {
#line 932
    printk("\001dRPC:       %s...\n", "xs_local_data_ready");
    }
  } else {

  }
  {
#line 933
  xprt = xprt_from_sock(sk);
  }
#line 934
  if ((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0)) {
#line 935
    goto out;
  } else {

  }
  {
#line 937
  skb = skb_recv_datagram(sk, 0U, 1, & err);
  }
#line 938
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 939
    goto out;
  } else {

  }
#line 941
  repsize = (int )(skb->len - 4U);
#line 942
  if (repsize <= 3) {
    {
#line 943
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 943
    if (tmp___0 != 0L) {
      {
#line 943
      printk("\001dRPC:       impossible RPC reply size %d\n", repsize);
      }
    } else {

    }
#line 944
    goto dropit;
  } else {

  }
  {
#line 948
  tmp___1 = skb_header_pointer((struct sk_buff  const  *)skb, 4, 4, (void *)(& _xid));
#line 948
  xp = (__be32 *)tmp___1;
  }
#line 949
  if ((unsigned long )xp == (unsigned long )((__be32 *)0U)) {
#line 950
    goto dropit;
  } else {

  }
  {
#line 953
  spin_lock(& xprt->transport_lock);
#line 954
  rovr = xprt_lookup_rqst(xprt, *xp);
  }
#line 955
  if ((unsigned long )rovr == (unsigned long )((struct rpc_rqst *)0)) {
#line 956
    goto out_unlock;
  } else {

  }
#line 957
  task = rovr->rq_task;
#line 959
  copied = (int )rovr->rq_private_buf.buflen;
#line 960
  if (copied > repsize) {
#line 961
    copied = repsize;
  } else {

  }
  {
#line 963
  tmp___3 = xs_local_copy_to_xdr(& rovr->rq_private_buf, skb);
  }
#line 963
  if (tmp___3 != 0) {
    {
#line 964
    tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 964
    if (tmp___2 != 0L) {
      {
#line 964
      printk("\001dRPC:       sk_buff copy failed\n");
      }
    } else {

    }
#line 965
    goto out_unlock;
  } else {

  }
  {
#line 968
  xprt_complete_rqst(task, copied);
  }
  out_unlock: 
  {
#line 971
  spin_unlock(& xprt->transport_lock);
  }
  dropit: 
  {
#line 973
  skb_free_datagram(sk, skb);
  }
  out: 
  {
#line 975
  _raw_read_unlock_bh(& sk->sk_callback_lock);
  }
#line 976
  return;
}
}
#line 984 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_udp_data_ready(struct sock *sk , int len ) 
{ 
  struct rpc_task *task ;
  struct rpc_xprt *xprt ;
  struct rpc_rqst *rovr ;
  struct sk_buff *skb ;
  int err ;
  int repsize ;
  int copied ;
  u32 _xid ;
  __be32 *xp ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  struct net *tmp___2 ;
  struct net *tmp___5 ;
  struct net *tmp___8 ;
  struct net *tmp___11 ;
  int pao_ID_____0 ;
  struct net *tmp___14 ;
  struct net *tmp___17 ;
  struct net *tmp___20 ;
  struct net *tmp___23 ;
  int pao_ID_____1 ;
  struct net *tmp___26 ;
  struct net *tmp___29 ;
  struct net *tmp___32 ;
  struct net *tmp___35 ;
  int pao_ID_____2 ;
  struct net *tmp___38 ;
  struct net *tmp___41 ;
  struct net *tmp___44 ;
  struct net *tmp___47 ;
  void const   *__vpp_verify___0 ;
  int pao_ID_____3 ;
  struct net *tmp___50 ;
  struct net *tmp___53 ;
  struct net *tmp___56 ;
  struct net *tmp___59 ;
  int pao_ID_____4 ;
  struct net *tmp___62 ;
  struct net *tmp___65 ;
  struct net *tmp___68 ;
  struct net *tmp___71 ;
  int pao_ID_____5 ;
  struct net *tmp___74 ;
  struct net *tmp___77 ;
  struct net *tmp___80 ;
  struct net *tmp___83 ;
  int pao_ID_____6 ;
  struct net *tmp___86 ;
  struct net *tmp___89 ;
  struct net *tmp___92 ;
  struct net *tmp___95 ;
  void const   *__vpp_verify___1 ;
  int pao_ID_____7 ;
  struct net *tmp___98 ;
  struct net *tmp___101 ;
  struct net *tmp___104 ;
  struct net *tmp___107 ;
  int pao_ID_____8 ;
  struct net *tmp___110 ;
  struct net *tmp___113 ;
  struct net *tmp___116 ;
  struct net *tmp___119 ;
  int pao_ID_____9 ;
  struct net *tmp___122 ;
  struct net *tmp___125 ;
  struct net *tmp___128 ;
  struct net *tmp___131 ;
  int pao_ID_____10 ;
  struct net *tmp___134 ;
  struct net *tmp___137 ;
  struct net *tmp___140 ;
  struct net *tmp___143 ;
  void const   *__vpp_verify___2 ;
  int pao_ID_____11 ;
  struct net *tmp___146 ;
  struct net *tmp___149 ;
  struct net *tmp___152 ;
  struct net *tmp___155 ;
  int pao_ID_____12 ;
  struct net *tmp___158 ;
  struct net *tmp___161 ;
  struct net *tmp___164 ;
  struct net *tmp___167 ;
  int pao_ID_____13 ;
  struct net *tmp___170 ;
  struct net *tmp___173 ;
  struct net *tmp___176 ;
  struct net *tmp___179 ;
  int pao_ID_____14 ;
  struct net *tmp___182 ;
  struct net *tmp___185 ;
  struct net *tmp___188 ;
  struct net *tmp___191 ;
  int tmp___194 ;
  void const   *__vpp_verify___3 ;
  int pao_ID_____15 ;
  struct net *tmp___195 ;
  struct net *tmp___198 ;
  struct net *tmp___201 ;
  struct net *tmp___204 ;
  int pao_ID_____16 ;
  struct net *tmp___207 ;
  struct net *tmp___210 ;
  struct net *tmp___213 ;
  struct net *tmp___216 ;
  int pao_ID_____17 ;
  struct net *tmp___219 ;
  struct net *tmp___222 ;
  struct net *tmp___225 ;
  struct net *tmp___228 ;
  int pao_ID_____18 ;
  struct net *tmp___231 ;
  struct net *tmp___234 ;
  struct net *tmp___237 ;
  struct net *tmp___240 ;
  void const   *__vpp_verify___4 ;
  int pao_ID_____19 ;
  struct net *tmp___243 ;
  struct net *tmp___246 ;
  struct net *tmp___249 ;
  struct net *tmp___252 ;
  int pao_ID_____20 ;
  struct net *tmp___255 ;
  struct net *tmp___258 ;
  struct net *tmp___261 ;
  struct net *tmp___264 ;
  int pao_ID_____21 ;
  struct net *tmp___267 ;
  struct net *tmp___270 ;
  struct net *tmp___273 ;
  struct net *tmp___276 ;
  int pao_ID_____22 ;
  struct net *tmp___279 ;
  struct net *tmp___282 ;
  struct net *tmp___285 ;
  struct net *tmp___288 ;
  void const   *__vpp_verify___5 ;
  int pao_ID_____23 ;
  struct net *tmp___291 ;
  struct net *tmp___294 ;
  struct net *tmp___297 ;
  struct net *tmp___300 ;
  int pao_ID_____24 ;
  struct net *tmp___303 ;
  struct net *tmp___306 ;
  struct net *tmp___309 ;
  struct net *tmp___312 ;
  int pao_ID_____25 ;
  struct net *tmp___315 ;
  struct net *tmp___318 ;
  struct net *tmp___321 ;
  struct net *tmp___324 ;
  int pao_ID_____26 ;
  struct net *tmp___327 ;
  struct net *tmp___330 ;
  struct net *tmp___333 ;
  struct net *tmp___336 ;
  void const   *__vpp_verify___6 ;
  int pao_ID_____27 ;
  struct net *tmp___339 ;
  struct net *tmp___342 ;
  struct net *tmp___345 ;
  struct net *tmp___348 ;
  int pao_ID_____28 ;
  struct net *tmp___351 ;
  struct net *tmp___354 ;
  struct net *tmp___357 ;
  struct net *tmp___360 ;
  int pao_ID_____29 ;
  struct net *tmp___363 ;
  struct net *tmp___366 ;
  struct net *tmp___369 ;
  struct net *tmp___372 ;
  int pao_ID_____30 ;
  struct net *tmp___375 ;
  struct net *tmp___378 ;
  struct net *tmp___381 ;
  struct net *tmp___384 ;

  {
  {
#line 994
  _raw_read_lock_bh(& sk->sk_callback_lock);
#line 995
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 995
  if (tmp != 0L) {
    {
#line 995
    printk("\001dRPC:       xs_udp_data_ready...\n");
    }
  } else {

  }
  {
#line 996
  xprt = xprt_from_sock(sk);
  }
#line 996
  if ((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0)) {
#line 997
    goto out;
  } else {

  }
  {
#line 999
  skb = skb_recv_datagram(sk, 0U, 1, & err);
  }
#line 999
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 1000
    goto out;
  } else {

  }
#line 1002
  repsize = (int )(skb->len - 8U);
#line 1003
  if (repsize <= 3) {
    {
#line 1004
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1004
    if (tmp___0 != 0L) {
      {
#line 1004
      printk("\001dRPC:       impossible RPC reply size %d!\n", repsize);
      }
    } else {

    }
#line 1005
    goto dropit;
  } else {

  }
  {
#line 1009
  tmp___1 = skb_header_pointer((struct sk_buff  const  *)skb, 8, 4, (void *)(& _xid));
#line 1009
  xp = (__be32 *)tmp___1;
  }
#line 1011
  if ((unsigned long )xp == (unsigned long )((__be32 *)0U)) {
#line 1012
    goto dropit;
  } else {

  }
  {
#line 1015
  spin_lock(& xprt->transport_lock);
#line 1016
  rovr = xprt_lookup_rqst(xprt, *xp);
  }
#line 1017
  if ((unsigned long )rovr == (unsigned long )((struct rpc_rqst *)0)) {
#line 1018
    goto out_unlock;
  } else {

  }
#line 1019
  task = rovr->rq_task;
#line 1021
  copied = (int )rovr->rq_private_buf.buflen;
#line 1021
  if (copied > repsize) {
#line 1022
    copied = repsize;
  } else {

  }
  {
#line 1025
  tmp___194 = csum_partial_copy_to_xdr(& rovr->rq_private_buf, skb);
  }
#line 1025
  if (tmp___194 != 0) {
#line 1026
    if ((unsigned int )sk->__sk_common.skc_family == 2U) {
#line 1026
      if (0) {
#line 1026
        __vpp_verify = (void const   *)0;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___0;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___1;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___2;
        } else {

        }
#line 1026
        goto switch_default___3;
        case_1: /* CIL Label */ 
#line 1026
        pao_ID__ = 1;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___0;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8;
        } else {

        }
#line 1026
        goto switch_default;
        case_1___0: /* CIL Label */ 
        {
#line 1026
        tmp___2 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incb %%gs:%P0": "+m" ((tmp___2->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50273;
        case_2: /* CIL Label */ 
        {
#line 1026
        tmp___5 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incw %%gs:%P0": "+m" ((tmp___5->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50273;
        case_4: /* CIL Label */ 
        {
#line 1026
        tmp___8 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incl %%gs:%P0": "+m" ((tmp___8->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50273;
        case_8: /* CIL Label */ 
        {
#line 1026
        tmp___11 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incq %%gs:%P0": "+m" ((tmp___11->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50273;
        switch_default: /* CIL Label */ 
        {
#line 1026
        __bad_percpu_size();
        }
        switch_break___0: /* CIL Label */ ;
        }
        ldv_50273: ;
#line 1026
        goto ldv_50278;
        case_2___0: /* CIL Label */ 
#line 1026
        pao_ID_____0 = 1;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___1;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___1;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___0;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___0;
        } else {

        }
#line 1026
        goto switch_default___0;
        case_1___1: /* CIL Label */ 
        {
#line 1026
        tmp___14 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incb %%gs:%P0": "+m" ((tmp___14->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50284;
        case_2___1: /* CIL Label */ 
        {
#line 1026
        tmp___17 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incw %%gs:%P0": "+m" ((tmp___17->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50284;
        case_4___0: /* CIL Label */ 
        {
#line 1026
        tmp___20 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incl %%gs:%P0": "+m" ((tmp___20->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50284;
        case_8___0: /* CIL Label */ 
        {
#line 1026
        tmp___23 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incq %%gs:%P0": "+m" ((tmp___23->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50284;
        switch_default___0: /* CIL Label */ 
        {
#line 1026
        __bad_percpu_size();
        }
        switch_break___1: /* CIL Label */ ;
        }
        ldv_50284: ;
#line 1026
        goto ldv_50278;
        case_4___1: /* CIL Label */ 
#line 1026
        pao_ID_____1 = 1;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___2;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___2;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___2;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___1;
        } else {

        }
#line 1026
        goto switch_default___1;
        case_1___2: /* CIL Label */ 
        {
#line 1026
        tmp___26 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incb %%gs:%P0": "+m" ((tmp___26->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50294;
        case_2___2: /* CIL Label */ 
        {
#line 1026
        tmp___29 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incw %%gs:%P0": "+m" ((tmp___29->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50294;
        case_4___2: /* CIL Label */ 
        {
#line 1026
        tmp___32 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incl %%gs:%P0": "+m" ((tmp___32->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50294;
        case_8___1: /* CIL Label */ 
        {
#line 1026
        tmp___35 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incq %%gs:%P0": "+m" ((tmp___35->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50294;
        switch_default___1: /* CIL Label */ 
        {
#line 1026
        __bad_percpu_size();
        }
        switch_break___2: /* CIL Label */ ;
        }
        ldv_50294: ;
#line 1026
        goto ldv_50278;
        case_8___2: /* CIL Label */ 
#line 1026
        pao_ID_____2 = 1;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___3;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___3;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___3;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___3;
        } else {

        }
#line 1026
        goto switch_default___2;
        case_1___3: /* CIL Label */ 
        {
#line 1026
        tmp___38 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incb %%gs:%P0": "+m" ((tmp___38->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50304;
        case_2___3: /* CIL Label */ 
        {
#line 1026
        tmp___41 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incw %%gs:%P0": "+m" ((tmp___41->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50304;
        case_4___3: /* CIL Label */ 
        {
#line 1026
        tmp___44 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incl %%gs:%P0": "+m" ((tmp___44->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50304;
        case_8___3: /* CIL Label */ 
        {
#line 1026
        tmp___47 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incq %%gs:%P0": "+m" ((tmp___47->mib.udplite_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50304;
        switch_default___2: /* CIL Label */ 
        {
#line 1026
        __bad_percpu_size();
        }
        switch_break___3: /* CIL Label */ ;
        }
        ldv_50304: ;
#line 1026
        goto ldv_50278;
        switch_default___3: /* CIL Label */ 
        {
#line 1026
        __bad_size_call_parameter();
        }
#line 1026
        goto ldv_50278;
        switch_break: /* CIL Label */ ;
        }
        ldv_50278: ;
      } else {
#line 1026
        __vpp_verify___0 = (void const   *)0;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___4;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___5;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___6;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___7;
        } else {

        }
#line 1026
        goto switch_default___8;
        case_1___4: /* CIL Label */ 
#line 1026
        pao_ID_____3 = 1;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___5;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___4;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___4;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___4;
        } else {

        }
#line 1026
        goto switch_default___4;
        case_1___5: /* CIL Label */ 
        {
#line 1026
        tmp___50 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incb %%gs:%P0": "+m" ((tmp___50->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50316;
        case_2___4: /* CIL Label */ 
        {
#line 1026
        tmp___53 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incw %%gs:%P0": "+m" ((tmp___53->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50316;
        case_4___4: /* CIL Label */ 
        {
#line 1026
        tmp___56 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incl %%gs:%P0": "+m" ((tmp___56->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50316;
        case_8___4: /* CIL Label */ 
        {
#line 1026
        tmp___59 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incq %%gs:%P0": "+m" ((tmp___59->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50316;
        switch_default___4: /* CIL Label */ 
        {
#line 1026
        __bad_percpu_size();
        }
        switch_break___5: /* CIL Label */ ;
        }
        ldv_50316: ;
#line 1026
        goto ldv_50321;
        case_2___5: /* CIL Label */ 
#line 1026
        pao_ID_____4 = 1;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___6;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___6;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___5;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___5;
        } else {

        }
#line 1026
        goto switch_default___5;
        case_1___6: /* CIL Label */ 
        {
#line 1026
        tmp___62 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incb %%gs:%P0": "+m" ((tmp___62->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50327;
        case_2___6: /* CIL Label */ 
        {
#line 1026
        tmp___65 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incw %%gs:%P0": "+m" ((tmp___65->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50327;
        case_4___5: /* CIL Label */ 
        {
#line 1026
        tmp___68 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incl %%gs:%P0": "+m" ((tmp___68->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50327;
        case_8___5: /* CIL Label */ 
        {
#line 1026
        tmp___71 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incq %%gs:%P0": "+m" ((tmp___71->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50327;
        switch_default___5: /* CIL Label */ 
        {
#line 1026
        __bad_percpu_size();
        }
        switch_break___6: /* CIL Label */ ;
        }
        ldv_50327: ;
#line 1026
        goto ldv_50321;
        case_4___6: /* CIL Label */ 
#line 1026
        pao_ID_____5 = 1;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___7;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___7;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___7;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___6;
        } else {

        }
#line 1026
        goto switch_default___6;
        case_1___7: /* CIL Label */ 
        {
#line 1026
        tmp___74 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incb %%gs:%P0": "+m" ((tmp___74->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50337;
        case_2___7: /* CIL Label */ 
        {
#line 1026
        tmp___77 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incw %%gs:%P0": "+m" ((tmp___77->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50337;
        case_4___7: /* CIL Label */ 
        {
#line 1026
        tmp___80 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incl %%gs:%P0": "+m" ((tmp___80->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50337;
        case_8___6: /* CIL Label */ 
        {
#line 1026
        tmp___83 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incq %%gs:%P0": "+m" ((tmp___83->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50337;
        switch_default___6: /* CIL Label */ 
        {
#line 1026
        __bad_percpu_size();
        }
        switch_break___7: /* CIL Label */ ;
        }
        ldv_50337: ;
#line 1026
        goto ldv_50321;
        case_8___7: /* CIL Label */ 
#line 1026
        pao_ID_____6 = 1;
        {
#line 1026
        if (8UL == 1UL) {
#line 1026
          goto case_1___8;
        } else {

        }
#line 1026
        if (8UL == 2UL) {
#line 1026
          goto case_2___8;
        } else {

        }
#line 1026
        if (8UL == 4UL) {
#line 1026
          goto case_4___8;
        } else {

        }
#line 1026
        if (8UL == 8UL) {
#line 1026
          goto case_8___8;
        } else {

        }
#line 1026
        goto switch_default___7;
        case_1___8: /* CIL Label */ 
        {
#line 1026
        tmp___86 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incb %%gs:%P0": "+m" ((tmp___86->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50347;
        case_2___8: /* CIL Label */ 
        {
#line 1026
        tmp___89 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incw %%gs:%P0": "+m" ((tmp___89->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50347;
        case_4___8: /* CIL Label */ 
        {
#line 1026
        tmp___92 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incl %%gs:%P0": "+m" ((tmp___92->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50347;
        case_8___8: /* CIL Label */ 
        {
#line 1026
        tmp___95 = sock_net((struct sock  const  *)sk);
#line 1026
        __asm__  ("incq %%gs:%P0": "+m" ((tmp___95->mib.udp_statistics[0])->mibs[3]));
        }
#line 1026
        goto ldv_50347;
        switch_default___7: /* CIL Label */ 
        {
#line 1026
        __bad_percpu_size();
        }
        switch_break___8: /* CIL Label */ ;
        }
        ldv_50347: ;
#line 1026
        goto ldv_50321;
        switch_default___8: /* CIL Label */ 
        {
#line 1026
        __bad_size_call_parameter();
        }
#line 1026
        goto ldv_50321;
        switch_break___4: /* CIL Label */ ;
        }
        ldv_50321: ;
      }
    } else
#line 1026
    if (0) {
#line 1026
      __vpp_verify___1 = (void const   *)0;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___9;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___10;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___11;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___12;
      } else {

      }
#line 1026
      goto switch_default___13;
      case_1___9: /* CIL Label */ 
#line 1026
      pao_ID_____7 = 1;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___10;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___9;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___9;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___9;
      } else {

      }
#line 1026
      goto switch_default___9;
      case_1___10: /* CIL Label */ 
      {
#line 1026
      tmp___98 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___98->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50359;
      case_2___9: /* CIL Label */ 
      {
#line 1026
      tmp___101 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___101->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50359;
      case_4___9: /* CIL Label */ 
      {
#line 1026
      tmp___104 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___104->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50359;
      case_8___9: /* CIL Label */ 
      {
#line 1026
      tmp___107 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___107->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50359;
      switch_default___9: /* CIL Label */ 
      {
#line 1026
      __bad_percpu_size();
      }
      switch_break___10: /* CIL Label */ ;
      }
      ldv_50359: ;
#line 1026
      goto ldv_50364;
      case_2___10: /* CIL Label */ 
#line 1026
      pao_ID_____8 = 1;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___11;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___11;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___10;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___10;
      } else {

      }
#line 1026
      goto switch_default___10;
      case_1___11: /* CIL Label */ 
      {
#line 1026
      tmp___110 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___110->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50370;
      case_2___11: /* CIL Label */ 
      {
#line 1026
      tmp___113 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___113->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50370;
      case_4___10: /* CIL Label */ 
      {
#line 1026
      tmp___116 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___116->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50370;
      case_8___10: /* CIL Label */ 
      {
#line 1026
      tmp___119 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___119->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50370;
      switch_default___10: /* CIL Label */ 
      {
#line 1026
      __bad_percpu_size();
      }
      switch_break___11: /* CIL Label */ ;
      }
      ldv_50370: ;
#line 1026
      goto ldv_50364;
      case_4___11: /* CIL Label */ 
#line 1026
      pao_ID_____9 = 1;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___12;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___12;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___12;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___11;
      } else {

      }
#line 1026
      goto switch_default___11;
      case_1___12: /* CIL Label */ 
      {
#line 1026
      tmp___122 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___122->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50380;
      case_2___12: /* CIL Label */ 
      {
#line 1026
      tmp___125 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___125->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50380;
      case_4___12: /* CIL Label */ 
      {
#line 1026
      tmp___128 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___128->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50380;
      case_8___11: /* CIL Label */ 
      {
#line 1026
      tmp___131 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___131->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50380;
      switch_default___11: /* CIL Label */ 
      {
#line 1026
      __bad_percpu_size();
      }
      switch_break___12: /* CIL Label */ ;
      }
      ldv_50380: ;
#line 1026
      goto ldv_50364;
      case_8___12: /* CIL Label */ 
#line 1026
      pao_ID_____10 = 1;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___13;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___13;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___13;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___13;
      } else {

      }
#line 1026
      goto switch_default___12;
      case_1___13: /* CIL Label */ 
      {
#line 1026
      tmp___134 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___134->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50390;
      case_2___13: /* CIL Label */ 
      {
#line 1026
      tmp___137 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___137->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50390;
      case_4___13: /* CIL Label */ 
      {
#line 1026
      tmp___140 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___140->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50390;
      case_8___13: /* CIL Label */ 
      {
#line 1026
      tmp___143 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___143->mib.udplite_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50390;
      switch_default___12: /* CIL Label */ 
      {
#line 1026
      __bad_percpu_size();
      }
      switch_break___13: /* CIL Label */ ;
      }
      ldv_50390: ;
#line 1026
      goto ldv_50364;
      switch_default___13: /* CIL Label */ 
      {
#line 1026
      __bad_size_call_parameter();
      }
#line 1026
      goto ldv_50364;
      switch_break___9: /* CIL Label */ ;
      }
      ldv_50364: ;
    } else {
#line 1026
      __vpp_verify___2 = (void const   *)0;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___14;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___15;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___16;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___17;
      } else {

      }
#line 1026
      goto switch_default___18;
      case_1___14: /* CIL Label */ 
#line 1026
      pao_ID_____11 = 1;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___15;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___14;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___14;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___14;
      } else {

      }
#line 1026
      goto switch_default___14;
      case_1___15: /* CIL Label */ 
      {
#line 1026
      tmp___146 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___146->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50402;
      case_2___14: /* CIL Label */ 
      {
#line 1026
      tmp___149 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___149->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50402;
      case_4___14: /* CIL Label */ 
      {
#line 1026
      tmp___152 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___152->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50402;
      case_8___14: /* CIL Label */ 
      {
#line 1026
      tmp___155 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___155->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50402;
      switch_default___14: /* CIL Label */ 
      {
#line 1026
      __bad_percpu_size();
      }
      switch_break___15: /* CIL Label */ ;
      }
      ldv_50402: ;
#line 1026
      goto ldv_50407;
      case_2___15: /* CIL Label */ 
#line 1026
      pao_ID_____12 = 1;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___16;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___16;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___15;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___15;
      } else {

      }
#line 1026
      goto switch_default___15;
      case_1___16: /* CIL Label */ 
      {
#line 1026
      tmp___158 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___158->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50413;
      case_2___16: /* CIL Label */ 
      {
#line 1026
      tmp___161 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___161->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50413;
      case_4___15: /* CIL Label */ 
      {
#line 1026
      tmp___164 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___164->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50413;
      case_8___15: /* CIL Label */ 
      {
#line 1026
      tmp___167 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___167->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50413;
      switch_default___15: /* CIL Label */ 
      {
#line 1026
      __bad_percpu_size();
      }
      switch_break___16: /* CIL Label */ ;
      }
      ldv_50413: ;
#line 1026
      goto ldv_50407;
      case_4___16: /* CIL Label */ 
#line 1026
      pao_ID_____13 = 1;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___17;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___17;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___17;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___16;
      } else {

      }
#line 1026
      goto switch_default___16;
      case_1___17: /* CIL Label */ 
      {
#line 1026
      tmp___170 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___170->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50423;
      case_2___17: /* CIL Label */ 
      {
#line 1026
      tmp___173 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___173->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50423;
      case_4___17: /* CIL Label */ 
      {
#line 1026
      tmp___176 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___176->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50423;
      case_8___16: /* CIL Label */ 
      {
#line 1026
      tmp___179 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___179->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50423;
      switch_default___16: /* CIL Label */ 
      {
#line 1026
      __bad_percpu_size();
      }
      switch_break___17: /* CIL Label */ ;
      }
      ldv_50423: ;
#line 1026
      goto ldv_50407;
      case_8___17: /* CIL Label */ 
#line 1026
      pao_ID_____14 = 1;
      {
#line 1026
      if (8UL == 1UL) {
#line 1026
        goto case_1___18;
      } else {

      }
#line 1026
      if (8UL == 2UL) {
#line 1026
        goto case_2___18;
      } else {

      }
#line 1026
      if (8UL == 4UL) {
#line 1026
        goto case_4___18;
      } else {

      }
#line 1026
      if (8UL == 8UL) {
#line 1026
        goto case_8___18;
      } else {

      }
#line 1026
      goto switch_default___17;
      case_1___18: /* CIL Label */ 
      {
#line 1026
      tmp___182 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___182->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50433;
      case_2___18: /* CIL Label */ 
      {
#line 1026
      tmp___185 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___185->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50433;
      case_4___18: /* CIL Label */ 
      {
#line 1026
      tmp___188 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___188->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50433;
      case_8___18: /* CIL Label */ 
      {
#line 1026
      tmp___191 = sock_net((struct sock  const  *)sk);
#line 1026
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___191->mib.udp_stats_in6[0])->mibs[3]));
      }
#line 1026
      goto ldv_50433;
      switch_default___17: /* CIL Label */ 
      {
#line 1026
      __bad_percpu_size();
      }
      switch_break___18: /* CIL Label */ ;
      }
      ldv_50433: ;
#line 1026
      goto ldv_50407;
      switch_default___18: /* CIL Label */ 
      {
#line 1026
      __bad_size_call_parameter();
      }
#line 1026
      goto ldv_50407;
      switch_break___14: /* CIL Label */ ;
      }
      ldv_50407: ;
    }
#line 1027
    goto out_unlock;
  } else {

  }
#line 1030
  if ((unsigned int )sk->__sk_common.skc_family == 2U) {
#line 1030
    if (0) {
#line 1030
      __vpp_verify___3 = (void const   *)0;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___19;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___20;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___21;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___22;
      } else {

      }
#line 1030
      goto switch_default___23;
      case_1___19: /* CIL Label */ 
#line 1030
      pao_ID_____15 = 1;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___20;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___19;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___19;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___19;
      } else {

      }
#line 1030
      goto switch_default___19;
      case_1___20: /* CIL Label */ 
      {
#line 1030
      tmp___195 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___195->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50445;
      case_2___19: /* CIL Label */ 
      {
#line 1030
      tmp___198 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___198->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50445;
      case_4___19: /* CIL Label */ 
      {
#line 1030
      tmp___201 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___201->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50445;
      case_8___19: /* CIL Label */ 
      {
#line 1030
      tmp___204 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___204->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50445;
      switch_default___19: /* CIL Label */ 
      {
#line 1030
      __bad_percpu_size();
      }
      switch_break___20: /* CIL Label */ ;
      }
      ldv_50445: ;
#line 1030
      goto ldv_50450;
      case_2___20: /* CIL Label */ 
#line 1030
      pao_ID_____16 = 1;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___21;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___21;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___20;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___20;
      } else {

      }
#line 1030
      goto switch_default___20;
      case_1___21: /* CIL Label */ 
      {
#line 1030
      tmp___207 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___207->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50456;
      case_2___21: /* CIL Label */ 
      {
#line 1030
      tmp___210 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___210->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50456;
      case_4___20: /* CIL Label */ 
      {
#line 1030
      tmp___213 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___213->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50456;
      case_8___20: /* CIL Label */ 
      {
#line 1030
      tmp___216 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___216->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50456;
      switch_default___20: /* CIL Label */ 
      {
#line 1030
      __bad_percpu_size();
      }
      switch_break___21: /* CIL Label */ ;
      }
      ldv_50456: ;
#line 1030
      goto ldv_50450;
      case_4___21: /* CIL Label */ 
#line 1030
      pao_ID_____17 = 1;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___22;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___22;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___22;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___21;
      } else {

      }
#line 1030
      goto switch_default___21;
      case_1___22: /* CIL Label */ 
      {
#line 1030
      tmp___219 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___219->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50466;
      case_2___22: /* CIL Label */ 
      {
#line 1030
      tmp___222 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___222->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50466;
      case_4___22: /* CIL Label */ 
      {
#line 1030
      tmp___225 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___225->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50466;
      case_8___21: /* CIL Label */ 
      {
#line 1030
      tmp___228 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___228->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50466;
      switch_default___21: /* CIL Label */ 
      {
#line 1030
      __bad_percpu_size();
      }
      switch_break___22: /* CIL Label */ ;
      }
      ldv_50466: ;
#line 1030
      goto ldv_50450;
      case_8___22: /* CIL Label */ 
#line 1030
      pao_ID_____18 = 1;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___23;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___23;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___23;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___23;
      } else {

      }
#line 1030
      goto switch_default___22;
      case_1___23: /* CIL Label */ 
      {
#line 1030
      tmp___231 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___231->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50476;
      case_2___23: /* CIL Label */ 
      {
#line 1030
      tmp___234 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___234->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50476;
      case_4___23: /* CIL Label */ 
      {
#line 1030
      tmp___237 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___237->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50476;
      case_8___23: /* CIL Label */ 
      {
#line 1030
      tmp___240 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___240->mib.udplite_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50476;
      switch_default___22: /* CIL Label */ 
      {
#line 1030
      __bad_percpu_size();
      }
      switch_break___23: /* CIL Label */ ;
      }
      ldv_50476: ;
#line 1030
      goto ldv_50450;
      switch_default___23: /* CIL Label */ 
      {
#line 1030
      __bad_size_call_parameter();
      }
#line 1030
      goto ldv_50450;
      switch_break___19: /* CIL Label */ ;
      }
      ldv_50450: ;
    } else {
#line 1030
      __vpp_verify___4 = (void const   *)0;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___24;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___25;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___26;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___27;
      } else {

      }
#line 1030
      goto switch_default___28;
      case_1___24: /* CIL Label */ 
#line 1030
      pao_ID_____19 = 1;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___25;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___24;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___24;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___24;
      } else {

      }
#line 1030
      goto switch_default___24;
      case_1___25: /* CIL Label */ 
      {
#line 1030
      tmp___243 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___243->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50488;
      case_2___24: /* CIL Label */ 
      {
#line 1030
      tmp___246 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___246->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50488;
      case_4___24: /* CIL Label */ 
      {
#line 1030
      tmp___249 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___249->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50488;
      case_8___24: /* CIL Label */ 
      {
#line 1030
      tmp___252 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___252->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50488;
      switch_default___24: /* CIL Label */ 
      {
#line 1030
      __bad_percpu_size();
      }
      switch_break___25: /* CIL Label */ ;
      }
      ldv_50488: ;
#line 1030
      goto ldv_50493;
      case_2___25: /* CIL Label */ 
#line 1030
      pao_ID_____20 = 1;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___26;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___26;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___25;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___25;
      } else {

      }
#line 1030
      goto switch_default___25;
      case_1___26: /* CIL Label */ 
      {
#line 1030
      tmp___255 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___255->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50499;
      case_2___26: /* CIL Label */ 
      {
#line 1030
      tmp___258 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___258->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50499;
      case_4___25: /* CIL Label */ 
      {
#line 1030
      tmp___261 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___261->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50499;
      case_8___25: /* CIL Label */ 
      {
#line 1030
      tmp___264 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___264->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50499;
      switch_default___25: /* CIL Label */ 
      {
#line 1030
      __bad_percpu_size();
      }
      switch_break___26: /* CIL Label */ ;
      }
      ldv_50499: ;
#line 1030
      goto ldv_50493;
      case_4___26: /* CIL Label */ 
#line 1030
      pao_ID_____21 = 1;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___27;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___27;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___27;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___26;
      } else {

      }
#line 1030
      goto switch_default___26;
      case_1___27: /* CIL Label */ 
      {
#line 1030
      tmp___267 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___267->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50509;
      case_2___27: /* CIL Label */ 
      {
#line 1030
      tmp___270 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___270->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50509;
      case_4___27: /* CIL Label */ 
      {
#line 1030
      tmp___273 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___273->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50509;
      case_8___26: /* CIL Label */ 
      {
#line 1030
      tmp___276 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___276->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50509;
      switch_default___26: /* CIL Label */ 
      {
#line 1030
      __bad_percpu_size();
      }
      switch_break___27: /* CIL Label */ ;
      }
      ldv_50509: ;
#line 1030
      goto ldv_50493;
      case_8___27: /* CIL Label */ 
#line 1030
      pao_ID_____22 = 1;
      {
#line 1030
      if (8UL == 1UL) {
#line 1030
        goto case_1___28;
      } else {

      }
#line 1030
      if (8UL == 2UL) {
#line 1030
        goto case_2___28;
      } else {

      }
#line 1030
      if (8UL == 4UL) {
#line 1030
        goto case_4___28;
      } else {

      }
#line 1030
      if (8UL == 8UL) {
#line 1030
        goto case_8___28;
      } else {

      }
#line 1030
      goto switch_default___27;
      case_1___28: /* CIL Label */ 
      {
#line 1030
      tmp___279 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incb %%gs:%P0": "+m" ((tmp___279->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50519;
      case_2___28: /* CIL Label */ 
      {
#line 1030
      tmp___282 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incw %%gs:%P0": "+m" ((tmp___282->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50519;
      case_4___28: /* CIL Label */ 
      {
#line 1030
      tmp___285 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incl %%gs:%P0": "+m" ((tmp___285->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50519;
      case_8___28: /* CIL Label */ 
      {
#line 1030
      tmp___288 = sock_net((struct sock  const  *)sk);
#line 1030
      __asm__  ("incq %%gs:%P0": "+m" ((tmp___288->mib.udp_statistics[0])->mibs[1]));
      }
#line 1030
      goto ldv_50519;
      switch_default___27: /* CIL Label */ 
      {
#line 1030
      __bad_percpu_size();
      }
      switch_break___28: /* CIL Label */ ;
      }
      ldv_50519: ;
#line 1030
      goto ldv_50493;
      switch_default___28: /* CIL Label */ 
      {
#line 1030
      __bad_size_call_parameter();
      }
#line 1030
      goto ldv_50493;
      switch_break___24: /* CIL Label */ ;
      }
      ldv_50493: ;
    }
  } else
#line 1030
  if (0) {
#line 1030
    __vpp_verify___5 = (void const   *)0;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___29;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___30;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___31;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___32;
    } else {

    }
#line 1030
    goto switch_default___33;
    case_1___29: /* CIL Label */ 
#line 1030
    pao_ID_____23 = 1;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___30;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___29;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___29;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___29;
    } else {

    }
#line 1030
    goto switch_default___29;
    case_1___30: /* CIL Label */ 
    {
#line 1030
    tmp___291 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___291->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50531;
    case_2___29: /* CIL Label */ 
    {
#line 1030
    tmp___294 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___294->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50531;
    case_4___29: /* CIL Label */ 
    {
#line 1030
    tmp___297 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___297->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50531;
    case_8___29: /* CIL Label */ 
    {
#line 1030
    tmp___300 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___300->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50531;
    switch_default___29: /* CIL Label */ 
    {
#line 1030
    __bad_percpu_size();
    }
    switch_break___30: /* CIL Label */ ;
    }
    ldv_50531: ;
#line 1030
    goto ldv_50536;
    case_2___30: /* CIL Label */ 
#line 1030
    pao_ID_____24 = 1;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___31;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___31;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___30;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___30;
    } else {

    }
#line 1030
    goto switch_default___30;
    case_1___31: /* CIL Label */ 
    {
#line 1030
    tmp___303 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___303->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50542;
    case_2___31: /* CIL Label */ 
    {
#line 1030
    tmp___306 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___306->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50542;
    case_4___30: /* CIL Label */ 
    {
#line 1030
    tmp___309 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___309->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50542;
    case_8___30: /* CIL Label */ 
    {
#line 1030
    tmp___312 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___312->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50542;
    switch_default___30: /* CIL Label */ 
    {
#line 1030
    __bad_percpu_size();
    }
    switch_break___31: /* CIL Label */ ;
    }
    ldv_50542: ;
#line 1030
    goto ldv_50536;
    case_4___31: /* CIL Label */ 
#line 1030
    pao_ID_____25 = 1;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___32;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___32;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___32;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___31;
    } else {

    }
#line 1030
    goto switch_default___31;
    case_1___32: /* CIL Label */ 
    {
#line 1030
    tmp___315 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___315->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50552;
    case_2___32: /* CIL Label */ 
    {
#line 1030
    tmp___318 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___318->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50552;
    case_4___32: /* CIL Label */ 
    {
#line 1030
    tmp___321 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___321->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50552;
    case_8___31: /* CIL Label */ 
    {
#line 1030
    tmp___324 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___324->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50552;
    switch_default___31: /* CIL Label */ 
    {
#line 1030
    __bad_percpu_size();
    }
    switch_break___32: /* CIL Label */ ;
    }
    ldv_50552: ;
#line 1030
    goto ldv_50536;
    case_8___32: /* CIL Label */ 
#line 1030
    pao_ID_____26 = 1;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___33;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___33;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___33;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___33;
    } else {

    }
#line 1030
    goto switch_default___32;
    case_1___33: /* CIL Label */ 
    {
#line 1030
    tmp___327 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___327->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50562;
    case_2___33: /* CIL Label */ 
    {
#line 1030
    tmp___330 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___330->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50562;
    case_4___33: /* CIL Label */ 
    {
#line 1030
    tmp___333 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___333->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50562;
    case_8___33: /* CIL Label */ 
    {
#line 1030
    tmp___336 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___336->mib.udplite_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50562;
    switch_default___32: /* CIL Label */ 
    {
#line 1030
    __bad_percpu_size();
    }
    switch_break___33: /* CIL Label */ ;
    }
    ldv_50562: ;
#line 1030
    goto ldv_50536;
    switch_default___33: /* CIL Label */ 
    {
#line 1030
    __bad_size_call_parameter();
    }
#line 1030
    goto ldv_50536;
    switch_break___29: /* CIL Label */ ;
    }
    ldv_50536: ;
  } else {
#line 1030
    __vpp_verify___6 = (void const   *)0;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___34;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___35;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___36;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___37;
    } else {

    }
#line 1030
    goto switch_default___38;
    case_1___34: /* CIL Label */ 
#line 1030
    pao_ID_____27 = 1;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___35;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___34;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___34;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___34;
    } else {

    }
#line 1030
    goto switch_default___34;
    case_1___35: /* CIL Label */ 
    {
#line 1030
    tmp___339 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___339->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50574;
    case_2___34: /* CIL Label */ 
    {
#line 1030
    tmp___342 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___342->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50574;
    case_4___34: /* CIL Label */ 
    {
#line 1030
    tmp___345 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___345->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50574;
    case_8___34: /* CIL Label */ 
    {
#line 1030
    tmp___348 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___348->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50574;
    switch_default___34: /* CIL Label */ 
    {
#line 1030
    __bad_percpu_size();
    }
    switch_break___35: /* CIL Label */ ;
    }
    ldv_50574: ;
#line 1030
    goto ldv_50579;
    case_2___35: /* CIL Label */ 
#line 1030
    pao_ID_____28 = 1;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___36;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___36;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___35;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___35;
    } else {

    }
#line 1030
    goto switch_default___35;
    case_1___36: /* CIL Label */ 
    {
#line 1030
    tmp___351 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___351->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50585;
    case_2___36: /* CIL Label */ 
    {
#line 1030
    tmp___354 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___354->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50585;
    case_4___35: /* CIL Label */ 
    {
#line 1030
    tmp___357 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___357->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50585;
    case_8___35: /* CIL Label */ 
    {
#line 1030
    tmp___360 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___360->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50585;
    switch_default___35: /* CIL Label */ 
    {
#line 1030
    __bad_percpu_size();
    }
    switch_break___36: /* CIL Label */ ;
    }
    ldv_50585: ;
#line 1030
    goto ldv_50579;
    case_4___36: /* CIL Label */ 
#line 1030
    pao_ID_____29 = 1;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___37;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___37;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___37;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___36;
    } else {

    }
#line 1030
    goto switch_default___36;
    case_1___37: /* CIL Label */ 
    {
#line 1030
    tmp___363 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___363->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50595;
    case_2___37: /* CIL Label */ 
    {
#line 1030
    tmp___366 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___366->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50595;
    case_4___37: /* CIL Label */ 
    {
#line 1030
    tmp___369 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___369->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50595;
    case_8___36: /* CIL Label */ 
    {
#line 1030
    tmp___372 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___372->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50595;
    switch_default___36: /* CIL Label */ 
    {
#line 1030
    __bad_percpu_size();
    }
    switch_break___37: /* CIL Label */ ;
    }
    ldv_50595: ;
#line 1030
    goto ldv_50579;
    case_8___37: /* CIL Label */ 
#line 1030
    pao_ID_____30 = 1;
    {
#line 1030
    if (8UL == 1UL) {
#line 1030
      goto case_1___38;
    } else {

    }
#line 1030
    if (8UL == 2UL) {
#line 1030
      goto case_2___38;
    } else {

    }
#line 1030
    if (8UL == 4UL) {
#line 1030
      goto case_4___38;
    } else {

    }
#line 1030
    if (8UL == 8UL) {
#line 1030
      goto case_8___38;
    } else {

    }
#line 1030
    goto switch_default___37;
    case_1___38: /* CIL Label */ 
    {
#line 1030
    tmp___375 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incb %%gs:%P0": "+m" ((tmp___375->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50605;
    case_2___38: /* CIL Label */ 
    {
#line 1030
    tmp___378 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incw %%gs:%P0": "+m" ((tmp___378->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50605;
    case_4___38: /* CIL Label */ 
    {
#line 1030
    tmp___381 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incl %%gs:%P0": "+m" ((tmp___381->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50605;
    case_8___38: /* CIL Label */ 
    {
#line 1030
    tmp___384 = sock_net((struct sock  const  *)sk);
#line 1030
    __asm__  ("incq %%gs:%P0": "+m" ((tmp___384->mib.udp_stats_in6[0])->mibs[1]));
    }
#line 1030
    goto ldv_50605;
    switch_default___37: /* CIL Label */ 
    {
#line 1030
    __bad_percpu_size();
    }
    switch_break___38: /* CIL Label */ ;
    }
    ldv_50605: ;
#line 1030
    goto ldv_50579;
    switch_default___38: /* CIL Label */ 
    {
#line 1030
    __bad_size_call_parameter();
    }
#line 1030
    goto ldv_50579;
    switch_break___34: /* CIL Label */ ;
    }
    ldv_50579: ;
  }
  {
#line 1032
  xprt_adjust_cwnd(xprt, task, copied);
#line 1033
  xprt_complete_rqst(task, copied);
  }
  out_unlock: 
  {
#line 1036
  spin_unlock(& xprt->transport_lock);
  }
  dropit: 
  {
#line 1038
  skb_free_datagram(sk, skb);
  }
  out: 
  {
#line 1040
  _raw_read_unlock_bh(& sk->sk_callback_lock);
  }
#line 1041
  return;
}
}
#line 1047 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_force_close(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 1049
  set_bit(8U, (unsigned long volatile   *)(& xprt->state));
#line 1050
  xprt_force_disconnect(xprt);
  }
#line 1051
  return;
}
}
#line 1053 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_tcp_read_fraghdr(struct rpc_xprt *xprt , struct xdr_skb_reader *desc ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  size_t len ;
  size_t used ;
  char *p ;
  __u32 tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 1055
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1055
  transport = (struct sock_xprt *)__mptr;
#line 1059
  p = (char *)(& transport->tcp_fraghdr) + (unsigned long )transport->tcp_offset;
#line 1060
  len = 4UL - (unsigned long )transport->tcp_offset;
#line 1061
  used = xdr_skb_read_bits(desc, (void *)p, len);
#line 1062
  transport->tcp_offset = transport->tcp_offset + (u32 )used;
  }
#line 1063
  if (used != len) {
#line 1064
    return;
  } else {

  }
  {
#line 1066
  tmp = __fswab32(transport->tcp_fraghdr);
#line 1066
  transport->tcp_reclen = tmp;
  }
#line 1067
  if ((int )transport->tcp_reclen < 0) {
#line 1068
    transport->tcp_flags = transport->tcp_flags | 1UL;
  } else {
#line 1070
    transport->tcp_flags = transport->tcp_flags & 0xfffffffffffffffeUL;
  }
  {
#line 1071
  transport->tcp_reclen = transport->tcp_reclen & 2147483647U;
#line 1073
  transport->tcp_flags = transport->tcp_flags & 0xfffffffffffffffdUL;
#line 1074
  transport->tcp_offset = 0U;
#line 1077
  tmp___1 = __builtin_expect(transport->tcp_reclen <= 7U, 0L);
  }
#line 1077
  if (tmp___1 != 0L) {
    {
#line 1078
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1078
    if (tmp___0 != 0L) {
      {
#line 1078
      printk("\001dRPC:       invalid TCP record fragment length\n");
      }
    } else {

    }
    {
#line 1079
    xs_tcp_force_close(xprt);
    }
#line 1080
    return;
  } else {

  }
  {
#line 1082
  tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1082
  if (tmp___2 != 0L) {
    {
#line 1082
    printk("\001dRPC:       reading TCP record fragment of length %d\n", transport->tcp_reclen);
    }
  } else {

  }
#line 1083
  return;
}
}
#line 1086 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_check_fraghdr(struct sock_xprt *transport ) 
{ 


  {
#line 1088
  if (transport->tcp_offset == transport->tcp_reclen) {
#line 1089
    transport->tcp_flags = transport->tcp_flags | 2UL;
#line 1090
    transport->tcp_offset = 0U;
#line 1091
    if ((int )transport->tcp_flags & 1) {
#line 1092
      transport->tcp_flags = transport->tcp_flags & 0xfffffffffffffff7UL;
#line 1093
      transport->tcp_flags = transport->tcp_flags | 4UL;
#line 1094
      transport->tcp_copied = 0UL;
    } else {

    }
  } else {

  }
#line 1097
  return;
}
}
#line 1099 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_tcp_read_xid(struct sock_xprt *transport , struct xdr_skb_reader *desc ) 
{ 
  size_t len ;
  size_t used ;
  char *p ;
  long tmp ;
  __u32 tmp___0 ;
  long tmp___1 ;

  {
  {
#line 1104
  len = 4UL - (unsigned long )transport->tcp_offset;
#line 1105
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1105
  if (tmp != 0L) {
    {
#line 1105
    printk("\001dRPC:       reading XID (%Zu bytes)\n", len);
    }
  } else {

  }
  {
#line 1106
  p = (char *)(& transport->tcp_xid) + (unsigned long )transport->tcp_offset;
#line 1107
  used = xdr_skb_read_bits(desc, (void *)p, len);
#line 1108
  transport->tcp_offset = transport->tcp_offset + (u32 )used;
  }
#line 1109
  if (used != len) {
#line 1110
    return;
  } else {

  }
  {
#line 1111
  transport->tcp_flags = transport->tcp_flags & 0xfffffffffffffffbUL;
#line 1112
  transport->tcp_flags = transport->tcp_flags | 16UL;
#line 1113
  transport->tcp_copied = 4UL;
#line 1114
  tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1114
  if (tmp___1 != 0L) {
    {
#line 1114
    tmp___0 = __fswab32(transport->tcp_xid);
#line 1114
    printk("\001dRPC:       reading %s XID %08x\n", (transport->tcp_flags & 64UL) != 0UL ? (char *)"reply for" : (char *)"request with",
           tmp___0);
    }
  } else {

  }
  {
#line 1118
  xs_tcp_check_fraghdr(transport);
  }
#line 1119
  return;
}
}
#line 1121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_tcp_read_calldir(struct sock_xprt *transport , struct xdr_skb_reader *desc ) 
{ 
  size_t len ;
  size_t used ;
  u32 offset ;
  char *p ;
  long tmp ;
  __u32 tmp___0 ;
  long tmp___1 ;

  {
  {
#line 1134
  offset = transport->tcp_offset - 4U;
#line 1135
  len = 4UL - (unsigned long )offset;
#line 1136
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1136
  if (tmp != 0L) {
    {
#line 1136
    printk("\001dRPC:       reading CALL/REPLY flag (%Zu bytes)\n", len);
    }
  } else {

  }
  {
#line 1137
  p = (char *)(& transport->tcp_calldir) + (unsigned long )offset;
#line 1138
  used = xdr_skb_read_bits(desc, (void *)p, len);
#line 1139
  transport->tcp_offset = transport->tcp_offset + (u32 )used;
  }
#line 1140
  if (used != len) {
#line 1141
    return;
  } else {

  }
  {
#line 1142
  transport->tcp_flags = transport->tcp_flags & 0xffffffffffffffefUL;
#line 1147
  tmp___0 = __fswab32(transport->tcp_calldir);
  }
  {
#line 1148
  if (tmp___0 == 1U) {
#line 1148
    goto case_1;
  } else {

  }
#line 1153
  if (tmp___0 == 0U) {
#line 1153
    goto case_0;
  } else {

  }
#line 1158
  goto switch_default;
  case_1: /* CIL Label */ 
#line 1149
  transport->tcp_flags = transport->tcp_flags | 32UL;
#line 1150
  transport->tcp_flags = transport->tcp_flags | 8UL;
#line 1151
  transport->tcp_flags = transport->tcp_flags | 64UL;
#line 1152
  goto ldv_50643;
  case_0: /* CIL Label */ 
#line 1154
  transport->tcp_flags = transport->tcp_flags | 32UL;
#line 1155
  transport->tcp_flags = transport->tcp_flags | 8UL;
#line 1156
  transport->tcp_flags = transport->tcp_flags & 0xffffffffffffffbfUL;
#line 1157
  goto ldv_50643;
  switch_default: /* CIL Label */ 
  {
#line 1159
  tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1159
  if (tmp___1 != 0L) {
    {
#line 1159
    printk("\001dRPC:       invalid request message type\n");
    }
  } else {

  }
  {
#line 1160
  xs_tcp_force_close(& transport->xprt);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50643: 
  {
#line 1162
  xs_tcp_check_fraghdr(transport);
  }
#line 1163
  return;
}
}
#line 1165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_tcp_read_common(struct rpc_xprt *xprt , struct xdr_skb_reader *desc ,
                                        struct rpc_rqst *req ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct xdr_buf *rcvbuf ;
  size_t len ;
  ssize_t r ;
  struct xdr_skb_reader my_desc ;
  __u32 tmp ;
  long tmp___0 ;
  long tmp___1 ;
  __u32 tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;

  {
#line 1170
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1170
  transport = (struct sock_xprt *)__mptr;
#line 1175
  rcvbuf = & req->rq_private_buf;
#line 1177
  if ((transport->tcp_flags & 32UL) != 0UL) {
    {
#line 1181
    memcpy(rcvbuf->head[0].iov_base + transport->tcp_copied, (void const   *)(& transport->tcp_calldir),
           4UL);
#line 1184
    transport->tcp_copied = transport->tcp_copied + 4UL;
#line 1185
    transport->tcp_flags = transport->tcp_flags & 0xffffffffffffffdfUL;
    }
  } else {

  }
#line 1188
  len = desc->count;
#line 1189
  if (len > (size_t )(transport->tcp_reclen - transport->tcp_offset)) {
    {
#line 1192
    len = (size_t )(transport->tcp_reclen - transport->tcp_offset);
#line 1193
    memcpy((void *)(& my_desc), (void const   *)desc, 32UL);
#line 1194
    my_desc.count = len;
#line 1195
    r = xdr_partial_copy_from_skb(rcvbuf, (unsigned int )transport->tcp_copied, & my_desc,
                                  & xdr_skb_read_bits);
#line 1197
    desc->count = desc->count - (unsigned long )r;
#line 1198
    desc->offset = desc->offset + (unsigned int )r;
    }
  } else {
    {
#line 1200
    r = xdr_partial_copy_from_skb(rcvbuf, (unsigned int )transport->tcp_copied, desc,
                                  & xdr_skb_read_bits);
    }
  }
#line 1203
  if (r > 0L) {
#line 1204
    transport->tcp_copied = transport->tcp_copied + (unsigned long )r;
#line 1205
    transport->tcp_offset = transport->tcp_offset + (u32 )r;
  } else {

  }
#line 1207
  if ((unsigned long )r != len) {
    {
#line 1217
    transport->tcp_flags = transport->tcp_flags & 0xfffffffffffffff7UL;
#line 1218
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1218
    if (tmp___0 != 0L) {
      {
#line 1218
      tmp = __fswab32(transport->tcp_xid);
#line 1218
      printk("\001dRPC:       XID %08x truncated request\n", tmp);
      }
    } else {

    }
    {
#line 1220
    tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1220
    if (tmp___1 != 0L) {
      {
#line 1220
      printk("\001dRPC:       xprt = %p, tcp_copied = %lu, tcp_offset = %u, tcp_reclen = %u\n",
             xprt, transport->tcp_copied, transport->tcp_offset, transport->tcp_reclen);
      }
    } else {

    }
#line 1224
    return;
  } else {

  }
  {
#line 1227
  tmp___3 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1227
  if (tmp___3 != 0L) {
    {
#line 1227
    tmp___2 = __fswab32(transport->tcp_xid);
#line 1227
    printk("\001dRPC:       XID %08x read %Zd bytes\n", tmp___2, r);
    }
  } else {

  }
  {
#line 1229
  tmp___4 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1229
  if (tmp___4 != 0L) {
    {
#line 1229
    printk("\001dRPC:       xprt = %p, tcp_copied = %lu, tcp_offset = %u, tcp_reclen = %u\n",
           xprt, transport->tcp_copied, transport->tcp_offset, transport->tcp_reclen);
    }
  } else {

  }
#line 1233
  if (transport->tcp_copied == (unsigned long )req->rq_private_buf.buflen) {
#line 1234
    transport->tcp_flags = transport->tcp_flags & 0xfffffffffffffff7UL;
  } else
#line 1235
  if (transport->tcp_offset == transport->tcp_reclen) {
#line 1236
    if ((int )transport->tcp_flags & 1) {
#line 1237
      transport->tcp_flags = transport->tcp_flags & 0xfffffffffffffff7UL;
    } else {

    }
  } else {

  }
#line 1238
  return;
}
}
#line 1245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static int xs_tcp_read_reply(struct rpc_xprt *xprt , struct xdr_skb_reader *desc ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct rpc_rqst *req ;
  __u32 tmp ;
  long tmp___0 ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
  {
#line 1249
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1249
  transport = (struct sock_xprt *)__mptr;
#line 1252
  tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1252
  if (tmp___0 != 0L) {
    {
#line 1252
    tmp = __fswab32(transport->tcp_xid);
#line 1252
    printk("\001dRPC:       read reply XID %08x\n", tmp);
    }
  } else {

  }
  {
#line 1255
  spin_lock(& xprt->transport_lock);
#line 1256
  req = xprt_lookup_rqst(xprt, transport->tcp_xid);
  }
#line 1257
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
    {
#line 1258
    tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1258
    if (tmp___2 != 0L) {
      {
#line 1258
      tmp___1 = __fswab32(transport->tcp_xid);
#line 1258
      printk("\001dRPC:       XID %08x request not found!\n", tmp___1);
      }
    } else {

    }
    {
#line 1260
    spin_unlock(& xprt->transport_lock);
    }
#line 1261
    return (-1);
  } else {

  }
  {
#line 1264
  xs_tcp_read_common(xprt, desc, req);
  }
#line 1266
  if ((transport->tcp_flags & 8UL) == 0UL) {
    {
#line 1267
    xprt_complete_rqst(req->rq_task, (int )transport->tcp_copied);
    }
  } else {

  }
  {
#line 1269
  spin_unlock(& xprt->transport_lock);
  }
#line 1270
  return (0);
}
}
#line 1272 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static int xs_tcp_read_callback(struct rpc_xprt *xprt , struct xdr_skb_reader *desc ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct rpc_rqst *req ;
  __u32 tmp ;
  long tmp___0 ;
  struct svc_serv *bc_serv ;
  long tmp___1 ;

  {
  {
#line 1285
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1285
  transport = (struct sock_xprt *)__mptr;
#line 1288
  req = xprt_alloc_bc_request(xprt);
  }
#line 1289
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
    {
#line 1290
    printk("\fCallback slot table overflowed\n");
#line 1291
    xprt_force_disconnect(xprt);
    }
#line 1292
    return (-1);
  } else {

  }
  {
#line 1295
  req->rq_xid = transport->tcp_xid;
#line 1296
  tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1296
  if (tmp___0 != 0L) {
    {
#line 1296
    tmp = __fswab32(req->rq_xid);
#line 1296
    printk("\001dRPC:       read callback  XID %08x\n", tmp);
    }
  } else {

  }
  {
#line 1297
  xs_tcp_read_common(xprt, desc, req);
  }
#line 1299
  if ((transport->tcp_flags & 8UL) == 0UL) {
    {
#line 1300
    bc_serv = xprt->bc_serv;
#line 1308
    tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1308
    if (tmp___1 != 0L) {
      {
#line 1308
      printk("\001dRPC:       add callback request to list\n");
      }
    } else {

    }
    {
#line 1309
    spin_lock(& bc_serv->sv_cb_lock);
#line 1310
    list_add(& req->rq_bc_list, & bc_serv->sv_cb_list);
#line 1311
    spin_unlock(& bc_serv->sv_cb_lock);
#line 1312
    __wake_up(& bc_serv->sv_cb_waitq, 3U, 1, (void *)0);
    }
  } else {

  }
#line 1315
  req->rq_private_buf.len = (unsigned int )transport->tcp_copied;
#line 1317
  return (0);
}
}
#line 1320 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static int _xs_tcp_read_data(struct rpc_xprt *xprt , struct xdr_skb_reader *desc ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1324
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1324
  transport = (struct sock_xprt *)__mptr;
#line 1326
  if ((transport->tcp_flags & 64UL) != 0UL) {
    {
#line 1326
    tmp = xs_tcp_read_reply(xprt, desc);
#line 1326
    tmp___1 = tmp;
    }
  } else {
    {
#line 1326
    tmp___0 = xs_tcp_read_callback(xprt, desc);
#line 1326
    tmp___1 = tmp___0;
    }
  }
#line 1326
  return (tmp___1);
}
}
#line 1342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_read_data(struct rpc_xprt *xprt , struct xdr_skb_reader *desc ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  int tmp ;

  {
  {
#line 1346
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1346
  transport = (struct sock_xprt *)__mptr;
#line 1348
  tmp = _xs_tcp_read_data(xprt, desc);
  }
#line 1348
  if (tmp == 0) {
    {
#line 1349
    xs_tcp_check_fraghdr(transport);
    }
  } else {
#line 1355
    transport->tcp_flags = transport->tcp_flags & 0xfffffffffffffff7UL;
  }
#line 1356
  return;
}
}
#line 1359 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_tcp_read_discard(struct sock_xprt *transport , struct xdr_skb_reader *desc ) 
{ 
  size_t len ;
  long tmp ;

  {
#line 1363
  len = (size_t )(transport->tcp_reclen - transport->tcp_offset);
#line 1364
  if (len > desc->count) {
#line 1365
    len = desc->count;
  } else {

  }
  {
#line 1366
  desc->count = desc->count - len;
#line 1367
  desc->offset = desc->offset + (unsigned int )len;
#line 1368
  transport->tcp_offset = transport->tcp_offset + (u32 )len;
#line 1369
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1369
  if (tmp != 0L) {
    {
#line 1369
    printk("\001dRPC:       discarded %Zu bytes\n", len);
    }
  } else {

  }
  {
#line 1370
  xs_tcp_check_fraghdr(transport);
  }
#line 1371
  return;
}
}
#line 1373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_tcp_data_recv(read_descriptor_t *rd_desc , struct sk_buff *skb , unsigned int offset ,
                            size_t len ) 
{ 
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct xdr_skb_reader desc ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 1375
  xprt = (struct rpc_xprt *)rd_desc->arg.data;
#line 1376
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1376
  transport = (struct sock_xprt *)__mptr;
#line 1377
  desc.skb = skb;
#line 1377
  desc.offset = offset;
#line 1377
  desc.count = len;
#line 1377
  desc.csum = 0U;
#line 1383
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1383
  if (tmp != 0L) {
    {
#line 1383
    printk("\001dRPC:       xs_tcp_data_recv started\n");
    }
  } else {

  }
  ldv_50706: ;
#line 1387
  if ((transport->tcp_flags & 2UL) != 0UL) {
    {
#line 1388
    xs_tcp_read_fraghdr(xprt, & desc);
    }
#line 1389
    goto ldv_50705;
  } else {

  }
#line 1392
  if ((transport->tcp_flags & 4UL) != 0UL) {
    {
#line 1393
    xs_tcp_read_xid(transport, & desc);
    }
#line 1394
    goto ldv_50705;
  } else {

  }
#line 1397
  if ((transport->tcp_flags & 16UL) != 0UL) {
    {
#line 1398
    xs_tcp_read_calldir(transport, & desc);
    }
#line 1399
    goto ldv_50705;
  } else {

  }
#line 1402
  if ((transport->tcp_flags & 8UL) != 0UL) {
    {
#line 1403
    xs_tcp_read_data(xprt, & desc);
    }
#line 1404
    goto ldv_50705;
  } else {

  }
  {
#line 1407
  xs_tcp_read_discard(transport, & desc);
  }
  ldv_50705: ;
#line 1408
  if (desc.count != 0UL) {
#line 1410
    goto ldv_50706;
  } else {

  }
  {
#line 1409
  tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1409
  if (tmp___0 != 0L) {
    {
#line 1409
    printk("\001dRPC:       xs_tcp_data_recv done\n");
    }
  } else {

  }
#line 1410
  return ((int )((unsigned int )len - (unsigned int )desc.count));
}
}
#line 1419 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_data_ready(struct sock *sk , int bytes ) 
{ 
  struct rpc_xprt *xprt ;
  read_descriptor_t rd_desc ;
  int read ;
  long tmp ;

  {
  {
#line 1425
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1425
  if (tmp != 0L) {
    {
#line 1425
    printk("\001dRPC:       xs_tcp_data_ready...\n");
    }
  } else {

  }
  {
#line 1427
  _raw_read_lock_bh(& sk->sk_callback_lock);
#line 1428
  xprt = xprt_from_sock(sk);
  }
#line 1428
  if ((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0)) {
#line 1429
    goto out;
  } else {

  }
#line 1433
  if (xprt->reestablish_timeout != 0UL) {
#line 1434
    xprt->reestablish_timeout = 0UL;
  } else {

  }
#line 1437
  rd_desc.arg.data = (void *)xprt;
  ldv_50716: 
  {
#line 1439
  rd_desc.count = 65536UL;
#line 1440
  read = tcp_read_sock(sk, & rd_desc, & xs_tcp_data_recv);
  }
#line 1441
  if (read > 0) {
#line 1443
    goto ldv_50716;
  } else {

  }

  out: 
  {
#line 1443
  _raw_read_unlock_bh(& sk->sk_callback_lock);
  }
#line 1444
  return;
}
}
#line 1451 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_schedule_linger_timeout(struct rpc_xprt *xprt , unsigned long timeout ) 
{ 
  struct sock_xprt *transport ;
  int tmp ;
  struct rpc_xprt  const  *__mptr ;

  {
  {
#line 1456
  tmp = xprt_test_and_set_connecting(xprt);
  }
#line 1456
  if (tmp != 0) {
#line 1457
    return;
  } else {

  }
  {
#line 1458
  set_bit(7U, (unsigned long volatile   *)(& xprt->state));
#line 1459
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1459
  transport = (struct sock_xprt *)__mptr;
#line 1460
  queue_delayed_work(rpciod_workqueue, & transport->connect_worker, timeout);
  }
#line 1461
  return;
}
}
#line 1464 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_cancel_linger_timeout(struct rpc_xprt *xprt ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1468
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1468
  transport = (struct sock_xprt *)__mptr;
#line 1470
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& xprt->state));
  }
#line 1470
  if (tmp == 0) {
#line 1472
    return;
  } else {
    {
#line 1470
    tmp___0 = cancel_delayed_work(& transport->connect_worker);
    }
#line 1470
    if (tmp___0) {
#line 1470
      tmp___1 = 0;
    } else {
#line 1470
      tmp___1 = 1;
    }
#line 1470
    if (tmp___1) {
#line 1472
      return;
    } else {

    }
  }
  {
#line 1473
  clear_bit(7, (unsigned long volatile   *)(& xprt->state));
#line 1474
  xprt_clear_connecting(xprt);
  }
#line 1475
  return;
}
}
#line 1477 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_sock_reset_connection_flags(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 1479
  __asm__  volatile   ("": : : "memory");
#line 1480
  clear_bit(7, (unsigned long volatile   *)(& xprt->state));
#line 1481
  clear_bit(8, (unsigned long volatile   *)(& xprt->state));
#line 1482
  clear_bit(3, (unsigned long volatile   *)(& xprt->state));
#line 1483
  clear_bit(6, (unsigned long volatile   *)(& xprt->state));
#line 1484
  __asm__  volatile   ("": : : "memory");
  }
#line 1485
  return;
}
}
#line 1487 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_sock_mark_closed(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 1489
  xs_sock_reset_connection_flags(xprt);
#line 1491
  xprt_disconnect_done(xprt);
  }
#line 1492
  return;
}
}
#line 1499 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_state_change(struct sock *sk ) 
{ 
  struct rpc_xprt *xprt ;
  long tmp ;
  bool tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  int tmp___4 ;

  {
  {
#line 1503
  _raw_read_lock_bh(& sk->sk_callback_lock);
#line 1504
  xprt = xprt_from_sock(sk);
  }
#line 1504
  if ((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0)) {
#line 1505
    goto out;
  } else {

  }
  {
#line 1506
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1506
  if (tmp != 0L) {
    {
#line 1506
    printk("\001dRPC:       xs_tcp_state_change client %p...\n", xprt);
    }
  } else {

  }
  {
#line 1507
  tmp___3 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1507
  if (tmp___3 != 0L) {
    {
#line 1507
    tmp___0 = sock_flag((struct sock  const  *)sk, 8);
#line 1507
    tmp___1 = sock_flag((struct sock  const  *)sk, 0);
#line 1507
    tmp___2 = xprt_connected(xprt);
#line 1507
    printk("\001dRPC:       state %x conn %d dead %d zapped %d sk_shutdown %d\n",
           (int )sk->__sk_common.skc_state, tmp___2, (int )tmp___1, (int )tmp___0,
           (int )sk->sk_shutdown);
    }
  } else {

  }
  {
#line 1514
  if ((int )sk->__sk_common.skc_state == 1) {
#line 1514
    goto case_1;
  } else {

  }
#line 1531
  if ((int )sk->__sk_common.skc_state == 4) {
#line 1531
    goto case_4;
  } else {

  }
#line 1542
  if ((int )sk->__sk_common.skc_state == 8) {
#line 1542
    goto case_8;
  } else {

  }
#line 1547
  if ((int )sk->__sk_common.skc_state == 11) {
#line 1547
    goto case_11;
  } else {

  }
#line 1555
  if ((int )sk->__sk_common.skc_state == 9) {
#line 1555
    goto case_9;
  } else {

  }
#line 1562
  if ((int )sk->__sk_common.skc_state == 7) {
#line 1562
    goto case_7;
  } else {

  }
#line 1513
  goto switch_break;
  case_1: /* CIL Label */ 
  {
#line 1515
  spin_lock(& xprt->transport_lock);
#line 1516
  tmp___4 = xprt_test_and_set_connected(xprt);
  }
#line 1516
  if (tmp___4 == 0) {
    {
#line 1517
    __mptr = (struct rpc_xprt  const  *)xprt;
#line 1517
    transport = (struct sock_xprt *)__mptr;
#line 1521
    transport->tcp_offset = 0U;
#line 1522
    transport->tcp_reclen = 0U;
#line 1523
    transport->tcp_copied = 0UL;
#line 1524
    transport->tcp_flags = 6UL;
#line 1527
    xprt_wake_pending_tasks(xprt, -11);
    }
  } else {

  }
  {
#line 1529
  spin_unlock(& xprt->transport_lock);
  }
#line 1530
  goto ldv_50746;
  case_4: /* CIL Label */ 
  {
#line 1533
  xprt->connect_cookie = xprt->connect_cookie + 1U;
#line 1534
  xprt->reestablish_timeout = 0UL;
#line 1535
  set_bit(6U, (unsigned long volatile   *)(& xprt->state));
#line 1536
  __asm__  volatile   ("": : : "memory");
#line 1537
  clear_bit(1, (unsigned long volatile   *)(& xprt->state));
#line 1538
  clear_bit(3, (unsigned long volatile   *)(& xprt->state));
#line 1539
  __asm__  volatile   ("": : : "memory");
#line 1540
  xs_tcp_schedule_linger_timeout(xprt, (unsigned long )xs_tcp_fin_timeout);
  }
#line 1541
  goto ldv_50746;
  case_8: /* CIL Label */ 
  {
#line 1544
  xprt->connect_cookie = xprt->connect_cookie + 1U;
#line 1545
  clear_bit(1, (unsigned long volatile   *)(& xprt->state));
#line 1546
  xs_tcp_force_close(xprt);
  }
  case_11: /* CIL Label */ ;
#line 1552
  if (xprt->reestablish_timeout <= 749UL) {
#line 1553
    xprt->reestablish_timeout = 750UL;
  } else {

  }
#line 1554
  goto ldv_50746;
  case_9: /* CIL Label */ 
  {
#line 1556
  set_bit(6U, (unsigned long volatile   *)(& xprt->state));
#line 1557
  xs_tcp_schedule_linger_timeout(xprt, (unsigned long )xs_tcp_fin_timeout);
#line 1558
  __asm__  volatile   ("": : : "memory");
#line 1559
  clear_bit(1, (unsigned long volatile   *)(& xprt->state));
#line 1560
  __asm__  volatile   ("": : : "memory");
  }
#line 1561
  goto ldv_50746;
  case_7: /* CIL Label */ 
  {
#line 1563
  xs_tcp_cancel_linger_timeout(xprt);
#line 1564
  xs_sock_mark_closed(xprt);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50746: ;
  out: 
  {
#line 1567
  _raw_read_unlock_bh(& sk->sk_callback_lock);
  }
#line 1568
  return;
}
}
#line 1570 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_write_space(struct sock *sk ) 
{ 
  struct socket *sock ;
  struct rpc_xprt *xprt ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1575
  sock = sk->sk_socket;
#line 1575
  tmp = __builtin_expect((unsigned long )sock == (unsigned long )((struct socket *)0),
                         0L);
  }
#line 1575
  if (tmp != 0L) {
#line 1576
    return;
  } else {

  }
  {
#line 1577
  clear_bit(2, (unsigned long volatile   *)(& sock->flags));
#line 1579
  xprt = xprt_from_sock(sk);
#line 1579
  tmp___0 = __builtin_expect((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0),
                             0L);
  }
#line 1579
  if (tmp___0 != 0L) {
#line 1580
    return;
  } else {

  }
  {
#line 1581
  tmp___1 = test_and_clear_bit(0, (unsigned long volatile   *)(& sock->flags));
  }
#line 1581
  if (tmp___1 == 0) {
#line 1582
    return;
  } else {

  }
  {
#line 1584
  xprt_write_space(xprt);
  }
#line 1585
  return;
}
}
#line 1597 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_udp_write_space(struct sock *sk ) 
{ 
  bool tmp ;

  {
  {
#line 1599
  _raw_read_lock_bh(& sk->sk_callback_lock);
#line 1602
  tmp = sock_writeable((struct sock  const  *)sk);
  }
#line 1602
  if ((int )tmp) {
    {
#line 1603
    xs_write_space(sk);
    }
  } else {

  }
  {
#line 1605
  _raw_read_unlock_bh(& sk->sk_callback_lock);
  }
#line 1606
  return;
}
}
#line 1618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_write_space(struct sock *sk ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1620
  _raw_read_lock_bh(& sk->sk_callback_lock);
#line 1623
  tmp = sk_stream_wspace((struct sock  const  *)sk);
#line 1623
  tmp___0 = sk_stream_min_wspace((struct sock  const  *)sk);
  }
#line 1623
  if (tmp >= tmp___0) {
    {
#line 1624
    xs_write_space(sk);
    }
  } else {

  }
  {
#line 1626
  _raw_read_unlock_bh(& sk->sk_callback_lock);
  }
#line 1627
  return;
}
}
#line 1629 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_udp_do_set_buffer_size(struct rpc_xprt *xprt ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct sock *sk ;

  {
#line 1631
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1631
  transport = (struct sock_xprt *)__mptr;
#line 1632
  sk = transport->inet;
#line 1634
  if (transport->rcvsize != 0UL) {
#line 1635
    sk->sk_userlocks = (unsigned int )((unsigned char )sk->sk_userlocks) | 2U;
#line 1636
    sk->sk_rcvbuf = (int )(((unsigned int )transport->rcvsize * xprt->max_reqs) * 2U);
  } else {

  }
#line 1638
  if (transport->sndsize != 0UL) {
    {
#line 1639
    sk->sk_userlocks = (unsigned int )((unsigned char )sk->sk_userlocks) | 1U;
#line 1640
    sk->sk_sndbuf = (int )(((unsigned int )transport->sndsize * xprt->max_reqs) * 2U);
#line 1641
    (*(sk->sk_write_space))(sk);
    }
  } else {

  }
#line 1643
  return;
}
}
#line 1653 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_udp_set_buffer_size(struct rpc_xprt *xprt , size_t sndsize , size_t rcvsize ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;

  {
#line 1655
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1655
  transport = (struct sock_xprt *)__mptr;
#line 1657
  transport->sndsize = 0UL;
#line 1658
  if (sndsize != 0UL) {
#line 1659
    transport->sndsize = sndsize + 1024UL;
  } else {

  }
#line 1660
  transport->rcvsize = 0UL;
#line 1661
  if (rcvsize != 0UL) {
#line 1662
    transport->rcvsize = rcvsize + 1024UL;
  } else {

  }
  {
#line 1664
  xs_udp_do_set_buffer_size(xprt);
  }
#line 1665
  return;
}
}
#line 1673 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_udp_timer(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 


  {
  {
#line 1675
  xprt_adjust_cwnd(xprt, task, -110);
  }
#line 1676
  return;
}
}
#line 1678 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned short xs_get_random_port(void) 
{ 
  unsigned short range ;
  unsigned short rand ;
  u32 tmp ;

  {
  {
#line 1680
  range = (int )((unsigned short )xprt_max_resvport) - (int )((unsigned short )xprt_min_resvport);
#line 1681
  tmp = prandom_u32();
#line 1681
  rand = (int )((unsigned short )tmp) % (int )range;
  }
#line 1682
  return ((int )rand + (int )((unsigned short )xprt_min_resvport));
}
}
#line 1691 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_set_port(struct rpc_xprt *xprt , unsigned short port ) 
{ 
  long tmp ;
  struct sockaddr *tmp___0 ;

  {
  {
#line 1693
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1693
  if (tmp != 0L) {
    {
#line 1693
    printk("\001dRPC:       setting port for xprt %p to %u\n", xprt, (int )port);
    }
  } else {

  }
  {
#line 1695
  tmp___0 = xs_addr(xprt);
#line 1695
  rpc_set_port___0(tmp___0, (int )port);
#line 1696
  xs_update_peer_port(xprt);
  }
#line 1697
  return;
}
}
#line 1699 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned short xs_get_srcport(struct sock_xprt *transport ) 
{ 
  unsigned short port ;

  {
#line 1701
  port = transport->srcport;
#line 1703
  if ((unsigned int )port == 0U && (unsigned int )*((unsigned char *)transport + 1488UL) != 0U) {
    {
#line 1704
    port = xs_get_random_port();
    }
  } else {

  }
#line 1705
  return (port);
}
}
#line 1708 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static unsigned short xs_next_srcport(struct sock_xprt *transport , unsigned short port ) 
{ 


  {
#line 1710
  if ((unsigned int )transport->srcport != 0U) {
#line 1711
    transport->srcport = 0U;
  } else {

  }
#line 1712
  if ((unsigned int )*((unsigned char *)transport + 1488UL) == 0U) {
#line 1713
    return (0U);
  } else {

  }
#line 1714
  if ((unsigned int )port <= xprt_min_resvport || (unsigned int )port > xprt_max_resvport) {
#line 1715
    return ((unsigned short )xprt_max_resvport);
  } else {

  }
#line 1716
  port = (unsigned short )((int )port - 1);
#line 1716
  return (port);
}
}
#line 1718 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_bind(struct sock_xprt *transport , struct socket *sock ) 
{ 
  struct __kernel_sockaddr_storage myaddr ;
  int err ;
  int nloop ;
  unsigned short port ;
  unsigned short tmp ;
  unsigned short last ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 1721
  nloop = 0;
#line 1722
  tmp = xs_get_srcport(transport);
#line 1722
  port = tmp;
#line 1725
  memcpy((void *)(& myaddr), (void const   *)(& transport->srcaddr), transport->xprt.addrlen);
  }
  ldv_50809: 
  {
#line 1727
  rpc_set_port___0((struct sockaddr *)(& myaddr), (int )port);
#line 1728
  err = kernel_bind(sock, (struct sockaddr *)(& myaddr), (int )transport->xprt.addrlen);
  }
#line 1730
  if ((unsigned int )port == 0U) {
#line 1731
    goto ldv_50808;
  } else {

  }
#line 1732
  if (err == 0) {
#line 1733
    transport->srcport = port;
#line 1734
    goto ldv_50808;
  } else {

  }
  {
#line 1736
  last = port;
#line 1737
  port = xs_next_srcport(transport, (int )port);
  }
#line 1738
  if ((int )port > (int )last) {
#line 1739
    nloop = nloop + 1;
  } else {

  }
#line 1740
  if (err == -98 && nloop != 2) {
#line 1742
    goto ldv_50809;
  } else {

  }
  ldv_50808: ;
#line 1742
  if ((unsigned int )myaddr.ss_family == 2U) {
    {
#line 1743
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1743
    if (tmp___0 != 0L) {
      {
#line 1743
      printk("\001dRPC:       %s %pI4:%u: %s (%d)\n", "xs_bind", & ((struct sockaddr_in *)(& myaddr))->sin_addr,
             (int )port, err != 0 ? (char *)"failed" : (char *)"ok", err);
      }
    } else {

    }
  } else {
    {
#line 1747
    tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1747
    if (tmp___1 != 0L) {
      {
#line 1747
      printk("\001dRPC:       %s %pI6:%u: %s (%d)\n", "xs_bind", & ((struct sockaddr_in6 *)(& myaddr))->sin6_addr,
             (int )port, err != 0 ? (char *)"failed" : (char *)"ok", err);
      }
    } else {

    }
  }
#line 1750
  return (err);
}
}
#line 1756 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_local_rpcbind(struct rpc_task *task ) 
{ 
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1758
  rcu_read_lock();
#line 1759
  _________p1 = *((struct rpc_xprt * volatile  *)(& (task->tk_client)->cl_xprt));
#line 1759
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1759
  if (tmp != 0 && ! __warned) {
    {
#line 1759
    tmp___0 = rcu_read_lock_held();
    }
#line 1759
    if (tmp___0 == 0) {
      {
#line 1759
      __warned = 1;
#line 1759
      lockdep_rcu_suspicious("net/sunrpc/xprtsock.c", 1759, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 1759
  xprt_set_bound(_________p1);
#line 1760
  rcu_read_unlock();
  }
#line 1761
  return;
}
}
#line 1763 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_local_set_port(struct rpc_xprt *xprt , unsigned short port ) 
{ 


  {
#line 1765
  return;
}
}
#line 1768 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct lock_class_key xs_key[2U]  ;
#line 1769 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct lock_class_key xs_slock_key[2U]  ;
#line 1771 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_reclassify_socketu(struct socket *sock ) 
{ 
  struct sock *sk ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
  {
#line 1773
  sk = sock->sk;
#line 1775
  sk->sk_lock.owned = 0;
#line 1775
  __init_waitqueue_head(& sk->sk_lock.wq, "&sk->sk_lock.wq", & __key);
#line 1775
  spinlock_check(& sk->sk_lock.slock);
#line 1775
  __raw_spin_lock_init(& sk->sk_lock.slock.__annonCompField20.rlock, "&(&(sk)->sk_lock.slock)->rlock",
                       & __key___0);
#line 1775
  debug_check_no_locks_freed((void const   *)(& sk->sk_lock), 216UL);
#line 1775
  lockdep_init_map(& sk->sk_lock.slock.__annonCompField20.__annonCompField19.dep_map,
                   "slock-AF_LOCAL-RPC", (struct lock_class_key *)(& xs_slock_key) + 1UL,
                   0);
#line 1775
  lockdep_init_map(& sk->sk_lock.dep_map, "sk_lock-AF_LOCAL-RPC", (struct lock_class_key *)(& xs_key) + 1UL,
                   0);
  }
#line 1776
  return;
}
}
#line 1779 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_reclassify_socket4(struct socket *sock ) 
{ 
  struct sock *sk ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
  {
#line 1781
  sk = sock->sk;
#line 1783
  sk->sk_lock.owned = 0;
#line 1783
  __init_waitqueue_head(& sk->sk_lock.wq, "&sk->sk_lock.wq", & __key);
#line 1783
  spinlock_check(& sk->sk_lock.slock);
#line 1783
  __raw_spin_lock_init(& sk->sk_lock.slock.__annonCompField20.rlock, "&(&(sk)->sk_lock.slock)->rlock",
                       & __key___0);
#line 1783
  debug_check_no_locks_freed((void const   *)(& sk->sk_lock), 216UL);
#line 1783
  lockdep_init_map(& sk->sk_lock.slock.__annonCompField20.__annonCompField19.dep_map,
                   "slock-AF_INET-RPC", (struct lock_class_key *)(& xs_slock_key),
                   0);
#line 1783
  lockdep_init_map(& sk->sk_lock.dep_map, "sk_lock-AF_INET-RPC", (struct lock_class_key *)(& xs_key),
                   0);
  }
#line 1784
  return;
}
}
#line 1787 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_reclassify_socket6(struct socket *sock ) 
{ 
  struct sock *sk ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
  {
#line 1789
  sk = sock->sk;
#line 1791
  sk->sk_lock.owned = 0;
#line 1791
  __init_waitqueue_head(& sk->sk_lock.wq, "&sk->sk_lock.wq", & __key);
#line 1791
  spinlock_check(& sk->sk_lock.slock);
#line 1791
  __raw_spin_lock_init(& sk->sk_lock.slock.__annonCompField20.rlock, "&(&(sk)->sk_lock.slock)->rlock",
                       & __key___0);
#line 1791
  debug_check_no_locks_freed((void const   *)(& sk->sk_lock), 216UL);
#line 1791
  lockdep_init_map(& sk->sk_lock.slock.__annonCompField20.__annonCompField19.dep_map,
                   "slock-AF_INET6-RPC", (struct lock_class_key *)(& xs_slock_key) + 1UL,
                   0);
#line 1791
  lockdep_init_map(& sk->sk_lock.dep_map, "sk_lock-AF_INET6-RPC", (struct lock_class_key *)(& xs_key) + 1UL,
                   0);
  }
#line 1792
  return;
}
}
#line 1795 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
__inline static void xs_reclassify_socket(int family , struct socket *sock ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 1797
  __ret_warn_once = (sock->sk)->sk_lock.owned != 0;
#line 1797
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 1797
  if (tmp___1 != 0L) {
    {
#line 1797
    __ret_warn_on = ! __warned;
#line 1797
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1797
    if (tmp != 0L) {
      {
#line 1797
      warn_slowpath_null("net/sunrpc/xprtsock.c", 1797);
      }
    } else {

    }
    {
#line 1797
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1797
    if (tmp___0 != 0L) {
#line 1797
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 1797
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 1798
  if ((sock->sk)->sk_lock.owned != 0) {
#line 1799
    return;
  } else {

  }
  {
#line 1802
  if (family == 1) {
#line 1802
    goto case_1;
  } else {

  }
#line 1805
  if (family == 2) {
#line 1805
    goto case_2;
  } else {

  }
#line 1808
  if (family == 10) {
#line 1808
    goto case_10;
  } else {

  }
#line 1801
  goto switch_break;
  case_1: /* CIL Label */ 
  {
#line 1803
  xs_reclassify_socketu(sock);
  }
#line 1804
  goto ldv_50851;
  case_2: /* CIL Label */ 
  {
#line 1806
  xs_reclassify_socket4(sock);
  }
#line 1807
  goto ldv_50851;
  case_10: /* CIL Label */ 
  {
#line 1809
  xs_reclassify_socket6(sock);
  }
#line 1810
  goto ldv_50851;
  switch_break: /* CIL Label */ ;
  }
  ldv_50851: ;
#line 1813
  return;
}
}
#line 1831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct socket *xs_create_sock(struct rpc_xprt *xprt , struct sock_xprt *transport ,
                                     int family , int type , int protocol ) 
{ 
  struct socket *sock ;
  int err ;
  long tmp ;
  void *tmp___0 ;

  {
  {
#line 1837
  err = __sock_create(xprt->xprt_net, family, type, protocol, & sock, 1);
  }
#line 1838
  if (err < 0) {
    {
#line 1839
    tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1839
    if (tmp != 0L) {
      {
#line 1839
      printk("\001dRPC:       can\'t create %d transport socket (%d).\n", protocol,
             - err);
      }
    } else {

    }
#line 1841
    goto out;
  } else {

  }
  {
#line 1843
  xs_reclassify_socket(family, sock);
#line 1845
  err = xs_bind(transport, sock);
  }
#line 1846
  if (err != 0) {
    {
#line 1847
    sock_release(sock);
    }
#line 1848
    goto out;
  } else {

  }
#line 1851
  return (sock);
  out: 
  {
#line 1853
  tmp___0 = ERR_PTR((long )err);
  }
#line 1853
  return ((struct socket *)tmp___0);
}
}
#line 1856 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_local_finish_connecting(struct rpc_xprt *xprt , struct socket *sock ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct sock *sk ;
  struct sockaddr *tmp ;
  int tmp___0 ;

  {
#line 1859
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1859
  transport = (struct sock_xprt *)__mptr;
#line 1862
  if ((unsigned long )transport->inet == (unsigned long )((struct sock *)0)) {
    {
#line 1863
    sk = sock->sk;
#line 1865
    _raw_write_lock_bh(& sk->sk_callback_lock);
#line 1867
    xs_save_old_callbacks(transport, sk);
#line 1869
    sk->sk_user_data = (void *)xprt;
#line 1870
    sk->sk_data_ready = & xs_local_data_ready;
#line 1871
    sk->sk_write_space = & xs_udp_write_space;
#line 1872
    sk->sk_allocation = 32U;
#line 1874
    xprt_clear_connected(xprt);
#line 1877
    transport->sock = sock;
#line 1878
    transport->inet = sk;
#line 1880
    _raw_write_unlock_bh(& sk->sk_callback_lock);
    }
  } else {

  }
  {
#line 1884
  xprt->stat.connect_count = xprt->stat.connect_count + 1UL;
#line 1885
  xprt->stat.connect_start = jiffies;
#line 1886
  tmp = xs_addr(xprt);
#line 1886
  tmp___0 = kernel_connect(sock, tmp, (int )xprt->addrlen, 0);
  }
#line 1886
  return (tmp___0);
}
}
#line 1895 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_local_setup_socket(struct sock_xprt *transport ) 
{ 
  struct rpc_xprt *xprt ;
  struct socket *sock ;
  int status ;
  struct task_struct *tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  struct task_struct *tmp___5 ;

  {
  {
#line 1897
  xprt = & transport->xprt;
#line 1899
  status = -5;
#line 1901
  tmp = get_current();
#line 1901
  tmp->flags = tmp->flags | 131072U;
#line 1903
  clear_bit(7, (unsigned long volatile   *)(& xprt->state));
#line 1904
  status = __sock_create(xprt->xprt_net, 1, 1, 0, & sock, 1);
  }
#line 1906
  if (status < 0) {
    {
#line 1907
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 1907
    if (tmp___0 != 0L) {
      {
#line 1907
      printk("\001dRPC:       can\'t create AF_LOCAL transport socket (%d).\n", - status);
      }
    } else {

    }
#line 1909
    goto out;
  } else {

  }
  {
#line 1911
  xs_reclassify_socketu(sock);
#line 1913
  tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1913
  if (tmp___1 != 0L) {
    {
#line 1913
    printk("\001dRPC:       worker connecting xprt %p via AF_LOCAL to %s\n", xprt,
           xprt->address_strings[0]);
    }
  } else {

  }
  {
#line 1916
  status = xs_local_finish_connecting(xprt, sock);
  }
  {
#line 1918
  if (status == 0) {
#line 1918
    goto case_0;
  } else {

  }
#line 1923
  if (status == -2) {
#line 1923
    goto case_neg_2;
  } else {

  }
#line 1927
  if (status == -111) {
#line 1927
    goto case_neg_111;
  } else {

  }
#line 1931
  goto switch_default;
  case_0: /* CIL Label */ 
  {
#line 1919
  tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1919
  if (tmp___2 != 0L) {
    {
#line 1919
    printk("\001dRPC:       xprt %p connected to %s\n", xprt, xprt->address_strings[0]);
    }
  } else {

  }
  {
#line 1921
  xprt_set_connected(xprt);
  }
#line 1922
  goto ldv_50880;
  case_neg_2: /* CIL Label */ 
  {
#line 1924
  tmp___3 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1924
  if (tmp___3 != 0L) {
    {
#line 1924
    printk("\001dRPC:       xprt %p: socket %s does not exist\n", xprt, xprt->address_strings[0]);
    }
  } else {

  }
#line 1926
  goto ldv_50880;
  case_neg_111: /* CIL Label */ 
  {
#line 1928
  tmp___4 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 1928
  if (tmp___4 != 0L) {
    {
#line 1928
    printk("\001dRPC:       xprt %p: connection refused for %s\n", xprt, xprt->address_strings[0]);
    }
  } else {

  }
#line 1930
  goto ldv_50880;
  switch_default: /* CIL Label */ 
  {
#line 1932
  printk("\v%s: unhandled error (%d) connecting to %s\n", "xs_local_setup_socket",
         - status, xprt->address_strings[0]);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50880: ;
  out: 
  {
#line 1938
  xprt_clear_connecting(xprt);
#line 1939
  xprt_wake_pending_tasks(xprt, status);
#line 1940
  tmp___5 = get_current();
#line 1940
  tmp___5->flags = tmp___5->flags & 4294836223U;
  }
#line 1941
  return (status);
}
}
#line 1944 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_local_connect(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  int ret ;

  {
#line 1946
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1946
  transport = (struct sock_xprt *)__mptr;
#line 1949
  if ((int )task->tk_flags & 1) {
    {
#line 1959
    rpc_exit(task, -107);
    }
#line 1960
    return;
  } else {

  }
  {
#line 1962
  ret = xs_local_setup_socket(transport);
  }
#line 1963
  if (ret != 0 && ((int )task->tk_flags & 1024) == 0) {
    {
#line 1964
    msleep_interruptible(15000U);
    }
  } else {

  }
#line 1965
  return;
}
}
#line 1968 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_set_memalloc(struct rpc_xprt *xprt ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;

  {
#line 1970
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1970
  transport = (struct sock_xprt *)__mptr;
#line 1973
  if (xprt->swapper != 0U) {
    {
#line 1974
    sk_set_memalloc(transport->inet);
    }
  } else {

  }
#line 1975
  return;
}
}
#line 1983 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
int xs_swapper(struct rpc_xprt *xprt , int enable ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  int err ;

  {
#line 1985
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 1985
  transport = (struct sock_xprt *)__mptr;
#line 1987
  err = 0;
#line 1989
  if (enable != 0) {
    {
#line 1990
    xprt->swapper = xprt->swapper + 1U;
#line 1991
    xs_set_memalloc(xprt);
    }
  } else
#line 1992
  if (xprt->swapper != 0U) {
    {
#line 1993
    xprt->swapper = xprt->swapper - 1U;
#line 1994
    sk_clear_memalloc(transport->inet);
    }
  } else {

  }
#line 1997
  return (err);
}
}
#line 2006 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_udp_finish_connecting(struct rpc_xprt *xprt , struct socket *sock ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct sock *sk ;

  {
#line 2008
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2008
  transport = (struct sock_xprt *)__mptr;
#line 2010
  if ((unsigned long )transport->inet == (unsigned long )((struct sock *)0)) {
    {
#line 2011
    sk = sock->sk;
#line 2013
    _raw_write_lock_bh(& sk->sk_callback_lock);
#line 2015
    xs_save_old_callbacks(transport, sk);
#line 2017
    sk->sk_user_data = (void *)xprt;
#line 2018
    sk->sk_data_ready = & xs_udp_data_ready;
#line 2019
    sk->sk_write_space = & xs_udp_write_space;
#line 2020
    sk->sk_no_check = 2U;
#line 2021
    sk->sk_allocation = 32U;
#line 2023
    xprt_set_connected(xprt);
#line 2026
    transport->sock = sock;
#line 2027
    transport->inet = sk;
#line 2029
    xs_set_memalloc(xprt);
#line 2031
    _raw_write_unlock_bh(& sk->sk_callback_lock);
    }
  } else {

  }
  {
#line 2033
  xs_udp_do_set_buffer_size(xprt);
  }
#line 2034
  return;
}
}
#line 2036 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_udp_setup_socket(struct work_struct *work ) 
{ 
  struct sock_xprt *transport ;
  struct work_struct  const  *__mptr ;
  struct rpc_xprt *xprt ;
  struct socket *sock ;
  int status ;
  struct task_struct *tmp ;
  struct sockaddr *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  struct task_struct *tmp___3 ;

  {
  {
#line 2039
  __mptr = (struct work_struct  const  *)work;
#line 2039
  transport = (struct sock_xprt *)((char *)__mptr + 0xfffffffffffff730UL);
#line 2040
  xprt = & transport->xprt;
#line 2041
  sock = transport->sock;
#line 2042
  status = -5;
#line 2044
  tmp = get_current();
#line 2044
  tmp->flags = tmp->flags | 131072U;
#line 2047
  xs_reset_transport(transport);
#line 2048
  tmp___0 = xs_addr(xprt);
#line 2048
  sock = xs_create_sock(xprt, transport, (int )tmp___0->sa_family, 2, 17);
#line 2050
  tmp___1 = IS_ERR((void const   *)sock);
  }
#line 2050
  if (tmp___1 != 0L) {
#line 2051
    goto out;
  } else {

  }
  {
#line 2053
  tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2053
  if (tmp___2 != 0L) {
    {
#line 2053
    printk("\001dRPC:       worker connecting xprt %p via %s to %s (port %s)\n", xprt,
           xprt->address_strings[2], xprt->address_strings[0], xprt->address_strings[1]);
    }
  } else {

  }
  {
#line 2059
  xs_udp_finish_connecting(xprt, sock);
#line 2060
  status = 0;
  }
  out: 
  {
#line 2062
  xprt_clear_connecting(xprt);
#line 2063
  xprt_wake_pending_tasks(xprt, status);
#line 2064
  tmp___3 = get_current();
#line 2064
  tmp___3->flags = tmp___3->flags & 4294836223U;
  }
#line 2065
  return;
}
}
#line 2071 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_abort_connection(struct sock_xprt *transport ) 
{ 
  int result ;
  struct sockaddr any ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 2076
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2076
  if (tmp != 0L) {
    {
#line 2076
    printk("\001dRPC:       disconnecting xprt %p to reuse port\n", transport);
    }
  } else {

  }
  {
#line 2082
  memset((void *)(& any), 0, 16UL);
#line 2083
  any.sa_family = 0U;
#line 2084
  result = kernel_connect(transport->sock, & any, 16, 0);
  }
#line 2085
  if (result == 0) {
    {
#line 2086
    xs_sock_reset_connection_flags(& transport->xprt);
    }
  } else {

  }
  {
#line 2087
  tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2087
  if (tmp___0 != 0L) {
    {
#line 2087
    printk("\001dRPC:       AF_UNSPEC connect return code %d\n", result);
    }
  } else {

  }
#line 2088
  return;
}
}
#line 2090 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_reuse_connection(struct sock_xprt *transport ) 
{ 
  unsigned int state ;
  long tmp ;
  long tmp___0 ;

  {
#line 2092
  state = (unsigned int )(transport->inet)->__sk_common.skc_state;
#line 2094
  if (state == 7U && (unsigned int )(transport->sock)->state == 1U) {
#line 2098
    if ((unsigned int )*((unsigned char *)transport->inet + 672UL) == 0U) {
#line 2099
      return;
    } else {

    }
    {
#line 2100
    tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2100
    if (tmp != 0L) {
      {
#line 2100
      printk("\001dRPC:       %s: TCP_CLOSEd and sk_shutdown set to %d\n", "xs_tcp_reuse_connection",
             (int )(transport->inet)->sk_shutdown);
      }
    } else {

    }
  } else {

  }
#line 2103
  if ((6 >> (int )state) & 1) {
#line 2107
    if ((unsigned int )*((unsigned char *)transport->inet + 672UL) == 0U) {
#line 2108
      return;
    } else {

    }
    {
#line 2109
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2109
    if (tmp___0 != 0L) {
      {
#line 2109
      printk("\001dRPC:       %s: ESTABLISHED/SYN_SENT sk_shutdown set to %d\n", "xs_tcp_reuse_connection",
             (int )(transport->inet)->sk_shutdown);
      }
    } else {

    }
  } else {

  }
  {
#line 2113
  xs_abort_connection(transport);
  }
#line 2114
  return;
}
}
#line 2116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_tcp_finish_connecting(struct rpc_xprt *xprt , struct socket *sock ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  int ret ;
  struct sock *sk ;
  struct tcp_sock *tmp ;
  struct tcp_sock *tmp___0 ;
  struct tcp_sock *tmp___1 ;
  int tmp___2 ;
  struct sockaddr *tmp___3 ;

  {
#line 2118
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2118
  transport = (struct sock_xprt *)__mptr;
#line 2119
  ret = -107;
#line 2121
  if ((unsigned long )transport->inet == (unsigned long )((struct sock *)0)) {
    {
#line 2122
    sk = sock->sk;
#line 2124
    _raw_write_lock_bh(& sk->sk_callback_lock);
#line 2126
    xs_save_old_callbacks(transport, sk);
#line 2128
    sk->sk_user_data = (void *)xprt;
#line 2129
    sk->sk_data_ready = & xs_tcp_data_ready;
#line 2130
    sk->sk_state_change = & xs_tcp_state_change;
#line 2131
    sk->sk_write_space = & xs_tcp_write_space;
#line 2132
    sk->sk_allocation = 32U;
#line 2135
    sk->sk_userlocks = (unsigned int )((unsigned char )sk->sk_userlocks) | 8U;
#line 2136
    sock_reset_flag(sk, 4);
#line 2137
    tmp = tcp_sk((struct sock  const  *)sk);
#line 2137
    tmp->linger2 = 0;
#line 2138
    tmp___0 = tcp_sk((struct sock  const  *)sk);
#line 2138
    tmp___1 = tcp_sk((struct sock  const  *)sk);
#line 2138
    tmp___0->nonagle = (unsigned int )tmp___1->nonagle | 1U;
#line 2140
    xprt_clear_connected(xprt);
#line 2143
    transport->sock = sock;
#line 2144
    transport->inet = sk;
#line 2146
    _raw_write_unlock_bh(& sk->sk_callback_lock);
    }
  } else {

  }
  {
#line 2149
  tmp___2 = xprt_bound(xprt);
  }
#line 2149
  if (tmp___2 == 0) {
#line 2150
    goto out;
  } else {

  }
  {
#line 2152
  xs_set_memalloc(xprt);
#line 2155
  xprt->stat.connect_count = xprt->stat.connect_count + 1UL;
#line 2156
  xprt->stat.connect_start = jiffies;
#line 2157
  tmp___3 = xs_addr(xprt);
#line 2157
  ret = kernel_connect(sock, tmp___3, (int )xprt->addrlen, 2048);
  }
  {
#line 2159
  if (ret == 0) {
#line 2159
    goto case_0;
  } else {

  }
#line 2160
  if (ret == -115) {
#line 2160
    goto case_neg_115;
  } else {

  }
#line 2158
  goto switch_break;
  case_0: /* CIL Label */ ;
  case_neg_115: /* CIL Label */ 
#line 2162
  xprt->connect_cookie = xprt->connect_cookie + 1U;
#line 2163
  if (xprt->reestablish_timeout <= 749UL) {
#line 2164
    xprt->reestablish_timeout = 750UL;
  } else {

  }
  switch_break: /* CIL Label */ ;
  }
  out: ;
#line 2167
  return (ret);
}
}
#line 2178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_setup_socket(struct work_struct *work ) 
{ 
  struct sock_xprt *transport ;
  struct work_struct  const  *__mptr ;
  struct socket *sock ;
  struct rpc_xprt *xprt ;
  int status ;
  struct task_struct *tmp ;
  struct sockaddr *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int abort_and_exit ;
  long tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;

  {
  {
#line 2181
  __mptr = (struct work_struct  const  *)work;
#line 2181
  transport = (struct sock_xprt *)((char *)__mptr + 0xfffffffffffff730UL);
#line 2182
  sock = transport->sock;
#line 2183
  xprt = & transport->xprt;
#line 2184
  status = -5;
#line 2186
  tmp = get_current();
#line 2186
  tmp->flags = tmp->flags | 131072U;
  }
#line 2188
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
    {
#line 2189
    clear_bit(7, (unsigned long volatile   *)(& xprt->state));
#line 2190
    tmp___0 = xs_addr(xprt);
#line 2190
    sock = xs_create_sock(xprt, transport, (int )tmp___0->sa_family, 1, 6);
#line 2192
    tmp___2 = IS_ERR((void const   *)sock);
    }
#line 2192
    if (tmp___2 != 0L) {
      {
#line 2193
      tmp___1 = PTR_ERR((void const   *)sock);
#line 2193
      status = (int )tmp___1;
      }
#line 2194
      goto out;
    } else {

    }
  } else {
    {
#line 2199
    abort_and_exit = test_and_clear_bit(7, (unsigned long volatile   *)(& xprt->state));
#line 2202
    xs_tcp_reuse_connection(transport);
    }
#line 2204
    if (abort_and_exit != 0) {
#line 2205
      goto out_eagain;
    } else {

    }
  }
  {
#line 2208
  tmp___3 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2208
  if (tmp___3 != 0L) {
    {
#line 2208
    printk("\001dRPC:       worker connecting xprt %p via %s to %s (port %s)\n", xprt,
           xprt->address_strings[2], xprt->address_strings[0], xprt->address_strings[1]);
    }
  } else {

  }
  {
#line 2214
  status = xs_tcp_finish_connecting(xprt, sock);
#line 2215
  tmp___5 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2215
  if (tmp___5 != 0L) {
    {
#line 2215
    tmp___4 = xprt_connected(xprt);
#line 2215
    printk("\001dRPC:       %p connect status %d connected %d sock state %d\n", xprt,
           - status, tmp___4, (int )(sock->sk)->__sk_common.skc_state);
    }
  } else {

  }
  {
#line 2222
  if (status == -99) {
#line 2222
    goto case_neg_99;
  } else {

  }
#line 2228
  if (status == 0) {
#line 2228
    goto case_0;
  } else {

  }
#line 2229
  if (status == -115) {
#line 2229
    goto case_neg_115;
  } else {

  }
#line 2230
  if (status == -114) {
#line 2230
    goto case_neg_114;
  } else {

  }
#line 2234
  if (status == -22) {
#line 2234
    goto case_neg_22;
  } else {

  }
#line 2238
  if (status == -111) {
#line 2238
    goto case_neg_111;
  } else {

  }
#line 2239
  if (status == -104) {
#line 2239
    goto case_neg_104;
  } else {

  }
#line 2240
  if (status == -101) {
#line 2240
    goto case_neg_101;
  } else {

  }
#line 2219
  goto switch_default;
  switch_default: /* CIL Label */ 
  {
#line 2220
  printk("%s: connect returned unhandled error %d\n", "xs_tcp_setup_socket", status);
  }
  case_neg_99: /* CIL Label */ 
  {
#line 2226
  xs_tcp_force_close(xprt);
  }
#line 2227
  goto ldv_50969;
  case_0: /* CIL Label */ ;
  case_neg_115: /* CIL Label */ ;
  case_neg_114: /* CIL Label */ 
  {
#line 2231
  xprt_clear_connecting(xprt);
#line 2232
  tmp___6 = get_current();
#line 2232
  tmp___6->flags = tmp___6->flags & 4294836223U;
  }
#line 2233
  return;
  case_neg_22: /* CIL Label */ ;
  case_neg_111: /* CIL Label */ ;
  case_neg_104: /* CIL Label */ ;
  case_neg_101: /* CIL Label */ ;
#line 2242
  goto out;
  switch_break: /* CIL Label */ ;
  }
  ldv_50969: ;
  out_eagain: 
#line 2245
  status = -11;
  out: 
  {
#line 2247
  xprt_clear_connecting(xprt);
#line 2248
  xprt_wake_pending_tasks(xprt, status);
#line 2249
  tmp___7 = get_current();
#line 2249
  tmp___7->flags = tmp___7->flags & 4294836223U;
  }
#line 2250
  return;
}
}
#line 2266 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_connect(struct rpc_xprt *xprt , struct rpc_task *task ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  long tmp ;
  long tmp___0 ;

  {
#line 2268
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2268
  transport = (struct sock_xprt *)__mptr;
#line 2270
  if ((unsigned long )transport->sock != (unsigned long )((struct socket *)0) && ((int )task->tk_flags & 1024) == 0) {
    {
#line 2271
    tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2271
    if (tmp != 0L) {
      {
#line 2271
      printk("\001dRPC:       xs_connect delayed xprt %p for %lu seconds\n", xprt,
             xprt->reestablish_timeout / 250UL);
      }
    } else {

    }
    {
#line 2274
    queue_delayed_work(rpciod_workqueue, & transport->connect_worker, xprt->reestablish_timeout);
#line 2277
    xprt->reestablish_timeout = xprt->reestablish_timeout << 1;
    }
#line 2278
    if (xprt->reestablish_timeout <= 749UL) {
#line 2279
      xprt->reestablish_timeout = 750UL;
    } else {

    }
#line 2280
    if (xprt->reestablish_timeout > 75000UL) {
#line 2281
      xprt->reestablish_timeout = 75000UL;
    } else {

    }
  } else {
    {
#line 2283
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2283
    if (tmp___0 != 0L) {
      {
#line 2283
      printk("\001dRPC:       xs_connect scheduled xprt %p\n", xprt);
      }
    } else {

    }
    {
#line 2284
    queue_delayed_work(rpciod_workqueue, & transport->connect_worker, 0UL);
    }
  }
#line 2287
  return;
}
}
#line 2295 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_local_print_stats(struct rpc_xprt *xprt , struct seq_file *seq ) 
{ 
  long idle_time ;
  int tmp ;

  {
  {
#line 2297
  idle_time = 0L;
#line 2299
  tmp = xprt_connected(xprt);
  }
#line 2299
  if (tmp != 0) {
#line 2300
    idle_time = (long )((unsigned long )jiffies - xprt->last_used) / 250L;
  } else {

  }
  {
#line 2302
  seq_printf(seq, "\txprt:\tlocal %lu %lu %lu %ld %lu %lu %lu %llu %llu %lu %llu %llu\n",
             xprt->stat.bind_count, xprt->stat.connect_count, xprt->stat.connect_time,
             idle_time, xprt->stat.sends, xprt->stat.recvs, xprt->stat.bad_xids, xprt->stat.req_u,
             xprt->stat.bklog_u, xprt->stat.max_slots, xprt->stat.sending_u, xprt->stat.pending_u);
  }
#line 2316
  return;
}
}
#line 2324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_udp_print_stats(struct rpc_xprt *xprt , struct seq_file *seq ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;

  {
  {
#line 2326
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2326
  transport = (struct sock_xprt *)__mptr;
#line 2328
  seq_printf(seq, "\txprt:\tudp %u %lu %lu %lu %lu %llu %llu %lu %llu %llu\n", (int )transport->srcport,
             xprt->stat.bind_count, xprt->stat.sends, xprt->stat.recvs, xprt->stat.bad_xids,
             xprt->stat.req_u, xprt->stat.bklog_u, xprt->stat.max_slots, xprt->stat.sending_u,
             xprt->stat.pending_u);
  }
#line 2340
  return;
}
}
#line 2348 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void xs_tcp_print_stats(struct rpc_xprt *xprt , struct seq_file *seq ) 
{ 
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  long idle_time ;
  int tmp ;

  {
  {
#line 2350
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2350
  transport = (struct sock_xprt *)__mptr;
#line 2351
  idle_time = 0L;
#line 2353
  tmp = xprt_connected(xprt);
  }
#line 2353
  if (tmp != 0) {
#line 2354
    idle_time = (long )((unsigned long )jiffies - xprt->last_used) / 250L;
  } else {

  }
  {
#line 2356
  seq_printf(seq, "\txprt:\ttcp %u %lu %lu %lu %ld %lu %lu %lu %llu %llu %lu %llu %llu\n",
             (int )transport->srcport, xprt->stat.bind_count, xprt->stat.connect_count,
             xprt->stat.connect_time, idle_time, xprt->stat.sends, xprt->stat.recvs,
             xprt->stat.bad_xids, xprt->stat.req_u, xprt->stat.bklog_u, xprt->stat.max_slots,
             xprt->stat.sending_u, xprt->stat.pending_u);
  }
#line 2371
  return;
}
}
#line 2378 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void *bc_malloc(struct rpc_task *task , size_t size ) 
{ 
  struct page *page ;
  struct rpc_buffer *buf ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;

  {
  {
#line 2383
  __ret_warn_once = size > 4088UL;
#line 2383
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 2383
  if (tmp___1 != 0L) {
    {
#line 2383
    __ret_warn_on = ! __warned;
#line 2383
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 2383
    if (tmp != 0L) {
      {
#line 2383
      warn_slowpath_null("net/sunrpc/xprtsock.c", 2383);
      }
    } else {

    }
    {
#line 2383
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 2383
    if (tmp___0 != 0L) {
#line 2383
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 2383
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 2384
  if (size > 4088UL) {
#line 2385
    return ((void *)0);
  } else {

  }
  {
#line 2387
  page = alloc_pages(208U, 0U);
  }
#line 2388
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2389
    return ((void *)0);
  } else {

  }
  {
#line 2391
  tmp___2 = lowmem_page_address((struct page  const  *)page);
#line 2391
  buf = (struct rpc_buffer *)tmp___2;
#line 2392
  buf->len = 4096UL;
  }
#line 2394
  return ((void *)(& buf->data));
}
}
#line 2400 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void bc_free(void *buffer ) 
{ 
  struct rpc_buffer *buf ;
  char const   (*__mptr)[] ;

  {
#line 2404
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 2405
    return;
  } else {

  }
  {
#line 2407
  __mptr = (char const   *)buffer;
#line 2407
  buf = (struct rpc_buffer *)((char *)__mptr + 0xfffffffffffffff8UL);
#line 2408
  free_pages((unsigned long )buf, 0U);
  }
#line 2409
  return;
}
}
#line 2415 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int bc_sendto(struct rpc_rqst *req ) 
{ 
  int len ;
  struct xdr_buf *xbufp ;
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct rpc_xprt  const  *__mptr ;
  struct socket *sock ;
  unsigned long headoff ;
  unsigned long tailoff ;
  unsigned long tmp ;

  {
  {
#line 2418
  xbufp = & req->rq_snd_buf;
#line 2419
  xprt = req->rq_xprt;
#line 2421
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2421
  transport = (struct sock_xprt *)__mptr;
#line 2422
  sock = transport->sock;
#line 2426
  xs_encode_stream_record_marker(xbufp);
#line 2428
  tailoff = (unsigned long )xbufp->tail[0].iov_base & 4095UL;
#line 2429
  headoff = (unsigned long )xbufp->head[0].iov_base & 4095UL;
#line 2430
  tmp = __phys_addr((unsigned long )xbufp->head[0].iov_base);
#line 2430
  len = svc_send_common(sock, xbufp, (struct page *)-24189255811072L + (tmp >> 12),
                        headoff, (struct page *)xbufp->tail[0].iov_base, tailoff);
  }
#line 2434
  if ((unsigned int )len != xbufp->len) {
    {
#line 2435
    printk("\rError sending entire callback!\n");
#line 2436
    len = -11;
    }
  } else {

  }
#line 2439
  return (len);
}
}
#line 2445 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int bc_send_request(struct rpc_task *task ) 
{ 
  struct rpc_rqst *req ;
  struct svc_xprt *xprt ;
  u32 len ;
  __u32 tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 2447
  req = task->tk_rqstp;
#line 2451
  tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2451
  if (tmp___0 != 0L) {
    {
#line 2451
    tmp = __fswab32(req->rq_xid);
#line 2451
    printk("\001dsending request with xid: %08x\n", tmp);
    }
  } else {

  }
  {
#line 2455
  xprt = (req->rq_xprt)->bc_xprt;
#line 2461
  tmp___2 = mutex_trylock(& xprt->xpt_mutex);
  }
#line 2461
  if (tmp___2 == 0) {
    {
#line 2462
    rpc_sleep_on(& xprt->xpt_bc_pending, task, (void (*)(struct rpc_task * ))0);
#line 2463
    tmp___1 = mutex_trylock(& xprt->xpt_mutex);
    }
#line 2463
    if (tmp___1 == 0) {
#line 2464
      return (-11);
    } else {

    }
    {
#line 2465
    rpc_wake_up_queued_task(& xprt->xpt_bc_pending, task);
    }
  } else {

  }
  {
#line 2467
  tmp___4 = constant_test_bit(6U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 2467
  if (tmp___4 != 0) {
#line 2468
    len = 4294967189U;
  } else {
    {
#line 2470
    tmp___3 = bc_sendto(req);
#line 2470
    len = (u32 )tmp___3;
    }
  }
  {
#line 2471
  mutex_unlock(& xprt->xpt_mutex);
  }
#line 2473
  if (len != 0U) {
#line 2474
    len = 0U;
  } else {

  }
#line 2476
  return ((int )len);
}
}
#line 2483 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void bc_close(struct rpc_xprt *xprt ) 
{ 


  {
#line 2485
  return;
}
}
#line 2492 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static void bc_destroy(struct rpc_xprt *xprt ) 
{ 


  {
#line 2494
  return;
}
}
#line 2496 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt_ops xs_local_ops  = 
#line 2496
     {0, & xprt_reserve_xprt, & xs_tcp_release_xprt, & xprt_alloc_slot, & xs_local_rpcbind,
    & xs_local_set_port, & xs_local_connect, & rpc_malloc, & rpc_free, & xs_local_send_request,
    & xprt_set_retrans_timeout_def, 0, 0, & xs_close, & xs_local_destroy, & xs_local_print_stats};
#line 2512 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt_ops xs_udp_ops  = 
#line 2512
     {& xs_udp_set_buffer_size, & xprt_reserve_xprt_cong, & xprt_release_xprt_cong,
    & xprt_alloc_slot, & rpcb_getport_async, & xs_set_port, & xs_connect, & rpc_malloc,
    & rpc_free, & xs_udp_send_request, & xprt_set_retrans_timeout_rtt, & xs_udp_timer,
    & xprt_release_rqst_cong, & xs_close, & xs_destroy, & xs_udp_print_stats};
#line 2531 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt_ops xs_tcp_ops  = 
#line 2531
     {0, & xprt_reserve_xprt, & xs_tcp_release_xprt, & xprt_lock_and_alloc_slot, & rpcb_getport_async,
    & xs_set_port, & xs_connect, & rpc_malloc, & rpc_free, & xs_tcp_send_request,
    & xprt_set_retrans_timeout_def, 0, 0, & xs_tcp_close, & xs_destroy, & xs_tcp_print_stats};
#line 2551 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt_ops bc_tcp_ops  = 
#line 2551
     {0, & xprt_reserve_xprt, & xprt_release_xprt, & xprt_alloc_slot, & xs_local_rpcbind,
    0, 0, & bc_malloc, & bc_free, & bc_send_request, & xprt_set_retrans_timeout_def,
    0, 0, & bc_close, & bc_destroy, & xs_tcp_print_stats};
#line 2565 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static int xs_init_anyaddr(int const   family , struct sockaddr *sap ) 
{ 
  struct sockaddr_in sin ;
  struct sockaddr_in6 sin6 ;
  long tmp ;

  {
#line 2567
  sin.sin_family = 2U;
#line 2567
  sin.sin_port = (unsigned short)0;
#line 2567
  sin.sin_addr.s_addr = 0U;
#line 2567
  sin.__pad[0] = (unsigned char)0;
#line 2567
  sin.__pad[1] = (unsigned char)0;
#line 2567
  sin.__pad[2] = (unsigned char)0;
#line 2567
  sin.__pad[3] = (unsigned char)0;
#line 2567
  sin.__pad[4] = (unsigned char)0;
#line 2567
  sin.__pad[5] = (unsigned char)0;
#line 2567
  sin.__pad[6] = (unsigned char)0;
#line 2567
  sin.__pad[7] = (unsigned char)0;
#line 2571
  sin6.sin6_family = 10U;
#line 2571
  sin6.sin6_port = (unsigned short)0;
#line 2571
  sin6.sin6_flowinfo = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[0] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[1] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[2] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[3] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[4] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[5] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[6] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[7] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[8] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[9] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[10] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[11] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[12] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[13] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[14] = 0U;
#line 2571
  sin6.sin6_addr.in6_u.u6_addr8[15] = 0U;
#line 2571
  sin6.sin6_scope_id = 0U;
  {
#line 2577
  if (family == 1) {
#line 2577
    goto case_1;
  } else {

  }
#line 2579
  if (family == 2) {
#line 2579
    goto case_2;
  } else {

  }
#line 2582
  if (family == 10) {
#line 2582
    goto case_10;
  } else {

  }
#line 2585
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 2578
  goto ldv_51056;
  case_2: /* CIL Label */ 
  {
#line 2580
  memcpy((void *)sap, (void const   *)(& sin), 16UL);
  }
#line 2581
  goto ldv_51056;
  case_10: /* CIL Label */ 
  {
#line 2583
  memcpy((void *)sap, (void const   *)(& sin6), 28UL);
  }
#line 2584
  goto ldv_51056;
  switch_default: /* CIL Label */ 
  {
#line 2586
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2586
  if (tmp != 0L) {
    {
#line 2586
    printk("\001dRPC:       %s: Bad address family\n", "xs_init_anyaddr");
    }
  } else {

  }
#line 2587
  return (-97);
  switch_break: /* CIL Label */ ;
  }
  ldv_51056: ;
#line 2589
  return (0);
}
}
#line 2592 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt *xs_setup_xprt(struct xprt_create *args , unsigned int slot_table_size ,
                                      unsigned int max_slot_table_size___0 ) 
{ 
  struct rpc_xprt *xprt ;
  struct sock_xprt *new ;
  long tmp ;
  void *tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;
  struct rpc_xprt  const  *__mptr ;
  int err ;
  void *tmp___3 ;

  {
#line 2599
  if (args->addrlen > 128UL) {
    {
#line 2600
    tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2600
    if (tmp != 0L) {
      {
#line 2600
      printk("\001dRPC:       xs_setup_xprt: address too large\n");
      }
    } else {

    }
    {
#line 2601
    tmp___0 = ERR_PTR(-9L);
    }
#line 2601
    return ((struct rpc_xprt *)tmp___0);
  } else {

  }
  {
#line 2604
  xprt = xprt_alloc(args->net, 2656UL, slot_table_size, max_slot_table_size___0);
  }
#line 2606
  if ((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0)) {
    {
#line 2607
    tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2607
    if (tmp___1 != 0L) {
      {
#line 2607
      printk("\001dRPC:       xs_setup_xprt: couldn\'t allocate rpc_xprt\n");
      }
    } else {

    }
    {
#line 2609
    tmp___2 = ERR_PTR(-12L);
    }
#line 2609
    return ((struct rpc_xprt *)tmp___2);
  } else {

  }
  {
#line 2612
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2612
  new = (struct sock_xprt *)__mptr;
#line 2613
  memcpy((void *)(& xprt->addr), (void const   *)args->dstaddr, args->addrlen);
#line 2614
  xprt->addrlen = args->addrlen;
  }
#line 2615
  if ((unsigned long )args->srcaddr != (unsigned long )((struct sockaddr *)0)) {
    {
#line 2616
    memcpy((void *)(& new->srcaddr), (void const   *)args->srcaddr, args->addrlen);
    }
  } else {
    {
#line 2619
    err = xs_init_anyaddr((int const   )(args->dstaddr)->sa_family, (struct sockaddr *)(& new->srcaddr));
    }
#line 2621
    if (err != 0) {
      {
#line 2622
      xprt_free(xprt);
#line 2623
      tmp___3 = ERR_PTR((long )err);
      }
#line 2623
      return ((struct rpc_xprt *)tmp___3);
    } else {

    }
  }
#line 2627
  return (xprt);
}
}
#line 2630 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_timeout  const  xs_local_default_timeout  =    {2500UL, 2500UL, 0UL, 2U, (unsigned char)0};
#line 2642 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt *xs_setup_local(struct xprt_create *args ) 
{ 
  struct sockaddr_un *sun ;
  struct sock_xprt *transport ;
  struct rpc_xprt *xprt ;
  struct rpc_xprt *ret ;
  long tmp ;
  struct rpc_xprt  const  *__mptr ;
  long tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  long tmp___5 ;
  bool tmp___6 ;
  void *tmp___7 ;

  {
  {
#line 2644
  sun = (struct sockaddr_un *)args->dstaddr;
#line 2649
  xprt = xs_setup_xprt(args, xprt_tcp_slot_table_entries, xprt_max_tcp_slot_table_entries);
#line 2651
  tmp = IS_ERR((void const   *)xprt);
  }
#line 2651
  if (tmp != 0L) {
#line 2652
    return (xprt);
  } else {

  }
#line 2653
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2653
  transport = (struct sock_xprt *)__mptr;
#line 2655
  xprt->prot = 0;
#line 2656
  xprt->tsh_size = 1U;
#line 2657
  xprt->max_payload = 2147483647UL;
#line 2659
  xprt->bind_timeout = 15000UL;
#line 2660
  xprt->reestablish_timeout = 750UL;
#line 2661
  xprt->idle_timeout = 75000UL;
#line 2663
  xprt->ops = & xs_local_ops;
#line 2664
  xprt->timeout = & xs_local_default_timeout;
  {
#line 2667
  if ((int )sun->sun_family == 1) {
#line 2667
    goto case_1;
  } else {

  }
#line 2680
  goto switch_default;
  case_1: /* CIL Label */ ;
#line 2668
  if ((int )((signed char )sun->sun_path[0]) != 47) {
    {
#line 2669
    tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2669
    if (tmp___0 != 0L) {
      {
#line 2669
      printk("\001dRPC:       bad AF_LOCAL address: %s\n", (char *)(& sun->sun_path));
      }
    } else {

    }
    {
#line 2671
    tmp___1 = ERR_PTR(-22L);
#line 2671
    ret = (struct rpc_xprt *)tmp___1;
    }
#line 2672
    goto out_err;
  } else {

  }
  {
#line 2674
  xprt_set_bound(xprt);
#line 2675
  xs_format_peer_addresses(xprt, "local", "local");
#line 2676
  tmp___2 = xs_local_setup_socket(transport);
#line 2676
  tmp___3 = ERR_PTR((long )tmp___2);
#line 2676
  ret = (struct rpc_xprt *)tmp___3;
  }
#line 2677
  if ((unsigned long )ret != (unsigned long )((struct rpc_xprt *)0)) {
#line 2678
    goto out_err;
  } else {

  }
#line 2679
  goto ldv_51083;
  switch_default: /* CIL Label */ 
  {
#line 2681
  tmp___4 = ERR_PTR(-97L);
#line 2681
  ret = (struct rpc_xprt *)tmp___4;
  }
#line 2682
  goto out_err;
  switch_break: /* CIL Label */ ;
  }
  ldv_51083: 
  {
#line 2685
  tmp___5 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2685
  if (tmp___5 != 0L) {
    {
#line 2685
    printk("\001dRPC:       set up xprt to %s via AF_LOCAL\n", xprt->address_strings[0]);
    }
  } else {

  }
  {
#line 2688
  tmp___6 = ldv_try_module_get_11(& __this_module);
  }
#line 2688
  if ((int )tmp___6) {
#line 2689
    return (xprt);
  } else {

  }
  {
#line 2690
  tmp___7 = ERR_PTR(-22L);
#line 2690
  ret = (struct rpc_xprt *)tmp___7;
  }
  out_err: 
  {
#line 2692
  xprt_free(xprt);
  }
#line 2693
  return (ret);
}
}
#line 2696 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_timeout  const  xs_udp_default_timeout  =    {1250UL, 7500UL, 1250UL, 5U, (unsigned char)0};
#line 2708 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt *xs_setup_udp(struct xprt_create *args ) 
{ 
  struct sockaddr *addr ;
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct rpc_xprt *ret ;
  long tmp ;
  struct rpc_xprt  const  *__mptr ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  atomic_long_t __constr_expr_1 ;
  struct lock_class_key __key___2 ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  void *tmp___5 ;

  {
  {
#line 2710
  addr = args->dstaddr;
#line 2715
  xprt = xs_setup_xprt(args, xprt_udp_slot_table_entries, xprt_udp_slot_table_entries);
#line 2717
  tmp = IS_ERR((void const   *)xprt);
  }
#line 2717
  if (tmp != 0L) {
#line 2718
    return (xprt);
  } else {

  }
#line 2719
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2719
  transport = (struct sock_xprt *)__mptr;
#line 2721
  xprt->prot = 17;
#line 2722
  xprt->tsh_size = 0U;
#line 2724
  xprt->max_payload = 64128UL;
#line 2726
  xprt->bind_timeout = 15000UL;
#line 2727
  xprt->reestablish_timeout = 500UL;
#line 2728
  xprt->idle_timeout = 75000UL;
#line 2730
  xprt->ops = & xs_udp_ops;
#line 2732
  xprt->timeout = & xs_udp_default_timeout;
  {
#line 2735
  if ((int )addr->sa_family == 2) {
#line 2735
    goto case_2;
  } else {

  }
#line 2743
  if ((int )addr->sa_family == 10) {
#line 2743
    goto case_10;
  } else {

  }
#line 2751
  goto switch_default;
  case_2: /* CIL Label */ ;
#line 2736
  if ((unsigned int )((struct sockaddr_in *)addr)->sin_port != 0U) {
    {
#line 2737
    xprt_set_bound(xprt);
    }
  } else {

  }
  {
#line 2739
  __init_work(& transport->connect_worker.work, 0);
#line 2739
  __constr_expr_0.counter = 137438953408L;
#line 2739
  transport->connect_worker.work.data = __constr_expr_0;
#line 2739
  lockdep_init_map(& transport->connect_worker.work.lockdep_map, "(&(&transport->connect_worker)->work)",
                   & __key, 0);
#line 2739
  INIT_LIST_HEAD(& transport->connect_worker.work.entry);
#line 2739
  transport->connect_worker.work.func = & xs_udp_setup_socket;
#line 2739
  init_timer_key(& transport->connect_worker.timer, 2U, "(&(&transport->connect_worker)->timer)",
                 & __key___0);
#line 2739
  transport->connect_worker.timer.function = & delayed_work_timer_fn;
#line 2739
  transport->connect_worker.timer.data = (unsigned long )(& transport->connect_worker);
#line 2741
  xs_format_peer_addresses(xprt, "udp", "udp");
  }
#line 2742
  goto ldv_51099;
  case_10: /* CIL Label */ ;
#line 2744
  if ((unsigned int )((struct sockaddr_in6 *)addr)->sin6_port != 0U) {
    {
#line 2745
    xprt_set_bound(xprt);
    }
  } else {

  }
  {
#line 2747
  __init_work(& transport->connect_worker.work, 0);
#line 2747
  __constr_expr_1.counter = 137438953408L;
#line 2747
  transport->connect_worker.work.data = __constr_expr_1;
#line 2747
  lockdep_init_map(& transport->connect_worker.work.lockdep_map, "(&(&transport->connect_worker)->work)",
                   & __key___1, 0);
#line 2747
  INIT_LIST_HEAD(& transport->connect_worker.work.entry);
#line 2747
  transport->connect_worker.work.func = & xs_udp_setup_socket;
#line 2747
  init_timer_key(& transport->connect_worker.timer, 2U, "(&(&transport->connect_worker)->timer)",
                 & __key___2);
#line 2747
  transport->connect_worker.timer.function = & delayed_work_timer_fn;
#line 2747
  transport->connect_worker.timer.data = (unsigned long )(& transport->connect_worker);
#line 2749
  xs_format_peer_addresses(xprt, "udp", "udp6");
  }
#line 2750
  goto ldv_51099;
  switch_default: /* CIL Label */ 
  {
#line 2752
  tmp___0 = ERR_PTR(-97L);
#line 2752
  ret = (struct rpc_xprt *)tmp___0;
  }
#line 2753
  goto out_err;
  switch_break: /* CIL Label */ ;
  }
  ldv_51099: 
  {
#line 2756
  tmp___3 = xprt_bound(xprt);
  }
#line 2756
  if (tmp___3 != 0) {
    {
#line 2757
    tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2757
    if (tmp___1 != 0L) {
      {
#line 2757
      printk("\001dRPC:       set up xprt to %s (port %s) via %s\n", xprt->address_strings[0],
             xprt->address_strings[1], xprt->address_strings[2]);
      }
    } else {

    }
  } else {
    {
#line 2762
    tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2762
    if (tmp___2 != 0L) {
      {
#line 2762
      printk("\001dRPC:       set up xprt to %s (autobind) via %s\n", xprt->address_strings[0],
             xprt->address_strings[2]);
      }
    } else {

    }
  }
  {
#line 2766
  tmp___4 = ldv_try_module_get_12(& __this_module);
  }
#line 2766
  if ((int )tmp___4) {
#line 2767
    return (xprt);
  } else {

  }
  {
#line 2768
  tmp___5 = ERR_PTR(-22L);
#line 2768
  ret = (struct rpc_xprt *)tmp___5;
  }
  out_err: 
  {
#line 2770
  xprt_free(xprt);
  }
#line 2771
  return (ret);
}
}
#line 2774 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_timeout  const  xs_tcp_default_timeout  =    {15000UL, 15000UL, 0UL, 2U, (unsigned char)0};
#line 2785 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt *xs_setup_tcp(struct xprt_create *args ) 
{ 
  struct sockaddr *addr ;
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct rpc_xprt *ret ;
  unsigned int max_slot_table_size___0 ;
  long tmp ;
  struct rpc_xprt  const  *__mptr ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  atomic_long_t __constr_expr_1 ;
  struct lock_class_key __key___2 ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  void *tmp___5 ;

  {
#line 2787
  addr = args->dstaddr;
#line 2791
  max_slot_table_size___0 = xprt_max_tcp_slot_table_entries;
#line 2793
  if ((int )args->flags & 1) {
#line 2794
    max_slot_table_size___0 = 65536U;
  } else {

  }
  {
#line 2796
  xprt = xs_setup_xprt(args, xprt_tcp_slot_table_entries, max_slot_table_size___0);
#line 2798
  tmp = IS_ERR((void const   *)xprt);
  }
#line 2798
  if (tmp != 0L) {
#line 2799
    return (xprt);
  } else {

  }
#line 2800
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2800
  transport = (struct sock_xprt *)__mptr;
#line 2802
  xprt->prot = 6;
#line 2803
  xprt->tsh_size = 1U;
#line 2804
  xprt->max_payload = 2147483647UL;
#line 2806
  xprt->bind_timeout = 15000UL;
#line 2807
  xprt->reestablish_timeout = 750UL;
#line 2808
  xprt->idle_timeout = 75000UL;
#line 2810
  xprt->ops = & xs_tcp_ops;
#line 2811
  xprt->timeout = & xs_tcp_default_timeout;
  {
#line 2814
  if ((int )addr->sa_family == 2) {
#line 2814
    goto case_2;
  } else {

  }
#line 2822
  if ((int )addr->sa_family == 10) {
#line 2822
    goto case_10;
  } else {

  }
#line 2830
  goto switch_default;
  case_2: /* CIL Label */ ;
#line 2815
  if ((unsigned int )((struct sockaddr_in *)addr)->sin_port != 0U) {
    {
#line 2816
    xprt_set_bound(xprt);
    }
  } else {

  }
  {
#line 2818
  __init_work(& transport->connect_worker.work, 0);
#line 2818
  __constr_expr_0.counter = 137438953408L;
#line 2818
  transport->connect_worker.work.data = __constr_expr_0;
#line 2818
  lockdep_init_map(& transport->connect_worker.work.lockdep_map, "(&(&transport->connect_worker)->work)",
                   & __key, 0);
#line 2818
  INIT_LIST_HEAD(& transport->connect_worker.work.entry);
#line 2818
  transport->connect_worker.work.func = & xs_tcp_setup_socket;
#line 2818
  init_timer_key(& transport->connect_worker.timer, 2U, "(&(&transport->connect_worker)->timer)",
                 & __key___0);
#line 2818
  transport->connect_worker.timer.function = & delayed_work_timer_fn;
#line 2818
  transport->connect_worker.timer.data = (unsigned long )(& transport->connect_worker);
#line 2820
  xs_format_peer_addresses(xprt, "tcp", "tcp");
  }
#line 2821
  goto ldv_51121;
  case_10: /* CIL Label */ ;
#line 2823
  if ((unsigned int )((struct sockaddr_in6 *)addr)->sin6_port != 0U) {
    {
#line 2824
    xprt_set_bound(xprt);
    }
  } else {

  }
  {
#line 2826
  __init_work(& transport->connect_worker.work, 0);
#line 2826
  __constr_expr_1.counter = 137438953408L;
#line 2826
  transport->connect_worker.work.data = __constr_expr_1;
#line 2826
  lockdep_init_map(& transport->connect_worker.work.lockdep_map, "(&(&transport->connect_worker)->work)",
                   & __key___1, 0);
#line 2826
  INIT_LIST_HEAD(& transport->connect_worker.work.entry);
#line 2826
  transport->connect_worker.work.func = & xs_tcp_setup_socket;
#line 2826
  init_timer_key(& transport->connect_worker.timer, 2U, "(&(&transport->connect_worker)->timer)",
                 & __key___2);
#line 2826
  transport->connect_worker.timer.function = & delayed_work_timer_fn;
#line 2826
  transport->connect_worker.timer.data = (unsigned long )(& transport->connect_worker);
#line 2828
  xs_format_peer_addresses(xprt, "tcp", "tcp6");
  }
#line 2829
  goto ldv_51121;
  switch_default: /* CIL Label */ 
  {
#line 2831
  tmp___0 = ERR_PTR(-97L);
#line 2831
  ret = (struct rpc_xprt *)tmp___0;
  }
#line 2832
  goto out_err;
  switch_break: /* CIL Label */ ;
  }
  ldv_51121: 
  {
#line 2835
  tmp___3 = xprt_bound(xprt);
  }
#line 2835
  if (tmp___3 != 0) {
    {
#line 2836
    tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2836
    if (tmp___1 != 0L) {
      {
#line 2836
      printk("\001dRPC:       set up xprt to %s (port %s) via %s\n", xprt->address_strings[0],
             xprt->address_strings[1], xprt->address_strings[2]);
      }
    } else {

    }
  } else {
    {
#line 2841
    tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 2841
    if (tmp___2 != 0L) {
      {
#line 2841
      printk("\001dRPC:       set up xprt to %s (autobind) via %s\n", xprt->address_strings[0],
             xprt->address_strings[2]);
      }
    } else {

    }
  }
  {
#line 2846
  tmp___4 = ldv_try_module_get_13(& __this_module);
  }
#line 2846
  if ((int )tmp___4) {
#line 2847
    return (xprt);
  } else {

  }
  {
#line 2848
  tmp___5 = ERR_PTR(-22L);
#line 2848
  ret = (struct rpc_xprt *)tmp___5;
  }
  out_err: 
  {
#line 2850
  xprt_free(xprt);
  }
#line 2851
  return (ret);
}
}
#line 2859 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct rpc_xprt *xs_setup_bc_tcp(struct xprt_create *args ) 
{ 
  struct sockaddr *addr ;
  struct rpc_xprt *xprt ;
  struct sock_xprt *transport ;
  struct svc_sock *bc_sock ;
  struct rpc_xprt *ret ;
  long tmp ;
  struct rpc_xprt  const  *__mptr ;
  void *tmp___0 ;
  long tmp___1 ;
  struct svc_xprt  const  *__mptr___0 ;
  bool tmp___2 ;
  void *tmp___3 ;

  {
#line 2861
  addr = args->dstaddr;
#line 2867
  if ((unsigned long )(args->bc_xprt)->xpt_bc_xprt != (unsigned long )((struct rpc_xprt *)0)) {
#line 2874
    return ((args->bc_xprt)->xpt_bc_xprt);
  } else {

  }
  {
#line 2876
  xprt = xs_setup_xprt(args, xprt_tcp_slot_table_entries, xprt_tcp_slot_table_entries);
#line 2878
  tmp = IS_ERR((void const   *)xprt);
  }
#line 2878
  if (tmp != 0L) {
#line 2879
    return (xprt);
  } else {

  }
  {
#line 2880
  __mptr = (struct rpc_xprt  const  *)xprt;
#line 2880
  transport = (struct sock_xprt *)__mptr;
#line 2882
  xprt->prot = 6;
#line 2883
  xprt->tsh_size = 1U;
#line 2884
  xprt->max_payload = 2147483647UL;
#line 2885
  xprt->timeout = & xs_tcp_default_timeout;
#line 2888
  xprt_set_bound(xprt);
#line 2889
  xprt->bind_timeout = 0UL;
#line 2890
  xprt->reestablish_timeout = 0UL;
#line 2891
  xprt->idle_timeout = 0UL;
#line 2893
  xprt->ops = & bc_tcp_ops;
  }
  {
#line 2896
  if ((int )addr->sa_family == 2) {
#line 2896
    goto case_2;
  } else {

  }
#line 2900
  if ((int )addr->sa_family == 10) {
#line 2900
    goto case_10;
  } else {

  }
#line 2904
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 2897
  xs_format_peer_addresses(xprt, "tcp", "tcp");
  }
#line 2899
  goto ldv_51139;
  case_10: /* CIL Label */ 
  {
#line 2901
  xs_format_peer_addresses(xprt, "tcp", "tcp6");
  }
#line 2903
  goto ldv_51139;
  switch_default: /* CIL Label */ 
  {
#line 2905
  tmp___0 = ERR_PTR(-97L);
#line 2905
  ret = (struct rpc_xprt *)tmp___0;
  }
#line 2906
  goto out_err;
  switch_break: /* CIL Label */ ;
  }
  ldv_51139: 
  {
#line 2909
  tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 2909
  if (tmp___1 != 0L) {
    {
#line 2909
    printk("\001dRPC:       set up xprt to %s (port %s) via %s\n", xprt->address_strings[0],
           xprt->address_strings[1], xprt->address_strings[2]);
    }
  } else {

  }
  {
#line 2921
  xprt_get(xprt);
#line 2922
  (args->bc_xprt)->xpt_bc_xprt = xprt;
#line 2923
  xprt->bc_xprt = args->bc_xprt;
#line 2924
  __mptr___0 = (struct svc_xprt  const  *)args->bc_xprt;
#line 2924
  bc_sock = (struct svc_sock *)__mptr___0;
#line 2925
  transport->sock = bc_sock->sk_sock;
#line 2926
  transport->inet = bc_sock->sk_sk;
#line 2932
  xprt_set_connected(xprt);
#line 2935
  tmp___2 = ldv_try_module_get_14(& __this_module);
  }
#line 2935
  if ((int )tmp___2) {
#line 2936
    return (xprt);
  } else {

  }
  {
#line 2937
  xprt_put(xprt);
#line 2938
  tmp___3 = ERR_PTR(-22L);
#line 2938
  ret = (struct rpc_xprt *)tmp___3;
  }
  out_err: 
  {
#line 2940
  xprt_free(xprt);
  }
#line 2941
  return (ret);
}
}
#line 2944 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct xprt_class xs_local_transport  =    {{& xs_local_transport.list, & xs_local_transport.list}, 257, & xs_setup_local,
    & __this_module, {'n', 'a', 'm', 'e', 'd', ' ', 'U', 'N', 'I', 'X', ' ', 's',
                      'o', 'c', 'k', 'e', 't', '\000'}};
#line 2952 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct xprt_class xs_udp_transport  =    {{& xs_udp_transport.list, & xs_udp_transport.list}, 17, & xs_setup_udp, & __this_module,
    {'u', 'd', 'p', '\000'}};
#line 2960 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct xprt_class xs_tcp_transport  =    {{& xs_tcp_transport.list, & xs_tcp_transport.list}, 6, & xs_setup_tcp, & __this_module,
    {'t', 'c', 'p', '\000'}};
#line 2968 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
static struct xprt_class xs_bc_tcp_transport  =    {{& xs_bc_tcp_transport.list, & xs_bc_tcp_transport.list}, -2147483642, & xs_setup_bc_tcp,
    & __this_module, {'t', 'c', 'p', ' ', 'N', 'F', 'S', 'v', '4', '.', '1', ' ',
                      'b', 'a', 'c', 'k', 'c', 'h', 'a', 'n', 'n', 'e', 'l', '\000'}};
#line 2980 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
int init_socket_xprt(void) 
{ 


  {
#line 2983
  if ((unsigned long )sunrpc_table_header == (unsigned long )((struct ctl_table_header *)0)) {
    {
#line 2984
    sunrpc_table_header = register_sysctl_table((struct ctl_table *)(& sunrpc_table));
    }
  } else {

  }
  {
#line 2987
  xprt_register_transport(& xs_local_transport);
#line 2988
  xprt_register_transport(& xs_udp_transport);
#line 2989
  xprt_register_transport(& xs_tcp_transport);
#line 2990
  xprt_register_transport(& xs_bc_tcp_transport);
  }
#line 2992
  return (0);
}
}
#line 2999 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xprtsock.c"
void cleanup_socket_xprt(void) 
{ 


  {
#line 3002
  if ((unsigned long )sunrpc_table_header != (unsigned long )((struct ctl_table_header *)0)) {
    {
#line 3003
    unregister_sysctl_table(sunrpc_table_header);
#line 3004
    sunrpc_table_header = (struct ctl_table_header *)0;
    }
  } else {

  }
  {
#line 3008
  xprt_unregister_transport(& xs_local_transport);
#line 3009
  xprt_unregister_transport(& xs_udp_transport);
#line 3010
  xprt_unregister_transport(& xs_tcp_transport);
#line 3011
  xprt_unregister_transport(& xs_bc_tcp_transport);
  }
#line 3012
  return;
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprtsock.c.aux"
static void ldv_module_put_10(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 154
  ldv_module_put(ldv_func_arg1);
  }
#line 155
  return;
}
}
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprtsock.c.aux"
static bool ldv_try_module_get_11(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 161
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 161
  return (tmp != 0);
}
}
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprtsock.c.aux"
static bool ldv_try_module_get_12(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 168
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 168
  return (tmp != 0);
}
}
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprtsock.c.aux"
static bool ldv_try_module_get_13(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 175
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 175
  return (tmp != 0);
}
}
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_xprtsock.c.aux"
static bool ldv_try_module_get_14(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 182
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 182
  return (tmp != 0);
}
}
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size , gfp_t flags ) ;
#line 153 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
  }
#line 157
  return;
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
  {
#line 167
  __list_del_entry(list);
#line 168
  list_add_tail(list, head);
  }
#line 169
  return;
}
}
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
  }
#line 321
  if (tmp == 0) {
    {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
    }
  } else {

  }
#line 325
  return;
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 15 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 175
  __ret = i;
  {
#line 175
  if (4UL == 1UL) {
#line 175
    goto case_1;
  } else {

  }
#line 175
  if (4UL == 2UL) {
#line 175
    goto case_2;
  } else {

  }
#line 175
  if (4UL == 4UL) {
#line 175
    goto case_4;
  } else {

  }
#line 175
  if (4UL == 8UL) {
#line 175
    goto case_8;
  } else {

  }
#line 175
  goto switch_default;
  case_1: /* CIL Label */ 
#line 175
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 175
  goto ldv_5578;
  case_2: /* CIL Label */ 
#line 175
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 175
  goto ldv_5578;
  case_4: /* CIL Label */ 
#line 175
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 175
  goto ldv_5578;
  case_8: /* CIL Label */ 
#line 175
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 175
  goto ldv_5578;
  switch_default: /* CIL Label */ 
  {
#line 175
  __xadd_wrong_size();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_5578: ;
#line 175
  return (i + __ret);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_api_smp.h"
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
  {
#line 348
  _raw_spin_unlock_irqrestore(& lock->__annonCompField20.rlock, flags);
  }
#line 349
  return;
}
}
#line 96 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
__inline static int waitqueue_active(wait_queue_head_t *q ) 
{ 
  int tmp ;

  {
  {
#line 98
  tmp = list_empty((struct list_head  const  *)(& q->task_list));
  }
#line 98
  return (tmp == 0);
}
}
#line 140
extern void __wake_up_locked_key(wait_queue_head_t * , unsigned int  , void * ) ;
#line 148
extern void wake_up_bit(void * , int  ) ;
#line 149
extern int out_of_line_wait_on_bit(void * , int  , int (*)(void * ) , unsigned int  ) ;
#line 151
extern wait_queue_head_t *bit_waitqueue(void * , int  ) ;
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
static int ldv_del_timer_10(struct timer_list *ldv_func_arg1 ) ;
#line 187
static int ldv_mod_timer_11___0(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) ;
#line 248
static int ldv_del_timer_sync_12___0(struct timer_list *ldv_func_arg1 ) ;
#line 357 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
extern struct workqueue_struct *__alloc_workqueue_key(char const   * , unsigned int  ,
                                                      int  , struct lock_class_key * ,
                                                      char const   *  , ...) ;
#line 419
extern void destroy_workqueue(struct workqueue_struct * ) ;
#line 310 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
extern void schedule(void) ;
#line 1483 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
__inline static pid_t task_pid_nr(struct task_struct *tsk ) 
{ 


  {
#line 1485
  return (tsk->pid);
}
}
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 111
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
static bool ldv_try_module_get_13___0(struct module *ldv_func_arg1 ) ;
#line 474
static void ldv_module_put_14(struct module *ldv_func_arg1 ) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 33
extern void mempool_destroy(mempool_t * ) ;
#line 34
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 35
extern void mempool_free(void * , mempool_t * ) ;
#line 41
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 42
extern void mempool_free_slab(void * , void * ) ;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mempool.h"
__inline static mempool_t *mempool_create_slab_pool(int min_nr , struct kmem_cache *kc ) 
{ 
  mempool_t *tmp ;

  {
  {
#line 46
  tmp = mempool_create(min_nr, & mempool_alloc_slab, & mempool_free_slab, (void *)kc);
  }
#line 46
  return (tmp);
}
}
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/freezer.h"
extern atomic_t system_freezing_cnt ;
#line 28
extern bool freezing_slow_path(struct task_struct * ) ;
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/freezer.h"
__inline static bool freezing(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 35
  tmp = atomic_read((atomic_t const   *)(& system_freezing_cnt));
#line 35
  tmp___0 = __builtin_expect(tmp == 0, 1L);
  }
#line 35
  if (tmp___0 != 0L) {
#line 36
    return (0);
  } else {

  }
  {
#line 37
  tmp___1 = freezing_slow_path(p);
  }
#line 37
  return (tmp___1);
}
}
#line 43
extern bool __refrigerator(bool  ) ;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/freezer.h"
__inline static bool try_to_freeze(void) 
{ 
  struct task_struct *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  bool tmp___3 ;

  {
  {
#line 51
  __might_sleep("include/linux/freezer.h", 51, 0);
#line 52
  tmp = get_current();
#line 52
  tmp___0 = freezing(tmp);
  }
#line 52
  if (tmp___0) {
#line 52
    tmp___1 = 0;
  } else {
#line 52
    tmp___1 = 1;
  }
  {
#line 52
  tmp___2 = __builtin_expect((long )tmp___1, 1L);
  }
#line 52
  if (tmp___2 != 0L) {
#line 53
    return (0);
  } else {

  }
  {
#line 54
  tmp___3 = __refrigerator(0);
  }
#line 54
  return (tmp___3);
}
}
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/freezer.h"
__inline static void freezer_do_not_count(void) 
{ 
  struct task_struct *tmp ;

  {
  {
#line 96
  tmp = get_current();
#line 96
  tmp->flags = tmp->flags | 1073741824U;
  }
#line 97
  return;
}
}
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/freezer.h"
__inline static void freezer_count(void) 
{ 
  struct task_struct *tmp ;

  {
  {
#line 108
  tmp = get_current();
#line 108
  tmp->flags = tmp->flags & 3221225471U;
#line 114
  __asm__  volatile   ("mfence": : : "memory");
#line 115
  try_to_freeze();
  }
#line 116
  return;
}
}
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
void rpc_put_task_async(struct rpc_task *task ) ;
#line 242
int rpc_queue_empty(struct rpc_wait_queue *queue ) ;
#line 248
int __rpc_wait_for_completion_task(struct rpc_task *task , int (*action)(void * ) ) ;
#line 253
int rpc_init_mempool(void) ;
#line 254
void rpc_destroy_mempool(void) ;
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
struct workqueue_struct *rpciod_workqueue  ;
#line 279 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/sched.h"
__inline static void rpc_assign_waitqueue_name(struct rpc_wait_queue *q , char const   *name ) 
{ 


  {
#line 282
  q->name = name;
#line 283
  return;
}
}
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_task_begin ;
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
__inline static void trace_rpc_task_begin(struct rpc_clnt  const  *clnt , struct rpc_task  const  *task ,
                                          void const   *action ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 98
  tmp___1 = static_key_false(& __tracepoint_rpc_task_begin.key);
  }
#line 98
  if ((int )tmp___1) {
    {
#line 98
    __rcu_read_lock();
#line 98
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_rpc_task_begin.funcs));
#line 98
    tmp = debug_lockdep_rcu_enabled();
    }
#line 98
    if (tmp != 0 && ! __warned) {
      {
#line 98
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 98
      if (tmp___0 == 0) {
        {
#line 98
        __warned = 1;
#line 98
        lockdep_rcu_suspicious("include/trace/events/sunrpc.h", 104, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 98
    it_func_ptr = _________p1;
#line 98
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_46106: 
      {
#line 98
      it_func = it_func_ptr->func;
#line 98
      __data = it_func_ptr->data;
#line 98
      (*((void (*)(void * , struct rpc_clnt  const  * , struct rpc_task  const  * ,
                   void const   * ))it_func))(__data, clnt, task, action);
#line 98
      it_func_ptr = it_func_ptr + 1;
      }
#line 98
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 100
        goto ldv_46106;
      } else {

      }

    } else {

    }
    {
#line 98
    __rcu_read_unlock();
    }
  } else {

  }
#line 100
  return;
}
}
#line 112
struct tracepoint __tracepoint_rpc_task_run_action ;
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
__inline static void trace_rpc_task_run_action(struct rpc_clnt  const  *clnt , struct rpc_task  const  *task ,
                                               void const   *action ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 106
  tmp___1 = static_key_false(& __tracepoint_rpc_task_run_action.key);
  }
#line 106
  if ((int )tmp___1) {
    {
#line 106
    __rcu_read_lock();
#line 106
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_rpc_task_run_action.funcs));
#line 106
    tmp = debug_lockdep_rcu_enabled();
    }
#line 106
    if (tmp != 0 && ! __warned) {
      {
#line 106
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 106
      if (tmp___0 == 0) {
        {
#line 106
        __warned = 1;
#line 106
        lockdep_rcu_suspicious("include/trace/events/sunrpc.h", 112, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 106
    it_func_ptr = _________p1;
#line 106
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_46147: 
      {
#line 106
      it_func = it_func_ptr->func;
#line 106
      __data = it_func_ptr->data;
#line 106
      (*((void (*)(void * , struct rpc_clnt  const  * , struct rpc_task  const  * ,
                   void const   * ))it_func))(__data, clnt, task, action);
#line 106
      it_func_ptr = it_func_ptr + 1;
      }
#line 106
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 108
        goto ldv_46147;
      } else {

      }

    } else {

    }
    {
#line 106
    __rcu_read_unlock();
    }
  } else {

  }
#line 108
  return;
}
}
#line 120
struct tracepoint __tracepoint_rpc_task_complete ;
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
__inline static void trace_rpc_task_complete(struct rpc_clnt  const  *clnt , struct rpc_task  const  *task ,
                                             void const   *action ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 114
  tmp___1 = static_key_false(& __tracepoint_rpc_task_complete.key);
  }
#line 114
  if ((int )tmp___1) {
    {
#line 114
    __rcu_read_lock();
#line 114
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_rpc_task_complete.funcs));
#line 114
    tmp = debug_lockdep_rcu_enabled();
    }
#line 114
    if (tmp != 0 && ! __warned) {
      {
#line 114
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 114
      if (tmp___0 == 0) {
        {
#line 114
        __warned = 1;
#line 114
        lockdep_rcu_suspicious("include/trace/events/sunrpc.h", 120, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 114
    it_func_ptr = _________p1;
#line 114
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_46188: 
      {
#line 114
      it_func = it_func_ptr->func;
#line 114
      __data = it_func_ptr->data;
#line 114
      (*((void (*)(void * , struct rpc_clnt  const  * , struct rpc_task  const  * ,
                   void const   * ))it_func))(__data, clnt, task, action);
#line 114
      it_func_ptr = it_func_ptr + 1;
      }
#line 114
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 116
        goto ldv_46188;
      } else {

      }

    } else {

    }
    {
#line 114
    __rcu_read_unlock();
    }
  } else {

  }
#line 116
  return;
}
}
#line 165
struct tracepoint __tracepoint_rpc_task_sleep ;
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
__inline static void trace_rpc_task_sleep(struct rpc_clnt  const  *clnt , struct rpc_task  const  *task ,
                                          struct rpc_wait_queue  const  *q ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 159
  tmp___1 = static_key_false(& __tracepoint_rpc_task_sleep.key);
  }
#line 159
  if ((int )tmp___1) {
    {
#line 159
    __rcu_read_lock();
#line 159
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_rpc_task_sleep.funcs));
#line 159
    tmp = debug_lockdep_rcu_enabled();
    }
#line 159
    if (tmp != 0 && ! __warned) {
      {
#line 159
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 159
      if (tmp___0 == 0) {
        {
#line 159
        __warned = 1;
#line 159
        lockdep_rcu_suspicious("include/trace/events/sunrpc.h", 165, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 159
    it_func_ptr = _________p1;
#line 159
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_46229: 
      {
#line 159
      it_func = it_func_ptr->func;
#line 159
      __data = it_func_ptr->data;
#line 159
      (*((void (*)(void * , struct rpc_clnt  const  * , struct rpc_task  const  * ,
                   struct rpc_wait_queue  const  * ))it_func))(__data, clnt, task,
                                                               q);
#line 159
      it_func_ptr = it_func_ptr + 1;
      }
#line 159
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 161
        goto ldv_46229;
      } else {

      }

    } else {

    }
    {
#line 159
    __rcu_read_unlock();
    }
  } else {

  }
#line 161
  return;
}
}
#line 173
struct tracepoint __tracepoint_rpc_task_wakeup ;
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
__inline static void trace_rpc_task_wakeup(struct rpc_clnt  const  *clnt , struct rpc_task  const  *task ,
                                           struct rpc_wait_queue  const  *q ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 167
  tmp___1 = static_key_false(& __tracepoint_rpc_task_wakeup.key);
  }
#line 167
  if ((int )tmp___1) {
    {
#line 167
    __rcu_read_lock();
#line 167
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_rpc_task_wakeup.funcs));
#line 167
    tmp = debug_lockdep_rcu_enabled();
    }
#line 167
    if (tmp != 0 && ! __warned) {
      {
#line 167
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 167
      if (tmp___0 == 0) {
        {
#line 167
        __warned = 1;
#line 167
        lockdep_rcu_suspicious("include/trace/events/sunrpc.h", 173, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 167
    it_func_ptr = _________p1;
#line 167
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_46270: 
      {
#line 167
      it_func = it_func_ptr->func;
#line 167
      __data = it_func_ptr->data;
#line 167
      (*((void (*)(void * , struct rpc_clnt  const  * , struct rpc_task  const  * ,
                   struct rpc_wait_queue  const  * ))it_func))(__data, clnt, task,
                                                               q);
#line 167
      it_func_ptr = it_func_ptr + 1;
      }
#line 167
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 169
        goto ldv_46270;
      } else {

      }

    } else {

    }
    {
#line 167
    __rcu_read_unlock();
    }
  } else {

  }
#line 169
  return;
}
}
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
static char const   __tpstrtab_rpc_call_status[16U]  = 
#line 36
  {      'r',      'p',      'c',      '_', 
        'c',      'a',      'l',      'l', 
        '_',      's',      't',      'a', 
        't',      'u',      's',      '\000'};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_call_status  =    {(char const   *)(& __tpstrtab_rpc_call_status), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
static char const   __tpstrtab_rpc_bind_status[16U]  = 
#line 42
  {      'r',      'p',      'c',      '_', 
        'b',      'i',      'n',      'd', 
        '_',      's',      't',      'a', 
        't',      'u',      's',      '\000'};
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_bind_status  =    {(char const   *)(& __tpstrtab_rpc_bind_status), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
static char const   __tpstrtab_rpc_connect_status[19U]  = 
#line 62
  {      'r',      'p',      'c',      '_', 
        'c',      'o',      'n',      'n', 
        'e',      'c',      't',      '_', 
        's',      't',      'a',      't', 
        'u',      's',      '\000'};
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_connect_status  =    {(char const   *)(& __tpstrtab_rpc_connect_status), {{0}, (struct jump_entry *)0,
                                                        0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
static char const   __tpstrtab_rpc_task_begin[15U]  = 
#line 104
  {      'r',      'p',      'c',      '_', 
        't',      'a',      's',      'k', 
        '_',      'b',      'e',      'g', 
        'i',      'n',      '\000'};
#line 104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_task_begin  =    {(char const   *)(& __tpstrtab_rpc_task_begin), {{0}, (struct jump_entry *)0, 0},
    (void (*)(void))0, (void (*)(void))0, (struct tracepoint_func *)0};
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
static char const   __tpstrtab_rpc_task_run_action[20U]  = 
#line 112
  {      'r',      'p',      'c',      '_', 
        't',      'a',      's',      'k', 
        '_',      'r',      'u',      'n', 
        '_',      'a',      'c',      't', 
        'i',      'o',      'n',      '\000'};
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_task_run_action  =    {(char const   *)(& __tpstrtab_rpc_task_run_action), {{0}, (struct jump_entry *)0,
                                                         0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
static char const   __tpstrtab_rpc_task_complete[18U]  = 
#line 120
  {      'r',      'p',      'c',      '_', 
        't',      'a',      's',      'k', 
        '_',      'c',      'o',      'm', 
        'p',      'l',      'e',      't', 
        'e',      '\000'};
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_task_complete  =    {(char const   *)(& __tpstrtab_rpc_task_complete), {{0}, (struct jump_entry *)0,
                                                       0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
static char const   __tpstrtab_rpc_task_sleep[15U]  = 
#line 165
  {      'r',      'p',      'c',      '_', 
        't',      'a',      's',      'k', 
        '_',      's',      'l',      'e', 
        'e',      'p',      '\000'};
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_task_sleep  =    {(char const   *)(& __tpstrtab_rpc_task_sleep), {{0}, (struct jump_entry *)0, 0},
    (void (*)(void))0, (void (*)(void))0, (struct tracepoint_func *)0};
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
static char const   __tpstrtab_rpc_task_wakeup[16U]  = 
#line 173
  {      'r',      'p',      'c',      '_', 
        't',      'a',      's',      'k', 
        '_',      'w',      'a',      'k', 
        'e',      'u',      'p',      '\000'};
#line 173 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/sunrpc.h"
struct tracepoint __tracepoint_rpc_task_wakeup  =    {(char const   *)(& __tpstrtab_rpc_task_wakeup), {{0}, (struct jump_entry *)0,
                                                     0}, (void (*)(void))0, (void (*)(void))0,
    (struct tracepoint_func *)0};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static struct kmem_cache *rpc_task_slabp  ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static struct kmem_cache *rpc_buffer_slabp  ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static mempool_t *rpc_task_mempool  ;
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static mempool_t *rpc_buffer_mempool  ;
#line 45
static void rpc_async_schedule(struct work_struct *work ) ;
#line 46
static void rpc_release_task(struct rpc_task *task ) ;
#line 47
static void __rpc_queue_timer_fn(unsigned long ptr ) ;
#line 52 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static struct rpc_wait_queue delay_queue  ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_disable_timer(struct rpc_wait_queue *queue , struct rpc_task *task ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 67
  if (task->tk_timeout == 0UL) {
#line 68
    return;
  } else {

  }
  {
#line 69
  tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 69
  if (tmp != 0L) {
    {
#line 69
    printk("\001dRPC: %5u disabling timer\n", (int )task->tk_pid);
    }
  } else {

  }
  {
#line 70
  task->tk_timeout = 0UL;
#line 71
  list_del(& task->u.tk_wait.timer_list);
#line 72
  tmp___0 = list_empty((struct list_head  const  *)(& queue->timer_list.list));
  }
#line 72
  if (tmp___0 != 0) {
    {
#line 73
    ldv_del_timer_10(& queue->timer_list.timer);
    }
  } else {

  }
#line 74
  return;
}
}
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_set_queue_timer(struct rpc_wait_queue *queue , unsigned long expires ) 
{ 


  {
  {
#line 79
  queue->timer_list.expires = expires;
#line 80
  ldv_mod_timer_11___0(& queue->timer_list.timer, expires);
  }
#line 81
  return;
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_add_timer(struct rpc_wait_queue *queue , struct rpc_task *task ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 89
  if (task->tk_timeout == 0UL) {
#line 90
    return;
  } else {

  }
  {
#line 92
  tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 92
  if (tmp != 0L) {
    {
#line 92
    printk("\001dRPC: %5u setting alarm for %lu ms\n", (int )task->tk_pid, (task->tk_timeout * 1000UL) / 250UL);
    }
  } else {

  }
  {
#line 95
  task->u.tk_wait.expires = (unsigned long )jiffies + task->tk_timeout;
#line 96
  tmp___0 = list_empty((struct list_head  const  *)(& queue->timer_list.list));
  }
#line 96
  if (tmp___0 != 0 || (long )(task->u.tk_wait.expires - queue->timer_list.expires) < 0L) {
    {
#line 97
    rpc_set_queue_timer(queue, task->u.tk_wait.expires);
    }
  } else {

  }
  {
#line 98
  list_add(& task->u.tk_wait.timer_list, & queue->timer_list.list);
  }
#line 99
  return;
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_rotate_queue_owner(struct rpc_wait_queue *queue ) 
{ 
  struct list_head *q ;
  struct rpc_task *task ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
  {
#line 103
  q = (struct list_head *)(& queue->tasks) + (unsigned long )queue->priority;
#line 106
  tmp = list_empty((struct list_head  const  *)q);
  }
#line 106
  if (tmp == 0) {
#line 107
    __mptr = (struct list_head  const  *)q->next;
#line 107
    task = (struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL);
#line 108
    if (task->tk_owner == queue->owner) {
      {
#line 109
      list_move_tail(& task->u.tk_wait.list, q);
      }
    } else {

    }
  } else {

  }
#line 111
  return;
}
}
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_set_waitqueue_priority(struct rpc_wait_queue *queue , int priority ) 
{ 


  {
#line 115
  if ((int )queue->priority != priority) {
    {
#line 117
    rpc_rotate_queue_owner(queue);
#line 118
    queue->priority = (unsigned char )priority;
    }
  } else {

  }
#line 120
  return;
}
}
#line 122 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_set_waitqueue_owner(struct rpc_wait_queue *queue , pid_t pid ) 
{ 


  {
#line 124
  queue->owner = pid;
#line 125
  queue->nr = 16U;
#line 126
  return;
}
}
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_reset_waitqueue_priority(struct rpc_wait_queue *queue ) 
{ 


  {
  {
#line 130
  rpc_set_waitqueue_priority(queue, (int )queue->maxpriority);
#line 131
  rpc_set_waitqueue_owner(queue, 0);
  }
#line 132
  return;
}
}
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_add_wait_queue_priority(struct rpc_wait_queue *queue , struct rpc_task *task ,
                                          unsigned char queue_priority ) 
{ 
  struct list_head *q ;
  struct rpc_task *t ;
  long tmp ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 144
  INIT_LIST_HEAD(& task->u.tk_wait.links);
#line 145
  tmp = __builtin_expect((int )queue_priority > (int )queue->maxpriority, 0L);
  }
#line 145
  if (tmp != 0L) {
#line 146
    queue_priority = queue->maxpriority;
  } else {

  }
#line 147
  if ((int )queue_priority > (int )queue->priority) {
    {
#line 148
    rpc_set_waitqueue_priority(queue, (int )queue_priority);
    }
  } else {

  }
#line 149
  q = (struct list_head *)(& queue->tasks) + (unsigned long )queue_priority;
#line 150
  __mptr = (struct list_head  const  *)q->next;
#line 150
  t = (struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL);
#line 150
  goto ldv_48950;
  ldv_48949: ;
#line 151
  if (t->tk_owner == task->tk_owner) {
    {
#line 152
    list_add_tail(& task->u.tk_wait.list, & t->u.tk_wait.links);
    }
#line 153
    return;
  } else {

  }
#line 150
  __mptr___0 = (struct list_head  const  *)t->u.tk_wait.list.next;
#line 150
  t = (struct rpc_task *)((char *)__mptr___0 + 0xffffffffffffff78UL);
  ldv_48950: ;
#line 150
  if ((unsigned long )(& t->u.tk_wait.list) != (unsigned long )q) {
#line 152
    goto ldv_48949;
  } else {

  }
  {
#line 156
  list_add_tail(& task->u.tk_wait.list, q);
  }
#line 157
  return;
}
}
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_add_wait_queue(struct rpc_wait_queue *queue , struct rpc_task *task ,
                                 unsigned char queue_priority ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;

  {
  {
#line 171
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
#line 171
  __ret_warn_once = tmp != 0;
#line 171
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 171
  if (tmp___2 != 0L) {
    {
#line 171
    __ret_warn_on = ! __warned;
#line 171
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 171
    if (tmp___0 != 0L) {
      {
#line 171
      warn_slowpath_null("net/sunrpc/sched.c", 171);
      }
    } else {

    }
    {
#line 171
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 171
    if (tmp___1 != 0L) {
#line 171
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 171
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 172
  tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 172
  if (tmp___3 != 0) {
#line 173
    return;
  } else {

  }
#line 175
  if ((unsigned int )queue->maxpriority != 0U) {
    {
#line 176
    __rpc_add_wait_queue_priority(queue, task, (int )queue_priority);
    }
  } else
#line 177
  if (((int )task->tk_flags & 2) != 0) {
    {
#line 178
    list_add(& task->u.tk_wait.list, (struct list_head *)(& queue->tasks));
    }
  } else {
    {
#line 180
    list_add_tail(& task->u.tk_wait.list, (struct list_head *)(& queue->tasks));
    }
  }
  {
#line 181
  task->tk_waitqueue = queue;
#line 182
  queue->qlen = (unsigned short )((int )queue->qlen + 1);
#line 184
  __asm__  volatile   ("": : : "memory");
#line 185
  set_bit(1U, (unsigned long volatile   *)(& task->tk_runstate));
#line 187
  tmp___5 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 187
  if (tmp___5 != 0L) {
    {
#line 187
    tmp___4 = rpc_qname((struct rpc_wait_queue  const  *)queue);
#line 187
    printk("\001dRPC: %5u added to queue %p \"%s\"\n", (int )task->tk_pid, queue,
           tmp___4);
    }
  } else {

  }
#line 188
  return;
}
}
#line 194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_remove_wait_queue_priority(struct rpc_task *task ) 
{ 
  struct rpc_task *t ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
  {
#line 198
  tmp = list_empty((struct list_head  const  *)(& task->u.tk_wait.links));
  }
#line 198
  if (tmp == 0) {
    {
#line 199
    __mptr = (struct list_head  const  *)task->u.tk_wait.links.next;
#line 199
    t = (struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL);
#line 200
    list_move(& t->u.tk_wait.list, & task->u.tk_wait.list);
#line 201
    list_splice_init(& task->u.tk_wait.links, & t->u.tk_wait.links);
    }
  } else {

  }
#line 203
  return;
}
}
#line 209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_remove_wait_queue(struct rpc_wait_queue *queue , struct rpc_task *task ) 
{ 
  char const   *tmp ;
  long tmp___0 ;

  {
  {
#line 211
  __rpc_disable_timer(queue, task);
  }
#line 212
  if ((unsigned int )queue->maxpriority != 0U) {
    {
#line 213
    __rpc_remove_wait_queue_priority(task);
    }
  } else {

  }
  {
#line 214
  list_del(& task->u.tk_wait.list);
#line 215
  queue->qlen = (unsigned short )((int )queue->qlen - 1);
#line 216
  tmp___0 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 216
  if (tmp___0 != 0L) {
    {
#line 216
    tmp = rpc_qname((struct rpc_wait_queue  const  *)queue);
#line 216
    printk("\001dRPC: %5u removed from queue %p \"%s\"\n", (int )task->tk_pid, queue,
           tmp);
    }
  } else {

  }
#line 217
  return;
}
}
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_init_priority_wait_queue(struct rpc_wait_queue *queue , char const   *qname ,
                                           unsigned char nr_queues ) 
{ 
  int i ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
  {
#line 224
  spinlock_check(& queue->lock);
#line 224
  __raw_spin_lock_init(& queue->lock.__annonCompField20.rlock, "&(&queue->lock)->rlock",
                       & __key);
#line 225
  i = 0;
  }
#line 225
  goto ldv_48982;
  ldv_48981: 
  {
#line 226
  INIT_LIST_HEAD((struct list_head *)(& queue->tasks) + (unsigned long )i);
#line 225
  i = i + 1;
  }
  ldv_48982: ;
#line 225
  if ((unsigned int )i <= 3U) {
#line 227
    goto ldv_48981;
  } else {

  }
  {
#line 227
  queue->maxpriority = (unsigned int )nr_queues + 255U;
#line 228
  rpc_reset_waitqueue_priority(queue);
#line 229
  queue->qlen = 0U;
#line 230
  init_timer_key(& queue->timer_list.timer, 0U, "((&queue->timer_list.timer))", & __key___0);
#line 230
  queue->timer_list.timer.function = & __rpc_queue_timer_fn;
#line 230
  queue->timer_list.timer.data = (unsigned long )queue;
#line 231
  INIT_LIST_HEAD(& queue->timer_list.list);
#line 232
  rpc_assign_waitqueue_name(queue, qname);
  }
#line 233
  return;
}
}
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_init_priority_wait_queue(struct rpc_wait_queue *queue , char const   *qname ) 
{ 


  {
  {
#line 237
  __rpc_init_priority_wait_queue(queue, qname, 4);
  }
#line 238
  return;
}
}
#line 241 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_init_wait_queue(struct rpc_wait_queue *queue , char const   *qname ) 
{ 


  {
  {
#line 243
  __rpc_init_priority_wait_queue(queue, qname, 1);
  }
#line 244
  return;
}
}
#line 247 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_destroy_wait_queue(struct rpc_wait_queue *queue ) 
{ 


  {
  {
#line 249
  ldv_del_timer_sync_12___0(& queue->timer_list.timer);
  }
#line 250
  return;
}
}
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static int rpc_wait_bit_killable(void *word ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;

  {
  {
#line 255
  tmp = get_current();
#line 255
  tmp___0 = fatal_signal_pending(tmp);
  }
#line 255
  if (tmp___0 != 0) {
#line 256
    return (-512);
  } else {

  }
  {
#line 257
  freezer_do_not_count();
#line 257
  schedule();
#line 257
  freezer_count();
  }
#line 258
  return (0);
}
}
#line 262 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_task_set_debuginfo(struct rpc_task *task ) 
{ 
  atomic_t rpc_pid ;
  int tmp ;

  {
  {
#line 266
  tmp = atomic_add_return(1, & rpc_pid);
#line 266
  task->tk_pid = (unsigned short )tmp;
  }
#line 267
  return;
}
}
#line 274 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_set_active(struct rpc_task *task ) 
{ 


  {
  {
#line 276
  trace_rpc_task_begin((struct rpc_clnt  const  *)task->tk_client, (struct rpc_task  const  *)task,
                       (void const   *)0);
#line 278
  rpc_task_set_debuginfo(task);
#line 279
  set_bit(2U, (unsigned long volatile   *)(& task->tk_runstate));
  }
#line 280
  return;
}
}
#line 286 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static int rpc_complete_task(struct rpc_task *task ) 
{ 
  void *m ;
  wait_queue_head_t *wq ;
  wait_queue_head_t *tmp ;
  struct wait_bit_key k ;
  unsigned long flags ;
  int ret ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 288
  m = (void *)(& task->tk_runstate);
#line 289
  tmp = bit_waitqueue(m, 2);
#line 289
  wq = tmp;
#line 290
  k.flags = m;
#line 290
  k.bit_nr = 2;
#line 294
  trace_rpc_task_complete((struct rpc_clnt  const  *)task->tk_client, (struct rpc_task  const  *)task,
                          (void const   *)0);
#line 296
  tmp___0 = spinlock_check(& wq->lock);
#line 296
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 297
  clear_bit(2, (unsigned long volatile   *)(& task->tk_runstate));
#line 298
  ret = atomic_dec_and_test(& task->tk_count);
#line 299
  tmp___1 = waitqueue_active(wq);
  }
#line 299
  if (tmp___1 != 0) {
    {
#line 300
    __wake_up_locked_key(wq, 3U, (void *)(& k));
    }
  } else {

  }
  {
#line 301
  spin_unlock_irqrestore(& wq->lock, flags);
  }
#line 302
  return (ret);
}
}
#line 312 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
int __rpc_wait_for_completion_task(struct rpc_task *task , int (*action)(void * ) ) 
{ 
  int tmp ;

  {
#line 314
  if ((unsigned long )action == (unsigned long )((int (*)(void * ))0)) {
#line 315
    action = & rpc_wait_bit_killable;
  } else {

  }
  {
#line 316
  tmp = out_of_line_wait_on_bit((void *)(& task->tk_runstate), 2, action, 130U);
  }
#line 316
  return (tmp);
}
}
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_make_runnable(struct rpc_task *task ) 
{ 
  bool need_wakeup ;
  int tmp ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
  {
#line 334
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& task->tk_runstate));
#line 334
  need_wakeup = tmp == 0;
#line 336
  __asm__  volatile   ("": : : "memory");
#line 336
  clear_bit(1, (unsigned long volatile   *)(& task->tk_runstate));
#line 336
  __asm__  volatile   ("": : : "memory");
  }
#line 337
  if (! need_wakeup) {
#line 338
    return;
  } else {

  }
#line 339
  if ((int )task->tk_flags & 1) {
    {
#line 340
    __init_work(& task->u.tk_work, 0);
#line 340
    __constr_expr_0.counter = 137438953408L;
#line 340
    task->u.tk_work.data = __constr_expr_0;
#line 340
    lockdep_init_map(& task->u.tk_work.lockdep_map, "(&task->u.tk_work)", & __key,
                     0);
#line 340
    INIT_LIST_HEAD(& task->u.tk_work.entry);
#line 340
    task->u.tk_work.func = & rpc_async_schedule;
#line 341
    queue_work(rpciod_workqueue, & task->u.tk_work);
    }
  } else {
    {
#line 343
    wake_up_bit((void *)(& task->tk_runstate), 1);
    }
  }
#line 344
  return;
}
}
#line 352 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_sleep_on_priority(struct rpc_wait_queue *q , struct rpc_task *task ,
                                    void (*action)(struct rpc_task * ) , unsigned char queue_priority ) 
{ 
  char const   *tmp ;
  long tmp___0 ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
  {
#line 357
  tmp___0 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 357
  if (tmp___0 != 0L) {
    {
#line 357
    tmp = rpc_qname((struct rpc_wait_queue  const  *)q);
#line 357
    printk("\001dRPC: %5u sleep_on(queue \"%s\" time %lu)\n", (int )task->tk_pid,
           tmp, jiffies);
    }
  } else {

  }
  {
#line 360
  trace_rpc_task_sleep((struct rpc_clnt  const  *)task->tk_client, (struct rpc_task  const  *)task,
                       (struct rpc_wait_queue  const  *)q);
#line 362
  __rpc_add_wait_queue(q, task, (int )queue_priority);
#line 364
  __ret_warn_once = (unsigned long )task->tk_callback != (unsigned long )((void (*)(struct rpc_task * ))0);
#line 364
  tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 364
  if (tmp___3 != 0L) {
    {
#line 364
    __ret_warn_on = ! __warned;
#line 364
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 364
    if (tmp___1 != 0L) {
      {
#line 364
      warn_slowpath_null("net/sunrpc/sched.c", 364);
      }
    } else {

    }
    {
#line 364
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 364
    if (tmp___2 != 0L) {
#line 364
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 364
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 365
  task->tk_callback = action;
#line 366
  __rpc_add_timer(q, task);
  }
#line 367
  return;
}
}
#line 369 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_sleep_on(struct rpc_wait_queue *q , struct rpc_task *task , void (*action)(struct rpc_task * ) ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
  {
#line 373
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& task->tk_runstate));
#line 373
  __ret_warn_once = tmp == 0;
#line 373
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 373
  if (tmp___2 != 0L) {
    {
#line 373
    __ret_warn_on = ! __warned;
#line 373
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 373
    if (tmp___0 != 0L) {
      {
#line 373
      warn_slowpath_null("net/sunrpc/sched.c", 373);
      }
    } else {

    }
    {
#line 373
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 373
    if (tmp___1 != 0L) {
#line 373
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 373
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 374
  tmp___3 = constant_test_bit(2U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 374
  if (tmp___3 == 0) {
    {
#line 375
    task->tk_status = -5;
#line 376
    rpc_put_task_async(task);
    }
#line 377
    return;
  } else {

  }
  {
#line 383
  spin_lock_bh(& q->lock);
#line 384
  __rpc_sleep_on_priority(q, task, action, (int )task->tk_priority);
#line 385
  spin_unlock_bh(& q->lock);
  }
#line 386
  return;
}
}
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_sleep_on_priority(struct rpc_wait_queue *q , struct rpc_task *task , void (*action)(struct rpc_task * ) ,
                           int priority ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
  {
#line 393
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& task->tk_runstate));
#line 393
  __ret_warn_once = tmp == 0;
#line 393
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 393
  if (tmp___2 != 0L) {
    {
#line 393
    __ret_warn_on = ! __warned;
#line 393
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 393
    if (tmp___0 != 0L) {
      {
#line 393
      warn_slowpath_null("net/sunrpc/sched.c", 393);
      }
    } else {

    }
    {
#line 393
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 393
    if (tmp___1 != 0L) {
#line 393
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 393
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 394
  tmp___3 = constant_test_bit(2U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 394
  if (tmp___3 == 0) {
    {
#line 395
    task->tk_status = -5;
#line 396
    rpc_put_task_async(task);
    }
#line 397
    return;
  } else {

  }
  {
#line 403
  spin_lock_bh(& q->lock);
#line 404
  __rpc_sleep_on_priority(q, task, action, (int )((unsigned int )((unsigned char )priority) + 1U));
#line 405
  spin_unlock_bh(& q->lock);
  }
#line 406
  return;
}
}
#line 416 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_do_wake_up_task(struct rpc_wait_queue *queue , struct rpc_task *task ) 
{ 
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 418
  tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 418
  if (tmp != 0L) {
    {
#line 418
    printk("\001dRPC: %5u __rpc_wake_up_task (now %lu)\n", (int )task->tk_pid, jiffies);
    }
  } else {

  }
  {
#line 422
  tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 422
  if (tmp___0 == 0) {
    {
#line 423
    printk("\vRPC: Inactive task (%p) being woken up!\n", task);
    }
#line 424
    return;
  } else {

  }
  {
#line 427
  trace_rpc_task_wakeup((struct rpc_clnt  const  *)task->tk_client, (struct rpc_task  const  *)task,
                        (struct rpc_wait_queue  const  *)queue);
#line 429
  __rpc_remove_wait_queue(queue, task);
#line 431
  rpc_make_runnable(task);
#line 433
  tmp___1 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 433
  if (tmp___1 != 0L) {
    {
#line 433
    printk("\001dRPC:       __rpc_wake_up_task done\n");
    }
  } else {

  }
#line 434
  return;
}
}
#line 439 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_wake_up_task_queue_locked(struct rpc_wait_queue *queue , struct rpc_task *task ) 
{ 
  int tmp ;

  {
  {
#line 441
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 441
  if (tmp != 0) {
#line 442
    __asm__  volatile   ("": : : "memory");
#line 443
    if ((unsigned long )task->tk_waitqueue == (unsigned long )queue) {
      {
#line 444
      __rpc_do_wake_up_task(queue, task);
      }
    } else {

    }
  } else {

  }
#line 446
  return;
}
}
#line 451 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
int rpc_queue_empty(struct rpc_wait_queue *queue ) 
{ 
  int res ;

  {
  {
#line 455
  spin_lock_bh(& queue->lock);
#line 456
  res = (int )queue->qlen;
#line 457
  spin_unlock_bh(& queue->lock);
  }
#line 458
  return (res == 0);
}
}
#line 465 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_wake_up_queued_task(struct rpc_wait_queue *queue , struct rpc_task *task ) 
{ 


  {
  {
#line 467
  spin_lock_bh(& queue->lock);
#line 468
  rpc_wake_up_task_queue_locked(queue, task);
#line 469
  spin_unlock_bh(& queue->lock);
  }
#line 470
  return;
}
}
#line 476 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static struct rpc_task *__rpc_find_next_queued_priority(struct rpc_wait_queue *queue ) 
{ 
  struct list_head *q ;
  struct rpc_task *task ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;
  int tmp___0 ;

  {
  {
#line 484
  q = (struct list_head *)(& queue->tasks) + (unsigned long )queue->priority;
#line 485
  tmp = list_empty((struct list_head  const  *)q);
  }
#line 485
  if (tmp == 0) {
#line 486
    __mptr = (struct list_head  const  *)q->next;
#line 486
    task = (struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL);
#line 487
    if (queue->owner == task->tk_owner) {
#line 488
      queue->nr = (unsigned char )((int )queue->nr - 1);
#line 488
      if ((unsigned int )queue->nr != 0U) {
#line 489
        goto out;
      } else {

      }
      {
#line 490
      list_move_tail(& task->u.tk_wait.list, q);
      }
    } else {

    }
#line 495
    goto new_owner;
  } else {

  }
  ldv_49145: ;
#line 502
  if ((unsigned long )q == (unsigned long )((struct list_head *)(& queue->tasks))) {
#line 503
    q = (struct list_head *)(& queue->tasks) + (unsigned long )queue->maxpriority;
  } else {
#line 505
    q = q + 0xffffffffffffffffUL;
  }
  {
#line 506
  tmp___0 = list_empty((struct list_head  const  *)q);
  }
#line 506
  if (tmp___0 == 0) {
#line 507
    __mptr___0 = (struct list_head  const  *)q->next;
#line 507
    task = (struct rpc_task *)((char *)__mptr___0 + 0xffffffffffffff78UL);
#line 508
    goto new_queue;
  } else {

  }
#line 510
  if ((unsigned long )q != (unsigned long )((struct list_head *)(& queue->tasks) + (unsigned long )queue->priority)) {
#line 512
    goto ldv_49145;
  } else {

  }
  {
#line 512
  rpc_reset_waitqueue_priority(queue);
  }
#line 513
  return ((struct rpc_task *)0);
  new_queue: 
  {
#line 516
  rpc_set_waitqueue_priority(queue, (int )(((long )q - (long )(& queue->tasks)) / 16L));
  }
  new_owner: 
  {
#line 518
  rpc_set_waitqueue_owner(queue, task->tk_owner);
  }
  out: ;
#line 520
  return (task);
}
}
#line 523 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static struct rpc_task *__rpc_find_next_queued(struct rpc_wait_queue *queue ) 
{ 
  struct rpc_task *tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;

  {
#line 525
  if ((unsigned int )queue->maxpriority != 0U) {
    {
#line 526
    tmp = __rpc_find_next_queued_priority(queue);
    }
#line 526
    return (tmp);
  } else {

  }
  {
#line 527
  tmp___0 = list_empty((struct list_head  const  *)(& queue->tasks));
  }
#line 527
  if (tmp___0 == 0) {
#line 528
    __mptr = (struct list_head  const  *)((struct list_head *)(& queue->tasks))->next;
#line 528
    return ((struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL));
  } else {

  }
#line 529
  return ((struct rpc_task *)0);
}
}
#line 535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
struct rpc_task *rpc_wake_up_first(struct rpc_wait_queue *queue , bool (*func)(struct rpc_task * ,
                                                                               void * ) ,
                                   void *data ) 
{ 
  struct rpc_task *task ;
  char const   *tmp ;
  long tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 538
  task = (struct rpc_task *)0;
#line 540
  tmp___0 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 540
  if (tmp___0 != 0L) {
    {
#line 540
    tmp = rpc_qname((struct rpc_wait_queue  const  *)queue);
#line 540
    printk("\001dRPC:       wake_up_first(%p \"%s\")\n", queue, tmp);
    }
  } else {

  }
  {
#line 542
  spin_lock_bh(& queue->lock);
#line 543
  task = __rpc_find_next_queued(queue);
  }
#line 544
  if ((unsigned long )task != (unsigned long )((struct rpc_task *)0)) {
    {
#line 545
    tmp___1 = (*func)(task, data);
    }
#line 545
    if ((int )tmp___1) {
      {
#line 546
      rpc_wake_up_task_queue_locked(queue, task);
      }
    } else {
#line 548
      task = (struct rpc_task *)0;
    }
  } else {

  }
  {
#line 550
  spin_unlock_bh(& queue->lock);
  }
#line 552
  return (task);
}
}
#line 556 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static bool rpc_wake_up_next_func(struct rpc_task *task , void *data ) 
{ 


  {
#line 558
  return (1);
}
}
#line 564 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
struct rpc_task *rpc_wake_up_next(struct rpc_wait_queue *queue ) 
{ 
  struct rpc_task *tmp ;

  {
  {
#line 566
  tmp = rpc_wake_up_first(queue, & rpc_wake_up_next_func, (void *)0);
  }
#line 566
  return (tmp);
}
}
#line 576 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_wake_up(struct rpc_wait_queue *queue ) 
{ 
  struct list_head *head ;
  struct rpc_task *task ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
  {
#line 580
  spin_lock_bh(& queue->lock);
#line 581
  head = (struct list_head *)(& queue->tasks) + (unsigned long )queue->maxpriority;
  }
  ldv_49192: ;
#line 583
  goto ldv_49189;
  ldv_49188: 
  {
#line 585
  __mptr = (struct list_head  const  *)head->next;
#line 585
  task = (struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL);
#line 588
  rpc_wake_up_task_queue_locked(queue, task);
  }
  ldv_49189: 
  {
#line 583
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 583
  if (tmp == 0) {
#line 585
    goto ldv_49188;
  } else {

  }

#line 590
  if ((unsigned long )head == (unsigned long )((struct list_head *)(& queue->tasks))) {
#line 591
    goto ldv_49191;
  } else {

  }
#line 592
  head = head - 1;
#line 593
  goto ldv_49192;
  ldv_49191: 
  {
#line 594
  spin_unlock_bh(& queue->lock);
  }
#line 595
  return;
}
}
#line 605 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_wake_up_status(struct rpc_wait_queue *queue , int status ) 
{ 
  struct list_head *head ;
  struct rpc_task *task ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
  {
#line 609
  spin_lock_bh(& queue->lock);
#line 610
  head = (struct list_head *)(& queue->tasks) + (unsigned long )queue->maxpriority;
  }
  ldv_49211: ;
#line 612
  goto ldv_49208;
  ldv_49207: 
  {
#line 614
  __mptr = (struct list_head  const  *)head->next;
#line 614
  task = (struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL);
#line 617
  task->tk_status = status;
#line 618
  rpc_wake_up_task_queue_locked(queue, task);
  }
  ldv_49208: 
  {
#line 612
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 612
  if (tmp == 0) {
#line 614
    goto ldv_49207;
  } else {

  }

#line 620
  if ((unsigned long )head == (unsigned long )((struct list_head *)(& queue->tasks))) {
#line 621
    goto ldv_49210;
  } else {

  }
#line 622
  head = head - 1;
#line 623
  goto ldv_49211;
  ldv_49210: 
  {
#line 624
  spin_unlock_bh(& queue->lock);
  }
#line 625
  return;
}
}
#line 628 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_queue_timer_fn(unsigned long ptr ) 
{ 
  struct rpc_wait_queue *queue ;
  struct rpc_task *task ;
  struct rpc_task *n ;
  unsigned long expires ;
  unsigned long now ;
  unsigned long timeo ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  long tmp ;
  struct list_head  const  *__mptr___1 ;
  int tmp___0 ;

  {
  {
#line 630
  queue = (struct rpc_wait_queue *)ptr;
#line 634
  spin_lock(& queue->lock);
#line 635
  now = jiffies;
#line 635
  expires = now;
#line 636
  __mptr = (struct list_head  const  *)queue->timer_list.list.next;
#line 636
  task = (struct rpc_task *)((char *)__mptr + 0xffffffffffffff58UL);
#line 636
  __mptr___0 = (struct list_head  const  *)task->u.tk_wait.timer_list.next;
#line 636
  n = (struct rpc_task *)((char *)__mptr___0 + 0xffffffffffffff58UL);
  }
#line 636
  goto ldv_49248;
  ldv_49247: 
#line 637
  timeo = task->u.tk_wait.expires;
#line 638
  if ((long )(now - timeo) >= 0L) {
    {
#line 639
    tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
    }
#line 639
    if (tmp != 0L) {
      {
#line 639
      printk("\001dRPC: %5u timeout\n", (int )task->tk_pid);
      }
    } else {

    }
    {
#line 640
    task->tk_status = -110;
#line 641
    rpc_wake_up_task_queue_locked(queue, task);
    }
#line 642
    goto ldv_49240;
  } else {

  }
#line 644
  if (expires == now || (long )(timeo - expires) < 0L) {
#line 645
    expires = timeo;
  } else {

  }
  ldv_49240: 
#line 636
  task = n;
#line 636
  __mptr___1 = (struct list_head  const  *)n->u.tk_wait.timer_list.next;
#line 636
  n = (struct rpc_task *)((char *)__mptr___1 + 0xffffffffffffff58UL);
  ldv_49248: ;
#line 636
  if ((unsigned long )(& task->u.tk_wait.timer_list) != (unsigned long )(& queue->timer_list.list)) {
#line 638
    goto ldv_49247;
  } else {

  }
  {
#line 647
  tmp___0 = list_empty((struct list_head  const  *)(& queue->timer_list.list));
  }
#line 647
  if (tmp___0 == 0) {
    {
#line 648
    rpc_set_queue_timer(queue, expires);
    }
  } else {

  }
  {
#line 649
  spin_unlock(& queue->lock);
  }
#line 650
  return;
}
}
#line 652 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_atrun(struct rpc_task *task ) 
{ 


  {
#line 654
  task->tk_status = 0;
#line 655
  return;
}
}
#line 660 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_delay(struct rpc_task *task , unsigned long delay ) 
{ 


  {
  {
#line 662
  task->tk_timeout = delay;
#line 663
  rpc_sleep_on(& delay_queue, task, & __rpc_atrun);
  }
#line 664
  return;
}
}
#line 670 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_prepare_task(struct rpc_task *task ) 
{ 


  {
  {
#line 672
  (*((task->tk_ops)->rpc_call_prepare))(task, task->tk_calldata);
  }
#line 673
  return;
}
}
#line 676 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_init_task_statistics(struct rpc_task *task ) 
{ 


  {
  {
#line 679
  task->tk_garb_retry = 2U;
#line 680
  task->tk_cred_retry = 2U;
#line 681
  task->tk_rebind_retry = 2U;
#line 684
  task->tk_start = ktime_get();
  }
#line 685
  return;
}
}
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_reset_task_statistics(struct rpc_task *task ) 
{ 


  {
  {
#line 690
  task->tk_timeouts = 0U;
#line 691
  task->tk_flags = (unsigned int )task->tk_flags & 63199U;
#line 693
  rpc_init_task_statistics(task);
  }
#line 694
  return;
}
}
#line 699 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_exit_task(struct rpc_task *task ) 
{ 
  int __ret_warn_on ;
  long tmp ;

  {
#line 701
  task->tk_action = (void (*)(struct rpc_task * ))0;
#line 702
  if ((unsigned long )(task->tk_ops)->rpc_call_done != (unsigned long )((void (*/* const  */)(struct rpc_task * ,
                                                                                              void * ))0)) {
    {
#line 703
    (*((task->tk_ops)->rpc_call_done))(task, task->tk_calldata);
    }
#line 704
    if ((unsigned long )task->tk_action != (unsigned long )((void (*)(struct rpc_task * ))0)) {
      {
#line 705
      __ret_warn_on = ((int )task->tk_flags & 256) != 0;
#line 705
      tmp = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 705
      if (tmp != 0L) {
        {
#line 705
        warn_slowpath_null("net/sunrpc/sched.c", 705);
        }
      } else {

      }
      {
#line 705
      __builtin_expect(__ret_warn_on != 0, 0L);
#line 707
      xprt_release(task);
#line 708
      rpc_reset_task_statistics(task);
      }
    } else {

    }
  } else {

  }
#line 711
  return;
}
}
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_exit(struct rpc_task *task , int status ) 
{ 
  int tmp ;

  {
  {
#line 715
  task->tk_status = status;
#line 716
  task->tk_action = & rpc_exit_task;
#line 717
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 717
  if (tmp != 0) {
    {
#line 718
    rpc_wake_up_queued_task(task->tk_waitqueue, task);
    }
  } else {

  }
#line 719
  return;
}
}
#line 722 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_release_calldata(struct rpc_call_ops  const  *ops , void *calldata ) 
{ 


  {
#line 724
  if ((unsigned long )ops->rpc_release != (unsigned long )((void (*/* const  */)(void * ))0)) {
    {
#line 725
    (*(ops->rpc_release))(calldata);
    }
  } else {

  }
#line 726
  return;
}
}
#line 731 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void __rpc_execute(struct rpc_task *task ) 
{ 
  struct rpc_wait_queue *queue ;
  int task_is_async ;
  int status ;
  long tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  void (*do_action)(struct rpc_task * ) ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;
  long tmp___10 ;

  {
  {
#line 734
  task_is_async = (int )task->tk_flags & 1;
#line 735
  status = 0;
#line 737
  tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 737
  if (tmp != 0L) {
    {
#line 737
    printk("\001dRPC: %5u __rpc_execute flags=0x%x\n", (int )task->tk_pid, (int )task->tk_flags);
    }
  } else {

  }
  {
#line 740
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
#line 740
  __ret_warn_once = tmp___0 != 0;
#line 740
  tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 740
  if (tmp___3 != 0L) {
    {
#line 740
    __ret_warn_on = ! __warned;
#line 740
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 740
    if (tmp___1 != 0L) {
      {
#line 740
      warn_slowpath_null("net/sunrpc/sched.c", 740);
      }
    } else {

    }
    {
#line 740
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 740
    if (tmp___2 != 0L) {
#line 740
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 740
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 741
  tmp___4 = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 741
  if (tmp___4 != 0) {
#line 742
    return;
  } else {

  }
  ldv_49308: 
#line 750
  do_action = task->tk_callback;
#line 751
  task->tk_callback = (void (*)(struct rpc_task * ))0;
#line 752
  if ((unsigned long )do_action == (unsigned long )((void (*)(struct rpc_task * ))0)) {
#line 759
    do_action = task->tk_action;
#line 760
    if ((unsigned long )do_action == (unsigned long )((void (*)(struct rpc_task * ))0)) {
#line 761
      goto ldv_49306;
    } else {

    }
  } else {

  }
  {
#line 763
  trace_rpc_task_run_action((struct rpc_clnt  const  *)task->tk_client, (struct rpc_task  const  *)task,
                            (void const   *)task->tk_action);
#line 764
  (*do_action)(task);
#line 769
  tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 769
  if (tmp___5 == 0) {
#line 770
    goto ldv_49307;
  } else {

  }
  {
#line 780
  queue = task->tk_waitqueue;
#line 781
  spin_lock_bh(& queue->lock);
#line 782
  tmp___6 = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
  }
#line 782
  if (tmp___6 == 0) {
    {
#line 783
    spin_unlock_bh(& queue->lock);
    }
#line 784
    goto ldv_49307;
  } else {

  }
  {
#line 786
  __asm__  volatile   ("": : : "memory");
#line 786
  clear_bit(0, (unsigned long volatile   *)(& task->tk_runstate));
#line 786
  __asm__  volatile   ("": : : "memory");
#line 787
  spin_unlock_bh(& queue->lock);
  }
#line 788
  if (task_is_async != 0) {
#line 789
    return;
  } else {

  }
  {
#line 792
  tmp___7 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 792
  if (tmp___7 != 0L) {
    {
#line 792
    printk("\001dRPC: %5u sync task going to sleep\n", (int )task->tk_pid);
    }
  } else {

  }
  {
#line 793
  status = out_of_line_wait_on_bit((void *)(& task->tk_runstate), 1, & rpc_wait_bit_killable,
                                   130U);
  }
#line 796
  if (status == -512) {
    {
#line 803
    tmp___8 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
    }
#line 803
    if (tmp___8 != 0L) {
      {
#line 803
      printk("\001dRPC: %5u got signal\n", (int )task->tk_pid);
      }
    } else {

    }
    {
#line 804
    task->tk_flags = (unsigned int )task->tk_flags | 256U;
#line 805
    rpc_exit(task, -512);
    }
  } else {

  }
  {
#line 807
  set_bit(0U, (unsigned long volatile   *)(& task->tk_runstate));
#line 808
  tmp___9 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 808
  if (tmp___9 != 0L) {
    {
#line 808
    printk("\001dRPC: %5u sync task resuming\n", (int )task->tk_pid);
    }
  } else {

  }
  ldv_49307: ;
#line 809
  goto ldv_49308;
  ldv_49306: 
  {
#line 811
  tmp___10 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 811
  if (tmp___10 != 0L) {
    {
#line 811
    printk("\001dRPC: %5u return %d, status %d\n", (int )task->tk_pid, status, task->tk_status);
    }
  } else {

  }
  {
#line 814
  rpc_release_task(task);
  }
#line 815
  return;
}
}
#line 826 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_execute(struct rpc_task *task ) 
{ 


  {
  {
#line 828
  rpc_set_active(task);
#line 829
  rpc_make_runnable(task);
  }
#line 830
  if (((int )task->tk_flags & 1) == 0) {
    {
#line 831
    __rpc_execute(task);
    }
  } else {

  }
#line 832
  return;
}
}
#line 834 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_async_schedule(struct work_struct *work ) 
{ 
  struct task_struct *tmp ;
  struct work_struct  const  *__mptr ;
  struct task_struct *tmp___0 ;

  {
  {
#line 836
  tmp = get_current();
#line 836
  tmp->flags = tmp->flags | 131072U;
#line 837
  __mptr = (struct work_struct  const  *)work;
#line 837
  __rpc_execute((struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL));
#line 838
  tmp___0 = get_current();
#line 838
  tmp___0->flags = tmp___0->flags & 4294836223U;
  }
#line 839
  return;
}
}
#line 857 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void *rpc_malloc(struct rpc_task *task , size_t size ) 
{ 
  struct rpc_buffer *buf ;
  gfp_t gfp ;
  void *tmp ;
  void *tmp___0 ;
  long tmp___1 ;

  {
#line 860
  gfp = 0U;
#line 862
  if (((int )task->tk_flags & 2) != 0) {
#line 863
    gfp = gfp | 8192U;
  } else {

  }
#line 865
  size = size + 8UL;
#line 866
  if (size <= 2048UL) {
    {
#line 867
    tmp = mempool_alloc(rpc_buffer_mempool, gfp);
#line 867
    buf = (struct rpc_buffer *)tmp;
    }
  } else {
    {
#line 869
    tmp___0 = kmalloc(size, gfp);
#line 869
    buf = (struct rpc_buffer *)tmp___0;
    }
  }
#line 871
  if ((unsigned long )buf == (unsigned long )((struct rpc_buffer *)0)) {
#line 872
    return ((void *)0);
  } else {

  }
  {
#line 874
  buf->len = size;
#line 875
  tmp___1 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 875
  if (tmp___1 != 0L) {
    {
#line 875
    printk("\001dRPC: %5u allocated buffer of size %zu at %p\n", (int )task->tk_pid,
           size, buf);
    }
  } else {

  }
#line 877
  return ((void *)(& buf->data));
}
}
#line 886 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_free(void *buffer ) 
{ 
  size_t size ;
  struct rpc_buffer *buf ;
  char const   (*__mptr)[] ;
  long tmp ;

  {
#line 891
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 892
    return;
  } else {

  }
  {
#line 894
  __mptr = (char const   *)buffer;
#line 894
  buf = (struct rpc_buffer *)((char *)__mptr + 0xfffffffffffffff8UL);
#line 895
  size = buf->len;
#line 897
  tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 897
  if (tmp != 0L) {
    {
#line 897
    printk("\001dRPC:       freeing buffer of size %zu at %p\n", size, buf);
    }
  } else {

  }
#line 900
  if (size <= 2048UL) {
    {
#line 901
    mempool_free((void *)buf, rpc_buffer_mempool);
    }
  } else {
    {
#line 903
    kfree((void const   *)buf);
    }
  }
#line 904
  return;
}
}
#line 910 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_init_task(struct rpc_task *task , struct rpc_task_setup  const  *task_setup_data ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  pid_t tmp___1 ;
  long tmp___2 ;

  {
  {
#line 912
  memset((void *)task, 0, 240UL);
#line 913
  atomic_set(& task->tk_count, 1);
#line 914
  task->tk_flags = task_setup_data->flags;
#line 915
  task->tk_ops = task_setup_data->callback_ops;
#line 916
  task->tk_calldata = task_setup_data->callback_data;
#line 917
  INIT_LIST_HEAD(& task->tk_task);
#line 919
  task->tk_priority = (unsigned int )((unsigned char )task_setup_data->priority) + 1U;
#line 920
  tmp = get_current();
#line 920
  task->tk_owner = tmp->tgid;
#line 923
  task->tk_workqueue = task_setup_data->workqueue;
  }
#line 925
  if ((unsigned long )(task->tk_ops)->rpc_call_prepare != (unsigned long )((void (*/* const  */)(struct rpc_task * ,
                                                                                                 void * ))0)) {
#line 926
    task->tk_action = & rpc_prepare_task;
  } else {

  }
  {
#line 928
  rpc_init_task_statistics(task);
#line 930
  tmp___2 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 930
  if (tmp___2 != 0L) {
    {
#line 930
    tmp___0 = get_current();
#line 930
    tmp___1 = task_pid_nr(tmp___0);
#line 930
    printk("\001dRPC:       new task initialized, procpid %u\n", tmp___1);
    }
  } else {

  }
#line 931
  return;
}
}
#line 935 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static struct rpc_task *rpc_alloc_task(void) 
{ 
  void *tmp ;

  {
  {
#line 937
  tmp = mempool_alloc(rpc_task_mempool, 16U);
  }
#line 937
  return ((struct rpc_task *)tmp);
}
}
#line 943 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
struct rpc_task *rpc_new_task(struct rpc_task_setup  const  *setup_data ) 
{ 
  struct rpc_task *task ;
  unsigned short flags ;
  void *tmp ;
  long tmp___0 ;

  {
#line 945
  task = setup_data->task;
#line 946
  flags = 0U;
#line 948
  if ((unsigned long )task == (unsigned long )((struct rpc_task *)0)) {
    {
#line 949
    task = rpc_alloc_task();
    }
#line 950
    if ((unsigned long )task == (unsigned long )((struct rpc_task *)0)) {
      {
#line 951
      rpc_release_calldata(setup_data->callback_ops, setup_data->callback_data);
#line 953
      tmp = ERR_PTR(-12L);
      }
#line 953
      return ((struct rpc_task *)tmp);
    } else {

    }
#line 955
    flags = 128U;
  } else {

  }
  {
#line 958
  rpc_init_task(task, setup_data);
#line 959
  task->tk_flags = (int )task->tk_flags | (int )flags;
#line 960
  tmp___0 = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 960
  if (tmp___0 != 0L) {
    {
#line 960
    printk("\001dRPC:       allocated task %p\n", task);
    }
  } else {

  }
#line 961
  return (task);
}
}
#line 983 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_free_task(struct rpc_task *task ) 
{ 
  unsigned short tk_flags ;
  long tmp ;

  {
  {
#line 985
  tk_flags = task->tk_flags;
#line 987
  rpc_release_calldata(task->tk_ops, task->tk_calldata);
  }
#line 989
  if (((int )tk_flags & 128) != 0) {
    {
#line 990
    tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
    }
#line 990
    if (tmp != 0L) {
      {
#line 990
      printk("\001dRPC: %5u freeing task\n", (int )task->tk_pid);
      }
    } else {

    }
    {
#line 991
    mempool_free((void *)task, rpc_task_mempool);
    }
  } else {

  }
#line 993
  return;
}
}
#line 995 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_async_release(struct work_struct *work ) 
{ 
  struct work_struct  const  *__mptr ;

  {
  {
#line 997
  __mptr = (struct work_struct  const  *)work;
#line 997
  rpc_free_task((struct rpc_task *)((char *)__mptr + 0xffffffffffffff78UL));
  }
#line 999
  return;
}
}
#line 1000 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_release_resources_task(struct rpc_task *task ) 
{ 


  {
  {
#line 1002
  xprt_release(task);
  }
#line 1003
  if ((unsigned long )task->tk_msg.rpc_cred != (unsigned long )((struct rpc_cred *)0)) {
    {
#line 1004
    put_rpccred(task->tk_msg.rpc_cred);
#line 1005
    task->tk_msg.rpc_cred = (struct rpc_cred *)0;
    }
  } else {

  }
  {
#line 1007
  rpc_task_release_client(task);
  }
#line 1008
  return;
}
}
#line 1010 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_final_put_task(struct rpc_task *task , struct workqueue_struct *q ) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
#line 1013
  if ((unsigned long )q != (unsigned long )((struct workqueue_struct *)0)) {
    {
#line 1014
    __init_work(& task->u.tk_work, 0);
#line 1014
    __constr_expr_0.counter = 137438953408L;
#line 1014
    task->u.tk_work.data = __constr_expr_0;
#line 1014
    lockdep_init_map(& task->u.tk_work.lockdep_map, "(&task->u.tk_work)", & __key,
                     0);
#line 1014
    INIT_LIST_HEAD(& task->u.tk_work.entry);
#line 1014
    task->u.tk_work.func = & rpc_async_release;
#line 1015
    queue_work(q, & task->u.tk_work);
    }
  } else {
    {
#line 1017
    rpc_free_task(task);
    }
  }
#line 1018
  return;
}
}
#line 1020 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_do_put_task(struct rpc_task *task , struct workqueue_struct *q ) 
{ 
  int tmp ;

  {
  {
#line 1022
  tmp = atomic_dec_and_test(& task->tk_count);
  }
#line 1022
  if (tmp != 0) {
    {
#line 1023
    rpc_release_resources_task(task);
#line 1024
    rpc_final_put_task(task, q);
    }
  } else {

  }
#line 1026
  return;
}
}
#line 1028 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_put_task(struct rpc_task *task ) 
{ 


  {
  {
#line 1030
  rpc_do_put_task(task, (struct workqueue_struct *)0);
  }
#line 1031
  return;
}
}
#line 1034 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_put_task_async(struct rpc_task *task ) 
{ 


  {
  {
#line 1036
  rpc_do_put_task(task, task->tk_workqueue);
  }
#line 1037
  return;
}
}
#line 1040 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpc_release_task(struct rpc_task *task ) 
{ 
  long tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
  {
#line 1042
  tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 1042
  if (tmp != 0L) {
    {
#line 1042
    printk("\001dRPC: %5u release task\n", (int )task->tk_pid);
    }
  } else {

  }
  {
#line 1044
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& task->tk_runstate));
#line 1044
  __ret_warn_once = tmp___0 != 0;
#line 1044
  tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 1044
  if (tmp___3 != 0L) {
    {
#line 1044
    __ret_warn_on = ! __warned;
#line 1044
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1044
    if (tmp___1 != 0L) {
      {
#line 1044
      warn_slowpath_null("net/sunrpc/sched.c", 1044);
      }
    } else {

    }
    {
#line 1044
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 1044
    if (tmp___2 != 0L) {
#line 1044
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 1044
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 1046
  rpc_release_resources_task(task);
#line 1053
  tmp___6 = atomic_read((atomic_t const   *)(& task->tk_count));
  }
#line 1053
  if (tmp___6 != (((int )task->tk_flags & 1) == 0 ? 2 : 1)) {
    {
#line 1055
    tmp___4 = rpc_complete_task(task);
    }
#line 1055
    if (tmp___4 == 0) {
#line 1056
      return;
    } else {

    }
  } else {
    {
#line 1058
    tmp___5 = atomic_dec_and_test(& task->tk_count);
    }
#line 1058
    if (tmp___5 == 0) {
#line 1059
      return;
    } else {

    }
  }
  {
#line 1061
  rpc_final_put_task(task, task->tk_workqueue);
  }
#line 1062
  return;
}
}
#line 1064 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
int rpciod_up(void) 
{ 
  bool tmp ;

  {
  {
#line 1066
  tmp = ldv_try_module_get_13___0(& __this_module);
  }
#line 1066
  return ((int )tmp ? 0 : -22);
}
}
#line 1069 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpciod_down(void) 
{ 


  {
  {
#line 1071
  ldv_module_put_14(& __this_module);
  }
#line 1072
  return;
}
}
#line 1077 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static int rpciod_start(void) 
{ 
  struct workqueue_struct *wq ;
  long tmp ;
  struct lock_class_key __key ;
  char const   *__lock_name ;
  struct workqueue_struct *tmp___0 ;

  {
  {
#line 1084
  tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 1084
  if (tmp != 0L) {
    {
#line 1084
    printk("\001dRPC:       creating workqueue rpciod\n");
    }
  } else {

  }
  {
#line 1085
  __lock_name = "rpciod";
#line 1085
  tmp___0 = __alloc_workqueue_key("rpciod", 8U, 1, & __key, __lock_name);
#line 1085
  wq = tmp___0;
#line 1086
  rpciod_workqueue = wq;
  }
#line 1087
  return ((unsigned long )rpciod_workqueue != (unsigned long )((struct workqueue_struct *)0));
}
}
#line 1090 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
static void rpciod_stop(void) 
{ 
  struct workqueue_struct *wq ;
  long tmp ;

  {
#line 1092
  wq = (struct workqueue_struct *)0;
#line 1094
  if ((unsigned long )rpciod_workqueue == (unsigned long )((struct workqueue_struct *)0)) {
#line 1095
    return;
  } else {

  }
  {
#line 1096
  tmp = __builtin_expect((rpc_debug & 64U) != 0U, 0L);
  }
#line 1096
  if (tmp != 0L) {
    {
#line 1096
    printk("\001dRPC:       destroying workqueue rpciod\n");
    }
  } else {

  }
  {
#line 1098
  wq = rpciod_workqueue;
#line 1099
  rpciod_workqueue = (struct workqueue_struct *)0;
#line 1100
  destroy_workqueue(wq);
  }
#line 1101
  return;
}
}
#line 1104 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
void rpc_destroy_mempool(void) 
{ 


  {
  {
#line 1106
  rpciod_stop();
  }
#line 1107
  if ((unsigned long )rpc_buffer_mempool != (unsigned long )((mempool_t *)0)) {
    {
#line 1108
    mempool_destroy(rpc_buffer_mempool);
    }
  } else {

  }
#line 1109
  if ((unsigned long )rpc_task_mempool != (unsigned long )((mempool_t *)0)) {
    {
#line 1110
    mempool_destroy(rpc_task_mempool);
    }
  } else {

  }
#line 1111
  if ((unsigned long )rpc_task_slabp != (unsigned long )((struct kmem_cache *)0)) {
    {
#line 1112
    kmem_cache_destroy(rpc_task_slabp);
    }
  } else {

  }
#line 1113
  if ((unsigned long )rpc_buffer_slabp != (unsigned long )((struct kmem_cache *)0)) {
    {
#line 1114
    kmem_cache_destroy(rpc_buffer_slabp);
    }
  } else {

  }
  {
#line 1115
  rpc_destroy_wait_queue(& delay_queue);
  }
#line 1116
  return;
}
}
#line 1119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sched.c"
int rpc_init_mempool(void) 
{ 
  int tmp ;

  {
  {
#line 1125
  rpc_init_wait_queue(& delay_queue, "delayq");
#line 1126
  tmp = rpciod_start();
  }
#line 1126
  if (tmp == 0) {
#line 1127
    goto err_nomem;
  } else {

  }
  {
#line 1129
  rpc_task_slabp = kmem_cache_create("rpc_tasks", 240UL, 0UL, 8192UL, (void (*)(void * ))0);
  }
#line 1133
  if ((unsigned long )rpc_task_slabp == (unsigned long )((struct kmem_cache *)0)) {
#line 1134
    goto err_nomem;
  } else {

  }
  {
#line 1135
  rpc_buffer_slabp = kmem_cache_create("rpc_buffers", 2048UL, 0UL, 8192UL, (void (*)(void * ))0);
  }
#line 1139
  if ((unsigned long )rpc_buffer_slabp == (unsigned long )((struct kmem_cache *)0)) {
#line 1140
    goto err_nomem;
  } else {

  }
  {
#line 1141
  rpc_task_mempool = mempool_create_slab_pool(8, rpc_task_slabp);
  }
#line 1143
  if ((unsigned long )rpc_task_mempool == (unsigned long )((mempool_t *)0)) {
#line 1144
    goto err_nomem;
  } else {

  }
  {
#line 1145
  rpc_buffer_mempool = mempool_create_slab_pool(8, rpc_buffer_slabp);
  }
#line 1147
  if ((unsigned long )rpc_buffer_mempool == (unsigned long )((mempool_t *)0)) {
#line 1148
    goto err_nomem;
  } else {

  }
#line 1149
  return (0);
  err_nomem: 
  {
#line 1151
  rpc_destroy_mempool();
  }
#line 1152
  return (-12);
}
}
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sched.c.aux"
int ldv_emg_del_timer(struct timer_list *arg0 ) ;
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sched.c.aux"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 127
  tmp = ldv_kmalloc(size, flags);
  }
#line 127
  return (tmp);
}
}
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sched.c.aux"
static int ldv_del_timer_10(struct timer_list *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 156
  tmp = ldv_emg_del_timer(ldv_func_arg1);
  }
#line 156
  return (tmp);
}
}
#line 160 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sched.c.aux"
static int ldv_mod_timer_11___0(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 164
  tmp = ldv_emg_mod_timer(ldv_func_arg1, ldv_func_arg2);
  }
#line 164
  return (tmp);
}
}
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sched.c.aux"
static int ldv_del_timer_sync_12___0(struct timer_list *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 172
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  }
#line 172
  return (tmp);
}
}
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sched.c.aux"
static bool ldv_try_module_get_13___0(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 179
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 179
  return (tmp != 0);
}
}
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sched.c.aux"
static void ldv_module_put_14(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 186
  ldv_module_put(ldv_func_arg1);
  }
#line 187
  return;
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kcalloc(size_t n , size_t size , gfp_t flags ) ;
#line 597 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 599
  h->next = (struct hlist_node *)0;
#line 600
  h->pprev = (struct hlist_node **)0;
#line 601
  return;
}
}
#line 608 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 610
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 615
  next = n->next;
#line 616
  pprev = n->pprev;
#line 617
  *pprev = next;
#line 618
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 619
    next->pprev = pprev;
  } else {

  }
#line 620
  return;
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 401 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t * , spinlock_t * ) ;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
extern struct user_namespace init_user_ns ;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static uid_t __kuid_val(kuid_t uid ) 
{ 


  {
#line 51
  return (uid);
}
}
#line 162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static uid_t from_kuid(struct user_namespace *to , kuid_t kuid ) 
{ 
  uid_t tmp ;

  {
  {
#line 164
  tmp = __kuid_val(kuid);
  }
#line 164
  return (tmp);
}
}
#line 323 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rculist.h"
__inline static void hlist_del_rcu(struct hlist_node *n ) 
{ 


  {
  {
#line 325
  __hlist_del(n);
#line 326
  n->pprev = (struct hlist_node **)-2401263026316508672L;
  }
#line 327
  return;
}
}
#line 375 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rculist.h"
__inline static void hlist_add_head_rcu(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 378
  first = h->first;
#line 380
  n->next = first;
#line 381
  n->pprev = & h->first;
#line 382
  __asm__  volatile   ("": : : "memory");
#line 382
  h->first = n;
#line 383
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 384
    first->pprev = & n->next;
  } else {

  }
#line 385
  return;
}
}
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/shrinker.h"
extern void register_shrinker(struct shrinker * ) ;
#line 41
extern void unregister_shrinker(struct shrinker * ) ;
#line 413 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
extern int sysctl_vfs_cache_pressure ;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cred.h"
__inline static struct group_info *get_group_info(struct group_info *gi ) 
{ 


  {
  {
#line 51
  atomic_inc(& gi->usage);
  }
#line 52
  return (gi);
}
}
#line 67
extern void groups_free(struct group_info * ) ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 426 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) ;
#line 468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
static bool ldv_try_module_get_10(struct module *ldv_func_arg1 ) ;
#line 472
static bool ldv_try_module_get_12___0(struct module *ldv_func_arg1 ) ;
#line 476
static bool ldv_try_module_get_14___0(struct module *ldv_func_arg1 ) ;
#line 482
static void ldv_module_put_11(struct module *ldv_func_arg1 ) ;
#line 486
static void ldv_module_put_13(struct module *ldv_func_arg1 ) ;
#line 490
static void ldv_module_put_15(struct module *ldv_func_arg1 ) ;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/hash.h"
__inline static u64 hash_64(u64 val , unsigned int bits ) 
{ 
  u64 hash ;
  u64 n ;

  {
#line 37
  hash = val;
#line 40
  n = hash;
#line 41
  n = n << 18;
#line 42
  hash = hash - n;
#line 43
  n = n << 33;
#line 44
  hash = hash - n;
#line 45
  n = n << 3;
#line 46
  hash = hash + n;
#line 47
  n = n << 3;
#line 48
  hash = hash - n;
#line 49
  n = n << 4;
#line 50
  hash = hash + n;
#line 51
  n = n << 2;
#line 52
  hash = hash + n;
#line 55
  return (hash >> (int )(64U - bits));
}
}
#line 216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
void xdr_init_encode(struct xdr_stream *xdr , struct xdr_buf *buf , __be32 *p ) ;
#line 221
void xdr_init_decode(struct xdr_stream *xdr , struct xdr_buf *buf , __be32 *p ) ;
#line 129 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_authops  const  authunix_ops ;
#line 132
int rpc_init_authunix(void) ;
#line 133
int rpc_init_generic_auth(void) ;
#line 134
int rpcauth_init_module(void) ;
#line 135
void rpcauth_remove_module(void) ;
#line 136
void rpc_destroy_generic_auth(void) ;
#line 137
void rpc_destroy_authunix(void) ;
#line 141
int rpcauth_register(struct rpc_authops  const  *ops ) ;
#line 142
int rpcauth_unregister(struct rpc_authops  const  *ops ) ;
#line 145
rpc_authflavor_t rpcauth_get_pseudoflavor(rpc_authflavor_t flavor , struct rpcsec_gss_info *info ) ;
#line 147
int rpcauth_get_gssinfo(rpc_authflavor_t pseudoflavor , struct rpcsec_gss_info *info ) ;
#line 149
int rpcauth_list_flavors(rpc_authflavor_t *array , int size ) ;
#line 150
struct rpc_cred *rpcauth_lookup_credcache(struct rpc_auth *auth , struct auth_cred *acred ,
                                          int flags ) ;
#line 151
void rpcauth_init_cred(struct rpc_cred *cred , struct auth_cred  const  *acred , struct rpc_auth *auth ,
                       struct rpc_credops  const  *ops ) ;
#line 152
struct rpc_cred *rpcauth_lookupcred(struct rpc_auth *auth , int flags ) ;
#line 153
struct rpc_cred *rpcauth_generic_bind_cred(struct rpc_task *task , struct rpc_cred *cred ,
                                           int lookupflags ) ;
#line 162
int rpcauth_init_credcache(struct rpc_auth *auth ) ;
#line 163
void rpcauth_destroy_credcache(struct rpc_auth *auth ) ;
#line 164
void rpcauth_clear_credcache(struct rpc_cred_cache *cache ) ;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static unsigned int auth_hashbits  =    4U;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static spinlock_t rpc_authflavor_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "rpc_authflavor_lock",
                                                     0, 0UL}}}};
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static struct rpc_authops  const  *auth_flavors[8U]  = {      & authnull_ops,      & authunix_ops,      (struct rpc_authops  const  *)0};
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static struct list_head cred_unused  =    {& cred_unused, & cred_unused};
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static unsigned long number_cred_unused  ;
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static u32 pseudoflavor_to_flavor(u32 flavor ) 
{ 


  {
#line 85
  if (flavor > 8U) {
#line 86
    return (6U);
  } else {

  }
#line 87
  return (flavor);
}
}
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_register(struct rpc_authops  const  *ops ) 
{ 
  rpc_authflavor_t flavor ;
  int ret ;

  {
#line 94
  ret = -1;
#line 96
  flavor = ops->au_flavor;
#line 96
  if (flavor > 7U) {
#line 97
    return (-22);
  } else {

  }
  {
#line 98
  spin_lock(& rpc_authflavor_lock);
  }
#line 99
  if ((unsigned long )auth_flavors[flavor] == (unsigned long )((struct rpc_authops  const  *)0)) {
#line 100
    auth_flavors[flavor] = ops;
#line 101
    ret = 0;
  } else {

  }
  {
#line 103
  spin_unlock(& rpc_authflavor_lock);
  }
#line 104
  return (ret);
}
}
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_unregister(struct rpc_authops  const  *ops ) 
{ 
  rpc_authflavor_t flavor ;
  int ret ;

  {
#line 112
  ret = -1;
#line 114
  flavor = ops->au_flavor;
#line 114
  if (flavor > 7U) {
#line 115
    return (-22);
  } else {

  }
  {
#line 116
  spin_lock(& rpc_authflavor_lock);
  }
#line 117
  if ((unsigned long )auth_flavors[flavor] == (unsigned long )ops) {
#line 118
    auth_flavors[flavor] = (struct rpc_authops  const  *)0;
#line 119
    ret = 0;
  } else {

  }
  {
#line 121
  spin_unlock(& rpc_authflavor_lock);
  }
#line 122
  return (ret);
}
}
#line 136 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
rpc_authflavor_t rpcauth_get_pseudoflavor(rpc_authflavor_t flavor , struct rpcsec_gss_info *info ) 
{ 
  struct rpc_authops  const  *ops ;
  rpc_authflavor_t pseudoflavor ;
  bool tmp ;
  int tmp___0 ;

  {
#line 141
  ops = auth_flavors[flavor];
#line 142
  if ((unsigned long )ops == (unsigned long )((struct rpc_authops  const  *)0)) {
    {
#line 143
    __request_module(1, "rpc-auth-%u", flavor);
    }
  } else {

  }
  {
#line 144
  spin_lock(& rpc_authflavor_lock);
#line 145
  ops = auth_flavors[flavor];
  }
#line 146
  if ((unsigned long )ops == (unsigned long )((struct rpc_authops  const  *)0)) {
    {
#line 147
    spin_unlock(& rpc_authflavor_lock);
    }
#line 148
    return (8U);
  } else {
    {
#line 146
    tmp = ldv_try_module_get_10(ops->owner);
    }
#line 146
    if (tmp) {
#line 146
      tmp___0 = 0;
    } else {
#line 146
      tmp___0 = 1;
    }
#line 146
    if (tmp___0) {
      {
#line 147
      spin_unlock(& rpc_authflavor_lock);
      }
#line 148
      return (8U);
    } else {

    }
  }
  {
#line 150
  spin_unlock(& rpc_authflavor_lock);
#line 152
  pseudoflavor = flavor;
  }
#line 153
  if ((unsigned long )ops->info2flavor != (unsigned long )((rpc_authflavor_t (*/* const  */)(struct rpcsec_gss_info * ))0)) {
    {
#line 154
    pseudoflavor = (*(ops->info2flavor))(info);
    }
  } else {

  }
  {
#line 156
  ldv_module_put_11(ops->owner);
  }
#line 157
  return (pseudoflavor);
}
}
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_get_gssinfo(rpc_authflavor_t pseudoflavor , struct rpcsec_gss_info *info ) 
{ 
  rpc_authflavor_t flavor ;
  u32 tmp ;
  struct rpc_authops  const  *ops ;
  int result ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 172
  tmp = pseudoflavor_to_flavor(pseudoflavor);
#line 172
  flavor = tmp;
  }
#line 176
  if (flavor > 7U) {
#line 177
    return (-22);
  } else {

  }
#line 179
  ops = auth_flavors[flavor];
#line 180
  if ((unsigned long )ops == (unsigned long )((struct rpc_authops  const  *)0)) {
    {
#line 181
    __request_module(1, "rpc-auth-%u", flavor);
    }
  } else {

  }
  {
#line 182
  spin_lock(& rpc_authflavor_lock);
#line 183
  ops = auth_flavors[flavor];
  }
#line 184
  if ((unsigned long )ops == (unsigned long )((struct rpc_authops  const  *)0)) {
    {
#line 185
    spin_unlock(& rpc_authflavor_lock);
    }
#line 186
    return (-2);
  } else {
    {
#line 184
    tmp___0 = ldv_try_module_get_12___0(ops->owner);
    }
#line 184
    if (tmp___0) {
#line 184
      tmp___1 = 0;
    } else {
#line 184
      tmp___1 = 1;
    }
#line 184
    if (tmp___1) {
      {
#line 185
      spin_unlock(& rpc_authflavor_lock);
      }
#line 186
      return (-2);
    } else {

    }
  }
  {
#line 188
  spin_unlock(& rpc_authflavor_lock);
#line 190
  result = -2;
  }
#line 191
  if ((unsigned long )ops->flavor2info != (unsigned long )((int (*/* const  */)(rpc_authflavor_t  ,
                                                                                struct rpcsec_gss_info * ))0)) {
    {
#line 192
    result = (*(ops->flavor2info))(pseudoflavor, info);
    }
  } else {

  }
  {
#line 194
  ldv_module_put_13(ops->owner);
  }
#line 195
  return (result);
}
}
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_list_flavors(rpc_authflavor_t *array , int size ) 
{ 
  rpc_authflavor_t flavor ;
  int result ;
  struct rpc_authops  const  *ops ;
  rpc_authflavor_t pseudos[4U] ;
  int i ;
  int len ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 213
  result = 0;
#line 215
  spin_lock(& rpc_authflavor_lock);
#line 216
  flavor = 0U;
  }
#line 216
  goto ldv_45729;
  ldv_45728: 
#line 217
  ops = auth_flavors[flavor];
#line 221
  if (result >= size) {
#line 222
    result = -12;
#line 223
    goto ldv_45721;
  } else {

  }
#line 226
  if ((unsigned long )ops == (unsigned long )((struct rpc_authops  const  *)0)) {
#line 227
    goto ldv_45722;
  } else {

  }
#line 228
  if ((unsigned long )ops->list_pseudoflavors == (unsigned long )((int (*/* const  */)(rpc_authflavor_t * ,
                                                                                       int  ))0)) {
#line 229
    tmp = result;
#line 229
    result = result + 1;
#line 229
    *(array + (unsigned long )tmp) = ops->au_flavor;
#line 230
    goto ldv_45722;
  } else {

  }
  {
#line 232
  len = (*(ops->list_pseudoflavors))((rpc_authflavor_t *)(& pseudos), 4);
  }
#line 233
  if (len < 0) {
#line 234
    result = len;
#line 235
    goto ldv_45721;
  } else {

  }
#line 237
  i = 0;
#line 237
  goto ldv_45727;
  ldv_45726: ;
#line 238
  if (result >= size) {
#line 239
    result = -12;
#line 240
    goto ldv_45725;
  } else {

  }
#line 242
  tmp___0 = result;
#line 242
  result = result + 1;
#line 242
  *(array + (unsigned long )tmp___0) = pseudos[i];
#line 237
  i = i + 1;
  ldv_45727: ;
#line 237
  if (i < len) {
#line 239
    goto ldv_45726;
  } else {

  }
  ldv_45725: ;
  ldv_45722: 
#line 216
  flavor = flavor + 1U;
  ldv_45729: ;
#line 216
  if (flavor <= 7U) {
#line 218
    goto ldv_45728;
  } else {

  }
  ldv_45721: 
  {
#line 245
  spin_unlock(& rpc_authflavor_lock);
#line 247
  tmp___1 = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 247
  if (tmp___1 != 0L) {
    {
#line 247
    printk("\001dRPC:       %s returns %d\n", "rpcauth_list_flavors", result);
    }
  } else {

  }
#line 248
  return (result);
}
}
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
struct rpc_auth *rpcauth_create(rpc_authflavor_t pseudoflavor , struct rpc_clnt *clnt ) 
{ 
  struct rpc_auth *auth ;
  struct rpc_authops  const  *ops ;
  u32 flavor ;
  u32 tmp ;
  void *tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;

  {
  {
#line 257
  tmp = pseudoflavor_to_flavor(pseudoflavor);
#line 257
  flavor = tmp;
#line 259
  tmp___0 = ERR_PTR(-22L);
#line 259
  auth = (struct rpc_auth *)tmp___0;
  }
#line 260
  if (flavor > 7U) {
#line 261
    goto out;
  } else {

  }
#line 263
  ops = auth_flavors[flavor];
#line 263
  if ((unsigned long )ops == (unsigned long )((struct rpc_authops  const  *)0)) {
    {
#line 264
    __request_module(1, "rpc-auth-%u", flavor);
    }
  } else {

  }
  {
#line 265
  spin_lock(& rpc_authflavor_lock);
#line 266
  ops = auth_flavors[flavor];
  }
#line 267
  if ((unsigned long )ops == (unsigned long )((struct rpc_authops  const  *)0)) {
    {
#line 268
    spin_unlock(& rpc_authflavor_lock);
    }
#line 269
    goto out;
  } else {
    {
#line 267
    tmp___1 = ldv_try_module_get_14___0(ops->owner);
    }
#line 267
    if (tmp___1) {
#line 267
      tmp___2 = 0;
    } else {
#line 267
      tmp___2 = 1;
    }
#line 267
    if (tmp___2) {
      {
#line 268
      spin_unlock(& rpc_authflavor_lock);
      }
#line 269
      goto out;
    } else {

    }
  }
  {
#line 271
  spin_unlock(& rpc_authflavor_lock);
#line 272
  auth = (*(ops->create))(clnt, pseudoflavor);
#line 273
  ldv_module_put_15(ops->owner);
#line 274
  tmp___3 = IS_ERR((void const   *)auth);
  }
#line 274
  if (tmp___3 != 0L) {
#line 275
    return (auth);
  } else {

  }
#line 276
  if ((unsigned long )clnt->cl_auth != (unsigned long )((struct rpc_auth *)0)) {
    {
#line 277
    rpcauth_release(clnt->cl_auth);
    }
  } else {

  }
#line 278
  clnt->cl_auth = auth;
  out: ;
#line 281
  return (auth);
}
}
#line 286 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
void rpcauth_release(struct rpc_auth *auth ) 
{ 
  int tmp ;

  {
  {
#line 288
  tmp = atomic_dec_and_test(& auth->au_count);
  }
#line 288
  if (tmp == 0) {
#line 289
    return;
  } else {

  }
  {
#line 290
  (*((auth->au_ops)->destroy))(auth);
  }
#line 291
  return;
}
}
#line 293 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static spinlock_t rpc_credcache_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "rpc_credcache_lock",
                                                     0, 0UL}}}};
#line 296 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static void rpcauth_unhash_cred_locked(struct rpc_cred *cred ) 
{ 


  {
  {
#line 298
  hlist_del_rcu(& cred->cr_hash);
#line 299
  __asm__  volatile   ("": : : "memory");
#line 300
  clear_bit(2, (unsigned long volatile   *)(& cred->cr_flags));
  }
#line 301
  return;
}
}
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static int rpcauth_unhash_cred(struct rpc_cred *cred ) 
{ 
  spinlock_t *cache_lock ;
  int ret ;
  int tmp ;

  {
  {
#line 309
  cache_lock = & ((cred->cr_auth)->au_credcache)->lock;
#line 310
  spin_lock(cache_lock);
#line 311
  tmp = atomic_read((atomic_t const   *)(& cred->cr_count));
#line 311
  ret = tmp == 0;
  }
#line 312
  if (ret != 0) {
    {
#line 313
    rpcauth_unhash_cred_locked(cred);
    }
  } else {

  }
  {
#line 314
  spin_unlock(cache_lock);
  }
#line 315
  return (ret);
}
}
#line 322 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_init_credcache(struct rpc_auth *auth ) 
{ 
  struct rpc_cred_cache *new ;
  unsigned int hashsize ;
  void *tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;

  {
  {
#line 327
  tmp = kmalloc(88UL, 208U);
#line 327
  new = (struct rpc_cred_cache *)tmp;
  }
#line 328
  if ((unsigned long )new == (unsigned long )((struct rpc_cred_cache *)0)) {
#line 329
    goto out_nocache;
  } else {

  }
  {
#line 330
  new->hashbits = auth_hashbits;
#line 331
  hashsize = 1U << (int )new->hashbits;
#line 332
  tmp___0 = kcalloc((size_t )hashsize, 8UL, 208U);
#line 332
  new->hashtable = (struct hlist_head *)tmp___0;
  }
#line 333
  if ((unsigned long )new->hashtable == (unsigned long )((struct hlist_head *)0)) {
#line 334
    goto out_nohashtbl;
  } else {

  }
  {
#line 335
  spinlock_check(& new->lock);
#line 335
  __raw_spin_lock_init(& new->lock.__annonCompField20.rlock, "&(&new->lock)->rlock",
                       & __key);
#line 336
  auth->au_credcache = new;
  }
#line 337
  return (0);
  out_nohashtbl: 
  {
#line 339
  kfree((void const   *)new);
  }
  out_nocache: ;
#line 341
  return (-12);
}
}
#line 349 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
__inline static void rpcauth_destroy_credlist(struct list_head *head ) 
{ 
  struct rpc_cred *cred ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 353
  goto ldv_45787;
  ldv_45786: 
  {
#line 354
  __mptr = (struct list_head  const  *)head->next;
#line 354
  cred = (struct rpc_cred *)((char *)__mptr + 0xfffffffffffffff0UL);
#line 355
  list_del_init(& cred->cr_lru);
#line 356
  put_rpccred(cred);
  }
  ldv_45787: 
  {
#line 353
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 353
  if (tmp == 0) {
#line 355
    goto ldv_45786;
  } else {

  }

#line 360
  return;
}
}
#line 365 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
void rpcauth_clear_credcache(struct rpc_cred_cache *cache ) 
{ 
  struct list_head free___0 ;
  struct hlist_head *head ;
  struct rpc_cred *cred ;
  unsigned int hashsize ;
  int i ;
  struct hlist_node  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 367
  free___0.next = & free___0;
#line 367
  free___0.prev = & free___0;
#line 370
  hashsize = 1U << (int )cache->hashbits;
#line 373
  spin_lock(& rpc_credcache_lock);
#line 374
  spin_lock(& cache->lock);
#line 375
  i = 0;
  }
#line 375
  goto ldv_45803;
  ldv_45802: 
#line 376
  head = cache->hashtable + (unsigned long )i;
#line 377
  goto ldv_45800;
  ldv_45799: 
  {
#line 378
  __mptr = (struct hlist_node  const  *)head->first;
#line 378
  cred = (struct rpc_cred *)__mptr;
#line 379
  get_rpccred(cred);
#line 380
  tmp = list_empty((struct list_head  const  *)(& cred->cr_lru));
  }
#line 380
  if (tmp == 0) {
    {
#line 381
    list_del(& cred->cr_lru);
#line 382
    number_cred_unused = number_cred_unused - 1UL;
    }
  } else {

  }
  {
#line 384
  list_add_tail(& cred->cr_lru, & free___0);
#line 385
  rpcauth_unhash_cred_locked(cred);
  }
  ldv_45800: 
  {
#line 377
  tmp___0 = hlist_empty((struct hlist_head  const  *)head);
  }
#line 377
  if (tmp___0 == 0) {
#line 379
    goto ldv_45799;
  } else {

  }
#line 375
  i = i + 1;
  ldv_45803: ;
#line 375
  if ((unsigned int )i < hashsize) {
#line 377
    goto ldv_45802;
  } else {

  }
  {
#line 388
  spin_unlock(& cache->lock);
#line 389
  spin_unlock(& rpc_credcache_lock);
#line 390
  rpcauth_destroy_credlist(& free___0);
  }
#line 391
  return;
}
}
#line 397 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
void rpcauth_destroy_credcache(struct rpc_auth *auth ) 
{ 
  struct rpc_cred_cache *cache ;

  {
#line 399
  cache = auth->au_credcache;
#line 401
  if ((unsigned long )cache != (unsigned long )((struct rpc_cred_cache *)0)) {
    {
#line 402
    auth->au_credcache = (struct rpc_cred_cache *)0;
#line 403
    rpcauth_clear_credcache(cache);
#line 404
    kfree((void const   *)cache->hashtable);
#line 405
    kfree((void const   *)cache);
    }
  } else {

  }
#line 407
  return;
}
}
#line 417 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static int rpcauth_prune_expired(struct list_head *free___0 , int nr_to_scan ) 
{ 
  spinlock_t *cache_lock ;
  struct rpc_cred *cred ;
  struct rpc_cred *next ;
  unsigned long expired ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 421
  expired = (unsigned long )jiffies - 15000UL;
#line 423
  __mptr = (struct list_head  const  *)cred_unused.next;
#line 423
  cred = (struct rpc_cred *)((char *)__mptr + 0xfffffffffffffff0UL);
#line 423
  __mptr___0 = (struct list_head  const  *)cred->cr_lru.next;
#line 423
  next = (struct rpc_cred *)((char *)__mptr___0 + 0xfffffffffffffff0UL);
#line 423
  goto ldv_45844;
  ldv_45843: 
#line 425
  tmp = nr_to_scan;
#line 425
  nr_to_scan = nr_to_scan - 1;
#line 425
  if (tmp == 0) {
#line 426
    goto ldv_45829;
  } else {

  }
#line 431
  if ((long )(cred->cr_expire - expired) >= 0L && (long )((unsigned long )jiffies - cred->cr_expire) >= 0L) {
    {
#line 431
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& cred->cr_flags));
    }
#line 431
    if (tmp___0 != 0) {
#line 433
      return (0);
    } else {

    }
  } else {

  }
  {
#line 435
  list_del_init(& cred->cr_lru);
#line 436
  number_cred_unused = number_cred_unused - 1UL;
#line 437
  tmp___1 = atomic_read((atomic_t const   *)(& cred->cr_count));
  }
#line 437
  if (tmp___1 != 0) {
#line 438
    goto ldv_45842;
  } else {

  }
  {
#line 440
  cache_lock = & ((cred->cr_auth)->au_credcache)->lock;
#line 441
  spin_lock(cache_lock);
#line 442
  tmp___2 = atomic_read((atomic_t const   *)(& cred->cr_count));
  }
#line 442
  if (tmp___2 == 0) {
    {
#line 443
    get_rpccred(cred);
#line 444
    list_add_tail(& cred->cr_lru, free___0);
#line 445
    rpcauth_unhash_cred_locked(cred);
    }
  } else {

  }
  {
#line 447
  spin_unlock(cache_lock);
  }
  ldv_45842: 
#line 423
  cred = next;
#line 423
  __mptr___1 = (struct list_head  const  *)next->cr_lru.next;
#line 423
  next = (struct rpc_cred *)((char *)__mptr___1 + 0xfffffffffffffff0UL);
  ldv_45844: ;
#line 423
  if ((unsigned long )(& cred->cr_lru) != (unsigned long )(& cred_unused)) {
#line 425
    goto ldv_45843;
  } else {

  }
  ldv_45829: ;
#line 449
  return ((int )((unsigned int )(number_cred_unused / 100UL) * (unsigned int )((unsigned long )sysctl_vfs_cache_pressure)));
}
}
#line 456 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static int rpcauth_cache_shrinker(struct shrinker *shrink , struct shrink_control *sc ) 
{ 
  struct list_head free___0 ;
  int res ;
  int nr_to_scan ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 458
  free___0.next = & free___0;
#line 458
  free___0.prev = & free___0;
#line 460
  nr_to_scan = (int )sc->nr_to_scan;
#line 461
  gfp_mask = sc->gfp_mask;
#line 463
  if ((gfp_mask & 208U) != 208U) {
#line 464
    return (nr_to_scan == 0 ? 0 : -1);
  } else {

  }
  {
#line 465
  tmp = list_empty((struct list_head  const  *)(& cred_unused));
  }
#line 465
  if (tmp != 0) {
#line 466
    return (0);
  } else {

  }
  {
#line 467
  spin_lock(& rpc_credcache_lock);
#line 468
  res = rpcauth_prune_expired(& free___0, nr_to_scan);
#line 469
  spin_unlock(& rpc_credcache_lock);
#line 470
  rpcauth_destroy_credlist(& free___0);
  }
#line 471
  return (res);
}
}
#line 478 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
struct rpc_cred *rpcauth_lookup_credcache(struct rpc_auth *auth , struct auth_cred *acred ,
                                          int flags ) 
{ 
  struct list_head free___0 ;
  struct rpc_cred_cache *cache ;
  struct rpc_cred *cred ;
  struct rpc_cred *entry ;
  struct rpc_cred *new ;
  unsigned int nr ;
  uid_t tmp ;
  u64 tmp___0 ;
  struct hlist_node *____ptr ;
  struct hlist_node *_________p1 ;
  bool __warned ;
  int tmp___1 ;
  struct hlist_node  const  *__mptr ;
  struct rpc_cred *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct hlist_node *____ptr___0 ;
  struct hlist_node *_________p1___0 ;
  bool __warned___0 ;
  int tmp___5 ;
  struct hlist_node  const  *__mptr___0 ;
  struct rpc_cred *tmp___6 ;
  long tmp___7 ;
  struct hlist_node *____ptr___1 ;
  struct hlist_node  const  *__mptr___1 ;
  struct rpc_cred *tmp___8 ;
  int tmp___9 ;
  struct hlist_node *____ptr___2 ;
  struct hlist_node  const  *__mptr___2 ;
  struct rpc_cred *tmp___10 ;
  int res ;
  int tmp___11 ;
  void *tmp___12 ;
  int tmp___13 ;

  {
  {
#line 481
  free___0.next = & free___0;
#line 481
  free___0.prev = & free___0;
#line 482
  cache = auth->au_credcache;
#line 483
  cred = (struct rpc_cred *)0;
#line 487
  tmp = from_kuid(& init_user_ns, acred->uid);
#line 487
  tmp___0 = hash_64((u64 )tmp, cache->hashbits);
#line 487
  nr = (unsigned int )tmp___0;
#line 489
  rcu_read_lock();
#line 490
  _________p1 = *((struct hlist_node * volatile  *)(& (cache->hashtable + (unsigned long )nr)->first));
#line 490
  tmp___1 = debug_lockdep_rcu_enabled();
  }
#line 490
  if (tmp___1 != 0 && ! __warned) {
    {
#line 490
    rcu_read_lock_held();
    }
  } else {

  }
#line 490
  ____ptr = _________p1;
#line 490
  if ((unsigned long )____ptr != (unsigned long )((struct hlist_node *)0)) {
#line 490
    __mptr = (struct hlist_node  const  *)____ptr;
#line 490
    tmp___2 = (struct rpc_cred *)__mptr;
  } else {
#line 490
    tmp___2 = (struct rpc_cred *)0;
  }
#line 490
  entry = tmp___2;
#line 490
  goto ldv_45887;
  ldv_45886: 
  {
#line 491
  tmp___3 = (*((entry->cr_ops)->crmatch))(acred, entry, flags);
  }
#line 491
  if (tmp___3 == 0) {
#line 492
    goto ldv_45884;
  } else {

  }
  {
#line 493
  spin_lock(& cache->lock);
#line 494
  tmp___4 = constant_test_bit(2U, (unsigned long const volatile   *)(& entry->cr_flags));
  }
#line 494
  if (tmp___4 == 0) {
    {
#line 495
    spin_unlock(& cache->lock);
    }
#line 496
    goto ldv_45884;
  } else {

  }
  {
#line 498
  cred = get_rpccred(entry);
#line 499
  spin_unlock(& cache->lock);
  }
#line 500
  goto ldv_45885;
  ldv_45884: 
  {
#line 490
  _________p1___0 = *((struct hlist_node * volatile  *)(& entry->cr_hash.next));
#line 490
  tmp___5 = debug_lockdep_rcu_enabled();
  }
#line 490
  if (tmp___5 != 0 && ! __warned___0) {
    {
#line 490
    rcu_read_lock_held();
    }
  } else {

  }
#line 490
  ____ptr___0 = _________p1___0;
#line 490
  if ((unsigned long )____ptr___0 != (unsigned long )((struct hlist_node *)0)) {
#line 490
    __mptr___0 = (struct hlist_node  const  *)____ptr___0;
#line 490
    tmp___6 = (struct rpc_cred *)__mptr___0;
  } else {
#line 490
    tmp___6 = (struct rpc_cred *)0;
  }
#line 490
  entry = tmp___6;
  ldv_45887: ;
#line 490
  if ((unsigned long )entry != (unsigned long )((struct rpc_cred *)0)) {
#line 492
    goto ldv_45886;
  } else {

  }
  ldv_45885: 
  {
#line 502
  rcu_read_unlock();
  }
#line 504
  if ((unsigned long )cred != (unsigned long )((struct rpc_cred *)0)) {
#line 505
    goto found;
  } else {

  }
  {
#line 507
  new = (*((auth->au_ops)->crcreate))(auth, acred, flags);
#line 508
  tmp___7 = IS_ERR((void const   *)new);
  }
#line 508
  if (tmp___7 != 0L) {
#line 509
    cred = new;
#line 510
    goto out;
  } else {

  }
  {
#line 513
  spin_lock(& cache->lock);
#line 514
  ____ptr___1 = (cache->hashtable + (unsigned long )nr)->first;
  }
#line 514
  if ((unsigned long )____ptr___1 != (unsigned long )((struct hlist_node *)0)) {
#line 514
    __mptr___1 = (struct hlist_node  const  *)____ptr___1;
#line 514
    tmp___8 = (struct rpc_cred *)__mptr___1;
  } else {
#line 514
    tmp___8 = (struct rpc_cred *)0;
  }
#line 514
  entry = tmp___8;
#line 514
  goto ldv_45901;
  ldv_45900: 
  {
#line 515
  tmp___9 = (*((entry->cr_ops)->crmatch))(acred, entry, flags);
  }
#line 515
  if (tmp___9 == 0) {
#line 516
    goto ldv_45898;
  } else {

  }
  {
#line 517
  cred = get_rpccred(entry);
  }
#line 518
  goto ldv_45899;
  ldv_45898: 
#line 514
  ____ptr___2 = entry->cr_hash.next;
#line 514
  if ((unsigned long )____ptr___2 != (unsigned long )((struct hlist_node *)0)) {
#line 514
    __mptr___2 = (struct hlist_node  const  *)____ptr___2;
#line 514
    tmp___10 = (struct rpc_cred *)__mptr___2;
  } else {
#line 514
    tmp___10 = (struct rpc_cred *)0;
  }
#line 514
  entry = tmp___10;
  ldv_45901: ;
#line 514
  if ((unsigned long )entry != (unsigned long )((struct rpc_cred *)0)) {
#line 516
    goto ldv_45900;
  } else {

  }
  ldv_45899: ;
#line 520
  if ((unsigned long )cred == (unsigned long )((struct rpc_cred *)0)) {
    {
#line 521
    cred = new;
#line 522
    set_bit(2U, (unsigned long volatile   *)(& cred->cr_flags));
#line 523
    hlist_add_head_rcu(& cred->cr_hash, cache->hashtable + (unsigned long )nr);
    }
  } else {
    {
#line 525
    list_add_tail(& new->cr_lru, & free___0);
    }
  }
  {
#line 526
  spin_unlock(& cache->lock);
  }
  found: 
  {
#line 528
  tmp___13 = constant_test_bit(0U, (unsigned long const volatile   *)(& cred->cr_flags));
  }
#line 528
  if ((tmp___13 != 0 && (unsigned long )(cred->cr_ops)->cr_init != (unsigned long )((int (*/* const  */)(struct rpc_auth * ,
                                                                                                         struct rpc_cred * ))0)) && (flags & 1) == 0) {
    {
#line 531
    tmp___11 = (*((cred->cr_ops)->cr_init))(auth, cred);
#line 531
    res = tmp___11;
    }
#line 532
    if (res < 0) {
      {
#line 533
      put_rpccred(cred);
#line 534
      tmp___12 = ERR_PTR((long )res);
#line 534
      cred = (struct rpc_cred *)tmp___12;
      }
    } else {

    }
  } else {

  }
  {
#line 537
  rpcauth_destroy_credlist(& free___0);
  }
  out: ;
#line 539
  return (cred);
}
}
#line 544 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
struct rpc_cred *rpcauth_lookupcred(struct rpc_auth *auth , int flags ) 
{ 
  struct auth_cred acred ;
  struct rpc_cred *ret ;
  struct cred  const  *cred ;
  int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
  {
#line 548
  tmp = debug_lockdep_rcu_enabled();
#line 548
  tmp___0 = get_current();
#line 548
  cred = tmp___0->cred;
#line 550
  tmp___1 = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 550
  if (tmp___1 != 0L) {
    {
#line 550
    printk("\001dRPC:       looking up %s cred\n", (auth->au_ops)->au_name);
    }
  } else {

  }
  {
#line 553
  memset((void *)(& acred), 0, 32UL);
#line 554
  acred.uid = cred->fsuid;
#line 555
  acred.gid = cred->fsgid;
#line 556
  acred.group_info = get_group_info(((struct cred *)cred)->group_info);
#line 558
  ret = (*((auth->au_ops)->lookup_cred))(auth, & acred, flags);
#line 559
  tmp___2 = atomic_dec_and_test(& (acred.group_info)->usage);
  }
#line 559
  if (tmp___2 != 0) {
    {
#line 559
    groups_free(acred.group_info);
    }
  } else {

  }
#line 560
  return (ret);
}
}
#line 564 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
void rpcauth_init_cred(struct rpc_cred *cred , struct auth_cred  const  *acred , struct rpc_auth *auth ,
                       struct rpc_credops  const  *ops ) 
{ 


  {
  {
#line 567
  INIT_HLIST_NODE(& cred->cr_hash);
#line 568
  INIT_LIST_HEAD(& cred->cr_lru);
#line 569
  atomic_set(& cred->cr_count, 1);
#line 570
  cred->cr_auth = auth;
#line 571
  cred->cr_ops = ops;
#line 572
  cred->cr_expire = jiffies;
#line 574
  cred->cr_magic = 256550128UL;
#line 576
  cred->cr_uid = acred->uid;
  }
#line 577
  return;
}
}
#line 581 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
struct rpc_cred *rpcauth_generic_bind_cred(struct rpc_task *task , struct rpc_cred *cred ,
                                           int lookupflags ) 
{ 
  long tmp ;
  struct rpc_cred *tmp___0 ;

  {
  {
#line 583
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 583
  if (tmp != 0L) {
    {
#line 583
    printk("\001dRPC: %5u holding %s cred %p\n", (int )task->tk_pid, ((cred->cr_auth)->au_ops)->au_name,
           cred);
    }
  } else {

  }
  {
#line 585
  tmp___0 = get_rpccred(cred);
  }
#line 585
  return (tmp___0);
}
}
#line 590 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static struct rpc_cred *rpcauth_bind_root_cred(struct rpc_task *task , int lookupflags ) 
{ 
  struct rpc_auth *auth ;
  struct auth_cred acred ;
  long tmp ;
  struct rpc_cred *tmp___0 ;

  {
  {
#line 592
  auth = (task->tk_client)->cl_auth;
#line 593
  acred.uid = 0U;
#line 593
  acred.gid = 0U;
#line 593
  acred.group_info = 0;
#line 593
  acred.principal = 0;
#line 593
  acred.machine_cred = (unsigned char)0;
#line 598
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 598
  if (tmp != 0L) {
    {
#line 598
    printk("\001dRPC: %5u looking up %s cred\n", (int )task->tk_pid, (((task->tk_client)->cl_auth)->au_ops)->au_name);
    }
  } else {

  }
  {
#line 600
  tmp___0 = (*((auth->au_ops)->lookup_cred))(auth, & acred, lookupflags);
  }
#line 600
  return (tmp___0);
}
}
#line 604 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static struct rpc_cred *rpcauth_bind_new_cred(struct rpc_task *task , int lookupflags ) 
{ 
  struct rpc_auth *auth ;
  long tmp ;
  struct rpc_cred *tmp___0 ;

  {
  {
#line 606
  auth = (task->tk_client)->cl_auth;
#line 608
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 608
  if (tmp != 0L) {
    {
#line 608
    printk("\001dRPC: %5u looking up %s cred\n", (int )task->tk_pid, (auth->au_ops)->au_name);
    }
  } else {

  }
  {
#line 610
  tmp___0 = rpcauth_lookupcred(auth, lookupflags);
  }
#line 610
  return (tmp___0);
}
}
#line 614 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static int rpcauth_bindcred(struct rpc_task *task , struct rpc_cred *cred , int flags ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_cred *new ;
  int lookupflags ;
  long tmp ;
  long tmp___0 ;

  {
#line 616
  req = task->tk_rqstp;
#line 618
  lookupflags = 0;
#line 620
  if (flags & 1) {
#line 621
    lookupflags = lookupflags | 1;
  } else {

  }
#line 622
  if ((unsigned long )cred != (unsigned long )((struct rpc_cred *)0)) {
    {
#line 623
    new = (*((cred->cr_ops)->crbind))(task, cred, lookupflags);
    }
  } else
#line 624
  if ((flags & 64) != 0) {
    {
#line 625
    new = rpcauth_bind_root_cred(task, lookupflags);
    }
  } else {
    {
#line 627
    new = rpcauth_bind_new_cred(task, lookupflags);
    }
  }
  {
#line 628
  tmp___0 = IS_ERR((void const   *)new);
  }
#line 628
  if (tmp___0 != 0L) {
    {
#line 629
    tmp = PTR_ERR((void const   *)new);
    }
#line 629
    return ((int )tmp);
  } else {

  }
#line 630
  if ((unsigned long )req->rq_cred != (unsigned long )((struct rpc_cred *)0)) {
    {
#line 631
    put_rpccred(req->rq_cred);
    }
  } else {

  }
#line 632
  req->rq_cred = new;
#line 633
  return (0);
}
}
#line 637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
void put_rpccred(struct rpc_cred *cred ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 640
  tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& cred->cr_flags));
  }
#line 640
  if (tmp___0 == 0) {
    {
#line 641
    tmp = atomic_dec_and_test(& cred->cr_count);
    }
#line 641
    if (tmp != 0) {
      {
#line 642
      (*((cred->cr_ops)->crdestroy))(cred);
      }
    } else {

    }
#line 643
    return;
  } else {

  }
  {
#line 646
  tmp___1 = _atomic_dec_and_lock(& cred->cr_count, & rpc_credcache_lock);
  }
#line 646
  if (tmp___1 == 0) {
#line 647
    return;
  } else {

  }
  {
#line 648
  tmp___2 = list_empty((struct list_head  const  *)(& cred->cr_lru));
  }
#line 648
  if (tmp___2 == 0) {
    {
#line 649
    number_cred_unused = number_cred_unused - 1UL;
#line 650
    list_del_init(& cred->cr_lru);
    }
  } else {

  }
  {
#line 652
  tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& cred->cr_flags));
  }
#line 652
  if (tmp___5 != 0) {
    {
#line 653
    tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& cred->cr_flags));
    }
#line 653
    if (tmp___3 != 0) {
      {
#line 654
      cred->cr_expire = jiffies;
#line 655
      list_add_tail(& cred->cr_lru, & cred_unused);
#line 656
      number_cred_unused = number_cred_unused + 1UL;
      }
#line 657
      goto out_nodestroy;
    } else {

    }
    {
#line 659
    tmp___4 = rpcauth_unhash_cred(cred);
    }
#line 659
    if (tmp___4 == 0) {
#line 661
      goto out_nodestroy;
    } else {

    }
  } else {

  }
  {
#line 664
  spin_unlock(& rpc_credcache_lock);
#line 665
  (*((cred->cr_ops)->crdestroy))(cred);
  }
#line 666
  return;
  out_nodestroy: 
  {
#line 668
  spin_unlock(& rpc_credcache_lock);
  }
#line 669
  return;
}
}
#line 673 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
__be32 *rpcauth_marshcred(struct rpc_task *task , __be32 *p ) 
{ 
  struct rpc_cred *cred ;
  long tmp ;
  __be32 *tmp___0 ;

  {
  {
#line 675
  cred = (task->tk_rqstp)->rq_cred;
#line 677
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 677
  if (tmp != 0L) {
    {
#line 677
    printk("\001dRPC: %5u marshaling %s cred %p\n", (int )task->tk_pid, ((cred->cr_auth)->au_ops)->au_name,
           cred);
    }
  } else {

  }
  {
#line 680
  tmp___0 = (*((cred->cr_ops)->crmarshal))(task, p);
  }
#line 680
  return (tmp___0);
}
}
#line 684 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
__be32 *rpcauth_checkverf(struct rpc_task *task , __be32 *p ) 
{ 
  struct rpc_cred *cred ;
  long tmp ;
  __be32 *tmp___0 ;

  {
  {
#line 686
  cred = (task->tk_rqstp)->rq_cred;
#line 688
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 688
  if (tmp != 0L) {
    {
#line 688
    printk("\001dRPC: %5u validating %s cred %p\n", (int )task->tk_pid, ((cred->cr_auth)->au_ops)->au_name,
           cred);
    }
  } else {

  }
  {
#line 691
  tmp___0 = (*((cred->cr_ops)->crvalidate))(task, p);
  }
#line 691
  return (tmp___0);
}
}
#line 694 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static void rpcauth_wrap_req_encode(void (*encode)(void * , struct xdr_stream * ,
                                                   void * ) , struct rpc_rqst *rqstp ,
                                    __be32 *data , void *obj ) 
{ 
  struct xdr_stream xdr ;

  {
  {
#line 699
  xdr_init_encode(& xdr, & rqstp->rq_snd_buf, data);
#line 700
  (*encode)((void *)rqstp, & xdr, obj);
  }
#line 701
  return;
}
}
#line 704 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_wrap_req(struct rpc_task *task , void (*encode)(void * , struct xdr_stream * ,
                                                            void * ) , void *rqstp ,
                     __be32 *data , void *obj ) 
{ 
  struct rpc_cred *cred ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 707
  cred = (task->tk_rqstp)->rq_cred;
#line 709
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 709
  if (tmp != 0L) {
    {
#line 709
    printk("\001dRPC: %5u using %s cred %p to wrap rpc data\n", (int )task->tk_pid,
           (cred->cr_ops)->cr_name, cred);
    }
  } else {

  }
#line 711
  if ((unsigned long )(cred->cr_ops)->crwrap_req != (unsigned long )((int (*/* const  */)(struct rpc_task * ,
                                                                                          void (*)(void * ,
                                                                                                   struct xdr_stream * ,
                                                                                                   void * ) ,
                                                                                          void * ,
                                                                                          __be32 * ,
                                                                                          void * ))0)) {
    {
#line 712
    tmp___0 = (*((cred->cr_ops)->crwrap_req))(task, encode, rqstp, data, obj);
    }
#line 712
    return (tmp___0);
  } else {

  }
  {
#line 714
  rpcauth_wrap_req_encode(encode, (struct rpc_rqst *)rqstp, data, obj);
  }
#line 715
  return (0);
}
}
#line 719 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static int rpcauth_unwrap_req_decode(int (*decode)(void * , struct xdr_stream * ,
                                                   void * ) , struct rpc_rqst *rqstp ,
                                     __be32 *data , void *obj ) 
{ 
  struct xdr_stream xdr ;
  int tmp ;

  {
  {
#line 724
  xdr_init_decode(& xdr, & rqstp->rq_rcv_buf, data);
#line 725
  tmp = (*decode)((void *)rqstp, & xdr, obj);
  }
#line 725
  return (tmp);
}
}
#line 729 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_unwrap_resp(struct rpc_task *task , int (*decode)(void * , struct xdr_stream * ,
                                                              void * ) , void *rqstp ,
                        __be32 *data , void *obj ) 
{ 
  struct rpc_cred *cred ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 732
  cred = (task->tk_rqstp)->rq_cred;
#line 734
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 734
  if (tmp != 0L) {
    {
#line 734
    printk("\001dRPC: %5u using %s cred %p to unwrap rpc data\n", (int )task->tk_pid,
           (cred->cr_ops)->cr_name, cred);
    }
  } else {

  }
#line 736
  if ((unsigned long )(cred->cr_ops)->crunwrap_resp != (unsigned long )((int (*/* const  */)(struct rpc_task * ,
                                                                                             int (*)(void * ,
                                                                                                     struct xdr_stream * ,
                                                                                                     void * ) ,
                                                                                             void * ,
                                                                                             __be32 * ,
                                                                                             void * ))0)) {
    {
#line 737
    tmp___0 = (*((cred->cr_ops)->crunwrap_resp))(task, decode, rqstp, data, obj);
    }
#line 737
    return (tmp___0);
  } else {

  }
  {
#line 740
  tmp___1 = rpcauth_unwrap_req_decode(decode, (struct rpc_rqst *)rqstp, data, obj);
  }
#line 740
  return (tmp___1);
}
}
#line 744 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_refreshcred(struct rpc_task *task ) 
{ 
  struct rpc_cred *cred ;
  int err ;
  long tmp ;

  {
#line 749
  cred = (task->tk_rqstp)->rq_cred;
#line 750
  if ((unsigned long )cred == (unsigned long )((struct rpc_cred *)0)) {
    {
#line 751
    err = rpcauth_bindcred(task, task->tk_msg.rpc_cred, (int )task->tk_flags);
    }
#line 752
    if (err < 0) {
#line 753
      goto out;
    } else {

    }
#line 754
    cred = (task->tk_rqstp)->rq_cred;
  } else {

  }
  {
#line 756
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 756
  if (tmp != 0L) {
    {
#line 756
    printk("\001dRPC: %5u refreshing %s cred %p\n", (int )task->tk_pid, ((cred->cr_auth)->au_ops)->au_name,
           cred);
    }
  } else {

  }
  {
#line 759
  err = (*((cred->cr_ops)->crrefresh))(task);
  }
  out: ;
#line 761
  if (err < 0) {
#line 762
    task->tk_status = err;
  } else {

  }
#line 763
  return (err);
}
}
#line 767 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
void rpcauth_invalcred(struct rpc_task *task ) 
{ 
  struct rpc_cred *cred ;
  long tmp ;

  {
  {
#line 769
  cred = (task->tk_rqstp)->rq_cred;
#line 771
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 771
  if (tmp != 0L) {
    {
#line 771
    printk("\001dRPC: %5u invalidating %s cred %p\n", (int )task->tk_pid, ((cred->cr_auth)->au_ops)->au_name,
           cred);
    }
  } else {

  }
#line 773
  if ((unsigned long )cred != (unsigned long )((struct rpc_cred *)0)) {
    {
#line 774
    clear_bit(1, (unsigned long volatile   *)(& cred->cr_flags));
    }
  } else {

  }
#line 775
  return;
}
}
#line 778 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_uptodatecred(struct rpc_task *task ) 
{ 
  struct rpc_cred *cred ;
  int tmp ;
  int tmp___0 ;

  {
#line 780
  cred = (task->tk_rqstp)->rq_cred;
#line 782
  if ((unsigned long )cred == (unsigned long )((struct rpc_cred *)0)) {
#line 782
    tmp___0 = 1;
  } else {
    {
#line 782
    tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& cred->cr_flags));
    }
#line 782
    if (tmp != 0) {
#line 782
      tmp___0 = 1;
    } else {
#line 782
      tmp___0 = 0;
    }
  }
#line 782
  return (tmp___0);
}
}
#line 786 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
static struct shrinker rpc_cred_shrinker  =    {& rpcauth_cache_shrinker, 2, 0L, {0, 0}, {0L}};
#line 791 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
int rpcauth_init_module(void) 
{ 
  int err ;

  {
  {
#line 795
  err = rpc_init_authunix();
  }
#line 796
  if (err < 0) {
#line 797
    goto out1;
  } else {

  }
  {
#line 798
  err = rpc_init_generic_auth();
  }
#line 799
  if (err < 0) {
#line 800
    goto out2;
  } else {

  }
  {
#line 801
  register_shrinker(& rpc_cred_shrinker);
  }
#line 802
  return (0);
  out2: 
  {
#line 804
  rpc_destroy_authunix();
  }
  out1: ;
#line 806
  return (err);
}
}
#line 809 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth.c"
void rpcauth_remove_module(void) 
{ 


  {
  {
#line 811
  rpc_destroy_authunix();
#line 812
  rpc_destroy_generic_auth();
#line 813
  unregister_shrinker(& rpc_cred_shrinker);
  }
#line 814
  return;
}
}
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_auth.c.aux"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
  {
#line 140
  tmp = ldv_kcalloc(n, size, flags);
  }
#line 140
  return (tmp);
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_auth.c.aux"
static bool ldv_try_module_get_10(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 154
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 154
  return (tmp != 0);
}
}
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_auth.c.aux"
static void ldv_module_put_11(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 161
  ldv_module_put(ldv_func_arg1);
  }
#line 162
  return;
}
}
#line 165 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_auth.c.aux"
static bool ldv_try_module_get_12___0(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 168
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 168
  return (tmp != 0);
}
}
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_auth.c.aux"
static void ldv_module_put_13(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 175
  ldv_module_put(ldv_func_arg1);
  }
#line 176
  return;
}
}
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_auth.c.aux"
static bool ldv_try_module_get_14___0(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 182
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 182
  return (tmp != 0);
}
}
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_auth.c.aux"
static void ldv_module_put_15(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 189
  ldv_module_put(ldv_func_arg1);
  }
#line 190
  return;
}
}
#line 17 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static struct rpc_auth null_auth ;
#line 18
static struct rpc_cred null_cred ;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static struct rpc_auth *nul_create(struct rpc_clnt *clnt , rpc_authflavor_t flavor ) 
{ 


  {
  {
#line 23
  atomic_inc(& null_auth.au_count);
  }
#line 24
  return (& null_auth);
}
}
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static void nul_destroy(struct rpc_auth *auth ) 
{ 


  {
#line 30
  return;
}
}
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static struct rpc_cred *nul_lookup_cred(struct rpc_auth *auth , struct auth_cred *acred ,
                                        int flags ) 
{ 
  struct rpc_cred *tmp ;

  {
  {
#line 38
  tmp = get_rpccred(& null_cred);
  }
#line 38
  return (tmp);
}
}
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static void nul_destroy_cred(struct rpc_cred *cred ) 
{ 


  {
#line 47
  return;
}
}
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static int nul_match(struct auth_cred *acred , struct rpc_cred *cred , int taskflags ) 
{ 


  {
#line 55
  return (1);
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static __be32 *nul_marshal(struct rpc_task *task , __be32 *p ) 
{ 
  __be32 *tmp ;
  __be32 *tmp___0 ;
  __be32 *tmp___1 ;
  __be32 *tmp___2 ;

  {
#line 64
  tmp = p;
#line 64
  p = p + 1;
#line 64
  *tmp = 0U;
#line 65
  tmp___0 = p;
#line 65
  p = p + 1;
#line 65
  *tmp___0 = 0U;
#line 66
  tmp___1 = p;
#line 66
  p = p + 1;
#line 66
  *tmp___1 = 0U;
#line 67
  tmp___2 = p;
#line 67
  p = p + 1;
#line 67
  *tmp___2 = 0U;
#line 69
  return (p);
}
}
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static int nul_refresh(struct rpc_task *task ) 
{ 


  {
  {
#line 78
  set_bit(1U, (unsigned long volatile   *)(& ((task->tk_rqstp)->rq_cred)->cr_flags));
  }
#line 79
  return (0);
}
}
#line 83 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static __be32 *nul_validate(struct rpc_task *task , __be32 *p ) 
{ 
  rpc_authflavor_t flavor ;
  u32 size ;
  __be32 *tmp ;
  __u32 tmp___0 ;
  __be32 *tmp___1 ;
  __u32 tmp___2 ;

  {
  {
#line 88
  tmp = p;
#line 88
  p = p + 1;
#line 88
  tmp___0 = __fswab32(*tmp);
#line 88
  flavor = tmp___0;
  }
#line 89
  if (flavor != 0U) {
    {
#line 90
    printk("RPC: bad verf flavor: %u\n", flavor);
    }
#line 91
    return ((__be32 *)0U);
  } else {

  }
  {
#line 94
  tmp___1 = p;
#line 94
  p = p + 1;
#line 94
  tmp___2 = __fswab32(*tmp___1);
#line 94
  size = tmp___2;
  }
#line 95
  if (size != 0U) {
    {
#line 96
    printk("RPC: bad verf size: %u\n", size);
    }
#line 97
    return ((__be32 *)0U);
  } else {

  }
#line 100
  return (p);
}
}
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
struct rpc_authops  const  authnull_ops  = 
#line 103
     {& __this_module, 0U, (char *)"NULL", & nul_create, & nul_destroy, & nul_lookup_cred,
    0, 0, 0, 0, 0, 0};
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static struct rpc_auth null_auth  = 
#line 113
     {4U, 2U, 0U, 0U, & authnull_ops, 0U, {0}, 0};
#line 122 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static struct rpc_credops  const  null_credops  = 
#line 122
     {"AUTH_NULL", 0, & nul_destroy_cred, & nul_match, & rpcauth_generic_bind_cred,
    & nul_marshal, & nul_refresh, & nul_validate, 0, 0};
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_null.c"
static struct rpc_cred null_cred  = 
#line 133
     {{0, 0}, {& null_cred.cr_lru, & null_cred.cr_lru}, {0, 0}, & null_auth, & null_credops,
    256550128UL, 0UL, 2UL, {1}, 0U};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 174 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcupdate.h"
extern void call_rcu_sched(struct callback_head * , void (*)(struct callback_head * ) ) ;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static gid_t __kgid_val(kgid_t gid ) 
{ 


  {
#line 56
  return (gid);
}
}
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static bool uid_eq(kuid_t left , kuid_t right ) 
{ 
  uid_t tmp ;
  uid_t tmp___0 ;

  {
  {
#line 72
  tmp = __kuid_val(left);
#line 72
  tmp___0 = __kuid_val(right);
  }
#line 72
  return (tmp == tmp___0);
}
}
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static bool gid_eq(kgid_t left , kgid_t right ) 
{ 
  gid_t tmp ;
  gid_t tmp___0 ;

  {
  {
#line 77
  tmp = __kgid_val(left);
#line 77
  tmp___0 = __kgid_val(right);
  }
#line 77
  return (tmp == tmp___0);
}
}
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static bool gid_valid(kgid_t gid ) 
{ 
  bool tmp ;
  int tmp___0 ;

  {
  {
#line 127
  tmp = gid_eq(gid, 4294967295U);
  }
#line 127
  if ((int )tmp != 0) {
#line 127
    tmp___0 = 0;
  } else {
#line 127
    tmp___0 = 1;
  }
#line 127
  return ((bool )tmp___0);
}
}
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static gid_t from_kgid(struct user_namespace *to , kgid_t kgid ) 
{ 
  gid_t tmp ;

  {
  {
#line 169
  tmp = __kgid_val(kgid);
  }
#line 169
  return (tmp);
}
}
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
__be32 *xdr_encode_opaque(__be32 *p , void const   *ptr , unsigned int nbytes ) ;
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
__inline static __be32 *xdr_encode_array(__be32 *p , void const   *s , unsigned int len ) 
{ 
  __be32 *tmp ;

  {
  {
#line 113
  tmp = xdr_encode_opaque(p, s, len);
  }
#line 113
  return (tmp);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static struct rpc_auth unix_auth ;
#line 33
static struct rpc_credops  const  unix_credops ;
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static struct rpc_auth *unx_create(struct rpc_clnt *clnt , rpc_authflavor_t flavor ) 
{ 
  long tmp ;

  {
  {
#line 38
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 38
  if (tmp != 0L) {
    {
#line 38
    printk("\001dRPC:       creating UNIX authenticator for client %p\n", clnt);
    }
  } else {

  }
  {
#line 40
  atomic_inc(& unix_auth.au_count);
  }
#line 41
  return (& unix_auth);
}
}
#line 45 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static void unx_destroy(struct rpc_auth *auth ) 
{ 
  long tmp ;

  {
  {
#line 47
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 47
  if (tmp != 0L) {
    {
#line 47
    printk("\001dRPC:       destroying UNIX authenticator %p\n", auth);
    }
  } else {

  }
  {
#line 48
  rpcauth_clear_credcache(auth->au_credcache);
  }
#line 49
  return;
}
}
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static struct rpc_cred *unx_lookup_cred(struct rpc_auth *auth , struct auth_cred *acred ,
                                        int flags ) 
{ 
  struct rpc_cred *tmp ;

  {
  {
#line 57
  tmp = rpcauth_lookup_credcache(auth, acred, flags);
  }
#line 57
  return (tmp);
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static struct rpc_cred *unx_create_cred(struct rpc_auth *auth , struct auth_cred *acred ,
                                        int flags ) 
{ 
  struct unx_cred *cred ;
  unsigned int groups ;
  unsigned int i ;
  gid_t tmp ;
  uid_t tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;

  {
  {
#line 64
  groups = 0U;
#line 67
  tmp___1 = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 67
  if (tmp___1 != 0L) {
    {
#line 67
    tmp = from_kgid(& init_user_ns, acred->gid);
#line 67
    tmp___0 = from_kuid(& init_user_ns, acred->uid);
#line 67
    printk("\001dRPC:       allocating UNIX cred for uid %d gid %d\n", tmp___0, tmp);
    }
  } else {

  }
  {
#line 71
  tmp___3 = kmalloc(168UL, 80U);
#line 71
  cred = (struct unx_cred *)tmp___3;
  }
#line 71
  if ((unsigned long )cred == (unsigned long )((struct unx_cred *)0)) {
    {
#line 72
    tmp___2 = ERR_PTR(-12L);
    }
#line 72
    return ((struct rpc_cred *)tmp___2);
  } else {

  }
  {
#line 74
  rpcauth_init_cred(& cred->uc_base, (struct auth_cred  const  *)acred, auth, & unix_credops);
#line 75
  cred->uc_base.cr_flags = 2UL;
  }
#line 77
  if ((unsigned long )acred->group_info != (unsigned long )((struct group_info *)0)) {
#line 78
    groups = (unsigned int )(acred->group_info)->ngroups;
  } else {

  }
#line 79
  if (groups > 16U) {
#line 80
    groups = 16U;
  } else {

  }
#line 82
  cred->uc_gid = acred->gid;
#line 83
  i = 0U;
#line 83
  goto ldv_45555;
  ldv_45554: 
#line 84
  cred->uc_gids[i] = *((acred->group_info)->blocks[i / 1024U] + ((unsigned long )i & 1023UL));
#line 83
  i = i + 1U;
  ldv_45555: ;
#line 83
  if (i < groups) {
#line 85
    goto ldv_45554;
  } else {

  }

#line 85
  if (i <= 15U) {
#line 86
    cred->uc_gids[i] = 4294967295U;
  } else {

  }
#line 88
  return (& cred->uc_base);
}
}
#line 92 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static void unx_free_cred(struct unx_cred *unx_cred ) 
{ 
  long tmp ;

  {
  {
#line 94
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 94
  if (tmp != 0L) {
    {
#line 94
    printk("\001dRPC:       unx_free_cred %p\n", unx_cred);
    }
  } else {

  }
  {
#line 95
  kfree((void const   *)unx_cred);
  }
#line 96
  return;
}
}
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static void unx_free_cred_callback(struct callback_head *head ) 
{ 
  struct unx_cred *unx_cred ;
  struct callback_head  const  *__mptr ;

  {
  {
#line 101
  __mptr = (struct callback_head  const  *)head;
#line 101
  unx_cred = (struct unx_cred *)((char *)__mptr + 0xffffffffffffffe0UL);
#line 102
  unx_free_cred(unx_cred);
  }
#line 103
  return;
}
}
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static void unx_destroy_cred(struct rpc_cred *cred ) 
{ 


  {
  {
#line 108
  call_rcu_sched(& cred->cr_rcu, & unx_free_cred_callback);
  }
#line 109
  return;
}
}
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static int unx_match(struct auth_cred *acred , struct rpc_cred *rcred , int flags ) 
{ 
  struct unx_cred *cred ;
  struct rpc_cred  const  *__mptr ;
  unsigned int groups ;
  unsigned int i ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  bool tmp___5 ;

  {
  {
#line 119
  __mptr = (struct rpc_cred  const  *)rcred;
#line 119
  cred = (struct unx_cred *)__mptr;
#line 120
  groups = 0U;
#line 124
  tmp = uid_eq(cred->uc_base.cr_uid, acred->uid);
  }
#line 124
  if (tmp) {
#line 124
    tmp___0 = 0;
  } else {
#line 124
    tmp___0 = 1;
  }
#line 124
  if (tmp___0) {
#line 125
    return (0);
  } else {
    {
#line 124
    tmp___1 = gid_eq(cred->uc_gid, acred->gid);
    }
#line 124
    if (tmp___1) {
#line 124
      tmp___2 = 0;
    } else {
#line 124
      tmp___2 = 1;
    }
#line 124
    if (tmp___2) {
#line 125
      return (0);
    } else {

    }
  }
#line 127
  if ((unsigned long )acred->group_info != (unsigned long )((struct group_info *)0)) {
#line 128
    groups = (unsigned int )(acred->group_info)->ngroups;
  } else {

  }
#line 129
  if (groups > 16U) {
#line 130
    groups = 16U;
  } else {

  }
#line 131
  i = 0U;
#line 131
  goto ldv_45580;
  ldv_45579: 
  {
#line 132
  tmp___3 = gid_eq(cred->uc_gids[i], *((acred->group_info)->blocks[i / 1024U] + ((unsigned long )i & 1023UL)));
  }
#line 132
  if (tmp___3) {
#line 132
    tmp___4 = 0;
  } else {
#line 132
    tmp___4 = 1;
  }
#line 132
  if (tmp___4) {
#line 133
    return (0);
  } else {

  }
#line 131
  i = i + 1U;
  ldv_45580: ;
#line 131
  if (i < groups) {
#line 133
    goto ldv_45579;
  } else {

  }

#line 134
  if (groups <= 15U) {
    {
#line 134
    tmp___5 = gid_valid(cred->uc_gids[groups]);
    }
#line 134
    if ((int )tmp___5) {
#line 135
      return (0);
    } else {

    }
  } else {

  }
#line 136
  return (1);
}
}
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static __be32 *unx_marshal(struct rpc_task *task , __be32 *p ) 
{ 
  struct rpc_clnt *clnt ;
  struct unx_cred *cred ;
  struct rpc_cred  const  *__mptr ;
  __be32 *base ;
  __be32 *hold ;
  int i ;
  __be32 *tmp ;
  __be32 *tmp___0 ;
  __be32 *tmp___1 ;
  __u32 tmp___2 ;
  __be32 *tmp___3 ;
  uid_t tmp___4 ;
  __u32 tmp___5 ;
  __be32 *tmp___6 ;
  gid_t tmp___7 ;
  __u32 tmp___8 ;
  __be32 *tmp___9 ;
  __be32 *tmp___10 ;
  gid_t tmp___11 ;
  __u32 tmp___12 ;
  bool tmp___13 ;
  __u32 tmp___14 ;
  __u32 tmp___15 ;
  __be32 *tmp___16 ;
  __be32 *tmp___17 ;

  {
  {
#line 146
  clnt = task->tk_client;
#line 147
  __mptr = (struct rpc_cred  const  *)(task->tk_rqstp)->rq_cred;
#line 147
  cred = (struct unx_cred *)__mptr;
#line 151
  tmp = p;
#line 151
  p = p + 1;
#line 151
  *tmp = 16777216U;
#line 152
  tmp___0 = p;
#line 152
  p = p + 1;
#line 152
  base = tmp___0;
#line 153
  tmp___1 = p;
#line 153
  p = p + 1;
#line 153
  tmp___2 = __fswab32((__u32 )((unsigned long )jiffies / 250UL));
#line 153
  *tmp___1 = tmp___2;
#line 158
  p = xdr_encode_array(p, (void const   *)(& clnt->cl_nodename), (unsigned int )clnt->cl_nodelen);
#line 160
  tmp___3 = p;
#line 160
  p = p + 1;
#line 160
  tmp___4 = from_kuid(& init_user_ns, cred->uc_base.cr_uid);
#line 160
  tmp___5 = __fswab32(tmp___4);
#line 160
  *tmp___3 = tmp___5;
#line 161
  tmp___6 = p;
#line 161
  p = p + 1;
#line 161
  tmp___7 = from_kgid(& init_user_ns, cred->uc_gid);
#line 161
  tmp___8 = __fswab32(tmp___7);
#line 161
  *tmp___6 = tmp___8;
#line 162
  tmp___9 = p;
#line 162
  p = p + 1;
#line 162
  hold = tmp___9;
#line 163
  i = 0;
  }
#line 163
  goto ldv_45594;
  ldv_45593: 
  {
#line 164
  tmp___10 = p;
#line 164
  p = p + 1;
#line 164
  tmp___11 = from_kgid(& init_user_ns, cred->uc_gids[i]);
#line 164
  tmp___12 = __fswab32(tmp___11);
#line 164
  *tmp___10 = tmp___12;
#line 163
  i = i + 1;
  }
  ldv_45594: ;
#line 163
  if (i <= 15) {
    {
#line 163
    tmp___13 = gid_valid(cred->uc_gids[i]);
    }
#line 163
    if ((int )tmp___13) {
#line 165
      goto ldv_45593;
    } else {
#line 168
      goto ldv_45595;
    }
  } else {

  }
  ldv_45595: 
  {
#line 165
  tmp___14 = __fswab32((__u32 )(((long )p - (long )hold) / 4L) + 4294967295U);
#line 165
  *hold = tmp___14;
#line 166
  tmp___15 = __fswab32(((__u32 )(((long )p - (long )base) / 4L) + 4294967295U) << 2U);
#line 166
  *base = tmp___15;
#line 168
  tmp___16 = p;
#line 168
  p = p + 1;
#line 168
  *tmp___16 = 0U;
#line 169
  tmp___17 = p;
#line 169
  p = p + 1;
#line 169
  *tmp___17 = 0U;
  }
#line 171
  return (p);
}
}
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static int unx_refresh(struct rpc_task *task ) 
{ 


  {
  {
#line 180
  set_bit(1U, (unsigned long volatile   *)(& ((task->tk_rqstp)->rq_cred)->cr_flags));
  }
#line 181
  return (0);
}
}
#line 185 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static __be32 *unx_validate(struct rpc_task *task , __be32 *p ) 
{ 
  rpc_authflavor_t flavor ;
  u32 size ;
  __be32 *tmp ;
  __u32 tmp___0 ;
  __be32 *tmp___1 ;
  __u32 tmp___2 ;

  {
  {
#line 190
  tmp = p;
#line 190
  p = p + 1;
#line 190
  tmp___0 = __fswab32(*tmp);
#line 190
  flavor = tmp___0;
  }
#line 191
  if (flavor > 2U) {
    {
#line 194
    printk("RPC: bad verf flavor: %u\n", flavor);
    }
#line 195
    return ((__be32 *)0U);
  } else {

  }
  {
#line 198
  tmp___1 = p;
#line 198
  p = p + 1;
#line 198
  tmp___2 = __fswab32(*tmp___1);
#line 198
  size = tmp___2;
  }
#line 199
  if (size > 400U) {
    {
#line 200
    printk("RPC: giant verf size: %u\n", size);
    }
#line 201
    return ((__be32 *)0U);
  } else {

  }
#line 203
  (((task->tk_rqstp)->rq_cred)->cr_auth)->au_rslack = (size >> 2) + 2U;
#line 204
  p = p + (unsigned long )(size >> 2);
#line 206
  return (p);
}
}
#line 209 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
int rpc_init_authunix(void) 
{ 
  int tmp ;

  {
  {
#line 211
  tmp = rpcauth_init_credcache(& unix_auth);
  }
#line 211
  return (tmp);
}
}
#line 214 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
void rpc_destroy_authunix(void) 
{ 


  {
  {
#line 216
  rpcauth_destroy_credcache(& unix_auth);
  }
#line 217
  return;
}
}
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
struct rpc_authops  const  authunix_ops  = 
#line 219
     {& __this_module, 1U, (char *)"UNIX", & unx_create, & unx_destroy, & unx_lookup_cred,
    & unx_create_cred, 0, 0, 0, 0, 0};
#line 230 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static struct rpc_auth unix_auth  = 
#line 230
     {29U, 2U, 0U, 0U, & authunix_ops, 1U, {0}, 0};
#line 239 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_unix.c"
static struct rpc_credops  const  unix_credops  = 
#line 239
     {"AUTH_UNIX", 0, & unx_destroy_cred, & unx_match, & rpcauth_generic_bind_cred,
    & unx_marshal, & unx_refresh, & unx_validate, 0, 0};
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/auth.h"
struct rpc_cred *rpc_lookup_cred(void) ;
#line 140
struct rpc_cred *rpc_lookup_machine_cred(char const   *service_name ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static struct rpc_auth generic_auth ;
#line 30
static struct rpc_credops  const  generic_credops ;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
struct rpc_cred *rpc_lookup_cred(void) 
{ 
  struct rpc_cred *tmp ;

  {
  {
#line 37
  tmp = rpcauth_lookupcred(& generic_auth, 0);
  }
#line 37
  return (tmp);
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
struct rpc_cred *rpc_lookup_machine_cred(char const   *service_name ) 
{ 
  struct auth_cred acred ;
  long tmp ;
  struct rpc_cred *tmp___0 ;

  {
  {
#line 46
  acred.uid = 0U;
#line 46
  acred.gid = 0U;
#line 46
  acred.group_info = 0;
#line 46
  acred.principal = service_name;
#line 46
  acred.machine_cred = 1U;
#line 53
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 53
  if (tmp != 0L) {
    {
#line 53
    printk("\001dRPC:       looking up machine cred for service %s\n", service_name);
    }
  } else {

  }
  {
#line 55
  tmp___0 = (*((generic_auth.au_ops)->lookup_cred))(& generic_auth, & acred, 0);
  }
#line 55
  return (tmp___0);
}
}
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static struct rpc_cred *generic_bind_cred(struct rpc_task *task , struct rpc_cred *cred ,
                                          int lookupflags ) 
{ 
  struct rpc_auth *auth ;
  struct auth_cred *acred ;
  struct rpc_cred  const  *__mptr ;
  struct rpc_cred *tmp ;

  {
  {
#line 62
  auth = (task->tk_client)->cl_auth;
#line 63
  __mptr = (struct rpc_cred  const  *)cred;
#line 63
  acred = & ((struct generic_cred *)__mptr)->acred;
#line 65
  tmp = (*((auth->au_ops)->lookup_cred))(auth, acred, lookupflags);
  }
#line 65
  return (tmp);
}
}
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static struct rpc_cred *generic_lookup_cred(struct rpc_auth *auth , struct auth_cred *acred ,
                                            int flags ) 
{ 
  struct rpc_cred *tmp ;

  {
  {
#line 74
  tmp = rpcauth_lookup_credcache(& generic_auth, acred, flags);
  }
#line 74
  return (tmp);
}
}
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static struct rpc_cred *generic_create_cred(struct rpc_auth *auth , struct auth_cred *acred ,
                                            int flags ) 
{ 
  struct generic_cred *gcred ;
  void *tmp ;
  void *tmp___0 ;
  gid_t tmp___1 ;
  uid_t tmp___2 ;
  long tmp___3 ;

  {
  {
#line 82
  tmp = kmalloc(128UL, 208U);
#line 82
  gcred = (struct generic_cred *)tmp;
  }
#line 83
  if ((unsigned long )gcred == (unsigned long )((struct generic_cred *)0)) {
    {
#line 84
    tmp___0 = ERR_PTR(-12L);
    }
#line 84
    return ((struct rpc_cred *)tmp___0);
  } else {

  }
  {
#line 86
  rpcauth_init_cred(& gcred->gc_base, (struct auth_cred  const  *)acred, & generic_auth,
                    & generic_credops);
#line 87
  gcred->gc_base.cr_flags = 2UL;
#line 89
  gcred->acred.uid = acred->uid;
#line 90
  gcred->acred.gid = acred->gid;
#line 91
  gcred->acred.group_info = acred->group_info;
  }
#line 92
  if ((unsigned long )gcred->acred.group_info != (unsigned long )((struct group_info *)0)) {
    {
#line 93
    get_group_info(gcred->acred.group_info);
    }
  } else {

  }
  {
#line 94
  gcred->acred.machine_cred = acred->machine_cred;
#line 95
  gcred->acred.principal = acred->principal;
#line 97
  tmp___3 = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 97
  if (tmp___3 != 0L) {
    {
#line 97
    tmp___1 = from_kgid(& init_user_ns, acred->gid);
#line 97
    tmp___2 = from_kuid(& init_user_ns, acred->uid);
#line 97
    printk("\001dRPC:       allocated %s cred %p for uid %d gid %d\n", (unsigned int )*((unsigned char *)gcred + 120UL) != 0U ? (char *)"machine" : (char *)"generic",
           gcred, tmp___2, tmp___1);
    }
  } else {

  }
#line 102
  return (& gcred->gc_base);
}
}
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static void generic_free_cred(struct rpc_cred *cred ) 
{ 
  struct generic_cred *gcred ;
  struct rpc_cred  const  *__mptr ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 108
  __mptr = (struct rpc_cred  const  *)cred;
#line 108
  gcred = (struct generic_cred *)__mptr;
#line 110
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 110
  if (tmp != 0L) {
    {
#line 110
    printk("\001dRPC:       generic_free_cred %p\n", gcred);
    }
  } else {

  }
#line 111
  if ((unsigned long )gcred->acred.group_info != (unsigned long )((struct group_info *)0)) {
    {
#line 112
    tmp___0 = atomic_dec_and_test(& (gcred->acred.group_info)->usage);
    }
#line 112
    if (tmp___0 != 0) {
      {
#line 112
      groups_free(gcred->acred.group_info);
      }
    } else {

    }
  } else {

  }
  {
#line 113
  kfree((void const   *)gcred);
  }
#line 114
  return;
}
}
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static void generic_free_cred_callback(struct callback_head *head ) 
{ 
  struct rpc_cred *cred ;
  struct callback_head  const  *__mptr ;

  {
  {
#line 119
  __mptr = (struct callback_head  const  *)head;
#line 119
  cred = (struct rpc_cred *)((char *)__mptr + 0xffffffffffffffe0UL);
#line 120
  generic_free_cred(cred);
  }
#line 121
  return;
}
}
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static void generic_destroy_cred(struct rpc_cred *cred ) 
{ 


  {
  {
#line 126
  call_rcu_sched(& cred->cr_rcu, & generic_free_cred_callback);
  }
#line 127
  return;
}
}
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static int machine_cred_match(struct auth_cred *acred , struct generic_cred *gcred ,
                              int flags ) 
{ 
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
#line 132
  if ((unsigned int )*((unsigned char *)gcred + 120UL) == 0U || (unsigned long )gcred->acred.principal != (unsigned long )acred->principal) {
#line 136
    return (0);
  } else {
    {
#line 132
    tmp = uid_eq(gcred->acred.uid, acred->uid);
    }
#line 132
    if (tmp) {
#line 132
      tmp___0 = 0;
    } else {
#line 132
      tmp___0 = 1;
    }
#line 132
    if (tmp___0) {
#line 136
      return (0);
    } else {
      {
#line 132
      tmp___1 = gid_eq(gcred->acred.gid, acred->gid);
      }
#line 132
      if (tmp___1) {
#line 132
        tmp___2 = 0;
      } else {
#line 132
        tmp___2 = 1;
      }
#line 132
      if (tmp___2) {
#line 136
        return (0);
      } else {

      }
    }
  }
#line 137
  return (1);
}
}
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static int generic_match(struct auth_cred *acred , struct rpc_cred *cred , int flags ) 
{ 
  struct generic_cred *gcred ;
  struct rpc_cred  const  *__mptr ;
  int i ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;

  {
#line 146
  __mptr = (struct rpc_cred  const  *)cred;
#line 146
  gcred = (struct generic_cred *)__mptr;
#line 149
  if ((unsigned int )*((unsigned char *)acred + 24UL) != 0U) {
    {
#line 150
    tmp = machine_cred_match(acred, gcred, flags);
    }
#line 150
    return (tmp);
  } else {

  }
  {
#line 152
  tmp___0 = uid_eq(gcred->acred.uid, acred->uid);
  }
#line 152
  if (tmp___0) {
#line 152
    tmp___1 = 0;
  } else {
#line 152
    tmp___1 = 1;
  }
#line 152
  if (tmp___1) {
#line 155
    goto out_nomatch;
  } else {
    {
#line 152
    tmp___2 = gid_eq(gcred->acred.gid, acred->gid);
    }
#line 152
    if (tmp___2) {
#line 152
      tmp___3 = 0;
    } else {
#line 152
      tmp___3 = 1;
    }
#line 152
    if (tmp___3) {
#line 155
      goto out_nomatch;
    } else
#line 152
    if ((unsigned int )*((unsigned char *)gcred + 120UL) != 0U) {
#line 155
      goto out_nomatch;
    } else {

    }
  }
#line 158
  if ((unsigned long )gcred->acred.group_info == (unsigned long )acred->group_info) {
#line 159
    goto out_match;
  } else {

  }
#line 162
  if ((gcred->acred.group_info)->ngroups != (acred->group_info)->ngroups) {
#line 163
    goto out_nomatch;
  } else {

  }
#line 164
  i = 0;
#line 164
  goto ldv_45569;
  ldv_45568: 
  {
#line 165
  tmp___4 = gid_eq(*((gcred->acred.group_info)->blocks[(unsigned int )i / 1024U] + ((unsigned long )((unsigned int )i) & 1023UL)),
                   *((acred->group_info)->blocks[(unsigned int )i / 1024U] + ((unsigned long )((unsigned int )i) & 1023UL)));
  }
#line 165
  if (tmp___4) {
#line 165
    tmp___5 = 0;
  } else {
#line 165
    tmp___5 = 1;
  }
#line 165
  if (tmp___5) {
#line 167
    goto out_nomatch;
  } else {

  }
#line 164
  i = i + 1;
  ldv_45569: ;
#line 164
  if (i < (gcred->acred.group_info)->ngroups) {
#line 166
    goto ldv_45568;
  } else {

  }

  out_match: ;
#line 170
  return (1);
  out_nomatch: ;
#line 172
  return (0);
}
}
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
int rpc_init_generic_auth(void) 
{ 
  int tmp ;

  {
  {
#line 177
  tmp = rpcauth_init_credcache(& generic_auth);
  }
#line 177
  return (tmp);
}
}
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
void rpc_destroy_generic_auth(void) 
{ 


  {
  {
#line 182
  rpcauth_destroy_credcache(& generic_auth);
  }
#line 183
  return;
}
}
#line 185 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static struct rpc_authops  const  generic_auth_ops  = 
#line 185
     {& __this_module, 0U, (char *)"Generic", 0, 0, & generic_lookup_cred, & generic_create_cred,
    0, 0, 0, 0, 0};
#line 192 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static struct rpc_auth generic_auth  = 
#line 192
     {0U, 0U, 0U, 0U, & generic_auth_ops, 0U, {0}, 0};
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/auth_generic.c"
static struct rpc_credops  const  generic_credops  = 
#line 197
     {"Generic cred", 0, & generic_destroy_cred, & generic_match, & generic_bind_cred,
    0, 0, 0, 0, 0};
#line 1 "<compiler builtins>"
void __builtin_va_end(__builtin_va_list  ) ;
#line 1
void __builtin_va_start(__builtin_va_list  ) ;
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc.c.aux"
void ldv_module_get(struct module *module ) ;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 35
extern unsigned long find_first_bit(unsigned long const   * , unsigned long  ) ;
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 276 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
  }
#line 280
  return (tmp___0);
}
}
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 80
extern struct cpumask  const  * const  cpu_online_mask ;
#line 105 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 108
  __ret_warn_once = cpu >= (unsigned int )nr_cpu_ids;
#line 108
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 108
  if (tmp___1 != 0L) {
    {
#line 108
    __ret_warn_on = ! __warned;
#line 108
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 108
    if (tmp != 0L) {
      {
#line 108
      warn_slowpath_null("include/linux/cpumask.h", 108);
      }
    } else {

    }
    {
#line 108
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 108
    if (tmp___0 != 0L) {
#line 108
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 108
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 110
  return (cpu);
}
}
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 173
  if (n != -1) {
    {
#line 174
    cpumask_check((unsigned int )n);
    }
  } else {

  }
  {
#line 175
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
  }
#line 175
  return ((unsigned int )tmp);
}
}
#line 459 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
  {
#line 461
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
  }
#line 461
  return ((unsigned int )tmp);
}
}
#line 761
extern unsigned long const   cpu_bit_bitmap[65U][64U] ;
#line 763 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cpumask.h"
__inline static struct cpumask  const  *get_cpu_mask(unsigned int cpu ) 
{ 
  unsigned long const   *p ;

  {
#line 765
  p = (unsigned long const   *)((unsigned long const   (*)[64])(& cpu_bit_bitmap) + (unsigned long )((cpu & 63U) + 1U));
#line 766
  p = p + - ((unsigned long )(cpu / 64U));
#line 767
  return ((struct cpumask  const  *)p);
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/thread_info.h"
__inline static void clear_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 


  {
  {
#line 78
  clear_bit(flag, (unsigned long volatile   *)(& ti->flags));
  }
#line 79
  return;
}
}
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mutex.h"
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
static int ldv_del_timer_sync_10___0(struct timer_list *ldv_func_arg1 ) ;
#line 237 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nodemask.h"
__inline static int __first_node(nodemask_t const   *srcp ) 
{ 
  int __min1 ;
  int __min2 ;
  unsigned long tmp ;

  {
  {
#line 239
  __min1 = 1024;
#line 239
  tmp = find_first_bit((unsigned long const   *)(& srcp->bits), 1024UL);
#line 239
  __min2 = (int )tmp;
  }
#line 239
  return (__min1 < __min2 ? __min1 : __min2);
}
}
#line 243 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/nodemask.h"
__inline static int __next_node(int n , nodemask_t const   *srcp ) 
{ 
  int __min1 ;
  int __min2 ;
  unsigned long tmp ;

  {
  {
#line 245
  __min1 = 1024;
#line 245
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), 1024UL, (unsigned long )(n + 1));
#line 245
  __min2 = (int )tmp;
  }
#line 245
  return (__min1 < __min2 ? __min1 : __min2);
}
}
#line 397
extern nodemask_t node_states[5U] ;
#line 426
extern int nr_node_ids ;
#line 427
extern int nr_online_nodes ;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/topology.h"
extern int __cpu_to_node(int  ) ;
#line 76
extern struct cpumask  const  *cpumask_of_node(int  ) ;
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/memory_hotplug.h"
extern pg_data_t *node_data[] ;
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/topology.h"
extern int numa_node ;
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/topology.h"
__inline static int numa_node_id(void) 
{ 
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;

  {
#line 185
  __vpp_verify = (void const   *)0;
  {
#line 185
  if (4UL == 1UL) {
#line 185
    goto case_1;
  } else {

  }
#line 185
  if (4UL == 2UL) {
#line 185
    goto case_2___0;
  } else {

  }
#line 185
  if (4UL == 4UL) {
#line 185
    goto case_4___1;
  } else {

  }
#line 185
  if (4UL == 8UL) {
#line 185
    goto case_8___2;
  } else {

  }
#line 185
  goto switch_default___3;
  case_1: /* CIL Label */ ;
  {
#line 185
  if (4UL == 1UL) {
#line 185
    goto case_1___0;
  } else {

  }
#line 185
  if (4UL == 2UL) {
#line 185
    goto case_2;
  } else {

  }
#line 185
  if (4UL == 4UL) {
#line 185
    goto case_4;
  } else {

  }
#line 185
  if (4UL == 8UL) {
#line 185
    goto case_8;
  } else {

  }
#line 185
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 185
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (numa_node));
#line 185
  goto ldv_13842;
  case_2: /* CIL Label */ 
#line 185
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
#line 185
  goto ldv_13842;
  case_4: /* CIL Label */ 
#line 185
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
#line 185
  goto ldv_13842;
  case_8: /* CIL Label */ 
#line 185
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
#line 185
  goto ldv_13842;
  switch_default: /* CIL Label */ 
  {
#line 185
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_13842: 
#line 185
  pscr_ret__ = pfo_ret__;
#line 185
  goto ldv_13848;
  case_2___0: /* CIL Label */ ;
  {
#line 185
  if (4UL == 1UL) {
#line 185
    goto case_1___1;
  } else {

  }
#line 185
  if (4UL == 2UL) {
#line 185
    goto case_2___1;
  } else {

  }
#line 185
  if (4UL == 4UL) {
#line 185
    goto case_4___0;
  } else {

  }
#line 185
  if (4UL == 8UL) {
#line 185
    goto case_8___0;
  } else {

  }
#line 185
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 185
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (numa_node));
#line 185
  goto ldv_13852;
  case_2___1: /* CIL Label */ 
#line 185
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
#line 185
  goto ldv_13852;
  case_4___0: /* CIL Label */ 
#line 185
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
#line 185
  goto ldv_13852;
  case_8___0: /* CIL Label */ 
#line 185
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
#line 185
  goto ldv_13852;
  switch_default___0: /* CIL Label */ 
  {
#line 185
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_13852: 
#line 185
  pscr_ret__ = pfo_ret_____0;
#line 185
  goto ldv_13848;
  case_4___1: /* CIL Label */ ;
  {
#line 185
  if (4UL == 1UL) {
#line 185
    goto case_1___2;
  } else {

  }
#line 185
  if (4UL == 2UL) {
#line 185
    goto case_2___2;
  } else {

  }
#line 185
  if (4UL == 4UL) {
#line 185
    goto case_4___2;
  } else {

  }
#line 185
  if (4UL == 8UL) {
#line 185
    goto case_8___1;
  } else {

  }
#line 185
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 185
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (numa_node));
#line 185
  goto ldv_13861;
  case_2___2: /* CIL Label */ 
#line 185
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
#line 185
  goto ldv_13861;
  case_4___2: /* CIL Label */ 
#line 185
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
#line 185
  goto ldv_13861;
  case_8___1: /* CIL Label */ 
#line 185
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
#line 185
  goto ldv_13861;
  switch_default___1: /* CIL Label */ 
  {
#line 185
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_13861: 
#line 185
  pscr_ret__ = pfo_ret_____1;
#line 185
  goto ldv_13848;
  case_8___2: /* CIL Label */ ;
  {
#line 185
  if (4UL == 1UL) {
#line 185
    goto case_1___3;
  } else {

  }
#line 185
  if (4UL == 2UL) {
#line 185
    goto case_2___3;
  } else {

  }
#line 185
  if (4UL == 4UL) {
#line 185
    goto case_4___3;
  } else {

  }
#line 185
  if (4UL == 8UL) {
#line 185
    goto case_8___3;
  } else {

  }
#line 185
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 185
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (numa_node));
#line 185
  goto ldv_13870;
  case_2___3: /* CIL Label */ 
#line 185
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
#line 185
  goto ldv_13870;
  case_4___3: /* CIL Label */ 
#line 185
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
#line 185
  goto ldv_13870;
  case_8___3: /* CIL Label */ 
#line 185
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
#line 185
  goto ldv_13870;
  switch_default___2: /* CIL Label */ 
  {
#line 185
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_13870: 
#line 185
  pscr_ret__ = pfo_ret_____2;
#line 185
  goto ldv_13848;
  switch_default___3: /* CIL Label */ 
  {
#line 185
  __bad_size_call_parameter();
  }
#line 185
  goto ldv_13848;
  switch_break: /* CIL Label */ ;
  }
  ldv_13848: ;
#line 185
  return (pscr_ret__);
}
}
#line 270 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/gfp.h"
__inline static int gfp_zonelist(gfp_t flags ) 
{ 
  long tmp ;

  {
  {
#line 272
  tmp = __builtin_expect((flags & 262144U) != 0U, 0L);
  }
#line 272
  if (tmp != 0L) {
#line 273
    return (1);
  } else {

  }
#line 275
  return (0);
}
}
#line 287 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/gfp.h"
__inline static struct zonelist *node_zonelist(int nid , gfp_t flags ) 
{ 
  int tmp ;

  {
  {
#line 289
  tmp = gfp_zonelist(flags);
  }
#line 289
  return ((struct zonelist *)(& (node_data[nid])->node_zonelists) + (unsigned long )tmp);
}
}
#line 300
extern struct page *__alloc_pages_nodemask(gfp_t  , unsigned int  , struct zonelist * ,
                                           nodemask_t * ) ;
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask , unsigned int order , struct zonelist *zonelist ) 
{ 
  struct page *tmp ;

  {
  {
#line 307
  tmp = __alloc_pages_nodemask(gfp_mask, order, zonelist, (nodemask_t *)0);
  }
#line 307
  return (tmp);
}
}
#line 310 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid , gfp_t gfp_mask , unsigned int order ) 
{ 
  struct zonelist *tmp ;
  struct page *tmp___0 ;

  {
#line 314
  if (nid < 0) {
    {
#line 315
    nid = numa_node_id();
    }
  } else {

  }
  {
#line 317
  tmp = node_zonelist(nid, gfp_mask);
#line 317
  tmp___0 = __alloc_pages(gfp_mask, order, tmp);
  }
#line 317
  return (tmp___0);
}
}
#line 468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 1758 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 1978
extern int wake_up_process(struct task_struct * ) ;
#line 2024
extern int send_sig(int  , struct task_struct * , int  ) ;
#line 2588
extern void recalc_sigpending(void) ;
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
extern void *__kmalloc_node(size_t  , gfp_t  , int  ) ;
#line 195 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc_node(size_t size , gfp_t flags , int node ) 
{ 
  void *tmp___1 ;

  {
  {
#line 207
  tmp___1 = __kmalloc_node(size, flags, node);
  }
#line 207
  return (tmp___1);
}
}
#line 426 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) ;
#line 517
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 532 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kzalloc_node(size_t size , gfp_t flags , int node ) 
{ 
  void *tmp ;

  {
  {
#line 534
  tmp = kmalloc_node(size, flags | 32768U, node);
  }
#line 534
  return (tmp);
}
}
#line 464 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
static void ldv___module_get_11(struct module *ldv_func_arg1 ) ;
#line 474
static void ldv_module_put_12(struct module *ldv_func_arg1 ) ;
#line 8 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
void cache_clean_deferred(void *owner ) ;
#line 130 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcauth.h"
int svc_authenticate(struct svc_rqst *rqstp , __be32 *authp ) ;
#line 131
int svc_authorise(struct svc_rqst *rqstp ) ;
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
u32 svc_max_payload(struct svc_rqst  const  *rqstp ) ;
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static u32 svc_getnl(struct kvec *iov ) 
{ 
  __be32 val ;
  __be32 *vp ;
  __be32 *tmp ;
  __u32 tmp___0 ;

  {
  {
#line 179
  vp = (__be32 *)iov->iov_base;
#line 180
  tmp = vp;
#line 180
  vp = vp + 1;
#line 180
  val = *tmp;
#line 181
  iov->iov_base = (void *)vp;
#line 182
  iov->iov_len = iov->iov_len - 4UL;
#line 183
  tmp___0 = __fswab32(val);
  }
#line 183
  return (tmp___0);
}
}
#line 186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static void svc_putnl(struct kvec *iov , u32 val ) 
{ 
  __be32 *vp ;
  __u32 tmp ;

  {
  {
#line 188
  vp = (__be32 *)(iov->iov_base + iov->iov_len);
#line 189
  tmp = __fswab32(val);
#line 189
  *vp = tmp;
#line 190
  iov->iov_len = iov->iov_len + 4UL;
  }
#line 191
  return;
}
}
#line 193 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static __be32 svc_getu32(struct kvec *iov ) 
{ 
  __be32 val ;
  __be32 *vp ;
  __be32 *tmp ;

  {
#line 196
  vp = (__be32 *)iov->iov_base;
#line 197
  tmp = vp;
#line 197
  vp = vp + 1;
#line 197
  val = *tmp;
#line 198
  iov->iov_base = (void *)vp;
#line 199
  iov->iov_len = iov->iov_len - 4UL;
#line 200
  return (val);
}
}
#line 210 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static void svc_putu32(struct kvec *iov , __be32 val ) 
{ 
  __be32 *vp ;

  {
#line 212
  vp = (__be32 *)(iov->iov_base + iov->iov_len);
#line 213
  *vp = val;
#line 214
  iov->iov_len = iov->iov_len + 4UL;
#line 215
  return;
}
}
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static int xdr_ressize_check(struct svc_rqst *rqstp , __be32 *p ) 
{ 
  struct kvec *vec ;
  char *cp ;

  {
#line 333
  vec = (struct kvec *)(& rqstp->rq_res.head);
#line 334
  cp = (char *)p;
#line 336
  vec->iov_len = (size_t )((long )cp - (long )vec->iov_base);
#line 338
  return (vec->iov_len <= 4096UL);
}
}
#line 419
int svc_rpcb_setup(struct svc_serv *serv , struct net *net ) ;
#line 420
void svc_rpcb_cleanup(struct svc_serv *serv , struct net *net ) ;
#line 421
int svc_bind(struct svc_serv *serv , struct net *net ) ;
#line 422
struct svc_serv *svc_create(struct svc_program *prog , unsigned int bufsize , void (*shutdown)(struct svc_serv * ,
                                                                                               struct net * ) ) ;
#line 424
struct svc_rqst *svc_prepare_thread(struct svc_serv *serv , struct svc_pool *pool ,
                                    int node ) ;
#line 426
void svc_exit_thread(struct svc_rqst *rqstp ) ;
#line 427
struct svc_serv *svc_create_pooled(struct svc_program *prog , unsigned int bufsize ,
                                   void (*shutdown)(struct svc_serv * , struct net * ) ,
                                   int (*func)(void * ) , struct module *mod ) ;
#line 430
int svc_set_num_threads(struct svc_serv *serv , struct svc_pool *pool , int nrservs ) ;
#line 432
void svc_destroy(struct svc_serv *serv ) ;
#line 433
void svc_shutdown_net(struct svc_serv *serv , struct net *net ) ;
#line 434
int svc_process(struct svc_rqst *rqstp ) ;
#line 435
int bc_svc_process(struct svc_serv *serv , struct rpc_rqst *req , struct svc_rqst *rqstp ) ;
#line 437
int svc_register(struct svc_serv  const  *serv , struct net *net , int const   family ,
                 unsigned short const   proto , unsigned short const   port ) ;
#line 441
void svc_reserve(struct svc_rqst *rqstp , int space ) ;
#line 442
struct svc_pool *svc_pool_for_cpu(struct svc_serv *serv , int cpu ) ;
#line 443
char *svc_print_addr(struct svc_rqst *rqstp , char *buf , size_t len ) ;
#line 454 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static void svc_reserve_auth(struct svc_rqst *rqstp , int space ) 
{ 
  int added_space ;

  {
#line 456
  added_space = 0;
#line 458
  if ((rqstp->rq_authop)->flavour != 0) {
#line 459
    added_space = 400;
  } else {

  }
  {
#line 460
  svc_reserve(rqstp, space + added_space);
  }
#line 461
  return;
}
}
#line 119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
void svc_close_xprt(struct svc_xprt *xprt ) ;
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcsock.h"
void svc_close_net(struct svc_serv *serv , struct net *net ) ;
#line 56
int svc_send(struct svc_rqst *rqstp ) ;
#line 57
void svc_drop(struct svc_rqst *rqstp ) ;
#line 58
void svc_sock_update_bufs(struct svc_serv *serv ) ;
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/clnt.h"
int rpcb_create_local(struct net *net ) ;
#line 142
void rpcb_put_local(struct net *net ) ;
#line 143
int rpcb_register(struct net *net , u32 prog , u32 vers , int prot , unsigned short port ) ;
#line 144
int rpcb_v4_register(struct net *net , u32 const   program , u32 const   version ,
                     struct sockaddr  const  *address , char const   *netid ) ;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/bc_xprt.h"
int bc_send(struct rpc_rqst *req ) ;
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/bc_xprt.h"
__inline static int svc_is_backchannel(struct svc_rqst  const  *rqstp ) 
{ 


  {
#line 46
  if ((unsigned long )(rqstp->rq_server)->sv_bc_xprt != (unsigned long )((struct svc_xprt *)0)) {
#line 47
    return (1);
  } else {

  }
#line 48
  return (0);
}
}
#line 33 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static void svc_unregister(struct svc_serv  const  *serv , struct net *net ) ;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static struct svc_pool_map svc_pool_map  =    {0, 0, 0U, 0, 0};
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static struct mutex svc_pool_map_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "svc_pool_map_mutex.wait_lock",
                                                           0, 0UL}}}}, {& svc_pool_map_mutex.wait_list,
                                                                        & svc_pool_map_mutex.wait_list},
    0, 0, (void *)(& svc_pool_map_mutex), {0, {0, 0}, "svc_pool_map_mutex", 0, 0UL}};
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int svc_pool_map_choose_mode(void) 
{ 
  unsigned int node ;
  int tmp ;
  struct cpumask  const  *tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 129
  if (nr_online_nodes > 1) {
#line 134
    return (2);
  } else {

  }
  {
#line 137
  tmp = __first_node((nodemask_t const   *)((nodemask_t *)(& node_states) + 1UL));
#line 137
  node = (unsigned int )tmp;
#line 138
  tmp___0 = cpumask_of_node((int )node);
#line 138
  tmp___1 = cpumask_weight(tmp___0);
  }
#line 138
  if (tmp___1 > 2U) {
#line 145
    return (1);
  } else {

  }
#line 149
  return (0);
}
}
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int svc_pool_map_alloc_arrays(struct svc_pool_map *m , unsigned int maxpools ) 
{ 
  void *tmp ;
  void *tmp___0 ;

  {
  {
#line 159
  tmp = kcalloc((size_t )maxpools, 4UL, 208U);
#line 159
  m->to_pool = (unsigned int *)tmp;
  }
#line 160
  if ((unsigned long )m->to_pool == (unsigned long )((unsigned int *)0U)) {
#line 161
    goto fail;
  } else {

  }
  {
#line 162
  tmp___0 = kcalloc((size_t )maxpools, 4UL, 208U);
#line 162
  m->pool_to = (unsigned int *)tmp___0;
  }
#line 163
  if ((unsigned long )m->pool_to == (unsigned long )((unsigned int *)0U)) {
#line 164
    goto fail_free;
  } else {

  }
#line 166
  return (0);
  fail_free: 
  {
#line 169
  kfree((void const   *)m->to_pool);
#line 170
  m->to_pool = (unsigned int *)0U;
  }
  fail: ;
#line 172
  return (-12);
}
}
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int svc_pool_map_init_percpu(struct svc_pool_map *m ) 
{ 
  unsigned int maxpools ;
  unsigned int pidx ;
  unsigned int cpu ;
  int err ;
  long tmp ;

  {
  {
#line 182
  maxpools = (unsigned int )nr_cpu_ids;
#line 183
  pidx = 0U;
#line 187
  err = svc_pool_map_alloc_arrays(m, maxpools);
  }
#line 188
  if (err != 0) {
#line 189
    return (err);
  } else {

  }
#line 191
  cpu = 4294967295U;
#line 191
  goto ldv_46718;
  ldv_46717: 
  {
#line 192
  tmp = __builtin_expect(pidx > maxpools, 0L);
  }
#line 192
  if (tmp != 0L) {
    {
#line 192
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svc.c"),
                         "i" (192), "i" (12UL));
#line 192
    __builtin_unreachable();
    }
  } else {

  }
#line 193
  *(m->to_pool + (unsigned long )cpu) = pidx;
#line 194
  *(m->pool_to + (unsigned long )pidx) = cpu;
#line 195
  pidx = pidx + 1U;
  ldv_46718: 
  {
#line 191
  cpu = cpumask_next((int )cpu, cpu_online_mask);
  }
#line 191
  if (cpu < (unsigned int )nr_cpu_ids) {
#line 193
    goto ldv_46717;
  } else {

  }

#line 199
  return ((int )pidx);
}
}
#line 208 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int svc_pool_map_init_pernode(struct svc_pool_map *m ) 
{ 
  unsigned int maxpools ;
  unsigned int pidx ;
  unsigned int node ;
  int err ;
  int tmp ;
  long tmp___0 ;
  struct cpumask  const  *tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 210
  maxpools = (unsigned int )nr_node_ids;
#line 211
  pidx = 0U;
#line 215
  err = svc_pool_map_alloc_arrays(m, maxpools);
  }
#line 216
  if (err != 0) {
#line 217
    return (err);
  } else {

  }
  {
#line 219
  tmp = __first_node((nodemask_t const   *)((nodemask_t *)(& node_states) + 1UL));
#line 219
  node = (unsigned int )tmp;
  }
#line 219
  goto ldv_46728;
  ldv_46727: 
  {
#line 219
  tmp___1 = cpumask_of_node((int )node);
#line 219
  tmp___2 = cpumask_weight(tmp___1);
  }
#line 219
  if (tmp___2 != 0U) {
    {
#line 221
    tmp___0 = __builtin_expect(pidx > maxpools, 0L);
    }
#line 221
    if (tmp___0 != 0L) {
      {
#line 221
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svc.c"),
                           "i" (221), "i" (12UL));
#line 221
      __builtin_unreachable();
      }
    } else {

    }
#line 222
    *(m->to_pool + (unsigned long )node) = pidx;
#line 223
    *(m->pool_to + (unsigned long )pidx) = node;
#line 224
    pidx = pidx + 1U;
  } else {

  }
  {
#line 219
  tmp___3 = __next_node((int )node, (nodemask_t const   *)((nodemask_t *)(& node_states) + 1UL));
#line 219
  node = (unsigned int )tmp___3;
  }
  ldv_46728: ;
#line 219
  if (node <= 1023U) {
#line 221
    goto ldv_46727;
  } else {

  }

#line 228
  return ((int )pidx);
}
}
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static unsigned int svc_pool_map_get(void) 
{ 
  struct svc_pool_map *m ;
  int npools ;
  int tmp ;

  {
  {
#line 240
  m = & svc_pool_map;
#line 241
  npools = -1;
#line 243
  mutex_lock_nested(& svc_pool_map_mutex, 0U);
#line 245
  tmp = m->count;
#line 245
  m->count = m->count + 1;
  }
#line 245
  if (tmp != 0) {
    {
#line 246
    mutex_unlock(& svc_pool_map_mutex);
    }
#line 247
    return (m->npools);
  } else {

  }
#line 250
  if (m->mode == -1) {
    {
#line 251
    m->mode = svc_pool_map_choose_mode();
    }
  } else {

  }
  {
#line 254
  if (m->mode == 1) {
#line 254
    goto case_1;
  } else {

  }
#line 257
  if (m->mode == 2) {
#line 257
    goto case_2;
  } else {

  }
#line 253
  goto switch_break;
  case_1: /* CIL Label */ 
  {
#line 255
  npools = svc_pool_map_init_percpu(m);
  }
#line 256
  goto ldv_46736;
  case_2: /* CIL Label */ 
  {
#line 258
  npools = svc_pool_map_init_pernode(m);
  }
#line 259
  goto ldv_46736;
  switch_break: /* CIL Label */ ;
  }
  ldv_46736: ;
#line 262
  if (npools < 0) {
#line 264
    npools = 1;
#line 265
    m->mode = 0;
  } else {

  }
  {
#line 267
  m->npools = (unsigned int )npools;
#line 269
  mutex_unlock(& svc_pool_map_mutex);
  }
#line 270
  return (m->npools);
}
}
#line 282 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static void svc_pool_map_put(void) 
{ 
  struct svc_pool_map *m ;

  {
  {
#line 284
  m = & svc_pool_map;
#line 286
  mutex_lock_nested(& svc_pool_map_mutex, 0U);
#line 288
  m->count = m->count - 1;
  }
#line 288
  if (m->count == 0) {
    {
#line 289
    kfree((void const   *)m->to_pool);
#line 290
    m->to_pool = (unsigned int *)0U;
#line 291
    kfree((void const   *)m->pool_to);
#line 292
    m->pool_to = (unsigned int *)0U;
#line 293
    m->npools = 0U;
    }
  } else {

  }
  {
#line 296
  mutex_unlock(& svc_pool_map_mutex);
  }
#line 297
  return;
}
}
#line 300 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int svc_pool_map_get_node(unsigned int pidx ) 
{ 
  struct svc_pool_map  const  *m ;
  int tmp ;

  {
#line 302
  m = (struct svc_pool_map  const  *)(& svc_pool_map);
#line 304
  if ((int )m->count != 0) {
#line 305
    if ((int )m->mode == 1) {
      {
#line 306
      tmp = __cpu_to_node((int )*(m->pool_to + (unsigned long )pidx));
      }
#line 306
      return (tmp);
    } else {

    }
#line 307
    if ((int )m->mode == 2) {
#line 308
      return ((int )*(m->pool_to + (unsigned long )pidx));
    } else {

    }
  } else {

  }
#line 310
  return (-1);
}
}
#line 317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
__inline static void svc_pool_map_set_cpumask(struct task_struct *task , unsigned int pidx ) 
{ 
  struct svc_pool_map *m ;
  unsigned int node ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  struct cpumask  const  *tmp___2 ;
  struct cpumask  const  *tmp___3 ;

  {
  {
#line 319
  m = & svc_pool_map;
#line 320
  node = *(m->pool_to + (unsigned long )pidx);
#line 326
  __ret_warn_once = m->count == 0;
#line 326
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 326
  if (tmp___1 != 0L) {
    {
#line 326
    __ret_warn_on = ! __warned;
#line 326
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 326
    if (tmp != 0L) {
      {
#line 326
      warn_slowpath_null("net/sunrpc/svc.c", 326);
      }
    } else {

    }
    {
#line 326
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 326
    if (tmp___0 != 0L) {
#line 326
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 326
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 327
  if (m->count == 0) {
#line 328
    return;
  } else {

  }
  {
#line 331
  if (m->mode == 1) {
#line 331
    goto case_1;
  } else {

  }
#line 336
  if (m->mode == 2) {
#line 336
    goto case_2;
  } else {

  }
#line 330
  goto switch_break;
  case_1: /* CIL Label */ 
  {
#line 333
  tmp___2 = get_cpu_mask(node);
#line 333
  set_cpus_allowed_ptr(task, tmp___2);
  }
#line 334
  goto ldv_46758;
  case_2: /* CIL Label */ 
  {
#line 338
  tmp___3 = cpumask_of_node((int )node);
#line 338
  set_cpus_allowed_ptr(task, tmp___3);
  }
#line 339
  goto ldv_46758;
  switch_break: /* CIL Label */ ;
  }
  ldv_46758: ;
#line 343
  return;
}
}
#line 350 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
struct svc_pool *svc_pool_for_cpu(struct svc_serv *serv , int cpu ) 
{ 
  struct svc_pool_map *m ;
  unsigned int pidx ;
  int tmp ;

  {
#line 352
  m = & svc_pool_map;
#line 353
  pidx = 0U;
#line 360
  if ((unsigned long )serv->sv_function != (unsigned long )((int (*)(void * ))0)) {
    {
#line 362
    if (m->mode == 1) {
#line 362
      goto case_1;
    } else {

    }
#line 365
    if (m->mode == 2) {
#line 365
      goto case_2;
    } else {

    }
#line 361
    goto switch_break;
    case_1: /* CIL Label */ 
#line 363
    pidx = *(m->to_pool + (unsigned long )cpu);
#line 364
    goto ldv_46767;
    case_2: /* CIL Label */ 
    {
#line 366
    tmp = __cpu_to_node(cpu);
#line 366
    pidx = *(m->to_pool + (unsigned long )tmp);
    }
#line 367
    goto ldv_46767;
    switch_break: /* CIL Label */ ;
    }
    ldv_46767: ;
  } else {

  }
#line 370
  return (serv->sv_pools + (unsigned long )(pidx % serv->sv_nrpools));
}
}
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
int svc_rpcb_setup(struct svc_serv *serv , struct net *net ) 
{ 
  int err ;

  {
  {
#line 377
  err = rpcb_create_local(net);
  }
#line 378
  if (err != 0) {
#line 379
    return (err);
  } else {

  }
  {
#line 382
  svc_unregister((struct svc_serv  const  *)serv, net);
  }
#line 383
  return (0);
}
}
#line 387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
void svc_rpcb_cleanup(struct svc_serv *serv , struct net *net ) 
{ 


  {
  {
#line 389
  svc_unregister((struct svc_serv  const  *)serv, net);
#line 390
  rpcb_put_local(net);
  }
#line 391
  return;
}
}
#line 394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int svc_uses_rpcbind(struct svc_serv *serv ) 
{ 
  struct svc_program *progp ;
  unsigned int i ;

  {
#line 399
  progp = serv->sv_program;
#line 399
  goto ldv_46802;
  ldv_46801: 
#line 400
  i = 0U;
#line 400
  goto ldv_46799;
  ldv_46798: ;
#line 401
  if ((unsigned long )*(progp->pg_vers + (unsigned long )i) == (unsigned long )((struct svc_version *)0)) {
#line 402
    goto ldv_46797;
  } else {

  }
#line 403
  if ((unsigned int )*((unsigned char *)*(progp->pg_vers + (unsigned long )i) + 20UL) == 0U) {
#line 404
    return (1);
  } else {

  }
  ldv_46797: 
#line 400
  i = i + 1U;
  ldv_46799: ;
#line 400
  if (i < progp->pg_nvers) {
#line 402
    goto ldv_46798;
  } else {

  }
#line 399
  progp = progp->pg_next;
  ldv_46802: ;
#line 399
  if ((unsigned long )progp != (unsigned long )((struct svc_program *)0)) {
#line 401
    goto ldv_46801;
  } else {

  }

#line 408
  return (0);
}
}
#line 411 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
int svc_bind(struct svc_serv *serv , struct net *net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 413
  tmp = svc_uses_rpcbind(serv);
  }
#line 413
  if (tmp == 0) {
#line 414
    return (0);
  } else {

  }
  {
#line 415
  tmp___0 = svc_rpcb_setup(serv, net);
  }
#line 415
  return (tmp___0);
}
}
#line 423 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static struct svc_serv *__svc_create(struct svc_program *prog , unsigned int bufsize ,
                                     int npools , void (*shutdown)(struct svc_serv * ,
                                                                   struct net * ) ) 
{ 
  struct svc_serv *serv ;
  unsigned int vers ;
  unsigned int xdrsize ;
  unsigned int i ;
  void *tmp ;
  unsigned long __y ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  void *tmp___0 ;
  struct svc_pool *pool ;
  long tmp___1 ;
  struct lock_class_key __key___1 ;
  int tmp___2 ;

  {
  {
#line 431
  tmp = kzalloc(512UL, 208U);
#line 431
  serv = (struct svc_serv *)tmp;
  }
#line 431
  if ((unsigned long )serv == (unsigned long )((struct svc_serv *)0)) {
#line 432
    return ((struct svc_serv *)0);
  } else {

  }
#line 433
  serv->sv_name = prog->pg_name;
#line 434
  serv->sv_program = prog;
#line 435
  serv->sv_nrthreads = 1U;
#line 436
  serv->sv_stats = prog->pg_stats;
#line 437
  if (bufsize > 1048576U) {
#line 438
    bufsize = 1048576U;
  } else {

  }
#line 439
  serv->sv_max_payload = bufsize != 0U ? bufsize : 4096U;
#line 440
  __y = 4096UL;
#line 440
  serv->sv_max_mesg = (unsigned int )((((unsigned long )serv->sv_max_payload + 8191UL) / 4096UL) * 4096UL);
#line 441
  serv->sv_shutdown = shutdown;
#line 442
  xdrsize = 0U;
#line 443
  goto ldv_46833;
  ldv_46832: 
#line 444
  prog->pg_lovers = prog->pg_nvers - 1U;
#line 445
  vers = 0U;
#line 445
  goto ldv_46830;
  ldv_46829: ;
#line 446
  if ((unsigned long )*(prog->pg_vers + (unsigned long )vers) != (unsigned long )((struct svc_version *)0)) {
#line 447
    prog->pg_hivers = vers;
#line 448
    if (prog->pg_lovers > vers) {
#line 449
      prog->pg_lovers = vers;
    } else {

    }
#line 450
    if ((*(prog->pg_vers + (unsigned long )vers))->vs_xdrsize > xdrsize) {
#line 451
      xdrsize = (*(prog->pg_vers + (unsigned long )vers))->vs_xdrsize;
    } else {

    }
  } else {

  }
#line 445
  vers = vers + 1U;
  ldv_46830: ;
#line 445
  if (vers < prog->pg_nvers) {
#line 447
    goto ldv_46829;
  } else {

  }
#line 453
  prog = prog->pg_next;
  ldv_46833: ;
#line 443
  if ((unsigned long )prog != (unsigned long )((struct svc_program *)0)) {
#line 445
    goto ldv_46832;
  } else {

  }
  {
#line 455
  serv->sv_xdrsize = xdrsize;
#line 456
  INIT_LIST_HEAD(& serv->sv_tempsocks);
#line 457
  INIT_LIST_HEAD(& serv->sv_permsocks);
#line 458
  init_timer_key(& serv->sv_temptimer, 0U, "(&serv->sv_temptimer)", & __key);
#line 459
  spinlock_check(& serv->sv_lock);
#line 459
  __raw_spin_lock_init(& serv->sv_lock.__annonCompField20.rlock, "&(&serv->sv_lock)->rlock",
                       & __key___0);
#line 461
  serv->sv_nrpools = (unsigned int )npools;
#line 462
  tmp___0 = kcalloc((size_t )serv->sv_nrpools, 192UL, 208U);
#line 462
  serv->sv_pools = (struct svc_pool *)tmp___0;
  }
#line 465
  if ((unsigned long )serv->sv_pools == (unsigned long )((struct svc_pool *)0)) {
    {
#line 466
    kfree((void const   *)serv);
    }
#line 467
    return ((struct svc_serv *)0);
  } else {

  }
#line 470
  i = 0U;
#line 470
  goto ldv_46840;
  ldv_46839: 
  {
#line 471
  pool = serv->sv_pools + (unsigned long )i;
#line 473
  tmp___1 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 473
  if (tmp___1 != 0L) {
    {
#line 473
    printk("\001dsvc: initialising pool %u for %s\n", i, serv->sv_name);
    }
  } else {

  }
  {
#line 476
  pool->sp_id = i;
#line 477
  INIT_LIST_HEAD(& pool->sp_threads);
#line 478
  INIT_LIST_HEAD(& pool->sp_sockets);
#line 479
  INIT_LIST_HEAD(& pool->sp_all_threads);
#line 480
  spinlock_check(& pool->sp_lock);
#line 480
  __raw_spin_lock_init(& pool->sp_lock.__annonCompField20.rlock, "&(&pool->sp_lock)->rlock",
                       & __key___1);
#line 470
  i = i + 1U;
  }
  ldv_46840: ;
#line 470
  if (i < serv->sv_nrpools) {
#line 472
    goto ldv_46839;
  } else {

  }
  {
#line 483
  tmp___2 = svc_uses_rpcbind(serv);
  }
#line 483
  if (tmp___2 != 0 && (unsigned long )serv->sv_shutdown == (unsigned long )((void (*)(struct svc_serv * ,
                                                                                      struct net * ))0)) {
#line 484
    serv->sv_shutdown = & svc_rpcb_cleanup;
  } else {

  }
#line 486
  return (serv);
}
}
#line 490 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
struct svc_serv *svc_create(struct svc_program *prog , unsigned int bufsize , void (*shutdown)(struct svc_serv * ,
                                                                                               struct net * ) ) 
{ 
  struct svc_serv *tmp ;

  {
  {
#line 493
  tmp = __svc_create(prog, bufsize, 1, shutdown);
  }
#line 493
  return (tmp);
}
}
#line 498 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
struct svc_serv *svc_create_pooled(struct svc_program *prog , unsigned int bufsize ,
                                   void (*shutdown)(struct svc_serv * , struct net * ) ,
                                   int (*func)(void * ) , struct module *mod ) 
{ 
  struct svc_serv *serv ;
  unsigned int npools ;
  unsigned int tmp ;

  {
  {
#line 503
  tmp = svc_pool_map_get();
#line 503
  npools = tmp;
#line 505
  serv = __svc_create(prog, bufsize, (int )npools, shutdown);
  }
#line 507
  if ((unsigned long )serv != (unsigned long )((struct svc_serv *)0)) {
#line 508
    serv->sv_function = func;
#line 509
    serv->sv_module = mod;
  } else {

  }
#line 512
  return (serv);
}
}
#line 516 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
void svc_shutdown_net(struct svc_serv *serv , struct net *net ) 
{ 


  {
  {
#line 518
  svc_close_net(serv, net);
  }
#line 520
  if ((unsigned long )serv->sv_shutdown != (unsigned long )((void (*)(struct svc_serv * ,
                                                                      struct net * ))0)) {
    {
#line 521
    (*(serv->sv_shutdown))(serv, net);
    }
  } else {

  }
#line 522
  return;
}
}
#line 530 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
void svc_destroy(struct svc_serv *serv ) 
{ 
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;

  {
  {
#line 532
  tmp = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 532
  if (tmp != 0L) {
    {
#line 532
    printk("\001dsvc: svc_destroy(%s, %d)\n", (serv->sv_program)->pg_name, serv->sv_nrthreads);
    }
  } else {

  }
#line 536
  if (serv->sv_nrthreads != 0U) {
#line 537
    serv->sv_nrthreads = serv->sv_nrthreads - 1U;
#line 537
    if (serv->sv_nrthreads != 0U) {
      {
#line 538
      svc_sock_update_bufs(serv);
      }
#line 539
      return;
    } else {

    }
  } else {
    {
#line 542
    printk("svc_destroy: no threads for serv=%p!\n", serv);
    }
  }
  {
#line 544
  ldv_del_timer_sync_10___0(& serv->sv_temptimer);
#line 550
  tmp___0 = list_empty((struct list_head  const  *)(& serv->sv_permsocks));
#line 550
  tmp___1 = __builtin_expect(tmp___0 == 0, 0L);
  }
#line 550
  if (tmp___1 != 0L) {
    {
#line 550
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svc.c"),
                         "i" (550), "i" (12UL));
#line 550
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 551
  tmp___2 = list_empty((struct list_head  const  *)(& serv->sv_tempsocks));
#line 551
  tmp___3 = __builtin_expect(tmp___2 == 0, 0L);
  }
#line 551
  if (tmp___3 != 0L) {
    {
#line 551
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svc.c"),
                         "i" (551), "i" (12UL));
#line 551
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 553
  cache_clean_deferred((void *)serv);
  }
#line 555
  if ((unsigned long )serv->sv_function != (unsigned long )((int (*)(void * ))0)) {
    {
#line 556
    svc_pool_map_put();
    }
  } else {

  }
  {
#line 558
  kfree((void const   *)serv->sv_pools);
#line 559
  kfree((void const   *)serv);
  }
#line 560
  return;
}
}
#line 568 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int svc_init_buffer(struct svc_rqst *rqstp , unsigned int size , int node ) 
{ 
  unsigned int pages ;
  unsigned int arghi ;
  int tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  struct page *p ;
  struct page *tmp___3 ;
  unsigned int tmp___4 ;

  {
  {
#line 573
  tmp = svc_is_backchannel((struct svc_rqst  const  *)rqstp);
  }
#line 573
  if (tmp != 0) {
#line 574
    return (1);
  } else {

  }
  {
#line 576
  pages = size / 4096U + 1U;
#line 579
  arghi = 0U;
#line 580
  __ret_warn_once = pages > 259U;
#line 580
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 580
  if (tmp___2 != 0L) {
    {
#line 580
    __ret_warn_on = ! __warned;
#line 580
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 580
    if (tmp___0 != 0L) {
      {
#line 580
      warn_slowpath_null("net/sunrpc/svc.c", 580);
      }
    } else {

    }
    {
#line 580
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 580
    if (tmp___1 != 0L) {
#line 580
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 580
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 581
  if (pages > 259U) {
#line 582
    pages = 259U;
  } else {

  }
#line 583
  goto ldv_46913;
  ldv_46912: 
  {
#line 584
  tmp___3 = alloc_pages_node(node, 208U, 0U);
#line 584
  p = tmp___3;
  }
#line 585
  if ((unsigned long )p == (unsigned long )((struct page *)0)) {
#line 586
    goto ldv_46911;
  } else {

  }
#line 587
  tmp___4 = arghi;
#line 587
  arghi = arghi + 1U;
#line 587
  rqstp->rq_pages[tmp___4] = p;
#line 588
  pages = pages - 1U;
  ldv_46913: ;
#line 583
  if (pages != 0U) {
#line 585
    goto ldv_46912;
  } else {

  }
  ldv_46911: ;
#line 590
  return (pages == 0U);
}
}
#line 597 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static void svc_release_buffer(struct svc_rqst *rqstp ) 
{ 
  unsigned int i ;

  {
#line 601
  i = 0U;
#line 601
  goto ldv_46921;
  ldv_46920: ;
#line 602
  if ((unsigned long )rqstp->rq_pages[i] != (unsigned long )((struct page *)0)) {
    {
#line 603
    put_page(rqstp->rq_pages[i]);
    }
  } else {

  }
#line 601
  i = i + 1U;
  ldv_46921: ;
#line 601
  if (i <= 258U) {
#line 603
    goto ldv_46920;
  } else {

  }

#line 608
  return;
}
}
#line 607 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
struct svc_rqst *svc_prepare_thread(struct svc_serv *serv , struct svc_pool *pool ,
                                    int node ) 
{ 
  struct svc_rqst *rqstp ;
  void *tmp ;
  struct lock_class_key __key ;
  int tmp___0 ;
  void *tmp___1 ;

  {
  {
#line 611
  tmp = kzalloc_node(6992UL, 208U, node);
#line 611
  rqstp = (struct svc_rqst *)tmp;
  }
#line 612
  if ((unsigned long )rqstp == (unsigned long )((struct svc_rqst *)0)) {
#line 613
    goto out_enomem;
  } else {

  }
  {
#line 615
  __init_waitqueue_head(& rqstp->rq_wait, "&rqstp->rq_wait", & __key);
#line 617
  serv->sv_nrthreads = serv->sv_nrthreads + 1U;
#line 618
  spin_lock_bh(& pool->sp_lock);
#line 619
  pool->sp_nrthreads = pool->sp_nrthreads + 1U;
#line 620
  list_add(& rqstp->rq_all, & pool->sp_all_threads);
#line 621
  spin_unlock_bh(& pool->sp_lock);
#line 622
  rqstp->rq_server = serv;
#line 623
  rqstp->rq_pool = pool;
#line 625
  rqstp->rq_argp = kmalloc_node((size_t )serv->sv_xdrsize, 208U, node);
  }
#line 626
  if ((unsigned long )rqstp->rq_argp == (unsigned long )((void *)0)) {
#line 627
    goto out_thread;
  } else {

  }
  {
#line 629
  rqstp->rq_resp = kmalloc_node((size_t )serv->sv_xdrsize, 208U, node);
  }
#line 630
  if ((unsigned long )rqstp->rq_resp == (unsigned long )((void *)0)) {
#line 631
    goto out_thread;
  } else {

  }
  {
#line 633
  tmp___0 = svc_init_buffer(rqstp, serv->sv_max_mesg, node);
  }
#line 633
  if (tmp___0 == 0) {
#line 634
    goto out_thread;
  } else {

  }
#line 636
  return (rqstp);
  out_thread: 
  {
#line 638
  svc_exit_thread(rqstp);
  }
  out_enomem: 
  {
#line 640
  tmp___1 = ERR_PTR(-12L);
  }
#line 640
  return ((struct svc_rqst *)tmp___1);
}
}
#line 648 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
__inline static struct svc_pool *choose_pool(struct svc_serv *serv , struct svc_pool *pool ,
                                             unsigned int *state ) 
{ 
  unsigned int tmp ;

  {
#line 650
  if ((unsigned long )pool != (unsigned long )((struct svc_pool *)0)) {
#line 651
    return (pool);
  } else {

  }
#line 653
  tmp = *state;
#line 653
  *state = *state + 1U;
#line 653
  return (serv->sv_pools + (unsigned long )(tmp % serv->sv_nrpools));
}
}
#line 660 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
__inline static struct task_struct *choose_victim(struct svc_serv *serv , struct svc_pool *pool ,
                                                  unsigned int *state ) 
{ 
  unsigned int i ;
  struct task_struct *task ;
  int tmp ;
  struct svc_rqst *rqstp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;

  {
#line 663
  task = (struct task_struct *)0;
#line 665
  if ((unsigned long )pool != (unsigned long )((struct svc_pool *)0)) {
    {
#line 666
    spin_lock_bh(& pool->sp_lock);
    }
  } else {
#line 669
    i = 0U;
#line 669
    goto ldv_46954;
    ldv_46953: 
    {
#line 670
    *state = *state - 1U;
#line 670
    pool = serv->sv_pools + (unsigned long )(*state % serv->sv_nrpools);
#line 671
    spin_lock_bh(& pool->sp_lock);
#line 672
    tmp = list_empty((struct list_head  const  *)(& pool->sp_all_threads));
    }
#line 672
    if (tmp == 0) {
#line 673
      goto found_pool;
    } else {

    }
    {
#line 674
    spin_unlock_bh(& pool->sp_lock);
#line 669
    i = i + 1U;
    }
    ldv_46954: ;
#line 669
    if (i < serv->sv_nrpools) {
#line 671
      goto ldv_46953;
    } else {

    }

#line 676
    return ((struct task_struct *)0);
  }
  found_pool: 
  {
#line 680
  tmp___0 = list_empty((struct list_head  const  *)(& pool->sp_all_threads));
  }
#line 680
  if (tmp___0 == 0) {
    {
#line 687
    __mptr = (struct list_head  const  *)pool->sp_all_threads.next;
#line 687
    rqstp = (struct svc_rqst *)((char *)__mptr + 0xfffffffffffffff0UL);
#line 688
    list_del_init(& rqstp->rq_all);
#line 689
    task = rqstp->rq_task;
    }
  } else {

  }
  {
#line 691
  spin_unlock_bh(& pool->sp_lock);
  }
#line 693
  return (task);
}
}
#line 711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
int svc_set_num_threads(struct svc_serv *serv , struct svc_pool *pool , int nrservs ) 
{ 
  struct svc_rqst *rqstp ;
  struct task_struct *task ;
  struct svc_pool *chosen_pool ;
  int error ;
  unsigned int state ;
  int node ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 716
  error = 0;
#line 717
  state = serv->sv_nrthreads - 1U;
#line 720
  if ((unsigned long )pool == (unsigned long )((struct svc_pool *)0)) {
#line 722
    nrservs = (int )(((unsigned int )nrservs - serv->sv_nrthreads) + 1U);
  } else {
    {
#line 724
    spin_lock_bh(& pool->sp_lock);
#line 725
    nrservs = (int )((unsigned int )nrservs - pool->sp_nrthreads);
#line 726
    spin_unlock_bh(& pool->sp_lock);
    }
  }
#line 730
  goto ldv_46972;
  ldv_46971: 
  {
#line 731
  nrservs = nrservs - 1;
#line 732
  chosen_pool = choose_pool(serv, pool, & state);
#line 734
  node = svc_pool_map_get_node(chosen_pool->sp_id);
#line 735
  rqstp = svc_prepare_thread(serv, chosen_pool, node);
#line 736
  tmp___0 = IS_ERR((void const   *)rqstp);
  }
#line 736
  if (tmp___0 != 0L) {
    {
#line 737
    tmp = PTR_ERR((void const   *)rqstp);
#line 737
    error = (int )tmp;
    }
#line 738
    goto ldv_46970;
  } else {

  }
  {
#line 741
  ldv___module_get_11(serv->sv_module);
#line 742
  task = kthread_create_on_node(serv->sv_function, (void *)rqstp, node, (char const   *)serv->sv_name);
#line 744
  tmp___2 = IS_ERR((void const   *)task);
  }
#line 744
  if (tmp___2 != 0L) {
    {
#line 745
    tmp___1 = PTR_ERR((void const   *)task);
#line 745
    error = (int )tmp___1;
#line 746
    ldv_module_put_12(serv->sv_module);
#line 747
    svc_exit_thread(rqstp);
    }
#line 748
    goto ldv_46970;
  } else {

  }
#line 751
  rqstp->rq_task = task;
#line 752
  if (serv->sv_nrpools > 1U) {
    {
#line 753
    svc_pool_map_set_cpumask(task, chosen_pool->sp_id);
    }
  } else {

  }
  {
#line 755
  svc_sock_update_bufs(serv);
#line 756
  wake_up_process(task);
  }
  ldv_46972: ;
#line 730
  if (nrservs > 0) {
#line 732
    goto ldv_46971;
  } else {

  }
  ldv_46970: ;
#line 759
  goto ldv_46974;
  ldv_46973: 
  {
#line 761
  send_sig(2, task, 1);
#line 762
  nrservs = nrservs + 1;
  }
  ldv_46974: ;
#line 759
  if (nrservs < 0) {
    {
#line 759
    task = choose_victim(serv, pool, & state);
    }
#line 759
    if ((unsigned long )task != (unsigned long )((struct task_struct *)0)) {
#line 762
      goto ldv_46973;
    } else {
#line 765
      goto ldv_46975;
    }
  } else {

  }
  ldv_46975: ;
#line 765
  return (error);
}
}
#line 774 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
void svc_exit_thread(struct svc_rqst *rqstp ) 
{ 
  struct svc_serv *serv ;
  struct svc_pool *pool ;

  {
  {
#line 776
  serv = rqstp->rq_server;
#line 777
  pool = rqstp->rq_pool;
#line 779
  svc_release_buffer(rqstp);
#line 780
  kfree((void const   *)rqstp->rq_resp);
#line 781
  kfree((void const   *)rqstp->rq_argp);
#line 782
  kfree((void const   *)rqstp->rq_auth_data);
#line 784
  spin_lock_bh(& pool->sp_lock);
#line 785
  pool->sp_nrthreads = pool->sp_nrthreads - 1U;
#line 786
  list_del(& rqstp->rq_all);
#line 787
  spin_unlock_bh(& pool->sp_lock);
#line 789
  kfree((void const   *)rqstp);
  }
#line 792
  if ((unsigned long )serv != (unsigned long )((struct svc_serv *)0)) {
    {
#line 793
    svc_destroy(serv);
    }
  } else {

  }
#line 794
  return;
}
}
#line 807 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int __svc_rpcb_register4(struct net *net , u32 const   program , u32 const   version ,
                                unsigned short const   protocol , unsigned short const   port ) 
{ 
  struct sockaddr_in sin ;
  __u16 tmp ;
  char const   *netid ;
  int error ;

  {
  {
#line 812
  tmp = __fswab16((int )port);
#line 812
  sin.sin_family = 2U;
#line 812
  sin.sin_port = tmp;
#line 812
  sin.sin_addr.s_addr = 0U;
#line 812
  sin.__pad[0] = (unsigned char)0;
#line 812
  sin.__pad[1] = (unsigned char)0;
#line 812
  sin.__pad[2] = (unsigned char)0;
#line 812
  sin.__pad[3] = (unsigned char)0;
#line 812
  sin.__pad[4] = (unsigned char)0;
#line 812
  sin.__pad[5] = (unsigned char)0;
#line 812
  sin.__pad[6] = (unsigned char)0;
#line 812
  sin.__pad[7] = (unsigned char)0;
  }
  {
#line 821
  if ((int )protocol == 17) {
#line 821
    goto case_17;
  } else {

  }
#line 824
  if ((int )protocol == 6) {
#line 824
    goto case_6;
  } else {

  }
#line 827
  goto switch_default;
  case_17: /* CIL Label */ 
#line 822
  netid = "udp";
#line 823
  goto ldv_47006;
  case_6: /* CIL Label */ 
#line 825
  netid = "tcp";
#line 826
  goto ldv_47006;
  switch_default: /* CIL Label */ ;
#line 828
  return (-92);
  switch_break: /* CIL Label */ ;
  }
  ldv_47006: 
  {
#line 831
  error = rpcb_v4_register(net, program, version, (struct sockaddr  const  *)(& sin),
                           netid);
  }
#line 838
  if (error == -93) {
    {
#line 839
    error = rpcb_register(net, program, version, (int )protocol, (int )port);
    }
  } else {

  }
#line 841
  return (error);
}
}
#line 855 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int __svc_rpcb_register6(struct net *net , u32 const   program , u32 const   version ,
                                unsigned short const   protocol , unsigned short const   port ) 
{ 
  struct sockaddr_in6 sin6 ;
  __u16 tmp ;
  char const   *netid ;
  int error ;

  {
  {
#line 860
  tmp = __fswab16((int )port);
#line 860
  sin6.sin6_family = 10U;
#line 860
  sin6.sin6_port = tmp;
#line 860
  sin6.sin6_flowinfo = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[0] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[1] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[2] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[3] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[4] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[5] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[6] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[7] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[8] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[9] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[10] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[11] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[12] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[13] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[14] = 0U;
#line 860
  sin6.sin6_addr.in6_u.u6_addr8[15] = 0U;
#line 860
  sin6.sin6_scope_id = 0U;
  }
  {
#line 869
  if ((int )protocol == 17) {
#line 869
    goto case_17;
  } else {

  }
#line 872
  if ((int )protocol == 6) {
#line 872
    goto case_6;
  } else {

  }
#line 875
  goto switch_default;
  case_17: /* CIL Label */ 
#line 870
  netid = "udp6";
#line 871
  goto ldv_47020;
  case_6: /* CIL Label */ 
#line 873
  netid = "tcp6";
#line 874
  goto ldv_47020;
  switch_default: /* CIL Label */ ;
#line 876
  return (-92);
  switch_break: /* CIL Label */ ;
  }
  ldv_47020: 
  {
#line 879
  error = rpcb_v4_register(net, program, version, (struct sockaddr  const  *)(& sin6),
                           netid);
  }
#line 886
  if (error == -93) {
#line 887
    error = -97;
  } else {

  }
#line 889
  return (error);
}
}
#line 899 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int __svc_register(struct net *net , char const   *progname , u32 const   program ,
                          u32 const   version , int const   family , unsigned short const   protocol ,
                          unsigned short const   port ) 
{ 
  int error ;

  {
#line 905
  error = -97;
  {
#line 908
  if (family == 2) {
#line 908
    goto case_2;
  } else {

  }
#line 913
  if (family == 10) {
#line 913
    goto case_10;
  } else {

  }
#line 907
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 909
  error = __svc_rpcb_register4(net, program, version, (int )protocol, (int )port);
  }
#line 911
  goto ldv_47034;
  case_10: /* CIL Label */ 
  {
#line 914
  error = __svc_rpcb_register6(net, program, version, (int )protocol, (int )port);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_47034: ;
#line 919
  if (error < 0) {
    {
#line 920
    printk("\fsvc: failed to register %sv%u RPC service (errno %d).\n", progname,
           version, - error);
    }
  } else {

  }
#line 922
  return (error);
}
}
#line 935 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
int svc_register(struct svc_serv  const  *serv , struct net *net , int const   family ,
                 unsigned short const   proto , unsigned short const   port ) 
{ 
  struct svc_program *progp ;
  unsigned int i ;
  int error ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 941
  error = 0;
#line 943
  __ret_warn_once = (unsigned int )((int )((unsigned short )proto) | (int )((unsigned short )port)) == 0U;
#line 943
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 943
  if (tmp___1 != 0L) {
    {
#line 943
    __ret_warn_on = ! __warned;
#line 943
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 943
    if (tmp != 0L) {
      {
#line 943
      warn_slowpath_null("net/sunrpc/svc.c", 943);
      }
    } else {

    }
    {
#line 943
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 943
    if (tmp___0 != 0L) {
#line 943
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 943
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 944
  if ((unsigned int )((int )((unsigned short )proto) | (int )((unsigned short )port)) == 0U) {
#line 945
    return (-22);
  } else {

  }
#line 947
  progp = serv->sv_program;
#line 947
  goto ldv_47056;
  ldv_47055: 
#line 948
  i = 0U;
#line 948
  goto ldv_47054;
  ldv_47053: ;
#line 949
  if ((unsigned long )*(progp->pg_vers + (unsigned long )i) == (unsigned long )((struct svc_version *)0)) {
#line 950
    goto ldv_47051;
  } else {

  }
  {
#line 952
  tmp___2 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 952
  if (tmp___2 != 0L) {
    {
#line 952
    printk("\001dsvc: svc_register(%sv%d, %s, %u, %u)%s\n", progp->pg_name, i, (unsigned int )((unsigned short )proto) == 17U ? (char *)"udp" : (char *)"tcp",
           (int )port, family, (unsigned int )*((unsigned char *)*(progp->pg_vers + (unsigned long )i) + 20UL) != 0U ? (char *)" (but not telling portmap)" : (char *)"");
    }
  } else {

  }
#line 961
  if ((unsigned int )*((unsigned char *)*(progp->pg_vers + (unsigned long )i) + 20UL) != 0U) {
#line 962
    goto ldv_47051;
  } else {

  }
  {
#line 964
  error = __svc_register(net, (char const   *)progp->pg_name, progp->pg_prog, i, family,
                         (int )proto, (int )port);
  }
#line 966
  if (error < 0) {
#line 967
    goto ldv_47052;
  } else {

  }
  ldv_47051: 
#line 948
  i = i + 1U;
  ldv_47054: ;
#line 948
  if (i < progp->pg_nvers) {
#line 950
    goto ldv_47053;
  } else {

  }
  ldv_47052: 
#line 947
  progp = progp->pg_next;
  ldv_47056: ;
#line 947
  if ((unsigned long )progp != (unsigned long )((struct svc_program *)0)) {
#line 949
    goto ldv_47055;
  } else {

  }

#line 971
  return (error);
}
}
#line 981 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static void __svc_unregister(struct net *net , u32 const   program , u32 const   version ,
                             char const   *progname ) 
{ 
  int error ;
  long tmp ;

  {
  {
#line 986
  error = rpcb_v4_register(net, program, version, (struct sockaddr  const  *)0, "");
  }
#line 992
  if (error == -93) {
    {
#line 993
    error = rpcb_register(net, program, version, 0, 0);
    }
  } else {

  }
  {
#line 995
  tmp = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 995
  if (tmp != 0L) {
    {
#line 995
    printk("\001dsvc: %s(%sv%u), error %d\n", "__svc_unregister", progname, version,
           error);
    }
  } else {

  }
#line 996
  return;
}
}
#line 1007 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static void svc_unregister(struct svc_serv  const  *serv , struct net *net ) 
{ 
  struct svc_program *progp ;
  unsigned long flags ;
  unsigned int i ;
  struct thread_info *tmp ;
  long tmp___0 ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  struct task_struct *tmp___3 ;

  {
  {
#line 1013
  tmp = current_thread_info();
#line 1013
  clear_ti_thread_flag(tmp, 2);
#line 1015
  progp = serv->sv_program;
  }
#line 1015
  goto ldv_47078;
  ldv_47077: 
#line 1016
  i = 0U;
#line 1016
  goto ldv_47075;
  ldv_47074: ;
#line 1017
  if ((unsigned long )*(progp->pg_vers + (unsigned long )i) == (unsigned long )((struct svc_version *)0)) {
#line 1018
    goto ldv_47073;
  } else {

  }
#line 1019
  if ((unsigned int )*((unsigned char *)*(progp->pg_vers + (unsigned long )i) + 20UL) != 0U) {
#line 1020
    goto ldv_47073;
  } else {

  }
  {
#line 1022
  tmp___0 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 1022
  if (tmp___0 != 0L) {
    {
#line 1022
    printk("\001dsvc: attempting to unregister %sv%u\n", progp->pg_name, i);
    }
  } else {

  }
  {
#line 1024
  __svc_unregister(net, progp->pg_prog, i, (char const   *)progp->pg_name);
  }
  ldv_47073: 
#line 1016
  i = i + 1U;
  ldv_47075: ;
#line 1016
  if (i < progp->pg_nvers) {
#line 1018
    goto ldv_47074;
  } else {

  }
#line 1015
  progp = progp->pg_next;
  ldv_47078: ;
#line 1015
  if ((unsigned long )progp != (unsigned long )((struct svc_program *)0)) {
#line 1017
    goto ldv_47077;
  } else {

  }
  {
#line 1028
  tmp___1 = get_current();
#line 1028
  tmp___2 = spinlock_check(& (tmp___1->sighand)->siglock);
#line 1028
  flags = _raw_spin_lock_irqsave(tmp___2);
#line 1029
  recalc_sigpending();
#line 1030
  tmp___3 = get_current();
#line 1030
  spin_unlock_irqrestore(& (tmp___3->sighand)->siglock, flags);
  }
#line 1031
  return;
}
}
#line 1038 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static void svc_printk(struct svc_rqst *rqstp , char const   *fmt  , ...) 
{ 
  struct va_format vaf ;
  va_list args ;
  char buf[63U] ;
  char *tmp ;
  long tmp___0 ;

  {
  {
#line 1044
  __builtin_va_start((__va_list_tag *)(& args));
#line 1046
  vaf.fmt = fmt;
#line 1047
  vaf.va = & args;
#line 1049
  tmp___0 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 1049
  if (tmp___0 != 0L) {
    {
#line 1049
    tmp = svc_print_addr(rqstp, (char *)(& buf), 63UL);
#line 1049
    printk("\001dsvc: %s: %pV", tmp, & vaf);
    }
  } else {

  }
  {
#line 1051
  __builtin_va_end((__va_list_tag *)(& args));
  }
#line 1052
  return;
}
}
#line 1061 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
static int svc_process_common(struct svc_rqst *rqstp , struct kvec *argv , struct kvec *resv ) 
{ 
  struct svc_program *progp ;
  struct svc_version *versp ;
  struct svc_procedure *procp ;
  struct svc_serv *serv ;
  int (*xdr)(void * , __be32 * , void * ) ;
  __be32 *statp ;
  u32 prog ;
  u32 vers ;
  u32 proc ;
  __be32 auth_stat ;
  __be32 rpc_stat ;
  int auth_res ;
  __be32 *reply_statp ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  __u32 tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  long tmp___10 ;
  __u32 tmp___11 ;

  {
#line 1064
  versp = (struct svc_version *)0;
#line 1065
  procp = (struct svc_procedure *)0;
#line 1066
  serv = rqstp->rq_server;
#line 1074
  rpc_stat = 0U;
#line 1076
  if (argv->iov_len <= 23UL) {
#line 1077
    goto err_short_len;
  } else {

  }
  {
#line 1080
  rqstp->rq_splice_ok = 1;
#line 1082
  rqstp->rq_usedeferral = 1;
#line 1083
  rqstp->rq_dropme = 0;
#line 1086
  (*(((rqstp->rq_xprt)->xpt_ops)->xpo_prep_reply_hdr))(rqstp);
#line 1088
  svc_putu32(resv, rqstp->rq_xid);
#line 1090
  vers = svc_getnl(argv);
#line 1093
  svc_putnl(resv, 1U);
  }
#line 1095
  if (vers != 2U) {
#line 1096
    goto err_bad_rpc;
  } else {

  }
  {
#line 1099
  reply_statp = (__be32 *)(resv->iov_base + resv->iov_len);
#line 1101
  svc_putnl(resv, 0U);
#line 1103
  prog = svc_getnl(argv);
#line 1103
  rqstp->rq_prog = prog;
#line 1104
  vers = svc_getnl(argv);
#line 1104
  rqstp->rq_vers = vers;
#line 1105
  proc = svc_getnl(argv);
#line 1105
  rqstp->rq_proc = proc;
#line 1107
  progp = serv->sv_program;
#line 1109
  progp = serv->sv_program;
  }
#line 1109
  goto ldv_47112;
  ldv_47111: ;
#line 1110
  if (prog == progp->pg_prog) {
#line 1111
    goto ldv_47110;
  } else {

  }
#line 1109
  progp = progp->pg_next;
  ldv_47112: ;
#line 1109
  if ((unsigned long )progp != (unsigned long )((struct svc_program *)0)) {
#line 1111
    goto ldv_47111;
  } else {

  }
  ldv_47110: 
  {
#line 1118
  auth_res = svc_authenticate(rqstp, & auth_stat);
  }
#line 1120
  if (auth_res == 5 && (unsigned long )progp != (unsigned long )((struct svc_program *)0)) {
    {
#line 1121
    auth_stat = 16777216U;
#line 1122
    auth_res = (*(progp->pg_authenticate))(rqstp);
    }
  } else {

  }
  {
#line 1125
  if (auth_res == 5) {
#line 1125
    goto case_5;
  } else {

  }
#line 1127
  if (auth_res == 1) {
#line 1127
    goto case_1;
  } else {

  }
#line 1129
  if (auth_res == 2) {
#line 1129
    goto case_2;
  } else {

  }
#line 1132
  if (auth_res == 8) {
#line 1132
    goto case_8;
  } else {

  }
#line 1134
  if (auth_res == 7) {
#line 1134
    goto case_7;
  } else {

  }
#line 1137
  if (auth_res == 6) {
#line 1137
    goto case_6;
  } else {

  }
#line 1139
  if (auth_res == 10) {
#line 1139
    goto case_10;
  } else {

  }
#line 1124
  goto switch_break;
  case_5: /* CIL Label */ ;
#line 1126
  goto ldv_47114;
  case_1: /* CIL Label */ ;
#line 1128
  goto err_garbage;
  case_2: /* CIL Label */ 
#line 1130
  rpc_stat = 83886080U;
#line 1131
  goto err_bad;
  case_8: /* CIL Label */ ;
#line 1133
  goto err_bad_auth;
  case_7: /* CIL Label */ 
  {
#line 1135
  tmp = constant_test_bit(4U, (unsigned long const volatile   *)(& (rqstp->rq_xprt)->xpt_flags));
  }
#line 1135
  if (tmp != 0) {
    {
#line 1136
    svc_close_xprt(rqstp->rq_xprt);
    }
  } else {

  }
  case_6: /* CIL Label */ ;
#line 1138
  goto dropit;
  case_10: /* CIL Label */ ;
#line 1140
  goto sendit;
  switch_break: /* CIL Label */ ;
  }
  ldv_47114: ;
#line 1143
  if ((unsigned long )progp == (unsigned long )((struct svc_program *)0)) {
#line 1144
    goto err_bad_prog;
  } else {

  }
#line 1146
  if (vers >= progp->pg_nvers) {
#line 1148
    goto err_bad_vers;
  } else {
#line 1146
    versp = *(progp->pg_vers + (unsigned long )vers);
#line 1146
    if ((unsigned long )versp == (unsigned long )((struct svc_version *)0)) {
#line 1148
      goto err_bad_vers;
    } else {

    }
  }
#line 1150
  procp = versp->vs_proc + (unsigned long )proc;
#line 1151
  if (proc >= versp->vs_nproc || (unsigned long )procp->pc_func == (unsigned long )((__be32 (*)(struct svc_rqst * ,
                                                                                                void * ,
                                                                                                void * ))0)) {
#line 1152
    goto err_bad_proc;
  } else {

  }
  {
#line 1153
  rqstp->rq_procinfo = procp;
#line 1156
  (serv->sv_stats)->rpccnt = (serv->sv_stats)->rpccnt + 1U;
#line 1159
  statp = (__be32 *)(resv->iov_base + resv->iov_len);
#line 1160
  svc_putnl(resv, 0U);
#line 1163
  procp->pc_count = procp->pc_count + 1U;
#line 1166
  memset(rqstp->rq_argp, 0, (size_t )procp->pc_argsize);
#line 1167
  memset(rqstp->rq_resp, 0, (size_t )procp->pc_ressize);
  }
#line 1172
  if (procp->pc_xdrressize != 0U) {
    {
#line 1173
    svc_reserve_auth(rqstp, (int )(procp->pc_xdrressize << 2));
    }
  } else {

  }
#line 1176
  if ((unsigned long )versp->vs_dispatch == (unsigned long )((int (*)(struct svc_rqst * ,
                                                                      __be32 * ))0)) {
#line 1178
    xdr = procp->pc_decode;
#line 1179
    if ((unsigned long )xdr != (unsigned long )((int (*)(void * , __be32 * , void * ))0)) {
      {
#line 1179
      tmp___0 = (*xdr)((void *)rqstp, (__be32 *)argv->iov_base, rqstp->rq_argp);
      }
#line 1179
      if (tmp___0 == 0) {
#line 1180
        goto err_garbage;
      } else {

      }
    } else {

    }
    {
#line 1182
    *statp = (*(procp->pc_func))(rqstp, rqstp->rq_argp, rqstp->rq_resp);
    }
#line 1185
    if ((int )rqstp->rq_dropme) {
#line 1186
      if ((unsigned long )procp->pc_release != (unsigned long )((int (*)(void * ,
                                                                         __be32 * ,
                                                                         void * ))0)) {
        {
#line 1187
        (*(procp->pc_release))((void *)rqstp, (__be32 *)0U, rqstp->rq_resp);
        }
      } else {

      }
#line 1188
      goto dropit;
    } else {

    }
#line 1190
    if (*statp == 0U) {
#line 1190
      xdr = procp->pc_encode;
#line 1190
      if ((unsigned long )xdr != (unsigned long )((int (*)(void * , __be32 * , void * ))0)) {
        {
#line 1190
        tmp___2 = (*xdr)((void *)rqstp, (__be32 *)(resv->iov_base + resv->iov_len),
                         rqstp->rq_resp);
        }
#line 1190
        if (tmp___2 == 0) {
          {
#line 1193
          tmp___1 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
          }
#line 1193
          if (tmp___1 != 0L) {
            {
#line 1193
            printk("\001dsvc: failed to encode reply\n");
            }
          } else {

          }
#line 1195
          *statp = 83886080U;
        } else {

        }
      } else {

      }
    } else {

    }
  } else {
    {
#line 1198
    tmp___3 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
    }
#line 1198
    if (tmp___3 != 0L) {
      {
#line 1198
      printk("\001dsvc: calling dispatcher\n");
      }
    } else {

    }
    {
#line 1199
    tmp___4 = (*(versp->vs_dispatch))(rqstp, statp);
    }
#line 1199
    if (tmp___4 == 0) {
#line 1201
      if ((unsigned long )procp->pc_release != (unsigned long )((int (*)(void * ,
                                                                         __be32 * ,
                                                                         void * ))0)) {
        {
#line 1202
        (*(procp->pc_release))((void *)rqstp, (__be32 *)0U, rqstp->rq_resp);
        }
      } else {

      }
#line 1203
      goto dropit;
    } else {

    }
  }
#line 1208
  if (*statp != 0U) {
#line 1209
    resv->iov_len = (size_t )(((long )statp - (long )resv->iov_base) + 4L);
  } else {

  }
#line 1212
  if ((unsigned long )procp->pc_release != (unsigned long )((int (*)(void * , __be32 * ,
                                                                     void * ))0)) {
    {
#line 1213
    (*(procp->pc_release))((void *)rqstp, (__be32 *)0U, rqstp->rq_resp);
    }
  } else {

  }
#line 1215
  if ((unsigned long )procp->pc_encode == (unsigned long )((int (*)(void * , __be32 * ,
                                                                    void * ))0)) {
#line 1216
    goto dropit;
  } else {

  }
  sendit: 
  {
#line 1219
  tmp___5 = svc_authorise(rqstp);
  }
#line 1219
  if (tmp___5 != 0) {
#line 1220
    goto dropit;
  } else {

  }
#line 1221
  return (1);
  dropit: 
  {
#line 1224
  svc_authorise(rqstp);
#line 1225
  tmp___6 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 1225
  if (tmp___6 != 0L) {
    {
#line 1225
    printk("\001dsvc: svc_process dropit\n");
    }
  } else {

  }
#line 1226
  return (0);
  err_short_len: 
  {
#line 1229
  svc_printk(rqstp, "short len %Zd, dropping request\n", argv->iov_len);
  }
#line 1232
  goto dropit;
  err_bad_rpc: 
  {
#line 1235
  (serv->sv_stats)->rpcbadfmt = (serv->sv_stats)->rpcbadfmt + 1U;
#line 1236
  svc_putnl(resv, 1U);
#line 1237
  svc_putnl(resv, 0U);
#line 1238
  svc_putnl(resv, 2U);
#line 1239
  svc_putnl(resv, 2U);
  }
#line 1240
  goto sendit;
  err_bad_auth: 
  {
#line 1243
  tmp___8 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 1243
  if (tmp___8 != 0L) {
    {
#line 1243
    tmp___7 = __fswab32(auth_stat);
#line 1243
    printk("\001dsvc: authentication failed (%d)\n", tmp___7);
    }
  } else {

  }
  {
#line 1244
  (serv->sv_stats)->rpcbadauth = (serv->sv_stats)->rpcbadauth + 1U;
#line 1246
  xdr_ressize_check(rqstp, reply_statp);
#line 1247
  svc_putnl(resv, 1U);
#line 1248
  svc_putnl(resv, 1U);
#line 1249
  tmp___9 = __fswab32(auth_stat);
#line 1249
  svc_putnl(resv, tmp___9);
  }
#line 1250
  goto sendit;
  err_bad_prog: 
  {
#line 1253
  tmp___10 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 1253
  if (tmp___10 != 0L) {
    {
#line 1253
    printk("\001dsvc: unknown program %d\n", prog);
    }
  } else {

  }
  {
#line 1254
  (serv->sv_stats)->rpcbadfmt = (serv->sv_stats)->rpcbadfmt + 1U;
#line 1255
  svc_putnl(resv, 1U);
  }
#line 1256
  goto sendit;
  err_bad_vers: 
  {
#line 1259
  svc_printk(rqstp, "unknown version (%d for prog %d, %s)\n", vers, prog, progp->pg_name);
#line 1262
  (serv->sv_stats)->rpcbadfmt = (serv->sv_stats)->rpcbadfmt + 1U;
#line 1263
  svc_putnl(resv, 2U);
#line 1264
  svc_putnl(resv, progp->pg_lovers);
#line 1265
  svc_putnl(resv, progp->pg_hivers);
  }
#line 1266
  goto sendit;
  err_bad_proc: 
  {
#line 1269
  svc_printk(rqstp, "unknown procedure (%d)\n", proc);
#line 1271
  (serv->sv_stats)->rpcbadfmt = (serv->sv_stats)->rpcbadfmt + 1U;
#line 1272
  svc_putnl(resv, 3U);
  }
#line 1273
  goto sendit;
  err_garbage: 
  {
#line 1276
  svc_printk(rqstp, "failed to decode args\n");
#line 1278
  rpc_stat = 67108864U;
  }
  err_bad: 
  {
#line 1280
  (serv->sv_stats)->rpcbadfmt = (serv->sv_stats)->rpcbadfmt + 1U;
#line 1281
  tmp___11 = __fswab32(rpc_stat);
#line 1281
  svc_putnl(resv, tmp___11);
  }
#line 1282
  goto sendit;
}
}
#line 1290 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
int svc_process(struct svc_rqst *rqstp ) 
{ 
  struct kvec *argv ;
  struct kvec *resv ;
  struct svc_serv *serv ;
  u32 dir ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1292
  argv = (struct kvec *)(& rqstp->rq_arg.head);
#line 1293
  resv = (struct kvec *)(& rqstp->rq_res.head);
#line 1294
  serv = rqstp->rq_server;
#line 1301
  rqstp->rq_next_page = rqstp->rq_respages + 1UL;
#line 1302
  resv->iov_base = lowmem_page_address((struct page  const  *)*(rqstp->rq_respages));
#line 1303
  resv->iov_len = 0UL;
#line 1304
  rqstp->rq_res.pages = rqstp->rq_respages + 1UL;
#line 1305
  rqstp->rq_res.len = 0U;
#line 1306
  rqstp->rq_res.page_base = 0U;
#line 1307
  rqstp->rq_res.page_len = 0U;
#line 1308
  rqstp->rq_res.buflen = 4096U;
#line 1309
  rqstp->rq_res.tail[0].iov_base = (void *)0;
#line 1310
  rqstp->rq_res.tail[0].iov_len = 0UL;
#line 1312
  rqstp->rq_xid = svc_getu32(argv);
#line 1314
  dir = svc_getnl(argv);
  }
#line 1315
  if (dir != 0U) {
    {
#line 1317
    svc_printk(rqstp, "bad direction %d, dropping request\n", dir);
#line 1318
    (serv->sv_stats)->rpcbadfmt = (serv->sv_stats)->rpcbadfmt + 1U;
#line 1319
    svc_drop(rqstp);
    }
#line 1320
    return (0);
  } else {

  }
  {
#line 1324
  tmp___0 = svc_process_common(rqstp, argv, resv);
  }
#line 1324
  if (tmp___0 != 0) {
    {
#line 1325
    tmp = svc_send(rqstp);
    }
#line 1325
    return (tmp);
  } else {
    {
#line 1327
    svc_drop(rqstp);
    }
#line 1328
    return (0);
  }
}
}
#line 1338 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
int bc_svc_process(struct svc_serv *serv , struct rpc_rqst *req , struct svc_rqst *rqstp ) 
{ 
  struct kvec *argv ;
  struct kvec *resv ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1341
  argv = (struct kvec *)(& rqstp->rq_arg.head);
#line 1342
  resv = (struct kvec *)(& rqstp->rq_res.head);
#line 1345
  rqstp->rq_xprt = serv->sv_bc_xprt;
#line 1346
  rqstp->rq_xid = req->rq_xid;
#line 1347
  rqstp->rq_prot = (u32 )(req->rq_xprt)->prot;
#line 1348
  rqstp->rq_server = serv;
#line 1350
  rqstp->rq_addrlen = 128UL;
#line 1351
  memcpy((void *)(& rqstp->rq_addr), (void const   *)(& (req->rq_xprt)->addr), rqstp->rq_addrlen);
#line 1352
  memcpy((void *)(& rqstp->rq_arg), (void const   *)(& req->rq_rcv_buf), 64UL);
#line 1353
  memcpy((void *)(& rqstp->rq_res), (void const   *)(& req->rq_snd_buf), 64UL);
#line 1356
  resv->iov_len = 0UL;
  }
#line 1358
  if (rqstp->rq_prot != 6U) {
    {
#line 1359
    printk("\vNo support for Non-TCP transports!\n");
#line 1360
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svc.c"),
                         "i" (1360), "i" (12UL));
#line 1360
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 1367
  svc_getu32(argv);
#line 1368
  svc_getnl(argv);
#line 1371
  tmp___0 = svc_process_common(rqstp, argv, resv);
  }
#line 1371
  if (tmp___0 != 0) {
    {
#line 1372
    memcpy((void *)(& req->rq_snd_buf), (void const   *)(& rqstp->rq_res), 64UL);
#line 1374
    tmp = bc_send(req);
    }
#line 1374
    return (tmp);
  } else {
    {
#line 1377
    xprt_free_bc_request(req);
    }
#line 1378
    return (0);
  }
}
}
#line 1387 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc.c"
u32 svc_max_payload(struct svc_rqst  const  *rqstp ) 
{ 
  u32 max ;

  {
#line 1389
  max = ((rqstp->rq_xprt)->xpt_class)->xcl_max_payload;
#line 1391
  if ((rqstp->rq_server)->sv_max_payload < max) {
#line 1392
    max = (rqstp->rq_server)->sv_max_payload;
  } else {

  }
#line 1393
  return (max);
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc.c.aux"
static int ldv_del_timer_sync_10___0(struct timer_list *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 155
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  }
#line 155
  return (tmp);
}
}
#line 159 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc.c.aux"
static void ldv___module_get_11(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 162
  ldv_module_get(ldv_func_arg1);
  }
#line 163
  return;
}
}
#line 166 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc.c.aux"
static void ldv_module_put_12(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 169
  ldv_module_put(ldv_func_arg1);
  }
#line 170
  return;
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 4 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/bottom_half.h"
extern void local_bh_disable(void) ;
#line 6
extern void local_bh_enable(void) ;
#line 328 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/hrtimer.h"
extern ktime_t ktime_get_real(void) ;
#line 218 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/net.h"
extern int sock_sendmsg(struct socket * , struct msghdr * , size_t  ) ;
#line 223
extern struct socket *sockfd_lookup(int  , int * ) ;
#line 226
extern int net_ratelimit(void) ;
#line 256
extern int kernel_recvmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  , int  ) ;
#line 262
extern int kernel_listen(struct socket * , int  ) ;
#line 263
extern int kernel_accept(struct socket * , struct socket ** , int  ) ;
#line 269
extern int kernel_getpeername(struct socket * , struct sockaddr * , int * ) ;
#line 273
extern int kernel_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 275
extern int kernel_sendpage(struct socket * , struct page * , int  , size_t  , int  ) ;
#line 277
extern int kernel_sock_ioctl(struct socket * , int  , unsigned long  ) ;
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 1283 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff  const  *skb ) 
{ 


  {
#line 1285
  return ((unsigned int )skb->data_len != 0U);
}
}
#line 2464
extern void skb_free_datagram_locked(struct sock * , struct sk_buff * ) ;
#line 2659
extern __sum16 __skb_checksum_complete(struct sk_buff * ) ;
#line 2682 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/skbuff.h"
__inline static __sum16 skb_checksum_complete(struct sk_buff *skb ) 
{ 
  __sum16 tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 2684
  tmp___2 = skb_csum_unnecessary((struct sk_buff  const  *)skb);
  }
#line 2684
  if (tmp___2 == 0) {
    {
#line 2684
    tmp___0 = __skb_checksum_complete(skb);
#line 2684
    tmp___1 = tmp___0;
    }
  } else {
#line 2684
    tmp___1 = 0U;
  }
#line 2684
  return (tmp___1);
}
}
#line 468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
static bool ldv_try_module_get_10___0(struct module *ldv_func_arg1 ) ;
#line 474
static void ldv_module_put_11___0(struct module *ldv_func_arg1 ) ;
#line 1464 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
extern void lock_sock_nested(struct sock * , int  ) ;
#line 1466 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static void lock_sock(struct sock *sk ) 
{ 


  {
  {
#line 1468
  lock_sock_nested(sk, 0);
  }
#line 1469
  return;
}
}
#line 1471
extern void release_sock(struct sock * ) ;
#line 1684
extern void __compiletime_assert_1684(void) ;
#line 1682 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static wait_queue_head_t *sk_sleep(struct sock *sk ) 
{ 
  bool __cond ;
  struct socket_wq *_________p1 ;
  bool __warned ;
  int tmp ;

  {
#line 1684
  __cond = 0;
#line 1684
  if ((int )__cond) {
    {
#line 1684
    __compiletime_assert_1684();
    }
  } else {

  }
  {
#line 1685
  _________p1 = *((struct socket_wq * volatile  *)(& sk->sk_wq));
#line 1685
  tmp = debug_lockdep_rcu_enabled();
  }
#line 1685
  if (tmp != 0 && ! __warned) {
    {
#line 1685
    rcu_read_lock_held();
    }
  } else {

  }
#line 1685
  return (& _________p1->wait);
}
}
#line 2033 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/sock.h"
__inline static unsigned long sock_wspace(struct sock *sk ) 
{ 
  int amt ;
  int tmp ;

  {
#line 2035
  amt = 0;
#line 2037
  if (((int )sk->sk_shutdown & 2) == 0) {
    {
#line 2038
    tmp = atomic_read((atomic_t const   *)(& sk->sk_wmem_alloc));
#line 2038
    amt = sk->sk_sndbuf - tmp;
    }
#line 2039
    if (amt < 0) {
#line 2040
      amt = 0;
    } else {

    }
  } else {

  }
#line 2042
  return ((unsigned long )amt);
}
}
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/inet_sock.h"
__inline static struct inet_sock *inet_sk(struct sock  const  *sk ) 
{ 


  {
#line 185
  return ((struct inet_sock *)sk);
}
}
#line 14 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/file.h"
extern void fput(struct file * ) ;
#line 273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ipv6.h"
__inline static struct ipv6_pinfo *inet6_sk(struct sock  const  *__sk ) 
{ 
  struct inet_sock *tmp ;

  {
  {
#line 275
  tmp = inet_sk(__sk);
  }
#line 275
  return (tmp->pinet6);
}
}
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/skb.h"
extern struct tracepoint __tracepoint_kfree_skb ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/trace/events/skb.h"
__inline static void trace_kfree_skb(struct sk_buff *skb , void *location ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 14
  tmp___1 = static_key_false(& __tracepoint_kfree_skb.key);
  }
#line 14
  if ((int )tmp___1) {
    {
#line 14
    __rcu_read_lock();
#line 14
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kfree_skb.funcs));
#line 14
    tmp = debug_lockdep_rcu_enabled();
    }
#line 14
    if (tmp != 0 && ! __warned) {
      {
#line 14
      tmp___0 = rcu_read_lock_sched_held();
      }
#line 14
      if (tmp___0 == 0) {
        {
#line 14
        __warned = 1;
#line 14
        lockdep_rcu_suspicious("include/trace/events/skb.h", 34, "suspicious rcu_dereference_check() usage");
        }
      } else {

      }
    } else {

    }
#line 14
    it_func_ptr = _________p1;
#line 14
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_47799: 
      {
#line 14
      it_func = it_func_ptr->func;
#line 14
      __data = it_func_ptr->data;
#line 14
      (*((void (*)(void * , struct sk_buff * , void * ))it_func))(__data, skb, location);
#line 14
      it_func_ptr = it_func_ptr + 1;
      }
#line 14
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 16
        goto ldv_47799;
      } else {

      }

    } else {

    }
    {
#line 14
    __rcu_read_unlock();
    }
  } else {

  }
#line 16
  return;
}
}
#line 298 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static struct sockaddr *svc_addr(struct svc_rqst  const  *rqst ) 
{ 


  {
#line 300
  return ((struct sockaddr *)(& rqst->rq_addr));
}
}
#line 303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static struct sockaddr_in *svc_daddr_in(struct svc_rqst  const  *rqst ) 
{ 


  {
#line 305
  return ((struct sockaddr_in *)(& rqst->rq_daddr));
}
}
#line 308 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static struct sockaddr_in6 *svc_daddr_in6(struct svc_rqst  const  *rqst ) 
{ 


  {
#line 310
  return ((struct sockaddr_in6 *)(& rqst->rq_daddr));
}
}
#line 313 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static struct sockaddr *svc_daddr(struct svc_rqst  const  *rqst ) 
{ 


  {
#line 315
  return ((struct sockaddr *)(& rqst->rq_daddr));
}
}
#line 110 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
int svc_reg_xprt_class(struct svc_xprt_class *xcl ) ;
#line 111
void svc_unreg_xprt_class(struct svc_xprt_class *xcl ) ;
#line 112
void svc_xprt_init(struct net *net , struct svc_xprt_class *xcl , struct svc_xprt *xprt ,
                   struct svc_serv *serv ) ;
#line 116
void svc_xprt_enqueue(struct svc_xprt *xprt ) ;
#line 118
void svc_xprt_copy_addrs(struct svc_rqst *rqstp , struct svc_xprt *xprt ) ;
#line 120
int svc_port_is_privileged(struct sockaddr *sin ) ;
#line 126
void svc_add_new_perm_xprt(struct svc_serv *serv , struct svc_xprt *new ) ;
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
__inline static void svc_xprt_set_local(struct svc_xprt *xprt , struct sockaddr  const  *sa ,
                                        size_t const   salen ) 
{ 


  {
  {
#line 136
  memcpy((void *)(& xprt->xpt_local), (void const   *)sa, salen);
#line 137
  xprt->xpt_locallen = salen;
  }
#line 138
  return;
}
}
#line 139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
__inline static void svc_xprt_set_remote(struct svc_xprt *xprt , struct sockaddr  const  *sa ,
                                         size_t const   salen ) 
{ 


  {
  {
#line 143
  memcpy((void *)(& xprt->xpt_remote), (void const   *)sa, salen);
#line 144
  xprt->xpt_remotelen = salen;
  }
#line 145
  return;
}
}
#line 161 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
__inline static size_t svc_addr_len(struct sockaddr  const  *sa ) 
{ 


  {
  {
#line 164
  if ((int )sa->sa_family == 2) {
#line 164
    goto case_2;
  } else {

  }
#line 166
  if ((int )sa->sa_family == 10) {
#line 166
    goto case_10;
  } else {

  }
#line 163
  goto switch_break;
  case_2: /* CIL Label */ ;
#line 165
  return (16UL);
  case_10: /* CIL Label */ ;
#line 167
  return (28UL);
  switch_break: /* CIL Label */ ;
  }
  {
#line 169
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/sunrpc/svc_xprt.h"),
                       "i" (169), "i" (12UL));
#line 169
  __builtin_unreachable();
  }
#line 170
  return (0UL);
}
}
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
__inline static char *__svc_print_addr(struct sockaddr  const  *addr , char *buf ,
                                       size_t const   len ) 
{ 
  struct sockaddr_in  const  *sin ;
  struct sockaddr_in6  const  *sin6 ;
  __u16 tmp ;
  __u16 tmp___0 ;

  {
#line 185
  sin = (struct sockaddr_in  const  *)addr;
#line 186
  sin6 = (struct sockaddr_in6  const  *)addr;
  {
#line 189
  if ((int )addr->sa_family == 2) {
#line 189
    goto case_2;
  } else {

  }
#line 194
  if ((int )addr->sa_family == 10) {
#line 194
    goto case_10;
  } else {

  }
#line 200
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 190
  tmp = __fswab16((int )sin->sin_port);
#line 190
  snprintf(buf, len, "%pI4, port=%u", & sin->sin_addr, (int )tmp);
  }
#line 192
  goto ldv_49754;
  case_10: /* CIL Label */ 
  {
#line 195
  tmp___0 = __fswab16((int )sin6->sin6_port);
#line 195
  snprintf(buf, len, "%pI6, port=%u", & sin6->sin6_addr, (int )tmp___0);
  }
#line 198
  goto ldv_49754;
  switch_default: /* CIL Label */ 
  {
#line 201
  snprintf(buf, len, "unknown address type: %d", (int )addr->sa_family);
  }
#line 202
  goto ldv_49754;
  switch_break: /* CIL Label */ ;
  }
  ldv_49754: ;
#line 205
  return (buf);
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcsock.h"
__inline static u32 svc_sock_reclen(struct svc_sock *svsk ) 
{ 
  __u32 tmp ;

  {
  {
#line 43
  tmp = __fswab32(svsk->sk_reclen);
  }
#line 43
  return (tmp & 2147483647U);
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcsock.h"
__inline static u32 svc_sock_final_rec(struct svc_sock *svsk ) 
{ 
  __u32 tmp ;

  {
  {
#line 48
  tmp = __fswab32(svsk->sk_reclen);
  }
#line 48
  return (tmp & 2147483648U);
}
}
#line 59
bool svc_alien_sock(struct net *net , int fd ) ;
#line 60
int svc_addsock(struct svc_serv *serv , int const   fd , char *name_return , size_t const   len ) ;
#line 62
void svc_init_xprt_sock(void) ;
#line 63
void svc_cleanup_xprt_sock(void) ;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_sock *svc_setup_socket(struct svc_serv *serv , struct socket *sock ,
                                         int flags ) ;
#line 63
static void svc_udp_data_ready(struct sock *sk , int count ) ;
#line 64
static int svc_udp_recvfrom(struct svc_rqst *rqstp ) ;
#line 65
static int svc_udp_sendto(struct svc_rqst *rqstp ) ;
#line 66
static void svc_sock_detach(struct svc_xprt *xprt ) ;
#line 67
static void svc_tcp_sock_detach(struct svc_xprt *xprt ) ;
#line 68
static void svc_sock_free(struct svc_xprt *xprt ) ;
#line 70
static struct svc_xprt *svc_create_socket(struct svc_serv *serv , int protocol , struct net *net ,
                                          struct sockaddr *sin , int len , int flags ) ;
#line 74
static struct svc_xprt *svc_bc_create_socket(struct svc_serv *serv , int protocol ,
                                             struct net *net , struct sockaddr *sin ,
                                             int len , int flags ) ;
#line 77
static void svc_bc_sock_free(struct svc_xprt *xprt ) ;
#line 81 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct lock_class_key svc_key[2U]  ;
#line 82 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct lock_class_key svc_slock_key[2U]  ;
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_reclassify_socket(struct socket *sock ) 
{ 
  struct sock *sk ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;

  {
  {
#line 86
  sk = sock->sk;
#line 88
  __ret_warn_once = sk->sk_lock.owned != 0;
#line 88
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 88
  if (tmp___1 != 0L) {
    {
#line 88
    __ret_warn_on = ! __warned;
#line 88
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 88
    if (tmp != 0L) {
      {
#line 88
      warn_slowpath_null("net/sunrpc/svcsock.c", 88);
      }
    } else {

    }
    {
#line 88
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 88
    if (tmp___0 != 0L) {
#line 88
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 88
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 89
  if (sk->sk_lock.owned != 0) {
#line 90
    return;
  } else {

  }
  {
#line 93
  if ((int )sk->__sk_common.skc_family == 2) {
#line 93
    goto case_2;
  } else {

  }
#line 100
  if ((int )sk->__sk_common.skc_family == 10) {
#line 100
    goto case_10;
  } else {

  }
#line 107
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 94
  sk->sk_lock.owned = 0;
#line 94
  __init_waitqueue_head(& sk->sk_lock.wq, "&sk->sk_lock.wq", & __key);
#line 94
  spinlock_check(& sk->sk_lock.slock);
#line 94
  __raw_spin_lock_init(& sk->sk_lock.slock.__annonCompField20.rlock, "&(&(sk)->sk_lock.slock)->rlock",
                       & __key___0);
#line 94
  debug_check_no_locks_freed((void const   *)(& sk->sk_lock), 216UL);
#line 94
  lockdep_init_map(& sk->sk_lock.slock.__annonCompField20.__annonCompField19.dep_map,
                   "slock-AF_INET-NFSD", (struct lock_class_key *)(& svc_slock_key),
                   0);
#line 94
  lockdep_init_map(& sk->sk_lock.dep_map, "sk_xprt.xpt_lock-AF_INET-NFSD", (struct lock_class_key *)(& svc_key),
                   0);
  }
#line 98
  goto ldv_49871;
  case_10: /* CIL Label */ 
  {
#line 101
  sk->sk_lock.owned = 0;
#line 101
  __init_waitqueue_head(& sk->sk_lock.wq, "&sk->sk_lock.wq", & __key___1);
#line 101
  spinlock_check(& sk->sk_lock.slock);
#line 101
  __raw_spin_lock_init(& sk->sk_lock.slock.__annonCompField20.rlock, "&(&(sk)->sk_lock.slock)->rlock",
                       & __key___2);
#line 101
  debug_check_no_locks_freed((void const   *)(& sk->sk_lock), 216UL);
#line 101
  lockdep_init_map(& sk->sk_lock.slock.__annonCompField20.__annonCompField19.dep_map,
                   "slock-AF_INET6-NFSD", (struct lock_class_key *)(& svc_slock_key) + 1UL,
                   0);
#line 101
  lockdep_init_map(& sk->sk_lock.dep_map, "sk_xprt.xpt_lock-AF_INET6-NFSD", (struct lock_class_key *)(& svc_key) + 1UL,
                   0);
  }
#line 105
  goto ldv_49871;
  switch_default: /* CIL Label */ 
  {
#line 108
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svcsock.c"),
                       "i" (108), "i" (12UL));
#line 108
  __builtin_unreachable();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_49871: ;
#line 111
  return;
}
}
#line 120 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_release_skb(struct svc_rqst *rqstp ) 
{ 
  struct sk_buff *skb ;
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  long tmp ;

  {
#line 122
  skb = (struct sk_buff *)rqstp->rq_xprt_ctxt;
#line 124
  if ((unsigned long )skb != (unsigned long )((struct sk_buff *)0)) {
    {
#line 126
    __mptr = (struct svc_xprt  const  *)rqstp->rq_xprt;
#line 126
    svsk = (struct svc_sock *)__mptr;
#line 127
    rqstp->rq_xprt_ctxt = (void *)0;
#line 129
    tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 129
    if (tmp != 0L) {
      {
#line 129
      printk("\001dsvc: service %p, releasing skb %p\n", rqstp, skb);
      }
    } else {

    }
    {
#line 130
    skb_free_datagram_locked(svsk->sk_sk, skb);
    }
  } else {

  }
#line 132
  return;
}
}
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_set_cmsg_data(struct svc_rqst *rqstp , struct cmsghdr *cmh ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct in_pktinfo *pki ;
  struct sockaddr_in *tmp ;
  struct in6_pktinfo *pki___0 ;
  struct sockaddr_in6 *daddr ;
  struct sockaddr_in6 *tmp___0 ;

  {
#line 141
  __mptr = (struct svc_xprt  const  *)rqstp->rq_xprt;
#line 144
  svsk = (struct svc_sock *)__mptr;
  {
#line 146
  if ((int )(svsk->sk_sk)->__sk_common.skc_family == 2) {
#line 146
    goto case_2;
  } else {

  }
#line 158
  if ((int )(svsk->sk_sk)->__sk_common.skc_family == 10) {
#line 158
    goto case_10;
  } else {

  }
#line 145
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 147
  pki = (struct in_pktinfo *)((char *)cmh + 16UL);
#line 149
  cmh->cmsg_level = 0;
#line 150
  cmh->cmsg_type = 8;
#line 151
  pki->ipi_ifindex = 0;
#line 152
  tmp = svc_daddr_in((struct svc_rqst  const  *)rqstp);
#line 152
  pki->ipi_spec_dst.s_addr = tmp->sin_addr.s_addr;
#line 154
  cmh->cmsg_len = 28UL;
  }
#line 156
  goto ldv_49895;
  case_10: /* CIL Label */ 
  {
#line 159
  pki___0 = (struct in6_pktinfo *)((char *)cmh + 16UL);
#line 160
  tmp___0 = svc_daddr_in6((struct svc_rqst  const  *)rqstp);
#line 160
  daddr = tmp___0;
#line 162
  cmh->cmsg_level = 41;
#line 163
  cmh->cmsg_type = 50;
#line 164
  pki___0->ipi6_ifindex = (int )daddr->sin6_scope_id;
#line 165
  pki___0->ipi6_addr = daddr->sin6_addr;
#line 166
  cmh->cmsg_len = 36UL;
  }
#line 168
  goto ldv_49895;
  switch_break: /* CIL Label */ ;
  }
  ldv_49895: ;
#line 171
  return;
}
}
#line 175 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
int svc_send_common(struct socket *sock , struct xdr_buf *xdr , struct page *headpage ,
                    unsigned long headoffset , struct page *tailpage , unsigned long tailoffset ) 
{ 
  int result ;
  int size ;
  struct page **ppage ;
  size_t base ;
  unsigned int pglen ;
  unsigned int flags ;
  int slen ;
  int len ;

  {
#line 181
  ppage = xdr->pages;
#line 182
  base = (size_t )xdr->page_base;
#line 183
  pglen = xdr->page_len;
#line 184
  flags = 32768U;
#line 186
  len = 0;
#line 188
  slen = (int )xdr->len;
#line 191
  if ((size_t )slen == xdr->head[0].iov_len) {
#line 192
    flags = 0U;
  } else {

  }
  {
#line 193
  len = kernel_sendpage(sock, headpage, (int )headoffset, xdr->head[0].iov_len, (int )flags);
  }
#line 195
  if ((size_t )len != xdr->head[0].iov_len) {
#line 196
    goto out;
  } else {

  }
#line 197
  slen = (int )((unsigned int )slen - (unsigned int )xdr->head[0].iov_len);
#line 198
  if (slen == 0) {
#line 199
    goto out;
  } else {

  }
#line 202
  size = (int )(4096UL - base < (unsigned long )pglen ? 4096UL - base : (unsigned long )pglen);
#line 203
  goto ldv_49917;
  ldv_49916: ;
#line 204
  if (slen == size) {
#line 205
    flags = 0U;
  } else {

  }
  {
#line 206
  result = kernel_sendpage(sock, *ppage, (int )base, (size_t )size, (int )flags);
  }
#line 207
  if (result > 0) {
#line 208
    len = len + result;
  } else {

  }
#line 209
  if (result != size) {
#line 210
    goto out;
  } else {

  }
#line 211
  slen = slen - size;
#line 212
  pglen = pglen - (unsigned int )size;
#line 213
  size = (int )(4096U < pglen ? 4096U : pglen);
#line 214
  base = 0UL;
#line 215
  ppage = ppage + 1;
  ldv_49917: ;
#line 203
  if (pglen != 0U) {
#line 205
    goto ldv_49916;
  } else {

  }

#line 219
  if (xdr->tail[0].iov_len != 0UL) {
    {
#line 220
    result = kernel_sendpage(sock, tailpage, (int )tailoffset, xdr->tail[0].iov_len,
                             0);
    }
#line 222
    if (result > 0) {
#line 223
      len = len + result;
    } else {

    }
  } else {

  }
  out: ;
#line 227
  return (len);
}
}
#line 234 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_sendto(struct svc_rqst *rqstp , struct xdr_buf *xdr ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct socket *sock ;
  union __anonunion_buffer_262 buffer ;
  struct cmsghdr *cmh ;
  int len ;
  unsigned long tailoff ;
  unsigned long headoff ;
  char buf[63U] ;
  struct msghdr msg ;
  int tmp ;
  char *tmp___0 ;
  long tmp___1 ;

  {
#line 237
  __mptr = (struct svc_xprt  const  *)rqstp->rq_xprt;
#line 237
  svsk = (struct svc_sock *)__mptr;
#line 238
  sock = svsk->sk_sock;
#line 243
  cmh = & buffer.hdr;
#line 244
  len = 0;
#line 249
  if (rqstp->rq_prot == 17U) {
    {
#line 250
    msg.msg_name = (void *)(& rqstp->rq_addr);
#line 250
    msg.msg_namelen = (int )rqstp->rq_addrlen;
#line 250
    msg.msg_iov = 0;
#line 250
    msg.msg_iovlen = 0UL;
#line 250
    msg.msg_control = (void *)cmh;
#line 250
    msg.msg_controllen = 40UL;
#line 250
    msg.msg_flags = 32768U;
#line 258
    svc_set_cmsg_data(rqstp, cmh);
#line 260
    tmp = sock_sendmsg(sock, & msg, 0UL);
    }
#line 260
    if (tmp < 0) {
#line 261
      goto out;
    } else {

    }
  } else {

  }
  {
#line 264
  tailoff = (unsigned long )xdr->tail[0].iov_base & 4095UL;
#line 265
  headoff = 0UL;
#line 266
  len = svc_send_common(sock, xdr, *(rqstp->rq_respages), headoff, *(rqstp->rq_respages),
                        tailoff);
  }
  out: 
  {
#line 270
  tmp___1 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 270
  if (tmp___1 != 0L) {
    {
#line 270
    tmp___0 = svc_print_addr(rqstp, (char *)(& buf), 63UL);
#line 270
    printk("\001dsvc: socket %p sendto([%p %Zu... ], %d) = %d (addr %s)\n", svsk,
           xdr->head[0].iov_base, xdr->head[0].iov_len, xdr->len, len, tmp___0);
    }
  } else {

  }
#line 274
  return (len);
}
}
#line 280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_one_sock_name(struct svc_sock *svsk , char *buf , int remaining ) 
{ 
  struct sock  const  *sk ;
  char const   *proto_name ;
  int len ;
  struct inet_sock *tmp ;
  struct inet_sock *tmp___0 ;
  struct inet_sock *tmp___1 ;
  struct ipv6_pinfo *tmp___2 ;

  {
#line 282
  sk = (struct sock  const  *)svsk->sk_sk;
#line 283
  proto_name = (unsigned int )((unsigned char )sk->sk_protocol) == 17U ? "udp" : "tcp";
  {
#line 288
  if ((int )sk->__sk_common.skc_family == 2) {
#line 288
    goto case_2;
  } else {

  }
#line 294
  if ((int )sk->__sk_common.skc_family == 10) {
#line 294
    goto case_10;
  } else {

  }
#line 300
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 289
  tmp = inet_sk(sk);
#line 289
  tmp___0 = inet_sk(sk);
#line 289
  len = snprintf(buf, (size_t )remaining, "ipv4 %s %pI4 %d\n", proto_name, & tmp___0->sk.__sk_common.__annonCompField64.__annonCompField63.skc_rcv_saddr,
                 (int )tmp->sk.__sk_common.__annonCompField67.__annonCompField66.skc_num);
  }
#line 293
  goto ldv_49947;
  case_10: /* CIL Label */ 
  {
#line 295
  tmp___1 = inet_sk(sk);
#line 295
  tmp___2 = inet6_sk(sk);
#line 295
  len = snprintf(buf, (size_t )remaining, "ipv6 %s %pI6 %d\n", proto_name, & tmp___2->rcv_saddr,
                 (int )tmp___1->sk.__sk_common.__annonCompField67.__annonCompField66.skc_num);
  }
#line 299
  goto ldv_49947;
  switch_default: /* CIL Label */ 
  {
#line 301
  len = snprintf(buf, (size_t )remaining, "*unknown-%d*\n", (int )sk->__sk_common.skc_family);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_49947: ;
#line 305
  if (len >= remaining) {
#line 306
    *buf = 0;
#line 307
    return (-36);
  } else {

  }
#line 309
  return (len);
}
}
#line 315 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_recv_available(struct svc_sock *svsk ) 
{ 
  struct socket *sock ;
  int avail ;
  int err ;

  {
  {
#line 317
  sock = svsk->sk_sock;
#line 320
  err = kernel_sock_ioctl(sock, 21531, (unsigned long )(& avail));
  }
#line 322
  return (err >= 0 ? avail : err);
}
}
#line 328 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_recvfrom(struct svc_rqst *rqstp , struct kvec *iov , int nr , int buflen ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct msghdr msg ;
  int len ;
  long tmp ;

  {
  {
#line 332
  __mptr = (struct svc_xprt  const  *)rqstp->rq_xprt;
#line 332
  svsk = (struct svc_sock *)__mptr;
#line 333
  msg.msg_name = 0;
#line 333
  msg.msg_namelen = 0;
#line 333
  msg.msg_iov = 0;
#line 333
  msg.msg_iovlen = 0UL;
#line 333
  msg.msg_control = 0;
#line 333
  msg.msg_controllen = 0UL;
#line 333
  msg.msg_flags = 64U;
#line 338
  rqstp->rq_xprt_hlen = 0UL;
#line 340
  len = kernel_recvmsg(svsk->sk_sock, & msg, iov, (size_t )nr, (size_t )buflen, (int )msg.msg_flags);
#line 343
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 343
  if (tmp != 0L) {
    {
#line 343
    printk("\001dsvc: socket %p recvfrom(%p, %Zu) = %d\n", svsk, iov->iov_base, iov->iov_len,
           len);
    }
  } else {

  }
#line 345
  return (len);
}
}
#line 348 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_partial_recvfrom(struct svc_rqst *rqstp , struct kvec *iov , int nr ,
                                int buflen , unsigned int base ) 
{ 
  size_t save_iovlen ;
  void *save_iovbase ;
  unsigned int i ;
  int ret ;
  int tmp ;

  {
#line 357
  if (base == 0U) {
    {
#line 358
    tmp = svc_recvfrom(rqstp, iov, nr, buflen);
    }
#line 358
    return (tmp);
  } else {

  }
#line 360
  i = 0U;
#line 360
  goto ldv_49980;
  ldv_49979: ;
#line 361
  if ((iov + (unsigned long )i)->iov_len > (size_t )base) {
#line 362
    goto ldv_49978;
  } else {

  }
#line 363
  base = base - (unsigned int )(iov + (unsigned long )i)->iov_len;
#line 360
  i = i + 1U;
  ldv_49980: ;
#line 360
  if (i < (unsigned int )nr) {
#line 362
    goto ldv_49979;
  } else {

  }
  ldv_49978: 
  {
#line 365
  save_iovlen = (iov + (unsigned long )i)->iov_len;
#line 366
  save_iovbase = (iov + (unsigned long )i)->iov_base;
#line 367
  (iov + (unsigned long )i)->iov_len = (iov + (unsigned long )i)->iov_len - (size_t )base;
#line 368
  (iov + (unsigned long )i)->iov_base = (iov + (unsigned long )i)->iov_base + (unsigned long )base;
#line 369
  ret = svc_recvfrom(rqstp, iov + (unsigned long )i, (int )((unsigned int )nr - i),
                     buflen);
#line 370
  (iov + (unsigned long )i)->iov_len = save_iovlen;
#line 371
  (iov + (unsigned long )i)->iov_base = save_iovbase;
  }
#line 372
  return (ret);
}
}
#line 378 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_sock_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
  {
#line 394
  lock_sock(sock->sk);
#line 395
  (sock->sk)->sk_sndbuf = (int )(snd * 2U);
#line 396
  (sock->sk)->sk_rcvbuf = (int )(rcv * 2U);
#line 397
  (*((sock->sk)->sk_write_space))(sock->sk);
#line 398
  release_sock(sock->sk);
  }
#line 399
  return;
}
}
#line 404 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_udp_data_ready(struct sock *sk , int count ) 
{ 
  struct svc_sock *svsk ;
  wait_queue_head_t *wq ;
  wait_queue_head_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
  {
#line 406
  svsk = (struct svc_sock *)sk->sk_user_data;
#line 407
  tmp = sk_sleep(sk);
#line 407
  wq = tmp;
  }
#line 409
  if ((unsigned long )svsk != (unsigned long )((struct svc_sock *)0)) {
    {
#line 410
    tmp___1 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 410
    if (tmp___1 != 0L) {
      {
#line 410
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 410
      printk("\001dsvc: socket %p(inet %p), count=%d, busy=%d\n", svsk, sk, count,
             tmp___0);
      }
    } else {

    }
    {
#line 413
    set_bit(3U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 414
    svc_xprt_enqueue(& svsk->sk_xprt);
    }
  } else {

  }
#line 416
  if ((unsigned long )wq != (unsigned long )((wait_queue_head_t *)0)) {
    {
#line 416
    tmp___2 = waitqueue_active(wq);
    }
#line 416
    if (tmp___2 != 0) {
      {
#line 417
      __wake_up(wq, 1U, 1, (void *)0);
      }
    } else {

    }
  } else {

  }
#line 418
  return;
}
}
#line 423 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_write_space(struct sock *sk ) 
{ 
  struct svc_sock *svsk ;
  wait_queue_head_t *wq ;
  wait_queue_head_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
  {
#line 425
  svsk = (struct svc_sock *)sk->sk_user_data;
#line 426
  tmp = sk_sleep(sk);
#line 426
  wq = tmp;
  }
#line 428
  if ((unsigned long )svsk != (unsigned long )((struct svc_sock *)0)) {
    {
#line 429
    tmp___1 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 429
    if (tmp___1 != 0L) {
      {
#line 429
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 429
      printk("\001dsvc: socket %p(inet %p), write_space busy=%d\n", svsk, sk, tmp___0);
      }
    } else {

    }
    {
#line 431
    svc_xprt_enqueue(& svsk->sk_xprt);
    }
  } else {

  }
#line 434
  if ((unsigned long )wq != (unsigned long )((wait_queue_head_t *)0)) {
    {
#line 434
    tmp___3 = waitqueue_active(wq);
    }
#line 434
    if (tmp___3 != 0) {
      {
#line 435
      tmp___2 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
      }
#line 435
      if (tmp___2 != 0L) {
        {
#line 435
        printk("\001dRPC svc_write_space: someone sleeping on %p\n", svsk);
        }
      } else {

      }
      {
#line 437
      __wake_up(wq, 1U, 1, (void *)0);
      }
    } else {

    }
  } else {

  }
#line 439
  return;
}
}
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_write_space(struct sock *sk ) 
{ 
  struct socket *sock ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 443
  sock = sk->sk_socket;
#line 445
  tmp = sk_stream_wspace((struct sock  const  *)sk);
#line 445
  tmp___0 = sk_stream_min_wspace((struct sock  const  *)sk);
  }
#line 445
  if (tmp >= tmp___0 && (unsigned long )sock != (unsigned long )((struct socket *)0)) {
    {
#line 446
    clear_bit(2, (unsigned long volatile   *)(& sock->flags));
    }
  } else {

  }
  {
#line 447
  svc_write_space(sk);
  }
#line 448
  return;
}
}
#line 453 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_udp_get_dest_address4(struct svc_rqst *rqstp , struct cmsghdr *cmh ) 
{ 
  struct in_pktinfo *pki ;
  struct sockaddr_in *daddr ;
  struct sockaddr_in *tmp ;

  {
  {
#line 456
  pki = (struct in_pktinfo *)((char *)cmh + 16UL);
#line 457
  tmp = svc_daddr_in((struct svc_rqst  const  *)rqstp);
#line 457
  daddr = tmp;
  }
#line 459
  if (cmh->cmsg_type != 8) {
#line 460
    return (0);
  } else {

  }
#line 462
  daddr->sin_family = 2U;
#line 463
  daddr->sin_addr.s_addr = pki->ipi_spec_dst.s_addr;
#line 464
  return (1);
}
}
#line 470 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_udp_get_dest_address6(struct svc_rqst *rqstp , struct cmsghdr *cmh ) 
{ 
  struct in6_pktinfo *pki ;
  struct sockaddr_in6 *daddr ;
  struct sockaddr_in6 *tmp ;

  {
  {
#line 473
  pki = (struct in6_pktinfo *)((char *)cmh + 16UL);
#line 474
  tmp = svc_daddr_in6((struct svc_rqst  const  *)rqstp);
#line 474
  daddr = tmp;
  }
#line 476
  if (cmh->cmsg_type != 50) {
#line 477
    return (0);
  } else {

  }
#line 479
  daddr->sin6_family = 10U;
#line 480
  daddr->sin6_addr = pki->ipi6_addr;
#line 481
  daddr->sin6_scope_id = (__u32 )pki->ipi6_ifindex;
#line 482
  return (1);
}
}
#line 492 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_udp_get_dest_address(struct svc_rqst *rqstp , struct cmsghdr *cmh ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 496
  if (cmh->cmsg_level == 0) {
#line 496
    goto case_0;
  } else {

  }
#line 498
  if (cmh->cmsg_level == 41) {
#line 498
    goto case_41;
  } else {

  }
#line 495
  goto switch_break;
  case_0: /* CIL Label */ 
  {
#line 497
  tmp = svc_udp_get_dest_address4(rqstp, cmh);
  }
#line 497
  return (tmp);
  case_41: /* CIL Label */ 
  {
#line 499
  tmp___0 = svc_udp_get_dest_address6(rqstp, cmh);
  }
#line 499
  return (tmp___0);
  switch_break: /* CIL Label */ ;
  }
#line 502
  return (0);
}
}
#line 508 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_udp_recvfrom(struct svc_rqst *rqstp ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct svc_serv *serv ;
  struct sk_buff *skb ;
  union __anonunion_buffer_264 buffer ;
  struct cmsghdr *cmh ;
  struct msghdr msg ;
  struct sockaddr *tmp ;
  size_t len ;
  int err ;
  int tmp___0 ;
  long tmp___1 ;
  struct sockaddr *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct sockaddr *tmp___5 ;
  int tmp___6 ;
  __sum16 tmp___7 ;
  bool tmp___8 ;

  {
  {
#line 511
  __mptr = (struct svc_xprt  const  *)rqstp->rq_xprt;
#line 511
  svsk = (struct svc_sock *)__mptr;
#line 512
  serv = svsk->sk_xprt.xpt_server;
#line 518
  cmh = & buffer.hdr;
#line 519
  tmp = svc_addr((struct svc_rqst  const  *)rqstp);
#line 519
  msg.msg_name = (void *)tmp;
#line 519
  msg.msg_namelen = 0;
#line 519
  msg.msg_iov = 0;
#line 519
  msg.msg_iovlen = 0UL;
#line 519
  msg.msg_control = (void *)cmh;
#line 519
  msg.msg_controllen = 40UL;
#line 519
  msg.msg_flags = 64U;
#line 528
  tmp___0 = test_and_clear_bit(7, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
  }
#line 528
  if (tmp___0 != 0) {
    {
#line 537
    svc_sock_setbufsize(svsk->sk_sock, (serv->sv_nrthreads + 3U) * serv->sv_max_mesg,
                        (serv->sv_nrthreads + 3U) * serv->sv_max_mesg);
    }
  } else {

  }
  {
#line 541
  clear_bit(3, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 542
  skb = (struct sk_buff *)0;
#line 543
  err = kernel_recvmsg(svsk->sk_sock, & msg, (struct kvec *)0, 0UL, 0UL, 66);
  }
#line 545
  if (err >= 0) {
    {
#line 546
    skb = skb_recv_datagram(svsk->sk_sk, 0U, 1, & err);
    }
  } else {

  }
#line 548
  if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
#line 549
    if (err != -11) {
      {
#line 551
      tmp___1 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
      }
#line 551
      if (tmp___1 != 0L) {
        {
#line 551
        printk("\001dsvc: recvfrom returned error %d\n", - err);
        }
      } else {

      }
      {
#line 552
      set_bit(3U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
      }
    } else {

    }
#line 554
    return (0);
  } else {

  }
  {
#line 556
  tmp___2 = svc_addr((struct svc_rqst  const  *)rqstp);
#line 556
  len = svc_addr_len((struct sockaddr  const  *)tmp___2);
#line 557
  rqstp->rq_addrlen = len;
  }
#line 558
  if (skb->tstamp.tv64 == 0LL) {
    {
#line 559
    skb->tstamp = ktime_get_real();
    }
  } else {

  }
  {
#line 563
  (svsk->sk_sk)->sk_stamp = skb->tstamp;
#line 564
  set_bit(3U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 566
  len = (unsigned long )skb->len - 8UL;
#line 567
  rqstp->rq_arg.len = (unsigned int )len;
#line 569
  rqstp->rq_prot = 17U;
#line 571
  tmp___4 = svc_udp_get_dest_address(rqstp, cmh);
  }
#line 571
  if (tmp___4 == 0) {
    {
#line 572
    tmp___3 = net_ratelimit();
    }
#line 572
    if (tmp___3 != 0) {
      {
#line 572
      printk("\fsvc: received unknown control message %d/%d; dropping RPC reply datagram\n",
             cmh->cmsg_level, cmh->cmsg_type);
      }
    } else {

    }
#line 574
    goto out_free;
  } else {

  }
  {
#line 576
  tmp___5 = svc_daddr((struct svc_rqst  const  *)rqstp);
#line 576
  rqstp->rq_daddrlen = svc_addr_len((struct sockaddr  const  *)tmp___5);
#line 578
  tmp___8 = skb_is_nonlinear((struct sk_buff  const  *)skb);
  }
#line 578
  if ((int )tmp___8) {
    {
#line 580
    local_bh_disable();
#line 581
    tmp___6 = csum_partial_copy_to_xdr(& rqstp->rq_arg, skb);
    }
#line 581
    if (tmp___6 != 0) {
      {
#line 582
      local_bh_enable();
      }
#line 584
      goto out_free;
    } else {

    }
    {
#line 586
    local_bh_enable();
#line 587
    skb_free_datagram_locked(svsk->sk_sk, skb);
    }
  } else {
    {
#line 590
    rqstp->rq_arg.head[0].iov_base = (void *)(skb->data + 8UL);
#line 592
    rqstp->rq_arg.head[0].iov_len = len;
#line 593
    tmp___7 = skb_checksum_complete(skb);
    }
#line 593
    if ((unsigned int )tmp___7 != 0U) {
#line 594
      goto out_free;
    } else {

    }
#line 595
    rqstp->rq_xprt_ctxt = (void *)skb;
  }
#line 598
  rqstp->rq_arg.page_base = 0U;
#line 599
  if (len <= rqstp->rq_arg.head[0].iov_len) {
#line 600
    rqstp->rq_arg.head[0].iov_len = len;
#line 601
    rqstp->rq_arg.page_len = 0U;
#line 602
    rqstp->rq_respages = (struct page **)(& rqstp->rq_pages) + 1UL;
  } else {
#line 604
    rqstp->rq_arg.page_len = (unsigned int )len - (unsigned int )rqstp->rq_arg.head[0].iov_len;
#line 605
    rqstp->rq_respages = (struct page **)(& rqstp->rq_pages) + (((unsigned long )rqstp->rq_arg.page_len + 4095UL) / 4096UL + 1UL);
  }
#line 608
  rqstp->rq_next_page = rqstp->rq_respages + 1UL;
#line 610
  if ((unsigned long )serv->sv_stats != (unsigned long )((struct svc_stat *)0)) {
#line 611
    (serv->sv_stats)->netudpcnt = (serv->sv_stats)->netudpcnt + 1U;
  } else {

  }
#line 613
  return ((int )len);
  out_free: 
  {
#line 615
  trace_kfree_skb(skb, (void *)(& svc_udp_recvfrom));
#line 616
  skb_free_datagram_locked(svsk->sk_sk, skb);
  }
#line 617
  return (0);
}
}
#line 621 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_udp_sendto(struct svc_rqst *rqstp ) 
{ 
  int error ;

  {
  {
#line 625
  error = svc_sendto(rqstp, & rqstp->rq_res);
  }
#line 626
  if (error == -111) {
    {
#line 628
    error = svc_sendto(rqstp, & rqstp->rq_res);
    }
  } else {

  }
#line 630
  return (error);
}
}
#line 633 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_udp_prep_reply_hdr(struct svc_rqst *rqstp ) 
{ 


  {
#line 635
  return;
}
}
#line 637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_udp_has_wspace(struct svc_xprt *xprt ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct svc_serv *serv ;
  unsigned long required ;
  int tmp ;
  unsigned long tmp___0 ;

  {
  {
#line 639
  __mptr = (struct svc_xprt  const  *)xprt;
#line 639
  svsk = (struct svc_sock *)__mptr;
#line 640
  serv = xprt->xpt_server;
#line 647
  set_bit(2U, (unsigned long volatile   *)(& (svsk->sk_sock)->flags));
#line 648
  tmp = atomic_read((atomic_t const   *)(& svsk->sk_xprt.xpt_reserved));
#line 648
  required = (unsigned long )((unsigned int )tmp + serv->sv_max_mesg);
#line 649
  tmp___0 = sock_wspace(svsk->sk_sk);
  }
#line 649
  if (required * 2UL > tmp___0) {
#line 650
    return (0);
  } else {

  }
  {
#line 651
  clear_bit(2, (unsigned long volatile   *)(& (svsk->sk_sock)->flags));
  }
#line 652
  return (1);
}
}
#line 655 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt *svc_udp_accept(struct svc_xprt *xprt ) 
{ 


  {
  {
#line 657
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svcsock.c"),
                       "i" (657), "i" (12UL));
#line 657
  __builtin_unreachable();
  }
#line 658
  return ((struct svc_xprt *)0);
}
}
#line 661 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt *svc_udp_create(struct svc_serv *serv , struct net *net , struct sockaddr *sa ,
                                       int salen , int flags ) 
{ 
  struct svc_xprt *tmp ;

  {
  {
#line 666
  tmp = svc_create_socket(serv, 17, net, sa, salen, flags);
  }
#line 666
  return (tmp);
}
}
#line 669 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt_ops svc_udp_ops  = 
#line 669
     {& svc_udp_create, & svc_udp_accept, & svc_udp_has_wspace, & svc_udp_recvfrom,
    & svc_udp_prep_reply_hdr, & svc_udp_sendto, & svc_release_skb, & svc_sock_detach,
    & svc_sock_free};
#line 681 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt_class svc_udp_class  =    {"udp", & __this_module, & svc_udp_ops, {0, 0}, 32768U};
#line 688 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_udp_init(struct svc_sock *svsk , struct svc_serv *serv ) 
{ 
  int err ;
  int level ;
  int optname ;
  int one ;
  struct net *tmp ;
  long tmp___0 ;

  {
  {
#line 690
  one = 1;
#line 692
  tmp = sock_net((struct sock  const  *)(svsk->sk_sock)->sk);
#line 692
  svc_xprt_init(tmp, & svc_udp_class, & svsk->sk_xprt, serv);
#line 694
  clear_bit(12, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 695
  (svsk->sk_sk)->sk_data_ready = & svc_udp_data_ready;
#line 696
  (svsk->sk_sk)->sk_write_space = & svc_write_space;
#line 702
  svc_sock_setbufsize(svsk->sk_sock, (svsk->sk_xprt.xpt_server)->sv_max_mesg * 3U,
                      (svsk->sk_xprt.xpt_server)->sv_max_mesg * 3U);
#line 707
  set_bit(3U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 708
  set_bit(7U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
  }
  {
#line 712
  if ((int )(svsk->sk_sk)->__sk_common.skc_family == 2) {
#line 712
    goto case_2;
  } else {

  }
#line 716
  if ((int )(svsk->sk_sk)->__sk_common.skc_family == 10) {
#line 716
    goto case_10;
  } else {

  }
#line 720
  goto switch_default;
  case_2: /* CIL Label */ 
#line 713
  level = 0;
#line 714
  optname = 8;
#line 715
  goto ldv_50072;
  case_10: /* CIL Label */ 
#line 717
  level = 41;
#line 718
  optname = 49;
#line 719
  goto ldv_50072;
  switch_default: /* CIL Label */ 
  {
#line 721
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svcsock.c"),
                       "i" (721), "i" (12UL));
#line 721
  __builtin_unreachable();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_50072: 
  {
#line 723
  err = kernel_setsockopt(svsk->sk_sock, level, optname, (char *)(& one), 4U);
#line 725
  tmp___0 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 725
  if (tmp___0 != 0L) {
    {
#line 725
    printk("\001dsvc: kernel_setsockopt returned %d\n", err);
    }
  } else {

  }
#line 726
  return;
}
}
#line 732 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_listen_data_ready(struct sock *sk , int count_unused ) 
{ 
  struct svc_sock *svsk ;
  wait_queue_head_t *wq ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 734
  svsk = (struct svc_sock *)sk->sk_user_data;
#line 737
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 737
  if (tmp != 0L) {
    {
#line 737
    printk("\001dsvc: socket %p TCP (listen) state change %d\n", sk, (int )sk->__sk_common.skc_state);
    }
  } else {

  }
#line 750
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 10U) {
#line 751
    if ((unsigned long )svsk != (unsigned long )((struct svc_sock *)0)) {
      {
#line 752
      set_bit(1U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 753
      svc_xprt_enqueue(& svsk->sk_xprt);
      }
    } else {
      {
#line 755
      printk("svc: socket %p: no user data\n", sk);
      }
    }
  } else {

  }
  {
#line 758
  wq = sk_sleep(sk);
  }
#line 759
  if ((unsigned long )wq != (unsigned long )((wait_queue_head_t *)0)) {
    {
#line 759
    tmp___0 = waitqueue_active(wq);
    }
#line 759
    if (tmp___0 != 0) {
      {
#line 760
      __wake_up(wq, 1U, 0, (void *)0);
      }
    } else {

    }
  } else {

  }
#line 761
  return;
}
}
#line 766 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_state_change(struct sock *sk ) 
{ 
  struct svc_sock *svsk ;
  wait_queue_head_t *wq ;
  wait_queue_head_t *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 768
  svsk = (struct svc_sock *)sk->sk_user_data;
#line 769
  tmp = sk_sleep(sk);
#line 769
  wq = tmp;
#line 771
  tmp___0 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 771
  if (tmp___0 != 0L) {
    {
#line 771
    printk("\001dsvc: socket %p TCP (connected) state change %d (svsk %p)\n", sk,
           (int )sk->__sk_common.skc_state, sk->sk_user_data);
    }
  } else {

  }
#line 774
  if ((unsigned long )svsk == (unsigned long )((struct svc_sock *)0)) {
    {
#line 775
    printk("svc: socket %p: no user data\n", sk);
    }
  } else {
    {
#line 777
    set_bit(2U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 778
    svc_xprt_enqueue(& svsk->sk_xprt);
    }
  }
#line 780
  if ((unsigned long )wq != (unsigned long )((wait_queue_head_t *)0)) {
    {
#line 780
    tmp___1 = waitqueue_active(wq);
    }
#line 780
    if (tmp___1 != 0) {
      {
#line 781
      __wake_up(wq, 1U, 0, (void *)0);
      }
    } else {

    }
  } else {

  }
#line 782
  return;
}
}
#line 784 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_data_ready(struct sock *sk , int count ) 
{ 
  struct svc_sock *svsk ;
  wait_queue_head_t *wq ;
  wait_queue_head_t *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 786
  svsk = (struct svc_sock *)sk->sk_user_data;
#line 787
  tmp = sk_sleep(sk);
#line 787
  wq = tmp;
#line 789
  tmp___0 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 789
  if (tmp___0 != 0L) {
    {
#line 789
    printk("\001dsvc: socket %p TCP data ready (svsk %p)\n", sk, sk->sk_user_data);
    }
  } else {

  }
#line 791
  if ((unsigned long )svsk != (unsigned long )((struct svc_sock *)0)) {
    {
#line 792
    set_bit(3U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 793
    svc_xprt_enqueue(& svsk->sk_xprt);
    }
  } else {

  }
#line 795
  if ((unsigned long )wq != (unsigned long )((wait_queue_head_t *)0)) {
    {
#line 795
    tmp___1 = waitqueue_active(wq);
    }
#line 795
    if (tmp___1 != 0) {
      {
#line 796
      __wake_up(wq, 1U, 1, (void *)0);
      }
    } else {

    }
  } else {

  }
#line 797
  return;
}
}
#line 802 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt *svc_tcp_accept(struct svc_xprt *xprt ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct __kernel_sockaddr_storage addr ;
  struct sockaddr *sin ;
  struct svc_serv *serv ;
  struct socket *sock ;
  struct socket *newsock ;
  struct svc_sock *newsvsk ;
  int err ;
  int slen ;
  char buf[63U] ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  char *tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;

  {
  {
#line 804
  __mptr = (struct svc_xprt  const  *)xprt;
#line 804
  svsk = (struct svc_sock *)__mptr;
#line 806
  sin = (struct sockaddr *)(& addr);
#line 807
  serv = svsk->sk_xprt.xpt_server;
#line 808
  sock = svsk->sk_sock;
#line 814
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 814
  if (tmp != 0L) {
    {
#line 814
    printk("\001dsvc: tcp_accept %p sock %p\n", svsk, sock);
    }
  } else {

  }
#line 815
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 816
    return ((struct svc_xprt *)0);
  } else {

  }
  {
#line 818
  clear_bit(1, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 819
  err = kernel_accept(sock, & newsock, 2048);
  }
#line 820
  if (err < 0) {
#line 821
    if (err == -12) {
      {
#line 822
      printk("\f%s: no more sockets!\n", serv->sv_name);
      }
    } else
#line 824
    if (err != -11) {
      {
#line 825
      tmp___0 = net_ratelimit();
      }
#line 825
      if (tmp___0 != 0) {
        {
#line 825
        printk("\f%s: accept failed (err %d)!\n", serv->sv_name, - err);
        }
      } else {

      }
    } else {

    }
#line 827
    return ((struct svc_xprt *)0);
  } else {

  }
  {
#line 829
  set_bit(1U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 831
  err = kernel_getpeername(newsock, sin, & slen);
  }
#line 832
  if (err < 0) {
    {
#line 833
    tmp___1 = net_ratelimit();
    }
#line 833
    if (tmp___1 != 0) {
      {
#line 833
      printk("\f%s: peername failed (err %d)!\n", serv->sv_name, - err);
      }
    } else {

    }
#line 835
    goto failed;
  } else {

  }
  {
#line 842
  tmp___4 = svc_port_is_privileged(sin);
  }
#line 842
  if (tmp___4 == 0) {
    {
#line 843
    tmp___3 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 843
    if (tmp___3 != 0L) {
      {
#line 843
      tmp___2 = __svc_print_addr((struct sockaddr  const  *)sin, (char *)(& buf),
                                 63UL);
#line 843
      printk("\001d\f%s: connect from unprivileged port: %s\n", serv->sv_name, tmp___2);
      }
    } else {

    }
  } else {

  }
  {
#line 848
  tmp___6 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 848
  if (tmp___6 != 0L) {
    {
#line 848
    tmp___5 = __svc_print_addr((struct sockaddr  const  *)sin, (char *)(& buf), 63UL);
#line 848
    printk("\001d%s: connect from %s\n", serv->sv_name, tmp___5);
    }
  } else {

  }
  {
#line 854
  (newsock->sk)->sk_sndtimeo = 7500L;
#line 856
  newsvsk = svc_setup_socket(serv, newsock, 3);
#line 858
  tmp___7 = IS_ERR((void const   *)newsvsk);
  }
#line 858
  if (tmp___7 != 0L) {
#line 859
    goto failed;
  } else {

  }
  {
#line 860
  svc_xprt_set_remote(& newsvsk->sk_xprt, (struct sockaddr  const  *)sin, (size_t const   )slen);
#line 861
  err = kernel_getsockname(newsock, sin, & slen);
#line 862
  tmp___9 = __builtin_expect(err < 0, 0L);
  }
#line 862
  if (tmp___9 != 0L) {
    {
#line 863
    tmp___8 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 863
    if (tmp___8 != 0L) {
      {
#line 863
      printk("\001dsvc_tcp_accept: kernel_getsockname error %d\n", - err);
      }
    } else {

    }
#line 864
    slen = 2;
  } else {

  }
  {
#line 866
  svc_xprt_set_local(& newsvsk->sk_xprt, (struct sockaddr  const  *)sin, (size_t const   )slen);
  }
#line 868
  if ((unsigned long )serv->sv_stats != (unsigned long )((struct svc_stat *)0)) {
#line 869
    (serv->sv_stats)->nettcpconn = (serv->sv_stats)->nettcpconn + 1U;
  } else {

  }
#line 871
  return (& newsvsk->sk_xprt);
  failed: 
  {
#line 874
  sock_release(newsock);
  }
#line 875
  return ((struct svc_xprt *)0);
}
}
#line 878 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static unsigned int svc_tcp_restore_pages(struct svc_sock *svsk , struct svc_rqst *rqstp ) 
{ 
  unsigned int i ;
  unsigned int len ;
  unsigned int npages ;
  long tmp ;

  {
#line 882
  if (svsk->sk_datalen == 0U) {
#line 883
    return (0U);
  } else {

  }
#line 884
  len = svsk->sk_datalen;
#line 885
  npages = (unsigned int )(((unsigned long )len + 4095UL) >> 12);
#line 886
  i = 0U;
#line 886
  goto ldv_50116;
  ldv_50115: ;
#line 887
  if ((unsigned long )rqstp->rq_pages[i] != (unsigned long )((struct page *)0)) {
    {
#line 888
    put_page(rqstp->rq_pages[i]);
    }
  } else {

  }
  {
#line 889
  tmp = __builtin_expect((unsigned long )svsk->sk_pages[i] == (unsigned long )((struct page *)0),
                         0L);
  }
#line 889
  if (tmp != 0L) {
    {
#line 889
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svcsock.c"),
                         "i" (889), "i" (12UL));
#line 889
    __builtin_unreachable();
    }
  } else {

  }
#line 890
  rqstp->rq_pages[i] = svsk->sk_pages[i];
#line 891
  svsk->sk_pages[i] = (struct page *)0;
#line 886
  i = i + 1U;
  ldv_50116: ;
#line 886
  if (i < npages) {
#line 888
    goto ldv_50115;
  } else {

  }
  {
#line 893
  rqstp->rq_arg.head[0].iov_base = lowmem_page_address((struct page  const  *)rqstp->rq_pages[0]);
  }
#line 894
  return (len);
}
}
#line 897 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_save_pages(struct svc_sock *svsk , struct svc_rqst *rqstp ) 
{ 
  unsigned int i ;
  unsigned int len ;
  unsigned int npages ;

  {
#line 901
  if (svsk->sk_datalen == 0U) {
#line 902
    return;
  } else {

  }
#line 903
  len = svsk->sk_datalen;
#line 904
  npages = (unsigned int )(((unsigned long )len + 4095UL) >> 12);
#line 905
  i = 0U;
#line 905
  goto ldv_50126;
  ldv_50125: 
#line 906
  svsk->sk_pages[i] = rqstp->rq_pages[i];
#line 907
  rqstp->rq_pages[i] = (struct page *)0;
#line 905
  i = i + 1U;
  ldv_50126: ;
#line 905
  if (i < npages) {
#line 907
    goto ldv_50125;
  } else {

  }

#line 912
  return;
}
}
#line 911 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_clear_pages(struct svc_sock *svsk ) 
{ 
  unsigned int i ;
  unsigned int len ;
  unsigned int npages ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 915
  if (svsk->sk_datalen == 0U) {
#line 916
    goto out;
  } else {

  }
#line 917
  len = svsk->sk_datalen;
#line 918
  npages = (unsigned int )(((unsigned long )len + 4095UL) >> 12);
#line 919
  i = 0U;
#line 919
  goto ldv_50142;
  ldv_50141: ;
#line 920
  if ((unsigned long )svsk->sk_pages[i] == (unsigned long )((struct page *)0)) {
    {
#line 921
    __ret_warn_once = 1;
#line 921
    tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 921
    if (tmp___1 != 0L) {
      {
#line 921
      __ret_warn_on = ! __warned;
#line 921
      tmp = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 921
      if (tmp != 0L) {
        {
#line 921
        warn_slowpath_null("net/sunrpc/svcsock.c", 921);
        }
      } else {

      }
      {
#line 921
      tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 921
      if (tmp___0 != 0L) {
#line 921
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 921
    __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 922
    goto ldv_50140;
  } else {

  }
  {
#line 924
  put_page(svsk->sk_pages[i]);
#line 925
  svsk->sk_pages[i] = (struct page *)0;
  }
  ldv_50140: 
#line 919
  i = i + 1U;
  ldv_50142: ;
#line 919
  if (i < npages) {
#line 921
    goto ldv_50141;
  } else {

  }

  out: 
#line 928
  svsk->sk_tcplen = 0U;
#line 929
  svsk->sk_datalen = 0U;
#line 930
  return;
}
}
#line 936 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_tcp_recv_record(struct svc_sock *svsk , struct svc_rqst *rqstp ) 
{ 
  struct svc_serv *serv ;
  unsigned int want ;
  int len ;
  struct kvec iov ;
  long tmp ;
  u32 tmp___0 ;
  long tmp___1 ;
  u32 tmp___2 ;
  int tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  long tmp___6 ;

  {
  {
#line 938
  serv = svsk->sk_xprt.xpt_server;
#line 942
  clear_bit(3, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
  }
#line 944
  if (svsk->sk_tcplen <= 3U) {
    {
#line 947
    want = 4U - svsk->sk_tcplen;
#line 948
    iov.iov_base = (void *)((char *)(& svsk->sk_reclen) + (unsigned long )svsk->sk_tcplen);
#line 949
    iov.iov_len = (size_t )want;
#line 950
    len = svc_recvfrom(rqstp, & iov, 1, (int )want);
    }
#line 950
    if (len < 0) {
#line 951
      goto error;
    } else {

    }
#line 952
    svsk->sk_tcplen = svsk->sk_tcplen + (u32 )len;
#line 954
    if ((unsigned int )len < want) {
      {
#line 955
      tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
      }
#line 955
      if (tmp != 0L) {
        {
#line 955
        printk("\001dsvc: short recvfrom while reading record length (%d of %d)\n",
               len, want);
        }
      } else {

      }
#line 957
      return (-11);
    } else {

    }
    {
#line 960
    tmp___1 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 960
    if (tmp___1 != 0L) {
      {
#line 960
      tmp___0 = svc_sock_reclen(svsk);
#line 960
      printk("\001dsvc: TCP record, %d bytes\n", tmp___0);
      }
    } else {

    }
    {
#line 961
    tmp___4 = svc_sock_reclen(svsk);
    }
#line 961
    if (tmp___4 + svsk->sk_datalen > serv->sv_max_mesg) {
      {
#line 963
      tmp___3 = net_ratelimit();
      }
#line 963
      if (tmp___3 != 0) {
        {
#line 963
        tmp___2 = svc_sock_reclen(svsk);
#line 963
        printk("\rRPC: fragment too large: %d\n", tmp___2);
        }
      } else {

      }
#line 965
      goto err_delete;
    } else {

    }
  } else {

  }
  {
#line 969
  tmp___5 = svc_sock_reclen(svsk);
  }
#line 969
  return ((int )tmp___5);
  error: 
  {
#line 971
  tmp___6 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 971
  if (tmp___6 != 0L) {
    {
#line 971
    printk("\001dRPC: TCP recv_record got %d\n", len);
    }
  } else {

  }
#line 972
  return (len);
  err_delete: 
  {
#line 974
  set_bit(2U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
  }
#line 975
  return (-11);
}
}
#line 978 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int receive_cb_reply(struct svc_sock *svsk , struct svc_rqst *rqstp ) 
{ 
  struct rpc_xprt *bc_xprt ;
  struct rpc_rqst *req ;
  struct kvec *src ;
  struct kvec *dst ;
  __be32 *p ;
  __be32 xid ;
  __be32 calldir ;
  __be32 *tmp ;
  __u32 tmp___0 ;

  {
#line 980
  bc_xprt = svsk->sk_xprt.xpt_bc_xprt;
#line 981
  req = (struct rpc_rqst *)0;
#line 983
  p = (__be32 *)rqstp->rq_arg.head[0].iov_base;
#line 987
  tmp = p;
#line 987
  p = p + 1;
#line 987
  xid = *tmp;
#line 988
  calldir = *p;
#line 990
  if ((unsigned long )bc_xprt != (unsigned long )((struct rpc_xprt *)0)) {
    {
#line 991
    req = xprt_lookup_rqst(bc_xprt, xid);
    }
  } else {

  }
#line 993
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
    {
#line 994
    tmp___0 = __fswab32(calldir);
#line 994
    printk("\r%s: Got unrecognized reply: calldir 0x%x xpt_bc_xprt %p xid %08x\n",
           "receive_cb_reply", tmp___0, bc_xprt, xid);
    }
#line 999
    return (-11);
  } else {

  }
  {
#line 1002
  memcpy((void *)(& req->rq_private_buf), (void const   *)(& req->rq_rcv_buf), 64UL);
#line 1008
  dst = (struct kvec *)(& req->rq_private_buf.head);
#line 1009
  src = (struct kvec *)(& rqstp->rq_arg.head);
  }
#line 1010
  if (dst->iov_len < src->iov_len) {
#line 1011
    return (-11);
  } else {

  }
  {
#line 1012
  memcpy(dst->iov_base, (void const   *)src->iov_base, src->iov_len);
#line 1013
  xprt_complete_rqst(req->rq_task, (int )rqstp->rq_arg.len);
#line 1014
  rqstp->rq_arg.len = 0U;
  }
#line 1015
  return (0);
}
}
#line 1018 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int copy_pages_to_kvecs(struct kvec *vec , struct page **pages , int len ) 
{ 
  int i ;
  int t ;

  {
#line 1020
  i = 0;
#line 1021
  t = 0;
#line 1023
  goto ldv_50174;
  ldv_50173: 
  {
#line 1024
  (vec + (unsigned long )i)->iov_base = lowmem_page_address((struct page  const  *)*(pages + (unsigned long )i));
#line 1025
  (vec + (unsigned long )i)->iov_len = 4096UL;
#line 1026
  i = i + 1;
#line 1027
  t = (int )((unsigned int )t + 4096U);
  }
  ldv_50174: ;
#line 1023
  if (t < len) {
#line 1025
    goto ldv_50173;
  } else {

  }

#line 1029
  return (i);
}
}
#line 1032 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_fragment_received(struct svc_sock *svsk ) 
{ 
  int tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  long tmp___2 ;

  {
  {
#line 1035
  tmp = svc_recv_available(svsk);
  }
#line 1035
  if ((unsigned int )tmp > 4U) {
    {
#line 1036
    set_bit(3U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
    }
  } else {

  }
  {
#line 1037
  tmp___2 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1037
  if (tmp___2 != 0L) {
    {
#line 1037
    tmp___0 = svc_sock_reclen(svsk);
#line 1037
    tmp___1 = svc_sock_final_rec(svsk);
#line 1037
    printk("\001dsvc: TCP %s record (%d bytes)\n", tmp___1 != 0U ? (char *)"final" : (char *)"nonfinal",
           tmp___0);
    }
  } else {

  }
#line 1040
  svsk->sk_tcplen = 0U;
#line 1041
  svsk->sk_reclen = 0U;
#line 1042
  return;
}
}
#line 1047 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_tcp_recvfrom(struct svc_rqst *rqstp ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct svc_serv *serv ;
  int len ;
  struct kvec *vec ;
  unsigned int want ;
  unsigned int base ;
  __be32 *p ;
  __be32 calldir ;
  int pnum ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  long tmp___5 ;
  u32 tmp___6 ;
  long tmp___7 ;

  {
  {
#line 1050
  __mptr = (struct svc_xprt  const  *)rqstp->rq_xprt;
#line 1050
  svsk = (struct svc_sock *)__mptr;
#line 1051
  serv = svsk->sk_xprt.xpt_server;
#line 1059
  tmp___2 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1059
  if (tmp___2 != 0L) {
    {
#line 1059
    tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 1059
    tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 1059
    tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 1059
    printk("\001dsvc: tcp_recv %p data %d conn %d close %d\n", svsk, tmp___1, tmp___0,
           tmp);
    }
  } else {

  }
  {
#line 1064
  len = svc_tcp_recv_record(svsk, rqstp);
  }
#line 1065
  if (len < 0) {
#line 1066
    goto error;
  } else {

  }
  {
#line 1068
  base = svc_tcp_restore_pages(svsk, rqstp);
#line 1069
  tmp___3 = svc_sock_reclen(svsk);
#line 1069
  want = (tmp___3 - svsk->sk_tcplen) + 4U;
#line 1071
  vec = (struct kvec *)(& rqstp->rq_vec);
#line 1073
  pnum = copy_pages_to_kvecs(vec, (struct page **)(& rqstp->rq_pages), (int )(svsk->sk_datalen + want));
#line 1076
  rqstp->rq_respages = (struct page **)(& rqstp->rq_pages) + (unsigned long )pnum;
#line 1077
  rqstp->rq_next_page = rqstp->rq_respages + 1UL;
#line 1080
  len = svc_partial_recvfrom(rqstp, vec, pnum, (int )want, base);
  }
#line 1081
  if (len >= 0) {
#line 1082
    svsk->sk_tcplen = svsk->sk_tcplen + (u32 )len;
#line 1083
    svsk->sk_datalen = svsk->sk_datalen + (u32 )len;
  } else {

  }
#line 1085
  if ((unsigned int )len != want) {
#line 1085
    goto _L;
  } else {
    {
#line 1085
    tmp___6 = svc_sock_final_rec(svsk);
    }
#line 1085
    if (tmp___6 == 0U) {
      _L: /* CIL Label */ 
      {
#line 1086
      svc_tcp_save_pages(svsk, rqstp);
      }
#line 1087
      if (len < 0 && len != -11) {
#line 1088
        goto err_delete;
      } else {

      }
#line 1089
      if ((unsigned int )len == want) {
        {
#line 1090
        svc_tcp_fragment_received(svsk);
        }
      } else {
        {
#line 1092
        tmp___5 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
        }
#line 1092
        if (tmp___5 != 0L) {
          {
#line 1092
          tmp___4 = svc_sock_reclen(svsk);
#line 1092
          printk("\001dsvc: incomplete TCP record (%d of %d)\n", (int )(svsk->sk_tcplen - 4U),
                 tmp___4);
          }
        } else {

        }
      }
#line 1095
      goto err_noclose;
    } else {

    }
  }
#line 1098
  if (svsk->sk_datalen <= 7U) {
#line 1099
    svsk->sk_datalen = 0U;
#line 1100
    goto err_delete;
  } else {

  }
#line 1103
  rqstp->rq_arg.len = svsk->sk_datalen;
#line 1104
  rqstp->rq_arg.page_base = 0U;
#line 1105
  if ((size_t )rqstp->rq_arg.len <= rqstp->rq_arg.head[0].iov_len) {
#line 1106
    rqstp->rq_arg.head[0].iov_len = (size_t )rqstp->rq_arg.len;
#line 1107
    rqstp->rq_arg.page_len = 0U;
  } else {
#line 1109
    rqstp->rq_arg.page_len = rqstp->rq_arg.len - (unsigned int )rqstp->rq_arg.head[0].iov_len;
  }
#line 1111
  rqstp->rq_xprt_ctxt = (void *)0;
#line 1112
  rqstp->rq_prot = 6U;
#line 1114
  p = (__be32 *)rqstp->rq_arg.head[0].iov_base;
#line 1115
  calldir = *(p + 1UL);
#line 1116
  if (calldir != 0U) {
    {
#line 1117
    len = receive_cb_reply(svsk, rqstp);
    }
  } else {

  }
  {
#line 1120
  svsk->sk_datalen = 0U;
#line 1121
  svc_tcp_fragment_received(svsk);
  }
#line 1123
  if (len < 0) {
#line 1124
    goto error;
  } else {

  }
  {
#line 1126
  svc_xprt_copy_addrs(rqstp, & svsk->sk_xprt);
  }
#line 1127
  if ((unsigned long )serv->sv_stats != (unsigned long )((struct svc_stat *)0)) {
#line 1128
    (serv->sv_stats)->nettcpcnt = (serv->sv_stats)->nettcpcnt + 1U;
  } else {

  }
#line 1130
  return ((int )rqstp->rq_arg.len);
  error: ;
#line 1133
  if (len != -11) {
#line 1134
    goto err_delete;
  } else {

  }
  {
#line 1135
  tmp___7 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1135
  if (tmp___7 != 0L) {
    {
#line 1135
    printk("\001dRPC: TCP recvfrom got EAGAIN\n");
    }
  } else {

  }
#line 1136
  return (0);
  err_delete: 
  {
#line 1138
  printk("\r%s: recvfrom returned errno %d\n", (svsk->sk_xprt.xpt_server)->sv_name,
         - len);
#line 1140
  set_bit(2U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
  }
  err_noclose: ;
#line 1142
  return (0);
}
}
#line 1148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_tcp_sendto(struct svc_rqst *rqstp ) 
{ 
  struct xdr_buf *xbufp ;
  int sent ;
  __be32 reclen ;
  __u32 tmp ;

  {
  {
#line 1150
  xbufp = & rqstp->rq_res;
#line 1158
  tmp = __fswab32((xbufp->len - 4U) | 2147483648U);
#line 1158
  reclen = tmp;
#line 1159
  memcpy(xbufp->head[0].iov_base, (void const   *)(& reclen), 4UL);
#line 1161
  sent = svc_sendto(rqstp, & rqstp->rq_res);
  }
#line 1162
  if ((unsigned int )sent != xbufp->len) {
    {
#line 1163
    printk("\rrpc-srv/tcp: %s: %s %d when sending %d bytes - shutting down socket\n",
           ((rqstp->rq_xprt)->xpt_server)->sv_name, sent < 0 ? (char *)"got error" : (char *)"sent only",
           sent, xbufp->len);
#line 1169
    set_bit(2U, (unsigned long volatile   *)(& (rqstp->rq_xprt)->xpt_flags));
#line 1170
    svc_xprt_enqueue(rqstp->rq_xprt);
#line 1171
    sent = -11;
    }
  } else {

  }
#line 1173
  return (sent);
}
}
#line 1179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_prep_reply_hdr(struct svc_rqst *rqstp ) 
{ 
  struct kvec *resv ;

  {
  {
#line 1181
  resv = (struct kvec *)(& rqstp->rq_res.head);
#line 1184
  svc_putnl(resv, 0U);
  }
#line 1185
  return;
}
}
#line 1187 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static int svc_tcp_has_wspace(struct svc_xprt *xprt ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct svc_serv *serv ;
  int required ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1189
  __mptr = (struct svc_xprt  const  *)xprt;
#line 1189
  svsk = (struct svc_sock *)__mptr;
#line 1190
  serv = svsk->sk_xprt.xpt_server;
#line 1193
  tmp = constant_test_bit(11U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 1193
  if (tmp != 0) {
#line 1194
    return (1);
  } else {

  }
  {
#line 1195
  tmp___0 = atomic_read((atomic_t const   *)(& xprt->xpt_reserved));
#line 1195
  required = (int )((unsigned int )tmp___0 + serv->sv_max_mesg);
#line 1196
  tmp___1 = sk_stream_wspace((struct sock  const  *)svsk->sk_sk);
  }
#line 1196
  if (tmp___1 >= required) {
#line 1197
    return (1);
  } else {

  }
  {
#line 1198
  set_bit(2U, (unsigned long volatile   *)(& (svsk->sk_sock)->flags));
  }
#line 1199
  return (0);
}
}
#line 1202 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt *svc_tcp_create(struct svc_serv *serv , struct net *net , struct sockaddr *sa ,
                                       int salen , int flags ) 
{ 
  struct svc_xprt *tmp ;

  {
  {
#line 1207
  tmp = svc_create_socket(serv, 6, net, sa, salen, flags);
  }
#line 1207
  return (tmp);
}
}
#line 1216 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt *svc_bc_tcp_create(struct svc_serv *serv , struct net *net ,
                                          struct sockaddr *sa , int salen , int flags ) 
{ 
  struct svc_xprt *tmp ;

  {
  {
#line 1221
  tmp = svc_bc_create_socket(serv, 6, net, sa, salen, flags);
  }
#line 1221
  return (tmp);
}
}
#line 1224 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_bc_tcp_sock_detach(struct svc_xprt *xprt ) 
{ 


  {
#line 1226
  return;
}
}
#line 1228 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt_ops svc_tcp_bc_ops  = 
#line 1228
     {& svc_bc_tcp_create, 0, 0, 0, & svc_tcp_prep_reply_hdr, 0, 0, & svc_bc_tcp_sock_detach,
    & svc_bc_sock_free};
#line 1235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt_class svc_tcp_bc_class  =    {"tcp-bc", & __this_module, & svc_tcp_bc_ops, {0, 0}, 1048576U};
#line 1242 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_init_bc_xprt_sock(void) 
{ 


  {
  {
#line 1244
  svc_reg_xprt_class(& svc_tcp_bc_class);
  }
#line 1245
  return;
}
}
#line 1247 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_cleanup_bc_xprt_sock(void) 
{ 


  {
  {
#line 1249
  svc_unreg_xprt_class(& svc_tcp_bc_class);
  }
#line 1250
  return;
}
}
#line 1261 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt_ops svc_tcp_ops  = 
#line 1261
     {& svc_tcp_create, & svc_tcp_accept, & svc_tcp_has_wspace, & svc_tcp_recvfrom,
    & svc_tcp_prep_reply_hdr, & svc_tcp_sendto, & svc_release_skb, & svc_tcp_sock_detach,
    & svc_sock_free};
#line 1273 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt_class svc_tcp_class  =    {"tcp", & __this_module, & svc_tcp_ops, {0, 0}, 1048576U};
#line 1280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
void svc_init_xprt_sock(void) 
{ 


  {
  {
#line 1282
  svc_reg_xprt_class(& svc_tcp_class);
#line 1283
  svc_reg_xprt_class(& svc_udp_class);
#line 1284
  svc_init_bc_xprt_sock();
  }
#line 1285
  return;
}
}
#line 1287 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
void svc_cleanup_xprt_sock(void) 
{ 


  {
  {
#line 1289
  svc_unreg_xprt_class(& svc_tcp_class);
#line 1290
  svc_unreg_xprt_class(& svc_udp_class);
#line 1291
  svc_cleanup_bc_xprt_sock();
  }
#line 1292
  return;
}
}
#line 1294 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_init(struct svc_sock *svsk , struct svc_serv *serv ) 
{ 
  struct sock *sk ;
  struct net *tmp ;
  long tmp___0 ;
  long tmp___1 ;
  struct tcp_sock *tmp___2 ;
  struct tcp_sock *tmp___3 ;

  {
  {
#line 1296
  sk = svsk->sk_sk;
#line 1298
  tmp = sock_net((struct sock  const  *)(svsk->sk_sock)->sk);
#line 1298
  svc_xprt_init(tmp, & svc_tcp_class, & svsk->sk_xprt, serv);
#line 1300
  set_bit(12U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
  }
#line 1301
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 10U) {
    {
#line 1302
    tmp___0 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 1302
    if (tmp___0 != 0L) {
      {
#line 1302
      printk("\001dsetting up TCP socket for listening\n");
      }
    } else {

    }
    {
#line 1303
    set_bit(11U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 1304
    sk->sk_data_ready = & svc_tcp_listen_data_ready;
#line 1305
    set_bit(1U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
    }
  } else {
    {
#line 1307
    tmp___1 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 1307
    if (tmp___1 != 0L) {
      {
#line 1307
      printk("\001dsetting up TCP socket for reading\n");
      }
    } else {

    }
    {
#line 1308
    sk->sk_state_change = & svc_tcp_state_change;
#line 1309
    sk->sk_data_ready = & svc_tcp_data_ready;
#line 1310
    sk->sk_write_space = & svc_tcp_write_space;
#line 1312
    svsk->sk_reclen = 0U;
#line 1313
    svsk->sk_tcplen = 0U;
#line 1314
    svsk->sk_datalen = 0U;
#line 1315
    memset((void *)(& svsk->sk_pages), 0, 2072UL);
#line 1317
    tmp___2 = tcp_sk((struct sock  const  *)sk);
#line 1317
    tmp___3 = tcp_sk((struct sock  const  *)sk);
#line 1317
    tmp___2->nonagle = (unsigned int )tmp___3->nonagle | 1U;
#line 1319
    set_bit(3U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
    }
#line 1320
    if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) != 1U) {
      {
#line 1321
      set_bit(2U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
      }
    } else {

    }
  }
#line 1323
  return;
}
}
#line 1325 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
void svc_sock_update_bufs(struct svc_serv *serv ) 
{ 
  struct svc_sock *svsk ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 1333
  spin_lock_bh(& serv->sv_lock);
#line 1334
  __mptr = (struct list_head  const  *)serv->sv_permsocks.next;
#line 1334
  svsk = (struct svc_sock *)((char *)__mptr + 0xffffffffffffffe8UL);
  }
#line 1334
  goto ldv_50270;
  ldv_50269: 
  {
#line 1335
  set_bit(7U, (unsigned long volatile   *)(& svsk->sk_xprt.xpt_flags));
#line 1334
  __mptr___0 = (struct list_head  const  *)svsk->sk_xprt.xpt_list.next;
#line 1334
  svsk = (struct svc_sock *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  }
  ldv_50270: ;
#line 1334
  if ((unsigned long )(& svsk->sk_xprt.xpt_list) != (unsigned long )(& serv->sv_permsocks)) {
#line 1336
    goto ldv_50269;
  } else {

  }
  {
#line 1336
  spin_unlock_bh(& serv->sv_lock);
  }
#line 1337
  return;
}
}
#line 1344 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_sock *svc_setup_socket(struct svc_serv *serv , struct socket *sock ,
                                         int flags ) 
{ 
  struct svc_sock *svsk ;
  struct sock *inet ;
  int pmap_register ;
  int err ;
  long tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  struct inet_sock *tmp___2 ;
  __u16 tmp___3 ;
  struct net *tmp___4 ;
  void *tmp___5 ;
  long tmp___6 ;

  {
  {
#line 1350
  pmap_register = ((unsigned int )flags & 1U) == 0U;
#line 1351
  err = 0;
#line 1353
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1353
  if (tmp != 0L) {
    {
#line 1353
    printk("\001dsvc: svc_setup_socket %p\n", sock);
    }
  } else {

  }
  {
#line 1354
  tmp___0 = kzalloc(3088UL, 208U);
#line 1354
  svsk = (struct svc_sock *)tmp___0;
  }
#line 1355
  if ((unsigned long )svsk == (unsigned long )((struct svc_sock *)0)) {
    {
#line 1356
    tmp___1 = ERR_PTR(-12L);
    }
#line 1356
    return ((struct svc_sock *)tmp___1);
  } else {

  }
#line 1358
  inet = sock->sk;
#line 1361
  if (pmap_register != 0) {
    {
#line 1362
    tmp___2 = inet_sk((struct sock  const  *)inet);
#line 1362
    tmp___3 = __fswab16((int )tmp___2->inet_sport);
#line 1362
    tmp___4 = sock_net((struct sock  const  *)sock->sk);
#line 1362
    err = svc_register((struct svc_serv  const  *)serv, tmp___4, (int const   )inet->__sk_common.skc_family,
                       (int )inet->sk_protocol, (int )tmp___3);
    }
  } else {

  }
#line 1366
  if (err < 0) {
    {
#line 1367
    kfree((void const   *)svsk);
#line 1368
    tmp___5 = ERR_PTR((long )err);
    }
#line 1368
    return ((struct svc_sock *)tmp___5);
  } else {

  }
#line 1371
  inet->sk_user_data = (void *)svsk;
#line 1372
  svsk->sk_sock = sock;
#line 1373
  svsk->sk_sk = inet;
#line 1374
  svsk->sk_ostate = inet->sk_state_change;
#line 1375
  svsk->sk_odata = inet->sk_data_ready;
#line 1376
  svsk->sk_owspace = inet->sk_write_space;
#line 1379
  if ((int )sock->type == 2) {
    {
#line 1380
    svc_udp_init(svsk, serv);
    }
  } else {
    {
#line 1385
    svc_sock_setbufsize(svsk->sk_sock, serv->sv_max_mesg * 4U, serv->sv_max_mesg * 4U);
#line 1387
    svc_tcp_init(svsk, serv);
    }
  }
  {
#line 1390
  tmp___6 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1390
  if (tmp___6 != 0L) {
    {
#line 1390
    printk("\001dsvc: svc_setup_socket created %p (inet %p)\n", svsk, svsk->sk_sk);
    }
  } else {

  }
#line 1393
  return (svsk);
}
}
#line 1396 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
bool svc_alien_sock(struct net *net , int fd ) 
{ 
  int err ;
  struct socket *sock ;
  struct socket *tmp ;
  bool ret ;
  struct net *tmp___0 ;

  {
  {
#line 1399
  tmp = sockfd_lookup(fd, & err);
#line 1399
  sock = tmp;
#line 1400
  ret = 0;
  }
#line 1402
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 1403
    goto out;
  } else {

  }
  {
#line 1404
  tmp___0 = sock_net((struct sock  const  *)sock->sk);
  }
#line 1404
  if ((unsigned long )tmp___0 != (unsigned long )net) {
#line 1405
    ret = 1;
  } else {

  }
  {
#line 1406
  fput(sock->file);
  }
  out: ;
#line 1408
  return (ret);
}
}
#line 1423 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
int svc_addsock(struct svc_serv *serv , int const   fd , char *name_return , size_t const   len ) 
{ 
  int err ;
  struct socket *so ;
  struct socket *tmp ;
  struct svc_sock *svsk ;
  struct __kernel_sockaddr_storage addr ;
  struct sockaddr *sin ;
  int salen ;
  bool tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 1426
  err = 0;
#line 1427
  tmp = sockfd_lookup(fd, & err);
#line 1427
  so = tmp;
#line 1428
  svsk = (struct svc_sock *)0;
#line 1430
  sin = (struct sockaddr *)(& addr);
  }
#line 1433
  if ((unsigned long )so == (unsigned long )((struct socket *)0)) {
#line 1434
    return (err);
  } else {

  }
#line 1435
  err = -97;
#line 1436
  if ((unsigned int )(so->sk)->__sk_common.skc_family != 2U && (unsigned int )(so->sk)->__sk_common.skc_family != 10U) {
#line 1437
    goto out;
  } else {

  }
#line 1438
  err = -93;
#line 1439
  if ((so->sk)->sk_protocol != 6U && (so->sk)->sk_protocol != 17U) {
#line 1441
    goto out;
  } else {

  }
#line 1442
  err = -106;
#line 1443
  if ((unsigned int )so->state > 1U) {
#line 1444
    goto out;
  } else {

  }
  {
#line 1445
  err = -2;
#line 1446
  tmp___0 = ldv_try_module_get_10___0(& __this_module);
  }
#line 1446
  if (tmp___0) {
#line 1446
    tmp___1 = 0;
  } else {
#line 1446
    tmp___1 = 1;
  }
#line 1446
  if (tmp___1) {
#line 1447
    goto out;
  } else {

  }
  {
#line 1448
  svsk = svc_setup_socket(serv, so, 0);
#line 1449
  tmp___3 = IS_ERR((void const   *)svsk);
  }
#line 1449
  if (tmp___3 != 0L) {
    {
#line 1450
    ldv_module_put_11___0(& __this_module);
#line 1451
    tmp___2 = PTR_ERR((void const   *)svsk);
#line 1451
    err = (int )tmp___2;
    }
#line 1452
    goto out;
  } else {

  }
  {
#line 1454
  tmp___4 = kernel_getsockname(svsk->sk_sock, sin, & salen);
  }
#line 1454
  if (tmp___4 == 0) {
    {
#line 1455
    svc_xprt_set_local(& svsk->sk_xprt, (struct sockaddr  const  *)sin, (size_t const   )salen);
    }
  } else {

  }
  {
#line 1456
  svc_add_new_perm_xprt(serv, & svsk->sk_xprt);
#line 1457
  tmp___5 = svc_one_sock_name(svsk, name_return, (int )len);
  }
#line 1457
  return (tmp___5);
  out: 
  {
#line 1459
  fput(so->file);
  }
#line 1460
  return (err);
}
}
#line 1467 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt *svc_create_socket(struct svc_serv *serv , int protocol , struct net *net ,
                                          struct sockaddr *sin , int len , int flags ) 
{ 
  struct svc_sock *svsk ;
  struct socket *sock ;
  int error ;
  int type ;
  struct __kernel_sockaddr_storage addr ;
  struct sockaddr *newsin ;
  int newlen ;
  int family ;
  int val ;
  char buf[63U] ;
  char *tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  void *tmp___7 ;

  {
  {
#line 1478
  newsin = (struct sockaddr *)(& addr);
#line 1484
  tmp___0 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1484
  if (tmp___0 != 0L) {
    {
#line 1484
    tmp = __svc_print_addr((struct sockaddr  const  *)sin, (char *)(& buf), 63UL);
#line 1484
    printk("\001dsvc: svc_create_socket(%s, %d, %s)\n", (serv->sv_program)->pg_name,
           protocol, tmp);
    }
  } else {

  }
#line 1488
  if (protocol != 17 && protocol != 6) {
    {
#line 1489
    printk("\fsvc: only UDP and TCP sockets supported\n");
#line 1491
    tmp___1 = ERR_PTR(-22L);
    }
#line 1491
    return ((struct svc_xprt *)tmp___1);
  } else {

  }
#line 1494
  type = protocol == 17 ? 2 : 1;
  {
#line 1496
  if ((int )sin->sa_family == 10) {
#line 1496
    goto case_10;
  } else {

  }
#line 1499
  if ((int )sin->sa_family == 2) {
#line 1499
    goto case_2;
  } else {

  }
#line 1502
  goto switch_default;
  case_10: /* CIL Label */ 
#line 1497
  family = 10;
#line 1498
  goto ldv_50343;
  case_2: /* CIL Label */ 
#line 1500
  family = 2;
#line 1501
  goto ldv_50343;
  switch_default: /* CIL Label */ 
  {
#line 1503
  tmp___2 = ERR_PTR(-22L);
  }
#line 1503
  return ((struct svc_xprt *)tmp___2);
  switch_break: /* CIL Label */ ;
  }
  ldv_50343: 
  {
#line 1506
  error = __sock_create(net, family, type, protocol, & sock, 1);
  }
#line 1507
  if (error < 0) {
    {
#line 1508
    tmp___3 = ERR_PTR((long )error);
    }
#line 1508
    return ((struct svc_xprt *)tmp___3);
  } else {

  }
  {
#line 1510
  svc_reclassify_socket(sock);
#line 1517
  val = 1;
  }
#line 1518
  if (family == 10) {
    {
#line 1519
    kernel_setsockopt(sock, 41, 26, (char *)(& val), 4U);
    }
  } else {

  }
#line 1522
  if (type == 1) {
#line 1523
    (sock->sk)->__sk_common.skc_reuse = 1U;
  } else {

  }
  {
#line 1524
  error = kernel_bind(sock, sin, len);
  }
#line 1525
  if (error < 0) {
#line 1526
    goto bummer;
  } else {

  }
  {
#line 1528
  newlen = len;
#line 1529
  error = kernel_getsockname(sock, newsin, & newlen);
  }
#line 1530
  if (error < 0) {
#line 1531
    goto bummer;
  } else {

  }
#line 1533
  if (protocol == 6) {
    {
#line 1534
    error = kernel_listen(sock, 64);
    }
#line 1534
    if (error < 0) {
#line 1535
      goto bummer;
    } else {

    }
  } else {

  }
  {
#line 1538
  svsk = svc_setup_socket(serv, sock, flags);
#line 1539
  tmp___5 = IS_ERR((void const   *)svsk);
  }
#line 1539
  if (tmp___5 != 0L) {
    {
#line 1540
    tmp___4 = PTR_ERR((void const   *)svsk);
#line 1540
    error = (int )tmp___4;
    }
#line 1541
    goto bummer;
  } else {

  }
  {
#line 1543
  svc_xprt_set_local(& svsk->sk_xprt, (struct sockaddr  const  *)newsin, (size_t const   )newlen);
  }
#line 1544
  return ((struct svc_xprt *)svsk);
  bummer: 
  {
#line 1546
  tmp___6 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1546
  if (tmp___6 != 0L) {
    {
#line 1546
    printk("\001dsvc: svc_create_socket error = %d\n", - error);
    }
  } else {

  }
  {
#line 1547
  sock_release(sock);
#line 1548
  tmp___7 = ERR_PTR((long )error);
  }
#line 1548
  return ((struct svc_xprt *)tmp___7);
}
}
#line 1555 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_sock_detach(struct svc_xprt *xprt ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  struct sock *sk ;
  wait_queue_head_t *wq ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 1557
  __mptr = (struct svc_xprt  const  *)xprt;
#line 1557
  svsk = (struct svc_sock *)__mptr;
#line 1558
  sk = svsk->sk_sk;
#line 1561
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1561
  if (tmp != 0L) {
    {
#line 1561
    printk("\001dsvc: svc_sock_detach(%p)\n", svsk);
    }
  } else {

  }
  {
#line 1564
  sk->sk_state_change = svsk->sk_ostate;
#line 1565
  sk->sk_data_ready = svsk->sk_odata;
#line 1566
  sk->sk_write_space = svsk->sk_owspace;
#line 1568
  wq = sk_sleep(sk);
  }
#line 1569
  if ((unsigned long )wq != (unsigned long )((wait_queue_head_t *)0)) {
    {
#line 1569
    tmp___0 = waitqueue_active(wq);
    }
#line 1569
    if (tmp___0 != 0) {
      {
#line 1570
      __wake_up(wq, 1U, 1, (void *)0);
      }
    } else {

    }
  } else {

  }
#line 1571
  return;
}
}
#line 1576 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_tcp_sock_detach(struct svc_xprt *xprt ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 1578
  __mptr = (struct svc_xprt  const  *)xprt;
#line 1578
  svsk = (struct svc_sock *)__mptr;
#line 1580
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1580
  if (tmp != 0L) {
    {
#line 1580
    printk("\001dsvc: svc_tcp_sock_detach(%p)\n", svsk);
    }
  } else {

  }
  {
#line 1582
  svc_sock_detach(xprt);
#line 1584
  tmp___0 = constant_test_bit(11U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 1584
  if (tmp___0 == 0) {
    {
#line 1585
    svc_tcp_clear_pages(svsk);
#line 1586
    kernel_sock_shutdown(svsk->sk_sock, 2);
    }
  } else {

  }
#line 1588
  return;
}
}
#line 1593 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_sock_free(struct svc_xprt *xprt ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt  const  *__mptr ;
  long tmp ;

  {
  {
#line 1595
  __mptr = (struct svc_xprt  const  *)xprt;
#line 1595
  svsk = (struct svc_sock *)__mptr;
#line 1596
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1596
  if (tmp != 0L) {
    {
#line 1596
    printk("\001dsvc: svc_sock_free(%p)\n", svsk);
    }
  } else {

  }
#line 1598
  if ((unsigned long )(svsk->sk_sock)->file != (unsigned long )((struct file *)0)) {
    {
#line 1599
    fput((svsk->sk_sock)->file);
    }
  } else {
    {
#line 1601
    sock_release(svsk->sk_sock);
    }
  }
  {
#line 1602
  kfree((void const   *)svsk);
  }
#line 1603
  return;
}
}
#line 1609 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static struct svc_xprt *svc_bc_create_socket(struct svc_serv *serv , int protocol ,
                                             struct net *net , struct sockaddr *sin ,
                                             int len , int flags ) 
{ 
  struct svc_sock *svsk ;
  struct svc_xprt *xprt ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 1618
  if (protocol != 6) {
    {
#line 1619
    printk("\fsvc: only TCP sockets supported on shared back channel\n");
#line 1621
    tmp = ERR_PTR(-22L);
    }
#line 1621
    return ((struct svc_xprt *)tmp);
  } else {

  }
  {
#line 1624
  tmp___0 = kzalloc(3088UL, 208U);
#line 1624
  svsk = (struct svc_sock *)tmp___0;
  }
#line 1625
  if ((unsigned long )svsk == (unsigned long )((struct svc_sock *)0)) {
    {
#line 1626
    tmp___1 = ERR_PTR(-12L);
    }
#line 1626
    return ((struct svc_xprt *)tmp___1);
  } else {

  }
  {
#line 1628
  xprt = & svsk->sk_xprt;
#line 1629
  svc_xprt_init(net, & svc_tcp_bc_class, xprt, serv);
#line 1631
  serv->sv_bc_xprt = xprt;
  }
#line 1633
  return (xprt);
}
}
#line 1639 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcsock.c"
static void svc_bc_sock_free(struct svc_xprt *xprt ) 
{ 
  struct svc_xprt  const  *__mptr ;

  {
#line 1641
  if ((unsigned long )xprt != (unsigned long )((struct svc_xprt *)0)) {
    {
#line 1642
    __mptr = (struct svc_xprt  const  *)xprt;
#line 1642
    kfree((void const   *)((struct svc_sock *)__mptr));
    }
  } else {

  }
#line 1644
  return;
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svcsock.c.aux"
static bool ldv_try_module_get_10___0(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 154
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 154
  return (tmp != 0);
}
}
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svcsock.c.aux"
static void ldv_module_put_11___0(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 161
  ldv_module_put(ldv_func_arg1);
  }
#line 162
  return;
}
}
#line 622 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
  {
#line 624
  __hlist_del(n);
#line 625
  n->next = (struct hlist_node *)-2401263026317557504L;
#line 626
  n->pprev = (struct hlist_node **)-2401263026316508672L;
  }
#line 627
  return;
}
}
#line 637 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 639
  first = h->first;
#line 640
  n->next = first;
#line 641
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 642
    first->pprev = & n->next;
  } else {

  }
#line 643
  h->first = n;
#line 644
  n->pprev = & h->first;
#line 645
  return;
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kref.h"
__inline static void kref_get(struct kref *kref ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 47
  tmp = atomic_add_return(1, & kref->refcount);
#line 47
  __ret_warn_once = tmp <= 1;
#line 47
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 47
  if (tmp___2 != 0L) {
    {
#line 47
    __ret_warn_on = ! __warned;
#line 47
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 47
    if (tmp___0 != 0L) {
      {
#line 47
      warn_slowpath_null("include/linux/kref.h", 47);
      }
    } else {

    }
    {
#line 47
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 47
    if (tmp___1 != 0L) {
#line 47
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 47
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 49
  return;
}
}
#line 468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
static bool ldv_try_module_get_10___1(struct module *ldv_func_arg1 ) ;
#line 474
static void ldv_module_put_11___1(struct module *ldv_func_arg1 ) ;
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcauth.h"
int svc_set_client(struct svc_rqst *rqstp ) ;
#line 133
int svc_auth_register(rpc_authflavor_t flavor , struct auth_ops *aops ) ;
#line 134
void svc_auth_unregister(rpc_authflavor_t flavor ) ;
#line 137
void auth_domain_put(struct auth_domain *dom ) ;
#line 139
struct auth_domain *auth_domain_lookup(char *name , struct auth_domain *new ) ;
#line 140
struct auth_domain *auth_domain_find(char *name ) ;
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcauth.h"
__inline static unsigned long hash_str(char *name , int bits ) 
{ 
  unsigned long hash ;
  unsigned long l ;
  int len ;
  unsigned char c ;
  char *tmp ;
  long tmp___0 ;
  u64 tmp___1 ;

  {
#line 152
  hash = 0UL;
#line 153
  l = 0UL;
#line 154
  len = 0;
  ldv_39920: 
  {
#line 157
  tmp = name;
#line 157
  name = name + 1;
#line 157
  c = (unsigned char )*tmp;
#line 157
  tmp___0 = __builtin_expect((unsigned int )c == 0U, 0L);
  }
#line 157
  if (tmp___0 != 0L) {
#line 158
    c = (unsigned char )len;
#line 158
    len = -1;
  } else {

  }
#line 160
  l = (l << 8) | (unsigned long )c;
#line 161
  len = len + 1;
#line 162
  if ((len & 7) == 0) {
    {
#line 163
    tmp___1 = hash_64((u64 )(hash ^ l), 64U);
#line 163
    hash = (unsigned long )tmp___1;
    }
  } else {

  }
#line 164
  if (len != 0) {
#line 166
    goto ldv_39920;
  } else {

  }

#line 165
  return (hash >> (64 - bits));
}
}
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
struct auth_ops svcauth_null ;
#line 28
struct auth_ops svcauth_unix ;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
static spinlock_t authtab_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "authtab_lock", 0,
                                                     0UL}}}};
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
static struct auth_ops *authtab[8U]  = {      & svcauth_null,      & svcauth_unix};
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
int svc_authenticate(struct svc_rqst *rqstp , __be32 *authp ) 
{ 
  rpc_authflavor_t flavor ;
  struct auth_ops *aops ;
  long tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 42
  *authp = 0U;
#line 44
  flavor = svc_getnl((struct kvec *)(& rqstp->rq_arg.head));
#line 46
  tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
  }
#line 46
  if (tmp != 0L) {
    {
#line 46
    printk("\001dsvc: svc_authenticate (%d)\n", flavor);
    }
  } else {

  }
  {
#line 48
  spin_lock(& authtab_lock);
  }
#line 49
  if (flavor > 7U) {
    {
#line 51
    spin_unlock(& authtab_lock);
#line 52
    *authp = 16777216U;
    }
#line 53
    return (8);
  } else {
#line 49
    aops = authtab[flavor];
#line 49
    if ((unsigned long )aops == (unsigned long )((struct auth_ops *)0)) {
      {
#line 51
      spin_unlock(& authtab_lock);
#line 52
      *authp = 16777216U;
      }
#line 53
      return (8);
    } else {
      {
#line 49
      tmp___0 = ldv_try_module_get_10___1(aops->owner);
      }
#line 49
      if (tmp___0) {
#line 49
        tmp___1 = 0;
      } else {
#line 49
        tmp___1 = 1;
      }
#line 49
      if (tmp___1) {
        {
#line 51
        spin_unlock(& authtab_lock);
#line 52
        *authp = 16777216U;
        }
#line 53
        return (8);
      } else {

      }
    }
  }
  {
#line 55
  spin_unlock(& authtab_lock);
#line 57
  rqstp->rq_authop = aops;
#line 58
  tmp___2 = (*(aops->accept))(rqstp, authp);
  }
#line 58
  return (tmp___2);
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
int svc_set_client(struct svc_rqst *rqstp ) 
{ 
  int tmp ;

  {
  {
#line 64
  tmp = (*((rqstp->rq_authop)->set_client))(rqstp);
  }
#line 64
  return (tmp);
}
}
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
int svc_authorise(struct svc_rqst *rqstp ) 
{ 
  struct auth_ops *aops ;
  int rv ;

  {
#line 74
  aops = rqstp->rq_authop;
#line 75
  rv = 0;
#line 77
  rqstp->rq_authop = (struct auth_ops *)0;
#line 79
  if ((unsigned long )aops != (unsigned long )((struct auth_ops *)0)) {
    {
#line 80
    rv = (*(aops->release))(rqstp);
#line 81
    ldv_module_put_11___1(aops->owner);
    }
  } else {

  }
#line 83
  return (rv);
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
int svc_auth_register(rpc_authflavor_t flavor , struct auth_ops *aops ) 
{ 
  int rv ;

  {
  {
#line 89
  rv = -22;
#line 90
  spin_lock(& authtab_lock);
  }
#line 91
  if (flavor <= 7U && (unsigned long )authtab[flavor] == (unsigned long )((struct auth_ops *)0)) {
#line 92
    authtab[flavor] = aops;
#line 93
    rv = 0;
  } else {

  }
  {
#line 95
  spin_unlock(& authtab_lock);
  }
#line 96
  return (rv);
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
void svc_auth_unregister(rpc_authflavor_t flavor ) 
{ 


  {
  {
#line 103
  spin_lock(& authtab_lock);
  }
#line 104
  if (flavor <= 7U) {
#line 105
    authtab[flavor] = (struct auth_ops *)0;
  } else {

  }
  {
#line 106
  spin_unlock(& authtab_lock);
  }
#line 107
  return;
}
}
#line 122 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
static struct hlist_head auth_domain_table[64U]  ;
#line 123 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
static spinlock_t auth_domain_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "auth_domain_lock",
                                                     0, 0UL}}}};
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
void auth_domain_put(struct auth_domain *dom ) 
{ 
  int tmp ;

  {
  {
#line 128
  tmp = _atomic_dec_and_lock(& dom->ref.refcount, & auth_domain_lock);
  }
#line 128
  if (tmp != 0) {
    {
#line 129
    hlist_del(& dom->hash);
#line 130
    (*((dom->flavour)->domain_release))(dom);
#line 131
    spin_unlock(& auth_domain_lock);
    }
  } else {

  }
#line 133
  return;
}
}
#line 137 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
struct auth_domain *auth_domain_lookup(char *name , struct auth_domain *new ) 
{ 
  struct auth_domain *hp ;
  struct hlist_head *head ;
  unsigned long tmp ;
  struct hlist_node *____ptr ;
  struct hlist_node  const  *__mptr ;
  struct auth_domain *tmp___0 ;
  int tmp___1 ;
  struct hlist_node *____ptr___0 ;
  struct hlist_node  const  *__mptr___0 ;
  struct auth_domain *tmp___2 ;

  {
  {
#line 142
  tmp = hash_str(name, 6);
#line 142
  head = (struct hlist_head *)(& auth_domain_table) + tmp;
#line 144
  spin_lock(& auth_domain_lock);
#line 146
  ____ptr = head->first;
  }
#line 146
  if ((unsigned long )____ptr != (unsigned long )((struct hlist_node *)0)) {
#line 146
    __mptr = (struct hlist_node  const  *)____ptr;
#line 146
    tmp___0 = (struct auth_domain *)((char *)__mptr + 0xfffffffffffffff8UL);
  } else {
#line 146
    tmp___0 = (struct auth_domain *)0;
  }
#line 146
  hp = tmp___0;
#line 146
  goto ldv_40477;
  ldv_40476: 
  {
#line 147
  tmp___1 = strcmp((char const   *)hp->name, (char const   *)name);
  }
#line 147
  if (tmp___1 == 0) {
    {
#line 148
    kref_get(& hp->ref);
#line 149
    spin_unlock(& auth_domain_lock);
    }
#line 150
    return (hp);
  } else {

  }
#line 146
  ____ptr___0 = hp->hash.next;
#line 146
  if ((unsigned long )____ptr___0 != (unsigned long )((struct hlist_node *)0)) {
#line 146
    __mptr___0 = (struct hlist_node  const  *)____ptr___0;
#line 146
    tmp___2 = (struct auth_domain *)((char *)__mptr___0 + 0xfffffffffffffff8UL);
  } else {
#line 146
    tmp___2 = (struct auth_domain *)0;
  }
#line 146
  hp = tmp___2;
  ldv_40477: ;
#line 146
  if ((unsigned long )hp != (unsigned long )((struct auth_domain *)0)) {
#line 148
    goto ldv_40476;
  } else {

  }

#line 153
  if ((unsigned long )new != (unsigned long )((struct auth_domain *)0)) {
    {
#line 154
    hlist_add_head(& new->hash, head);
    }
  } else {

  }
  {
#line 155
  spin_unlock(& auth_domain_lock);
  }
#line 156
  return (new);
}
}
#line 160 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth.c"
struct auth_domain *auth_domain_find(char *name ) 
{ 
  struct auth_domain *tmp ;

  {
  {
#line 162
  tmp = auth_domain_lookup(name, (struct auth_domain *)0);
  }
#line 162
  return (tmp);
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svcauth.c.aux"
static bool ldv_try_module_get_10___1(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 154
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 154
  return (tmp != 0);
}
}
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svcauth.c.aux"
static void ldv_module_put_11___1(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 161
  ldv_module_put(ldv_func_arg1);
  }
#line 162
  return;
}
}
#line 346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kernel.h"
extern long simple_strtol(char const   * , char ** , unsigned int  ) ;
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/string_64.h"
extern char *strcpy(char * , char const   * ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 81
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
#line 84
  return ((int )c);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kref.h"
__inline static void kref_init(struct kref *kref ) 
{ 


  {
  {
#line 34
  atomic_set(& kref->refcount, 1);
  }
#line 35
  return;
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 71
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
#line 71
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 71
  if (tmp != 0L) {
    {
#line 71
    warn_slowpath_null("include/linux/kref.h", 71);
    }
  } else {

  }
  {
#line 71
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 73
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
  }
#line 73
  if (tmp___0 != 0) {
    {
#line 74
    (*release)(kref);
    }
#line 75
    return (1);
  } else {

  }
#line 77
  return (0);
}
}
#line 97 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ 
  int tmp ;

  {
  {
#line 99
  tmp = kref_sub(kref, 1U, release);
  }
#line 99
  return (tmp);
}
}
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/time.h"
extern void getboottime(struct timespec * ) ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/highuid.h"
extern int overflowuid ;
#line 35
extern int overflowgid ;
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static kuid_t make_kuid(struct user_namespace *from , uid_t uid ) 
{ 


  {
#line 154
  return (uid);
}
}
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static kgid_t make_kgid(struct user_namespace *from , gid_t gid ) 
{ 


  {
#line 159
  return (gid);
}
}
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static uid_t from_kuid_munged(struct user_namespace *to , kuid_t kuid ) 
{ 
  uid_t uid ;
  uid_t tmp ;

  {
  {
#line 174
  tmp = from_kuid(to, kuid);
#line 174
  uid = tmp;
  }
#line 175
  if (uid == 4294967295U) {
#line 176
    uid = (uid_t )overflowuid;
  } else {

  }
#line 177
  return (uid);
}
}
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/uidgid.h"
__inline static gid_t from_kgid_munged(struct user_namespace *to , kgid_t kgid ) 
{ 
  gid_t gid ;
  gid_t tmp ;

  {
  {
#line 182
  tmp = from_kgid(to, kgid);
#line 182
  gid = tmp;
  }
#line 183
  if (gid == 4294967295U) {
#line 184
    gid = (gid_t )overflowgid;
  } else {

  }
#line 185
  return (gid);
}
}
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/cred.h"
extern struct group_info *groups_alloc(int  ) ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seq_file.h"
extern int seq_puts(struct seq_file * , char const   * ) ;
#line 157 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
struct cache_head *sunrpc_cache_lookup(struct cache_detail *detail , struct cache_head *key ,
                                       int hash ) ;
#line 160
struct cache_head *sunrpc_cache_update(struct cache_detail *detail , struct cache_head *new ,
                                       struct cache_head *old , int hash ) ;
#line 169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
__inline static struct cache_head *cache_get(struct cache_head *h ) 
{ 


  {
  {
#line 171
  kref_get(& h->ref);
  }
#line 172
  return (h);
}
}
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
__inline static void cache_put(struct cache_head *h , struct cache_detail *cd ) 
{ 
  int tmp ;

  {
  {
#line 178
  tmp = atomic_read((atomic_t const   *)(& h->ref.refcount));
  }
#line 178
  if (tmp <= 2 && h->expiry_time < cd->nextcheck) {
#line 180
    cd->nextcheck = h->expiry_time;
  } else {

  }
  {
#line 181
  kref_put(& h->ref, cd->cache_put);
  }
#line 182
  return;
}
}
#line 184 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
__inline static int cache_valid(struct cache_head *h ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 192
  if (h->expiry_time != 0L) {
    {
#line 192
    tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& h->flags));
    }
#line 192
    if (tmp != 0) {
#line 192
      tmp___0 = 1;
    } else {
#line 192
      tmp___0 = 0;
    }
  } else {
#line 192
    tmp___0 = 0;
  }
#line 192
  return (tmp___0);
}
}
#line 195
int cache_check(struct cache_detail *detail , struct cache_head *h , struct cache_req *rqstp ) ;
#line 197
void cache_flush(void) ;
#line 198
void cache_purge(struct cache_detail *detail ) ;
#line 201
int cache_register_net(struct cache_detail *cd , struct net *net ) ;
#line 202
void cache_unregister_net(struct cache_detail *cd , struct net *net ) ;
#line 204
struct cache_detail *cache_create_net(struct cache_detail *tmpl , struct net *net ) ;
#line 205
void cache_destroy_net(struct cache_detail *cd , struct net *net ) ;
#line 213
void qword_add(char **bpp , int *lp , char *str ) ;
#line 215
int qword_get(char **bpp , char *dest , int bufsize ) ;
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
__inline static int get_int(char **bpp , int *anint ) 
{ 
  char buf[50U] ;
  char *ep ;
  int rv ;
  int len ;
  int tmp ;
  long tmp___0 ;

  {
  {
#line 222
  tmp = qword_get(bpp, (char *)(& buf), 50);
#line 222
  len = tmp;
  }
#line 224
  if (len < 0) {
#line 225
    return (-22);
  } else {

  }
#line 226
  if (len == 0) {
#line 227
    return (-2);
  } else {

  }
  {
#line 229
  tmp___0 = simple_strtol((char const   *)(& buf), & ep, 0U);
#line 229
  rv = (int )tmp___0;
  }
#line 230
  if ((int )((signed char )*ep) != 0) {
#line 231
    return (-22);
  } else {

  }
#line 233
  *anint = rv;
#line 234
  return (0);
}
}
#line 272 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
__inline static time_t get_expiry(char **bpp ) 
{ 
  int rv ;
  struct timespec boot ;
  int tmp ;

  {
  {
#line 277
  tmp = get_int(bpp, & rv);
  }
#line 277
  if (tmp != 0) {
#line 278
    return (0L);
  } else {

  }
#line 279
  if (rv < 0) {
#line 280
    return (0L);
  } else {

  }
  {
#line 281
  getboottime(& boot);
  }
#line 282
  return ((__kernel_time_t )rv - boot.tv_sec);
}
}
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/hash.h"
__inline static u32 hash_32(u32 val , unsigned int bits ) 
{ 
  u32 hash ;

  {
#line 61
  hash = val * 2654404609U;
#line 64
  return (hash >> (int )(32U - bits));
}
}
#line 136 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcauth.h"
struct auth_domain *unix_domain_find(char *name ) ;
#line 143
void svcauth_unix_purge(struct net *net ) ;
#line 144
void svcauth_unix_info_release(struct svc_xprt *xpt ) ;
#line 145
int svcauth_unix_set_client(struct svc_rqst *rqstp ) ;
#line 147
int unix_gid_cache_create(struct net *net ) ;
#line 148
void unix_gid_cache_destroy(struct net *net ) ;
#line 150 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcauth.h"
__inline static unsigned long hash_str___0(char *name , int bits ) 
{ 
  unsigned long hash ;
  unsigned long l ;
  int len ;
  unsigned char c ;
  char *tmp ;
  long tmp___0 ;
  u64 tmp___1 ;

  {
#line 152
  hash = 0UL;
#line 153
  l = 0UL;
#line 154
  len = 0;
  ldv_39912: 
  {
#line 157
  tmp = name;
#line 157
  name = name + 1;
#line 157
  c = (unsigned char )*tmp;
#line 157
  tmp___0 = __builtin_expect((unsigned int )c == 0U, 0L);
  }
#line 157
  if (tmp___0 != 0L) {
#line 158
    c = (unsigned char )len;
#line 158
    len = -1;
  } else {

  }
#line 160
  l = (l << 8) | (unsigned long )c;
#line 161
  len = len + 1;
#line 162
  if ((len & 7) == 0) {
    {
#line 163
    tmp___1 = hash_64((u64 )(hash ^ l), 64U);
#line 163
    hash = (unsigned long )tmp___1;
    }
  } else {

  }
#line 164
  if (len != 0) {
#line 166
    goto ldv_39912;
  } else {

  }

#line 165
  return (hash >> (64 - bits));
}
}
#line 288 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static struct sockaddr_in *svc_addr_in(struct svc_rqst  const  *rqst ) 
{ 


  {
#line 290
  return ((struct sockaddr_in *)(& rqst->rq_addr));
}
}
#line 293 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static struct sockaddr_in6 *svc_addr_in6(struct svc_rqst  const  *rqst ) 
{ 


  {
#line 295
  return ((struct sockaddr_in6 *)(& rqst->rq_addr));
}
}
#line 373 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static void __ipv6_addr_set_half(__be32 *addr , __be32 wh , __be32 wl ) 
{ 


  {
#line 389
  *addr = wh;
#line 390
  *(addr + 1UL) = wl;
#line 391
  return;
}
}
#line 393 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static void ipv6_addr_set(struct in6_addr *addr , __be32 w1 , __be32 w2 ,
                                   __be32 w3 , __be32 w4 ) 
{ 


  {
  {
#line 397
  __ipv6_addr_set_half((__be32 *)(& addr->in6_u.u6_addr32), w1, w2);
#line 398
  __ipv6_addr_set_half((__be32 *)(& addr->in6_u.u6_addr32) + 2UL, w3, w4);
  }
#line 399
  return;
}
}
#line 401 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static bool ipv6_addr_equal(struct in6_addr  const  *a1 , struct in6_addr  const  *a2 ) 
{ 
  unsigned long const   *ul1 ;
  unsigned long const   *ul2 ;

  {
#line 405
  ul1 = (unsigned long const   *)a1;
#line 406
  ul2 = (unsigned long const   *)a2;
#line 408
  return ((((unsigned long )*ul1 ^ (unsigned long )*ul2) | ((unsigned long )*(ul1 + 1UL) ^ (unsigned long )*(ul2 + 1UL))) == 0UL);
}
}
#line 519 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static u32 ipv6_addr_hash(struct in6_addr  const  *a ) 
{ 
  unsigned long const   *ul ;
  unsigned long x ;

  {
#line 522
  ul = (unsigned long const   *)a;
#line 523
  x = (unsigned long )*ul ^ (unsigned long )*(ul + 1UL);
#line 525
  return ((unsigned int )x ^ (unsigned int )(x >> 32));
}
}
#line 555 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static bool ipv6_addr_v4mapped(struct in6_addr  const  *a ) 
{ 


  {
#line 557
  return ((*((__be64 *)a) | (__be64 )(a->in6_u.u6_addr32[2] ^ 4294901760U)) == 0ULL);
}
}
#line 575 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static void ipv6_addr_set_v4mapped(__be32 const   addr , struct in6_addr *v4mapped ) 
{ 


  {
  {
#line 578
  ipv6_addr_set(v4mapped, 0U, 0U, 4294901760U, addr);
  }
#line 579
  return;
}
}
#line 16 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/addr.h"
size_t rpc_pton(struct net *net , char const   *buf , size_t const   buflen , struct sockaddr *sap ,
                size_t const   salen ) ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/netns.h"
int ip_map_cache_create(struct net *net ) ;
#line 42
void ip_map_cache_destroy(struct net *net ) ;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void svcauth_unix_domain_release(struct auth_domain *dom ) 
{ 
  struct unix_domain *ud ;
  struct auth_domain  const  *__mptr ;

  {
  {
#line 42
  __mptr = (struct auth_domain  const  *)dom;
#line 42
  ud = (struct unix_domain *)__mptr;
#line 44
  kfree((void const   *)dom->name);
#line 45
  kfree((void const   *)ud);
  }
#line 46
  return;
}
}
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
struct auth_domain *unix_domain_find(char *name ) 
{ 
  struct auth_domain *rv ;
  struct unix_domain *new ;
  void *tmp ;

  {
  {
#line 51
  new = (struct unix_domain *)0;
#line 53
  rv = auth_domain_lookup(name, (struct auth_domain *)0);
  }
  ldv_45970: ;
#line 55
  if ((unsigned long )rv != (unsigned long )((struct auth_domain *)0)) {
#line 56
    if ((unsigned long )new != (unsigned long )((struct unix_domain *)0) && (unsigned long )rv != (unsigned long )(& new->h)) {
      {
#line 57
      svcauth_unix_domain_release(& new->h);
      }
    } else {

    }
#line 59
    if ((unsigned long )rv->flavour != (unsigned long )(& svcauth_unix)) {
      {
#line 60
      auth_domain_put(rv);
      }
#line 61
      return ((struct auth_domain *)0);
    } else {

    }
#line 63
    return (rv);
  } else {

  }
  {
#line 66
  tmp = kmalloc(40UL, 208U);
#line 66
  new = (struct unix_domain *)tmp;
  }
#line 67
  if ((unsigned long )new == (unsigned long )((struct unix_domain *)0)) {
#line 68
    return ((struct auth_domain *)0);
  } else {

  }
  {
#line 69
  kref_init(& new->h.ref);
#line 70
  new->h.name = kstrdup((char const   *)name, 208U);
  }
#line 71
  if ((unsigned long )new->h.name == (unsigned long )((char *)0)) {
    {
#line 72
    kfree((void const   *)new);
    }
#line 73
    return ((struct auth_domain *)0);
  } else {

  }
  {
#line 75
  new->h.flavour = & svcauth_unix;
#line 76
  rv = auth_domain_lookup(name, & new->h);
  }
#line 77
  goto ldv_45970;
}
}
#line 96 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void ip_map_put(struct kref *kref ) 
{ 
  struct cache_head *item ;
  struct kref  const  *__mptr ;
  struct ip_map *im ;
  struct cache_head  const  *__mptr___0 ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 98
  __mptr = (struct kref  const  *)kref;
#line 98
  item = (struct cache_head *)((char *)__mptr + 0xffffffffffffffe8UL);
#line 99
  __mptr___0 = (struct cache_head  const  *)item;
#line 99
  im = (struct ip_map *)__mptr___0;
#line 101
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& item->flags));
  }
#line 101
  if (tmp != 0) {
    {
#line 101
    tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& item->flags));
    }
#line 101
    if (tmp___0 == 0) {
      {
#line 103
      auth_domain_put(& (im->m_client)->h);
      }
    } else {

    }
  } else {

  }
  {
#line 104
  kfree((void const   *)im);
  }
#line 105
  return;
}
}
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
__inline static int hash_ip6(struct in6_addr  const  *ip ) 
{ 
  u32 tmp ;
  u32 tmp___0 ;

  {
  {
#line 109
  tmp = ipv6_addr_hash(ip);
#line 109
  tmp___0 = hash_32(tmp, 8U);
  }
#line 109
  return ((int )tmp___0);
}
}
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int ip_map_match(struct cache_head *corig , struct cache_head *cnew ) 
{ 
  struct ip_map *orig ;
  struct cache_head  const  *__mptr ;
  struct ip_map *new ;
  struct cache_head  const  *__mptr___0 ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
  {
#line 113
  __mptr = (struct cache_head  const  *)corig;
#line 113
  orig = (struct ip_map *)__mptr;
#line 114
  __mptr___0 = (struct cache_head  const  *)cnew;
#line 114
  new = (struct ip_map *)__mptr___0;
#line 115
  tmp = strcmp((char const   *)(& orig->m_class), (char const   *)(& new->m_class));
  }
#line 115
  if (tmp == 0) {
    {
#line 115
    tmp___0 = ipv6_addr_equal((struct in6_addr  const  *)(& orig->m_addr), (struct in6_addr  const  *)(& new->m_addr));
    }
#line 115
    if ((int )tmp___0) {
#line 115
      tmp___1 = 1;
    } else {
#line 115
      tmp___1 = 0;
    }
  } else {
#line 115
    tmp___1 = 0;
  }
#line 115
  return (tmp___1);
}
}
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void ip_map_init(struct cache_head *cnew , struct cache_head *citem ) 
{ 
  struct ip_map *new ;
  struct cache_head  const  *__mptr ;
  struct ip_map *item ;
  struct cache_head  const  *__mptr___0 ;

  {
  {
#line 120
  __mptr = (struct cache_head  const  *)cnew;
#line 120
  new = (struct ip_map *)__mptr;
#line 121
  __mptr___0 = (struct cache_head  const  *)citem;
#line 121
  item = (struct ip_map *)__mptr___0;
#line 123
  strcpy((char *)(& new->m_class), (char const   *)(& item->m_class));
#line 124
  new->m_addr = item->m_addr;
  }
#line 125
  return;
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void update(struct cache_head *cnew , struct cache_head *citem ) 
{ 
  struct ip_map *new ;
  struct cache_head  const  *__mptr ;
  struct ip_map *item ;
  struct cache_head  const  *__mptr___0 ;

  {
  {
#line 128
  __mptr = (struct cache_head  const  *)cnew;
#line 128
  new = (struct ip_map *)__mptr;
#line 129
  __mptr___0 = (struct cache_head  const  *)citem;
#line 129
  item = (struct ip_map *)__mptr___0;
#line 131
  kref_get(& (item->m_client)->h.ref);
#line 132
  new->m_client = item->m_client;
  }
#line 133
  return;
}
}
#line 134 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static struct cache_head *ip_map_alloc(void) 
{ 
  struct ip_map *i ;
  void *tmp ;

  {
  {
#line 136
  tmp = kmalloc(72UL, 208U);
#line 136
  i = (struct ip_map *)tmp;
  }
#line 137
  if ((unsigned long )i != (unsigned long )((struct ip_map *)0)) {
#line 138
    return (& i->h);
  } else {
#line 140
    return ((struct cache_head *)0);
  }
}
}
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void ip_map_request(struct cache_detail *cd , struct cache_head *h , char **bpp ,
                           int *blen ) 
{ 
  char text_addr[40U] ;
  struct ip_map *im ;
  struct cache_head  const  *__mptr ;
  bool tmp ;

  {
  {
#line 148
  __mptr = (struct cache_head  const  *)h;
#line 148
  im = (struct ip_map *)__mptr;
#line 150
  tmp = ipv6_addr_v4mapped((struct in6_addr  const  *)(& im->m_addr));
  }
#line 150
  if ((int )tmp) {
    {
#line 151
    snprintf((char *)(& text_addr), 20UL, "%pI4", (__be32 *)(& im->m_addr.in6_u.u6_addr32) + 3UL);
    }
  } else {
    {
#line 153
    snprintf((char *)(& text_addr), 40UL, "%pI6", & im->m_addr);
    }
  }
  {
#line 155
  qword_add(bpp, blen, (char *)(& im->m_class));
#line 156
  qword_add(bpp, blen, (char *)(& text_addr));
#line 157
  *(*bpp + 0xffffffffffffffffUL) = 10;
  }
#line 158
  return;
}
}
#line 160
static struct ip_map *__ip_map_lookup(struct cache_detail *cd , char *class , struct in6_addr *addr ) ;
#line 161
static int __ip_map_update(struct cache_detail *cd , struct ip_map *ipm , struct unix_domain *udom ,
                           time_t expiry ) ;
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int ip_map_parse(struct cache_detail *cd , char *mesg , int mlen ) 
{ 
  char *buf ;
  int len ;
  char class[8U] ;
  union __anonunion_address_253 address ;
  struct sockaddr_in6 sin6 ;
  int err ;
  struct ip_map *ipmp ;
  struct auth_domain *dom ;
  time_t expiry ;
  size_t tmp ;
  struct auth_domain  const  *__mptr ;

  {
#line 169
  buf = mesg;
#line 184
  if ((int )((signed char )*(mesg + ((unsigned long )mlen + 0xffffffffffffffffUL))) != 10) {
#line 185
    return (-22);
  } else {

  }
  {
#line 186
  *(mesg + ((unsigned long )mlen + 0xffffffffffffffffUL)) = 0;
#line 189
  len = qword_get(& mesg, (char *)(& class), 8);
  }
#line 190
  if (len <= 0) {
#line 190
    return (-22);
  } else {

  }
  {
#line 193
  len = qword_get(& mesg, buf, mlen);
  }
#line 194
  if (len <= 0) {
#line 194
    return (-22);
  } else {

  }
  {
#line 196
  tmp = rpc_pton(cd->net, (char const   *)buf, (size_t const   )len, & address.sa,
                 28UL);
  }
#line 196
  if (tmp == 0UL) {
#line 197
    return (-22);
  } else {

  }
  {
#line 199
  if ((int )address.sa.sa_family == 2) {
#line 199
    goto case_2;
  } else {

  }
#line 206
  if ((int )address.sa.sa_family == 10) {
#line 206
    goto case_10;
  } else {

  }
#line 210
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 201
  sin6.sin6_family = 10U;
#line 202
  ipv6_addr_set_v4mapped(address.s4.sin_addr.s_addr, & sin6.sin6_addr);
  }
#line 204
  goto ldv_46066;
  case_10: /* CIL Label */ 
  {
#line 207
  memcpy((void *)(& sin6), (void const   *)(& address.s6), 28UL);
  }
#line 208
  goto ldv_46066;
  switch_default: /* CIL Label */ ;
#line 211
  return (-22);
  switch_break: /* CIL Label */ ;
  }
  ldv_46066: 
  {
#line 214
  expiry = get_expiry(& mesg);
  }
#line 215
  if (expiry == 0L) {
#line 216
    return (-22);
  } else {

  }
  {
#line 219
  len = qword_get(& mesg, buf, mlen);
  }
#line 220
  if (len < 0) {
#line 220
    return (-22);
  } else {

  }
#line 222
  if (len != 0) {
    {
#line 223
    dom = unix_domain_find(buf);
    }
#line 224
    if ((unsigned long )dom == (unsigned long )((struct auth_domain *)0)) {
#line 225
      return (-2);
    } else {

    }
  } else {
#line 227
    dom = (struct auth_domain *)0;
  }
  {
#line 230
  ipmp = __ip_map_lookup(cd, (char *)(& class), & sin6.sin6_addr);
  }
#line 231
  if ((unsigned long )ipmp != (unsigned long )((struct ip_map *)0)) {
    {
#line 233
    __mptr = (struct auth_domain  const  *)dom;
#line 233
    err = __ip_map_update(cd, ipmp, (struct unix_domain *)__mptr, expiry);
    }
  } else {
#line 236
    err = -12;
  }
#line 238
  if ((unsigned long )dom != (unsigned long )((struct auth_domain *)0)) {
    {
#line 239
    auth_domain_put(dom);
    }
  } else {

  }
  {
#line 241
  cache_flush();
  }
#line 242
  return (err);
}
}
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int ip_map_show(struct seq_file *m , struct cache_detail *cd , struct cache_head *h ) 
{ 
  struct ip_map *im ;
  struct in6_addr addr ;
  char *dom ;
  struct cache_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 251
  dom = (char *)"-no-domain-";
#line 253
  if ((unsigned long )h == (unsigned long )((struct cache_head *)0)) {
    {
#line 254
    seq_puts(m, "#class IP domain\n");
    }
#line 255
    return (0);
  } else {

  }
  {
#line 257
  __mptr = (struct cache_head  const  *)h;
#line 257
  im = (struct ip_map *)__mptr;
#line 259
  addr = im->m_addr;
#line 261
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& h->flags));
  }
#line 261
  if (tmp != 0) {
    {
#line 261
    tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& h->flags));
    }
#line 261
    if (tmp___0 == 0) {
#line 263
      dom = (im->m_client)->h.name;
    } else {

    }
  } else {

  }
  {
#line 265
  tmp___1 = ipv6_addr_v4mapped((struct in6_addr  const  *)(& addr));
  }
#line 265
  if ((int )tmp___1) {
    {
#line 266
    seq_printf(m, "%s %pI4 %s\n", (char *)(& im->m_class), (__be32 *)(& addr.in6_u.u6_addr32) + 3UL,
               dom);
    }
  } else {
    {
#line 269
    seq_printf(m, "%s %pI6 %s\n", (char *)(& im->m_class), & addr, dom);
    }
  }
#line 271
  return (0);
}
}
#line 275 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static struct ip_map *__ip_map_lookup(struct cache_detail *cd , char *class , struct in6_addr *addr ) 
{ 
  struct ip_map ip ;
  struct cache_head *ch ;
  unsigned long tmp ;
  int tmp___0 ;
  struct cache_head  const  *__mptr ;

  {
  {
#line 281
  strcpy((char *)(& ip.m_class), (char const   *)class);
#line 282
  ip.m_addr = *addr;
#line 283
  tmp = hash_str___0(class, 8);
#line 283
  tmp___0 = hash_ip6((struct in6_addr  const  *)addr);
#line 283
  ch = sunrpc_cache_lookup(cd, & ip.h, (int )((unsigned int )tmp ^ (unsigned int )tmp___0));
  }
#line 287
  if ((unsigned long )ch != (unsigned long )((struct cache_head *)0)) {
#line 288
    __mptr = (struct cache_head  const  *)ch;
#line 288
    return ((struct ip_map *)__mptr);
  } else {
#line 290
    return ((struct ip_map *)0);
  }
}
}
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int __ip_map_update(struct cache_detail *cd , struct ip_map *ipm , struct unix_domain *udom ,
                           time_t expiry ) 
{ 
  struct ip_map ip ;
  struct cache_head *ch ;
  unsigned long tmp ;
  int tmp___0 ;

  {
#line 308
  ip.m_client = udom;
#line 309
  ip.h.flags = 0UL;
#line 310
  if ((unsigned long )udom == (unsigned long )((struct unix_domain *)0)) {
    {
#line 311
    set_bit(1U, (unsigned long volatile   *)(& ip.h.flags));
    }
  } else {

  }
  {
#line 312
  ip.h.expiry_time = expiry;
#line 313
  tmp = hash_str___0((char *)(& ipm->m_class), 8);
#line 313
  tmp___0 = hash_ip6((struct in6_addr  const  *)(& ipm->m_addr));
#line 313
  ch = sunrpc_cache_update(cd, & ip.h, & ipm->h, (int )((unsigned int )tmp ^ (unsigned int )tmp___0));
  }
#line 316
  if ((unsigned long )ch == (unsigned long )((struct cache_head *)0)) {
#line 317
    return (-12);
  } else {

  }
  {
#line 318
  cache_put(ch, cd);
  }
#line 319
  return (0);
}
}
#line 331 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
void svcauth_unix_purge(struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;

  {
  {
#line 335
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 335
  sn = (struct sunrpc_net *)tmp;
#line 336
  cache_purge(sn->ip_map_cache);
  }
#line 337
  return;
}
}
#line 341 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
__inline static struct ip_map *ip_map_cached_get(struct svc_xprt *xprt ) 
{ 
  struct ip_map *ipm ;
  struct sunrpc_net *sn ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 343
  ipm = (struct ip_map *)0;
#line 346
  tmp___1 = constant_test_bit(12U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 346
  if (tmp___1 != 0) {
    {
#line 347
    spin_lock(& xprt->xpt_lock);
#line 348
    ipm = (struct ip_map *)xprt->xpt_auth_cache;
    }
#line 349
    if ((unsigned long )ipm != (unsigned long )((struct ip_map *)0)) {
      {
#line 350
      tmp___0 = cache_valid(& ipm->h);
      }
#line 350
      if (tmp___0 == 0) {
        {
#line 356
        tmp = net_generic((struct net  const  *)xprt->xpt_net, sunrpc_net_id);
#line 356
        sn = (struct sunrpc_net *)tmp;
#line 357
        xprt->xpt_auth_cache = (void *)0;
#line 358
        spin_unlock(& xprt->xpt_lock);
#line 359
        cache_put(& ipm->h, sn->ip_map_cache);
        }
#line 360
        return ((struct ip_map *)0);
      } else {

      }
      {
#line 362
      cache_get(& ipm->h);
      }
    } else {

    }
    {
#line 364
    spin_unlock(& xprt->xpt_lock);
    }
  } else {

  }
#line 366
  return (ipm);
}
}
#line 370 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
__inline static void ip_map_cached_put(struct svc_xprt *xprt , struct ip_map *ipm ) 
{ 
  int tmp ;
  struct sunrpc_net *sn ;
  void *tmp___0 ;

  {
  {
#line 372
  tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 372
  if (tmp != 0) {
    {
#line 373
    spin_lock(& xprt->xpt_lock);
    }
#line 374
    if ((unsigned long )xprt->xpt_auth_cache == (unsigned long )((void *)0)) {
#line 376
      xprt->xpt_auth_cache = (void *)ipm;
#line 377
      ipm = (struct ip_map *)0;
    } else {

    }
    {
#line 379
    spin_unlock(& xprt->xpt_lock);
    }
  } else {

  }
#line 381
  if ((unsigned long )ipm != (unsigned long )((struct ip_map *)0)) {
    {
#line 384
    tmp___0 = net_generic((struct net  const  *)xprt->xpt_net, sunrpc_net_id);
#line 384
    sn = (struct sunrpc_net *)tmp___0;
#line 385
    cache_put(& ipm->h, sn->ip_map_cache);
    }
  } else {

  }
#line 387
  return;
}
}
#line 390 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
void svcauth_unix_info_release(struct svc_xprt *xpt ) 
{ 
  struct ip_map *ipm ;
  struct sunrpc_net *sn ;
  void *tmp ;

  {
#line 394
  ipm = (struct ip_map *)xpt->xpt_auth_cache;
#line 395
  if ((unsigned long )ipm != (unsigned long )((struct ip_map *)0)) {
    {
#line 398
    tmp = net_generic((struct net  const  *)xpt->xpt_net, sunrpc_net_id);
#line 398
    sn = (struct sunrpc_net *)tmp;
#line 399
    cache_put(& ipm->h, sn->ip_map_cache);
    }
  } else {

  }
#line 401
  return;
}
}
#line 417 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int unix_gid_hash(kuid_t uid ) 
{ 
  uid_t tmp ;
  u64 tmp___0 ;

  {
  {
#line 419
  tmp = from_kuid(& init_user_ns, uid);
#line 419
  tmp___0 = hash_64((u64 )tmp, 8U);
  }
#line 419
  return ((int )tmp___0);
}
}
#line 422 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void unix_gid_put(struct kref *kref ) 
{ 
  struct cache_head *item ;
  struct kref  const  *__mptr ;
  struct unix_gid *ug ;
  struct cache_head  const  *__mptr___0 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 424
  __mptr = (struct kref  const  *)kref;
#line 424
  item = (struct cache_head *)((char *)__mptr + 0xffffffffffffffe8UL);
#line 425
  __mptr___0 = (struct cache_head  const  *)item;
#line 425
  ug = (struct unix_gid *)__mptr___0;
#line 426
  tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& item->flags));
  }
#line 426
  if (tmp___0 != 0) {
    {
#line 426
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& item->flags));
    }
#line 426
    if (tmp___1 == 0) {
      {
#line 428
      tmp = atomic_dec_and_test(& (ug->gi)->usage);
      }
#line 428
      if (tmp != 0) {
        {
#line 428
        groups_free(ug->gi);
        }
      } else {

      }
    } else {

    }
  } else {

  }
  {
#line 429
  kfree((void const   *)ug);
  }
#line 430
  return;
}
}
#line 432 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int unix_gid_match(struct cache_head *corig , struct cache_head *cnew ) 
{ 
  struct unix_gid *orig ;
  struct cache_head  const  *__mptr ;
  struct unix_gid *new ;
  struct cache_head  const  *__mptr___0 ;
  bool tmp ;

  {
  {
#line 434
  __mptr = (struct cache_head  const  *)corig;
#line 434
  orig = (struct unix_gid *)__mptr;
#line 435
  __mptr___0 = (struct cache_head  const  *)cnew;
#line 435
  new = (struct unix_gid *)__mptr___0;
#line 436
  tmp = uid_eq(orig->uid, new->uid);
  }
#line 436
  return ((int )tmp);
}
}
#line 438 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void unix_gid_init(struct cache_head *cnew , struct cache_head *citem ) 
{ 
  struct unix_gid *new ;
  struct cache_head  const  *__mptr ;
  struct unix_gid *item ;
  struct cache_head  const  *__mptr___0 ;

  {
#line 440
  __mptr = (struct cache_head  const  *)cnew;
#line 440
  new = (struct unix_gid *)__mptr;
#line 441
  __mptr___0 = (struct cache_head  const  *)citem;
#line 441
  item = (struct unix_gid *)__mptr___0;
#line 442
  new->uid = item->uid;
#line 443
  return;
}
}
#line 444 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void unix_gid_update(struct cache_head *cnew , struct cache_head *citem ) 
{ 
  struct unix_gid *new ;
  struct cache_head  const  *__mptr ;
  struct unix_gid *item ;
  struct cache_head  const  *__mptr___0 ;

  {
  {
#line 446
  __mptr = (struct cache_head  const  *)cnew;
#line 446
  new = (struct unix_gid *)__mptr;
#line 447
  __mptr___0 = (struct cache_head  const  *)citem;
#line 447
  item = (struct unix_gid *)__mptr___0;
#line 449
  get_group_info(item->gi);
#line 450
  new->gi = item->gi;
  }
#line 451
  return;
}
}
#line 452 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static struct cache_head *unix_gid_alloc(void) 
{ 
  struct unix_gid *g ;
  void *tmp ;

  {
  {
#line 454
  tmp = kmalloc(56UL, 208U);
#line 454
  g = (struct unix_gid *)tmp;
  }
#line 455
  if ((unsigned long )g != (unsigned long )((struct unix_gid *)0)) {
#line 456
    return (& g->h);
  } else {
#line 458
    return ((struct cache_head *)0);
  }
}
}
#line 461 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static void unix_gid_request(struct cache_detail *cd , struct cache_head *h , char **bpp ,
                             int *blen ) 
{ 
  char tuid[20U] ;
  struct unix_gid *ug ;
  struct cache_head  const  *__mptr ;
  uid_t tmp ;

  {
  {
#line 466
  __mptr = (struct cache_head  const  *)h;
#line 466
  ug = (struct unix_gid *)__mptr;
#line 468
  tmp = from_kuid(& init_user_ns, ug->uid);
#line 468
  snprintf((char *)(& tuid), 20UL, "%u", tmp);
#line 469
  qword_add(bpp, blen, (char *)(& tuid));
#line 470
  *(*bpp + 0xffffffffffffffffUL) = 10;
  }
#line 471
  return;
}
}
#line 473
static struct unix_gid *unix_gid_lookup(struct cache_detail *cd , kuid_t uid ) ;
#line 475 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int unix_gid_parse(struct cache_detail *cd , char *mesg , int mlen ) 
{ 
  int id ;
  kuid_t uid ;
  int gids ;
  int rv ;
  int i ;
  int err ;
  time_t expiry ;
  struct unix_gid ug ;
  struct unix_gid *ugp ;
  int gid ;
  kgid_t kgid ;
  bool tmp ;
  int tmp___0 ;
  struct cache_head *ch ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 488
  if ((int )((signed char )*(mesg + ((unsigned long )mlen + 0xffffffffffffffffUL))) != 10) {
#line 489
    return (-22);
  } else {

  }
  {
#line 490
  *(mesg + ((unsigned long )mlen + 0xffffffffffffffffUL)) = 0;
#line 492
  rv = get_int(& mesg, & id);
  }
#line 493
  if (rv != 0) {
#line 494
    return (-22);
  } else {

  }
  {
#line 495
  uid = make_kuid(& init_user_ns, (uid_t )id);
#line 496
  ug.uid = uid;
#line 498
  expiry = get_expiry(& mesg);
  }
#line 499
  if (expiry == 0L) {
#line 500
    return (-22);
  } else {

  }
  {
#line 502
  rv = get_int(& mesg, & gids);
  }
#line 503
  if ((rv != 0 || gids < 0) || gids > 8192) {
#line 504
    return (-22);
  } else {

  }
  {
#line 506
  ug.gi = groups_alloc(gids);
  }
#line 507
  if ((unsigned long )ug.gi == (unsigned long )((struct group_info *)0)) {
#line 508
    return (-12);
  } else {

  }
#line 510
  i = 0;
#line 510
  goto ldv_46217;
  ldv_46216: 
  {
#line 513
  rv = get_int(& mesg, & gid);
#line 514
  err = -22;
  }
#line 515
  if (rv != 0) {
#line 516
    goto out;
  } else {

  }
  {
#line 517
  kgid = make_kgid(& init_user_ns, (gid_t )gid);
#line 518
  tmp = gid_valid(kgid);
  }
#line 518
  if (tmp) {
#line 518
    tmp___0 = 0;
  } else {
#line 518
    tmp___0 = 1;
  }
#line 518
  if (tmp___0) {
#line 519
    goto out;
  } else {

  }
#line 520
  *((ug.gi)->blocks[(unsigned int )i / 1024U] + ((unsigned long )((unsigned int )i) & 1023UL)) = kgid;
#line 510
  i = i + 1;
  ldv_46217: ;
#line 510
  if (i < gids) {
#line 512
    goto ldv_46216;
  } else {

  }
  {
#line 523
  ugp = unix_gid_lookup(cd, uid);
  }
#line 524
  if ((unsigned long )ugp != (unsigned long )((struct unix_gid *)0)) {
    {
#line 526
    ug.h.flags = 0UL;
#line 527
    ug.h.expiry_time = expiry;
#line 528
    tmp___1 = unix_gid_hash(uid);
#line 528
    ch = sunrpc_cache_update(cd, & ug.h, & ugp->h, tmp___1);
    }
#line 531
    if ((unsigned long )ch == (unsigned long )((struct cache_head *)0)) {
#line 532
      err = -12;
    } else {
      {
#line 534
      err = 0;
#line 535
      cache_put(ch, cd);
      }
    }
  } else {
#line 538
    err = -12;
  }
  out: ;
#line 540
  if ((unsigned long )ug.gi != (unsigned long )((struct group_info *)0)) {
    {
#line 541
    tmp___2 = atomic_dec_and_test(& (ug.gi)->usage);
    }
#line 541
    if (tmp___2 != 0) {
      {
#line 541
      groups_free(ug.gi);
      }
    } else {

    }
  } else {

  }
#line 542
  return (err);
}
}
#line 545 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int unix_gid_show(struct seq_file *m , struct cache_detail *cd , struct cache_head *h ) 
{ 
  struct user_namespace *user_ns ;
  struct unix_gid *ug ;
  int i ;
  int glen ;
  struct cache_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  uid_t tmp___1 ;
  gid_t tmp___2 ;

  {
#line 549
  user_ns = & init_user_ns;
#line 554
  if ((unsigned long )h == (unsigned long )((struct cache_head *)0)) {
    {
#line 555
    seq_puts(m, "#uid cnt: gids...\n");
    }
#line 556
    return (0);
  } else {

  }
  {
#line 558
  __mptr = (struct cache_head  const  *)h;
#line 558
  ug = (struct unix_gid *)__mptr;
#line 559
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& h->flags));
  }
#line 559
  if (tmp != 0) {
    {
#line 559
    tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& h->flags));
    }
#line 559
    if (tmp___0 == 0) {
#line 561
      glen = (ug->gi)->ngroups;
    } else {
#line 563
      glen = 0;
    }
  } else {
#line 563
    glen = 0;
  }
  {
#line 565
  tmp___1 = from_kuid_munged(user_ns, ug->uid);
#line 565
  seq_printf(m, "%u %d:", tmp___1, glen);
#line 566
  i = 0;
  }
#line 566
  goto ldv_46232;
  ldv_46231: 
  {
#line 567
  tmp___2 = from_kgid_munged(user_ns, *((ug->gi)->blocks[(unsigned int )i / 1024U] + ((unsigned long )((unsigned int )i) & 1023UL)));
#line 567
  seq_printf(m, " %d", tmp___2);
#line 566
  i = i + 1;
  }
  ldv_46232: ;
#line 566
  if (i < glen) {
#line 568
    goto ldv_46231;
  } else {

  }
  {
#line 568
  seq_printf(m, "\n");
  }
#line 569
  return (0);
}
}
#line 572 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static struct cache_detail unix_gid_cache_template  = 
#line 572
     {& __this_module, 256, 0, {{0LL}, 0U, 0U, 0, {0, {0, 0}, 0, 0, 0UL}}, {0}, (char *)"auth.unix.gid",
    & unix_gid_put, 0, & unix_gid_request, & unix_gid_parse, & unix_gid_show, 0, & unix_gid_alloc,
    & unix_gid_match, & unix_gid_init, & unix_gid_update, 0L, {0, 0}, 0L, 0, {0, 0},
    {0}, 0L, 0L, {{0, 0, 0, 0}}, 0};
#line 586 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
int unix_gid_cache_create(struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  struct cache_detail *cd ;
  int err ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 588
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 588
  sn = (struct sunrpc_net *)tmp;
#line 592
  cd = cache_create_net(& unix_gid_cache_template, net);
#line 593
  tmp___1 = IS_ERR((void const   *)cd);
  }
#line 593
  if (tmp___1 != 0L) {
    {
#line 594
    tmp___0 = PTR_ERR((void const   *)cd);
    }
#line 594
    return ((int )tmp___0);
  } else {

  }
  {
#line 595
  err = cache_register_net(cd, net);
  }
#line 596
  if (err != 0) {
    {
#line 597
    cache_destroy_net(cd, net);
    }
#line 598
    return (err);
  } else {

  }
#line 600
  sn->unix_gid_cache = cd;
#line 601
  return (0);
}
}
#line 604 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
void unix_gid_cache_destroy(struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  struct cache_detail *cd ;

  {
  {
#line 606
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 606
  sn = (struct sunrpc_net *)tmp;
#line 607
  cd = sn->unix_gid_cache;
#line 609
  sn->unix_gid_cache = (struct cache_detail *)0;
#line 610
  cache_purge(cd);
#line 611
  cache_unregister_net(cd, net);
#line 612
  cache_destroy_net(cd, net);
  }
#line 613
  return;
}
}
#line 615 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static struct unix_gid *unix_gid_lookup(struct cache_detail *cd , kuid_t uid ) 
{ 
  struct unix_gid ug ;
  struct cache_head *ch ;
  int tmp ;
  struct cache_head  const  *__mptr ;

  {
  {
#line 620
  ug.uid = uid;
#line 621
  tmp = unix_gid_hash(uid);
#line 621
  ch = sunrpc_cache_lookup(cd, & ug.h, tmp);
  }
#line 622
  if ((unsigned long )ch != (unsigned long )((struct cache_head *)0)) {
#line 623
    __mptr = (struct cache_head  const  *)ch;
#line 623
    return ((struct unix_gid *)__mptr);
  } else {
#line 625
    return ((struct unix_gid *)0);
  }
}
}
#line 628 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static struct group_info *unix_gid_find(kuid_t uid , struct svc_rqst *rqstp ) 
{ 
  struct unix_gid *ug ;
  struct group_info *gi ;
  int ret ;
  struct sunrpc_net *sn ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;

  {
  {
#line 633
  tmp = net_generic((struct net  const  *)(rqstp->rq_xprt)->xpt_net, sunrpc_net_id);
#line 633
  sn = (struct sunrpc_net *)tmp;
#line 636
  ug = unix_gid_lookup(sn->unix_gid_cache, uid);
  }
#line 637
  if ((unsigned long )ug == (unsigned long )((struct unix_gid *)0)) {
    {
#line 638
    tmp___0 = ERR_PTR(-11L);
    }
#line 638
    return ((struct group_info *)tmp___0);
  } else {

  }
  {
#line 639
  ret = cache_check(sn->unix_gid_cache, & ug->h, & rqstp->rq_chandle);
  }
  {
#line 641
  if (ret == -2) {
#line 641
    goto case_neg_2;
  } else {

  }
#line 643
  if (ret == -110) {
#line 643
    goto case_neg_110;
  } else {

  }
#line 645
  if (ret == 0) {
#line 645
    goto case_0;
  } else {

  }
#line 649
  goto switch_default;
  case_neg_2: /* CIL Label */ 
  {
#line 642
  tmp___1 = ERR_PTR(-2L);
  }
#line 642
  return ((struct group_info *)tmp___1);
  case_neg_110: /* CIL Label */ 
  {
#line 644
  tmp___2 = ERR_PTR(-108L);
  }
#line 644
  return ((struct group_info *)tmp___2);
  case_0: /* CIL Label */ 
  {
#line 646
  gi = get_group_info(ug->gi);
#line 647
  cache_put(& ug->h, sn->unix_gid_cache);
  }
#line 648
  return (gi);
  switch_default: /* CIL Label */ 
  {
#line 650
  tmp___3 = ERR_PTR(-11L);
  }
#line 650
  return ((struct group_info *)tmp___3);
  switch_break: /* CIL Label */ ;
  }
}
}
#line 655 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
int svcauth_unix_set_client(struct svc_rqst *rqstp ) 
{ 
  struct sockaddr_in *sin ;
  struct sockaddr_in6 *sin6 ;
  struct sockaddr_in6 sin6_storage ;
  struct ip_map *ipm ;
  struct group_info *gi ;
  struct svc_cred *cred ;
  struct svc_xprt *xprt ;
  struct net *net ;
  struct sunrpc_net *sn ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
  {
#line 661
  cred = & rqstp->rq_cred;
#line 662
  xprt = rqstp->rq_xprt;
#line 663
  net = xprt->xpt_net;
#line 664
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 664
  sn = (struct sunrpc_net *)tmp;
  }
  {
#line 667
  if ((int )rqstp->rq_addr.ss_family == 2) {
#line 667
    goto case_2;
  } else {

  }
#line 672
  if ((int )rqstp->rq_addr.ss_family == 10) {
#line 672
    goto case_10;
  } else {

  }
#line 675
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 668
  sin = svc_addr_in((struct svc_rqst  const  *)rqstp);
#line 669
  sin6 = & sin6_storage;
#line 670
  ipv6_addr_set_v4mapped(sin->sin_addr.s_addr, & sin6->sin6_addr);
  }
#line 671
  goto ldv_46279;
  case_10: /* CIL Label */ 
  {
#line 673
  sin6 = svc_addr_in6((struct svc_rqst  const  *)rqstp);
  }
#line 674
  goto ldv_46279;
  switch_default: /* CIL Label */ 
  {
#line 676
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svcauth_unix.c"),
                       "i" (676), "i" (12UL));
#line 676
  __builtin_unreachable();
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_46279: 
#line 679
  rqstp->rq_client = (struct auth_domain *)0;
#line 680
  if (rqstp->rq_proc == 0U) {
#line 681
    return (5);
  } else {

  }
  {
#line 683
  ipm = ip_map_cached_get(xprt);
  }
#line 684
  if ((unsigned long )ipm == (unsigned long )((struct ip_map *)0)) {
    {
#line 685
    ipm = __ip_map_lookup(sn->ip_map_cache, ((rqstp->rq_server)->sv_program)->pg_class,
                          & sin6->sin6_addr);
    }
  } else {

  }
#line 688
  if ((unsigned long )ipm == (unsigned long )((struct ip_map *)0)) {
#line 689
    return (8);
  } else {

  }
  {
#line 691
  tmp___0 = cache_check(sn->ip_map_cache, & ipm->h, & rqstp->rq_chandle);
  }
  {
#line 694
  if (tmp___0 == -110) {
#line 694
    goto case_neg_110;
  } else {

  }
#line 696
  if (tmp___0 == -11) {
#line 696
    goto case_neg_11;
  } else {

  }
#line 698
  if (tmp___0 == -2) {
#line 698
    goto case_neg_2;
  } else {

  }
#line 700
  if (tmp___0 == 0) {
#line 700
    goto case_0;
  } else {

  }
#line 692
  goto switch_default___0;
  switch_default___0: /* CIL Label */ 
  {
#line 693
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svcauth_unix.c"),
                       "i" (693), "i" (12UL));
#line 693
  __builtin_unreachable();
  }
  case_neg_110: /* CIL Label */ ;
#line 695
  return (7);
  case_neg_11: /* CIL Label */ ;
#line 697
  return (6);
  case_neg_2: /* CIL Label */ ;
#line 699
  return (8);
  case_0: /* CIL Label */ 
  {
#line 701
  rqstp->rq_client = & (ipm->m_client)->h;
#line 702
  kref_get(& (rqstp->rq_client)->ref);
#line 703
  ip_map_cached_put(xprt, ipm);
  }
#line 704
  goto ldv_46287;
  switch_break___0: /* CIL Label */ ;
  }
  ldv_46287: 
  {
#line 707
  gi = unix_gid_find(cred->cr_uid, rqstp);
#line 708
  tmp___1 = PTR_ERR((void const   *)gi);
  }
  {
#line 709
  if (tmp___1 == -11L) {
#line 709
    goto case_neg_11___0;
  } else {

  }
#line 711
  if (tmp___1 == -108L) {
#line 711
    goto case_neg_108;
  } else {

  }
#line 713
  if (tmp___1 == -2L) {
#line 713
    goto case_neg_2___0;
  } else {

  }
#line 715
  goto switch_default___1;
  case_neg_11___0: /* CIL Label */ ;
#line 710
  return (6);
  case_neg_108: /* CIL Label */ ;
#line 712
  return (7);
  case_neg_2___0: /* CIL Label */ ;
#line 714
  goto ldv_46291;
  switch_default___1: /* CIL Label */ 
  {
#line 716
  tmp___2 = atomic_dec_and_test(& (cred->cr_group_info)->usage);
  }
#line 716
  if (tmp___2 != 0) {
    {
#line 716
    groups_free(cred->cr_group_info);
    }
  } else {

  }
#line 717
  cred->cr_group_info = gi;
  switch_break___1: /* CIL Label */ ;
  }
  ldv_46291: ;
#line 719
  return (5);
}
}
#line 725 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int svcauth_null_accept(struct svc_rqst *rqstp , __be32 *authp ) 
{ 
  struct kvec *argv ;
  struct kvec *resv ;
  struct svc_cred *cred ;
  long tmp ;
  __be32 tmp___0 ;
  long tmp___1 ;
  __be32 tmp___2 ;
  __be32 tmp___3 ;

  {
#line 727
  argv = (struct kvec *)(& rqstp->rq_arg.head);
#line 728
  resv = (struct kvec *)(& rqstp->rq_res.head);
#line 729
  cred = & rqstp->rq_cred;
#line 731
  cred->cr_group_info = (struct group_info *)0;
#line 732
  cred->cr_principal = (char *)0;
#line 733
  rqstp->rq_client = (struct auth_domain *)0;
#line 735
  if (argv->iov_len <= 11UL) {
#line 736
    return (1);
  } else {

  }
  {
#line 738
  tmp___0 = svc_getu32(argv);
  }
#line 738
  if (tmp___0 != 0U) {
    {
#line 739
    tmp = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
    }
#line 739
    if (tmp != 0L) {
      {
#line 739
      printk("\001dsvc: bad null cred\n");
      }
    } else {

    }
#line 740
    *authp = 16777216U;
#line 741
    return (8);
  } else {

  }
  {
#line 743
  tmp___2 = svc_getu32(argv);
  }
#line 743
  if (tmp___2 != 0U) {
#line 743
    goto _L;
  } else {
    {
#line 743
    tmp___3 = svc_getu32(argv);
    }
#line 743
    if (tmp___3 != 0U) {
      _L: /* CIL Label */ 
      {
#line 744
      tmp___1 = __builtin_expect((rpc_debug & 16U) != 0U, 0L);
      }
#line 744
      if (tmp___1 != 0L) {
        {
#line 744
        printk("\001dsvc: bad null verf\n");
        }
      } else {

      }
#line 745
      *authp = 50331648U;
#line 746
      return (8);
    } else {

    }
  }
  {
#line 750
  cred->cr_uid = 4294967295U;
#line 751
  cred->cr_gid = 4294967295U;
#line 752
  cred->cr_group_info = groups_alloc(0);
  }
#line 753
  if ((unsigned long )cred->cr_group_info == (unsigned long )((struct group_info *)0)) {
#line 754
    return (7);
  } else {

  }
  {
#line 757
  svc_putnl(resv, 0U);
#line 758
  svc_putnl(resv, 0U);
#line 760
  rqstp->rq_cred.cr_flavor = 0U;
  }
#line 761
  return (5);
}
}
#line 765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int svcauth_null_release(struct svc_rqst *rqstp ) 
{ 
  int tmp ;

  {
#line 767
  if ((unsigned long )rqstp->rq_client != (unsigned long )((struct auth_domain *)0)) {
    {
#line 768
    auth_domain_put(rqstp->rq_client);
    }
  } else {

  }
#line 769
  rqstp->rq_client = (struct auth_domain *)0;
#line 770
  if ((unsigned long )rqstp->rq_cred.cr_group_info != (unsigned long )((struct group_info *)0)) {
    {
#line 771
    tmp = atomic_dec_and_test(& (rqstp->rq_cred.cr_group_info)->usage);
    }
#line 771
    if (tmp != 0) {
      {
#line 771
      groups_free(rqstp->rq_cred.cr_group_info);
      }
    } else {

    }
  } else {

  }
#line 772
  rqstp->rq_cred.cr_group_info = (struct group_info *)0;
#line 774
  return (0);
}
}
#line 778 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
struct auth_ops svcauth_null  =    {(char *)"null", & __this_module, 0, & svcauth_null_accept, & svcauth_null_release,
    0, & svcauth_unix_set_client};
#line 789 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int svcauth_unix_accept(struct svc_rqst *rqstp , __be32 *authp ) 
{ 
  struct kvec *argv ;
  struct kvec *resv ;
  struct svc_cred *cred ;
  u32 slen ;
  u32 i ;
  int len ;
  u32 tmp ;
  u32 tmp___0 ;
  u32 tmp___1 ;
  kgid_t kgid ;
  u32 tmp___2 ;
  kgid_t tmp___3 ;
  __be32 tmp___4 ;
  __be32 tmp___5 ;

  {
#line 791
  argv = (struct kvec *)(& rqstp->rq_arg.head);
#line 792
  resv = (struct kvec *)(& rqstp->rq_res.head);
#line 793
  cred = & rqstp->rq_cred;
#line 795
  len = (int )argv->iov_len;
#line 797
  cred->cr_group_info = (struct group_info *)0;
#line 798
  cred->cr_principal = (char *)0;
#line 799
  rqstp->rq_client = (struct auth_domain *)0;
#line 801
  len = len + -12;
#line 801
  if (len < 0) {
#line 802
    return (1);
  } else {

  }
  {
#line 804
  svc_getu32(argv);
#line 805
  svc_getu32(argv);
#line 806
  tmp = svc_getnl(argv);
#line 806
  slen = (tmp + 3U) >> 2;
  }
#line 807
  if (slen > 64U) {
#line 808
    goto badcred;
  } else {
#line 807
    len = (int )((u32 )len - (slen + 3U) * 4U);
#line 807
    if (len < 0) {
#line 808
      goto badcred;
    } else {

    }
  }
  {
#line 809
  argv->iov_base = (void *)((__be32 *)argv->iov_base + (unsigned long )slen);
#line 810
  argv->iov_len = argv->iov_len - (size_t )(slen * 4U);
#line 818
  tmp___0 = svc_getnl(argv);
#line 818
  cred->cr_uid = make_kuid(& init_user_ns, tmp___0);
#line 819
  tmp___1 = svc_getnl(argv);
#line 819
  cred->cr_gid = make_kgid(& init_user_ns, tmp___1);
#line 820
  slen = svc_getnl(argv);
  }
#line 821
  if (slen > 16U) {
#line 822
    goto badcred;
  } else {
#line 821
    len = (int )((u32 )len - (slen + 2U) * 4U);
#line 821
    if (len < 0) {
#line 822
      goto badcred;
    } else {

    }
  }
  {
#line 823
  cred->cr_group_info = groups_alloc((int )slen);
  }
#line 824
  if ((unsigned long )cred->cr_group_info == (unsigned long )((struct group_info *)0)) {
#line 825
    return (7);
  } else {

  }
#line 826
  i = 0U;
#line 826
  goto ldv_46323;
  ldv_46322: 
  {
#line 827
  tmp___2 = svc_getnl(argv);
#line 827
  tmp___3 = make_kgid(& init_user_ns, tmp___2);
#line 827
  kgid = tmp___3;
#line 828
  *((cred->cr_group_info)->blocks[i / 1024U] + ((unsigned long )i & 1023UL)) = kgid;
#line 826
  i = i + 1U;
  }
  ldv_46323: ;
#line 826
  if (i < slen) {
#line 828
    goto ldv_46322;
  } else {

  }
  {
#line 830
  tmp___4 = svc_getu32(argv);
  }
#line 830
  if (tmp___4 != 0U) {
#line 831
    *authp = 50331648U;
#line 832
    return (8);
  } else {
    {
#line 830
    tmp___5 = svc_getu32(argv);
    }
#line 830
    if (tmp___5 != 0U) {
#line 831
      *authp = 50331648U;
#line 832
      return (8);
    } else {

    }
  }
  {
#line 836
  svc_putnl(resv, 0U);
#line 837
  svc_putnl(resv, 0U);
#line 839
  rqstp->rq_cred.cr_flavor = 1U;
  }
#line 840
  return (5);
  badcred: 
#line 843
  *authp = 16777216U;
#line 844
  return (8);
}
}
#line 848 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static int svcauth_unix_release(struct svc_rqst *rqstp ) 
{ 
  int tmp ;

  {
#line 852
  if ((unsigned long )rqstp->rq_client != (unsigned long )((struct auth_domain *)0)) {
    {
#line 853
    auth_domain_put(rqstp->rq_client);
    }
  } else {

  }
#line 854
  rqstp->rq_client = (struct auth_domain *)0;
#line 855
  if ((unsigned long )rqstp->rq_cred.cr_group_info != (unsigned long )((struct group_info *)0)) {
    {
#line 856
    tmp = atomic_dec_and_test(& (rqstp->rq_cred.cr_group_info)->usage);
    }
#line 856
    if (tmp != 0) {
      {
#line 856
      groups_free(rqstp->rq_cred.cr_group_info);
      }
    } else {

    }
  } else {

  }
#line 857
  rqstp->rq_cred.cr_group_info = (struct group_info *)0;
#line 859
  return (0);
}
}
#line 863 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
struct auth_ops svcauth_unix  =    {(char *)"unix", & __this_module, 1, & svcauth_unix_accept, & svcauth_unix_release,
    & svcauth_unix_domain_release, & svcauth_unix_set_client};
#line 873 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
static struct cache_detail ip_map_cache_template  = 
#line 873
     {& __this_module, 256, 0, {{0LL}, 0U, 0U, 0, {0, {0, 0}, 0, 0, 0UL}}, {0}, (char *)"auth.unix.ip",
    & ip_map_put, 0, & ip_map_request, & ip_map_parse, & ip_map_show, 0, & ip_map_alloc,
    & ip_map_match, & ip_map_init, & update, 0L, {0, 0}, 0L, 0, {0, 0}, {0}, 0L, 0L,
    {{0, 0, 0, 0}}, 0};
#line 887 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
int ip_map_cache_create(struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  struct cache_detail *cd ;
  int err ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 889
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 889
  sn = (struct sunrpc_net *)tmp;
#line 893
  cd = cache_create_net(& ip_map_cache_template, net);
#line 894
  tmp___1 = IS_ERR((void const   *)cd);
  }
#line 894
  if (tmp___1 != 0L) {
    {
#line 895
    tmp___0 = PTR_ERR((void const   *)cd);
    }
#line 895
    return ((int )tmp___0);
  } else {

  }
  {
#line 896
  err = cache_register_net(cd, net);
  }
#line 897
  if (err != 0) {
    {
#line 898
    cache_destroy_net(cd, net);
    }
#line 899
    return (err);
  } else {

  }
#line 901
  sn->ip_map_cache = cd;
#line 902
  return (0);
}
}
#line 905 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svcauth_unix.c"
void ip_map_cache_destroy(struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  struct cache_detail *cd ;

  {
  {
#line 907
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 907
  sn = (struct sunrpc_net *)tmp;
#line 908
  cd = sn->ip_map_cache;
#line 910
  sn->ip_map_cache = (struct cache_detail *)0;
#line 911
  cache_purge(cd);
#line 912
  cache_unregister_net(cd, net);
#line 913
  cache_destroy_net(cd, net);
  }
#line 914
  return;
}
}
#line 223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kernel.h"
extern int kstrtoull(char const   * , unsigned int  , unsigned long long * ) ;
#line 242 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kernel.h"
__inline static int kstrtoul(char const   *s , unsigned int base , unsigned long *res ) 
{ 
  int tmp ;

  {
  {
#line 250
  tmp = kstrtoull(s, base, (unsigned long long *)res);
  }
#line 250
  return (tmp);
}
}
#line 63 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/string_64.h"
extern char *strcat(char * , char const   * ) ;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/string.h"
extern size_t strlcat(char * , char const   * , __kernel_size_t  ) ;
#line 59
extern char *strrchr(char const   * , int  ) ;
#line 116
extern char *kstrndup(char const   * , size_t  , gfp_t  ) ;
#line 1672 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
extern struct net_device *dev_get_by_name(struct net * , char const   * ) ;
#line 2265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/netdevice.h"
__inline static void dev_put(struct net_device *dev ) 
{ 
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;

  {
#line 2267
  __vpp_verify = (void const   *)0;
  {
#line 2267
  if (4UL == 1UL) {
#line 2267
    goto case_1;
  } else {

  }
#line 2267
  if (4UL == 2UL) {
#line 2267
    goto case_2___0;
  } else {

  }
#line 2267
  if (4UL == 4UL) {
#line 2267
    goto case_4___1;
  } else {

  }
#line 2267
  if (4UL == 8UL) {
#line 2267
    goto case_8___2;
  } else {

  }
#line 2267
  goto switch_default___3;
  case_1: /* CIL Label */ 
#line 2267
  pao_ID__ = -1;
  {
#line 2267
  if (4UL == 1UL) {
#line 2267
    goto case_1___0;
  } else {

  }
#line 2267
  if (4UL == 2UL) {
#line 2267
    goto case_2;
  } else {

  }
#line 2267
  if (4UL == 4UL) {
#line 2267
    goto case_4;
  } else {

  }
#line 2267
  if (4UL == 8UL) {
#line 2267
    goto case_8;
  } else {

  }
#line 2267
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 2267
  __asm__  ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36824;
  case_2: /* CIL Label */ 
#line 2267
  __asm__  ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36824;
  case_4: /* CIL Label */ 
#line 2267
  __asm__  ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36824;
  case_8: /* CIL Label */ 
#line 2267
  __asm__  ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36824;
  switch_default: /* CIL Label */ 
  {
#line 2267
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_36824: ;
#line 2267
  goto ldv_36829;
  case_2___0: /* CIL Label */ 
#line 2267
  pao_ID_____0 = -1;
  {
#line 2267
  if (4UL == 1UL) {
#line 2267
    goto case_1___1;
  } else {

  }
#line 2267
  if (4UL == 2UL) {
#line 2267
    goto case_2___1;
  } else {

  }
#line 2267
  if (4UL == 4UL) {
#line 2267
    goto case_4___0;
  } else {

  }
#line 2267
  if (4UL == 8UL) {
#line 2267
    goto case_8___0;
  } else {

  }
#line 2267
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 2267
  __asm__  ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36835;
  case_2___1: /* CIL Label */ 
#line 2267
  __asm__  ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36835;
  case_4___0: /* CIL Label */ 
#line 2267
  __asm__  ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36835;
  case_8___0: /* CIL Label */ 
#line 2267
  __asm__  ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36835;
  switch_default___0: /* CIL Label */ 
  {
#line 2267
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_36835: ;
#line 2267
  goto ldv_36829;
  case_4___1: /* CIL Label */ 
#line 2267
  pao_ID_____1 = -1;
  {
#line 2267
  if (4UL == 1UL) {
#line 2267
    goto case_1___2;
  } else {

  }
#line 2267
  if (4UL == 2UL) {
#line 2267
    goto case_2___2;
  } else {

  }
#line 2267
  if (4UL == 4UL) {
#line 2267
    goto case_4___2;
  } else {

  }
#line 2267
  if (4UL == 8UL) {
#line 2267
    goto case_8___1;
  } else {

  }
#line 2267
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 2267
  __asm__  ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36845;
  case_2___2: /* CIL Label */ 
#line 2267
  __asm__  ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36845;
  case_4___2: /* CIL Label */ 
#line 2267
  __asm__  ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36845;
  case_8___1: /* CIL Label */ 
#line 2267
  __asm__  ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36845;
  switch_default___1: /* CIL Label */ 
  {
#line 2267
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_36845: ;
#line 2267
  goto ldv_36829;
  case_8___2: /* CIL Label */ 
#line 2267
  pao_ID_____2 = -1;
  {
#line 2267
  if (4UL == 1UL) {
#line 2267
    goto case_1___3;
  } else {

  }
#line 2267
  if (4UL == 2UL) {
#line 2267
    goto case_2___3;
  } else {

  }
#line 2267
  if (4UL == 4UL) {
#line 2267
    goto case_4___3;
  } else {

  }
#line 2267
  if (4UL == 8UL) {
#line 2267
    goto case_8___3;
  } else {

  }
#line 2267
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 2267
  __asm__  ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36855;
  case_2___3: /* CIL Label */ 
#line 2267
  __asm__  ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36855;
  case_4___3: /* CIL Label */ 
#line 2267
  __asm__  ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36855;
  case_8___3: /* CIL Label */ 
#line 2267
  __asm__  ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
#line 2267
  goto ldv_36855;
  switch_default___2: /* CIL Label */ 
  {
#line 2267
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_36855: ;
#line 2267
  goto ldv_36829;
  switch_default___3: /* CIL Label */ 
  {
#line 2267
  __bad_size_call_parameter();
  }
#line 2267
  goto ldv_36829;
  switch_break: /* CIL Label */ ;
  }
  ldv_36829: ;
#line 2268
  return;
}
}
#line 302 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
extern int __ipv6_addr_type(struct in6_addr  const  * ) ;
#line 303 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static int ipv6_addr_type(struct in6_addr  const  *addr ) 
{ 
  int tmp ;

  {
  {
#line 305
  tmp = __ipv6_addr_type(addr);
  }
#line 305
  return (tmp & 65535);
}
}
#line 507 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static bool ipv6_addr_any(struct in6_addr  const  *a ) 
{ 
  unsigned long const   *ul ;

  {
#line 510
  ul = (unsigned long const   *)a;
#line 512
  return (((unsigned long )*ul | (unsigned long )*(ul + 1UL)) == 0UL);
}
}
#line 543 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/ipv6.h"
__inline static bool ipv6_addr_loopback(struct in6_addr  const  *a ) 
{ 
  unsigned long const   *ul ;

  {
#line 546
  ul = (unsigned long const   *)a;
#line 548
  return (((unsigned long long )*ul | ((unsigned long long )*(ul + 1UL) ^ 72057594037927936ULL)) == 0ULL);
}
}
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/addr.h"
char *rpc_sockaddr2uaddr(struct sockaddr  const  *sap , gfp_t gfp_flags ) ;
#line 19
size_t rpc_uaddr2sockaddr(struct net *net , char const   *uaddr , size_t const   uaddr_len ,
                          struct sockaddr *sap , size_t const   salen ) ;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/inet.h"
extern int in4_pton(char const   * , int  , u8 * , int  , char const   ** ) ;
#line 56
extern int in6_pton(char const   * , int  , u8 * , int  , char const   ** ) ;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
static size_t rpc_ntop6_noscopeid(struct sockaddr  const  *sap , char *buf , int const   buflen ) 
{ 
  struct sockaddr_in6  const  *sin6 ;
  struct in6_addr  const  *addr ;
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;

  {
  {
#line 30
  sin6 = (struct sockaddr_in6  const  *)sap;
#line 31
  addr = & sin6->sin6_addr;
#line 38
  tmp___0 = ipv6_addr_any(addr);
  }
#line 38
  if ((int )tmp___0) {
    {
#line 39
    tmp = snprintf(buf, (size_t )buflen, "::");
    }
#line 39
    return ((size_t )tmp);
  } else {

  }
  {
#line 46
  tmp___2 = ipv6_addr_loopback(addr);
  }
#line 46
  if ((int )tmp___2) {
    {
#line 47
    tmp___1 = snprintf(buf, (size_t )buflen, "::1");
    }
#line 47
    return ((size_t )tmp___1);
  } else {

  }
  {
#line 55
  tmp___4 = ipv6_addr_v4mapped(addr);
  }
#line 55
  if ((int )tmp___4) {
    {
#line 56
    tmp___3 = snprintf(buf, (size_t )buflen, "::ffff:%pI4", (__be32 const   *)(& addr->in6_u.u6_addr32) + 3UL);
    }
#line 56
    return ((size_t )tmp___3);
  } else {

  }
  {
#line 62
  tmp___5 = snprintf(buf, (size_t )buflen, "%pI6c", addr);
  }
#line 62
  return ((size_t )tmp___5);
}
}
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
static size_t rpc_ntop6(struct sockaddr  const  *sap , char *buf , size_t const   buflen ) 
{ 
  struct sockaddr_in6  const  *sin6 ;
  char scopebuf[12U] ;
  size_t len ;
  int rc ;
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 68
  sin6 = (struct sockaddr_in6  const  *)sap;
#line 73
  len = rpc_ntop6_noscopeid(sap, buf, (int const   )buflen);
#line 74
  tmp = __builtin_expect(len == 0UL, 0L);
  }
#line 74
  if (tmp != 0L) {
#line 75
    return (len);
  } else {

  }
  {
#line 77
  tmp___0 = ipv6_addr_type(& sin6->sin6_addr);
  }
#line 77
  if (((unsigned int )tmp___0 & 32U) == 0U) {
#line 78
    return (len);
  } else {

  }
#line 79
  if ((unsigned int )sin6->sin6_scope_id == 0U) {
#line 80
    return (len);
  } else {

  }
  {
#line 82
  rc = snprintf((char *)(& scopebuf), 12UL, "%c%u", 37, sin6->sin6_scope_id);
#line 84
  tmp___1 = __builtin_expect((unsigned int )rc > 12U, 0L);
  }
#line 84
  if (tmp___1 != 0L) {
#line 85
    return (0UL);
  } else {

  }
  {
#line 87
  len = len + (size_t )rc;
#line 88
  tmp___2 = __builtin_expect(len > (unsigned long )buflen, 0L);
  }
#line 88
  if (tmp___2 != 0L) {
#line 89
    return (0UL);
  } else {

  }
  {
#line 91
  strcat(buf, (char const   *)(& scopebuf));
  }
#line 92
  return (len);
}
}
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
static int rpc_ntop4(struct sockaddr  const  *sap , char *buf , size_t const   buflen ) 
{ 
  struct sockaddr_in  const  *sin ;
  int tmp ;

  {
  {
#line 114
  sin = (struct sockaddr_in  const  *)sap;
#line 116
  tmp = snprintf(buf, buflen, "%pI4", & sin->sin_addr);
  }
#line 116
  return (tmp);
}
}
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
size_t rpc_ntop(struct sockaddr  const  *sap , char *buf , size_t const   buflen ) 
{ 
  int tmp ;
  size_t tmp___0 ;

  {
  {
#line 131
  if ((int )sap->sa_family == 2) {
#line 131
    goto case_2;
  } else {

  }
#line 133
  if ((int )sap->sa_family == 10) {
#line 133
    goto case_10;
  } else {

  }
#line 130
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 132
  tmp = rpc_ntop4(sap, buf, buflen);
  }
#line 132
  return ((size_t )tmp);
  case_10: /* CIL Label */ 
  {
#line 134
  tmp___0 = rpc_ntop6(sap, buf, buflen);
  }
#line 134
  return (tmp___0);
  switch_break: /* CIL Label */ ;
  }
#line 137
  return (0UL);
}
}
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
static size_t rpc_pton4(char const   *buf , size_t const   buflen , struct sockaddr *sap ,
                        size_t const   salen ) 
{ 
  struct sockaddr_in *sin ;
  u8 *addr ;
  int tmp ;

  {
#line 144
  sin = (struct sockaddr_in *)sap;
#line 145
  addr = (u8 *)(& sin->sin_addr.s_addr);
#line 147
  if ((unsigned long )buflen > 16UL || (unsigned long )salen <= 15UL) {
#line 148
    return (0UL);
  } else {

  }
  {
#line 150
  memset((void *)sap, 0, 16UL);
#line 152
  tmp = in4_pton(buf, (int )buflen, addr, 0, (char const   **)0);
  }
#line 152
  if (tmp == 0) {
#line 153
    return (0UL);
  } else {

  }
#line 155
  sin->sin_family = 2U;
#line 156
  return (16UL);
}
}
#line 160 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
static int rpc_parse_scope_id(struct net *net , char const   *buf , size_t const   buflen ,
                              char const   *delim , struct sockaddr_in6 *sin6 ) 
{ 
  char *p ;
  size_t len ;
  int tmp ;
  unsigned long scope_id ;
  struct net_device *dev ;
  int tmp___0 ;

  {
#line 167
  if ((unsigned long )(buf + buflen) == (unsigned long )delim) {
#line 168
    return (1);
  } else {

  }
#line 170
  if ((int )((signed char )*delim) != 37) {
#line 171
    return (0);
  } else {

  }
  {
#line 173
  tmp = ipv6_addr_type((struct in6_addr  const  *)(& sin6->sin6_addr));
  }
#line 173
  if (((unsigned int )tmp & 32U) == 0U) {
#line 174
    return (0);
  } else {

  }
  {
#line 176
  len = (size_t )(((long )(buf + buflen) - (long )delim) + -1L);
#line 177
  p = kstrndup(delim + 1UL, len, 208U);
  }
#line 178
  if ((unsigned long )p != (unsigned long )((char *)0)) {
    {
#line 179
    scope_id = 0UL;
#line 182
    dev = dev_get_by_name(net, (char const   *)p);
    }
#line 183
    if ((unsigned long )dev != (unsigned long )((struct net_device *)0)) {
      {
#line 184
      scope_id = (unsigned long )dev->ifindex;
#line 185
      dev_put(dev);
      }
    } else {
      {
#line 187
      tmp___0 = kstrtoul((char const   *)p, 10U, & scope_id);
      }
#line 187
      if (tmp___0 == 0) {
        {
#line 188
        kfree((void const   *)p);
        }
#line 189
        return (0);
      } else {

      }
    }
    {
#line 193
    kfree((void const   *)p);
#line 195
    sin6->sin6_scope_id = (__u32 )scope_id;
    }
#line 196
    return (1);
  } else {

  }
#line 199
  return (0);
}
}
#line 202 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
static size_t rpc_pton6(struct net *net , char const   *buf , size_t const   buflen ,
                        struct sockaddr *sap , size_t const   salen ) 
{ 
  struct sockaddr_in6 *sin6 ;
  u8 *addr ;
  char const   *delim ;
  int tmp ;
  int tmp___0 ;

  {
#line 205
  sin6 = (struct sockaddr_in6 *)sap;
#line 206
  addr = (u8 *)(& sin6->sin6_addr.in6_u);
#line 209
  if ((unsigned long )buflen > 60UL || (unsigned long )salen <= 27UL) {
#line 211
    return (0UL);
  } else {

  }
  {
#line 213
  memset((void *)sap, 0, 28UL);
#line 215
  tmp = in6_pton(buf, (int )buflen, addr, 37, & delim);
  }
#line 215
  if (tmp == 0) {
#line 216
    return (0UL);
  } else {

  }
  {
#line 218
  tmp___0 = rpc_parse_scope_id(net, buf, buflen, delim, sin6);
  }
#line 218
  if (tmp___0 == 0) {
#line 219
    return (0UL);
  } else {

  }
#line 221
  sin6->sin6_family = 10U;
#line 222
  return (28UL);
}
}
#line 247 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
size_t rpc_pton(struct net *net , char const   *buf , size_t const   buflen , struct sockaddr *sap ,
                size_t const   salen ) 
{ 
  unsigned int i ;
  size_t tmp ;
  size_t tmp___0 ;

  {
#line 252
  i = 0U;
#line 252
  goto ldv_43696;
  ldv_43695: ;
#line 253
  if ((int )((signed char )*(buf + (unsigned long )i)) == 58) {
    {
#line 254
    tmp = rpc_pton6(net, buf, buflen, sap, salen);
    }
#line 254
    return (tmp);
  } else {

  }
#line 252
  i = i + 1U;
  ldv_43696: ;
#line 252
  if ((unsigned long )i < (unsigned long )buflen) {
#line 254
    goto ldv_43695;
  } else {

  }
  {
#line 255
  tmp___0 = rpc_pton4(buf, buflen, sap, salen);
  }
#line 255
  return (tmp___0);
}
}
#line 268 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
char *rpc_sockaddr2uaddr(struct sockaddr  const  *sap , gfp_t gfp_flags ) 
{ 
  char portbuf[9U] ;
  char addrbuf[57U] ;
  unsigned short port ;
  int tmp ;
  __u16 tmp___0 ;
  size_t tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  size_t tmp___4 ;
  char *tmp___5 ;

  {
  {
#line 275
  if ((int )sap->sa_family == 2) {
#line 275
    goto case_2;
  } else {

  }
#line 280
  if ((int )sap->sa_family == 10) {
#line 280
    goto case_10;
  } else {

  }
#line 285
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 276
  tmp = rpc_ntop4(sap, (char *)(& addrbuf), 57UL);
  }
#line 276
  if (tmp == 0) {
#line 277
    return ((char *)0);
  } else {

  }
  {
#line 278
  tmp___0 = __fswab16((int )((struct sockaddr_in *)sap)->sin_port);
#line 278
  port = tmp___0;
  }
#line 279
  goto ldv_43716;
  case_10: /* CIL Label */ 
  {
#line 281
  tmp___1 = rpc_ntop6_noscopeid(sap, (char *)(& addrbuf), 57);
  }
#line 281
  if (tmp___1 == 0UL) {
#line 282
    return ((char *)0);
  } else {

  }
  {
#line 283
  tmp___2 = __fswab16((int )((struct sockaddr_in6 *)sap)->sin6_port);
#line 283
  port = tmp___2;
  }
#line 284
  goto ldv_43716;
  switch_default: /* CIL Label */ ;
#line 286
  return ((char *)0);
  switch_break: /* CIL Label */ ;
  }
  ldv_43716: 
  {
#line 289
  tmp___3 = snprintf((char *)(& portbuf), 9UL, ".%u.%u", (int )port >> 8, (int )port & 255);
  }
#line 289
  if (tmp___3 > 9) {
#line 291
    return ((char *)0);
  } else {

  }
  {
#line 293
  tmp___4 = strlcat((char *)(& addrbuf), (char const   *)(& portbuf), 57UL);
  }
#line 293
  if (tmp___4 > 57UL) {
#line 294
    return ((char *)0);
  } else {

  }
  {
#line 296
  tmp___5 = kstrdup((char const   *)(& addrbuf), gfp_flags);
  }
#line 296
  return (tmp___5);
}
}
#line 313 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/addr.c"
size_t rpc_uaddr2sockaddr(struct net *net , char const   *uaddr , size_t const   uaddr_len ,
                          struct sockaddr *sap , size_t const   salen ) 
{ 
  char *c ;
  char buf[61U] ;
  unsigned long portlo ;
  unsigned long porthi ;
  unsigned short port ;
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  size_t tmp___7 ;
  size_t tmp___8 ;
  __u16 tmp___9 ;
  __u16 tmp___10 ;

  {
#line 321
  if ((unsigned long )uaddr_len > 57UL) {
#line 322
    return (0UL);
  } else {

  }
  {
#line 324
  memcpy((void *)(& buf), (void const   *)uaddr, uaddr_len);
#line 326
  buf[uaddr_len] = 0;
#line 327
  c = strrchr((char const   *)(& buf), 46);
#line 328
  tmp = __builtin_expect((unsigned long )c == (unsigned long )((char *)0), 0L);
  }
#line 328
  if (tmp != 0L) {
#line 329
    return (0UL);
  } else {

  }
  {
#line 330
  tmp___0 = kstrtoul((char const   *)(c + 1UL), 10U, & portlo);
#line 330
  tmp___1 = __builtin_expect(tmp___0 != 0, 0L);
  }
#line 330
  if (tmp___1 != 0L) {
#line 331
    return (0UL);
  } else {

  }
  {
#line 332
  tmp___2 = __builtin_expect(portlo > 255UL, 0L);
  }
#line 332
  if (tmp___2 != 0L) {
#line 333
    return (0UL);
  } else {

  }
  {
#line 335
  *c = 0;
#line 336
  c = strrchr((char const   *)(& buf), 46);
#line 337
  tmp___3 = __builtin_expect((unsigned long )c == (unsigned long )((char *)0), 0L);
  }
#line 337
  if (tmp___3 != 0L) {
#line 338
    return (0UL);
  } else {

  }
  {
#line 339
  tmp___4 = kstrtoul((char const   *)(c + 1UL), 10U, & porthi);
#line 339
  tmp___5 = __builtin_expect(tmp___4 != 0, 0L);
  }
#line 339
  if (tmp___5 != 0L) {
#line 340
    return (0UL);
  } else {

  }
  {
#line 341
  tmp___6 = __builtin_expect(porthi > 255UL, 0L);
  }
#line 341
  if (tmp___6 != 0L) {
#line 342
    return (0UL);
  } else {

  }
  {
#line 344
  port = ((int )((unsigned short )porthi) << 8U) | (int )((unsigned short )portlo);
#line 346
  *c = 0;
#line 347
  tmp___7 = strlen((char const   *)(& buf));
#line 347
  tmp___8 = rpc_pton(net, (char const   *)(& buf), tmp___7, sap, salen);
  }
#line 347
  if (tmp___8 == 0UL) {
#line 348
    return (0UL);
  } else {

  }
  {
#line 351
  if ((int )sap->sa_family == 2) {
#line 351
    goto case_2;
  } else {

  }
#line 354
  if ((int )sap->sa_family == 10) {
#line 354
    goto case_10;
  } else {

  }
#line 350
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 352
  tmp___9 = __fswab16((int )port);
#line 352
  ((struct sockaddr_in *)sap)->sin_port = tmp___9;
  }
#line 353
  return (16UL);
  case_10: /* CIL Label */ 
  {
#line 355
  tmp___10 = __fswab16((int )port);
#line 355
  ((struct sockaddr_in6 *)sap)->sin6_port = tmp___10;
  }
#line 356
  return (28UL);
  switch_break: /* CIL Label */ ;
  }
#line 359
  return (0UL);
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_addr.c.aux"
void ldv_dispatch_instance_deregister_15_1(struct timer_list *arg0 ) ;
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_addr.c.aux"
void ldv_dispatch_instance_deregister_15_1(struct timer_list *arg0 ) 
{ 


  {
#line 90
  return;
}
}
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_addr.c.aux"
int ldv_emg_del_timer(struct timer_list *arg0 ) 
{ 
  struct timer_list *ldv_15_timer_list_timer_list ;

  {
  {
#line 100
  ldv_15_timer_list_timer_list = arg0;
#line 104
  ldv_dispatch_instance_deregister_15_1(ldv_15_timer_list_timer_list);
  }
#line 105
  return (0);
}
}
#line 167 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/swab.h"
__inline static __u32 __swab32p(__u32 const   *p ) 
{ 
  __u32 tmp ;

  {
  {
#line 172
  tmp = __fswab32(*p);
  }
#line 172
  return (tmp);
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __be32_to_cpup(__be32 const   *p ) 
{ 
  __u32 tmp ;

  {
  {
#line 81
  tmp = __swab32p(p);
  }
#line 81
  return (tmp);
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 7 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seq_file_net.h"
extern struct net init_net ;
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
__be32 *xdr_reserve_space(struct xdr_stream *xdr , size_t nbytes ) ;
#line 225
__be32 *xdr_inline_decode(struct xdr_stream *xdr , size_t nbytes ) ;
#line 401 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static void xprt_clear_binding(struct rpc_xprt *xprt ) 
{ 


  {
  {
#line 403
  __asm__  volatile   ("": : : "memory");
#line 404
  clear_bit(5, (unsigned long volatile   *)(& xprt->state));
#line 405
  __asm__  volatile   ("": : : "memory");
  }
#line 406
  return;
}
}
#line 408 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xprt.h"
__inline static int xprt_test_and_set_binding(struct rpc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 410
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& xprt->state));
  }
#line 410
  return (tmp);
}
}
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static void rpcb_getport_done(struct rpc_task *child , void *data ) ;
#line 114
static void rpcb_map_release(void *data ) ;
#line 115
static struct rpc_program  const  rpcb_program ;
#line 131
static struct rpc_procinfo rpcb_procedures2[4U] ;
#line 132
static struct rpc_procinfo rpcb_procedures3[4U] ;
#line 133
static struct rpc_procinfo rpcb_procedures4[4U] ;
#line 140
static struct rpcb_info  const  rpcb_next_version[2U] ;
#line 141
static struct rpcb_info  const  rpcb_next_version6[3U] ;
#line 143 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_call_ops  const  rpcb_getport_ops  =    {0, & rpcb_getport_done, 0, & rpcb_map_release};
#line 148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static void rpcb_wake_rpcbind_waiters(struct rpc_xprt *xprt , int status ) 
{ 


  {
  {
#line 150
  xprt_clear_binding(xprt);
#line 151
  rpc_wake_up_status(& xprt->binding, status);
  }
#line 152
  return;
}
}
#line 154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static void rpcb_map_release(void *data ) 
{ 
  struct rpcbind_args *map ;

  {
  {
#line 156
  map = (struct rpcbind_args *)data;
#line 158
  rpcb_wake_rpcbind_waiters(map->r_xprt, map->r_status);
#line 159
  xprt_put(map->r_xprt);
#line 160
  kfree((void const   *)map->r_addr);
#line 161
  kfree((void const   *)map);
  }
#line 162
  return;
}
}
#line 164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_get_local(struct net *net ) 
{ 
  int cnt ;
  struct sunrpc_net *sn ;
  void *tmp ;

  {
  {
#line 167
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 167
  sn = (struct sunrpc_net *)tmp;
#line 169
  spin_lock(& sn->rpcb_clnt_lock);
  }
#line 170
  if (sn->rpcb_users != 0U) {
#line 171
    sn->rpcb_users = sn->rpcb_users + 1U;
  } else {

  }
  {
#line 172
  cnt = (int )sn->rpcb_users;
#line 173
  spin_unlock(& sn->rpcb_clnt_lock);
  }
#line 175
  return (cnt);
}
}
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
void rpcb_put_local(struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  struct rpc_clnt *clnt ;
  struct rpc_clnt *clnt4 ;
  int shutdown ;

  {
  {
#line 180
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 180
  sn = (struct sunrpc_net *)tmp;
#line 181
  clnt = sn->rpcb_local_clnt;
#line 182
  clnt4 = sn->rpcb_local_clnt4;
#line 183
  shutdown = 0;
#line 185
  spin_lock(& sn->rpcb_clnt_lock);
  }
#line 186
  if (sn->rpcb_users != 0U) {
#line 187
    sn->rpcb_users = sn->rpcb_users - 1U;
#line 187
    if (sn->rpcb_users == 0U) {
#line 188
      sn->rpcb_local_clnt = (struct rpc_clnt *)0;
#line 189
      sn->rpcb_local_clnt4 = (struct rpc_clnt *)0;
    } else {

    }
#line 191
    shutdown = sn->rpcb_users == 0U;
  } else {

  }
  {
#line 193
  spin_unlock(& sn->rpcb_clnt_lock);
  }
#line 195
  if (shutdown != 0) {
#line 199
    if ((unsigned long )clnt4 != (unsigned long )((struct rpc_clnt *)0)) {
      {
#line 200
      rpc_shutdown_client(clnt4);
      }
    } else {

    }
#line 201
    if ((unsigned long )clnt != (unsigned long )((struct rpc_clnt *)0)) {
      {
#line 202
      rpc_shutdown_client(clnt);
      }
    } else {

    }
  } else {

  }
#line 204
  return;
}
}
#line 206 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static void rpcb_set_local(struct net *net , struct rpc_clnt *clnt , struct rpc_clnt *clnt4 ,
                           bool is_af_local ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 210
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 210
  sn = (struct sunrpc_net *)tmp;
#line 213
  sn->rpcb_local_clnt = clnt;
#line 214
  sn->rpcb_local_clnt4 = clnt4;
#line 215
  sn->rpcb_is_af_local = (unsigned char )is_af_local;
#line 216
  __asm__  volatile   ("": : : "memory");
#line 217
  sn->rpcb_users = 1U;
#line 218
  tmp___0 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 218
  if (tmp___0 != 0L) {
    {
#line 218
    printk("\001dRPC:       created new rpcb local clients (rpcb_local_clnt: %p, rpcb_local_clnt4: %p) for net %p%s\n",
           sn->rpcb_local_clnt, sn->rpcb_local_clnt4, net, (unsigned long )net == (unsigned long )(& init_net) ? (char *)" (init_net)" : (char *)"");
    }
  } else {

  }
#line 219
  return;
}
}
#line 228 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_create_local_unix(struct net *net ) 
{ 
  struct sockaddr_un rpcb_localaddr_rpcbind ;
  unsigned int tmp ;
  struct rpc_create_args args ;
  struct rpc_clnt *clnt ;
  struct rpc_clnt *clnt4 ;
  int result ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
#line 230
  rpcb_localaddr_rpcbind.sun_family = 1U;
#line 230
  rpcb_localaddr_rpcbind.sun_path[0] = '/';
#line 230
  rpcb_localaddr_rpcbind.sun_path[1] = 'v';
#line 230
  rpcb_localaddr_rpcbind.sun_path[2] = 'a';
#line 230
  rpcb_localaddr_rpcbind.sun_path[3] = 'r';
#line 230
  rpcb_localaddr_rpcbind.sun_path[4] = '/';
#line 230
  rpcb_localaddr_rpcbind.sun_path[5] = 'r';
#line 230
  rpcb_localaddr_rpcbind.sun_path[6] = 'u';
#line 230
  rpcb_localaddr_rpcbind.sun_path[7] = 'n';
#line 230
  rpcb_localaddr_rpcbind.sun_path[8] = '/';
#line 230
  rpcb_localaddr_rpcbind.sun_path[9] = 'r';
#line 230
  rpcb_localaddr_rpcbind.sun_path[10] = 'p';
#line 230
  rpcb_localaddr_rpcbind.sun_path[11] = 'c';
#line 230
  rpcb_localaddr_rpcbind.sun_path[12] = 'b';
#line 230
  rpcb_localaddr_rpcbind.sun_path[13] = 'i';
#line 230
  rpcb_localaddr_rpcbind.sun_path[14] = 'n';
#line 230
  rpcb_localaddr_rpcbind.sun_path[15] = 'd';
#line 230
  rpcb_localaddr_rpcbind.sun_path[16] = '.';
#line 230
  rpcb_localaddr_rpcbind.sun_path[17] = 's';
#line 230
  rpcb_localaddr_rpcbind.sun_path[18] = 'o';
#line 230
  rpcb_localaddr_rpcbind.sun_path[19] = 'c';
#line 230
  rpcb_localaddr_rpcbind.sun_path[20] = 'k';
#line 230
  rpcb_localaddr_rpcbind.sun_path[21] = '\000';
#line 230
  tmp = 22U;
  {
#line 230
  while (1) {
    while_continue: /* CIL Label */ ;
#line 230
    if (tmp >= 108U) {
#line 230
      goto while_break;
    } else {

    }
#line 230
    rpcb_localaddr_rpcbind.sun_path[tmp] = (char)0;
#line 230
    tmp = tmp + 1U;
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 234
  args.net = net;
#line 234
  args.protocol = 257;
#line 234
  args.address = (struct sockaddr *)(& rpcb_localaddr_rpcbind);
#line 234
  args.addrsize = 110UL;
#line 234
  args.saddress = 0;
#line 234
  args.timeout = 0;
#line 234
  args.servername = "localhost";
#line 234
  args.program = & rpcb_program;
#line 234
  args.prognumber = 0U;
#line 234
  args.version = 2U;
#line 234
  args.authflavor = 0U;
#line 234
  args.flags = 256UL;
#line 234
  args.client_name = 0;
#line 234
  args.bc_xprt = 0;
#line 253
  result = 0;
#line 260
  clnt = rpc_create(& args);
#line 261
  tmp___3 = IS_ERR((void const   *)clnt);
  }
#line 261
  if (tmp___3 != 0L) {
    {
#line 262
    tmp___1 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 262
    if (tmp___1 != 0L) {
      {
#line 262
      tmp___0 = PTR_ERR((void const   *)clnt);
#line 262
      printk("\001dRPC:       failed to create AF_LOCAL rpcbind client (errno %ld).\n",
             tmp___0);
      }
    } else {

    }
    {
#line 264
    tmp___2 = PTR_ERR((void const   *)clnt);
#line 264
    result = (int )tmp___2;
    }
#line 265
    goto out;
  } else {

  }
  {
#line 268
  clnt4 = rpc_bind_new_program(clnt, & rpcb_program, 4U);
#line 269
  tmp___6 = IS_ERR((void const   *)clnt4);
  }
#line 269
  if (tmp___6 != 0L) {
    {
#line 270
    tmp___5 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 270
    if (tmp___5 != 0L) {
      {
#line 270
      tmp___4 = PTR_ERR((void const   *)clnt4);
#line 270
      printk("\001dRPC:       failed to bind second program to rpcbind v4 client (errno %ld).\n",
             tmp___4);
      }
    } else {

    }
#line 273
    clnt4 = (struct rpc_clnt *)0;
  } else {

  }
  {
#line 276
  rpcb_set_local(net, clnt, clnt4, 1);
  }
  out: ;
#line 279
  return (result);
}
}
#line 286 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_create_local_net(struct net *net ) 
{ 
  struct sockaddr_in rpcb_inaddr_loopback ;
  struct rpc_create_args args ;
  struct rpc_clnt *clnt ;
  struct rpc_clnt *clnt4 ;
  int result ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;

  {
  {
#line 288
  rpcb_inaddr_loopback.sin_family = 2U;
#line 288
  rpcb_inaddr_loopback.sin_port = 28416U;
#line 288
  rpcb_inaddr_loopback.sin_addr.s_addr = 16777343U;
#line 288
  rpcb_inaddr_loopback.__pad[0] = (unsigned char)0;
#line 288
  rpcb_inaddr_loopback.__pad[1] = (unsigned char)0;
#line 288
  rpcb_inaddr_loopback.__pad[2] = (unsigned char)0;
#line 288
  rpcb_inaddr_loopback.__pad[3] = (unsigned char)0;
#line 288
  rpcb_inaddr_loopback.__pad[4] = (unsigned char)0;
#line 288
  rpcb_inaddr_loopback.__pad[5] = (unsigned char)0;
#line 288
  rpcb_inaddr_loopback.__pad[6] = (unsigned char)0;
#line 288
  rpcb_inaddr_loopback.__pad[7] = (unsigned char)0;
#line 293
  args.net = net;
#line 293
  args.protocol = 6;
#line 293
  args.address = (struct sockaddr *)(& rpcb_inaddr_loopback);
#line 293
  args.addrsize = 16UL;
#line 293
  args.saddress = 0;
#line 293
  args.timeout = 0;
#line 293
  args.servername = "localhost";
#line 293
  args.program = & rpcb_program;
#line 293
  args.prognumber = 0U;
#line 293
  args.version = 2U;
#line 293
  args.authflavor = 1U;
#line 293
  args.flags = 16UL;
#line 293
  args.client_name = 0;
#line 293
  args.bc_xprt = 0;
#line 305
  result = 0;
#line 307
  clnt = rpc_create(& args);
#line 308
  tmp___2 = IS_ERR((void const   *)clnt);
  }
#line 308
  if (tmp___2 != 0L) {
    {
#line 309
    tmp___0 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 309
    if (tmp___0 != 0L) {
      {
#line 309
      tmp = PTR_ERR((void const   *)clnt);
#line 309
      printk("\001dRPC:       failed to create local rpcbind client (errno %ld).\n",
             tmp);
      }
    } else {

    }
    {
#line 311
    tmp___1 = PTR_ERR((void const   *)clnt);
#line 311
    result = (int )tmp___1;
    }
#line 312
    goto out;
  } else {

  }
  {
#line 320
  clnt4 = rpc_bind_new_program(clnt, & rpcb_program, 4U);
#line 321
  tmp___5 = IS_ERR((void const   *)clnt4);
  }
#line 321
  if (tmp___5 != 0L) {
    {
#line 322
    tmp___4 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 322
    if (tmp___4 != 0L) {
      {
#line 322
      tmp___3 = PTR_ERR((void const   *)clnt4);
#line 322
      printk("\001dRPC:       failed to bind second program to rpcbind v4 client (errno %ld).\n",
             tmp___3);
      }
    } else {

    }
#line 325
    clnt4 = (struct rpc_clnt *)0;
  } else {

  }
  {
#line 328
  rpcb_set_local(net, clnt, clnt4, 0);
  }
  out: ;
#line 331
  return (result);
}
}
#line 338 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
int rpcb_create_local(struct net *net ) 
{ 
  struct mutex rpcb_create_local_mutex ;
  int result ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 340
  rpcb_create_local_mutex.count.counter = 1;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.raw_lock.__annonCompField17.head_tail = 0U;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.magic = 3735899821U;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.owner_cpu = 4294967295U;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.owner = (void *)-1;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.dep_map.key = 0;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.dep_map.class_cache[0] = 0;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.dep_map.class_cache[1] = 0;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.dep_map.name = "rpcb_create_local_mutex.wait_lock";
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.dep_map.cpu = 0;
#line 340
  rpcb_create_local_mutex.wait_lock.__annonCompField20.rlock.dep_map.ip = 0UL;
#line 340
  rpcb_create_local_mutex.wait_list.next = & rpcb_create_local_mutex.wait_list;
#line 340
  rpcb_create_local_mutex.wait_list.prev = & rpcb_create_local_mutex.wait_list;
#line 340
  rpcb_create_local_mutex.owner = 0;
#line 340
  rpcb_create_local_mutex.name = 0;
#line 340
  rpcb_create_local_mutex.magic = (void *)(& rpcb_create_local_mutex);
#line 340
  rpcb_create_local_mutex.dep_map.key = 0;
#line 340
  rpcb_create_local_mutex.dep_map.class_cache[0] = 0;
#line 340
  rpcb_create_local_mutex.dep_map.class_cache[1] = 0;
#line 340
  rpcb_create_local_mutex.dep_map.name = "rpcb_create_local_mutex";
#line 340
  rpcb_create_local_mutex.dep_map.cpu = 0;
#line 340
  rpcb_create_local_mutex.dep_map.ip = 0UL;
#line 341
  result = 0;
#line 343
  tmp = rpcb_get_local(net);
  }
#line 343
  if (tmp != 0) {
#line 344
    return (result);
  } else {

  }
  {
#line 346
  mutex_lock_nested(& rpcb_create_local_mutex, 0U);
#line 347
  tmp___0 = rpcb_get_local(net);
  }
#line 347
  if (tmp___0 != 0) {
#line 348
    goto out;
  } else {

  }
  {
#line 350
  tmp___1 = rpcb_create_local_unix(net);
  }
#line 350
  if (tmp___1 != 0) {
    {
#line 351
    result = rpcb_create_local_net(net);
    }
  } else {

  }
  out: 
  {
#line 354
  mutex_unlock(& rpcb_create_local_mutex);
  }
#line 355
  return (result);
}
}
#line 358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_clnt *rpcb_create(struct net *net , char const   *hostname , struct sockaddr *srvaddr ,
                                    size_t salen , int proto , u32 version ) 
{ 
  struct rpc_create_args args ;
  void *tmp ;
  struct rpc_clnt *tmp___0 ;

  {
#line 362
  args.net = net;
#line 362
  args.protocol = proto;
#line 362
  args.address = srvaddr;
#line 362
  args.addrsize = salen;
#line 362
  args.saddress = 0;
#line 362
  args.timeout = 0;
#line 362
  args.servername = hostname;
#line 362
  args.program = & rpcb_program;
#line 362
  args.prognumber = 0U;
#line 362
  args.version = version;
#line 362
  args.authflavor = 1U;
#line 362
  args.flags = 24UL;
#line 362
  args.client_name = 0;
#line 362
  args.bc_xprt = 0;
  {
#line 376
  if ((int )srvaddr->sa_family == 2) {
#line 376
    goto case_2;
  } else {

  }
#line 379
  if ((int )srvaddr->sa_family == 10) {
#line 379
    goto case_10;
  } else {

  }
#line 382
  goto switch_default;
  case_2: /* CIL Label */ 
#line 377
  ((struct sockaddr_in *)srvaddr)->sin_port = 28416U;
#line 378
  goto ldv_45715;
  case_10: /* CIL Label */ 
#line 380
  ((struct sockaddr_in6 *)srvaddr)->sin6_port = 28416U;
#line 381
  goto ldv_45715;
  switch_default: /* CIL Label */ 
  {
#line 383
  tmp = ERR_PTR(-97L);
  }
#line 383
  return ((struct rpc_clnt *)tmp);
  switch_break: /* CIL Label */ ;
  }
  ldv_45715: 
  {
#line 386
  tmp___0 = rpc_create(& args);
  }
#line 386
  return (tmp___0);
}
}
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_register_call(struct sunrpc_net *sn , struct rpc_clnt *clnt , struct rpc_message *msg ,
                              bool is_set ) 
{ 
  int flags ;
  int error ;
  int result ;
  long tmp ;

  {
#line 391
  flags = 8192;
#line 392
  result = 0;
#line 394
  if ((int )is_set || (unsigned int )*((unsigned char *)sn + 396UL) == 0U) {
#line 395
    flags = 1024;
  } else {

  }
  {
#line 396
  msg->rpc_resp = (void *)(& result);
#line 398
  error = rpc_call_sync(clnt, (struct rpc_message  const  *)msg, flags);
  }
#line 399
  if (error < 0) {
    {
#line 400
    tmp = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 400
    if (tmp != 0L) {
      {
#line 400
      printk("\001dRPC:       failed to contact local rpcbind server (errno %d).\n",
             - error);
      }
    } else {

    }
#line 402
    return (error);
  } else {

  }
#line 405
  if (result == 0) {
#line 406
    return (-13);
  } else {

  }
#line 407
  return (0);
}
}
#line 443 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
int rpcb_register(struct net *net , u32 prog , u32 vers , int prot , unsigned short port ) 
{ 
  struct rpcbind_args map ;
  struct rpc_message msg ;
  struct sunrpc_net *sn ;
  void *tmp ;
  bool is_set ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 445
  map.r_xprt = 0;
#line 445
  map.r_prog = prog;
#line 445
  map.r_vers = vers;
#line 445
  map.r_prot = (unsigned int )prot;
#line 445
  map.r_port = port;
#line 445
  map.r_netid = 0;
#line 445
  map.r_addr = 0;
#line 445
  map.r_owner = 0;
#line 445
  map.r_status = 0;
#line 451
  msg.rpc_proc = 0;
#line 451
  msg.rpc_argp = (void *)(& map);
#line 451
  msg.rpc_resp = 0;
#line 451
  msg.rpc_cred = 0;
#line 454
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 454
  sn = (struct sunrpc_net *)tmp;
#line 455
  is_set = 0;
#line 457
  tmp___0 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 457
  if (tmp___0 != 0L) {
    {
#line 457
    printk("\001dRPC:       %sregistering (%u, %u, %d, %u) with local rpcbind\n",
           (unsigned int )port != 0U ? (char *)"" : (char *)"un", prog, vers, prot,
           (int )port);
    }
  } else {

  }
#line 461
  msg.rpc_proc = (struct rpc_procinfo *)(& rpcb_procedures2) + 2UL;
#line 462
  if ((unsigned int )port != 0U) {
#line 463
    msg.rpc_proc = (struct rpc_procinfo *)(& rpcb_procedures2) + 1UL;
#line 464
    is_set = 1;
  } else {

  }
  {
#line 467
  tmp___1 = rpcb_register_call(sn, sn->rpcb_local_clnt, & msg, (int )is_set);
  }
#line 467
  return (tmp___1);
}
}
#line 473 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_register_inet4(struct sunrpc_net *sn , struct sockaddr  const  *sap ,
                               struct rpc_message *msg ) 
{ 
  struct sockaddr_in  const  *sin ;
  struct rpcbind_args *map ;
  unsigned short port ;
  __u16 tmp ;
  bool is_set ;
  int result ;
  char *tmp___0 ;
  long tmp___1 ;

  {
  {
#line 477
  sin = (struct sockaddr_in  const  *)sap;
#line 478
  map = (struct rpcbind_args *)msg->rpc_argp;
#line 479
  tmp = __fswab16((int )sin->sin_port);
#line 479
  port = tmp;
#line 480
  is_set = 0;
#line 483
  tmp___0 = rpc_sockaddr2uaddr(sap, 208U);
#line 483
  map->r_addr = (char const   *)tmp___0;
#line 485
  tmp___1 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 485
  if (tmp___1 != 0L) {
    {
#line 485
    printk("\001dRPC:       %sregistering [%u, %u, %s, \'%s\'] with local rpcbind\n",
           (unsigned int )port != 0U ? (char *)"" : (char *)"un", map->r_prog, map->r_vers,
           map->r_addr, map->r_netid);
    }
  } else {

  }
#line 490
  msg->rpc_proc = (struct rpc_procinfo *)(& rpcb_procedures4) + 2UL;
#line 491
  if ((unsigned int )port != 0U) {
#line 492
    msg->rpc_proc = (struct rpc_procinfo *)(& rpcb_procedures4) + 1UL;
#line 493
    is_set = 1;
  } else {

  }
  {
#line 496
  result = rpcb_register_call(sn, sn->rpcb_local_clnt4, msg, (int )is_set);
#line 497
  kfree((void const   *)map->r_addr);
  }
#line 498
  return (result);
}
}
#line 504 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_register_inet6(struct sunrpc_net *sn , struct sockaddr  const  *sap ,
                               struct rpc_message *msg ) 
{ 
  struct sockaddr_in6  const  *sin6 ;
  struct rpcbind_args *map ;
  unsigned short port ;
  __u16 tmp ;
  bool is_set ;
  int result ;
  char *tmp___0 ;
  long tmp___1 ;

  {
  {
#line 508
  sin6 = (struct sockaddr_in6  const  *)sap;
#line 509
  map = (struct rpcbind_args *)msg->rpc_argp;
#line 510
  tmp = __fswab16((int )sin6->sin6_port);
#line 510
  port = tmp;
#line 511
  is_set = 0;
#line 514
  tmp___0 = rpc_sockaddr2uaddr(sap, 208U);
#line 514
  map->r_addr = (char const   *)tmp___0;
#line 516
  tmp___1 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 516
  if (tmp___1 != 0L) {
    {
#line 516
    printk("\001dRPC:       %sregistering [%u, %u, %s, \'%s\'] with local rpcbind\n",
           (unsigned int )port != 0U ? (char *)"" : (char *)"un", map->r_prog, map->r_vers,
           map->r_addr, map->r_netid);
    }
  } else {

  }
#line 521
  msg->rpc_proc = (struct rpc_procinfo *)(& rpcb_procedures4) + 2UL;
#line 522
  if ((unsigned int )port != 0U) {
#line 523
    msg->rpc_proc = (struct rpc_procinfo *)(& rpcb_procedures4) + 1UL;
#line 524
    is_set = 1;
  } else {

  }
  {
#line 527
  result = rpcb_register_call(sn, sn->rpcb_local_clnt4, msg, (int )is_set);
#line 528
  kfree((void const   *)map->r_addr);
  }
#line 529
  return (result);
}
}
#line 532 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_unregister_all_protofamilies(struct sunrpc_net *sn , struct rpc_message *msg ) 
{ 
  struct rpcbind_args *map ;
  long tmp ;
  int tmp___0 ;

  {
  {
#line 535
  map = (struct rpcbind_args *)msg->rpc_argp;
#line 537
  tmp = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 537
  if (tmp != 0L) {
    {
#line 537
    printk("\001dRPC:       unregistering [%u, %u, \'%s\'] with local rpcbind\n",
           map->r_prog, map->r_vers, map->r_netid);
    }
  } else {

  }
  {
#line 541
  map->r_addr = "";
#line 542
  msg->rpc_proc = (struct rpc_procinfo *)(& rpcb_procedures4) + 2UL;
#line 544
  tmp___0 = rpcb_register_call(sn, sn->rpcb_local_clnt4, msg, 0);
  }
#line 544
  return (tmp___0);
}
}
#line 591 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
int rpcb_v4_register(struct net *net , u32 const   program , u32 const   version ,
                     struct sockaddr  const  *address , char const   *netid ) 
{ 
  struct rpcbind_args map ;
  struct rpc_message msg ;
  struct sunrpc_net *sn ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 594
  map.r_xprt = 0;
#line 594
  map.r_prog = program;
#line 594
  map.r_vers = version;
#line 594
  map.r_prot = 0U;
#line 594
  map.r_port = (unsigned short)0;
#line 594
  map.r_netid = netid;
#line 594
  map.r_addr = 0;
#line 594
  map.r_owner = "0";
#line 594
  map.r_status = 0;
#line 600
  msg.rpc_proc = 0;
#line 600
  msg.rpc_argp = (void *)(& map);
#line 600
  msg.rpc_resp = 0;
#line 600
  msg.rpc_cred = 0;
#line 603
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 603
  sn = (struct sunrpc_net *)tmp;
  }
#line 605
  if ((unsigned long )sn->rpcb_local_clnt4 == (unsigned long )((struct rpc_clnt *)0)) {
#line 606
    return (-93);
  } else {

  }
#line 608
  if ((unsigned long )address == (unsigned long )((struct sockaddr  const  *)0)) {
    {
#line 609
    tmp___0 = rpcb_unregister_all_protofamilies(sn, & msg);
    }
#line 609
    return (tmp___0);
  } else {

  }
  {
#line 612
  if ((int )address->sa_family == 2) {
#line 612
    goto case_2;
  } else {

  }
#line 614
  if ((int )address->sa_family == 10) {
#line 614
    goto case_10;
  } else {

  }
#line 611
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 613
  tmp___1 = rpcb_register_inet4(sn, address, & msg);
  }
#line 613
  return (tmp___1);
  case_10: /* CIL Label */ 
  {
#line 615
  tmp___2 = rpcb_register_inet6(sn, address, & msg);
  }
#line 615
  return (tmp___2);
  switch_break: /* CIL Label */ ;
  }
#line 618
  return (-97);
}
}
#line 621 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_task *rpcb_call_async(struct rpc_clnt *rpcb_clnt , struct rpcbind_args *map ,
                                        struct rpc_procinfo *proc ) 
{ 
  struct rpc_message msg ;
  struct rpc_task_setup task_setup_data ;
  struct rpc_task *tmp ;

  {
  {
#line 623
  msg.rpc_proc = proc;
#line 623
  msg.rpc_argp = (void *)map;
#line 623
  msg.rpc_resp = (void *)map;
#line 623
  msg.rpc_cred = 0;
#line 628
  task_setup_data.task = 0;
#line 628
  task_setup_data.rpc_client = rpcb_clnt;
#line 628
  task_setup_data.rpc_message = (struct rpc_message  const  *)(& msg);
#line 628
  task_setup_data.callback_ops = & rpcb_getport_ops;
#line 628
  task_setup_data.callback_data = (void *)map;
#line 628
  task_setup_data.workqueue = 0;
#line 628
  task_setup_data.flags = 1025U;
#line 628
  task_setup_data.priority = (signed char)0;
#line 636
  tmp = rpc_run_task((struct rpc_task_setup  const  *)(& task_setup_data));
  }
#line 636
  return (tmp);
}
}
#line 646 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_clnt *rpcb_find_transport_owner(struct rpc_clnt *clnt ) 
{ 
  struct rpc_clnt *parent ;
  struct rpc_xprt *xprt ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct rpc_xprt *_________p1___0 ;
  bool __warned___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 648
  parent = clnt->cl_parent;
#line 649
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 649
  tmp = debug_lockdep_rcu_enabled();
  }
#line 649
  if (tmp != 0 && ! __warned) {
    {
#line 649
    tmp___0 = rcu_read_lock_held();
    }
#line 649
    if (tmp___0 == 0) {
      {
#line 649
      __warned = 1;
#line 649
      lockdep_rcu_suspicious("net/sunrpc/rpcb_clnt.c", 649, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
#line 649
  xprt = _________p1;
#line 651
  goto ldv_45795;
  ldv_45794: 
  {
#line 652
  _________p1___0 = *((struct rpc_xprt * volatile  *)(& parent->cl_xprt));
#line 652
  tmp___1 = debug_lockdep_rcu_enabled();
  }
#line 652
  if (tmp___1 != 0 && ! __warned___0) {
    {
#line 652
    tmp___2 = rcu_read_lock_held();
    }
#line 652
    if (tmp___2 == 0) {
      {
#line 652
      __warned___0 = 1;
#line 652
      lockdep_rcu_suspicious("net/sunrpc/rpcb_clnt.c", 652, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
#line 652
  if ((unsigned long )_________p1___0 != (unsigned long )xprt) {
#line 653
    goto ldv_45793;
  } else {

  }
#line 654
  if ((unsigned int )*((unsigned char *)clnt + 176UL) != 0U) {
#line 655
    goto ldv_45793;
  } else {

  }
#line 656
  clnt = parent;
#line 657
  parent = parent->cl_parent;
  ldv_45795: ;
#line 651
  if ((unsigned long )parent != (unsigned long )clnt) {
#line 653
    goto ldv_45794;
  } else {

  }
  ldv_45793: ;
#line 659
  return (clnt);
}
}
#line 669 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
void rpcb_getport_async(struct rpc_task *task ) 
{ 
  struct rpc_clnt *clnt ;
  struct rpc_procinfo *proc ;
  u32 bind_version ;
  struct rpc_xprt *xprt ;
  struct rpc_clnt *rpcb_clnt ;
  struct rpcbind_args *map ;
  struct rpc_task *child ;
  struct __kernel_sockaddr_storage addr ;
  struct sockaddr *sap ;
  size_t salen ;
  int status ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;
  long tmp___10 ;
  long tmp___11 ;
  long tmp___12 ;
  void *tmp___13 ;
  long tmp___14 ;
  char *tmp___15 ;
  long tmp___16 ;
  long tmp___17 ;

  {
  {
#line 679
  sap = (struct sockaddr *)(& addr);
#line 683
  rcu_read_lock();
  }
  ldv_45813: 
  {
#line 685
  clnt = rpcb_find_transport_owner(task->tk_client);
#line 686
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 686
  tmp = debug_lockdep_rcu_enabled();
  }
#line 686
  if (tmp != 0 && ! __warned) {
    {
#line 686
    tmp___0 = rcu_read_lock_held();
    }
#line 686
    if (tmp___0 == 0) {
      {
#line 686
      __warned = 1;
#line 686
      lockdep_rcu_suspicious("net/sunrpc/rpcb_clnt.c", 686, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 686
  xprt = xprt_get(_________p1);
  }
#line 687
  if ((unsigned long )xprt == (unsigned long )((struct rpc_xprt *)0)) {
#line 689
    goto ldv_45813;
  } else {

  }
  {
#line 688
  rcu_read_unlock();
#line 690
  tmp___1 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 690
  if (tmp___1 != 0L) {
    {
#line 690
    printk("\001dRPC: %5u %s(%s, %u, %u, %d)\n", (int )task->tk_pid, "rpcb_getport_async",
           xprt->servername, clnt->cl_prog, clnt->cl_vers, xprt->prot);
    }
  } else {

  }
  {
#line 696
  rpc_sleep_on(& xprt->binding, task, (void (*)(struct rpc_task * ))0);
#line 698
  tmp___3 = xprt_test_and_set_binding(xprt);
  }
#line 698
  if (tmp___3 != 0) {
    {
#line 699
    tmp___2 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 699
    if (tmp___2 != 0L) {
      {
#line 699
      printk("\001dRPC: %5u %s: waiting for another binder\n", (int )task->tk_pid,
             "rpcb_getport_async");
      }
    } else {

    }
    {
#line 701
    xprt_put(xprt);
    }
#line 702
    return;
  } else {

  }
  {
#line 706
  tmp___5 = xprt_bound(xprt);
  }
#line 706
  if (tmp___5 != 0) {
    {
#line 707
    status = 0;
#line 708
    tmp___4 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 708
    if (tmp___4 != 0L) {
      {
#line 708
      printk("\001dRPC: %5u %s: already bound\n", (int )task->tk_pid, "rpcb_getport_async");
      }
    } else {

    }
#line 710
    goto bailout_nofree;
  } else {

  }
  {
#line 714
  salen = rpc_peeraddr(clnt, sap, 128UL);
  }
  {
#line 718
  if ((int )sap->sa_family == 2) {
#line 718
    goto case_2;
  } else {

  }
#line 722
  if ((int )sap->sa_family == 10) {
#line 722
    goto case_10;
  } else {

  }
#line 726
  goto switch_default;
  case_2: /* CIL Label */ 
#line 719
  proc = rpcb_next_version[xprt->bind_index].rpc_proc;
#line 720
  bind_version = rpcb_next_version[xprt->bind_index].rpc_vers;
#line 721
  goto ldv_45818;
  case_10: /* CIL Label */ 
#line 723
  proc = rpcb_next_version6[xprt->bind_index].rpc_proc;
#line 724
  bind_version = rpcb_next_version6[xprt->bind_index].rpc_vers;
#line 725
  goto ldv_45818;
  switch_default: /* CIL Label */ 
  {
#line 727
  status = -97;
#line 728
  tmp___6 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 728
  if (tmp___6 != 0L) {
    {
#line 728
    printk("\001dRPC: %5u %s: bad address family\n", (int )task->tk_pid, "rpcb_getport_async");
    }
  } else {

  }
#line 730
  goto bailout_nofree;
  switch_break: /* CIL Label */ ;
  }
  ldv_45818: ;
#line 732
  if ((unsigned long )proc == (unsigned long )((struct rpc_procinfo *)0)) {
    {
#line 733
    xprt->bind_index = 0U;
#line 734
    status = -96;
#line 735
    tmp___7 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 735
    if (tmp___7 != 0L) {
      {
#line 735
      printk("\001dRPC: %5u %s: no more getport versions available\n", (int )task->tk_pid,
             "rpcb_getport_async");
      }
    } else {

    }
#line 737
    goto bailout_nofree;
  } else {

  }
  {
#line 740
  tmp___8 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 740
  if (tmp___8 != 0L) {
    {
#line 740
    printk("\001dRPC: %5u %s: trying rpcbind version %u\n", (int )task->tk_pid, "rpcb_getport_async",
           bind_version);
    }
  } else {

  }
  {
#line 743
  rpcb_clnt = rpcb_create(xprt->xprt_net, xprt->servername, sap, salen, xprt->prot,
                          bind_version);
#line 745
  tmp___12 = IS_ERR((void const   *)rpcb_clnt);
  }
#line 745
  if (tmp___12 != 0L) {
    {
#line 746
    tmp___9 = PTR_ERR((void const   *)rpcb_clnt);
#line 746
    status = (int )tmp___9;
#line 747
    tmp___11 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 747
    if (tmp___11 != 0L) {
      {
#line 747
      tmp___10 = PTR_ERR((void const   *)rpcb_clnt);
#line 747
      printk("\001dRPC: %5u %s: rpcb_create failed, error %ld\n", (int )task->tk_pid,
             "rpcb_getport_async", tmp___10);
      }
    } else {

    }
#line 749
    goto bailout_nofree;
  } else {

  }
  {
#line 752
  tmp___13 = kzalloc(56UL, 32U);
#line 752
  map = (struct rpcbind_args *)tmp___13;
  }
#line 753
  if ((unsigned long )map == (unsigned long )((struct rpcbind_args *)0)) {
    {
#line 754
    status = -12;
#line 755
    tmp___14 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 755
    if (tmp___14 != 0L) {
      {
#line 755
      printk("\001dRPC: %5u %s: no memory available\n", (int )task->tk_pid, "rpcb_getport_async");
      }
    } else {

    }
#line 757
    goto bailout_release_client;
  } else {

  }
#line 759
  map->r_prog = clnt->cl_prog;
#line 760
  map->r_vers = clnt->cl_vers;
#line 761
  map->r_prot = (u32 )xprt->prot;
#line 762
  map->r_port = 0U;
#line 763
  map->r_xprt = xprt;
#line 764
  map->r_status = -5;
  {
#line 767
  if (bind_version == 4U) {
#line 767
    goto case_4;
  } else {

  }
#line 768
  if (bind_version == 3U) {
#line 768
    goto case_3;
  } else {

  }
#line 773
  if (bind_version == 2U) {
#line 773
    goto case_2___0;
  } else {

  }
#line 776
  goto switch_default___0;
  case_4: /* CIL Label */ ;
  case_3: /* CIL Label */ 
  {
#line 769
  map->r_netid = xprt->address_strings[5];
#line 770
  tmp___15 = rpc_sockaddr2uaddr((struct sockaddr  const  *)sap, 32U);
#line 770
  map->r_addr = (char const   *)tmp___15;
#line 771
  map->r_owner = "";
  }
#line 772
  goto ldv_45824;
  case_2___0: /* CIL Label */ 
#line 774
  map->r_addr = (char const   *)0;
#line 775
  goto ldv_45824;
  switch_default___0: /* CIL Label */ 
  {
#line 777
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/rpcb_clnt.c"),
                       "i" (777), "i" (12UL));
#line 777
  __builtin_unreachable();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_45824: 
  {
#line 780
  child = rpcb_call_async(rpcb_clnt, map, proc);
#line 781
  rpc_release_client(rpcb_clnt);
#line 782
  tmp___17 = IS_ERR((void const   *)child);
  }
#line 782
  if (tmp___17 != 0L) {
    {
#line 784
    tmp___16 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 784
    if (tmp___16 != 0L) {
      {
#line 784
      printk("\001dRPC: %5u %s: rpc_run_task failed\n", (int )task->tk_pid, "rpcb_getport_async");
      }
    } else {

    }
#line 786
    return;
  } else {

  }
  {
#line 789
  xprt->stat.bind_count = xprt->stat.bind_count + 1UL;
#line 790
  rpc_put_task(child);
  }
#line 791
  return;
  bailout_release_client: 
  {
#line 794
  rpc_release_client(rpcb_clnt);
  }
  bailout_nofree: 
  {
#line 796
  rpcb_wake_rpcbind_waiters(xprt, status);
#line 797
  task->tk_status = status;
#line 798
  xprt_put(xprt);
  }
#line 799
  return;
}
}
#line 805 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static void rpcb_getport_done(struct rpc_task *child , void *data ) 
{ 
  struct rpcbind_args *map ;
  struct rpc_xprt *xprt ;
  int status ;
  long tmp ;

  {
#line 807
  map = (struct rpcbind_args *)data;
#line 808
  xprt = map->r_xprt;
#line 809
  status = child->tk_status;
#line 812
  if (status == -5) {
#line 813
    status = -93;
  } else {

  }
#line 816
  if (status == -93) {
#line 817
    xprt->bind_index = xprt->bind_index + 1U;
  } else {

  }
#line 819
  if (status < 0) {
    {
#line 821
    (*((xprt->ops)->set_port))(xprt, 0);
    }
  } else
#line 822
  if ((unsigned int )map->r_port == 0U) {
    {
#line 824
    (*((xprt->ops)->set_port))(xprt, 0);
#line 825
    status = -13;
    }
  } else {
    {
#line 828
    (*((xprt->ops)->set_port))(xprt, (int )map->r_port);
#line 829
    xprt_set_bound(xprt);
#line 830
    status = 0;
    }
  }
  {
#line 833
  tmp = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 833
  if (tmp != 0L) {
    {
#line 833
    printk("\001dRPC: %5u rpcb_getport_done(status %d, port %u)\n", (int )child->tk_pid,
           status, (int )map->r_port);
    }
  } else {

  }
#line 836
  map->r_status = status;
#line 837
  return;
}
}
#line 843 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static void rpcb_enc_mapping(struct rpc_rqst *req , struct xdr_stream *xdr , struct rpcbind_args  const  *rpcb ) 
{ 
  __be32 *p ;
  long tmp ;
  __be32 *tmp___0 ;
  __u32 tmp___1 ;
  __be32 *tmp___2 ;
  __u32 tmp___3 ;
  __be32 *tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
  {
#line 848
  tmp = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 848
  if (tmp != 0L) {
    {
#line 848
    printk("\001dRPC: %5u encoding PMAP_%s call (%u, %u, %d, %u)\n", (int )(req->rq_task)->tk_pid,
           ((req->rq_task)->tk_msg.rpc_proc)->p_name, rpcb->r_prog, rpcb->r_vers,
           rpcb->r_prot, (int )rpcb->r_port);
    }
  } else {

  }
  {
#line 853
  p = xdr_reserve_space(xdr, 16UL);
#line 854
  tmp___0 = p;
#line 854
  p = p + 1;
#line 854
  tmp___1 = __fswab32(rpcb->r_prog);
#line 854
  *tmp___0 = tmp___1;
#line 855
  tmp___2 = p;
#line 855
  p = p + 1;
#line 855
  tmp___3 = __fswab32(rpcb->r_vers);
#line 855
  *tmp___2 = tmp___3;
#line 856
  tmp___4 = p;
#line 856
  p = p + 1;
#line 856
  tmp___5 = __fswab32(rpcb->r_prot);
#line 856
  *tmp___4 = tmp___5;
#line 857
  tmp___6 = __fswab32((__u32 )rpcb->r_port);
#line 857
  *p = tmp___6;
  }
#line 858
  return;
}
}
#line 860 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_dec_getport(struct rpc_rqst *req , struct xdr_stream *xdr , struct rpcbind_args *rpcb ) 
{ 
  unsigned long port ;
  __be32 *p ;
  long tmp ;
  __u32 tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 866
  rpcb->r_port = 0U;
#line 868
  p = xdr_inline_decode(xdr, 4UL);
#line 869
  tmp = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U), 0L);
  }
#line 869
  if (tmp != 0L) {
#line 870
    return (-5);
  } else {

  }
  {
#line 872
  tmp___0 = __be32_to_cpup((__be32 const   *)p);
#line 872
  port = (unsigned long )tmp___0;
#line 873
  tmp___1 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 873
  if (tmp___1 != 0L) {
    {
#line 873
    printk("\001dRPC: %5u PMAP_%s result: %lu\n", (int )(req->rq_task)->tk_pid, ((req->rq_task)->tk_msg.rpc_proc)->p_name,
           port);
    }
  } else {

  }
  {
#line 875
  tmp___2 = __builtin_expect(port > 65535UL, 0L);
  }
#line 875
  if (tmp___2 != 0L) {
#line 876
    return (-5);
  } else {

  }
#line 878
  rpcb->r_port = (unsigned short )port;
#line 879
  return (0);
}
}
#line 882 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_dec_set(struct rpc_rqst *req , struct xdr_stream *xdr , unsigned int *boolp ) 
{ 
  __be32 *p ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 887
  p = xdr_inline_decode(xdr, 4UL);
#line 888
  tmp = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U), 0L);
  }
#line 888
  if (tmp != 0L) {
#line 889
    return (-5);
  } else {

  }
#line 891
  *boolp = 0U;
#line 892
  if (*p != 0U) {
#line 893
    *boolp = 1U;
  } else {

  }
  {
#line 895
  tmp___0 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 895
  if (tmp___0 != 0L) {
    {
#line 895
    printk("\001dRPC: %5u RPCB_%s call %s\n", (int )(req->rq_task)->tk_pid, ((req->rq_task)->tk_msg.rpc_proc)->p_name,
           *boolp != 0U ? (char *)"succeeded" : (char *)"failed");
    }
  } else {

  }
#line 899
  return (0);
}
}
#line 902 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static void encode_rpcb_string(struct xdr_stream *xdr , char const   *string , u32 const   maxstrlen ) 
{ 
  __be32 *p ;
  u32 len ;
  size_t tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 908
  tmp = strlen(string);
#line 908
  len = (u32 )tmp;
#line 909
  __ret_warn_once = len > (u32 )maxstrlen;
#line 909
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 909
  if (tmp___2 != 0L) {
    {
#line 909
    __ret_warn_on = ! __warned;
#line 909
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 909
    if (tmp___0 != 0L) {
      {
#line 909
      warn_slowpath_null("net/sunrpc/rpcb_clnt.c", 909);
      }
    } else {

    }
    {
#line 909
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 909
    if (tmp___1 != 0L) {
#line 909
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 909
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 910
  if (len > (u32 )maxstrlen) {
#line 912
    len = maxstrlen;
  } else {

  }
  {
#line 913
  p = xdr_reserve_space(xdr, (size_t )(len + 4U));
#line 914
  xdr_encode_opaque(p, (void const   *)string, len);
  }
#line 915
  return;
}
}
#line 917 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static void rpcb_enc_getaddr(struct rpc_rqst *req , struct xdr_stream *xdr , struct rpcbind_args  const  *rpcb ) 
{ 
  __be32 *p ;
  long tmp ;
  __be32 *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
  {
#line 922
  tmp = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 922
  if (tmp != 0L) {
    {
#line 922
    printk("\001dRPC: %5u encoding RPCB_%s call (%u, %u, \'%s\', \'%s\')\n", (int )(req->rq_task)->tk_pid,
           ((req->rq_task)->tk_msg.rpc_proc)->p_name, rpcb->r_prog, rpcb->r_vers,
           rpcb->r_netid, rpcb->r_addr);
    }
  } else {

  }
  {
#line 928
  p = xdr_reserve_space(xdr, 8UL);
#line 929
  tmp___0 = p;
#line 929
  p = p + 1;
#line 929
  tmp___1 = __fswab32(rpcb->r_prog);
#line 929
  *tmp___0 = tmp___1;
#line 930
  tmp___2 = __fswab32(rpcb->r_vers);
#line 930
  *p = tmp___2;
#line 932
  encode_rpcb_string(xdr, rpcb->r_netid, 4U);
#line 933
  encode_rpcb_string(xdr, rpcb->r_addr, 57U);
#line 934
  encode_rpcb_string(xdr, rpcb->r_owner, 2U);
  }
#line 935
  return;
}
}
#line 937 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static int rpcb_dec_getaddr(struct rpc_rqst *req , struct xdr_stream *xdr , struct rpcbind_args *rpcb ) 
{ 
  struct __kernel_sockaddr_storage address ;
  struct sockaddr *sap ;
  __be32 *p ;
  u32 len ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  size_t tmp___4 ;
  long tmp___5 ;

  {
  {
#line 941
  sap = (struct sockaddr *)(& address);
#line 945
  rpcb->r_port = 0U;
#line 947
  p = xdr_inline_decode(xdr, 4UL);
#line 948
  tmp = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U), 0L);
  }
#line 948
  if (tmp != 0L) {
#line 949
    goto out_fail;
  } else {

  }
  {
#line 950
  len = __be32_to_cpup((__be32 const   *)p);
  }
#line 956
  if (len == 0U) {
    {
#line 957
    tmp___0 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
    }
#line 957
    if (tmp___0 != 0L) {
      {
#line 957
      printk("\001dRPC: %5u RPCB reply: program not registered\n", (int )(req->rq_task)->tk_pid);
      }
    } else {

    }
#line 959
    return (0);
  } else {

  }
  {
#line 962
  tmp___1 = __builtin_expect(len > 57U, 0L);
  }
#line 962
  if (tmp___1 != 0L) {
#line 963
    goto out_fail;
  } else {

  }
  {
#line 965
  p = xdr_inline_decode(xdr, (size_t )len);
#line 966
  tmp___2 = __builtin_expect((unsigned long )p == (unsigned long )((__be32 *)0U),
                             0L);
  }
#line 966
  if (tmp___2 != 0L) {
#line 967
    goto out_fail;
  } else {

  }
  {
#line 968
  tmp___3 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 968
  if (tmp___3 != 0L) {
    {
#line 968
    printk("\001dRPC: %5u RPCB_%s reply: %s\n", (int )(req->rq_task)->tk_pid, ((req->rq_task)->tk_msg.rpc_proc)->p_name,
           (char *)p);
    }
  } else {

  }
  {
#line 971
  tmp___4 = rpc_uaddr2sockaddr((req->rq_xprt)->xprt_net, (char const   *)p, (size_t const   )len,
                               sap, 128UL);
  }
#line 971
  if (tmp___4 == 0UL) {
#line 973
    goto out_fail;
  } else {

  }
  {
#line 974
  rpcb->r_port = rpc_get_port((struct sockaddr  const  *)sap);
  }
#line 976
  return (0);
  out_fail: 
  {
#line 979
  tmp___5 = __builtin_expect((rpc_debug & 32U) != 0U, 0L);
  }
#line 979
  if (tmp___5 != 0L) {
    {
#line 979
    printk("\001dRPC: %5u malformed RPCB_%s reply\n", (int )(req->rq_task)->tk_pid,
           ((req->rq_task)->tk_msg.rpc_proc)->p_name);
    }
  } else {

  }
#line 982
  return (-5);
}
}
#line 990 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_procinfo rpcb_procedures2[4U]  = {      {0U, 0, 0, 0U, 0U, 0U, 0U, 0U, 0}, 
        {1U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_mapping),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_set), 4U, 1U, 0U,
      0U, 1U, "SET"}, 
        {2U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_mapping),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_set), 4U, 1U, 0U,
      0U, 2U, "UNSET"}, 
        {3U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_mapping),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_getport), 4U, 1U,
      0U, 0U, 3U, "GETPORT"}};
#line 1023 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_procinfo rpcb_procedures3[4U]  = {      {0U, 0, 0, 0U, 0U, 0U, 0U, 0U, 0}, 
        {1U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_getaddr),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_set), 22U, 1U,
      0U, 0U, 1U, "SET"}, 
        {2U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_getaddr),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_set), 22U, 1U,
      0U, 0U, 2U, "UNSET"}, 
        {3U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_getaddr),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_getaddr), 22U,
      16U, 0U, 0U, 3U, "GETADDR"}};
#line 1056 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_procinfo rpcb_procedures4[4U]  = {      {0U, 0, 0, 0U, 0U, 0U, 0U, 0U, 0}, 
        {1U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_getaddr),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_set), 22U, 1U,
      0U, 0U, 1U, "SET"}, 
        {2U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_getaddr),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_set), 22U, 1U,
      0U, 0U, 2U, "UNSET"}, 
        {3U, (void (*)(void * , struct xdr_stream * , void * ))(& rpcb_enc_getaddr),
      (int (*)(void * , struct xdr_stream * , void * ))(& rpcb_dec_getaddr), 22U,
      16U, 0U, 0U, 3U, "GETADDR"}};
#line 1089 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpcb_info  const  rpcb_next_version[2U]  = {      {2U, (struct rpc_procinfo *)(& rpcb_procedures2) + 3UL}, 
        {0U, (struct rpc_procinfo *)0}};
#line 1099 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpcb_info  const  rpcb_next_version6[3U]  = {      {4U, (struct rpc_procinfo *)(& rpcb_procedures4) + 3UL}, 
        {3U, (struct rpc_procinfo *)(& rpcb_procedures3) + 3UL}, 
        {0U, (struct rpc_procinfo *)0}};
#line 1113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_version  const  rpcb_version2  =    {2U, 4U, (struct rpc_procinfo *)(& rpcb_procedures2)};
#line 1119 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_version  const  rpcb_version3  =    {3U, 4U, (struct rpc_procinfo *)(& rpcb_procedures3)};
#line 1125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_version  const  rpcb_version4  =    {4U, 4U, (struct rpc_procinfo *)(& rpcb_procedures4)};
#line 1131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_version  const  *rpcb_version[5U]  = {      (struct rpc_version  const  *)0,      (struct rpc_version  const  *)0,      & rpcb_version2,      & rpcb_version3, 
        & rpcb_version4};
#line 1139 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_stat rpcb_stats  ;
#line 1141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpcb_clnt.c"
static struct rpc_program  const  rpcb_program  =    {"rpcbind", 100000U, 5U, (struct rpc_version  const  **)(& rpcb_version), & rpcb_stats,
    0};
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/timer.c"
void rpc_init_rtt(struct rpc_rtt *rt , unsigned long timeo ) 
{ 
  unsigned long init ;
  unsigned int i ;

  {
#line 36
  init = 0UL;
#line 39
  rt->timeo = timeo;
#line 41
  if (timeo > 50UL) {
#line 42
    init = (timeo - 50UL) << 3;
  } else {

  }
#line 43
  i = 0U;
#line 43
  goto ldv_45501;
  ldv_45500: 
#line 44
  rt->srtt[i] = init;
#line 45
  rt->sdrtt[i] = 50UL;
#line 46
  rt->ntimeouts[i] = 0;
#line 43
  i = i + 1U;
  ldv_45501: ;
#line 43
  if (i <= 4U) {
#line 45
    goto ldv_45500;
  } else {

  }

#line 50
  return;
}
}
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/timer.c"
void rpc_update_rtt(struct rpc_rtt *rt , unsigned int timer , long m ) 
{ 
  long *srtt ;
  long *sdrtt ;
  unsigned int tmp ;

  {
#line 64
  tmp = timer;
#line 64
  timer = timer - 1U;
#line 64
  if (tmp == 0U) {
#line 65
    return;
  } else {

  }
#line 68
  if (m < 0L) {
#line 69
    return;
  } else {

  }
#line 71
  if (m == 0L) {
#line 72
    m = 1L;
  } else {

  }
#line 74
  srtt = (long *)((unsigned long *)(& rt->srtt) + (unsigned long )timer);
#line 75
  m = m - (*srtt >> 3);
#line 76
  *srtt = *srtt + m;
#line 78
  if (m < 0L) {
#line 79
    m = - m;
  } else {

  }
#line 81
  sdrtt = (long *)((unsigned long *)(& rt->sdrtt) + (unsigned long )timer);
#line 82
  m = m - (*sdrtt >> 2);
#line 83
  *sdrtt = *sdrtt + m;
#line 86
  if (*sdrtt <= 24L) {
#line 87
    *sdrtt = 25L;
  } else {

  }
#line 88
  return;
}
}
#line 109 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/timer.c"
unsigned long rpc_calc_rto(struct rpc_rtt *rt , unsigned int timer ) 
{ 
  unsigned long res ;
  unsigned int tmp ;

  {
#line 113
  tmp = timer;
#line 113
  timer = timer - 1U;
#line 113
  if (tmp == 0U) {
#line 114
    return (rt->timeo);
  } else {

  }
#line 116
  res = ((rt->srtt[timer] + 7UL) >> 3) + rt->sdrtt[timer];
#line 117
  if (res > 15000UL) {
#line 118
    res = 15000UL;
  } else {

  }
#line 120
  return (res);
}
}
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/page.h"
extern bool __virt_addr_valid(unsigned long  ) ;
#line 58 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/string_64.h"
extern void *memmove(void * , void const   * , size_t  ) ;
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
  }
#line 65
  if (tmp != 0L) {
    {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
#line 65
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
  }
#line 67
  if (tmp___0 != 0L) {
    {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
#line 67
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
  }
#line 68
  if (tmp___1 != 0L) {
    {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
#line 68
    __builtin_unreachable();
    }
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
  {
#line 90
  sg_assign_page(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
  }
#line 93
  return;
}
}
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  bool tmp ;
  int tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;

  {
  {
#line 115
  tmp = __virt_addr_valid((unsigned long )buf);
  }
#line 115
  if (tmp) {
#line 115
    tmp___0 = 0;
  } else {
#line 115
    tmp___0 = 1;
  }
  {
#line 115
  tmp___1 = __builtin_expect((long )tmp___0, 0L);
  }
#line 115
  if (tmp___1 != 0L) {
    {
#line 115
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (115), "i" (12UL));
#line 115
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 117
  tmp___2 = __phys_addr((unsigned long )buf);
#line 117
  sg_set_page(sg, (struct page *)-24189255811072L + (tmp___2 >> 12), buflen, (unsigned int )((long )buf) & 4095U);
  }
#line 118
  return;
}
}
#line 226
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
  {
#line 58
  __might_sleep("include/linux/highmem.h", 58, 0);
#line 59
  tmp = lowmem_page_address((struct page  const  *)page);
  }
#line 59
  return (tmp);
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 64
  return;
}
}
#line 99 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/xdr.h"
__be32 *xdr_encode_opaque_fixed(__be32 *p , void const   *ptr , unsigned int nbytes ) ;
#line 101
__be32 *xdr_encode_string(__be32 *p , char const   *string ) ;
#line 102
__be32 *xdr_decode_string_inplace(__be32 *p , char **sp , unsigned int *lenp , unsigned int maxlen ) ;
#line 104
__be32 *xdr_encode_netobj(__be32 *p , struct xdr_netobj  const  *obj ) ;
#line 105
__be32 *xdr_decode_netobj(__be32 *p , struct xdr_netobj *obj ) ;
#line 107
void xdr_inline_pages(struct xdr_buf *xdr , unsigned int offset , struct page **pages ,
                      unsigned int base , unsigned int len ) ;
#line 109
void xdr_terminate_string(struct xdr_buf *buf , u32 const   len ) ;
#line 152
void xdr_shift_buf(struct xdr_buf *buf , size_t len ) ;
#line 153
void xdr_buf_from_iov(struct kvec *iov , struct xdr_buf *buf ) ;
#line 154
int xdr_buf_subsegment(struct xdr_buf *buf , struct xdr_buf *subbuf , unsigned int base ,
                       unsigned int len ) ;
#line 155
void xdr_buf_trim(struct xdr_buf *buf , unsigned int len ) ;
#line 156
int xdr_buf_read_netobj(struct xdr_buf *buf , struct xdr_netobj *obj , unsigned int offset ) ;
#line 157
int read_bytes_from_xdr_buf(struct xdr_buf *buf , unsigned int base , void *obj ,
                            unsigned int len ) ;
#line 158
int write_bytes_to_xdr_buf(struct xdr_buf *buf , unsigned int base , void *obj , unsigned int len ) ;
#line 177
int xdr_encode_word(struct xdr_buf *buf , unsigned int base , u32 obj ) ;
#line 178
int xdr_decode_word(struct xdr_buf *buf , unsigned int base , u32 *obj ) ;
#line 189
int xdr_decode_array2(struct xdr_buf *buf , unsigned int base , struct xdr_array2_desc *desc ) ;
#line 191
int xdr_encode_array2(struct xdr_buf *buf , unsigned int base , struct xdr_array2_desc *desc ) ;
#line 193
void _copy_from_pages(char *p , struct page **pages , size_t pgbase , size_t len ) ;
#line 218
void xdr_write_pages(struct xdr_stream *xdr , struct page **pages , unsigned int base ,
                     unsigned int len ) ;
#line 220
unsigned int xdr_stream_pos(struct xdr_stream  const  *xdr ) ;
#line 222
void xdr_init_decode_pages(struct xdr_stream *xdr , struct xdr_buf *buf , struct page **pages ,
                           unsigned int len ) ;
#line 224
void xdr_set_scratch_buffer(struct xdr_stream *xdr , void *buf , size_t buflen ) ;
#line 226
unsigned int xdr_read_pages(struct xdr_stream *xdr , unsigned int len ) ;
#line 227
void xdr_enter_page(struct xdr_stream *xdr , unsigned int len ) ;
#line 228
int xdr_process_buf(struct xdr_buf *buf , unsigned int offset , unsigned int len ,
                    int (*actor)(struct scatterlist * , void * ) , void *data ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
__be32 *xdr_encode_netobj(__be32 *p , struct xdr_netobj  const  *obj ) 
{ 
  unsigned int quadlen ;
  __be32 *tmp ;
  __u32 tmp___0 ;

  {
  {
#line 25
  quadlen = ((unsigned int )obj->len + 3U) >> 2;
#line 27
  *(p + (unsigned long )quadlen) = 0U;
#line 28
  tmp = p;
#line 28
  p = p + 1;
#line 28
  tmp___0 = __fswab32(obj->len);
#line 28
  *tmp = tmp___0;
#line 29
  memcpy((void *)p, (void const   *)obj->data, (size_t )obj->len);
  }
#line 30
  return (p + (unsigned long )(((unsigned int )obj->len + 3U) >> 2));
}
}
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
__be32 *xdr_decode_netobj(__be32 *p , struct xdr_netobj *obj ) 
{ 
  unsigned int len ;
  __be32 *tmp ;
  __u32 tmp___0 ;

  {
  {
#line 39
  tmp = p;
#line 39
  p = p + 1;
#line 39
  tmp___0 = __fswab32(*tmp);
#line 39
  len = tmp___0;
  }
#line 39
  if (len > 1024U) {
#line 40
    return ((__be32 *)0U);
  } else {

  }
#line 41
  obj->len = len;
#line 42
  obj->data = (u8 *)p;
#line 43
  return (p + (unsigned long )((len + 3U) >> 2));
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
__be32 *xdr_encode_opaque_fixed(__be32 *p , void const   *ptr , unsigned int nbytes ) 
{ 
  unsigned int quadlen ;
  unsigned int padding ;
  long tmp ;

  {
  {
#line 63
  tmp = __builtin_expect(nbytes != 0U, 1L);
  }
#line 63
  if (tmp != 0L) {
#line 64
    quadlen = (nbytes + 3U) >> 2;
#line 65
    padding = (quadlen << 2) - nbytes;
#line 67
    if ((unsigned long )ptr != (unsigned long )((void const   *)0)) {
      {
#line 68
      memcpy((void *)p, ptr, (size_t )nbytes);
      }
    } else {

    }
#line 69
    if (padding != 0U) {
      {
#line 70
      memset((void *)((char *)p + (unsigned long )nbytes), 0, (size_t )padding);
      }
    } else {

    }
#line 71
    p = p + (unsigned long )quadlen;
  } else {

  }
#line 73
  return (p);
}
}
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
__be32 *xdr_encode_opaque(__be32 *p , void const   *ptr , unsigned int nbytes ) 
{ 
  __be32 *tmp ;
  __u32 tmp___0 ;
  __be32 *tmp___1 ;

  {
  {
#line 87
  tmp = p;
#line 87
  p = p + 1;
#line 87
  tmp___0 = __fswab32(nbytes);
#line 87
  *tmp = tmp___0;
#line 88
  tmp___1 = xdr_encode_opaque_fixed(p, ptr, nbytes);
  }
#line 88
  return (tmp___1);
}
}
#line 93 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
__be32 *xdr_encode_string(__be32 *p , char const   *string ) 
{ 
  size_t tmp ;
  __be32 *tmp___0 ;

  {
  {
#line 95
  tmp = strlen(string);
#line 95
  tmp___0 = xdr_encode_array(p, (void const   *)string, (unsigned int )tmp);
  }
#line 95
  return (tmp___0);
}
}
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
__be32 *xdr_decode_string_inplace(__be32 *p , char **sp , unsigned int *lenp , unsigned int maxlen ) 
{ 
  u32 len ;
  __be32 *tmp ;
  __u32 tmp___0 ;

  {
  {
#line 105
  tmp = p;
#line 105
  p = p + 1;
#line 105
  tmp___0 = __fswab32(*tmp);
#line 105
  len = tmp___0;
  }
#line 106
  if (len > maxlen) {
#line 107
    return ((__be32 *)0U);
  } else {

  }
#line 108
  *lenp = len;
#line 109
  *sp = (char *)p;
#line 110
  return (p + (unsigned long )((len + 3U) >> 2));
}
}
#line 127
extern void __compiletime_assert_127(void) ;
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_terminate_string(struct xdr_buf *buf , u32 const   len ) 
{ 
  char *kaddr ;
  void *tmp ;
  bool __cond ;

  {
  {
#line 125
  tmp = kmap_atomic(*(buf->pages));
#line 125
  kaddr = (char *)tmp;
#line 126
  *(kaddr + (unsigned long )(buf->page_base + (unsigned int )len)) = 0;
#line 127
  __cond = 0;
  }
#line 127
  if ((int )__cond) {
    {
#line 127
    __compiletime_assert_127();
    }
  } else {

  }
  {
#line 127
  __kunmap_atomic((void *)kaddr);
  }
#line 128
  return;
}
}
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_inline_pages(struct xdr_buf *xdr , unsigned int offset , struct page **pages ,
                      unsigned int base , unsigned int len ) 
{ 
  struct kvec *head ;
  struct kvec *tail ;
  char *buf ;
  unsigned int buflen ;

  {
#line 135
  head = (struct kvec *)(& xdr->head);
#line 136
  tail = (struct kvec *)(& xdr->tail);
#line 137
  buf = (char *)head->iov_base;
#line 138
  buflen = (unsigned int )head->iov_len;
#line 140
  head->iov_len = (size_t )offset;
#line 142
  xdr->pages = pages;
#line 143
  xdr->page_base = base;
#line 144
  xdr->page_len = len;
#line 146
  tail->iov_base = (void *)(buf + (unsigned long )offset);
#line 147
  tail->iov_len = (size_t )(buflen - offset);
#line 149
  xdr->buflen = xdr->buflen + len;
#line 150
  return;
}
}
#line 213
extern void __compiletime_assert_213(void) ;
#line 217
extern void __compiletime_assert_217(void) ;
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static void _shift_data_right_pages(struct page **pages , size_t pgto_base , size_t pgfrom_base ,
                                    size_t len ) 
{ 
  struct page **pgfrom ;
  struct page **pgto ;
  char *vfrom ;
  char *vto ;
  size_t copy ;
  long tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  bool __cond ;
  bool __cond___0 ;

  {
  {
#line 179
  tmp = __builtin_expect(pgto_base <= pgfrom_base, 0L);
  }
#line 179
  if (tmp != 0L) {
    {
#line 179
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/xdr.c"),
                         "i" (179), "i" (12UL));
#line 179
    __builtin_unreachable();
    }
  } else {

  }
#line 181
  pgto_base = pgto_base + len;
#line 182
  pgfrom_base = pgfrom_base + len;
#line 184
  pgto = pages + (pgto_base >> 12);
#line 185
  pgfrom = pages + (pgfrom_base >> 12);
#line 187
  pgto_base = pgto_base & 4095UL;
#line 188
  pgfrom_base = pgfrom_base & 4095UL;
  ldv_39397: ;
#line 192
  if (pgto_base == 0UL) {
#line 193
    pgto_base = 4096UL;
#line 194
    pgto = pgto - 1;
  } else {

  }
#line 196
  if (pgfrom_base == 0UL) {
#line 197
    pgfrom_base = 4096UL;
#line 198
    pgfrom = pgfrom - 1;
  } else {

  }
#line 201
  copy = len;
#line 202
  if (copy > pgto_base) {
#line 203
    copy = pgto_base;
  } else {

  }
#line 204
  if (copy > pgfrom_base) {
#line 205
    copy = pgfrom_base;
  } else {

  }
  {
#line 206
  pgto_base = pgto_base - copy;
#line 207
  pgfrom_base = pgfrom_base - copy;
#line 209
  tmp___0 = kmap_atomic(*pgto);
#line 209
  vto = (char *)tmp___0;
  }
#line 210
  if ((unsigned long )*pgto != (unsigned long )*pgfrom) {
    {
#line 211
    tmp___1 = kmap_atomic(*pgfrom);
#line 211
    vfrom = (char *)tmp___1;
#line 212
    memcpy((void *)(vto + pgto_base), (void const   *)(vfrom + pgfrom_base), copy);
#line 213
    __cond = 0;
    }
#line 213
    if ((int )__cond) {
      {
#line 213
      __compiletime_assert_213();
      }
    } else {

    }
    {
#line 213
    __kunmap_atomic((void *)vfrom);
    }
  } else {
    {
#line 215
    memmove((void *)(vto + pgto_base), (void const   *)(vto + pgfrom_base), copy);
    }
  }
#line 217
  __cond___0 = 0;
#line 217
  if ((int )__cond___0) {
    {
#line 217
    __compiletime_assert_217();
    }
  } else {

  }
  {
#line 217
  __kunmap_atomic((void *)vto);
#line 219
  len = len - copy;
  }
#line 219
  if (len != 0UL) {
#line 221
    goto ldv_39397;
  } else {

  }

#line 226
  return;
}
}
#line 249
extern void __compiletime_assert_249(void) ;
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static void _copy_to_pages(struct page **pages , size_t pgbase , char const   *p ,
                           size_t len ) 
{ 
  struct page **pgto ;
  char *vto ;
  size_t copy ;
  void *tmp ;
  bool __cond ;

  {
#line 239
  pgto = pages + (pgbase >> 12);
#line 240
  pgbase = pgbase & 4095UL;
  ldv_39413: 
#line 243
  copy = 4096UL - pgbase;
#line 244
  if (copy > len) {
#line 245
    copy = len;
  } else {

  }
  {
#line 247
  tmp = kmap_atomic(*pgto);
#line 247
  vto = (char *)tmp;
#line 248
  memcpy((void *)(vto + pgbase), (void const   *)p, copy);
#line 249
  __cond = 0;
  }
#line 249
  if ((int )__cond) {
    {
#line 249
    __compiletime_assert_249();
    }
  } else {

  }
  {
#line 249
  __kunmap_atomic((void *)vto);
#line 251
  len = len - copy;
  }
#line 252
  if (len == 0UL) {
#line 253
    goto ldv_39412;
  } else {

  }
#line 255
  pgbase = pgbase + copy;
#line 256
  if (pgbase == 4096UL) {
#line 258
    pgbase = 0UL;
#line 259
    pgto = pgto + 1;
  } else {

  }
#line 261
  p = p + copy;
#line 262
  goto ldv_39413;
  ldv_39412: ;
#line 264
  return;
}
}
#line 293
extern void __compiletime_assert_293(void) ;
#line 277 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void _copy_from_pages(char *p , struct page **pages , size_t pgbase , size_t len ) 
{ 
  struct page **pgfrom ;
  char *vfrom ;
  size_t copy ;
  void *tmp ;
  bool __cond ;

  {
#line 283
  pgfrom = pages + (pgbase >> 12);
#line 284
  pgbase = pgbase & 4095UL;
  ldv_39427: 
#line 287
  copy = 4096UL - pgbase;
#line 288
  if (copy > len) {
#line 289
    copy = len;
  } else {

  }
  {
#line 291
  tmp = kmap_atomic(*pgfrom);
#line 291
  vfrom = (char *)tmp;
#line 292
  memcpy((void *)p, (void const   *)(vfrom + pgbase), copy);
#line 293
  __cond = 0;
  }
#line 293
  if ((int )__cond) {
    {
#line 293
    __compiletime_assert_293();
    }
  } else {

  }
  {
#line 293
  __kunmap_atomic((void *)vfrom);
#line 295
  pgbase = pgbase + copy;
  }
#line 296
  if (pgbase == 4096UL) {
#line 297
    pgbase = 0UL;
#line 298
    pgfrom = pgfrom + 1;
  } else {

  }
#line 300
  p = p + copy;
#line 302
  len = len - copy;
#line 302
  if (len != 0UL) {
#line 304
    goto ldv_39427;
  } else {

  }

#line 309
  return;
}
}
#line 316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static void xdr_shrink_bufhead(struct xdr_buf *buf , size_t len ) 
{ 
  struct kvec *head ;
  struct kvec *tail ;
  size_t copy ;
  size_t offs ;
  unsigned int pglen ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 320
  pglen = buf->page_len;
#line 322
  tail = (struct kvec *)(& buf->tail);
#line 323
  head = (struct kvec *)(& buf->head);
#line 325
  __ret_warn_once = len > head->iov_len;
#line 325
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 325
  if (tmp___1 != 0L) {
    {
#line 325
    __ret_warn_on = ! __warned;
#line 325
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 325
    if (tmp != 0L) {
      {
#line 325
      warn_slowpath_null("net/sunrpc/xdr.c", 325);
      }
    } else {

    }
    {
#line 325
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 325
    if (tmp___0 != 0L) {
#line 325
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 325
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 326
  if (len > head->iov_len) {
#line 327
    len = head->iov_len;
  } else {

  }
#line 330
  if (tail->iov_len != 0UL) {
#line 331
    if (tail->iov_len > len) {
      {
#line 332
      copy = tail->iov_len - len;
#line 333
      memmove((void *)((char *)tail->iov_base + len), (void const   *)tail->iov_base,
              copy);
      }
    } else {

    }
#line 337
    copy = len;
#line 338
    if (copy > (size_t )pglen) {
#line 339
      copy = (size_t )pglen;
    } else {

    }
#line 340
    offs = len - copy;
#line 341
    if (offs >= tail->iov_len) {
#line 342
      copy = 0UL;
    } else
#line 343
    if (copy > tail->iov_len - offs) {
#line 344
      copy = tail->iov_len - offs;
    } else {

    }
#line 345
    if (copy != 0UL) {
      {
#line 346
      _copy_from_pages((char *)tail->iov_base + offs, buf->pages, ((size_t )(buf->page_base + pglen) + offs) - len,
                       copy);
      }
    } else {

    }
#line 351
    if (len > (size_t )pglen) {
#line 352
      copy = len - (size_t )pglen;
#line 352
      offs = copy;
#line 353
      if (copy > tail->iov_len) {
#line 354
        copy = tail->iov_len;
      } else {

      }
      {
#line 355
      memcpy(tail->iov_base, (void const   *)((char *)head->iov_base + (head->iov_len - offs)),
             copy);
      }
    } else {

    }
  } else {

  }
#line 362
  if (pglen != 0U) {
#line 363
    if ((size_t )pglen > len) {
      {
#line 364
      _shift_data_right_pages(buf->pages, (size_t )buf->page_base + len, (size_t )buf->page_base,
                              (size_t )pglen - len);
      }
    } else {

    }
#line 368
    copy = len;
#line 369
    if (len > (size_t )pglen) {
#line 370
      copy = (size_t )pglen;
    } else {

    }
    {
#line 371
    _copy_to_pages(buf->pages, (size_t )buf->page_base, (char const   *)((char *)head->iov_base + (head->iov_len - len)),
                   copy);
    }
  } else {

  }
#line 375
  head->iov_len = head->iov_len - len;
#line 376
  buf->buflen = buf->buflen - (unsigned int )len;
#line 378
  if (buf->len > buf->buflen) {
#line 379
    buf->len = buf->buflen;
  } else {

  }
#line 380
  return;
}
}
#line 392 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static void xdr_shrink_pagelen(struct xdr_buf *buf , size_t len ) 
{ 
  struct kvec *tail ;
  size_t copy ;
  unsigned int pglen ;
  unsigned int tailbuf_len ;
  long tmp ;
  unsigned int free_space ;
  char *p ;

  {
  {
#line 396
  pglen = buf->page_len;
#line 399
  tail = (struct kvec *)(& buf->tail);
#line 400
  tmp = __builtin_expect(len > (size_t )pglen, 0L);
  }
#line 400
  if (tmp != 0L) {
    {
#line 400
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/xdr.c"),
                         "i" (400), "i" (12UL));
#line 400
    __builtin_unreachable();
    }
  } else {

  }
#line 402
  tailbuf_len = (buf->buflen - (unsigned int )((struct kvec *)(& buf->head))->iov_len) - buf->page_len;
#line 405
  if (tailbuf_len != 0U) {
#line 406
    free_space = tailbuf_len - (unsigned int )tail->iov_len;
#line 408
    if (len < (size_t )free_space) {
#line 409
      free_space = (unsigned int )len;
    } else {

    }
#line 410
    tail->iov_len = tail->iov_len + (size_t )free_space;
#line 412
    copy = len;
#line 413
    if (tail->iov_len > len) {
      {
#line 414
      p = (char *)tail->iov_base + len;
#line 415
      memmove((void *)p, (void const   *)tail->iov_base, tail->iov_len - len);
      }
    } else {
#line 417
      copy = tail->iov_len;
    }
    {
#line 419
    _copy_from_pages((char *)tail->iov_base, buf->pages, (size_t )(buf->page_base + pglen) - len,
                     copy);
    }
  } else {

  }
#line 423
  buf->page_len = buf->page_len - (unsigned int )len;
#line 424
  buf->buflen = buf->buflen - (unsigned int )len;
#line 426
  if (buf->len > buf->buflen) {
#line 427
    buf->len = buf->buflen;
  } else {

  }
#line 428
  return;
}
}
#line 431 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_shift_buf(struct xdr_buf *buf , size_t len ) 
{ 


  {
  {
#line 433
  xdr_shrink_bufhead(buf, len);
  }
#line 434
  return;
}
}
#line 441 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
unsigned int xdr_stream_pos(struct xdr_stream  const  *xdr ) 
{ 


  {
#line 443
  return (((((xdr->buf)->len + 3U) >> 2) - (unsigned int )xdr->nwords) << 2);
}
}
#line 460 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_init_encode(struct xdr_stream *xdr , struct xdr_buf *buf , __be32 *p ) 
{ 
  struct kvec *iov ;
  int scratch_len ;
  long tmp ;
  long tmp___0 ;
  size_t len ;
  long tmp___1 ;
  long tmp___2 ;

  {
  {
#line 462
  iov = (struct kvec *)(& buf->head);
#line 463
  scratch_len = (int )((buf->buflen - buf->page_len) - (unsigned int )buf->tail[0].iov_len);
#line 465
  tmp = __builtin_expect(scratch_len < 0, 0L);
  }
#line 465
  if (tmp != 0L) {
    {
#line 465
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/xdr.c"),
                         "i" (465), "i" (12UL));
#line 465
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 466
  xdr->buf = buf;
#line 467
  xdr->iov = iov;
#line 468
  xdr->p = (__be32 *)((char *)iov->iov_base + iov->iov_len);
#line 469
  xdr->end = (__be32 *)((char *)iov->iov_base + (unsigned long )scratch_len);
#line 470
  tmp___0 = __builtin_expect(iov->iov_len > (size_t )scratch_len, 0L);
  }
#line 470
  if (tmp___0 != 0L) {
    {
#line 470
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/xdr.c"),
                         "i" (470), "i" (12UL));
#line 470
    __builtin_unreachable();
    }
  } else {

  }
#line 472
  if ((unsigned long )p != (unsigned long )xdr->p && (unsigned long )p != (unsigned long )((__be32 *)0U)) {
    {
#line 475
    tmp___1 = __builtin_expect((unsigned long )p < (unsigned long )xdr->p, 0L);
    }
#line 475
    if (tmp___1 != 0L) {
      {
#line 475
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/xdr.c"),
                           "i" (475), "i" (12UL));
#line 475
      __builtin_unreachable();
      }
    } else {
      {
#line 475
      tmp___2 = __builtin_expect((unsigned long )p > (unsigned long )xdr->end, 0L);
      }
#line 475
      if (tmp___2 != 0L) {
        {
#line 475
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/xdr.c"),
                             "i" (475), "i" (12UL));
#line 475
        __builtin_unreachable();
        }
      } else {

      }
    }
#line 476
    len = (size_t )((long )p - (long )xdr->p);
#line 477
    xdr->p = p;
#line 478
    buf->len = buf->len + (unsigned int )len;
#line 479
    iov->iov_len = iov->iov_len + len;
  } else {

  }
#line 481
  return;
}
}
#line 493 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
__be32 *xdr_reserve_space(struct xdr_stream *xdr , size_t nbytes ) 
{ 
  __be32 *p ;
  __be32 *q ;
  long tmp ;

  {
  {
#line 495
  p = xdr->p;
#line 499
  nbytes = nbytes + 3UL;
#line 500
  nbytes = nbytes & 0xfffffffffffffffcUL;
#line 501
  q = p + (nbytes >> 2);
#line 502
  tmp = __builtin_expect((long )((unsigned long )q > (unsigned long )xdr->end || (unsigned long )q < (unsigned long )p),
                         0L);
  }
#line 502
  if (tmp != 0L) {
#line 503
    return ((__be32 *)0U);
  } else {

  }
#line 504
  xdr->p = q;
#line 505
  (xdr->iov)->iov_len = (xdr->iov)->iov_len + nbytes;
#line 506
  (xdr->buf)->len = (xdr->buf)->len + (unsigned int )nbytes;
#line 507
  return (p);
}
}
#line 519 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_write_pages(struct xdr_stream *xdr , struct page **pages , unsigned int base ,
                     unsigned int len ) 
{ 
  struct xdr_buf *buf ;
  struct kvec *iov ;
  unsigned int pad ;
  long tmp ;
  __be32 *tmp___0 ;

  {
#line 522
  buf = xdr->buf;
#line 523
  iov = (struct kvec *)(& buf->tail);
#line 524
  buf->pages = pages;
#line 525
  buf->page_base = base;
#line 526
  buf->page_len = len;
#line 528
  iov->iov_base = (void *)xdr->p;
#line 529
  iov->iov_len = 0UL;
#line 530
  xdr->iov = iov;
#line 532
  if ((len & 3U) != 0U) {
    {
#line 533
    pad = 4U - (len & 3U);
#line 535
    tmp = __builtin_expect((unsigned long )xdr->p >= (unsigned long )xdr->end, 0L);
    }
#line 535
    if (tmp != 0L) {
      {
#line 535
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/xdr.c"),
                           "i" (535), "i" (12UL));
#line 535
      __builtin_unreachable();
      }
    } else {

    }
#line 536
    iov->iov_base = (void *)((char *)xdr->p + ((unsigned long )len & 3UL));
#line 537
    iov->iov_len = iov->iov_len + (size_t )pad;
#line 538
    len = len + pad;
#line 539
    tmp___0 = xdr->p;
#line 539
    xdr->p = xdr->p + 1;
#line 539
    *tmp___0 = 0U;
  } else {

  }
#line 541
  buf->buflen = buf->buflen + len;
#line 542
  buf->len = buf->len + len;
#line 543
  return;
}
}
#line 546 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static void xdr_set_iov(struct xdr_stream *xdr , struct kvec *iov , unsigned int len ) 
{ 


  {
#line 549
  if ((size_t )len > iov->iov_len) {
#line 550
    len = (unsigned int )iov->iov_len;
  } else {

  }
#line 551
  xdr->p = (__be32 *)iov->iov_base;
#line 552
  xdr->end = (__be32 *)(iov->iov_base + (unsigned long )len);
#line 553
  xdr->iov = iov;
#line 554
  xdr->page_ptr = (struct page **)0;
#line 555
  return;
}
}
#line 557 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static int xdr_set_page_base(struct xdr_stream *xdr , unsigned int base , unsigned int len ) 
{ 
  unsigned int pgnr ;
  unsigned int maxlen ;
  unsigned int pgoff ;
  unsigned int pgend ;
  void *kaddr ;

  {
#line 566
  maxlen = (xdr->buf)->page_len;
#line 567
  if (base >= maxlen) {
#line 568
    return (-22);
  } else {

  }
#line 569
  maxlen = maxlen - base;
#line 570
  if (len > maxlen) {
#line 571
    len = maxlen;
  } else {

  }
  {
#line 573
  base = base + (xdr->buf)->page_base;
#line 575
  pgnr = base >> 12;
#line 576
  xdr->page_ptr = (xdr->buf)->pages + (unsigned long )pgnr;
#line 577
  kaddr = lowmem_page_address((struct page  const  *)*(xdr->page_ptr));
#line 579
  pgoff = base & 4095U;
#line 580
  xdr->p = (__be32 *)(kaddr + (unsigned long )pgoff);
#line 582
  pgend = pgoff + len;
  }
#line 583
  if (pgend > 4096U) {
#line 584
    pgend = 4096U;
  } else {

  }
#line 585
  xdr->end = (__be32 *)(kaddr + (unsigned long )pgend);
#line 586
  xdr->iov = (struct kvec *)0;
#line 587
  return (0);
}
}
#line 590 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static void xdr_set_next_page(struct xdr_stream *xdr ) 
{ 
  unsigned int newbase ;
  int tmp ;

  {
  {
#line 594
  newbase = (unsigned int )(((long )(xdr->page_ptr + 1UL) - (long )(xdr->buf)->pages) / 8L) << 12U;
#line 595
  newbase = newbase - (xdr->buf)->page_base;
#line 597
  tmp = xdr_set_page_base(xdr, newbase, 4096U);
  }
#line 597
  if (tmp < 0) {
    {
#line 598
    xdr_set_iov(xdr, (struct kvec *)(& (xdr->buf)->tail), (xdr->buf)->len);
    }
  } else {

  }
#line 599
  return;
}
}
#line 601 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static bool xdr_set_next_buffer(struct xdr_stream *xdr ) 
{ 
  int tmp ;

  {
#line 603
  if ((unsigned long )xdr->page_ptr != (unsigned long )((struct page **)0)) {
    {
#line 604
    xdr_set_next_page(xdr);
    }
  } else
#line 605
  if ((unsigned long )xdr->iov == (unsigned long )((struct kvec *)(& (xdr->buf)->head))) {
    {
#line 606
    tmp = xdr_set_page_base(xdr, 0U, 4096U);
    }
#line 606
    if (tmp < 0) {
      {
#line 607
      xdr_set_iov(xdr, (struct kvec *)(& (xdr->buf)->tail), (xdr->buf)->len);
      }
    } else {

    }
  } else {

  }
#line 609
  return ((unsigned long )xdr->p != (unsigned long )xdr->end);
}
}
#line 618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_init_decode(struct xdr_stream *xdr , struct xdr_buf *buf , __be32 *p ) 
{ 


  {
#line 620
  xdr->buf = buf;
#line 621
  xdr->scratch.iov_base = (void *)0;
#line 622
  xdr->scratch.iov_len = 0UL;
#line 623
  xdr->nwords = (buf->len + 3U) >> 2;
#line 624
  if (buf->head[0].iov_len != 0UL) {
    {
#line 625
    xdr_set_iov(xdr, (struct kvec *)(& buf->head), buf->len);
    }
  } else
#line 626
  if (buf->page_len != 0U) {
    {
#line 627
    xdr_set_page_base(xdr, 0U, buf->len);
    }
  } else {

  }
#line 628
  if (((unsigned long )p != (unsigned long )((__be32 *)0U) && (unsigned long )p > (unsigned long )xdr->p) && (unsigned long )xdr->end >= (unsigned long )p) {
#line 629
    xdr->nwords = xdr->nwords - (unsigned int )(((long )p - (long )xdr->p) / 4L);
#line 630
    xdr->p = p;
  } else {

  }
#line 632
  return;
}
}
#line 642 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_init_decode_pages(struct xdr_stream *xdr , struct xdr_buf *buf , struct page **pages ,
                           unsigned int len ) 
{ 


  {
  {
#line 645
  memset((void *)buf, 0, 64UL);
#line 646
  buf->pages = pages;
#line 647
  buf->page_len = len;
#line 648
  buf->buflen = len;
#line 649
  buf->len = len;
#line 650
  xdr_init_decode(xdr, buf, (__be32 *)0U);
  }
#line 651
  return;
}
}
#line 654 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static __be32 *__xdr_inline_decode(struct xdr_stream *xdr , size_t nbytes ) 
{ 
  unsigned int nwords ;
  __be32 *p ;
  __be32 *q ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 656
  nwords = (unsigned int )((nbytes + 3UL) >> 2);
#line 657
  p = xdr->p;
#line 658
  q = p + (unsigned long )nwords;
#line 660
  tmp = __builtin_expect(nwords > xdr->nwords, 0L);
  }
#line 660
  if (tmp != 0L) {
#line 661
    return ((__be32 *)0U);
  } else {
    {
#line 660
    tmp___0 = __builtin_expect((long )((unsigned long )q > (unsigned long )xdr->end || (unsigned long )q < (unsigned long )p),
                               0L);
    }
#line 660
    if (tmp___0 != 0L) {
#line 661
      return ((__be32 *)0U);
    } else {

    }
  }
#line 662
  xdr->p = q;
#line 663
  xdr->nwords = xdr->nwords - nwords;
#line 664
  return (p);
}
}
#line 678 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_set_scratch_buffer(struct xdr_stream *xdr , void *buf , size_t buflen ) 
{ 


  {
#line 680
  xdr->scratch.iov_base = buf;
#line 681
  xdr->scratch.iov_len = buflen;
#line 682
  return;
}
}
#line 685 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static __be32 *xdr_copy_to_scratch(struct xdr_stream *xdr , size_t nbytes ) 
{ 
  __be32 *p ;
  void *cpdest ;
  size_t cplen ;
  bool tmp ;
  int tmp___0 ;

  {
#line 688
  cpdest = xdr->scratch.iov_base;
#line 689
  cplen = (size_t )((long )xdr->end - (long )xdr->p);
#line 691
  if (nbytes > xdr->scratch.iov_len) {
#line 692
    return ((__be32 *)0U);
  } else {

  }
  {
#line 693
  memcpy(cpdest, (void const   *)xdr->p, cplen);
#line 694
  cpdest = cpdest + cplen;
#line 695
  nbytes = nbytes - cplen;
#line 696
  tmp = xdr_set_next_buffer(xdr);
  }
#line 696
  if (tmp) {
#line 696
    tmp___0 = 0;
  } else {
#line 696
    tmp___0 = 1;
  }
#line 696
  if (tmp___0) {
#line 697
    return ((__be32 *)0U);
  } else {

  }
  {
#line 698
  p = __xdr_inline_decode(xdr, nbytes);
  }
#line 699
  if ((unsigned long )p == (unsigned long )((__be32 *)0U)) {
#line 700
    return ((__be32 *)0U);
  } else {

  }
  {
#line 701
  memcpy(cpdest, (void const   *)p, nbytes);
  }
#line 702
  return ((__be32 *)xdr->scratch.iov_base);
}
}
#line 715 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
__be32 *xdr_inline_decode(struct xdr_stream *xdr , size_t nbytes ) 
{ 
  __be32 *p ;
  bool tmp ;
  int tmp___0 ;
  __be32 *tmp___1 ;

  {
#line 719
  if (nbytes == 0UL) {
#line 720
    return (xdr->p);
  } else {

  }
#line 721
  if ((unsigned long )xdr->p == (unsigned long )xdr->end) {
    {
#line 721
    tmp = xdr_set_next_buffer(xdr);
    }
#line 721
    if (tmp) {
#line 721
      tmp___0 = 0;
    } else {
#line 721
      tmp___0 = 1;
    }
#line 721
    if (tmp___0) {
#line 722
      return ((__be32 *)0U);
    } else {

    }
  } else {

  }
  {
#line 723
  p = __xdr_inline_decode(xdr, nbytes);
  }
#line 724
  if ((unsigned long )p != (unsigned long )((__be32 *)0U)) {
#line 725
    return (p);
  } else {

  }
  {
#line 726
  tmp___1 = xdr_copy_to_scratch(xdr, nbytes);
  }
#line 726
  return (tmp___1);
}
}
#line 730 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static unsigned int xdr_align_pages(struct xdr_stream *xdr , unsigned int len ) 
{ 
  struct xdr_buf *buf ;
  struct kvec *iov ;
  unsigned int nwords ;
  unsigned int cur ;
  unsigned int tmp ;

  {
  {
#line 732
  buf = xdr->buf;
#line 734
  nwords = (len + 3U) >> 2;
#line 735
  tmp = xdr_stream_pos((struct xdr_stream  const  *)xdr);
#line 735
  cur = tmp;
  }
#line 737
  if (xdr->nwords == 0U) {
#line 738
    return (0U);
  } else {

  }
#line 740
  iov = (struct kvec *)(& buf->head);
#line 741
  if (iov->iov_len > (size_t )cur) {
    {
#line 742
    xdr_shrink_bufhead(buf, iov->iov_len - (size_t )cur);
#line 743
    xdr->nwords = ((buf->len - cur) + 3U) >> 2;
    }
  } else {

  }
#line 746
  if (nwords > xdr->nwords) {
#line 747
    nwords = xdr->nwords;
#line 748
    len = nwords << 2;
  } else {

  }
#line 750
  if (buf->page_len <= len) {
#line 751
    len = buf->page_len;
  } else
#line 752
  if (nwords < xdr->nwords) {
    {
#line 754
    xdr_shrink_pagelen(buf, (size_t )(buf->page_len - len));
#line 755
    xdr->nwords = ((buf->len - cur) + 3U) >> 2;
    }
  } else {

  }
#line 757
  return (len);
}
}
#line 771 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
unsigned int xdr_read_pages(struct xdr_stream *xdr , unsigned int len ) 
{ 
  struct xdr_buf *buf ;
  struct kvec *iov ;
  unsigned int nwords ;
  unsigned int end ;
  unsigned int padding ;

  {
  {
#line 773
  buf = xdr->buf;
#line 779
  len = xdr_align_pages(xdr, len);
  }
#line 780
  if (len == 0U) {
#line 781
    return (0U);
  } else {

  }
#line 782
  nwords = (len + 3U) >> 2;
#line 783
  padding = (nwords << 2) - len;
#line 784
  iov = (struct kvec *)(& buf->tail);
#line 784
  xdr->iov = iov;
#line 786
  end = ((xdr->nwords - nwords) << 2) + padding;
#line 787
  if ((size_t )end > iov->iov_len) {
#line 788
    end = (unsigned int )iov->iov_len;
  } else {

  }
#line 794
  xdr->p = (__be32 *)((char *)iov->iov_base + (unsigned long )padding);
#line 795
  xdr->end = (__be32 *)((char *)iov->iov_base + (unsigned long )end);
#line 796
  xdr->page_ptr = (struct page **)0;
#line 797
  xdr->nwords = ((end - padding) + 3U) >> 2;
#line 798
  return (len);
}
}
#line 812 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_enter_page(struct xdr_stream *xdr , unsigned int len ) 
{ 


  {
  {
#line 814
  len = xdr_align_pages(xdr, len);
  }
#line 819
  if (len != 0U) {
    {
#line 820
    xdr_set_page_base(xdr, 0U, len);
    }
  } else {

  }
#line 821
  return;
}
}
#line 824 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static struct kvec empty_iov  =    {(void *)0, 0UL};
#line 827 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_buf_from_iov(struct kvec *iov , struct xdr_buf *buf ) 
{ 
  unsigned int tmp ;

  {
#line 829
  buf->head[0] = *iov;
#line 830
  buf->tail[0] = empty_iov;
#line 831
  buf->page_len = 0U;
#line 832
  tmp = (unsigned int )iov->iov_len;
#line 832
  buf->len = tmp;
#line 832
  buf->buflen = tmp;
#line 833
  return;
}
}
#line 839 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int xdr_buf_subsegment(struct xdr_buf *buf , struct xdr_buf *subbuf , unsigned int base ,
                       unsigned int len ) 
{ 
  unsigned int tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;

  {
#line 842
  tmp = len;
#line 842
  subbuf->len = tmp;
#line 842
  subbuf->buflen = tmp;
#line 843
  if ((size_t )base < buf->head[0].iov_len) {
#line 844
    subbuf->head[0].iov_base = buf->head[0].iov_base + (unsigned long )base;
#line 845
    __min1 = len;
#line 845
    __min2 = (unsigned int )buf->head[0].iov_len - base;
#line 845
    subbuf->head[0].iov_len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 847
    len = len - (unsigned int )subbuf->head[0].iov_len;
#line 848
    base = 0U;
  } else {
#line 850
    subbuf->head[0].iov_base = (void *)0;
#line 851
    subbuf->head[0].iov_len = 0UL;
#line 852
    base = base - (unsigned int )buf->head[0].iov_len;
  }
#line 855
  if (base < buf->page_len) {
#line 856
    _min1 = buf->page_len - base;
#line 856
    _min2 = len;
#line 856
    subbuf->page_len = _min1 < _min2 ? _min1 : _min2;
#line 857
    base = base + buf->page_base;
#line 858
    subbuf->page_base = base & 4095U;
#line 859
    subbuf->pages = buf->pages + (unsigned long )(base >> 12);
#line 860
    len = len - subbuf->page_len;
#line 861
    base = 0U;
  } else {
#line 863
    base = base - buf->page_len;
#line 864
    subbuf->page_len = 0U;
  }
#line 867
  if ((size_t )base < buf->tail[0].iov_len) {
#line 868
    subbuf->tail[0].iov_base = buf->tail[0].iov_base + (unsigned long )base;
#line 869
    __min1___0 = len;
#line 869
    __min2___0 = (unsigned int )buf->tail[0].iov_len - base;
#line 869
    subbuf->tail[0].iov_len = (size_t )(__min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 871
    len = len - (unsigned int )subbuf->tail[0].iov_len;
#line 872
    base = 0U;
  } else {
#line 874
    subbuf->tail[0].iov_base = (void *)0;
#line 875
    subbuf->tail[0].iov_len = 0UL;
#line 876
    base = base - (unsigned int )buf->tail[0].iov_len;
  }
#line 879
  if ((base | len) != 0U) {
#line 880
    return (-1);
  } else {

  }
#line 881
  return (0);
}
}
#line 895 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
void xdr_buf_trim(struct xdr_buf *buf , unsigned int len ) 
{ 
  size_t cur ;
  unsigned int trim ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __min1___1 ;
  size_t __min2___1 ;

  {
#line 898
  trim = len;
#line 900
  if (buf->tail[0].iov_len != 0UL) {
#line 901
    __min1 = buf->tail[0].iov_len;
#line 901
    __min2 = (size_t )trim;
#line 901
    cur = __min1 < __min2 ? __min1 : __min2;
#line 902
    buf->tail[0].iov_len = buf->tail[0].iov_len - cur;
#line 903
    trim = trim - (unsigned int )cur;
#line 904
    if (trim == 0U) {
#line 905
      goto fix_len;
    } else {

    }
  } else {

  }
#line 908
  if (buf->page_len != 0U) {
#line 909
    __min1___0 = buf->page_len;
#line 909
    __min2___0 = trim;
#line 909
    cur = (size_t )(__min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 910
    buf->page_len = buf->page_len - (unsigned int )cur;
#line 911
    trim = trim - (unsigned int )cur;
#line 912
    if (trim == 0U) {
#line 913
      goto fix_len;
    } else {

    }
  } else {

  }
#line 916
  if (buf->head[0].iov_len != 0UL) {
#line 917
    __min1___1 = buf->head[0].iov_len;
#line 917
    __min2___1 = (size_t )trim;
#line 917
    cur = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 918
    buf->head[0].iov_len = buf->head[0].iov_len - cur;
#line 919
    trim = trim - (unsigned int )cur;
  } else {

  }
  fix_len: 
#line 922
  buf->len = buf->len + (trim - len);
#line 923
  return;
}
}
#line 926 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static void __read_bytes_from_xdr_buf(struct xdr_buf *subbuf , void *obj , unsigned int len ) 
{ 
  unsigned int this_len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  unsigned int __min1___1 ;
  unsigned int __min2___1 ;

  {
  {
#line 930
  __min1 = len;
#line 930
  __min2 = (unsigned int )subbuf->head[0].iov_len;
#line 930
  this_len = __min1 < __min2 ? __min1 : __min2;
#line 931
  memcpy(obj, (void const   *)subbuf->head[0].iov_base, (size_t )this_len);
#line 932
  len = len - this_len;
#line 933
  obj = obj + (unsigned long )this_len;
#line 934
  __min1___0 = len;
#line 934
  __min2___0 = subbuf->page_len;
#line 934
  this_len = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
  }
#line 935
  if (this_len != 0U) {
    {
#line 936
    _copy_from_pages((char *)obj, subbuf->pages, (size_t )subbuf->page_base, (size_t )this_len);
    }
  } else {

  }
  {
#line 937
  len = len - this_len;
#line 938
  obj = obj + (unsigned long )this_len;
#line 939
  __min1___1 = len;
#line 939
  __min2___1 = (unsigned int )subbuf->tail[0].iov_len;
#line 939
  this_len = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 940
  memcpy(obj, (void const   *)subbuf->tail[0].iov_base, (size_t )this_len);
  }
#line 941
  return;
}
}
#line 944 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int read_bytes_from_xdr_buf(struct xdr_buf *buf , unsigned int base , void *obj ,
                            unsigned int len ) 
{ 
  struct xdr_buf subbuf ;
  int status ;

  {
  {
#line 949
  status = xdr_buf_subsegment(buf, & subbuf, base, len);
  }
#line 950
  if (status != 0) {
#line 951
    return (status);
  } else {

  }
  {
#line 952
  __read_bytes_from_xdr_buf(& subbuf, obj, len);
  }
#line 953
  return (0);
}
}
#line 957 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static void __write_bytes_to_xdr_buf(struct xdr_buf *subbuf , void *obj , unsigned int len ) 
{ 
  unsigned int this_len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  unsigned int __min1___1 ;
  unsigned int __min2___1 ;

  {
  {
#line 961
  __min1 = len;
#line 961
  __min2 = (unsigned int )subbuf->head[0].iov_len;
#line 961
  this_len = __min1 < __min2 ? __min1 : __min2;
#line 962
  memcpy(subbuf->head[0].iov_base, (void const   *)obj, (size_t )this_len);
#line 963
  len = len - this_len;
#line 964
  obj = obj + (unsigned long )this_len;
#line 965
  __min1___0 = len;
#line 965
  __min2___0 = subbuf->page_len;
#line 965
  this_len = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
  }
#line 966
  if (this_len != 0U) {
    {
#line 967
    _copy_to_pages(subbuf->pages, (size_t )subbuf->page_base, (char const   *)obj,
                   (size_t )this_len);
    }
  } else {

  }
  {
#line 968
  len = len - this_len;
#line 969
  obj = obj + (unsigned long )this_len;
#line 970
  __min1___1 = len;
#line 970
  __min2___1 = (unsigned int )subbuf->tail[0].iov_len;
#line 970
  this_len = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 971
  memcpy(subbuf->tail[0].iov_base, (void const   *)obj, (size_t )this_len);
  }
#line 972
  return;
}
}
#line 975 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int write_bytes_to_xdr_buf(struct xdr_buf *buf , unsigned int base , void *obj , unsigned int len ) 
{ 
  struct xdr_buf subbuf ;
  int status ;

  {
  {
#line 980
  status = xdr_buf_subsegment(buf, & subbuf, base, len);
  }
#line 981
  if (status != 0) {
#line 982
    return (status);
  } else {

  }
  {
#line 983
  __write_bytes_to_xdr_buf(& subbuf, obj, len);
  }
#line 984
  return (0);
}
}
#line 989 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int xdr_decode_word(struct xdr_buf *buf , unsigned int base , u32 *obj ) 
{ 
  __be32 raw ;
  int status ;
  __u32 tmp ;

  {
  {
#line 994
  status = read_bytes_from_xdr_buf(buf, base, (void *)(& raw), 4U);
  }
#line 995
  if (status != 0) {
#line 996
    return (status);
  } else {

  }
  {
#line 997
  tmp = __fswab32(raw);
#line 997
  *obj = tmp;
  }
#line 998
  return (0);
}
}
#line 1003 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int xdr_encode_word(struct xdr_buf *buf , unsigned int base , u32 obj ) 
{ 
  __be32 raw ;
  __u32 tmp ;
  int tmp___0 ;

  {
  {
#line 1005
  tmp = __fswab32(obj);
#line 1005
  raw = tmp;
#line 1007
  tmp___0 = write_bytes_to_xdr_buf(buf, base, (void *)(& raw), 4U);
  }
#line 1007
  return (tmp___0);
}
}
#line 1015 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int xdr_buf_read_netobj(struct xdr_buf *buf , struct xdr_netobj *obj , unsigned int offset ) 
{ 
  struct xdr_buf subbuf ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 1019
  tmp = xdr_decode_word(buf, offset, & obj->len);
  }
#line 1019
  if (tmp != 0) {
#line 1020
    return (-14);
  } else {

  }
  {
#line 1021
  tmp___0 = xdr_buf_subsegment(buf, & subbuf, offset + 4U, obj->len);
  }
#line 1021
  if (tmp___0 != 0) {
#line 1022
    return (-14);
  } else {

  }
#line 1025
  obj->data = (u8 *)subbuf.head[0].iov_base;
#line 1026
  if (subbuf.head[0].iov_len == (size_t )obj->len) {
#line 1027
    return (0);
  } else {

  }
#line 1029
  obj->data = (u8 *)subbuf.tail[0].iov_base;
#line 1030
  if (subbuf.tail[0].iov_len == (size_t )obj->len) {
#line 1031
    return (0);
  } else {

  }
#line 1038
  if (obj->len > buf->buflen - buf->len) {
#line 1039
    return (-12);
  } else {

  }
#line 1040
  if (buf->tail[0].iov_len != 0UL) {
#line 1041
    obj->data = (u8 *)(buf->tail[0].iov_base + buf->tail[0].iov_len);
  } else {
#line 1043
    obj->data = (u8 *)(buf->head[0].iov_base + buf->head[0].iov_len);
  }
  {
#line 1044
  __read_bytes_from_xdr_buf(& subbuf, (void *)obj->data, obj->len);
  }
#line 1045
  return (0);
}
}
#line 1051 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
static int xdr_xcode_array2(struct xdr_buf *buf , unsigned int base , struct xdr_array2_desc *desc ,
                            int encode ) 
{ 
  char *elem ;
  char *c ;
  unsigned int copied ;
  unsigned int todo ;
  unsigned int avail_here ;
  struct page **ppages ;
  int err ;
  int tmp ;
  int tmp___0 ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *tmp___1 ;
  unsigned int avail_page ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  void *tmp___3 ;
  unsigned int l___0 ;
  unsigned int _min1___1 ;
  unsigned int _min2___1 ;
  void *tmp___4 ;
  void *tmp___5 ;
  unsigned int _min1___2 ;
  unsigned int _min2___2 ;
  unsigned int l___1 ;

  {
#line 1054
  elem = (char *)0;
#line 1055
  copied = 0U;
#line 1056
  ppages = (struct page **)0;
#line 1059
  if (encode != 0) {
    {
#line 1060
    tmp = xdr_encode_word(buf, base, desc->array_len);
    }
#line 1060
    if (tmp != 0) {
#line 1061
      return (-22);
    } else {

    }
  } else {
    {
#line 1063
    tmp___0 = xdr_decode_word(buf, base, & desc->array_len);
    }
#line 1063
    if ((tmp___0 != 0 || desc->array_len > desc->array_maxlen) || ((unsigned long )base + (unsigned long )(desc->array_len * desc->elem_size)) + 4UL > (unsigned long )buf->len) {
#line 1067
      return (-22);
    } else {

    }
  }
#line 1069
  base = base + 4U;
#line 1071
  if ((unsigned long )desc->xcode == (unsigned long )((int (*)(struct xdr_array2_desc * ,
                                                               void * ))0)) {
#line 1072
    return (0);
  } else {

  }
#line 1074
  todo = desc->array_len * desc->elem_size;
#line 1077
  if (todo != 0U && (size_t )base < ((struct kvec *)(& buf->head))->iov_len) {
#line 1078
    c = (char *)(((struct kvec *)(& buf->head))->iov_base + (unsigned long )base);
#line 1079
    __min1 = todo;
#line 1079
    __min2 = (unsigned int )((struct kvec *)(& buf->head))->iov_len - base;
#line 1079
    avail_here = __min1 < __min2 ? __min1 : __min2;
#line 1081
    todo = todo - avail_here;
#line 1083
    goto ldv_39837;
    ldv_39836: 
    {
#line 1084
    err = (*(desc->xcode))(desc, (void *)c);
    }
#line 1085
    if (err != 0) {
#line 1086
      goto out;
    } else {

    }
#line 1087
    c = c + (unsigned long )desc->elem_size;
#line 1088
    avail_here = avail_here - desc->elem_size;
    ldv_39837: ;
#line 1083
    if (avail_here >= desc->elem_size) {
#line 1085
      goto ldv_39836;
    } else {

    }

#line 1090
    if (avail_here != 0U) {
#line 1091
      if ((unsigned long )elem == (unsigned long )((char *)0)) {
        {
#line 1092
        tmp___1 = kmalloc((size_t )desc->elem_size, 208U);
#line 1092
        elem = (char *)tmp___1;
#line 1093
        err = -12;
        }
#line 1094
        if ((unsigned long )elem == (unsigned long )((char *)0)) {
#line 1095
          goto out;
        } else {

        }
      } else {

      }
#line 1097
      if (encode != 0) {
        {
#line 1098
        err = (*(desc->xcode))(desc, (void *)elem);
        }
#line 1099
        if (err != 0) {
#line 1100
          goto out;
        } else {

        }
        {
#line 1101
        memcpy((void *)c, (void const   *)elem, (size_t )avail_here);
        }
      } else {
        {
#line 1103
        memcpy((void *)elem, (void const   *)c, (size_t )avail_here);
        }
      }
#line 1104
      copied = avail_here;
    } else {

    }
#line 1106
    base = (unsigned int )((struct kvec *)(& buf->head))->iov_len;
  } else {

  }
#line 1110
  base = base - (unsigned int )((struct kvec *)(& buf->head))->iov_len;
#line 1111
  if (todo != 0U && base < buf->page_len) {
    {
#line 1114
    _min1 = todo;
#line 1114
    _min2 = buf->page_len - base;
#line 1114
    avail_here = _min1 < _min2 ? _min1 : _min2;
#line 1115
    todo = todo - avail_here;
#line 1117
    base = base + buf->page_base;
#line 1118
    ppages = buf->pages + (unsigned long )(base >> 12);
#line 1119
    base = base & 4095U;
#line 1120
    __min1___0 = 4096U - base;
#line 1120
    __min2___0 = avail_here;
#line 1120
    avail_page = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1122
    tmp___2 = kmap(*ppages);
#line 1122
    c = (char *)(tmp___2 + (unsigned long )base);
    }
#line 1124
    goto ldv_39861;
    ldv_39860: 
#line 1125
    avail_here = avail_here - avail_page;
#line 1126
    if (copied != 0U || avail_page < desc->elem_size) {
#line 1127
      _min1___0 = avail_page;
#line 1127
      _min2___0 = desc->elem_size - copied;
#line 1127
      l = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
#line 1129
      if ((unsigned long )elem == (unsigned long )((char *)0)) {
        {
#line 1130
        tmp___3 = kmalloc((size_t )desc->elem_size, 208U);
#line 1130
        elem = (char *)tmp___3;
#line 1132
        err = -12;
        }
#line 1133
        if ((unsigned long )elem == (unsigned long )((char *)0)) {
#line 1134
          goto out;
        } else {

        }
      } else {

      }
#line 1136
      if (encode != 0) {
#line 1137
        if (copied == 0U) {
          {
#line 1138
          err = (*(desc->xcode))(desc, (void *)elem);
          }
#line 1139
          if (err != 0) {
#line 1140
            goto out;
          } else {

          }
        } else {

        }
        {
#line 1142
        memcpy((void *)c, (void const   *)(elem + (unsigned long )copied), (size_t )l);
#line 1143
        copied = copied + l;
        }
#line 1144
        if (copied == desc->elem_size) {
#line 1145
          copied = 0U;
        } else {

        }
      } else {
        {
#line 1147
        memcpy((void *)(elem + (unsigned long )copied), (void const   *)c, (size_t )l);
#line 1148
        copied = copied + l;
        }
#line 1149
        if (copied == desc->elem_size) {
          {
#line 1150
          err = (*(desc->xcode))(desc, (void *)elem);
          }
#line 1151
          if (err != 0) {
#line 1152
            goto out;
          } else {

          }
#line 1153
          copied = 0U;
        } else {

        }
      }
#line 1156
      avail_page = avail_page - l;
#line 1157
      c = c + (unsigned long )l;
    } else {

    }
#line 1159
    goto ldv_39851;
    ldv_39850: 
    {
#line 1160
    err = (*(desc->xcode))(desc, (void *)c);
    }
#line 1161
    if (err != 0) {
#line 1162
      goto out;
    } else {

    }
#line 1163
    c = c + (unsigned long )desc->elem_size;
#line 1164
    avail_page = avail_page - desc->elem_size;
    ldv_39851: ;
#line 1159
    if (avail_page >= desc->elem_size) {
#line 1161
      goto ldv_39850;
    } else {

    }

#line 1166
    if (avail_page != 0U) {
#line 1167
      _min1___1 = avail_page;
#line 1167
      _min2___1 = desc->elem_size - copied;
#line 1167
      l___0 = _min1___1 < _min2___1 ? _min1___1 : _min2___1;
#line 1169
      if ((unsigned long )elem == (unsigned long )((char *)0)) {
        {
#line 1170
        tmp___4 = kmalloc((size_t )desc->elem_size, 208U);
#line 1170
        elem = (char *)tmp___4;
#line 1172
        err = -12;
        }
#line 1173
        if ((unsigned long )elem == (unsigned long )((char *)0)) {
#line 1174
          goto out;
        } else {

        }
      } else {

      }
#line 1176
      if (encode != 0) {
#line 1177
        if (copied == 0U) {
          {
#line 1178
          err = (*(desc->xcode))(desc, (void *)elem);
          }
#line 1179
          if (err != 0) {
#line 1180
            goto out;
          } else {

          }
        } else {

        }
        {
#line 1182
        memcpy((void *)c, (void const   *)(elem + (unsigned long )copied), (size_t )l___0);
#line 1183
        copied = copied + l___0;
        }
#line 1184
        if (copied == desc->elem_size) {
#line 1185
          copied = 0U;
        } else {

        }
      } else {
        {
#line 1187
        memcpy((void *)(elem + (unsigned long )copied), (void const   *)c, (size_t )l___0);
#line 1188
        copied = copied + l___0;
        }
#line 1189
        if (copied == desc->elem_size) {
          {
#line 1190
          err = (*(desc->xcode))(desc, (void *)elem);
          }
#line 1191
          if (err != 0) {
#line 1192
            goto out;
          } else {

          }
#line 1193
          copied = 0U;
        } else {

        }
      }
    } else {

    }
#line 1197
    if (avail_here != 0U) {
      {
#line 1198
      kunmap(*ppages);
#line 1199
      ppages = ppages + 1;
#line 1200
      tmp___5 = kmap(*ppages);
#line 1200
      c = (char *)tmp___5;
      }
    } else {

    }
#line 1203
    _min1___2 = avail_here;
#line 1203
    _min2___2 = 4096U;
#line 1203
    avail_page = _min1___2 < _min2___2 ? _min1___2 : _min2___2;
    ldv_39861: ;
#line 1124
    if (avail_here != 0U) {
#line 1126
      goto ldv_39860;
    } else {

    }
#line 1206
    base = buf->page_len;
  } else {

  }
#line 1210
  base = base - buf->page_len;
#line 1211
  if (todo != 0U) {
#line 1212
    c = (char *)(((struct kvec *)(& buf->tail))->iov_base + (unsigned long )base);
#line 1213
    if (copied != 0U) {
#line 1214
      l___1 = desc->elem_size - copied;
#line 1216
      if (encode != 0) {
        {
#line 1217
        memcpy((void *)c, (void const   *)(elem + (unsigned long )copied), (size_t )l___1);
        }
      } else {
        {
#line 1219
        memcpy((void *)(elem + (unsigned long )copied), (void const   *)c, (size_t )l___1);
#line 1220
        err = (*(desc->xcode))(desc, (void *)elem);
        }
#line 1221
        if (err != 0) {
#line 1222
          goto out;
        } else {

        }
      }
#line 1224
      todo = todo - l___1;
#line 1225
      c = c + (unsigned long )l___1;
    } else {

    }
#line 1227
    goto ldv_39865;
    ldv_39864: 
    {
#line 1228
    err = (*(desc->xcode))(desc, (void *)c);
    }
#line 1229
    if (err != 0) {
#line 1230
      goto out;
    } else {

    }
#line 1231
    c = c + (unsigned long )desc->elem_size;
#line 1232
    todo = todo - desc->elem_size;
    ldv_39865: ;
#line 1227
    if (todo != 0U) {
#line 1229
      goto ldv_39864;
    } else {

    }

  } else {

  }
#line 1235
  err = 0;
  out: 
  {
#line 1238
  kfree((void const   *)elem);
  }
#line 1239
  if ((unsigned long )ppages != (unsigned long )((struct page **)0)) {
    {
#line 1240
    kunmap(*ppages);
    }
  } else {

  }
#line 1241
  return (err);
}
}
#line 1245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int xdr_decode_array2(struct xdr_buf *buf , unsigned int base , struct xdr_array2_desc *desc ) 
{ 
  int tmp ;

  {
#line 1248
  if (base >= buf->len) {
#line 1249
    return (-22);
  } else {

  }
  {
#line 1251
  tmp = xdr_xcode_array2(buf, base, desc, 0);
  }
#line 1251
  return (tmp);
}
}
#line 1256 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int xdr_encode_array2(struct xdr_buf *buf , unsigned int base , struct xdr_array2_desc *desc ) 
{ 
  int tmp ;

  {
#line 1259
  if (((unsigned long )base + (unsigned long )(desc->array_len * desc->elem_size)) + 4UL > (((struct kvec *)(& buf->head))->iov_len + (size_t )buf->page_len) + ((struct kvec *)(& buf->tail))->iov_len) {
#line 1261
    return (-22);
  } else {

  }
  {
#line 1263
  tmp = xdr_xcode_array2(buf, base, desc, 1);
  }
#line 1263
  return (tmp);
}
}
#line 1268 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/xdr.c"
int xdr_process_buf(struct xdr_buf *buf , unsigned int offset , unsigned int len ,
                    int (*actor)(struct scatterlist * , void * ) , void *data ) 
{ 
  int i ;
  int ret ;
  unsigned int page_len ;
  unsigned int thislen ;
  unsigned int page_offset___0 ;
  struct scatterlist sg[1U] ;

  {
  {
#line 1271
  ret = 0;
#line 1275
  sg_init_table((struct scatterlist *)(& sg), 1U);
  }
#line 1277
  if ((size_t )offset >= buf->head[0].iov_len) {
#line 1278
    offset = offset - (unsigned int )buf->head[0].iov_len;
  } else {
#line 1280
    thislen = (unsigned int )buf->head[0].iov_len - offset;
#line 1281
    if (thislen > len) {
#line 1282
      thislen = len;
    } else {

    }
    {
#line 1283
    sg_set_buf((struct scatterlist *)(& sg), (void const   *)(buf->head[0].iov_base + (unsigned long )offset),
               thislen);
#line 1284
    ret = (*actor)((struct scatterlist *)(& sg), data);
    }
#line 1285
    if (ret != 0) {
#line 1286
      goto out;
    } else {

    }
#line 1287
    offset = 0U;
#line 1288
    len = len - thislen;
  }
#line 1290
  if (len == 0U) {
#line 1291
    goto out;
  } else {

  }
#line 1293
  if (offset >= buf->page_len) {
#line 1294
    offset = offset - buf->page_len;
  } else {
#line 1296
    page_len = buf->page_len - offset;
#line 1297
    if (page_len > len) {
#line 1298
      page_len = len;
    } else {

    }
#line 1299
    len = len - page_len;
#line 1300
    page_offset___0 = (offset + buf->page_base) & 4095U;
#line 1301
    i = (int )((offset + buf->page_base) >> 12);
#line 1302
    thislen = 4096U - page_offset___0;
    ldv_39909: ;
#line 1304
    if (thislen > page_len) {
#line 1305
      thislen = page_len;
    } else {

    }
    {
#line 1306
    sg_set_page((struct scatterlist *)(& sg), *(buf->pages + (unsigned long )i), thislen,
                page_offset___0);
#line 1307
    ret = (*actor)((struct scatterlist *)(& sg), data);
    }
#line 1308
    if (ret != 0) {
#line 1309
      goto out;
    } else {

    }
#line 1310
    page_len = page_len - thislen;
#line 1311
    i = i + 1;
#line 1312
    page_offset___0 = 0U;
#line 1313
    thislen = 4096U;
#line 1314
    if (page_len != 0U) {
#line 1316
      goto ldv_39909;
    } else {

    }
#line 1315
    offset = 0U;
  }
#line 1317
  if (len == 0U) {
#line 1318
    goto out;
  } else {

  }
#line 1319
  if ((size_t )offset < buf->tail[0].iov_len) {
#line 1320
    thislen = (unsigned int )buf->tail[0].iov_len - offset;
#line 1321
    if (thislen > len) {
#line 1322
      thislen = len;
    } else {

    }
    {
#line 1323
    sg_set_buf((struct scatterlist *)(& sg), (void const   *)(buf->tail[0].iov_base + (unsigned long )offset),
               thislen);
#line 1324
    ret = (*actor)((struct scatterlist *)(& sg), data);
#line 1325
    len = len - thislen;
    }
  } else {

  }
#line 1327
  if (len != 0U) {
#line 1328
    ret = -22;
  } else {

  }
  out: ;
#line 1330
  return (ret);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void) ;
#line 42
void ldv_switch_to_process_context(void) ;
#line 62
extern void ldv_initialize(void) ;
#line 76
void ldv_check_final_state(void) ;
#line 113
int ldv_post_init(int init_ret_val ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/common.h"
extern void __VERIFIER_assume(int  ) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_int(void) ;
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.h"
void ldv_free(void *s ) ;
#line 28
void *ldv_xmalloc(size_t size ) ;
#line 75 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rcutree.h"
extern void rcu_barrier(void) ;
#line 308 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/net/net_namespace.h"
extern int register_pernet_subsys(struct pernet_operations * ) ;
#line 309
extern void unregister_pernet_subsys(struct pernet_operations * ) ;
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/debug.h"
void rpc_register_sysctl(void) ;
#line 70
void rpc_unregister_sysctl(void) ;
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/stats.h"
int rpc_proc_init(struct net *net ) ;
#line 44
void rpc_proc_exit(struct net *net ) ;
#line 200 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
void cache_initialize(void) ;
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
void rpc_pipefs_init_net(struct net *net ) ;
#line 93
int register_rpc_pipefs(void) ;
#line 94
void unregister_rpc_pipefs(void) ;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/netns.h"
int sunrpc_net_id  ;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc_syms.c"
static int sunrpc_init_net(struct net *net ) 
{ 
  int err ;
  struct sunrpc_net *sn ;
  void *tmp ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
  {
#line 33
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 33
  sn = (struct sunrpc_net *)tmp;
#line 35
  err = rpc_proc_init(net);
  }
#line 36
  if (err != 0) {
#line 37
    goto err_proc;
  } else {

  }
  {
#line 39
  err = ip_map_cache_create(net);
  }
#line 40
  if (err != 0) {
#line 41
    goto err_ipmap;
  } else {

  }
  {
#line 43
  err = unix_gid_cache_create(net);
  }
#line 44
  if (err != 0) {
#line 45
    goto err_unixgid;
  } else {

  }
  {
#line 47
  rpc_pipefs_init_net(net);
#line 48
  INIT_LIST_HEAD(& sn->all_clients);
#line 49
  spinlock_check(& sn->rpc_client_lock);
#line 49
  __raw_spin_lock_init(& sn->rpc_client_lock.__annonCompField20.rlock, "&(&sn->rpc_client_lock)->rlock",
                       & __key);
#line 50
  spinlock_check(& sn->rpcb_clnt_lock);
#line 50
  __raw_spin_lock_init(& sn->rpcb_clnt_lock.__annonCompField20.rlock, "&(&sn->rpcb_clnt_lock)->rlock",
                       & __key___0);
  }
#line 51
  return (0);
  err_unixgid: 
  {
#line 54
  ip_map_cache_destroy(net);
  }
  err_ipmap: 
  {
#line 56
  rpc_proc_exit(net);
  }
  err_proc: ;
#line 58
  return (err);
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc_syms.c"
static void sunrpc_exit_net(struct net *net ) 
{ 


  {
  {
#line 63
  unix_gid_cache_destroy(net);
#line 64
  ip_map_cache_destroy(net);
#line 65
  rpc_proc_exit(net);
  }
#line 66
  return;
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc_syms.c"
static struct pernet_operations sunrpc_net_ops  =    {{0, 0}, & sunrpc_init_net, & sunrpc_exit_net, 0, & sunrpc_net_id, 696UL};
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc_syms.c"
static int init_sunrpc(void) 
{ 
  int err ;
  int tmp ;

  {
  {
#line 78
  tmp = rpc_init_mempool();
#line 78
  err = tmp;
  }
#line 79
  if (err != 0) {
#line 80
    goto out;
  } else {

  }
  {
#line 81
  err = rpcauth_init_module();
  }
#line 82
  if (err != 0) {
#line 83
    goto out2;
  } else {

  }
  {
#line 85
  cache_initialize();
#line 87
  err = register_pernet_subsys(& sunrpc_net_ops);
  }
#line 88
  if (err != 0) {
#line 89
    goto out3;
  } else {

  }
  {
#line 91
  err = register_rpc_pipefs();
  }
#line 92
  if (err != 0) {
#line 93
    goto out4;
  } else {

  }
  {
#line 95
  rpc_register_sysctl();
#line 97
  svc_init_xprt_sock();
#line 98
  init_socket_xprt();
  }
#line 99
  return (0);
  out4: 
  {
#line 102
  unregister_pernet_subsys(& sunrpc_net_ops);
  }
  out3: 
  {
#line 104
  rpcauth_remove_module();
  }
  out2: 
  {
#line 106
  rpc_destroy_mempool();
  }
  out: ;
#line 108
  return (err);
}
}
#line 112 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sunrpc_syms.c"
static void cleanup_sunrpc(void) 
{ 


  {
  {
#line 114
  rpcauth_remove_module();
#line 115
  cleanup_socket_xprt();
#line 116
  svc_cleanup_xprt_sock();
#line 117
  unregister_rpc_pipefs();
#line 118
  rpc_destroy_mempool();
#line 119
  unregister_pernet_subsys(& sunrpc_net_ops);
#line 121
  rpc_unregister_sysctl();
#line 123
  rcu_barrier();
  }
#line 124
  return;
}
}
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_character_driver_scenario_10(void *arg0 ) ;
#line 74
void ldv_character_driver_scenario_2(void *arg0 ) ;
#line 75
void ldv_character_driver_scenario_3(void *arg0 ) ;
#line 76
void ldv_character_driver_scenario_4(void *arg0 ) ;
#line 77
void ldv_character_driver_scenario_5(void *arg0 ) ;
#line 78
void ldv_character_driver_scenario_6(void *arg0 ) ;
#line 79
void ldv_character_driver_scenario_7(void *arg0 ) ;
#line 80
void ldv_character_driver_scenario_8(void *arg0 ) ;
#line 81
void ldv_character_driver_scenario_9(void *arg0 ) ;
#line 82
void ldv_dispatch_default_deregister_6_14_3(void) ;
#line 83
void ldv_dispatch_default_register_6_14_4(void) ;
#line 84
void ldv_dispatch_insmod_deregister_20_1(void) ;
#line 85
void ldv_dispatch_insmod_register_20_2(void) ;
#line 92
void ldv_insmod_14(void *arg0 ) ;
#line 93
void ldv_insmod_cleanup_sunrpc_14_2(void (*arg0)(void) ) ;
#line 94
int ldv_insmod_init_sunrpc_14_9(int (*arg0)(void) ) ;
#line 95
void ldv_main_20(void *arg0 ) ;
#line 96
void ldv_timer_scenario_13(void *arg0 ) ;
#line 97
void ldv_timer_scenario_callback_13_2(void (*arg0)(unsigned long  ) , unsigned long arg1 ) ;
#line 100
int main(void) ;
#line 108 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_dispatch_default_deregister_6_14_3(void) 
{ 


  {
#line 127
  return;
}
}
#line 131 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_dispatch_default_register_6_14_4(void) 
{ 
  struct ldv_struct_insmod_14 *cf_arg_2 ;
  struct ldv_struct_insmod_14 *cf_arg_3 ;
  struct ldv_struct_insmod_14 *cf_arg_4 ;
  struct ldv_struct_insmod_14 *cf_arg_5 ;
  struct ldv_struct_insmod_14 *cf_arg_6 ;
  struct ldv_struct_insmod_14 *cf_arg_7 ;
  struct ldv_struct_insmod_14 *cf_arg_8 ;
  struct ldv_struct_insmod_14 *cf_arg_9 ;
  struct ldv_struct_insmod_14 *cf_arg_10 ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;

  {
  {
#line 141
  tmp = ldv_xmalloc(4UL);
#line 141
  cf_arg_2 = (struct ldv_struct_insmod_14 *)tmp;
#line 142
  ldv_character_driver_scenario_2((void *)cf_arg_2);
#line 143
  tmp___0 = ldv_xmalloc(4UL);
#line 143
  cf_arg_3 = (struct ldv_struct_insmod_14 *)tmp___0;
#line 144
  ldv_character_driver_scenario_3((void *)cf_arg_3);
#line 145
  tmp___1 = ldv_xmalloc(4UL);
#line 145
  cf_arg_4 = (struct ldv_struct_insmod_14 *)tmp___1;
#line 146
  ldv_character_driver_scenario_4((void *)cf_arg_4);
#line 147
  tmp___2 = ldv_xmalloc(4UL);
#line 147
  cf_arg_5 = (struct ldv_struct_insmod_14 *)tmp___2;
#line 148
  ldv_character_driver_scenario_5((void *)cf_arg_5);
#line 149
  tmp___3 = ldv_xmalloc(4UL);
#line 149
  cf_arg_6 = (struct ldv_struct_insmod_14 *)tmp___3;
#line 150
  ldv_character_driver_scenario_6((void *)cf_arg_6);
#line 151
  tmp___4 = ldv_xmalloc(4UL);
#line 151
  cf_arg_7 = (struct ldv_struct_insmod_14 *)tmp___4;
#line 152
  ldv_character_driver_scenario_7((void *)cf_arg_7);
#line 153
  tmp___5 = ldv_xmalloc(4UL);
#line 153
  cf_arg_8 = (struct ldv_struct_insmod_14 *)tmp___5;
#line 154
  ldv_character_driver_scenario_8((void *)cf_arg_8);
#line 155
  tmp___6 = ldv_xmalloc(4UL);
#line 155
  cf_arg_9 = (struct ldv_struct_insmod_14 *)tmp___6;
#line 156
  ldv_character_driver_scenario_9((void *)cf_arg_9);
#line 157
  tmp___7 = ldv_xmalloc(4UL);
#line 157
  cf_arg_10 = (struct ldv_struct_insmod_14 *)tmp___7;
#line 158
  ldv_character_driver_scenario_10((void *)cf_arg_10);
  }
#line 159
  return;
}
}
#line 163 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_dispatch_insmod_deregister_20_1(void) 
{ 


  {
#line 166
  return;
}
}
#line 170 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_dispatch_insmod_register_20_2(void) 
{ 
  struct ldv_struct_insmod_14 *cf_arg_14 ;
  void *tmp ;

  {
  {
#line 172
  tmp = ldv_xmalloc(4UL);
#line 172
  cf_arg_14 = (struct ldv_struct_insmod_14 *)tmp;
#line 173
  ldv_insmod_14((void *)cf_arg_14);
  }
#line 174
  return;
}
}
#line 178 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_insmod_14(void *arg0 ) 
{ 
  void (*ldv_14_cleanup_sunrpc_default)(void) ;
  int (*ldv_14_init_sunrpc_default)(void) ;
  int ldv_14_reg_guard_6_default ;
  int ldv_14_ret_default ;
  int tmp ;

  {
  {
#line 187
  ldv_free(arg0);
#line 192
  ldv_14_ret_default = ldv_insmod_init_sunrpc_14_9(ldv_14_init_sunrpc_default);
#line 194
  ldv_14_ret_default = ldv_post_init(ldv_14_ret_default);
#line 197
  tmp = ldv_undef_int();
  }
#line 197
  if (tmp != 0) {
    {
#line 199
    __VERIFIER_assume(ldv_14_ret_default != 0);
    }
#line 207
    return;
  } else {
    {
#line 211
    __VERIFIER_assume(ldv_14_ret_default == 0);
#line 215
    ldv_14_reg_guard_6_default = ldv_undef_int();
    }
#line 219
    if (ldv_14_reg_guard_6_default != 0) {
      {
#line 220
      ldv_dispatch_default_register_6_14_4();
      }
    } else {

    }
#line 225
    if (ldv_14_reg_guard_6_default != 0) {
      {
#line 226
      ldv_dispatch_default_deregister_6_14_3();
      }
    } else {

    }
    {
#line 232
    ldv_insmod_cleanup_sunrpc_14_2(ldv_14_cleanup_sunrpc_default);
    }
#line 240
    return;
  }
#line 243
  return;
}
}
#line 248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_insmod_cleanup_sunrpc_14_2(void (*arg0)(void) ) 
{ 


  {
  {
#line 249
  cleanup_sunrpc();
  }
#line 250
  return;
}
}
#line 253 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
int ldv_insmod_init_sunrpc_14_9(int (*arg0)(void) ) 
{ 
  int tmp ;

  {
  {
#line 254
  tmp = init_sunrpc();
  }
#line 254
  return (tmp);
}
}
#line 258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_main_20(void *arg0 ) 
{ 


  {
  {
#line 263
  ldv_dispatch_insmod_register_20_2();
#line 267
  ldv_dispatch_insmod_deregister_20_1();
  }
#line 271
  return;
#line 273
  return;
}
}
#line 278 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_timer_scenario_13(void *arg0 ) 
{ 
  struct timer_list *ldv_13_container_timer_list ;
  struct ldv_struct_timer_scenario_13 *data ;

  {
#line 283
  data = (struct ldv_struct_timer_scenario_13 *)arg0;
#line 288
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_timer_scenario_13 *)0)) {
    {
#line 289
    ldv_13_container_timer_list = data->arg0;
#line 290
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 296
  ldv_switch_to_interrupt_context();
  }
#line 297
  if ((unsigned long )ldv_13_container_timer_list->function != (unsigned long )((void (*)(unsigned long  ))0)) {
    {
#line 299
    ldv_timer_scenario_callback_13_2(ldv_13_container_timer_list->function, ldv_13_container_timer_list->data);
    }
  } else {

  }
  {
#line 302
  ldv_switch_to_process_context();
  }
#line 310
  return;
#line 312
  return;
}
}
#line 317 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
void ldv_timer_scenario_callback_13_2(void (*arg0)(unsigned long  ) , unsigned long arg1 ) 
{ 


  {
  {
#line 318
  (*arg0)(arg1);
  }
#line 319
  return;
}
}
#line 322 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_sunrpc_syms.c.aux"
int main(void) 
{ 


  {
  {
#line 325
  ldv_initialize();
#line 328
  ldv_main_20((void *)0);
#line 331
  ldv_check_final_state();
  }
#line 333
  return (0);
}
}
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/err.h"
long ldv_is_err_or_null(void const   *ptr ) ;
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.h"
int ldv_filter_err_code(int ret_val ) ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_xmalloc_unknown_size(size_t size ) ;
#line 603 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 605
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 629 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
  {
#line 631
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
  }
#line 631
  if (tmp == 0) {
    {
#line 632
    __hlist_del(n);
#line 633
    INIT_HLIST_NODE(n);
    }
  } else {

  }
#line 635
  return;
}
}
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kernel.h"
extern void might_fault(void) ;
#line 345
extern unsigned long simple_strtoul(char const   * , char ** , unsigned int  ) ;
#line 450
extern int hex_to_bin(char  ) ;
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/string.h"
extern void *kmemdup(void const   * , size_t  , gfp_t  ) ;
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/asm-generic/bug.h"
extern void warn_slowpath_fmt(char const   * , int const    , char const   *  , ...) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 19
extern void _raw_write_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 31
extern void _raw_write_unlock(rwlock_t * ) ;
#line 73 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
  }
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 87
extern long wait_for_completion_interruptible_timeout(struct completion * , unsigned long  ) ;
#line 94
extern void complete(struct completion * ) ;
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/time.h"
extern unsigned long get_seconds(void) ;
#line 260 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
extern unsigned long round_jiffies_relative(unsigned long  ) ;
#line 337 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
extern struct workqueue_struct *system_wq ;
#line 553 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/workqueue.h"
__inline static bool schedule_delayed_work(struct delayed_work *dwork , unsigned long delay ) 
{ 
  bool tmp ;

  {
  {
#line 556
  tmp = queue_delayed_work(system_wq, dwork, delay);
  }
#line 556
  return (tmp);
}
}
#line 2218 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
__inline static struct inode *file_inode(struct file *f ) 
{ 


  {
#line 2220
  return (f->f_inode);
}
}
#line 2421
extern loff_t no_llseek(struct file * , loff_t  , int  ) ;
#line 2429
static int ldv_nonseekable_open_11(struct inode *ldv_func_arg1 , struct file *ldv_func_arg2 ) ;
#line 2433
static int ldv_nonseekable_open_19(struct inode *ldv_func_arg1 , struct file *ldv_func_arg2 ) ;
#line 2424 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sched.h"
extern int _cond_resched(void) ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess_64.h"
extern unsigned long _copy_to_user(void * , void const   * , unsigned int  ) ;
#line 51
extern unsigned long _copy_from_user(void * , void const   * , unsigned int  ) ;
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess_64.h"
__inline static unsigned long copy_from_user(void *to , void const   *from , unsigned long n ) 
{ 
  int sz ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 59
  sz = -1;
#line 61
  might_fault();
#line 62
  tmp___0 = __builtin_expect(sz == -1, 1L);
  }
#line 62
  if (tmp___0 != 0L) {
    {
#line 63
    n = _copy_from_user(to, from, (unsigned int )n);
    }
  } else {
    {
#line 62
    tmp___1 = __builtin_expect((unsigned long )sz >= n, 1L);
    }
#line 62
    if (tmp___1 != 0L) {
      {
#line 63
      n = _copy_from_user(to, from, (unsigned int )n);
      }
    } else {
      {
#line 66
      __ret_warn_on = 1;
#line 66
      tmp = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 66
      if (tmp != 0L) {
        {
#line 66
        warn_slowpath_fmt("/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess_64.h",
                          66, "Buffer overflow detected!\n");
        }
      } else {

      }
      {
#line 66
      __builtin_expect(__ret_warn_on != 0, 0L);
      }
    }
  }
#line 68
  return (n);
}
}
#line 72 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess_64.h"
__inline static int copy_to_user(void *dst , void const   *src , unsigned int size ) 
{ 
  unsigned long tmp ;

  {
  {
#line 74
  might_fault();
#line 76
  tmp = _copy_to_user(dst, src, size);
  }
#line 76
  return ((int )tmp);
}
}
#line 19 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_mkdir(char const   * , struct proc_dir_entry * ) ;
#line 25
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 39
extern void *PDE_DATA(struct inode  const  * ) ;
#line 42
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 84 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 85
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 128
extern void *__seq_open_private(struct file * , struct seq_operations  const  * ,
                                int  ) ;
#line 133
static int ldv_seq_release_private_16(struct inode *ldv_func_arg1 , struct file *ldv_func_arg2 ) ;
#line 250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/pagemap.h"
extern struct page *find_or_create_page(struct address_space * , unsigned long  ,
                                        gfp_t  ) ;
#line 328
extern void unlock_page(struct page * ) ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/poll.h"
__inline static void poll_wait(struct file *filp , wait_queue_head_t *wait_address ,
                               poll_table *p ) 
{ 


  {
#line 44
  if ((unsigned long )p != (unsigned long )((poll_table *)0) && ((unsigned long )p->_qproc != (unsigned long )((void (*)(struct file * ,
                                                                                                                         wait_queue_head_t * ,
                                                                                                                         struct poll_table_struct * ))0) && (unsigned long )wait_address != (unsigned long )((wait_queue_head_t *)0))) {
    {
#line 45
    (*(p->_qproc))(filp, wait_address, p);
    }
  } else {

  }
#line 46
  return;
}
}
#line 468 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
static bool ldv_try_module_get_10___2(struct module *ldv_func_arg1 ) ;
#line 472
static bool ldv_try_module_get_14___1(struct module *ldv_func_arg1 ) ;
#line 476
static bool ldv_try_module_get_18(struct module *ldv_func_arg1 ) ;
#line 482
static void ldv_module_put_12___0(struct module *ldv_func_arg1 ) ;
#line 486
static void ldv_module_put_13___0(struct module *ldv_func_arg1 ) ;
#line 490
static void ldv_module_put_15___0(struct module *ldv_func_arg1 ) ;
#line 494
static void ldv_module_put_17(struct module *ldv_func_arg1 ) ;
#line 498
static void ldv_module_put_20(struct module *ldv_func_arg1 ) ;
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ctype.h"
__inline static int isodigit(char const   c ) 
{ 


  {
#line 67
  return ((unsigned int )((unsigned char )c) - 48U <= 7U);
}
}
#line 152 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
struct file_operations  const  cache_file_operations_pipefs ;
#line 153
struct file_operations  const  content_file_operations_pipefs ;
#line 154
struct file_operations  const  cache_flush_operations_pipefs ;
#line 164
int sunrpc_cache_pipe_upcall(struct cache_detail *detail , struct cache_head *h ) ;
#line 207
void sunrpc_init_cache_detail(struct cache_detail *cd ) ;
#line 208
void sunrpc_destroy_cache_detail(struct cache_detail *cd ) ;
#line 209
int sunrpc_cache_register_pipefs(struct dentry *parent , char const   *name , umode_t umode ,
                                 struct cache_detail *cd ) ;
#line 211
void sunrpc_cache_unregister_pipefs(struct cache_detail *cd ) ;
#line 214
void qword_addhex(char **bpp , int *lp , char *buf , int blen ) ;
#line 258 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
__inline static time_t seconds_since_boot(void) 
{ 
  struct timespec boot ;
  unsigned long tmp ;

  {
  {
#line 261
  getboottime(& boot);
#line 262
  tmp = get_seconds();
  }
#line 262
  return ((time_t )(tmp - (unsigned long )boot.tv_sec));
}
}
#line 265 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/cache.h"
__inline static time_t convert_to_wallclock(time_t sinceboot ) 
{ 
  struct timespec boot ;

  {
  {
#line 268
  getboottime(& boot);
  }
#line 269
  return (boot.tv_sec + sinceboot);
}
}
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
__inline static struct rpc_inode *RPC_I(struct inode *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 49
  __mptr = (struct inode  const  *)inode;
#line 49
  return ((struct rpc_inode *)__mptr);
}
}
#line 80
struct dentry *rpc_create_cache_dir(struct dentry *parent , struct qstr *name , umode_t umode ,
                                    struct cache_detail *cd ) ;
#line 84
void rpc_remove_cache_dir(struct dentry *dentry ) ;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static bool cache_defer_req(struct cache_req *req , struct cache_head *item ) ;
#line 41
static void cache_revisit_request(struct cache_head *item ) ;
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void cache_init(struct cache_head *h ) 
{ 
  time_t now ;
  time_t tmp ;

  {
  {
#line 45
  tmp = seconds_since_boot();
#line 45
  now = tmp;
#line 46
  h->next = (struct cache_head *)0;
#line 47
  h->flags = 0UL;
#line 48
  kref_init(& h->ref);
#line 49
  h->expiry_time = now + 120L;
#line 50
  h->last_refresh = now;
  }
#line 51
  return;
}
}
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
__inline static int cache_is_expired(struct cache_detail *detail , struct cache_head *h ) 
{ 
  time_t tmp ;

  {
  {
#line 55
  tmp = seconds_since_boot();
  }
#line 55
  return (h->expiry_time < tmp || detail->flush_time > h->last_refresh);
}
}
#line 59 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct cache_head *sunrpc_cache_lookup(struct cache_detail *detail , struct cache_head *key ,
                                       int hash ) 
{ 
  struct cache_head **head ;
  struct cache_head **hp ;
  struct cache_head *new ;
  struct cache_head *freeme ;
  struct cache_head *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct cache_head *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 63
  new = (struct cache_head *)0;
#line 63
  freeme = (struct cache_head *)0;
#line 65
  head = detail->hash_table + (unsigned long )hash;
#line 67
  _raw_read_lock(& detail->hash_lock);
#line 69
  hp = head;
  }
#line 69
  goto ldv_39489;
  ldv_39488: 
  {
#line 70
  tmp = *hp;
#line 71
  tmp___1 = (*(detail->match))(tmp, key);
  }
#line 71
  if (tmp___1 != 0) {
    {
#line 72
    tmp___0 = cache_is_expired(detail, tmp);
    }
#line 72
    if (tmp___0 != 0) {
#line 74
      goto ldv_39487;
    } else {

    }
    {
#line 75
    cache_get(tmp);
#line 76
    _raw_read_unlock(& detail->hash_lock);
    }
#line 77
    return (tmp);
  } else {

  }
#line 69
  hp = & (*hp)->next;
  ldv_39489: ;
#line 69
  if ((unsigned long )*hp != (unsigned long )((struct cache_head *)0)) {
#line 71
    goto ldv_39488;
  } else {

  }
  ldv_39487: 
  {
#line 80
  _raw_read_unlock(& detail->hash_lock);
#line 83
  new = (*(detail->alloc))();
  }
#line 84
  if ((unsigned long )new == (unsigned long )((struct cache_head *)0)) {
#line 85
    return ((struct cache_head *)0);
  } else {

  }
  {
#line 90
  cache_init(new);
#line 91
  (*(detail->init))(new, key);
#line 93
  _raw_write_lock(& detail->hash_lock);
#line 96
  hp = head;
  }
#line 96
  goto ldv_39493;
  ldv_39492: 
  {
#line 97
  tmp___2 = *hp;
#line 98
  tmp___4 = (*(detail->match))(tmp___2, key);
  }
#line 98
  if (tmp___4 != 0) {
    {
#line 99
    tmp___3 = cache_is_expired(detail, tmp___2);
    }
#line 99
    if (tmp___3 != 0) {
#line 100
      *hp = tmp___2->next;
#line 101
      tmp___2->next = (struct cache_head *)0;
#line 102
      detail->entries = detail->entries - 1;
#line 103
      freeme = tmp___2;
#line 104
      goto ldv_39491;
    } else {

    }
    {
#line 106
    cache_get(tmp___2);
#line 107
    _raw_write_unlock(& detail->hash_lock);
#line 108
    cache_put(new, detail);
    }
#line 109
    return (tmp___2);
  } else {

  }
#line 96
  hp = & (*hp)->next;
  ldv_39493: ;
#line 96
  if ((unsigned long )*hp != (unsigned long )((struct cache_head *)0)) {
#line 98
    goto ldv_39492;
  } else {

  }
  ldv_39491: 
  {
#line 112
  new->next = *head;
#line 113
  *head = new;
#line 114
  detail->entries = detail->entries + 1;
#line 115
  cache_get(new);
#line 116
  _raw_write_unlock(& detail->hash_lock);
  }
#line 118
  if ((unsigned long )freeme != (unsigned long )((struct cache_head *)0)) {
    {
#line 119
    cache_put(freeme, detail);
    }
  } else {

  }
#line 120
  return (new);
}
}
#line 125
static void cache_dequeue(struct cache_detail *detail , struct cache_head *ch ) ;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void cache_fresh_locked(struct cache_head *head , time_t expiry ) 
{ 


  {
  {
#line 129
  head->expiry_time = expiry;
#line 130
  head->last_refresh = seconds_since_boot();
#line 131
  __asm__  volatile   ("": : : "memory");
#line 132
  set_bit(0U, (unsigned long volatile   *)(& head->flags));
  }
#line 133
  return;
}
}
#line 135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void cache_fresh_unlocked(struct cache_head *head , struct cache_detail *detail ) 
{ 
  int tmp ;

  {
  {
#line 138
  tmp = test_and_clear_bit(2, (unsigned long volatile   *)(& head->flags));
  }
#line 138
  if (tmp != 0) {
    {
#line 139
    cache_revisit_request(head);
#line 140
    cache_dequeue(detail, head);
    }
  } else {

  }
#line 142
  return;
}
}
#line 144 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct cache_head *sunrpc_cache_update(struct cache_detail *detail , struct cache_head *new ,
                                       struct cache_head *old , int hash ) 
{ 
  struct cache_head **head ;
  struct cache_head *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 154
  tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& old->flags));
  }
#line 154
  if (tmp___2 == 0) {
    {
#line 155
    _raw_write_lock(& detail->hash_lock);
#line 156
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& old->flags));
    }
#line 156
    if (tmp___1 == 0) {
      {
#line 157
      tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& new->flags));
      }
#line 157
      if (tmp___0 != 0) {
        {
#line 158
        set_bit(1U, (unsigned long volatile   *)(& old->flags));
        }
      } else {
        {
#line 160
        (*(detail->update))(old, new);
        }
      }
      {
#line 161
      cache_fresh_locked(old, new->expiry_time);
#line 162
      _raw_write_unlock(& detail->hash_lock);
#line 163
      cache_fresh_unlocked(old, detail);
      }
#line 164
      return (old);
    } else {

    }
    {
#line 166
    _raw_write_unlock(& detail->hash_lock);
    }
  } else {

  }
  {
#line 169
  tmp = (*(detail->alloc))();
  }
#line 170
  if ((unsigned long )tmp == (unsigned long )((struct cache_head *)0)) {
    {
#line 171
    cache_put(old, detail);
    }
#line 172
    return ((struct cache_head *)0);
  } else {

  }
  {
#line 174
  cache_init(tmp);
#line 175
  (*(detail->init))(tmp, old);
#line 176
  head = detail->hash_table + (unsigned long )hash;
#line 178
  _raw_write_lock(& detail->hash_lock);
#line 179
  tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& new->flags));
  }
#line 179
  if (tmp___3 != 0) {
    {
#line 180
    set_bit(1U, (unsigned long volatile   *)(& tmp->flags));
    }
  } else {
    {
#line 182
    (*(detail->update))(tmp, new);
    }
  }
  {
#line 183
  tmp->next = *head;
#line 184
  *head = tmp;
#line 185
  detail->entries = detail->entries + 1;
#line 186
  cache_get(tmp);
#line 187
  cache_fresh_locked(tmp, new->expiry_time);
#line 188
  cache_fresh_locked(old, 0L);
#line 189
  _raw_write_unlock(& detail->hash_lock);
#line 190
  cache_fresh_unlocked(tmp, detail);
#line 191
  cache_fresh_unlocked(old, detail);
#line 192
  cache_put(old, detail);
  }
#line 193
  return (tmp);
}
}
#line 197 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_make_upcall(struct cache_detail *cd , struct cache_head *h ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 199
  if ((unsigned long )cd->cache_upcall != (unsigned long )((int (*)(struct cache_detail * ,
                                                                    struct cache_head * ))0)) {
    {
#line 200
    tmp = (*(cd->cache_upcall))(cd, h);
    }
#line 200
    return (tmp);
  } else {

  }
  {
#line 201
  tmp___0 = sunrpc_cache_pipe_upcall(cd, h);
  }
#line 201
  return (tmp___0);
}
}
#line 204 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
__inline static int cache_is_valid(struct cache_detail *detail , struct cache_head *h ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 206
  tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& h->flags));
  }
#line 206
  if (tmp___0 == 0) {
#line 207
    return (-11);
  } else {
    {
#line 210
    tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& h->flags));
    }
#line 210
    if (tmp != 0) {
#line 211
      return (-2);
    } else {
#line 219
      __asm__  volatile   ("": : : "memory");
#line 220
      return (0);
    }
  }
}
}
#line 225 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int try_to_negate_entry(struct cache_detail *detail , struct cache_head *h ) 
{ 
  int rv ;
  time_t tmp ;

  {
  {
#line 229
  _raw_write_lock(& detail->hash_lock);
#line 230
  rv = cache_is_valid(detail, h);
  }
#line 231
  if (rv != -11) {
    {
#line 232
    _raw_write_unlock(& detail->hash_lock);
    }
#line 233
    return (rv);
  } else {

  }
  {
#line 235
  set_bit(1U, (unsigned long volatile   *)(& h->flags));
#line 236
  tmp = seconds_since_boot();
#line 236
  cache_fresh_locked(h, tmp + 120L);
#line 237
  _raw_write_unlock(& detail->hash_lock);
#line 238
  cache_fresh_unlocked(h, detail);
  }
#line 239
  return (-2);
}
}
#line 256 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
int cache_check(struct cache_detail *detail , struct cache_head *h , struct cache_req *rqstp ) 
{ 
  int rv ;
  long refresh_age ;
  long age ;
  time_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;

  {
  {
#line 263
  rv = cache_is_valid(detail, h);
#line 266
  refresh_age = h->expiry_time - h->last_refresh;
#line 267
  tmp = seconds_since_boot();
#line 267
  age = tmp - h->last_refresh;
  }
#line 269
  if ((unsigned long )rqstp == (unsigned long )((struct cache_req *)0)) {
#line 270
    if (rv == -11) {
#line 271
      rv = -2;
    } else {

    }
  } else
#line 272
  if (rv == -11 || age > refresh_age / 2L) {
    {
#line 273
    tmp___0 = __builtin_expect((rpc_debug & 2048U) != 0U, 0L);
    }
#line 273
    if (tmp___0 != 0L) {
      {
#line 273
      printk("\001dRPC:       Want update, refage=%ld, age=%ld\n", refresh_age, age);
      }
    } else {

    }
    {
#line 275
    tmp___2 = test_and_set_bit(2, (unsigned long volatile   *)(& h->flags));
    }
#line 275
    if (tmp___2 == 0) {
      {
#line 276
      tmp___1 = cache_make_upcall(detail, h);
      }
      {
#line 277
      if (tmp___1 == -22) {
#line 277
        goto case_neg_22;
      } else {

      }
#line 282
      if (tmp___1 == -11) {
#line 282
        goto case_neg_11;
      } else {

      }
#line 276
      goto switch_break;
      case_neg_22: /* CIL Label */ 
      {
#line 278
      clear_bit(2, (unsigned long volatile   *)(& h->flags));
#line 279
      cache_revisit_request(h);
#line 280
      rv = try_to_negate_entry(detail, h);
      }
#line 281
      goto ldv_39552;
      case_neg_11: /* CIL Label */ 
      {
#line 283
      clear_bit(2, (unsigned long volatile   *)(& h->flags));
#line 284
      cache_revisit_request(h);
      }
#line 285
      goto ldv_39552;
      switch_break: /* CIL Label */ ;
      }
      ldv_39552: ;
    } else {

    }
  } else {

  }
#line 290
  if (rv == -11) {
    {
#line 291
    tmp___3 = cache_defer_req(rqstp, h);
    }
#line 291
    if (tmp___3) {
#line 291
      tmp___4 = 0;
    } else {
#line 291
      tmp___4 = 1;
    }
#line 291
    if (tmp___4) {
      {
#line 296
      rv = cache_is_valid(detail, h);
      }
#line 297
      if (rv == -11) {
#line 298
        rv = -110;
      } else {

      }
    } else {

    }
  } else {

  }
#line 301
  if (rv != 0) {
    {
#line 302
    cache_put(h, detail);
    }
  } else {

  }
#line 303
  return (rv);
}
}
#line 339 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct list_head cache_list  =    {& cache_list, & cache_list};
#line 340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static spinlock_t cache_list_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "cache_list_lock",
                                                     0, 0UL}}}};
#line 341 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct cache_detail *current_detail  ;
#line 342 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int current_index  ;
#line 344
static void do_cache_clean(struct work_struct *work ) ;
#line 345 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct delayed_work cache_cleaner  ;
#line 347 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void sunrpc_init_cache_detail(struct cache_detail *cd ) 
{ 
  struct lock_class_key __key ;

  {
  {
#line 349
  __rwlock_init(& cd->hash_lock, "&cd->hash_lock", & __key);
#line 350
  INIT_LIST_HEAD(& cd->queue);
#line 351
  spin_lock(& cache_list_lock);
#line 352
  cd->nextcheck = 0L;
#line 353
  cd->entries = 0;
#line 354
  atomic_set(& cd->readers, 0);
#line 355
  cd->last_close = 0L;
#line 356
  cd->last_warn = -1L;
#line 357
  list_add(& cd->others, & cache_list);
#line 358
  spin_unlock(& cache_list_lock);
#line 361
  schedule_delayed_work(& cache_cleaner, 0UL);
  }
#line 362
  return;
}
}
#line 365 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void sunrpc_destroy_cache_detail(struct cache_detail *cd ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 367
  cache_purge(cd);
#line 368
  spin_lock(& cache_list_lock);
#line 369
  _raw_write_lock(& cd->hash_lock);
  }
#line 370
  if (cd->entries != 0) {
    {
#line 371
    _raw_write_unlock(& cd->hash_lock);
#line 372
    spin_unlock(& cache_list_lock);
    }
#line 373
    goto out;
  } else {
    {
#line 370
    tmp = atomic_read((atomic_t const   *)(& cd->inuse));
    }
#line 370
    if (tmp != 0) {
      {
#line 371
      _raw_write_unlock(& cd->hash_lock);
#line 372
      spin_unlock(& cache_list_lock);
      }
#line 373
      goto out;
    } else {

    }
  }
#line 375
  if ((unsigned long )current_detail == (unsigned long )cd) {
#line 376
    current_detail = (struct cache_detail *)0;
  } else {

  }
  {
#line 377
  list_del_init(& cd->others);
#line 378
  _raw_write_unlock(& cd->hash_lock);
#line 379
  spin_unlock(& cache_list_lock);
#line 380
  tmp___0 = list_empty((struct list_head  const  *)(& cache_list));
  }
#line 380
  if (tmp___0 != 0) {
    {
#line 382
    cancel_delayed_work_sync(& cache_cleaner);
    }
  } else {

  }
#line 384
  return;
  out: 
  {
#line 386
  printk("\vnfsd: failed to unregister %s cache\n", cd->name);
  }
#line 387
  return;
}
}
#line 396 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_clean(void) 
{ 
  int rv ;
  struct list_head *next ;
  struct list_head  const  *__mptr ;
  time_t tmp ;
  time_t tmp___0 ;
  struct cache_head *ch ;
  struct cache_head **cp ;
  struct cache_detail *d ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 398
  rv = 0;
#line 401
  spin_lock(& cache_list_lock);
  }
#line 404
  goto ldv_39598;
  ldv_39597: ;
#line 406
  if ((unsigned long )current_detail != (unsigned long )((struct cache_detail *)0)) {
#line 407
    next = current_detail->others.next;
  } else {
#line 409
    next = cache_list.next;
  }
#line 410
  if ((unsigned long )next == (unsigned long )(& cache_list)) {
    {
#line 411
    current_detail = (struct cache_detail *)0;
#line 412
    spin_unlock(& cache_list_lock);
    }
#line 413
    return (-1);
  } else {

  }
  {
#line 415
  __mptr = (struct list_head  const  *)next;
#line 415
  current_detail = (struct cache_detail *)((char *)__mptr + 0xffffffffffffff38UL);
#line 416
  tmp___0 = seconds_since_boot();
  }
#line 416
  if (current_detail->nextcheck > tmp___0) {
#line 417
    current_index = current_detail->hash_size;
  } else {
    {
#line 419
    current_index = 0;
#line 420
    tmp = seconds_since_boot();
#line 420
    current_detail->nextcheck = tmp + 1800L;
    }
  }
  ldv_39598: ;
#line 404
  if ((unsigned long )current_detail == (unsigned long )((struct cache_detail *)0) || current_index >= current_detail->hash_size) {
#line 407
    goto ldv_39597;
  } else {

  }

#line 425
  goto ldv_39601;
  ldv_39600: 
#line 428
  current_index = current_index + 1;
  ldv_39601: ;
#line 425
  if (((unsigned long )current_detail != (unsigned long )((struct cache_detail *)0) && current_index < current_detail->hash_size) && (unsigned long )*(current_detail->hash_table + (unsigned long )current_index) == (unsigned long )((struct cache_head *)0)) {
#line 429
    goto ldv_39600;
  } else {

  }

#line 432
  if ((unsigned long )current_detail != (unsigned long )((struct cache_detail *)0) && current_index < current_detail->hash_size) {
    {
#line 436
    _raw_write_lock(& current_detail->hash_lock);
#line 440
    cp = current_detail->hash_table + (unsigned long )current_index;
#line 441
    ch = *cp;
    }
#line 441
    goto ldv_39609;
    ldv_39608: ;
#line 442
    if (current_detail->nextcheck > ch->expiry_time) {
#line 443
      current_detail->nextcheck = ch->expiry_time + 1L;
    } else {

    }
    {
#line 444
    tmp___1 = cache_is_expired(current_detail, ch);
    }
#line 444
    if (tmp___1 == 0) {
#line 445
      goto ldv_39606;
    } else {

    }
#line 447
    *cp = ch->next;
#line 448
    ch->next = (struct cache_head *)0;
#line 449
    current_detail->entries = current_detail->entries - 1;
#line 450
    rv = 1;
#line 451
    goto ldv_39607;
    ldv_39606: 
#line 441
    cp = & ch->next;
#line 441
    ch = *cp;
    ldv_39609: ;
#line 441
    if ((unsigned long )ch != (unsigned long )((struct cache_head *)0)) {
#line 443
      goto ldv_39608;
    } else {

    }
    ldv_39607: 
    {
#line 454
    _raw_write_unlock(& current_detail->hash_lock);
#line 455
    d = current_detail;
    }
#line 456
    if ((unsigned long )ch == (unsigned long )((struct cache_head *)0)) {
#line 457
      current_index = current_index + 1;
    } else {

    }
    {
#line 458
    spin_unlock(& cache_list_lock);
    }
#line 459
    if ((unsigned long )ch != (unsigned long )((struct cache_head *)0)) {
      {
#line 460
      tmp___2 = test_and_clear_bit(2, (unsigned long volatile   *)(& ch->flags));
      }
#line 460
      if (tmp___2 != 0) {
        {
#line 461
        cache_dequeue(current_detail, ch);
        }
      } else {

      }
      {
#line 462
      cache_revisit_request(ch);
#line 463
      cache_put(ch, d);
      }
    } else {

    }
  } else {
    {
#line 466
    spin_unlock(& cache_list_lock);
    }
  }
#line 468
  return (rv);
}
}
#line 474 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void do_cache_clean(struct work_struct *work ) 
{ 
  int delay ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 476
  delay = 5;
#line 477
  tmp___0 = cache_clean();
  }
#line 477
  if (tmp___0 == -1) {
    {
#line 478
    tmp = round_jiffies_relative(7500UL);
#line 478
    delay = (int )tmp;
    }
  } else {

  }
  {
#line 480
  tmp___1 = list_empty((struct list_head  const  *)(& cache_list));
  }
#line 480
  if (tmp___1 != 0) {
#line 481
    delay = 0;
  } else {

  }
#line 483
  if (delay != 0) {
    {
#line 484
    schedule_delayed_work(& cache_cleaner, (unsigned long )delay);
    }
  } else {

  }
#line 485
  return;
}
}
#line 493 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void cache_flush(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 495
  goto ldv_39619;
  ldv_39618: 
  {
#line 496
  __might_sleep("net/sunrpc/cache.c", 496, 0);
#line 496
  _cond_resched();
  }
  ldv_39619: 
  {
#line 495
  tmp = cache_clean();
  }
#line 495
  if (tmp != -1) {
#line 497
    goto ldv_39618;
  } else {

  }

#line 497
  goto ldv_39623;
  ldv_39622: 
  {
#line 498
  __might_sleep("net/sunrpc/cache.c", 498, 0);
#line 498
  _cond_resched();
  }
  ldv_39623: 
  {
#line 497
  tmp___0 = cache_clean();
  }
#line 497
  if (tmp___0 != -1) {
#line 499
    goto ldv_39622;
  } else {

  }

#line 504
  return;
}
}
#line 502 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void cache_purge(struct cache_detail *detail ) 
{ 


  {
  {
#line 504
  detail->flush_time = 9223372036854775807L;
#line 505
  detail->nextcheck = seconds_since_boot();
#line 506
  cache_flush();
#line 507
  detail->flush_time = 1L;
  }
#line 508
  return;
}
}
#line 532 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static spinlock_t cache_defer_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "cache_defer_lock",
                                                     0, 0UL}}}};
#line 533 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct list_head cache_defer_list  =    {& cache_defer_list, & cache_defer_list};
#line 534 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct hlist_head cache_defer_hash[256U]  ;
#line 535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_defer_cnt  ;
#line 537 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void __unhash_deferred_req(struct cache_deferred_req *dreq ) 
{ 
  int tmp ;

  {
  {
#line 539
  hlist_del_init(& dreq->hash);
#line 540
  tmp = list_empty((struct list_head  const  *)(& dreq->recent));
  }
#line 540
  if (tmp == 0) {
    {
#line 541
    list_del_init(& dreq->recent);
#line 542
    cache_defer_cnt = cache_defer_cnt - 1;
    }
  } else {

  }
#line 544
  return;
}
}
#line 546 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void __hash_deferred_req(struct cache_deferred_req *dreq , struct cache_head *item ) 
{ 
  int hash ;

  {
  {
#line 548
  hash = ((int )((long )item >> 4) ^ (int )((long )item >> 13)) & 255;
#line 550
  INIT_LIST_HEAD(& dreq->recent);
#line 551
  hlist_add_head(& dreq->hash, (struct hlist_head *)(& cache_defer_hash) + (unsigned long )hash);
  }
#line 552
  return;
}
}
#line 554 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void setup_deferral(struct cache_deferred_req *dreq , struct cache_head *item ,
                           int count_me ) 
{ 


  {
  {
#line 559
  dreq->item = item;
#line 561
  spin_lock(& cache_defer_lock);
#line 563
  __hash_deferred_req(dreq, item);
  }
#line 565
  if (count_me != 0) {
    {
#line 566
    cache_defer_cnt = cache_defer_cnt + 1;
#line 567
    list_add(& dreq->recent, & cache_defer_list);
    }
  } else {

  }
  {
#line 570
  spin_unlock(& cache_defer_lock);
  }
#line 571
  return;
}
}
#line 579 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void cache_restart_thread(struct cache_deferred_req *dreq , int too_many ) 
{ 
  struct thread_deferred_req *dr ;
  struct cache_deferred_req  const  *__mptr ;

  {
  {
#line 582
  __mptr = (struct cache_deferred_req  const  *)dreq;
#line 582
  dr = (struct thread_deferred_req *)__mptr;
#line 583
  complete(& dr->completion);
  }
#line 584
  return;
}
}
#line 586 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void cache_wait_req(struct cache_req *req , struct cache_head *item ) 
{ 
  struct thread_deferred_req sleeper ;
  struct cache_deferred_req *dreq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 589
  dreq = & sleeper.handle;
#line 591
  init_completion(& sleeper.completion);
#line 591
  sleeper.completion = sleeper.completion;
#line 592
  dreq->revisit = & cache_restart_thread;
#line 594
  setup_deferral(dreq, item, 0);
#line 596
  tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& item->flags));
  }
#line 596
  if (tmp___0 == 0) {
#line 596
    goto _L;
  } else {
    {
#line 596
    tmp___1 = wait_for_completion_interruptible_timeout(& sleeper.completion, (unsigned long )req->thread_wait);
    }
#line 596
    if (tmp___1 <= 0L) {
      _L: /* CIL Label */ 
      {
#line 602
      spin_lock(& cache_defer_lock);
#line 603
      tmp = hlist_unhashed((struct hlist_node  const  *)(& sleeper.handle.hash));
      }
#line 603
      if (tmp == 0) {
        {
#line 604
        __unhash_deferred_req(& sleeper.handle);
#line 605
        spin_unlock(& cache_defer_lock);
        }
      } else {
        {
#line 612
        spin_unlock(& cache_defer_lock);
#line 613
        wait_for_completion(& sleeper.completion);
        }
      }
    } else {

    }
  }
#line 616
  return;
}
}
#line 618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void cache_limit_defers(void) 
{ 
  struct cache_deferred_req *discard ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  u32 tmp ;

  {
#line 623
  discard = (struct cache_deferred_req *)0;
#line 625
  if (cache_defer_cnt <= 300) {
#line 626
    return;
  } else {

  }
  {
#line 628
  spin_lock(& cache_defer_lock);
  }
#line 631
  if (cache_defer_cnt > 300) {
    {
#line 632
    tmp = prandom_u32();
    }
#line 632
    if ((int )tmp & 1) {
#line 633
      __mptr = (struct list_head  const  *)cache_defer_list.next;
#line 633
      discard = (struct cache_deferred_req *)((char *)__mptr + 0xfffffffffffffff0UL);
    } else {
#line 636
      __mptr___0 = (struct list_head  const  *)cache_defer_list.prev;
#line 636
      discard = (struct cache_deferred_req *)((char *)__mptr___0 + 0xfffffffffffffff0UL);
    }
    {
#line 638
    __unhash_deferred_req(discard);
    }
  } else {

  }
  {
#line 640
  spin_unlock(& cache_defer_lock);
  }
#line 641
  if ((unsigned long )discard != (unsigned long )((struct cache_deferred_req *)0)) {
    {
#line 642
    (*(discard->revisit))(discard, 1);
    }
  } else {

  }
#line 643
  return;
}
}
#line 646 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static bool cache_defer_req(struct cache_req *req , struct cache_head *item ) 
{ 
  struct cache_deferred_req *dreq ;
  int tmp ;
  int tmp___0 ;

  {
#line 650
  if (req->thread_wait != 0) {
    {
#line 651
    cache_wait_req(req, item);
#line 652
    tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& item->flags));
    }
#line 652
    if (tmp == 0) {
#line 653
      return (0);
    } else {

    }
  } else {

  }
  {
#line 655
  dreq = (*(req->defer))(req);
  }
#line 656
  if ((unsigned long )dreq == (unsigned long )((struct cache_deferred_req *)0)) {
#line 657
    return (0);
  } else {

  }
  {
#line 658
  setup_deferral(dreq, item, 1);
#line 659
  tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& item->flags));
  }
#line 659
  if (tmp___0 == 0) {
    {
#line 663
    cache_revisit_request(item);
    }
  } else {

  }
  {
#line 665
  cache_limit_defers();
  }
#line 666
  return (1);
}
}
#line 669 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void cache_revisit_request(struct cache_head *item ) 
{ 
  struct cache_deferred_req *dreq ;
  struct list_head pending ;
  struct hlist_node *tmp ;
  int hash ;
  struct hlist_node *____ptr ;
  struct hlist_node  const  *__mptr ;
  struct cache_deferred_req *tmp___0 ;
  struct hlist_node *____ptr___0 ;
  struct hlist_node  const  *__mptr___0 ;
  struct cache_deferred_req *tmp___1 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___2 ;

  {
  {
#line 674
  hash = ((int )((long )item >> 4) ^ (int )((long )item >> 13)) & 255;
#line 676
  INIT_LIST_HEAD(& pending);
#line 677
  spin_lock(& cache_defer_lock);
#line 679
  ____ptr = ((struct hlist_head *)(& cache_defer_hash) + (unsigned long )hash)->first;
  }
#line 679
  if ((unsigned long )____ptr != (unsigned long )((struct hlist_node *)0)) {
#line 679
    __mptr = (struct hlist_node  const  *)____ptr;
#line 679
    tmp___0 = (struct cache_deferred_req *)__mptr;
  } else {
#line 679
    tmp___0 = (struct cache_deferred_req *)0;
  }
#line 679
  dreq = tmp___0;
#line 679
  goto ldv_39704;
  ldv_39703: ;
#line 680
  if ((unsigned long )dreq->item == (unsigned long )item) {
    {
#line 681
    __unhash_deferred_req(dreq);
#line 682
    list_add(& dreq->recent, & pending);
    }
  } else {

  }
#line 679
  ____ptr___0 = tmp;
#line 679
  if ((unsigned long )____ptr___0 != (unsigned long )((struct hlist_node *)0)) {
#line 679
    __mptr___0 = (struct hlist_node  const  *)____ptr___0;
#line 679
    tmp___1 = (struct cache_deferred_req *)__mptr___0;
  } else {
#line 679
    tmp___1 = (struct cache_deferred_req *)0;
  }
#line 679
  dreq = tmp___1;
  ldv_39704: ;
#line 679
  if ((unsigned long )dreq != (unsigned long )((struct cache_deferred_req *)0)) {
#line 679
    tmp = dreq->hash.next;
#line 681
    goto ldv_39703;
  } else {

  }
  {
#line 685
  spin_unlock(& cache_defer_lock);
  }
#line 687
  goto ldv_39709;
  ldv_39708: 
  {
#line 688
  __mptr___1 = (struct list_head  const  *)pending.next;
#line 688
  dreq = (struct cache_deferred_req *)((char *)__mptr___1 + 0xfffffffffffffff0UL);
#line 689
  list_del_init(& dreq->recent);
#line 690
  (*(dreq->revisit))(dreq, 0);
  }
  ldv_39709: 
  {
#line 687
  tmp___2 = list_empty((struct list_head  const  *)(& pending));
  }
#line 687
  if (tmp___2 == 0) {
#line 689
    goto ldv_39708;
  } else {

  }

#line 694
  return;
}
}
#line 694 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void cache_clean_deferred(void *owner ) 
{ 
  struct cache_deferred_req *dreq ;
  struct cache_deferred_req *tmp ;
  struct list_head pending ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  int tmp___0 ;

  {
  {
#line 700
  INIT_LIST_HEAD(& pending);
#line 701
  spin_lock(& cache_defer_lock);
#line 703
  __mptr = (struct list_head  const  *)cache_defer_list.next;
#line 703
  dreq = (struct cache_deferred_req *)((char *)__mptr + 0xfffffffffffffff0UL);
#line 703
  __mptr___0 = (struct list_head  const  *)dreq->recent.next;
#line 703
  tmp = (struct cache_deferred_req *)((char *)__mptr___0 + 0xfffffffffffffff0UL);
  }
#line 703
  goto ldv_39724;
  ldv_39723: ;
#line 704
  if ((unsigned long )dreq->owner == (unsigned long )owner) {
    {
#line 705
    __unhash_deferred_req(dreq);
#line 706
    list_add(& dreq->recent, & pending);
    }
  } else {

  }
#line 703
  dreq = tmp;
#line 703
  __mptr___1 = (struct list_head  const  *)tmp->recent.next;
#line 703
  tmp = (struct cache_deferred_req *)((char *)__mptr___1 + 0xfffffffffffffff0UL);
  ldv_39724: ;
#line 703
  if ((unsigned long )(& dreq->recent) != (unsigned long )(& cache_defer_list)) {
#line 705
    goto ldv_39723;
  } else {

  }
  {
#line 709
  spin_unlock(& cache_defer_lock);
  }
#line 711
  goto ldv_39729;
  ldv_39728: 
  {
#line 712
  __mptr___2 = (struct list_head  const  *)pending.next;
#line 712
  dreq = (struct cache_deferred_req *)((char *)__mptr___2 + 0xfffffffffffffff0UL);
#line 713
  list_del_init(& dreq->recent);
#line 714
  (*(dreq->revisit))(dreq, 1);
  }
  ldv_39729: 
  {
#line 711
  tmp___0 = list_empty((struct list_head  const  *)(& pending));
  }
#line 711
  if (tmp___0 == 0) {
#line 713
    goto ldv_39728;
  } else {

  }

#line 718
  return;
}
}
#line 734 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static spinlock_t queue_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "queue_lock", 0, 0UL}}}};
#line 735 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct mutex queue_io_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "queue_io_mutex.wait_lock",
                                                           0, 0UL}}}}, {& queue_io_mutex.wait_list,
                                                                        & queue_io_mutex.wait_list},
    0, 0, (void *)(& queue_io_mutex), {0, {0, 0}, "queue_io_mutex", 0, 0UL}};
#line 753 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_request(struct cache_detail *detail , struct cache_request *crq ) 
{ 
  char *bp ;
  int len ;

  {
  {
#line 756
  bp = crq->buf;
#line 757
  len = 4096;
#line 759
  (*(detail->cache_request))(detail, crq->item, & bp, & len);
  }
#line 760
  if (len < 0) {
#line 761
    return (-11);
  } else {

  }
#line 762
  return ((int )(4096U - (unsigned int )len));
}
}
#line 765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_read(struct file *filp , char *buf , size_t count , loff_t *ppos ,
                          struct cache_detail *cd ) 
{ 
  struct cache_reader *rp ;
  struct cache_request *rq ;
  struct inode *inode ;
  struct inode *tmp ;
  int err ;
  struct list_head *next ;
  struct list_head  const  *__mptr ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  struct list_head  const  *__mptr___0 ;
  bool __warned___0 ;
  int __ret_warn_once___0 ;
  int __ret_warn_on___0 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
  {
#line 768
  rp = (struct cache_reader *)filp->private_data;
#line 770
  tmp = file_inode(filp);
#line 770
  inode = tmp;
  }
#line 773
  if (count == 0UL) {
#line 774
    return (0L);
  } else {

  }
  {
#line 776
  mutex_lock_nested(& inode->i_mutex, 0U);
  }
  again: 
  {
#line 779
  spin_lock(& queue_lock);
  }
#line 781
  goto ldv_39769;
  ldv_39768: 
  {
#line 784
  next = rp->q.list.next;
#line 785
  list_move(& rp->q.list, next);
  }
  ldv_39769: ;
#line 782
  if ((unsigned long )rp->q.list.next != (unsigned long )(& cd->queue)) {
#line 782
    __mptr = (struct list_head  const  *)rp->q.list.next;
#line 782
    if (((struct cache_queue *)__mptr)->reader != 0) {
#line 783
      goto ldv_39768;
    } else {
#line 786
      goto ldv_39770;
    }
  } else {

  }
  ldv_39770: ;
#line 787
  if ((unsigned long )rp->q.list.next == (unsigned long )(& cd->queue)) {
    {
#line 788
    spin_unlock(& queue_lock);
#line 789
    mutex_unlock(& inode->i_mutex);
#line 790
    __ret_warn_once = rp->offset != 0;
#line 790
    tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 790
    if (tmp___2 != 0L) {
      {
#line 790
      __ret_warn_on = ! __warned;
#line 790
      tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 790
      if (tmp___0 != 0L) {
        {
#line 790
        warn_slowpath_null("net/sunrpc/cache.c", 790);
        }
      } else {

      }
      {
#line 790
      tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 790
      if (tmp___1 != 0L) {
#line 790
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 790
    __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 791
    return (0L);
  } else {

  }
  {
#line 793
  __mptr___0 = (struct list_head  const  *)rp->q.list.next;
#line 793
  rq = (struct cache_request *)__mptr___0;
#line 794
  __ret_warn_once___0 = rq->q.reader != 0;
#line 794
  tmp___5 = __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 794
  if (tmp___5 != 0L) {
    {
#line 794
    __ret_warn_on___0 = ! __warned___0;
#line 794
    tmp___3 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 794
    if (tmp___3 != 0L) {
      {
#line 794
      warn_slowpath_null("net/sunrpc/cache.c", 794);
      }
    } else {

    }
    {
#line 794
    tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
    }
#line 794
    if (tmp___4 != 0L) {
#line 794
      __warned___0 = 1;
    } else {

    }
  } else {

  }
  {
#line 794
  __builtin_expect(__ret_warn_once___0 != 0, 0L);
  }
#line 795
  if (rp->offset == 0) {
#line 796
    rq->readers = rq->readers + 1;
  } else {

  }
  {
#line 797
  spin_unlock(& queue_lock);
  }
#line 799
  if (rq->len == 0) {
    {
#line 800
    err = cache_request(cd, rq);
    }
#line 801
    if (err < 0) {
#line 802
      goto out;
    } else {

    }
#line 803
    rq->len = err;
  } else {

  }
#line 806
  if (rp->offset == 0) {
    {
#line 806
    tmp___7 = constant_test_bit(2U, (unsigned long const volatile   *)(& (rq->item)->flags));
    }
#line 806
    if (tmp___7 == 0) {
      {
#line 807
      err = -11;
#line 808
      spin_lock(& queue_lock);
#line 809
      list_move(& rp->q.list, & rq->q.list);
#line 810
      spin_unlock(& queue_lock);
      }
    } else {
#line 806
      goto _L;
    }
  } else {
    _L: /* CIL Label */ 
#line 812
    if ((size_t )rp->offset + count > (size_t )rq->len) {
#line 813
      count = (size_t )(rq->len - rp->offset);
    } else {

    }
    {
#line 814
    err = -14;
#line 815
    tmp___6 = copy_to_user((void *)buf, (void const   *)(rq->buf + (unsigned long )rp->offset),
                           (unsigned int )count);
    }
#line 815
    if (tmp___6 != 0) {
#line 816
      goto out;
    } else {

    }
#line 817
    rp->offset = (int )((unsigned int )rp->offset + (unsigned int )count);
#line 818
    if (rp->offset >= rq->len) {
      {
#line 819
      rp->offset = 0;
#line 820
      spin_lock(& queue_lock);
#line 821
      list_move(& rp->q.list, & rq->q.list);
#line 822
      spin_unlock(& queue_lock);
      }
    } else {

    }
#line 824
    err = 0;
  }
  out: ;
#line 827
  if (rp->offset == 0) {
    {
#line 829
    spin_lock(& queue_lock);
#line 830
    rq->readers = rq->readers - 1;
    }
#line 831
    if (rq->readers == 0) {
      {
#line 831
      tmp___8 = constant_test_bit(2U, (unsigned long const volatile   *)(& (rq->item)->flags));
      }
#line 831
      if (tmp___8 == 0) {
        {
#line 833
        list_del(& rq->q.list);
#line 834
        spin_unlock(& queue_lock);
#line 835
        cache_put(rq->item, cd);
#line 836
        kfree((void const   *)rq->buf);
#line 837
        kfree((void const   *)rq);
        }
      } else {
        {
#line 839
        spin_unlock(& queue_lock);
        }
      }
    } else {
      {
#line 839
      spin_unlock(& queue_lock);
      }
    }
  } else {

  }
#line 841
  if (err == -11) {
#line 842
    goto again;
  } else {

  }
  {
#line 843
  mutex_unlock(& inode->i_mutex);
  }
#line 844
  return ((ssize_t )(err != 0 ? (size_t )err : count));
}
}
#line 847 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_do_downcall(char *kaddr , char const   *buf , size_t count ,
                                 struct cache_detail *cd ) 
{ 
  ssize_t ret ;
  unsigned long tmp ;
  int tmp___0 ;

  {
#line 852
  if (count == 0UL) {
#line 853
    return (-22L);
  } else {

  }
  {
#line 854
  tmp = copy_from_user((void *)kaddr, (void const   *)buf, count);
  }
#line 854
  if (tmp != 0UL) {
#line 855
    return (-14L);
  } else {

  }
  {
#line 856
  *(kaddr + count) = 0;
#line 857
  tmp___0 = (*(cd->cache_parse))(cd, kaddr, (int )count);
#line 857
  ret = (ssize_t )tmp___0;
  }
#line 858
  if (ret == 0L) {
#line 859
    ret = (ssize_t )count;
  } else {

  }
#line 860
  return (ret);
}
}
#line 863 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_slow_downcall(char const   *buf , size_t count , struct cache_detail *cd ) 
{ 
  char write_buf[8192U] ;
  ssize_t ret ;

  {
#line 867
  ret = -22L;
#line 869
  if (count > 8191UL) {
#line 870
    goto out;
  } else {

  }
  {
#line 871
  mutex_lock_nested(& queue_io_mutex, 0U);
#line 872
  ret = cache_do_downcall((char *)(& write_buf), buf, count, cd);
#line 873
  mutex_unlock(& queue_io_mutex);
  }
  out: ;
#line 875
  return (ret);
}
}
#line 878 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_downcall(struct address_space *mapping , char const   *buf ,
                              size_t count , struct cache_detail *cd ) 
{ 
  struct page *page ;
  char *kaddr ;
  ssize_t ret ;
  void *tmp ;
  ssize_t tmp___0 ;

  {
#line 884
  ret = -12L;
#line 886
  if (count > 4095UL) {
#line 887
    goto out_slow;
  } else {

  }
  {
#line 889
  page = find_or_create_page(mapping, 0UL, 208U);
  }
#line 890
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 891
    goto out_slow;
  } else {

  }
  {
#line 893
  tmp = kmap(page);
#line 893
  kaddr = (char *)tmp;
#line 894
  ret = cache_do_downcall(kaddr, buf, count, cd);
#line 895
  kunmap(page);
#line 896
  unlock_page(page);
#line 897
  put_page(page);
  }
#line 898
  return (ret);
  out_slow: 
  {
#line 900
  tmp___0 = cache_slow_downcall(buf, count, cd);
  }
#line 900
  return (tmp___0);
}
}
#line 903 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_write(struct file *filp , char const   *buf , size_t count ,
                           loff_t *ppos , struct cache_detail *cd ) 
{ 
  struct address_space *mapping ;
  struct inode *inode ;
  struct inode *tmp ;
  ssize_t ret ;

  {
  {
#line 907
  mapping = filp->f_mapping;
#line 908
  tmp = file_inode(filp);
#line 908
  inode = tmp;
#line 909
  ret = -22L;
  }
#line 911
  if ((unsigned long )cd->cache_parse == (unsigned long )((int (*)(struct cache_detail * ,
                                                                   char * , int  ))0)) {
#line 912
    goto out;
  } else {

  }
  {
#line 914
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 915
  ret = cache_downcall(mapping, buf, count, cd);
#line 916
  mutex_unlock(& inode->i_mutex);
  }
  out: ;
#line 918
  return (ret);
}
}
#line 921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static wait_queue_head_t queue_wait  =    {{{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "queue_wait.lock",
                                                      0, 0UL}}}}, {& queue_wait.task_list,
                                                                   & queue_wait.task_list}};
#line 923 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static unsigned int cache_poll(struct file *filp , poll_table *wait , struct cache_detail *cd ) 
{ 
  unsigned int mask ;
  struct cache_reader *rp ;
  struct cache_queue *cq ;
  struct list_head  const  *__mptr ;

  {
  {
#line 927
  rp = (struct cache_reader *)filp->private_data;
#line 930
  poll_wait(filp, & queue_wait, wait);
#line 933
  mask = 131330U;
  }
#line 935
  if ((unsigned long )rp == (unsigned long )((struct cache_reader *)0)) {
#line 936
    return (mask);
  } else {

  }
  {
#line 938
  spin_lock(& queue_lock);
#line 940
  cq = & rp->q;
  }
#line 940
  goto ldv_39834;
  ldv_39833: ;
#line 942
  if (cq->reader == 0) {
#line 943
    mask = mask | 65U;
#line 944
    goto ldv_39832;
  } else {

  }
#line 941
  __mptr = (struct list_head  const  *)cq->list.next;
#line 941
  cq = (struct cache_queue *)__mptr;
  ldv_39834: ;
#line 940
  if ((unsigned long )(& cq->list) != (unsigned long )(& cd->queue)) {
#line 942
    goto ldv_39833;
  } else {

  }
  ldv_39832: 
  {
#line 946
  spin_unlock(& queue_lock);
  }
#line 947
  return (mask);
}
}
#line 950 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_ioctl(struct inode *ino , struct file *filp , unsigned int cmd ,
                       unsigned long arg , struct cache_detail *cd ) 
{ 
  int len ;
  struct cache_reader *rp ;
  struct cache_queue *cq ;
  struct cache_request *cr ;
  struct cache_queue  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  int __ret_pu ;
  int __pu_val ;

  {
#line 954
  len = 0;
#line 955
  rp = (struct cache_reader *)filp->private_data;
#line 958
  if (cmd != 21531U || (unsigned long )rp == (unsigned long )((struct cache_reader *)0)) {
#line 959
    return (-22);
  } else {

  }
  {
#line 961
  spin_lock(& queue_lock);
#line 966
  cq = & rp->q;
  }
#line 966
  goto ldv_39852;
  ldv_39851: ;
#line 968
  if (cq->reader == 0) {
#line 970
    __mptr = (struct cache_queue  const  *)cq;
#line 970
    cr = (struct cache_request *)__mptr;
#line 971
    len = cr->len - rp->offset;
#line 972
    goto ldv_39850;
  } else {

  }
#line 967
  __mptr___0 = (struct list_head  const  *)cq->list.next;
#line 967
  cq = (struct cache_queue *)__mptr___0;
  ldv_39852: ;
#line 966
  if ((unsigned long )(& cq->list) != (unsigned long )(& cd->queue)) {
#line 968
    goto ldv_39851;
  } else {

  }
  ldv_39850: 
  {
#line 974
  spin_unlock(& queue_lock);
#line 976
  might_fault();
#line 976
  __pu_val = len;
  }
  {
#line 976
  if (4UL == 1UL) {
#line 976
    goto case_1;
  } else {

  }
#line 976
  if (4UL == 2UL) {
#line 976
    goto case_2;
  } else {

  }
#line 976
  if (4UL == 4UL) {
#line 976
    goto case_4;
  } else {

  }
#line 976
  if (4UL == 8UL) {
#line 976
    goto case_8;
  } else {

  }
#line 976
  goto switch_default;
  case_1: /* CIL Label */ 
#line 976
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 976
  goto ldv_39856;
  case_2: /* CIL Label */ 
#line 976
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 976
  goto ldv_39856;
  case_4: /* CIL Label */ 
#line 976
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 976
  goto ldv_39856;
  case_8: /* CIL Label */ 
#line 976
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 976
  goto ldv_39856;
  switch_default: /* CIL Label */ 
#line 976
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 976
  goto ldv_39856;
  switch_break: /* CIL Label */ ;
  }
  ldv_39856: ;
#line 976
  return (__ret_pu);
}
}
#line 979 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_open(struct inode *inode , struct file *filp , struct cache_detail *cd ) 
{ 
  struct cache_reader *rp ;
  bool tmp ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 982
  rp = (struct cache_reader *)0;
#line 984
  if ((unsigned long )cd == (unsigned long )((struct cache_detail *)0)) {
#line 985
    return (-13);
  } else {
    {
#line 984
    tmp = ldv_try_module_get_10___2(cd->owner);
    }
#line 984
    if (tmp) {
#line 984
      tmp___0 = 0;
    } else {
#line 984
      tmp___0 = 1;
    }
#line 984
    if (tmp___0) {
#line 985
      return (-13);
    } else {

    }
  }
  {
#line 986
  ldv_nonseekable_open_11(inode, filp);
  }
#line 987
  if ((int )filp->f_mode & 1) {
    {
#line 988
    tmp___1 = kmalloc(32UL, 208U);
#line 988
    rp = (struct cache_reader *)tmp___1;
    }
#line 989
    if ((unsigned long )rp == (unsigned long )((struct cache_reader *)0)) {
      {
#line 990
      ldv_module_put_12___0(cd->owner);
      }
#line 991
      return (-12);
    } else {

    }
    {
#line 993
    rp->offset = 0;
#line 994
    rp->q.reader = 1;
#line 995
    atomic_inc(& cd->readers);
#line 996
    spin_lock(& queue_lock);
#line 997
    list_add(& rp->q.list, & cd->queue);
#line 998
    spin_unlock(& queue_lock);
    }
  } else {

  }
#line 1000
  filp->private_data = (void *)rp;
#line 1001
  return (0);
}
}
#line 1004 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_release(struct inode *inode , struct file *filp , struct cache_detail *cd ) 
{ 
  struct cache_reader *rp ;
  struct cache_queue *cq ;
  struct cache_queue  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1007
  rp = (struct cache_reader *)filp->private_data;
#line 1009
  if ((unsigned long )rp != (unsigned long )((struct cache_reader *)0)) {
    {
#line 1010
    spin_lock(& queue_lock);
    }
#line 1011
    if (rp->offset != 0) {
#line 1013
      cq = & rp->q;
#line 1013
      goto ldv_39881;
      ldv_39880: ;
#line 1015
      if (cq->reader == 0) {
#line 1016
        __mptr = (struct cache_queue  const  *)cq;
#line 1016
        ((struct cache_request *)__mptr)->readers = ((struct cache_request *)__mptr)->readers - 1;
#line 1018
        goto ldv_39879;
      } else {

      }
#line 1014
      __mptr___0 = (struct list_head  const  *)cq->list.next;
#line 1014
      cq = (struct cache_queue *)__mptr___0;
      ldv_39881: ;
#line 1013
      if ((unsigned long )(& cq->list) != (unsigned long )(& cd->queue)) {
#line 1015
        goto ldv_39880;
      } else {

      }
      ldv_39879: 
#line 1020
      rp->offset = 0;
    } else {

    }
    {
#line 1022
    list_del(& rp->q.list);
#line 1023
    spin_unlock(& queue_lock);
#line 1025
    filp->private_data = (void *)0;
#line 1026
    kfree((void const   *)rp);
#line 1028
    cd->last_close = seconds_since_boot();
#line 1029
    atomic_dec(& cd->readers);
    }
  } else {

  }
  {
#line 1031
  ldv_module_put_13___0(cd->owner);
  }
#line 1032
  return (0);
}
}
#line 1037 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void cache_dequeue(struct cache_detail *detail , struct cache_head *ch ) 
{ 
  struct cache_queue *cq ;
  struct list_head  const  *__mptr ;
  struct cache_request *cr ;
  struct cache_queue  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
  {
#line 1040
  spin_lock(& queue_lock);
#line 1041
  __mptr = (struct list_head  const  *)detail->queue.next;
#line 1041
  cq = (struct cache_queue *)__mptr;
  }
#line 1041
  goto ldv_39896;
  ldv_39895: ;
#line 1042
  if (cq->reader == 0) {
#line 1043
    __mptr___0 = (struct cache_queue  const  *)cq;
#line 1043
    cr = (struct cache_request *)__mptr___0;
#line 1044
    if ((unsigned long )cr->item != (unsigned long )ch) {
#line 1045
      goto ldv_39894;
    } else {

    }
#line 1046
    if (cr->readers != 0) {
#line 1047
      goto ldv_39894;
    } else {

    }
    {
#line 1048
    list_del(& cr->q.list);
#line 1049
    spin_unlock(& queue_lock);
#line 1050
    cache_put(cr->item, detail);
#line 1051
    kfree((void const   *)cr->buf);
#line 1052
    kfree((void const   *)cr);
    }
#line 1053
    return;
  } else {

  }
  ldv_39894: 
#line 1041
  __mptr___1 = (struct list_head  const  *)cq->list.next;
#line 1041
  cq = (struct cache_queue *)__mptr___1;
  ldv_39896: ;
#line 1041
  if ((unsigned long )(& cq->list) != (unsigned long )(& detail->queue)) {
#line 1043
    goto ldv_39895;
  } else {

  }
  {
#line 1055
  spin_unlock(& queue_lock);
  }
#line 1056
  return;
}
}
#line 1067 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void qword_add(char **bpp , int *lp , char *str ) 
{ 
  char *bp ;
  int len ;
  char c ;
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;
  char *tmp___5 ;

  {
#line 1069
  bp = *bpp;
#line 1070
  len = *lp;
#line 1073
  if (len < 0) {
#line 1073
    return;
  } else {

  }
#line 1075
  goto ldv_39913;
  ldv_39912: ;
  {
#line 1077
  if ((int )c == 32) {
#line 1077
    goto case_32;
  } else {

  }
#line 1078
  if ((int )c == 9) {
#line 1078
    goto case_9;
  } else {

  }
#line 1079
  if ((int )c == 10) {
#line 1079
    goto case_10;
  } else {

  }
#line 1080
  if ((int )c == 92) {
#line 1080
    goto case_92;
  } else {

  }
#line 1089
  goto switch_default;
  case_32: /* CIL Label */ ;
  case_9: /* CIL Label */ ;
  case_10: /* CIL Label */ ;
  case_92: /* CIL Label */ ;
#line 1081
  if (len > 3) {
#line 1082
    tmp = bp;
#line 1082
    bp = bp + 1;
#line 1082
    *tmp = 92;
#line 1083
    tmp___0 = bp;
#line 1083
    bp = bp + 1;
#line 1083
    *tmp___0 = (char )((unsigned int )((unsigned char )(((int )c & 192) >> 6)) + 48U);
#line 1084
    tmp___1 = bp;
#line 1084
    bp = bp + 1;
#line 1084
    *tmp___1 = (char )((unsigned int )((unsigned char )(((int )c & 56) >> 3)) + 48U);
#line 1085
    tmp___2 = bp;
#line 1085
    bp = bp + 1;
#line 1085
    *tmp___2 = (char )(((unsigned int )((unsigned char )c) & 7U) + 48U);
  } else {

  }
#line 1087
  len = len + -4;
#line 1088
  goto ldv_39910;
  switch_default: /* CIL Label */ 
#line 1090
  tmp___3 = bp;
#line 1090
  bp = bp + 1;
#line 1090
  *tmp___3 = c;
#line 1091
  len = len - 1;
  switch_break: /* CIL Label */ ;
  }
  ldv_39910: ;
  ldv_39913: 
#line 1075
  tmp___4 = str;
#line 1075
  str = str + 1;
#line 1075
  c = *tmp___4;
#line 1075
  if ((int )((signed char )c) != 0 && len != 0) {
#line 1077
    goto ldv_39912;
  } else {

  }

#line 1093
  if ((int )((signed char )c) != 0 || len <= 0) {
#line 1093
    len = -1;
  } else {
#line 1095
    tmp___5 = bp;
#line 1095
    bp = bp + 1;
#line 1095
    *tmp___5 = 32;
#line 1096
    len = len - 1;
  }
#line 1098
  *bpp = bp;
#line 1099
  *lp = len;
#line 1100
  return;
}
}
#line 1103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void qword_addhex(char **bpp , int *lp , char *buf , int blen ) 
{ 
  char *bp ;
  int len ;
  char *tmp ;
  char *tmp___0 ;
  unsigned char c ;
  char *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;

  {
#line 1105
  bp = *bpp;
#line 1106
  len = *lp;
#line 1108
  if (len < 0) {
#line 1108
    return;
  } else {

  }
#line 1110
  if (len > 2) {
#line 1111
    tmp = bp;
#line 1111
    bp = bp + 1;
#line 1111
    *tmp = 92;
#line 1112
    tmp___0 = bp;
#line 1112
    bp = bp + 1;
#line 1112
    *tmp___0 = 120;
#line 1113
    len = len + -2;
#line 1114
    goto ldv_39933;
    ldv_39932: 
#line 1115
    tmp___1 = buf;
#line 1115
    buf = buf + 1;
#line 1115
    c = (unsigned char )*tmp___1;
#line 1116
    tmp___2 = bp;
#line 1116
    bp = bp + 1;
#line 1116
    *tmp___2 = (char )(((unsigned int )((int )c >> 4) + ((unsigned int )c > 159U ? 39U : 0U)) + 48U);
#line 1117
    tmp___3 = bp;
#line 1117
    bp = bp + 1;
#line 1117
    *tmp___3 = (char )((((unsigned int )c & 15U) + (((int )c & 15) > 9 ? 39U : 0U)) + 48U);
#line 1118
    len = len + -2;
#line 1119
    blen = blen - 1;
    ldv_39933: ;
#line 1114
    if (blen != 0 && len > 1) {
#line 1116
      goto ldv_39932;
    } else {

    }

  } else {

  }
#line 1122
  if (blen != 0 || len <= 0) {
#line 1122
    len = -1;
  } else {
#line 1124
    tmp___4 = bp;
#line 1124
    bp = bp + 1;
#line 1124
    *tmp___4 = 32;
#line 1125
    len = len - 1;
  }
#line 1127
  *bpp = bp;
#line 1128
  *lp = len;
#line 1129
  return;
}
}
#line 1132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void warn_no_listener(struct cache_detail *detail ) 
{ 


  {
#line 1134
  if (detail->last_warn != detail->last_close) {
#line 1135
    detail->last_warn = detail->last_close;
#line 1136
    if ((unsigned long )detail->warn_no_listener != (unsigned long )((void (*)(struct cache_detail * ,
                                                                               int  ))0)) {
      {
#line 1137
      (*(detail->warn_no_listener))(detail, detail->last_close != 0L);
      }
    } else {

    }
  } else {

  }
#line 1139
  return;
}
}
#line 1141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static bool cache_listeners_exist(struct cache_detail *detail ) 
{ 
  int tmp ;
  time_t tmp___0 ;

  {
  {
#line 1143
  tmp = atomic_read((atomic_t const   *)(& detail->readers));
  }
#line 1143
  if (tmp != 0) {
#line 1144
    return (1);
  } else {

  }
#line 1145
  if (detail->last_close == 0L) {
#line 1147
    return (0);
  } else {

  }
  {
#line 1148
  tmp___0 = seconds_since_boot();
  }
#line 1148
  if (detail->last_close < tmp___0 + -30L) {
#line 1154
    return (0);
  } else {

  }
#line 1155
  return (1);
}
}
#line 1164 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
int sunrpc_cache_pipe_upcall(struct cache_detail *detail , struct cache_head *h ) 
{ 
  char *buf ;
  struct cache_request *crq ;
  bool tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
#line 1170
  if ((unsigned long )detail->cache_request == (unsigned long )((void (*)(struct cache_detail * ,
                                                                          struct cache_head * ,
                                                                          char ** ,
                                                                          int * ))0)) {
#line 1171
    return (-22);
  } else {

  }
  {
#line 1173
  tmp = cache_listeners_exist(detail);
  }
#line 1173
  if (tmp) {
#line 1173
    tmp___0 = 0;
  } else {
#line 1173
    tmp___0 = 1;
  }
#line 1173
  if (tmp___0) {
    {
#line 1174
    warn_no_listener(detail);
    }
#line 1175
    return (-22);
  } else {

  }
  {
#line 1178
  tmp___1 = kmalloc(4096UL, 208U);
#line 1178
  buf = (char *)tmp___1;
  }
#line 1179
  if ((unsigned long )buf == (unsigned long )((char *)0)) {
#line 1180
    return (-11);
  } else {

  }
  {
#line 1182
  tmp___2 = kmalloc(48UL, 208U);
#line 1182
  crq = (struct cache_request *)tmp___2;
  }
#line 1183
  if ((unsigned long )crq == (unsigned long )((struct cache_request *)0)) {
    {
#line 1184
    kfree((void const   *)buf);
    }
#line 1185
    return (-11);
  } else {

  }
  {
#line 1188
  crq->q.reader = 0;
#line 1189
  crq->item = cache_get(h);
#line 1190
  crq->buf = buf;
#line 1191
  crq->len = 0;
#line 1192
  crq->readers = 0;
#line 1193
  spin_lock(& queue_lock);
#line 1194
  list_add_tail(& crq->q.list, & detail->queue);
#line 1195
  spin_unlock(& queue_lock);
#line 1196
  __wake_up(& queue_wait, 3U, 1, (void *)0);
  }
#line 1197
  return (0);
}
}
#line 1213 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
int qword_get(char **bpp , char *dest , int bufsize ) 
{ 
  char *bp ;
  int len ;
  int h ;
  int l ;
  char *tmp ;
  int byte ;
  char *tmp___0 ;
  char *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1216
  bp = *bpp;
#line 1217
  len = 0;
#line 1219
  goto ldv_39971;
  ldv_39970: 
#line 1219
  bp = bp + 1;
  ldv_39971: ;
#line 1219
  if ((int )((signed char )*bp) == 32) {
#line 1221
    goto ldv_39970;
  } else {

  }

#line 1221
  if ((int )((signed char )*bp) == 92 && (int )((signed char )*(bp + 1UL)) == 120) {
#line 1223
    bp = bp + 2UL;
#line 1224
    goto ldv_39977;
    ldv_39976: 
    {
#line 1227
    h = hex_to_bin((int )*bp);
    }
#line 1228
    if (h < 0) {
#line 1229
      goto ldv_39975;
    } else {

    }
    {
#line 1231
    l = hex_to_bin((int )*(bp + 1UL));
    }
#line 1232
    if (l < 0) {
#line 1233
      goto ldv_39975;
    } else {

    }
#line 1235
    tmp = dest;
#line 1235
    dest = dest + 1;
#line 1235
    *tmp = (int )((char )(h << 4)) | (int )((char )l);
#line 1236
    bp = bp + 2UL;
#line 1237
    len = len + 1;
    ldv_39977: ;
#line 1224
    if (len < bufsize) {
#line 1226
      goto ldv_39976;
    } else {

    }
    ldv_39975: ;
  } else {
#line 1241
    goto ldv_39980;
    ldv_39979: ;
#line 1242
    if ((int )((signed char )*bp) == 92) {
      {
#line 1242
      tmp___5 = isodigit((int )*(bp + 1UL));
      }
#line 1242
      if (tmp___5 != 0) {
#line 1242
        if ((int )((signed char )*(bp + 1UL)) <= 51) {
          {
#line 1242
          tmp___6 = isodigit((int )*(bp + 2UL));
          }
#line 1242
          if (tmp___6 != 0) {
            {
#line 1242
            tmp___7 = isodigit((int )*(bp + 3UL));
            }
#line 1242
            if (tmp___7 != 0) {
#line 1246
              bp = bp + 1;
#line 1246
              byte = (int )*bp + -48;
#line 1247
              bp = bp + 1;
#line 1248
              tmp___0 = bp;
#line 1248
              bp = bp + 1;
#line 1248
              byte = (byte << 3) | ((int )*tmp___0 + -48);
#line 1249
              tmp___1 = bp;
#line 1249
              bp = bp + 1;
#line 1249
              byte = (byte << 3) | ((int )*tmp___1 + -48);
#line 1250
              tmp___2 = dest;
#line 1250
              dest = dest + 1;
#line 1250
              *tmp___2 = (char )byte;
#line 1251
              len = len + 1;
            } else {
#line 1242
              goto _L___2;
            }
          } else {
#line 1242
            goto _L___2;
          }
        } else {
#line 1242
          goto _L___2;
        }
      } else {
#line 1242
        goto _L___2;
      }
    } else {
      _L___2: /* CIL Label */ 
#line 1253
      tmp___3 = dest;
#line 1253
      dest = dest + 1;
#line 1253
      tmp___4 = bp;
#line 1253
      bp = bp + 1;
#line 1253
      *tmp___3 = *tmp___4;
#line 1254
      len = len + 1;
    }
    ldv_39980: ;
#line 1241
    if ((((int )*bp != 32 && (int )*bp != 10) && (int )((signed char )*bp) != 0) && len < bufsize + -1) {
#line 1243
      goto ldv_39979;
    } else {

    }

  }
#line 1259
  if (((int )*bp != 32 && (int )*bp != 10) && (int )((signed char )*bp) != 0) {
#line 1260
    return (-1);
  } else {

  }
#line 1261
  goto ldv_39983;
  ldv_39982: 
#line 1261
  bp = bp + 1;
  ldv_39983: ;
#line 1261
  if ((int )((signed char )*bp) == 32) {
#line 1263
    goto ldv_39982;
  } else {

  }
#line 1262
  *bpp = bp;
#line 1263
  *dest = 0;
#line 1264
  return (len);
}
}
#line 1280 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void *c_start(struct seq_file *m , loff_t *pos ) 
{ 
  loff_t n ;
  unsigned int hash ;
  unsigned int entry ;
  struct cache_head *ch ;
  struct cache_detail *cd ;
  loff_t tmp ;
  unsigned int tmp___0 ;

  {
  {
#line 1283
  n = *pos;
#line 1286
  cd = ((struct handle *)m->private)->cd;
#line 1289
  _raw_read_lock(& cd->hash_lock);
#line 1290
  tmp = n;
#line 1290
  n = n - 1LL;
  }
#line 1290
  if (tmp == 0LL) {
#line 1291
    return ((void *)1);
  } else {

  }
#line 1292
  hash = (unsigned int )(n >> 32);
#line 1293
  entry = (unsigned int )n;
#line 1295
  ch = *(cd->hash_table + (unsigned long )hash);
#line 1295
  goto ldv_40005;
  ldv_40004: 
#line 1296
  tmp___0 = entry;
#line 1296
  entry = entry - 1U;
#line 1296
  if (tmp___0 == 0U) {
#line 1297
    return ((void *)ch);
  } else {

  }
#line 1295
  ch = ch->next;
  ldv_40005: ;
#line 1295
  if ((unsigned long )ch != (unsigned long )((struct cache_head *)0)) {
#line 1297
    goto ldv_40004;
  } else {

  }
#line 1298
  n = n & -4294967296LL;
  ldv_40007: 
#line 1300
  hash = hash + 1U;
#line 1301
  n = n + 4294967296LL;
#line 1303
  if (hash < (unsigned int )cd->hash_size && (unsigned long )*(cd->hash_table + (unsigned long )hash) == (unsigned long )((struct cache_head *)0)) {
#line 1305
    goto ldv_40007;
  } else {

  }

#line 1304
  if (hash >= (unsigned int )cd->hash_size) {
#line 1305
    return ((void *)0);
  } else {

  }
#line 1306
  *pos = n + 1LL;
#line 1307
  return ((void *)*(cd->hash_table + (unsigned long )hash));
}
}
#line 1310 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void *c_next(struct seq_file *m , void *p , loff_t *pos ) 
{ 
  struct cache_head *ch ;
  int hash ;
  struct cache_detail *cd ;

  {
#line 1312
  ch = (struct cache_head *)p;
#line 1313
  hash = (int )(*pos >> 32);
#line 1314
  cd = ((struct handle *)m->private)->cd;
#line 1316
  if ((unsigned long )p == (unsigned long )((void *)1)) {
#line 1317
    hash = 0;
  } else
#line 1318
  if ((unsigned long )ch->next == (unsigned long )((struct cache_head *)0)) {
#line 1319
    hash = hash + 1;
#line 1320
    *pos = *pos + 4294967296LL;
  } else {
#line 1322
    *pos = *pos + 1LL;
#line 1323
    return ((void *)ch->next);
  }
#line 1325
  *pos = *pos & -4294967296LL;
#line 1326
  goto ldv_40018;
  ldv_40017: 
#line 1328
  hash = hash + 1;
#line 1329
  *pos = *pos + 4294967296LL;
  ldv_40018: ;
#line 1326
  if (hash < cd->hash_size && (unsigned long )*(cd->hash_table + (unsigned long )hash) == (unsigned long )((struct cache_head *)0)) {
#line 1329
    goto ldv_40017;
  } else {

  }

#line 1331
  if (hash >= cd->hash_size) {
#line 1332
    return ((void *)0);
  } else {

  }
#line 1333
  *pos = *pos + 1LL;
#line 1334
  return ((void *)*(cd->hash_table + (unsigned long )hash));
}
}
#line 1337 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void c_stop(struct seq_file *m , void *p ) 
{ 
  struct cache_detail *cd ;

  {
  {
#line 1340
  cd = ((struct handle *)m->private)->cd;
#line 1341
  _raw_read_unlock(& cd->hash_lock);
  }
#line 1342
  return;
}
}
#line 1344 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int c_show(struct seq_file *m , void *p ) 
{ 
  struct cache_head *cp ;
  struct cache_detail *cd ;
  int tmp ;
  int tmp___0 ;
  time_t tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1346
  cp = (struct cache_head *)p;
#line 1347
  cd = ((struct handle *)m->private)->cd;
#line 1349
  if ((unsigned long )p == (unsigned long )((void *)1)) {
    {
#line 1350
    tmp = (*(cd->cache_show))(m, cd, (struct cache_head *)0);
    }
#line 1350
    return (tmp);
  } else {

  }
  {
#line 1352
  tmp___2 = __builtin_expect((rpc_debug & 2048U) != 0U, 0L);
  }
#line 1352
  if (tmp___2 != 0L) {
    {
#line 1353
    tmp___0 = atomic_read((atomic_t const   *)(& cp->ref.refcount));
#line 1353
    tmp___1 = convert_to_wallclock(cp->expiry_time);
#line 1353
    seq_printf(m, "# expiry=%ld refcnt=%d flags=%lx\n", tmp___1, tmp___0, cp->flags);
    }
  } else {

  }
  {
#line 1356
  cache_get(cp);
#line 1357
  tmp___4 = cache_check(cd, cp, (struct cache_req *)0);
  }
#line 1357
  if (tmp___4 != 0) {
    {
#line 1359
    seq_printf(m, "# ");
    }
  } else {
    {
#line 1361
    tmp___3 = cache_is_expired(cd, cp);
    }
#line 1361
    if (tmp___3 != 0) {
      {
#line 1362
      seq_printf(m, "# ");
      }
    } else {

    }
    {
#line 1363
    cache_put(cp, cd);
    }
  }
  {
#line 1366
  tmp___5 = (*(cd->cache_show))(m, cd, cp);
  }
#line 1366
  return (tmp___5);
}
}
#line 1369 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct seq_operations  const  cache_content_op  =    {& c_start, & c_stop, & c_next, & c_show};
#line 1376 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int content_open(struct inode *inode , struct file *file , struct cache_detail *cd ) 
{ 
  struct handle *han ;
  bool tmp ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 1381
  if ((unsigned long )cd == (unsigned long )((struct cache_detail *)0)) {
#line 1382
    return (-13);
  } else {
    {
#line 1381
    tmp = ldv_try_module_get_14___1(cd->owner);
    }
#line 1381
    if (tmp) {
#line 1381
      tmp___0 = 0;
    } else {
#line 1381
      tmp___0 = 1;
    }
#line 1381
    if (tmp___0) {
#line 1382
      return (-13);
    } else {

    }
  }
  {
#line 1383
  tmp___1 = __seq_open_private(file, & cache_content_op, 8);
#line 1383
  han = (struct handle *)tmp___1;
  }
#line 1384
  if ((unsigned long )han == (unsigned long )((struct handle *)0)) {
    {
#line 1385
    ldv_module_put_15___0(cd->owner);
    }
#line 1386
    return (-12);
  } else {

  }
#line 1389
  han->cd = cd;
#line 1390
  return (0);
}
}
#line 1393 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int content_release(struct inode *inode , struct file *file , struct cache_detail *cd ) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 1396
  tmp = ldv_seq_release_private_16(inode, file);
#line 1396
  ret = tmp;
#line 1397
  ldv_module_put_17(cd->owner);
  }
#line 1398
  return (ret);
}
}
#line 1401 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int open_flush(struct inode *inode , struct file *file , struct cache_detail *cd ) 
{ 
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1404
  if ((unsigned long )cd == (unsigned long )((struct cache_detail *)0)) {
#line 1405
    return (-13);
  } else {
    {
#line 1404
    tmp = ldv_try_module_get_18(cd->owner);
    }
#line 1404
    if (tmp) {
#line 1404
      tmp___0 = 0;
    } else {
#line 1404
      tmp___0 = 1;
    }
#line 1404
    if (tmp___0) {
#line 1405
      return (-13);
    } else {

    }
  }
  {
#line 1406
  tmp___1 = ldv_nonseekable_open_19(inode, file);
  }
#line 1406
  return (tmp___1);
}
}
#line 1409 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int release_flush(struct inode *inode , struct file *file , struct cache_detail *cd ) 
{ 


  {
  {
#line 1412
  ldv_module_put_20(cd->owner);
  }
#line 1413
  return (0);
}
}
#line 1416 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t read_flush(struct file *file , char *buf , size_t count , loff_t *ppos ,
                          struct cache_detail *cd ) 
{ 
  char tbuf[22U] ;
  unsigned long p ;
  size_t len ;
  time_t tmp ;
  int tmp___0 ;

  {
  {
#line 1421
  p = (unsigned long )*ppos;
#line 1424
  tmp = convert_to_wallclock(cd->flush_time);
#line 1424
  snprintf((char *)(& tbuf), 22UL, "%lu\n", tmp);
#line 1425
  len = strlen((char const   *)(& tbuf));
  }
#line 1426
  if (p >= len) {
#line 1427
    return (0L);
  } else {

  }
#line 1428
  len = len - p;
#line 1429
  if (len > count) {
#line 1430
    len = count;
  } else {

  }
  {
#line 1431
  tmp___0 = copy_to_user((void *)buf, (void const   *)((char *)(& tbuf) + p), (unsigned int )len);
  }
#line 1431
  if (tmp___0 != 0) {
#line 1432
    return (-14L);
  } else {

  }
#line 1433
  *ppos = (loff_t )((unsigned long long )*ppos + (unsigned long long )len);
#line 1434
  return ((ssize_t )len);
}
}
#line 1437 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t write_flush(struct file *file , char const   *buf , size_t count ,
                           loff_t *ppos , struct cache_detail *cd ) 
{ 
  char tbuf[20U] ;
  char *bp ;
  char *ep ;
  unsigned long tmp ;

  {
#line 1444
  if (*ppos != 0LL || count > 19UL) {
#line 1445
    return (-22L);
  } else {

  }
  {
#line 1446
  tmp = copy_from_user((void *)(& tbuf), (void const   *)buf, count);
  }
#line 1446
  if (tmp != 0UL) {
#line 1447
    return (-14L);
  } else {

  }
  {
#line 1448
  tbuf[count] = 0;
#line 1449
  simple_strtoul((char const   *)(& tbuf), & ep, 0U);
  }
#line 1450
  if ((int )*ep != 0 && (int )*ep != 10) {
#line 1451
    return (-22L);
  } else {

  }
  {
#line 1453
  bp = (char *)(& tbuf);
#line 1454
  cd->flush_time = get_expiry(& bp);
#line 1455
  cd->nextcheck = seconds_since_boot();
#line 1456
  cache_flush();
#line 1458
  *ppos = (loff_t )((unsigned long long )*ppos + (unsigned long long )count);
  }
#line 1459
  return ((ssize_t )count);
}
}
#line 1462 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_read_procfs(struct file *filp , char *buf , size_t count , loff_t *ppos ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  void *tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 1465
  tmp = file_inode(filp);
#line 1465
  tmp___0 = PDE_DATA((struct inode  const  *)tmp);
#line 1465
  cd = (struct cache_detail *)tmp___0;
#line 1467
  tmp___1 = cache_read(filp, buf, count, ppos, cd);
  }
#line 1467
  return (tmp___1);
}
}
#line 1470 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_write_procfs(struct file *filp , char const   *buf , size_t count ,
                                  loff_t *ppos ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  void *tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 1473
  tmp = file_inode(filp);
#line 1473
  tmp___0 = PDE_DATA((struct inode  const  *)tmp);
#line 1473
  cd = (struct cache_detail *)tmp___0;
#line 1475
  tmp___1 = cache_write(filp, buf, count, ppos, cd);
  }
#line 1475
  return (tmp___1);
}
}
#line 1478 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static unsigned int cache_poll_procfs(struct file *filp , poll_table *wait ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  void *tmp___0 ;
  unsigned int tmp___1 ;

  {
  {
#line 1480
  tmp = file_inode(filp);
#line 1480
  tmp___0 = PDE_DATA((struct inode  const  *)tmp);
#line 1480
  cd = (struct cache_detail *)tmp___0;
#line 1482
  tmp___1 = cache_poll(filp, wait, cd);
  }
#line 1482
  return (tmp___1);
}
}
#line 1485 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static long cache_ioctl_procfs(struct file *filp , unsigned int cmd , unsigned long arg ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  struct cache_detail *cd ;
  void *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1488
  tmp = file_inode(filp);
#line 1488
  inode = tmp;
#line 1489
  tmp___0 = PDE_DATA((struct inode  const  *)inode);
#line 1489
  cd = (struct cache_detail *)tmp___0;
#line 1491
  tmp___1 = cache_ioctl(inode, filp, cmd, arg, cd);
  }
#line 1491
  return ((long )tmp___1);
}
}
#line 1494 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_open_procfs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 1496
  tmp = PDE_DATA((struct inode  const  *)inode);
#line 1496
  cd = (struct cache_detail *)tmp;
#line 1498
  tmp___0 = cache_open(inode, filp, cd);
  }
#line 1498
  return (tmp___0);
}
}
#line 1501 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_release_procfs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 1503
  tmp = PDE_DATA((struct inode  const  *)inode);
#line 1503
  cd = (struct cache_detail *)tmp;
#line 1505
  tmp___0 = cache_release(inode, filp, cd);
  }
#line 1505
  return (tmp___0);
}
}
#line 1508 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct file_operations  const  cache_file_operations_procfs  = 
#line 1508
     {& __this_module, & no_llseek, & cache_read_procfs, & cache_write_procfs, 0, 0,
    0, & cache_poll_procfs, & cache_ioctl_procfs, 0, 0, & cache_open_procfs, 0, & cache_release_procfs,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 1519 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int content_open_procfs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 1521
  tmp = PDE_DATA((struct inode  const  *)inode);
#line 1521
  cd = (struct cache_detail *)tmp;
#line 1523
  tmp___0 = content_open(inode, filp, cd);
  }
#line 1523
  return (tmp___0);
}
}
#line 1526 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int content_release_procfs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 1528
  tmp = PDE_DATA((struct inode  const  *)inode);
#line 1528
  cd = (struct cache_detail *)tmp;
#line 1530
  tmp___0 = content_release(inode, filp, cd);
  }
#line 1530
  return (tmp___0);
}
}
#line 1533 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct file_operations  const  content_file_operations_procfs  = 
#line 1533
     {0, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & content_open_procfs, 0,
    & content_release_procfs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 1540 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int open_flush_procfs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 1542
  tmp = PDE_DATA((struct inode  const  *)inode);
#line 1542
  cd = (struct cache_detail *)tmp;
#line 1544
  tmp___0 = open_flush(inode, filp, cd);
  }
#line 1544
  return (tmp___0);
}
}
#line 1547 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int release_flush_procfs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 1549
  tmp = PDE_DATA((struct inode  const  *)inode);
#line 1549
  cd = (struct cache_detail *)tmp;
#line 1551
  tmp___0 = release_flush(inode, filp, cd);
  }
#line 1551
  return (tmp___0);
}
}
#line 1554 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t read_flush_procfs(struct file *filp , char *buf , size_t count , loff_t *ppos ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  void *tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 1557
  tmp = file_inode(filp);
#line 1557
  tmp___0 = PDE_DATA((struct inode  const  *)tmp);
#line 1557
  cd = (struct cache_detail *)tmp___0;
#line 1559
  tmp___1 = read_flush(filp, buf, count, ppos, cd);
  }
#line 1559
  return (tmp___1);
}
}
#line 1562 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t write_flush_procfs(struct file *filp , char const   *buf , size_t count ,
                                  loff_t *ppos ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  void *tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 1566
  tmp = file_inode(filp);
#line 1566
  tmp___0 = PDE_DATA((struct inode  const  *)tmp);
#line 1566
  cd = (struct cache_detail *)tmp___0;
#line 1568
  tmp___1 = write_flush(filp, buf, count, ppos, cd);
  }
#line 1568
  return (tmp___1);
}
}
#line 1571 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static struct file_operations  const  cache_flush_operations_procfs  = 
#line 1571
     {0, & no_llseek, & read_flush_procfs, & write_flush_procfs, 0, 0, 0, 0, 0, 0, 0,
    & open_flush_procfs, 0, & release_flush_procfs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0};
#line 1579 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static void remove_cache_proc_entries(struct cache_detail *cd , struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;

  {
#line 1583
  if ((unsigned long )cd->u.procfs.proc_ent == (unsigned long )((struct proc_dir_entry *)0)) {
#line 1584
    return;
  } else {

  }
#line 1585
  if ((unsigned long )cd->u.procfs.flush_ent != (unsigned long )((struct proc_dir_entry *)0)) {
    {
#line 1586
    remove_proc_entry("flush", cd->u.procfs.proc_ent);
    }
  } else {

  }
#line 1587
  if ((unsigned long )cd->u.procfs.channel_ent != (unsigned long )((struct proc_dir_entry *)0)) {
    {
#line 1588
    remove_proc_entry("channel", cd->u.procfs.proc_ent);
    }
  } else {

  }
#line 1589
  if ((unsigned long )cd->u.procfs.content_ent != (unsigned long )((struct proc_dir_entry *)0)) {
    {
#line 1590
    remove_proc_entry("content", cd->u.procfs.proc_ent);
    }
  } else {

  }
  {
#line 1591
  cd->u.procfs.proc_ent = (struct proc_dir_entry *)0;
#line 1592
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 1592
  sn = (struct sunrpc_net *)tmp;
#line 1593
  remove_proc_entry((char const   *)cd->name, sn->proc_net_rpc);
  }
#line 1594
  return;
}
}
#line 1597 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int create_cache_proc_entries(struct cache_detail *cd , struct net *net ) 
{ 
  struct proc_dir_entry *p ;
  struct sunrpc_net *sn ;
  void *tmp ;

  {
  {
#line 1602
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 1602
  sn = (struct sunrpc_net *)tmp;
#line 1603
  cd->u.procfs.proc_ent = proc_mkdir((char const   *)cd->name, sn->proc_net_rpc);
  }
#line 1604
  if ((unsigned long )cd->u.procfs.proc_ent == (unsigned long )((struct proc_dir_entry *)0)) {
#line 1605
    goto out_nomem;
  } else {

  }
  {
#line 1606
  cd->u.procfs.channel_ent = (struct proc_dir_entry *)0;
#line 1607
  cd->u.procfs.content_ent = (struct proc_dir_entry *)0;
#line 1609
  p = proc_create_data("flush", 33152, cd->u.procfs.proc_ent, & cache_flush_operations_procfs,
                       (void *)cd);
#line 1612
  cd->u.procfs.flush_ent = p;
  }
#line 1613
  if ((unsigned long )p == (unsigned long )((struct proc_dir_entry *)0)) {
#line 1614
    goto out_nomem;
  } else {

  }
#line 1616
  if ((unsigned long )cd->cache_request != (unsigned long )((void (*)(struct cache_detail * ,
                                                                      struct cache_head * ,
                                                                      char ** , int * ))0) || (unsigned long )cd->cache_parse != (unsigned long )((int (*)(struct cache_detail * ,
                                                                                                                                                           char * ,
                                                                                                                                                           int  ))0)) {
    {
#line 1617
    p = proc_create_data("channel", 33152, cd->u.procfs.proc_ent, & cache_file_operations_procfs,
                         (void *)cd);
#line 1620
    cd->u.procfs.channel_ent = p;
    }
#line 1621
    if ((unsigned long )p == (unsigned long )((struct proc_dir_entry *)0)) {
#line 1622
      goto out_nomem;
    } else {

    }
  } else {

  }
#line 1624
  if ((unsigned long )cd->cache_show != (unsigned long )((int (*)(struct seq_file * ,
                                                                  struct cache_detail * ,
                                                                  struct cache_head * ))0)) {
    {
#line 1625
    p = proc_create_data("content", 33024, cd->u.procfs.proc_ent, & content_file_operations_procfs,
                         (void *)cd);
#line 1628
    cd->u.procfs.content_ent = p;
    }
#line 1629
    if ((unsigned long )p == (unsigned long )((struct proc_dir_entry *)0)) {
#line 1630
      goto out_nomem;
    } else {

    }
  } else {

  }
#line 1632
  return (0);
  out_nomem: 
  {
#line 1634
  remove_cache_proc_entries(cd, net);
  }
#line 1635
  return (-12);
}
}
#line 1644 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void cache_initialize(void) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;

  {
  {
#line 1646
  __init_work(& cache_cleaner.work, 0);
#line 1646
  __constr_expr_0.counter = 137438953408L;
#line 1646
  cache_cleaner.work.data = __constr_expr_0;
#line 1646
  lockdep_init_map(& cache_cleaner.work.lockdep_map, "(&(&cache_cleaner)->work)",
                   & __key, 0);
#line 1646
  INIT_LIST_HEAD(& cache_cleaner.work.entry);
#line 1646
  cache_cleaner.work.func = & do_cache_clean;
#line 1646
  init_timer_key(& cache_cleaner.timer, 3U, "(&(&cache_cleaner)->timer)", & __key___0);
#line 1646
  cache_cleaner.timer.function = & delayed_work_timer_fn;
#line 1646
  cache_cleaner.timer.data = (unsigned long )(& cache_cleaner);
  }
#line 1647
  return;
}
}
#line 1649 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
int cache_register_net(struct cache_detail *cd , struct net *net ) 
{ 
  int ret ;

  {
  {
#line 1653
  sunrpc_init_cache_detail(cd);
#line 1654
  ret = create_cache_proc_entries(cd, net);
  }
#line 1655
  if (ret != 0) {
    {
#line 1656
    sunrpc_destroy_cache_detail(cd);
    }
  } else {

  }
#line 1657
  return (ret);
}
}
#line 1661 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void cache_unregister_net(struct cache_detail *cd , struct net *net ) 
{ 


  {
  {
#line 1663
  remove_cache_proc_entries(cd, net);
#line 1664
  sunrpc_destroy_cache_detail(cd);
  }
#line 1665
  return;
}
}
#line 1668 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct cache_detail *cache_create_net(struct cache_detail *tmpl , struct net *net ) 
{ 
  struct cache_detail *cd ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
  {
#line 1672
  tmp = kmemdup((void const   *)tmpl, 312UL, 208U);
#line 1672
  cd = (struct cache_detail *)tmp;
  }
#line 1673
  if ((unsigned long )cd == (unsigned long )((struct cache_detail *)0)) {
    {
#line 1674
    tmp___0 = ERR_PTR(-12L);
    }
#line 1674
    return ((struct cache_detail *)tmp___0);
  } else {

  }
  {
#line 1676
  tmp___1 = kzalloc((unsigned long )cd->hash_size * 8UL, 208U);
#line 1676
  cd->hash_table = (struct cache_head **)tmp___1;
  }
#line 1678
  if ((unsigned long )cd->hash_table == (unsigned long )((struct cache_head **)0)) {
    {
#line 1679
    kfree((void const   *)cd);
#line 1680
    tmp___2 = ERR_PTR(-12L);
    }
#line 1680
    return ((struct cache_detail *)tmp___2);
  } else {

  }
#line 1682
  cd->net = net;
#line 1683
  return (cd);
}
}
#line 1687 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void cache_destroy_net(struct cache_detail *cd , struct net *net ) 
{ 


  {
  {
#line 1689
  kfree((void const   *)cd->hash_table);
#line 1690
  kfree((void const   *)cd);
  }
#line 1691
  return;
}
}
#line 1694 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_read_pipefs(struct file *filp , char *buf , size_t count , loff_t *ppos ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  struct rpc_inode *tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 1697
  tmp = file_inode(filp);
#line 1697
  tmp___0 = RPC_I(tmp);
#line 1697
  cd = (struct cache_detail *)tmp___0->private;
#line 1699
  tmp___1 = cache_read(filp, buf, count, ppos, cd);
  }
#line 1699
  return (tmp___1);
}
}
#line 1702 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t cache_write_pipefs(struct file *filp , char const   *buf , size_t count ,
                                  loff_t *ppos ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  struct rpc_inode *tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 1705
  tmp = file_inode(filp);
#line 1705
  tmp___0 = RPC_I(tmp);
#line 1705
  cd = (struct cache_detail *)tmp___0->private;
#line 1707
  tmp___1 = cache_write(filp, buf, count, ppos, cd);
  }
#line 1707
  return (tmp___1);
}
}
#line 1710 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static unsigned int cache_poll_pipefs(struct file *filp , poll_table *wait ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  struct rpc_inode *tmp___0 ;
  unsigned int tmp___1 ;

  {
  {
#line 1712
  tmp = file_inode(filp);
#line 1712
  tmp___0 = RPC_I(tmp);
#line 1712
  cd = (struct cache_detail *)tmp___0->private;
#line 1714
  tmp___1 = cache_poll(filp, wait, cd);
  }
#line 1714
  return (tmp___1);
}
}
#line 1717 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static long cache_ioctl_pipefs(struct file *filp , unsigned int cmd , unsigned long arg ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  struct cache_detail *cd ;
  struct rpc_inode *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 1720
  tmp = file_inode(filp);
#line 1720
  inode = tmp;
#line 1721
  tmp___0 = RPC_I(inode);
#line 1721
  cd = (struct cache_detail *)tmp___0->private;
#line 1723
  tmp___1 = cache_ioctl(inode, filp, cmd, arg, cd);
  }
#line 1723
  return ((long )tmp___1);
}
}
#line 1726 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_open_pipefs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  struct rpc_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 1728
  tmp = RPC_I(inode);
#line 1728
  cd = (struct cache_detail *)tmp->private;
#line 1730
  tmp___0 = cache_open(inode, filp, cd);
  }
#line 1730
  return (tmp___0);
}
}
#line 1733 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int cache_release_pipefs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  struct rpc_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 1735
  tmp = RPC_I(inode);
#line 1735
  cd = (struct cache_detail *)tmp->private;
#line 1737
  tmp___0 = cache_release(inode, filp, cd);
  }
#line 1737
  return (tmp___0);
}
}
#line 1740 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct file_operations  const  cache_file_operations_pipefs  = 
#line 1740
     {& __this_module, & no_llseek, & cache_read_pipefs, & cache_write_pipefs, 0, 0,
    0, & cache_poll_pipefs, & cache_ioctl_pipefs, 0, 0, & cache_open_pipefs, 0, & cache_release_pipefs,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 1751 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int content_open_pipefs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  struct rpc_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 1753
  tmp = RPC_I(inode);
#line 1753
  cd = (struct cache_detail *)tmp->private;
#line 1755
  tmp___0 = content_open(inode, filp, cd);
  }
#line 1755
  return (tmp___0);
}
}
#line 1758 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int content_release_pipefs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  struct rpc_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 1760
  tmp = RPC_I(inode);
#line 1760
  cd = (struct cache_detail *)tmp->private;
#line 1762
  tmp___0 = content_release(inode, filp, cd);
  }
#line 1762
  return (tmp___0);
}
}
#line 1765 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct file_operations  const  content_file_operations_pipefs  = 
#line 1765
     {0, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & content_open_pipefs, 0,
    & content_release_pipefs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 1772 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int open_flush_pipefs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  struct rpc_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 1774
  tmp = RPC_I(inode);
#line 1774
  cd = (struct cache_detail *)tmp->private;
#line 1776
  tmp___0 = open_flush(inode, filp, cd);
  }
#line 1776
  return (tmp___0);
}
}
#line 1779 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static int release_flush_pipefs(struct inode *inode , struct file *filp ) 
{ 
  struct cache_detail *cd ;
  struct rpc_inode *tmp ;
  int tmp___0 ;

  {
  {
#line 1781
  tmp = RPC_I(inode);
#line 1781
  cd = (struct cache_detail *)tmp->private;
#line 1783
  tmp___0 = release_flush(inode, filp, cd);
  }
#line 1783
  return (tmp___0);
}
}
#line 1786 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t read_flush_pipefs(struct file *filp , char *buf , size_t count , loff_t *ppos ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  struct rpc_inode *tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 1789
  tmp = file_inode(filp);
#line 1789
  tmp___0 = RPC_I(tmp);
#line 1789
  cd = (struct cache_detail *)tmp___0->private;
#line 1791
  tmp___1 = read_flush(filp, buf, count, ppos, cd);
  }
#line 1791
  return (tmp___1);
}
}
#line 1794 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
static ssize_t write_flush_pipefs(struct file *filp , char const   *buf , size_t count ,
                                  loff_t *ppos ) 
{ 
  struct cache_detail *cd ;
  struct inode *tmp ;
  struct rpc_inode *tmp___0 ;
  ssize_t tmp___1 ;

  {
  {
#line 1798
  tmp = file_inode(filp);
#line 1798
  tmp___0 = RPC_I(tmp);
#line 1798
  cd = (struct cache_detail *)tmp___0->private;
#line 1800
  tmp___1 = write_flush(filp, buf, count, ppos, cd);
  }
#line 1800
  return (tmp___1);
}
}
#line 1803 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
struct file_operations  const  cache_flush_operations_pipefs  = 
#line 1803
     {0, & no_llseek, & read_flush_pipefs, & write_flush_pipefs, 0, 0, 0, 0, 0, 0, 0,
    & open_flush_pipefs, 0, & release_flush_pipefs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0};
#line 1811 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
int sunrpc_cache_register_pipefs(struct dentry *parent , char const   *name , umode_t umode ,
                                 struct cache_detail *cd ) 
{ 
  struct qstr q ;
  struct dentry *dir ;
  int ret ;
  size_t tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 1817
  ret = 0;
#line 1819
  q.name = (unsigned char const   *)name;
#line 1820
  tmp = strlen(name);
#line 1820
  q.__annonCompField41.__annonCompField40.len = (u32 )tmp;
#line 1821
  q.__annonCompField41.__annonCompField40.hash = full_name_hash(q.name, q.__annonCompField41.__annonCompField40.len);
#line 1822
  dir = rpc_create_cache_dir(parent, & q, (int )umode, cd);
#line 1823
  tmp___1 = IS_ERR((void const   *)dir);
  }
#line 1823
  if (tmp___1 == 0L) {
#line 1824
    cd->u.pipefs.dir = dir;
  } else {
    {
#line 1826
    tmp___0 = PTR_ERR((void const   *)dir);
#line 1826
    ret = (int )tmp___0;
    }
  }
#line 1827
  return (ret);
}
}
#line 1831 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/cache.c"
void sunrpc_cache_unregister_pipefs(struct cache_detail *cd ) 
{ 


  {
  {
#line 1833
  rpc_remove_cache_dir(cd->u.pipefs.dir);
#line 1834
  cd->u.pipefs.dir = (struct dentry *)0;
  }
#line 1835
  return;
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_2_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 80
void ldv_character_driver_scenario_callback_2_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 81
void ldv_character_driver_scenario_callback_2_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) ;
#line 82
void ldv_character_driver_scenario_callback_2_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) ;
#line 83
void ldv_character_driver_scenario_callback_3_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 84
void ldv_character_driver_scenario_callback_3_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 85
void ldv_character_driver_scenario_callback_3_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) ;
#line 86
void ldv_character_driver_scenario_callback_3_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) ;
#line 87
void ldv_character_driver_scenario_callback_4_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 88
void ldv_character_driver_scenario_callback_4_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 89
void ldv_character_driver_scenario_callback_4_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) ;
#line 90
void ldv_character_driver_scenario_callback_4_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) ;
#line 91
void ldv_character_driver_scenario_callback_5_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 92
void ldv_character_driver_scenario_callback_5_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 93
void ldv_character_driver_scenario_callback_5_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) ;
#line 94
void ldv_character_driver_scenario_callback_5_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) ;
#line 95
void ldv_character_driver_scenario_callback_6_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 96
void ldv_character_driver_scenario_callback_6_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 97
void ldv_character_driver_scenario_callback_6_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) ;
#line 98
void ldv_character_driver_scenario_callback_6_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) ;
#line 99
void ldv_character_driver_scenario_callback_7_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 100
void ldv_character_driver_scenario_callback_7_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 101
void ldv_character_driver_scenario_callback_7_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) ;
#line 102
void ldv_character_driver_scenario_callback_7_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) ;
#line 103
int ldv_character_driver_scenario_probe_2_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 104
int ldv_character_driver_scenario_probe_3_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 105
int ldv_character_driver_scenario_probe_4_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 106
int ldv_character_driver_scenario_probe_5_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 107
int ldv_character_driver_scenario_probe_6_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 108
int ldv_character_driver_scenario_probe_7_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 109
void ldv_character_driver_scenario_release_2_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 110
void ldv_character_driver_scenario_release_3_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 111
void ldv_character_driver_scenario_release_4_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 112
void ldv_character_driver_scenario_release_5_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 113
void ldv_character_driver_scenario_release_6_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 114
void ldv_character_driver_scenario_release_7_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 115
void ldv_character_driver_scenario_write_2_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 116
void ldv_character_driver_scenario_write_3_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 117
void ldv_character_driver_scenario_write_4_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 118
void ldv_character_driver_scenario_write_5_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 119
void ldv_character_driver_scenario_write_6_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 120
void ldv_character_driver_scenario_write_7_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 121
void ldv_dispatch_deregister_19_1(struct seq_file *arg0 ) ;
#line 127
int ldv_emg_seq_release_private(struct inode *arg0 , struct file *arg1 ) ;
#line 128
void ldv_traverse_kernel_items_scenario_11(void *arg0 ) ;
#line 130
void *ldv_traverse_kernel_items_scenario_next_11_7(void *(*arg0)(struct seq_file * ,
                                                                 void * , loff_t * ) ,
                                                   struct seq_file *arg1 , void *arg2 ,
                                                   long long *arg3 ) ;
#line 131
int ldv_traverse_kernel_items_scenario_show_11_9(pid_t (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) ;
#line 132
void *ldv_traverse_kernel_items_scenario_start_11_14(void *(*arg0)(struct seq_file * ,
                                                                   loff_t * ) , struct seq_file *arg1 ,
                                                     long long *arg2 ) ;
#line 133
void ldv_traverse_kernel_items_scenario_stop_11_2(void (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                  void *arg2 ) ;
#line 134
void ldv_traverse_kernel_items_scenario_stop_11_5(void (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                  void *arg2 ) ;
#line 142 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_2(void *arg0 ) 
{ 
  loff_t (*ldv_2_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  u32 (*ldv_2_callback_poll)(struct file * , poll_table * ) ;
  ssize_t (*ldv_2_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  ssize_t (*ldv_2_callback_unlocked_ioctl)(struct file * , u32  , size_t  ) ;
  struct file_operations *ldv_2_container_file_operations ;
  struct poll_table_struct *ldv_2_ldv_param_22_1_default ;
  char *ldv_2_ldv_param_25_1_default ;
  long long *ldv_2_ldv_param_25_3_default ;
  unsigned int ldv_2_ldv_param_28_1_default ;
  char *ldv_2_ldv_param_4_1_default ;
  long long *ldv_2_ldv_param_4_3_default ;
  long long ldv_2_ldv_param_5_1_default ;
  int ldv_2_ldv_param_5_2_default ;
  struct file *ldv_2_resource_file ;
  struct inode *ldv_2_resource_inode ;
  int ldv_2_ret_default ;
  size_t ldv_2_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 164
  ldv_2_ret_default = ldv_undef_int();
#line 166
  ldv_free(arg0);
#line 170
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 170
  ldv_2_container_file_operations = (struct file_operations *)tmp;
#line 174
  tmp___0 = ldv_xmalloc(360UL);
#line 174
  ldv_2_resource_file = (struct file *)tmp___0;
#line 175
  tmp___1 = ldv_xmalloc(1032UL);
#line 175
  ldv_2_resource_inode = (struct inode *)tmp___1;
#line 176
  tmp___2 = ldv_undef_int();
#line 176
  ldv_2_size_cnt_write_size = (size_t )tmp___2;
  }
#line 183
  goto ldv_main_2;
#line 185
  return;
  ldv_main_2: 
  {
#line 191
  tmp___4 = ldv_undef_int();
  }
#line 191
  if (tmp___4 != 0) {
    {
#line 194
    ldv_2_ret_default = ldv_character_driver_scenario_probe_2_13(ldv_2_container_file_operations->open,
                                                                 ldv_2_resource_inode,
                                                                 ldv_2_resource_file);
#line 196
    ldv_2_ret_default = ldv_filter_err_code(ldv_2_ret_default);
#line 199
    tmp___3 = ldv_undef_int();
    }
#line 199
    if (tmp___3 != 0) {
      {
#line 201
      __VERIFIER_assume(ldv_2_ret_default == 0);
      }
#line 208
      goto ldv_call_2;
    } else {
      {
#line 212
      __VERIFIER_assume(ldv_2_ret_default != 0);
      }
#line 219
      goto ldv_main_2;
    }
  } else {
    {
#line 224
    ldv_free((void *)ldv_2_resource_file);
#line 225
    ldv_free((void *)ldv_2_resource_inode);
#line 229
    ldv_free((void *)ldv_2_container_file_operations);
    }
#line 237
    return;
  }
#line 240
  return;
  ldv_call_2: 
  {
#line 246
  tmp___5 = ldv_undef_int();
  }
  {
#line 247
  if (tmp___5 == 1) {
#line 247
    goto case_1;
  } else {

  }
#line 276
  if (tmp___5 == 2) {
#line 276
    goto case_2;
  } else {

  }
#line 289
  if (tmp___5 == 3) {
#line 289
    goto case_3;
  } else {

  }
#line 354
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 249
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 249
  ldv_2_ldv_param_4_1_default = (char *)tmp___6;
#line 250
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 250
  ldv_2_ldv_param_4_3_default = (long long *)tmp___7;
#line 259
  __VERIFIER_assume(ldv_2_size_cnt_write_size <= 2147479552UL);
#line 261
  ldv_character_driver_scenario_write_2_4((ssize_t (*)(struct file * , char * , size_t  ,
                                                       loff_t * ))ldv_2_container_file_operations->write,
                                          ldv_2_resource_file, ldv_2_ldv_param_4_1_default,
                                          ldv_2_size_cnt_write_size, ldv_2_ldv_param_4_3_default);
#line 265
  ldv_free((void *)ldv_2_ldv_param_4_1_default);
#line 266
  ldv_free((void *)ldv_2_ldv_param_4_3_default);
  }
#line 273
  goto ldv_call_2;
  case_2: /* CIL Label */ 
  {
#line 279
  ldv_character_driver_scenario_release_2_2(ldv_2_container_file_operations->release,
                                            ldv_2_resource_inode, ldv_2_resource_file);
  }
#line 286
  goto ldv_main_2;
  case_3: /* CIL Label */ 
  {
#line 293
  tmp___8 = ldv_undef_int();
  }
  {
#line 294
  if (tmp___8 == 1) {
#line 294
    goto case_1___0;
  } else {

  }
#line 308
  if (tmp___8 == 2) {
#line 308
    goto case_2___0;
  } else {

  }
#line 326
  if (tmp___8 == 3) {
#line 326
    goto case_3___0;
  } else {

  }
#line 342
  if (tmp___8 == 4) {
#line 342
    goto case_4;
  } else {

  }
#line 350
  goto switch_default;
  case_1___0: /* CIL Label */ 
  {
#line 300
  ldv_character_driver_scenario_callback_2_28(ldv_2_callback_unlocked_ioctl, ldv_2_resource_file,
                                              ldv_2_ldv_param_28_1_default, ldv_2_size_cnt_write_size);
  }
#line 306
  goto ldv_40750;
  case_2___0: /* CIL Label */ 
  {
#line 310
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 310
  ldv_2_ldv_param_25_1_default = (char *)tmp___9;
#line 311
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 311
  ldv_2_ldv_param_25_3_default = (long long *)tmp___10;
#line 316
  ldv_character_driver_scenario_callback_2_25(ldv_2_callback_read, ldv_2_resource_file,
                                              ldv_2_ldv_param_25_1_default, ldv_2_size_cnt_write_size,
                                              ldv_2_ldv_param_25_3_default);
#line 320
  ldv_free((void *)ldv_2_ldv_param_25_1_default);
#line 321
  ldv_free((void *)ldv_2_ldv_param_25_3_default);
  }
#line 324
  goto ldv_40750;
  case_3___0: /* CIL Label */ 
  {
#line 328
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 328
  ldv_2_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
#line 333
  ldv_character_driver_scenario_callback_2_22(ldv_2_callback_poll, ldv_2_resource_file,
                                              ldv_2_ldv_param_22_1_default);
#line 337
  ldv_free((void *)ldv_2_ldv_param_22_1_default);
  }
#line 340
  goto ldv_40750;
  case_4: /* CIL Label */ 
  {
#line 345
  ldv_character_driver_scenario_callback_2_5(ldv_2_callback_llseek, ldv_2_resource_file,
                                             ldv_2_ldv_param_5_1_default, ldv_2_ldv_param_5_2_default);
  }
#line 348
  goto ldv_40750;
  switch_default: /* CIL Label */ 
  {
#line 350
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_40750: ;
#line 352
  goto ldv_40755;
  switch_default___0: /* CIL Label */ 
  {
#line 354
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_40755: ;
#line 363
  goto ldv_call_2;
#line 365
  return;
}
}
#line 370 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_3(void *arg0 ) 
{ 
  loff_t (*ldv_3_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  u32 (*ldv_3_callback_poll)(struct file * , poll_table * ) ;
  ssize_t (*ldv_3_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  ssize_t (*ldv_3_callback_unlocked_ioctl)(struct file * , u32  , size_t  ) ;
  struct file_operations *ldv_3_container_file_operations ;
  struct poll_table_struct *ldv_3_ldv_param_22_1_default ;
  char *ldv_3_ldv_param_25_1_default ;
  long long *ldv_3_ldv_param_25_3_default ;
  unsigned int ldv_3_ldv_param_28_1_default ;
  char *ldv_3_ldv_param_4_1_default ;
  long long *ldv_3_ldv_param_4_3_default ;
  long long ldv_3_ldv_param_5_1_default ;
  int ldv_3_ldv_param_5_2_default ;
  struct file *ldv_3_resource_file ;
  struct inode *ldv_3_resource_inode ;
  int ldv_3_ret_default ;
  size_t ldv_3_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 392
  ldv_3_ret_default = ldv_undef_int();
#line 394
  ldv_free(arg0);
#line 398
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 398
  ldv_3_container_file_operations = (struct file_operations *)tmp;
#line 402
  tmp___0 = ldv_xmalloc(360UL);
#line 402
  ldv_3_resource_file = (struct file *)tmp___0;
#line 403
  tmp___1 = ldv_xmalloc(1032UL);
#line 403
  ldv_3_resource_inode = (struct inode *)tmp___1;
#line 404
  tmp___2 = ldv_undef_int();
#line 404
  ldv_3_size_cnt_write_size = (size_t )tmp___2;
  }
#line 411
  goto ldv_main_3;
#line 413
  return;
  ldv_main_3: 
  {
#line 419
  tmp___4 = ldv_undef_int();
  }
#line 419
  if (tmp___4 != 0) {
    {
#line 422
    ldv_3_ret_default = ldv_character_driver_scenario_probe_3_13(ldv_3_container_file_operations->open,
                                                                 ldv_3_resource_inode,
                                                                 ldv_3_resource_file);
#line 424
    ldv_3_ret_default = ldv_filter_err_code(ldv_3_ret_default);
#line 427
    tmp___3 = ldv_undef_int();
    }
#line 427
    if (tmp___3 != 0) {
      {
#line 429
      __VERIFIER_assume(ldv_3_ret_default == 0);
      }
#line 436
      goto ldv_call_3;
    } else {
      {
#line 440
      __VERIFIER_assume(ldv_3_ret_default != 0);
      }
#line 447
      goto ldv_main_3;
    }
  } else {
    {
#line 452
    ldv_free((void *)ldv_3_resource_file);
#line 453
    ldv_free((void *)ldv_3_resource_inode);
#line 457
    ldv_free((void *)ldv_3_container_file_operations);
    }
#line 465
    return;
  }
#line 468
  return;
  ldv_call_3: 
  {
#line 474
  tmp___5 = ldv_undef_int();
  }
  {
#line 475
  if (tmp___5 == 1) {
#line 475
    goto case_1;
  } else {

  }
#line 504
  if (tmp___5 == 2) {
#line 504
    goto case_2;
  } else {

  }
#line 517
  if (tmp___5 == 3) {
#line 517
    goto case_3;
  } else {

  }
#line 582
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 477
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 477
  ldv_3_ldv_param_4_1_default = (char *)tmp___6;
#line 478
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 478
  ldv_3_ldv_param_4_3_default = (long long *)tmp___7;
#line 487
  __VERIFIER_assume(ldv_3_size_cnt_write_size <= 2147479552UL);
#line 489
  ldv_character_driver_scenario_write_3_4((ssize_t (*)(struct file * , char * , size_t  ,
                                                       loff_t * ))ldv_3_container_file_operations->write,
                                          ldv_3_resource_file, ldv_3_ldv_param_4_1_default,
                                          ldv_3_size_cnt_write_size, ldv_3_ldv_param_4_3_default);
#line 493
  ldv_free((void *)ldv_3_ldv_param_4_1_default);
#line 494
  ldv_free((void *)ldv_3_ldv_param_4_3_default);
  }
#line 501
  goto ldv_call_3;
  case_2: /* CIL Label */ 
  {
#line 507
  ldv_character_driver_scenario_release_3_2(ldv_3_container_file_operations->release,
                                            ldv_3_resource_inode, ldv_3_resource_file);
  }
#line 514
  goto ldv_main_3;
  case_3: /* CIL Label */ 
  {
#line 521
  tmp___8 = ldv_undef_int();
  }
  {
#line 522
  if (tmp___8 == 1) {
#line 522
    goto case_1___0;
  } else {

  }
#line 536
  if (tmp___8 == 2) {
#line 536
    goto case_2___0;
  } else {

  }
#line 554
  if (tmp___8 == 3) {
#line 554
    goto case_3___0;
  } else {

  }
#line 570
  if (tmp___8 == 4) {
#line 570
    goto case_4;
  } else {

  }
#line 578
  goto switch_default;
  case_1___0: /* CIL Label */ 
  {
#line 528
  ldv_character_driver_scenario_callback_3_28(ldv_3_callback_unlocked_ioctl, ldv_3_resource_file,
                                              ldv_3_ldv_param_28_1_default, ldv_3_size_cnt_write_size);
  }
#line 534
  goto ldv_40795;
  case_2___0: /* CIL Label */ 
  {
#line 538
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 538
  ldv_3_ldv_param_25_1_default = (char *)tmp___9;
#line 539
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 539
  ldv_3_ldv_param_25_3_default = (long long *)tmp___10;
#line 544
  ldv_character_driver_scenario_callback_3_25(ldv_3_callback_read, ldv_3_resource_file,
                                              ldv_3_ldv_param_25_1_default, ldv_3_size_cnt_write_size,
                                              ldv_3_ldv_param_25_3_default);
#line 548
  ldv_free((void *)ldv_3_ldv_param_25_1_default);
#line 549
  ldv_free((void *)ldv_3_ldv_param_25_3_default);
  }
#line 552
  goto ldv_40795;
  case_3___0: /* CIL Label */ 
  {
#line 556
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 556
  ldv_3_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
#line 561
  ldv_character_driver_scenario_callback_3_22(ldv_3_callback_poll, ldv_3_resource_file,
                                              ldv_3_ldv_param_22_1_default);
#line 565
  ldv_free((void *)ldv_3_ldv_param_22_1_default);
  }
#line 568
  goto ldv_40795;
  case_4: /* CIL Label */ 
  {
#line 573
  ldv_character_driver_scenario_callback_3_5(ldv_3_callback_llseek, ldv_3_resource_file,
                                             ldv_3_ldv_param_5_1_default, ldv_3_ldv_param_5_2_default);
  }
#line 576
  goto ldv_40795;
  switch_default: /* CIL Label */ 
  {
#line 578
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_40795: ;
#line 580
  goto ldv_40800;
  switch_default___0: /* CIL Label */ 
  {
#line 582
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_40800: ;
#line 591
  goto ldv_call_3;
#line 593
  return;
}
}
#line 598 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_4(void *arg0 ) 
{ 
  loff_t (*ldv_4_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  unsigned int (*ldv_4_callback_poll)(struct file * , struct poll_table_struct * ) ;
  ssize_t (*ldv_4_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_4_callback_unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
  struct file_operations *ldv_4_container_file_operations ;
  struct poll_table_struct *ldv_4_ldv_param_22_1_default ;
  char *ldv_4_ldv_param_25_1_default ;
  long long *ldv_4_ldv_param_25_3_default ;
  unsigned int ldv_4_ldv_param_28_1_default ;
  char *ldv_4_ldv_param_4_1_default ;
  long long *ldv_4_ldv_param_4_3_default ;
  long long ldv_4_ldv_param_5_1_default ;
  int ldv_4_ldv_param_5_2_default ;
  struct file *ldv_4_resource_file ;
  struct inode *ldv_4_resource_inode ;
  int ldv_4_ret_default ;
  size_t ldv_4_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 620
  ldv_4_ret_default = ldv_undef_int();
#line 622
  ldv_free(arg0);
#line 626
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 626
  ldv_4_container_file_operations = (struct file_operations *)tmp;
#line 630
  tmp___0 = ldv_xmalloc(360UL);
#line 630
  ldv_4_resource_file = (struct file *)tmp___0;
#line 631
  tmp___1 = ldv_xmalloc(1032UL);
#line 631
  ldv_4_resource_inode = (struct inode *)tmp___1;
#line 632
  tmp___2 = ldv_undef_int();
#line 632
  ldv_4_size_cnt_write_size = (size_t )tmp___2;
  }
#line 639
  goto ldv_main_4;
#line 641
  return;
  ldv_main_4: 
  {
#line 647
  tmp___4 = ldv_undef_int();
  }
#line 647
  if (tmp___4 != 0) {
    {
#line 650
    ldv_4_ret_default = ldv_character_driver_scenario_probe_4_13(ldv_4_container_file_operations->open,
                                                                 ldv_4_resource_inode,
                                                                 ldv_4_resource_file);
#line 652
    ldv_4_ret_default = ldv_filter_err_code(ldv_4_ret_default);
#line 655
    tmp___3 = ldv_undef_int();
    }
#line 655
    if (tmp___3 != 0) {
      {
#line 657
      __VERIFIER_assume(ldv_4_ret_default == 0);
      }
#line 664
      goto ldv_call_4;
    } else {
      {
#line 668
      __VERIFIER_assume(ldv_4_ret_default != 0);
      }
#line 675
      goto ldv_main_4;
    }
  } else {
    {
#line 680
    ldv_free((void *)ldv_4_resource_file);
#line 681
    ldv_free((void *)ldv_4_resource_inode);
#line 685
    ldv_free((void *)ldv_4_container_file_operations);
    }
#line 693
    return;
  }
#line 696
  return;
  ldv_call_4: 
  {
#line 702
  tmp___5 = ldv_undef_int();
  }
  {
#line 703
  if (tmp___5 == 1) {
#line 703
    goto case_1;
  } else {

  }
#line 732
  if (tmp___5 == 2) {
#line 732
    goto case_2;
  } else {

  }
#line 745
  if (tmp___5 == 3) {
#line 745
    goto case_3;
  } else {

  }
#line 814
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 705
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 705
  ldv_4_ldv_param_4_1_default = (char *)tmp___6;
#line 706
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 706
  ldv_4_ldv_param_4_3_default = (long long *)tmp___7;
#line 715
  __VERIFIER_assume(ldv_4_size_cnt_write_size <= 2147479552UL);
#line 717
  ldv_character_driver_scenario_write_4_4((ssize_t (*)(struct file * , char * , size_t  ,
                                                       loff_t * ))ldv_4_container_file_operations->write,
                                          ldv_4_resource_file, ldv_4_ldv_param_4_1_default,
                                          ldv_4_size_cnt_write_size, ldv_4_ldv_param_4_3_default);
#line 721
  ldv_free((void *)ldv_4_ldv_param_4_1_default);
#line 722
  ldv_free((void *)ldv_4_ldv_param_4_3_default);
  }
#line 729
  goto ldv_call_4;
  case_2: /* CIL Label */ 
  {
#line 735
  ldv_character_driver_scenario_release_4_2(ldv_4_container_file_operations->release,
                                            ldv_4_resource_inode, ldv_4_resource_file);
  }
#line 742
  goto ldv_main_4;
  case_3: /* CIL Label */ 
  {
#line 749
  tmp___8 = ldv_undef_int();
  }
  {
#line 750
  if (tmp___8 == 1) {
#line 750
    goto case_1___0;
  } else {

  }
#line 766
  if (tmp___8 == 2) {
#line 766
    goto case_2___0;
  } else {

  }
#line 784
  if (tmp___8 == 3) {
#line 784
    goto case_3___0;
  } else {

  }
#line 802
  if (tmp___8 == 4) {
#line 802
    goto case_4;
  } else {

  }
#line 810
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 755
  if ((unsigned long )ldv_4_callback_unlocked_ioctl != (unsigned long )((long (*)(struct file * ,
                                                                                  unsigned int  ,
                                                                                  unsigned long  ))0)) {
    {
#line 757
    ldv_character_driver_scenario_callback_4_28(ldv_4_callback_unlocked_ioctl, ldv_4_resource_file,
                                                ldv_4_ldv_param_28_1_default, ldv_4_size_cnt_write_size);
    }
  } else {

  }
#line 764
  goto ldv_40840;
  case_2___0: /* CIL Label */ 
  {
#line 768
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 768
  ldv_4_ldv_param_25_1_default = (char *)tmp___9;
#line 769
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 769
  ldv_4_ldv_param_25_3_default = (long long *)tmp___10;
#line 774
  ldv_character_driver_scenario_callback_4_25(ldv_4_callback_read, ldv_4_resource_file,
                                              ldv_4_ldv_param_25_1_default, ldv_4_size_cnt_write_size,
                                              ldv_4_ldv_param_25_3_default);
#line 778
  ldv_free((void *)ldv_4_ldv_param_25_1_default);
#line 779
  ldv_free((void *)ldv_4_ldv_param_25_3_default);
  }
#line 782
  goto ldv_40840;
  case_3___0: /* CIL Label */ 
  {
#line 786
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 786
  ldv_4_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
  }
#line 790
  if ((unsigned long )ldv_4_callback_poll != (unsigned long )((unsigned int (*)(struct file * ,
                                                                                struct poll_table_struct * ))0)) {
    {
#line 792
    ldv_character_driver_scenario_callback_4_22(ldv_4_callback_poll, ldv_4_resource_file,
                                                ldv_4_ldv_param_22_1_default);
    }
  } else {

  }
  {
#line 797
  ldv_free((void *)ldv_4_ldv_param_22_1_default);
  }
#line 800
  goto ldv_40840;
  case_4: /* CIL Label */ 
  {
#line 805
  ldv_character_driver_scenario_callback_4_5(ldv_4_callback_llseek, ldv_4_resource_file,
                                             ldv_4_ldv_param_5_1_default, ldv_4_ldv_param_5_2_default);
  }
#line 808
  goto ldv_40840;
  switch_default: /* CIL Label */ 
  {
#line 810
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_40840: ;
#line 812
  goto ldv_40845;
  switch_default___0: /* CIL Label */ 
  {
#line 814
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_40845: ;
#line 823
  goto ldv_call_4;
#line 825
  return;
}
}
#line 830 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_5(void *arg0 ) 
{ 
  loff_t (*ldv_5_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  unsigned int (*ldv_5_callback_poll)(struct file * , struct poll_table_struct * ) ;
  ssize_t (*ldv_5_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_5_callback_unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
  struct file_operations *ldv_5_container_file_operations ;
  struct poll_table_struct *ldv_5_ldv_param_22_1_default ;
  char *ldv_5_ldv_param_25_1_default ;
  long long *ldv_5_ldv_param_25_3_default ;
  unsigned int ldv_5_ldv_param_28_1_default ;
  char *ldv_5_ldv_param_4_1_default ;
  long long *ldv_5_ldv_param_4_3_default ;
  long long ldv_5_ldv_param_5_1_default ;
  int ldv_5_ldv_param_5_2_default ;
  struct file *ldv_5_resource_file ;
  struct inode *ldv_5_resource_inode ;
  int ldv_5_ret_default ;
  size_t ldv_5_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 852
  ldv_5_ret_default = ldv_undef_int();
#line 854
  ldv_free(arg0);
#line 858
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 858
  ldv_5_container_file_operations = (struct file_operations *)tmp;
#line 862
  tmp___0 = ldv_xmalloc(360UL);
#line 862
  ldv_5_resource_file = (struct file *)tmp___0;
#line 863
  tmp___1 = ldv_xmalloc(1032UL);
#line 863
  ldv_5_resource_inode = (struct inode *)tmp___1;
#line 864
  tmp___2 = ldv_undef_int();
#line 864
  ldv_5_size_cnt_write_size = (size_t )tmp___2;
  }
#line 871
  goto ldv_main_5;
#line 873
  return;
  ldv_main_5: 
  {
#line 879
  tmp___4 = ldv_undef_int();
  }
#line 879
  if (tmp___4 != 0) {
    {
#line 882
    ldv_5_ret_default = ldv_character_driver_scenario_probe_5_13(ldv_5_container_file_operations->open,
                                                                 ldv_5_resource_inode,
                                                                 ldv_5_resource_file);
#line 884
    ldv_5_ret_default = ldv_filter_err_code(ldv_5_ret_default);
#line 887
    tmp___3 = ldv_undef_int();
    }
#line 887
    if (tmp___3 != 0) {
      {
#line 889
      __VERIFIER_assume(ldv_5_ret_default == 0);
      }
#line 896
      goto ldv_call_5;
    } else {
      {
#line 900
      __VERIFIER_assume(ldv_5_ret_default != 0);
      }
#line 907
      goto ldv_main_5;
    }
  } else {
    {
#line 912
    ldv_free((void *)ldv_5_resource_file);
#line 913
    ldv_free((void *)ldv_5_resource_inode);
#line 917
    ldv_free((void *)ldv_5_container_file_operations);
    }
#line 925
    return;
  }
#line 928
  return;
  ldv_call_5: 
  {
#line 934
  tmp___5 = ldv_undef_int();
  }
  {
#line 935
  if (tmp___5 == 1) {
#line 935
    goto case_1;
  } else {

  }
#line 964
  if (tmp___5 == 2) {
#line 964
    goto case_2;
  } else {

  }
#line 977
  if (tmp___5 == 3) {
#line 977
    goto case_3;
  } else {

  }
#line 1046
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 937
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 937
  ldv_5_ldv_param_4_1_default = (char *)tmp___6;
#line 938
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 938
  ldv_5_ldv_param_4_3_default = (long long *)tmp___7;
#line 947
  __VERIFIER_assume(ldv_5_size_cnt_write_size <= 2147479552UL);
#line 949
  ldv_character_driver_scenario_write_5_4((ssize_t (*)(struct file * , char * , size_t  ,
                                                       loff_t * ))ldv_5_container_file_operations->write,
                                          ldv_5_resource_file, ldv_5_ldv_param_4_1_default,
                                          ldv_5_size_cnt_write_size, ldv_5_ldv_param_4_3_default);
#line 953
  ldv_free((void *)ldv_5_ldv_param_4_1_default);
#line 954
  ldv_free((void *)ldv_5_ldv_param_4_3_default);
  }
#line 961
  goto ldv_call_5;
  case_2: /* CIL Label */ 
  {
#line 967
  ldv_character_driver_scenario_release_5_2(ldv_5_container_file_operations->release,
                                            ldv_5_resource_inode, ldv_5_resource_file);
  }
#line 974
  goto ldv_main_5;
  case_3: /* CIL Label */ 
  {
#line 981
  tmp___8 = ldv_undef_int();
  }
  {
#line 982
  if (tmp___8 == 1) {
#line 982
    goto case_1___0;
  } else {

  }
#line 998
  if (tmp___8 == 2) {
#line 998
    goto case_2___0;
  } else {

  }
#line 1016
  if (tmp___8 == 3) {
#line 1016
    goto case_3___0;
  } else {

  }
#line 1034
  if (tmp___8 == 4) {
#line 1034
    goto case_4;
  } else {

  }
#line 1042
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 987
  if ((unsigned long )ldv_5_callback_unlocked_ioctl != (unsigned long )((long (*)(struct file * ,
                                                                                  unsigned int  ,
                                                                                  unsigned long  ))0)) {
    {
#line 989
    ldv_character_driver_scenario_callback_5_28(ldv_5_callback_unlocked_ioctl, ldv_5_resource_file,
                                                ldv_5_ldv_param_28_1_default, ldv_5_size_cnt_write_size);
    }
  } else {

  }
#line 996
  goto ldv_40885;
  case_2___0: /* CIL Label */ 
  {
#line 1000
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 1000
  ldv_5_ldv_param_25_1_default = (char *)tmp___9;
#line 1001
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 1001
  ldv_5_ldv_param_25_3_default = (long long *)tmp___10;
#line 1006
  ldv_character_driver_scenario_callback_5_25(ldv_5_callback_read, ldv_5_resource_file,
                                              ldv_5_ldv_param_25_1_default, ldv_5_size_cnt_write_size,
                                              ldv_5_ldv_param_25_3_default);
#line 1010
  ldv_free((void *)ldv_5_ldv_param_25_1_default);
#line 1011
  ldv_free((void *)ldv_5_ldv_param_25_3_default);
  }
#line 1014
  goto ldv_40885;
  case_3___0: /* CIL Label */ 
  {
#line 1018
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 1018
  ldv_5_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
  }
#line 1022
  if ((unsigned long )ldv_5_callback_poll != (unsigned long )((unsigned int (*)(struct file * ,
                                                                                struct poll_table_struct * ))0)) {
    {
#line 1024
    ldv_character_driver_scenario_callback_5_22(ldv_5_callback_poll, ldv_5_resource_file,
                                                ldv_5_ldv_param_22_1_default);
    }
  } else {

  }
  {
#line 1029
  ldv_free((void *)ldv_5_ldv_param_22_1_default);
  }
#line 1032
  goto ldv_40885;
  case_4: /* CIL Label */ 
  {
#line 1037
  ldv_character_driver_scenario_callback_5_5(ldv_5_callback_llseek, ldv_5_resource_file,
                                             ldv_5_ldv_param_5_1_default, ldv_5_ldv_param_5_2_default);
  }
#line 1040
  goto ldv_40885;
  switch_default: /* CIL Label */ 
  {
#line 1042
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_40885: ;
#line 1044
  goto ldv_40890;
  switch_default___0: /* CIL Label */ 
  {
#line 1046
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_40890: ;
#line 1055
  goto ldv_call_5;
#line 1057
  return;
}
}
#line 1062 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_6(void *arg0 ) 
{ 
  loff_t (*ldv_6_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  unsigned int (*ldv_6_callback_poll)(struct file * , struct poll_table_struct * ) ;
  ssize_t (*ldv_6_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_6_callback_unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
  struct file_operations *ldv_6_container_file_operations ;
  struct poll_table_struct *ldv_6_ldv_param_22_1_default ;
  char *ldv_6_ldv_param_25_1_default ;
  long long *ldv_6_ldv_param_25_3_default ;
  unsigned int ldv_6_ldv_param_28_1_default ;
  char *ldv_6_ldv_param_4_1_default ;
  long long *ldv_6_ldv_param_4_3_default ;
  long long ldv_6_ldv_param_5_1_default ;
  int ldv_6_ldv_param_5_2_default ;
  struct file *ldv_6_resource_file ;
  struct inode *ldv_6_resource_inode ;
  int ldv_6_ret_default ;
  size_t ldv_6_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 1084
  ldv_6_ret_default = ldv_undef_int();
#line 1086
  ldv_free(arg0);
#line 1090
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 1090
  ldv_6_container_file_operations = (struct file_operations *)tmp;
#line 1094
  tmp___0 = ldv_xmalloc(360UL);
#line 1094
  ldv_6_resource_file = (struct file *)tmp___0;
#line 1095
  tmp___1 = ldv_xmalloc(1032UL);
#line 1095
  ldv_6_resource_inode = (struct inode *)tmp___1;
#line 1096
  tmp___2 = ldv_undef_int();
#line 1096
  ldv_6_size_cnt_write_size = (size_t )tmp___2;
  }
#line 1103
  goto ldv_main_6;
#line 1105
  return;
  ldv_main_6: 
  {
#line 1111
  tmp___4 = ldv_undef_int();
  }
#line 1111
  if (tmp___4 != 0) {
    {
#line 1114
    ldv_6_ret_default = ldv_character_driver_scenario_probe_6_13(ldv_6_container_file_operations->open,
                                                                 ldv_6_resource_inode,
                                                                 ldv_6_resource_file);
#line 1116
    ldv_6_ret_default = ldv_filter_err_code(ldv_6_ret_default);
#line 1119
    tmp___3 = ldv_undef_int();
    }
#line 1119
    if (tmp___3 != 0) {
      {
#line 1121
      __VERIFIER_assume(ldv_6_ret_default == 0);
      }
#line 1128
      goto ldv_call_6;
    } else {
      {
#line 1132
      __VERIFIER_assume(ldv_6_ret_default != 0);
      }
#line 1139
      goto ldv_main_6;
    }
  } else {
    {
#line 1144
    ldv_free((void *)ldv_6_resource_file);
#line 1145
    ldv_free((void *)ldv_6_resource_inode);
#line 1149
    ldv_free((void *)ldv_6_container_file_operations);
    }
#line 1157
    return;
  }
#line 1160
  return;
  ldv_call_6: 
  {
#line 1166
  tmp___5 = ldv_undef_int();
  }
  {
#line 1167
  if (tmp___5 == 1) {
#line 1167
    goto case_1;
  } else {

  }
#line 1198
  if (tmp___5 == 2) {
#line 1198
    goto case_2;
  } else {

  }
#line 1211
  if (tmp___5 == 3) {
#line 1211
    goto case_3;
  } else {

  }
#line 1280
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 1169
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 1169
  ldv_6_ldv_param_4_1_default = (char *)tmp___6;
#line 1170
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 1170
  ldv_6_ldv_param_4_3_default = (long long *)tmp___7;
#line 1179
  __VERIFIER_assume(ldv_6_size_cnt_write_size <= 2147479552UL);
  }
#line 1180
  if ((unsigned long )ldv_6_container_file_operations->write != (unsigned long )((ssize_t (*)(struct file * ,
                                                                                              char const   * ,
                                                                                              size_t  ,
                                                                                              loff_t * ))0)) {
    {
#line 1182
    ldv_character_driver_scenario_write_6_4((ssize_t (*)(struct file * , char * ,
                                                         size_t  , loff_t * ))ldv_6_container_file_operations->write,
                                            ldv_6_resource_file, ldv_6_ldv_param_4_1_default,
                                            ldv_6_size_cnt_write_size, ldv_6_ldv_param_4_3_default);
    }
  } else {

  }
  {
#line 1187
  ldv_free((void *)ldv_6_ldv_param_4_1_default);
#line 1188
  ldv_free((void *)ldv_6_ldv_param_4_3_default);
  }
#line 1195
  goto ldv_call_6;
  case_2: /* CIL Label */ 
  {
#line 1201
  ldv_character_driver_scenario_release_6_2(ldv_6_container_file_operations->release,
                                            ldv_6_resource_inode, ldv_6_resource_file);
  }
#line 1208
  goto ldv_main_6;
  case_3: /* CIL Label */ 
  {
#line 1215
  tmp___8 = ldv_undef_int();
  }
  {
#line 1216
  if (tmp___8 == 1) {
#line 1216
    goto case_1___0;
  } else {

  }
#line 1232
  if (tmp___8 == 2) {
#line 1232
    goto case_2___0;
  } else {

  }
#line 1250
  if (tmp___8 == 3) {
#line 1250
    goto case_3___0;
  } else {

  }
#line 1268
  if (tmp___8 == 4) {
#line 1268
    goto case_4;
  } else {

  }
#line 1276
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 1221
  if ((unsigned long )ldv_6_callback_unlocked_ioctl != (unsigned long )((long (*)(struct file * ,
                                                                                  unsigned int  ,
                                                                                  unsigned long  ))0)) {
    {
#line 1223
    ldv_character_driver_scenario_callback_6_28(ldv_6_callback_unlocked_ioctl, ldv_6_resource_file,
                                                ldv_6_ldv_param_28_1_default, ldv_6_size_cnt_write_size);
    }
  } else {

  }
#line 1230
  goto ldv_40930;
  case_2___0: /* CIL Label */ 
  {
#line 1234
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 1234
  ldv_6_ldv_param_25_1_default = (char *)tmp___9;
#line 1235
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 1235
  ldv_6_ldv_param_25_3_default = (long long *)tmp___10;
#line 1240
  ldv_character_driver_scenario_callback_6_25(ldv_6_callback_read, ldv_6_resource_file,
                                              ldv_6_ldv_param_25_1_default, ldv_6_size_cnt_write_size,
                                              ldv_6_ldv_param_25_3_default);
#line 1244
  ldv_free((void *)ldv_6_ldv_param_25_1_default);
#line 1245
  ldv_free((void *)ldv_6_ldv_param_25_3_default);
  }
#line 1248
  goto ldv_40930;
  case_3___0: /* CIL Label */ 
  {
#line 1252
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 1252
  ldv_6_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
  }
#line 1256
  if ((unsigned long )ldv_6_callback_poll != (unsigned long )((unsigned int (*)(struct file * ,
                                                                                struct poll_table_struct * ))0)) {
    {
#line 1258
    ldv_character_driver_scenario_callback_6_22(ldv_6_callback_poll, ldv_6_resource_file,
                                                ldv_6_ldv_param_22_1_default);
    }
  } else {

  }
  {
#line 1263
  ldv_free((void *)ldv_6_ldv_param_22_1_default);
  }
#line 1266
  goto ldv_40930;
  case_4: /* CIL Label */ 
  {
#line 1271
  ldv_character_driver_scenario_callback_6_5(ldv_6_callback_llseek, ldv_6_resource_file,
                                             ldv_6_ldv_param_5_1_default, ldv_6_ldv_param_5_2_default);
  }
#line 1274
  goto ldv_40930;
  switch_default: /* CIL Label */ 
  {
#line 1276
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_40930: ;
#line 1278
  goto ldv_40935;
  switch_default___0: /* CIL Label */ 
  {
#line 1280
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_40935: ;
#line 1289
  goto ldv_call_6;
#line 1291
  return;
}
}
#line 1296 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_7(void *arg0 ) 
{ 
  loff_t (*ldv_7_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  unsigned int (*ldv_7_callback_poll)(struct file * , struct poll_table_struct * ) ;
  ssize_t (*ldv_7_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_7_callback_unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
  struct file_operations *ldv_7_container_file_operations ;
  struct poll_table_struct *ldv_7_ldv_param_22_1_default ;
  char *ldv_7_ldv_param_25_1_default ;
  long long *ldv_7_ldv_param_25_3_default ;
  unsigned int ldv_7_ldv_param_28_1_default ;
  char *ldv_7_ldv_param_4_1_default ;
  long long *ldv_7_ldv_param_4_3_default ;
  long long ldv_7_ldv_param_5_1_default ;
  int ldv_7_ldv_param_5_2_default ;
  struct file *ldv_7_resource_file ;
  struct inode *ldv_7_resource_inode ;
  int ldv_7_ret_default ;
  size_t ldv_7_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 1318
  ldv_7_ret_default = ldv_undef_int();
#line 1320
  ldv_free(arg0);
#line 1324
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 1324
  ldv_7_container_file_operations = (struct file_operations *)tmp;
#line 1328
  tmp___0 = ldv_xmalloc(360UL);
#line 1328
  ldv_7_resource_file = (struct file *)tmp___0;
#line 1329
  tmp___1 = ldv_xmalloc(1032UL);
#line 1329
  ldv_7_resource_inode = (struct inode *)tmp___1;
#line 1330
  tmp___2 = ldv_undef_int();
#line 1330
  ldv_7_size_cnt_write_size = (size_t )tmp___2;
  }
#line 1337
  goto ldv_main_7;
#line 1339
  return;
  ldv_main_7: 
  {
#line 1345
  tmp___4 = ldv_undef_int();
  }
#line 1345
  if (tmp___4 != 0) {
    {
#line 1348
    ldv_7_ret_default = ldv_character_driver_scenario_probe_7_13(ldv_7_container_file_operations->open,
                                                                 ldv_7_resource_inode,
                                                                 ldv_7_resource_file);
#line 1350
    ldv_7_ret_default = ldv_filter_err_code(ldv_7_ret_default);
#line 1353
    tmp___3 = ldv_undef_int();
    }
#line 1353
    if (tmp___3 != 0) {
      {
#line 1355
      __VERIFIER_assume(ldv_7_ret_default == 0);
      }
#line 1362
      goto ldv_call_7;
    } else {
      {
#line 1366
      __VERIFIER_assume(ldv_7_ret_default != 0);
      }
#line 1373
      goto ldv_main_7;
    }
  } else {
    {
#line 1378
    ldv_free((void *)ldv_7_resource_file);
#line 1379
    ldv_free((void *)ldv_7_resource_inode);
#line 1383
    ldv_free((void *)ldv_7_container_file_operations);
    }
#line 1391
    return;
  }
#line 1394
  return;
  ldv_call_7: 
  {
#line 1400
  tmp___5 = ldv_undef_int();
  }
  {
#line 1401
  if (tmp___5 == 1) {
#line 1401
    goto case_1;
  } else {

  }
#line 1432
  if (tmp___5 == 2) {
#line 1432
    goto case_2;
  } else {

  }
#line 1445
  if (tmp___5 == 3) {
#line 1445
    goto case_3;
  } else {

  }
#line 1514
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 1403
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 1403
  ldv_7_ldv_param_4_1_default = (char *)tmp___6;
#line 1404
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 1404
  ldv_7_ldv_param_4_3_default = (long long *)tmp___7;
#line 1413
  __VERIFIER_assume(ldv_7_size_cnt_write_size <= 2147479552UL);
  }
#line 1414
  if ((unsigned long )ldv_7_container_file_operations->write != (unsigned long )((ssize_t (*)(struct file * ,
                                                                                              char const   * ,
                                                                                              size_t  ,
                                                                                              loff_t * ))0)) {
    {
#line 1416
    ldv_character_driver_scenario_write_7_4((ssize_t (*)(struct file * , char * ,
                                                         size_t  , loff_t * ))ldv_7_container_file_operations->write,
                                            ldv_7_resource_file, ldv_7_ldv_param_4_1_default,
                                            ldv_7_size_cnt_write_size, ldv_7_ldv_param_4_3_default);
    }
  } else {

  }
  {
#line 1421
  ldv_free((void *)ldv_7_ldv_param_4_1_default);
#line 1422
  ldv_free((void *)ldv_7_ldv_param_4_3_default);
  }
#line 1429
  goto ldv_call_7;
  case_2: /* CIL Label */ 
  {
#line 1435
  ldv_character_driver_scenario_release_7_2(ldv_7_container_file_operations->release,
                                            ldv_7_resource_inode, ldv_7_resource_file);
  }
#line 1442
  goto ldv_main_7;
  case_3: /* CIL Label */ 
  {
#line 1449
  tmp___8 = ldv_undef_int();
  }
  {
#line 1450
  if (tmp___8 == 1) {
#line 1450
    goto case_1___0;
  } else {

  }
#line 1466
  if (tmp___8 == 2) {
#line 1466
    goto case_2___0;
  } else {

  }
#line 1484
  if (tmp___8 == 3) {
#line 1484
    goto case_3___0;
  } else {

  }
#line 1502
  if (tmp___8 == 4) {
#line 1502
    goto case_4;
  } else {

  }
#line 1510
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 1455
  if ((unsigned long )ldv_7_callback_unlocked_ioctl != (unsigned long )((long (*)(struct file * ,
                                                                                  unsigned int  ,
                                                                                  unsigned long  ))0)) {
    {
#line 1457
    ldv_character_driver_scenario_callback_7_28(ldv_7_callback_unlocked_ioctl, ldv_7_resource_file,
                                                ldv_7_ldv_param_28_1_default, ldv_7_size_cnt_write_size);
    }
  } else {

  }
#line 1464
  goto ldv_40975;
  case_2___0: /* CIL Label */ 
  {
#line 1468
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 1468
  ldv_7_ldv_param_25_1_default = (char *)tmp___9;
#line 1469
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 1469
  ldv_7_ldv_param_25_3_default = (long long *)tmp___10;
#line 1474
  ldv_character_driver_scenario_callback_7_25(ldv_7_callback_read, ldv_7_resource_file,
                                              ldv_7_ldv_param_25_1_default, ldv_7_size_cnt_write_size,
                                              ldv_7_ldv_param_25_3_default);
#line 1478
  ldv_free((void *)ldv_7_ldv_param_25_1_default);
#line 1479
  ldv_free((void *)ldv_7_ldv_param_25_3_default);
  }
#line 1482
  goto ldv_40975;
  case_3___0: /* CIL Label */ 
  {
#line 1486
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 1486
  ldv_7_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
  }
#line 1490
  if ((unsigned long )ldv_7_callback_poll != (unsigned long )((unsigned int (*)(struct file * ,
                                                                                struct poll_table_struct * ))0)) {
    {
#line 1492
    ldv_character_driver_scenario_callback_7_22(ldv_7_callback_poll, ldv_7_resource_file,
                                                ldv_7_ldv_param_22_1_default);
    }
  } else {

  }
  {
#line 1497
  ldv_free((void *)ldv_7_ldv_param_22_1_default);
  }
#line 1500
  goto ldv_40975;
  case_4: /* CIL Label */ 
  {
#line 1505
  ldv_character_driver_scenario_callback_7_5(ldv_7_callback_llseek, ldv_7_resource_file,
                                             ldv_7_ldv_param_5_1_default, ldv_7_ldv_param_5_2_default);
  }
#line 1508
  goto ldv_40975;
  switch_default: /* CIL Label */ 
  {
#line 1510
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_40975: ;
#line 1512
  goto ldv_40980;
  switch_default___0: /* CIL Label */ 
  {
#line 1514
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_40980: ;
#line 1523
  goto ldv_call_7;
#line 1525
  return;
}
}
#line 1530 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_2_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 1531
  cache_poll_pipefs(arg1, arg2);
  }
#line 1532
  return;
}
}
#line 1535 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_2_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 1536
  cache_read_pipefs(arg1, arg2, arg3, arg4);
  }
#line 1537
  return;
}
}
#line 1540 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_2_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1541
  cache_ioctl_pipefs(arg1, arg2, arg3);
  }
#line 1542
  return;
}
}
#line 1545 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_3_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 1546
  cache_poll_procfs(arg1, arg2);
  }
#line 1547
  return;
}
}
#line 1550 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_3_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 1551
  cache_read_procfs(arg1, arg2, arg3, arg4);
  }
#line 1552
  return;
}
}
#line 1555 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_3_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1556
  cache_ioctl_procfs(arg1, arg2, arg3);
  }
#line 1557
  return;
}
}
#line 1560 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_4_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 1561
  (*arg0)(arg1, arg2);
  }
#line 1562
  return;
}
}
#line 1565 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_4_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 1566
  read_flush_pipefs(arg1, arg2, arg3, arg4);
  }
#line 1567
  return;
}
}
#line 1570 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_4_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1571
  (*arg0)(arg1, arg2, arg3);
  }
#line 1572
  return;
}
}
#line 1575 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_5_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 1576
  (*arg0)(arg1, arg2);
  }
#line 1577
  return;
}
}
#line 1580 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_5_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 1581
  read_flush_procfs(arg1, arg2, arg3, arg4);
  }
#line 1582
  return;
}
}
#line 1585 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_5_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1586
  (*arg0)(arg1, arg2, arg3);
  }
#line 1587
  return;
}
}
#line 1590 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_6_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 1591
  (*arg0)(arg1, arg2);
  }
#line 1592
  return;
}
}
#line 1595 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_6_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1596
  (*arg0)(arg1, arg2, arg3);
  }
#line 1597
  return;
}
}
#line 1600 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_7_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 1601
  (*arg0)(arg1, arg2);
  }
#line 1602
  return;
}
}
#line 1605 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_callback_7_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 1606
  (*arg0)(arg1, arg2, arg3);
  }
#line 1607
  return;
}
}
#line 1610 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
int ldv_character_driver_scenario_probe_2_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1611
  tmp = cache_open_pipefs(arg1, arg2);
  }
#line 1611
  return (tmp);
}
}
#line 1615 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
int ldv_character_driver_scenario_probe_3_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1616
  tmp = cache_open_procfs(arg1, arg2);
  }
#line 1616
  return (tmp);
}
}
#line 1620 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
int ldv_character_driver_scenario_probe_4_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1621
  tmp = open_flush_pipefs(arg1, arg2);
  }
#line 1621
  return (tmp);
}
}
#line 1625 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
int ldv_character_driver_scenario_probe_5_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1626
  tmp = open_flush_procfs(arg1, arg2);
  }
#line 1626
  return (tmp);
}
}
#line 1630 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
int ldv_character_driver_scenario_probe_6_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1631
  tmp = content_open_pipefs(arg1, arg2);
  }
#line 1631
  return (tmp);
}
}
#line 1635 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
int ldv_character_driver_scenario_probe_7_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1636
  tmp = content_open_procfs(arg1, arg2);
  }
#line 1636
  return (tmp);
}
}
#line 1640 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_release_2_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 1641
  cache_release_pipefs(arg1, arg2);
  }
#line 1642
  return;
}
}
#line 1645 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_release_3_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 1646
  cache_release_procfs(arg1, arg2);
  }
#line 1647
  return;
}
}
#line 1650 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_release_4_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 1651
  release_flush_pipefs(arg1, arg2);
  }
#line 1652
  return;
}
}
#line 1655 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_release_5_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 1656
  release_flush_procfs(arg1, arg2);
  }
#line 1657
  return;
}
}
#line 1660 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_release_6_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 1661
  content_release_pipefs(arg1, arg2);
  }
#line 1662
  return;
}
}
#line 1665 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_release_7_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 1666
  content_release_procfs(arg1, arg2);
  }
#line 1667
  return;
}
}
#line 1670 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_write_2_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 1671
  cache_write_pipefs(arg1, (char const   *)arg2, arg3, arg4);
  }
#line 1672
  return;
}
}
#line 1675 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_write_3_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 1676
  cache_write_procfs(arg1, (char const   *)arg2, arg3, arg4);
  }
#line 1677
  return;
}
}
#line 1680 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_write_4_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 1681
  write_flush_pipefs(arg1, (char const   *)arg2, arg3, arg4);
  }
#line 1682
  return;
}
}
#line 1685 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_write_5_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 1686
  write_flush_procfs(arg1, (char const   *)arg2, arg3, arg4);
  }
#line 1687
  return;
}
}
#line 1690 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_write_6_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 1691
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 1692
  return;
}
}
#line 1695 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_character_driver_scenario_write_7_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 1696
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 1697
  return;
}
}
#line 1700 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_dispatch_deregister_19_1(struct seq_file *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 1703
  tmp = ldv_undef_int();
  }
#line 1709
  return;
}
}
#line 1713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
int ldv_emg_seq_release_private(struct inode *arg0 , struct file *arg1 ) 
{ 
  struct file *ldv_19_file_file ;
  struct seq_file *ldv_19_seq_file_seq_file ;

  {
  {
#line 1720
  ldv_19_seq_file_seq_file = (struct seq_file *)ldv_19_file_file->private_data;
#line 1721
  ldv_free((void *)ldv_19_seq_file_seq_file);
#line 1725
  ldv_dispatch_deregister_19_1(ldv_19_seq_file_seq_file);
  }
#line 1726
  return (0);
}
}
#line 1734 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_traverse_kernel_items_scenario_11(void *arg0 ) 
{ 
  loff_t *ldv_11_index_index ;
  struct seq_operations *ldv_11_ops_seq_operations ;
  loff_t *ldv_11_ret_index ;
  struct seq_file *ldv_11_seq_file_seq_file ;
  int ldv_11_show_ret_default ;
  struct ldv_struct_traverse_kernel_items_scenario_11 *data ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;

  {
  {
#line 1743
  data = (struct ldv_struct_traverse_kernel_items_scenario_11 *)arg0;
#line 1747
  ldv_11_show_ret_default = ldv_undef_int();
  }
#line 1750
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_traverse_kernel_items_scenario_11 *)0)) {
    {
#line 1751
    ldv_11_seq_file_seq_file = data->arg0;
#line 1752
    ldv_11_ops_seq_operations = data->arg1;
#line 1753
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 1758
  tmp = ldv_xmalloc(8UL);
#line 1758
  ldv_11_index_index = (loff_t *)tmp;
  }
#line 1765
  goto ldv_outer_loop_11;
#line 1767
  return;
  ldv_outer_loop_11: 
  {
#line 1773
  tmp___1 = ldv_undef_int();
  }
#line 1773
  if (tmp___1 != 0) {
    {
#line 1776
    *ldv_11_index_index = 0LL;
#line 1778
    tmp___0 = ldv_traverse_kernel_items_scenario_start_11_14(ldv_11_ops_seq_operations->start,
                                                             ldv_11_seq_file_seq_file,
                                                             ldv_11_index_index);
#line 1778
    ldv_11_ret_index = (loff_t *)tmp___0;
    }
#line 1785
    goto ldv_inner_loop_11;
  } else {
    {
#line 1789
    ldv_free((void *)ldv_11_index_index);
    }
#line 1797
    return;
  }
#line 1800
  return;
  ldv_inner_loop_11: 
  {
#line 1806
  tmp___6 = ldv_undef_int();
  }
#line 1806
  if (tmp___6 != 0) {
    {
#line 1808
    tmp___2 = ldv_is_err_or_null((void const   *)ldv_11_ret_index);
#line 1808
    __VERIFIER_assume(tmp___2 == 0L);
#line 1813
    ldv_11_show_ret_default = ldv_traverse_kernel_items_scenario_show_11_9(ldv_11_ops_seq_operations->show,
                                                                           ldv_11_seq_file_seq_file,
                                                                           (void *)ldv_11_ret_index);
#line 1816
    tmp___4 = ldv_undef_int();
    }
#line 1816
    if (tmp___4 != 0) {
      {
#line 1818
      __VERIFIER_assume(ldv_11_show_ret_default >= 0);
#line 1823
      tmp___3 = ldv_traverse_kernel_items_scenario_next_11_7(ldv_11_ops_seq_operations->next,
                                                             ldv_11_seq_file_seq_file,
                                                             (void *)ldv_11_ret_index,
                                                             ldv_11_index_index);
#line 1823
      ldv_11_ret_index = (loff_t *)tmp___3;
      }
#line 1830
      goto ldv_inner_loop_11;
    } else {
      {
#line 1835
      ldv_11_seq_file_seq_file->index = *ldv_11_index_index;
#line 1837
      ldv_traverse_kernel_items_scenario_stop_11_5(ldv_11_ops_seq_operations->stop,
                                                   ldv_11_seq_file_seq_file, (void *)ldv_11_ret_index);
#line 1839
      ldv_11_seq_file_seq_file->index = *ldv_11_index_index;
      }
#line 1846
      goto ldv_outer_loop_11;
    }
  } else {
    {
#line 1851
    tmp___5 = ldv_is_err_or_null((void const   *)ldv_11_ret_index);
#line 1851
    __VERIFIER_assume((int )tmp___5);
#line 1856
    ldv_11_seq_file_seq_file->index = *ldv_11_index_index;
#line 1858
    ldv_traverse_kernel_items_scenario_stop_11_2(ldv_11_ops_seq_operations->stop,
                                                 ldv_11_seq_file_seq_file, (void *)ldv_11_ret_index);
#line 1860
    ldv_11_seq_file_seq_file->index = *ldv_11_index_index;
    }
#line 1867
    goto ldv_outer_loop_11;
  }
#line 1870
  return;
}
}
#line 1875 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void *ldv_traverse_kernel_items_scenario_next_11_7(void *(*arg0)(struct seq_file * ,
                                                                 void * , loff_t * ) ,
                                                   struct seq_file *arg1 , void *arg2 ,
                                                   long long *arg3 ) 
{ 
  void *tmp ;

  {
  {
#line 1876
  tmp = c_next(arg1, arg2, arg3);
  }
#line 1876
  return (tmp);
}
}
#line 1880 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
int ldv_traverse_kernel_items_scenario_show_11_9(pid_t (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 1881
  tmp = c_show(arg1, arg2);
  }
#line 1881
  return (tmp);
}
}
#line 1885 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void *ldv_traverse_kernel_items_scenario_start_11_14(void *(*arg0)(struct seq_file * ,
                                                                   loff_t * ) , struct seq_file *arg1 ,
                                                     long long *arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 1886
  tmp = c_start(arg1, arg2);
  }
#line 1886
  return (tmp);
}
}
#line 1890 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_traverse_kernel_items_scenario_stop_11_2(void (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                  void *arg2 ) 
{ 


  {
  {
#line 1891
  c_stop(arg1, arg2);
  }
#line 1892
  return;
}
}
#line 1895 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
void ldv_traverse_kernel_items_scenario_stop_11_5(void (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                  void *arg2 ) 
{ 


  {
  {
#line 1896
  c_stop(arg1, arg2);
  }
#line 1897
  return;
}
}
#line 1965 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static bool ldv_try_module_get_10___2(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 1968
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 1968
  return (tmp != 0);
}
}
#line 1972 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static int ldv_nonseekable_open_11(struct inode *ldv_func_arg1 , struct file *ldv_func_arg2 ) 
{ 


  {
#line 1975
  return (0);
}
}
#line 1979 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static void ldv_module_put_12___0(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 1982
  ldv_module_put(ldv_func_arg1);
  }
#line 1983
  return;
}
}
#line 1986 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static void ldv_module_put_13___0(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 1989
  ldv_module_put(ldv_func_arg1);
  }
#line 1990
  return;
}
}
#line 1993 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static bool ldv_try_module_get_14___1(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 1996
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 1996
  return (tmp != 0);
}
}
#line 2000 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static void ldv_module_put_15___0(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 2003
  ldv_module_put(ldv_func_arg1);
  }
#line 2004
  return;
}
}
#line 2007 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static int ldv_seq_release_private_16(struct inode *ldv_func_arg1 , struct file *ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 2011
  tmp = ldv_emg_seq_release_private(ldv_func_arg1, ldv_func_arg2);
  }
#line 2011
  return (tmp);
}
}
#line 2015 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static void ldv_module_put_17(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 2018
  ldv_module_put(ldv_func_arg1);
  }
#line 2019
  return;
}
}
#line 2022 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static bool ldv_try_module_get_18(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 2025
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 2025
  return (tmp != 0);
}
}
#line 2029 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static int ldv_nonseekable_open_19(struct inode *ldv_func_arg1 , struct file *ldv_func_arg2 ) 
{ 


  {
#line 2032
  return (0);
}
}
#line 2036 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_cache.c.aux"
static void ldv_module_put_20(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 2039
  ldv_module_put(ldv_func_arg1);
  }
#line 2040
  return;
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 118 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 133 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/time.h"
extern struct timespec current_kernel_time(void) ;
#line 127 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/notifier.h"
extern int blocking_notifier_chain_cond_register(struct blocking_notifier_head * ,
                                                 struct notifier_block * ) ;
#line 133
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head * , struct notifier_block * ) ;
#line 144
extern int blocking_notifier_call_chain(struct blocking_notifier_head * , unsigned long  ,
                                        void * ) ;
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list_bl.h"
__inline static int hlist_bl_unhashed(struct hlist_bl_node  const  *h ) 
{ 


  {
#line 53
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_bl_node **/* const  */)0));
}
}
#line 223 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
extern void d_instantiate(struct dentry * , struct inode * ) ;
#line 227
extern void d_drop(struct dentry * ) ;
#line 228
extern void d_delete(struct dentry * ) ;
#line 229
extern void d_set_d_op(struct dentry * , struct dentry_operations  const  * ) ;
#line 232
extern struct dentry *d_alloc(struct dentry * , struct qstr  const  * ) ;
#line 244
extern struct dentry *d_make_root(struct inode * ) ;
#line 258
extern void d_rehash(struct dentry * ) ;
#line 269 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
__inline static void d_add(struct dentry *entry , struct inode *inode ) 
{ 


  {
  {
#line 271
  d_instantiate(entry, inode);
#line 272
  d_rehash(entry);
  }
#line 273
  return;
}
}
#line 299
extern struct dentry *d_lookup(struct dentry  const  * , struct qstr  const  * ) ;
#line 353 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
__inline static struct dentry *dget_dlock(struct dentry *dentry ) 
{ 


  {
#line 355
  if ((unsigned long )dentry != (unsigned long )((struct dentry *)0)) {
#line 356
    dentry->d_count = dentry->d_count + 1U;
  } else {

  }
#line 357
  return (dentry);
}
}
#line 360 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
__inline static struct dentry *dget(struct dentry *dentry ) 
{ 


  {
#line 362
  if ((unsigned long )dentry != (unsigned long )((struct dentry *)0)) {
    {
#line 363
    spin_lock(& dentry->d_lock);
#line 364
    dget_dlock(dentry);
#line 365
    spin_unlock(& dentry->d_lock);
    }
  } else {

  }
#line 367
  return (dentry);
}
}
#line 370
extern struct dentry *dget_parent(struct dentry * ) ;
#line 379 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/dcache.h"
__inline static int d_unhashed(struct dentry *dentry ) 
{ 
  int tmp ;

  {
  {
#line 381
  tmp = hlist_bl_unhashed((struct hlist_bl_node  const  *)(& dentry->d_hash));
  }
#line 381
  return (tmp);
}
}
#line 1755 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
extern void inc_nlink(struct inode * ) ;
#line 1832
extern struct dentry *mount_ns(struct file_system_type * , int  , void * , int (*)(struct super_block * ,
                                                                                   void * ,
                                                                                   int  ) ) ;
#line 1847
extern void kill_litter_super(struct super_block * ) ;
#line 1868
extern int register_filesystem(struct file_system_type * ) ;
#line 1869
extern int unregister_filesystem(struct file_system_type * ) ;
#line 2317
extern void inode_init_once(struct inode * ) ;
#line 2322
extern ino_t iunique(struct super_block * , ino_t  ) ;
#line 2347
extern unsigned int get_next_ino(void) ;
#line 2354
extern struct inode *new_inode(struct super_block * ) ;
#line 2530
extern int simple_statfs(struct dentry * , struct kstatfs * ) ;
#line 2533
extern int simple_unlink(struct inode * , struct dentry * ) ;
#line 2534
extern int simple_rmdir(struct inode * , struct dentry * ) ;
#line 2548
extern struct file_operations  const  simple_dir_operations ;
#line 2549
extern struct inode_operations  const  simple_dir_inode_operations ;
#line 113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
extern void kmem_cache_free(struct kmem_cache * , void * ) ;
#line 107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 125 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seq_file.h"
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 127
extern int single_release(struct inode * , struct file * ) ;
#line 307 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fsnotify_backend.h"
extern int fsnotify(struct inode * , __u32  , void * , int  , unsigned char const   * ,
                    u32  ) ;
#line 111 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/audit.h"
extern void __audit_inode_child(struct inode  const  * , struct dentry  const  * ,
                                unsigned char const    ) ;
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/audit.h"
__inline static int audit_dummy_context(void) 
{ 
  void *p ;
  struct task_struct *tmp ;

  {
  {
#line 119
  tmp = get_current();
#line 119
  p = (void *)tmp->audit_context;
  }
#line 120
  return ((unsigned long )p == (unsigned long )((void *)0) || *((int *)p) != 0);
}
}
#line 171 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/audit.h"
__inline static void audit_inode_child(struct inode  const  *parent , struct dentry  const  *dentry ,
                                       unsigned char const   type ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
  {
#line 174
  tmp = audit_dummy_context();
#line 174
  tmp___0 = __builtin_expect(tmp == 0, 0L);
  }
#line 174
  if (tmp___0 != 0L) {
    {
#line 175
    __audit_inode_child(parent, dentry, (int )type);
    }
  } else {

  }
#line 176
  return;
}
}
#line 156 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fsnotify.h"
__inline static void fsnotify_create(struct inode *inode , struct dentry *dentry ) 
{ 


  {
  {
#line 158
  audit_inode_child((struct inode  const  *)inode, (struct dentry  const  *)dentry,
                    4);
#line 160
  fsnotify(inode, 256U, (void *)dentry->d_inode, 2, dentry->d_name.name, 0U);
  }
#line 161
  return;
}
}
#line 179 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fsnotify.h"
__inline static void fsnotify_mkdir(struct inode *inode , struct dentry *dentry ) 
{ 
  __u32 mask ;
  struct inode *d_inode ;

  {
  {
#line 181
  mask = 1073742080U;
#line 182
  d_inode = dentry->d_inode;
#line 184
  audit_inode_child((struct inode  const  *)inode, (struct dentry  const  *)dentry,
                    4);
#line 186
  fsnotify(inode, mask, (void *)d_inode, 2, dentry->d_name.name, 0U);
  }
#line 187
  return;
}
}
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/rpc_pipe_fs.h"
ssize_t rpc_pipe_generic_upcall(struct file *filp , struct rpc_pipe_msg *msg , char *dst ,
                                size_t buflen ) ;
#line 73
int rpc_queue_upcall(struct rpc_pipe *pipe , struct rpc_pipe_msg *msg ) ;
#line 86
int rpc_rmdir(struct dentry *dentry ) ;
#line 88
struct rpc_pipe *rpc_mkpipe_data(struct rpc_pipe_ops  const  *ops , int flags ) ;
#line 89
void rpc_destroy_pipe_data(struct rpc_pipe *pipe ) ;
#line 90
struct dentry *rpc_mkpipe_dentry(struct dentry *parent , char const   *name , void *private ,
                                 struct rpc_pipe *pipe ) ;
#line 92
int rpc_unlink(struct dentry *dentry ) ;
#line 40 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct file_system_type rpc_pipe_fs_type ;
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct kmem_cache *rpc_inode_cachep  ;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct blocking_notifier_head rpc_pipefs_notifier_list  =    {{0L, {{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "(rpc_pipefs_notifier_list).rwsem.wait_lock",
                                                         0, 0UL}}, {& rpc_pipefs_notifier_list.rwsem.wait_list,
                                                                    & rpc_pipefs_notifier_list.rwsem.wait_list},
     {0, {0, 0}, "(rpc_pipefs_notifier_list).rwsem", 0, 0UL}}, (struct notifier_block *)0};
#line 49 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
int rpc_pipefs_notifier_register(struct notifier_block *nb ) 
{ 
  int tmp ;

  {
  {
#line 51
  tmp = blocking_notifier_chain_cond_register(& rpc_pipefs_notifier_list, nb);
  }
#line 51
  return (tmp);
}
}
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
void rpc_pipefs_notifier_unregister(struct notifier_block *nb ) 
{ 


  {
  {
#line 57
  blocking_notifier_chain_unregister(& rpc_pipefs_notifier_list, nb);
  }
#line 58
  return;
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_purge_list(wait_queue_head_t *waitq , struct list_head *head , void (*destroy_msg)(struct rpc_pipe_msg * ) ,
                           int err ) 
{ 
  struct rpc_pipe_msg *msg ;
  int tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;

  {
  {
#line 66
  tmp = list_empty((struct list_head  const  *)head);
  }
#line 66
  if (tmp != 0) {
#line 67
    return;
  } else {

  }
  ldv_46822: 
  {
#line 69
  __mptr = (struct list_head  const  *)head->next;
#line 69
  msg = (struct rpc_pipe_msg *)__mptr;
#line 70
  list_del_init(& msg->list);
#line 71
  msg->errno = err;
#line 72
  (*destroy_msg)(msg);
#line 73
  tmp___0 = list_empty((struct list_head  const  *)head);
  }
#line 73
  if (tmp___0 == 0) {
#line 75
    goto ldv_46822;
  } else {

  }

#line 75
  if ((unsigned long )waitq != (unsigned long )((wait_queue_head_t *)0)) {
    {
#line 76
    __wake_up(waitq, 3U, 1, (void *)0);
    }
  } else {

  }
#line 77
  return;
}
}
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_timeout_upcall_queue(struct work_struct *work ) 
{ 
  struct list_head free_list ;
  struct rpc_pipe *pipe ;
  struct work_struct  const  *__mptr ;
  void (*destroy_msg)(struct rpc_pipe_msg * ) ;
  struct dentry *dentry ;
  struct rpc_inode *tmp ;
  wait_queue_head_t *tmp___0 ;

  {
  {
#line 82
  free_list.next = & free_list;
#line 82
  free_list.prev = & free_list;
#line 84
  __mptr = (struct work_struct  const  *)work;
#line 84
  pipe = (struct rpc_pipe *)((char *)__mptr + 0xffffffffffffffc0UL);
#line 88
  spin_lock(& pipe->lock);
#line 89
  destroy_msg = (pipe->ops)->destroy_msg;
  }
#line 90
  if (pipe->nreaders == 0) {
    {
#line 91
    list_splice_init(& pipe->pipe, & free_list);
#line 92
    pipe->pipelen = 0;
    }
  } else {

  }
  {
#line 94
  dentry = dget(pipe->dentry);
#line 95
  spin_unlock(& pipe->lock);
  }
#line 96
  if ((unsigned long )dentry != (unsigned long )((struct dentry *)0)) {
    {
#line 96
    tmp = RPC_I(dentry->d_inode);
#line 96
    tmp___0 = & tmp->waitq;
    }
  } else {
#line 96
    tmp___0 = (wait_queue_head_t *)0;
  }
  {
#line 96
  rpc_purge_list(tmp___0, & free_list, destroy_msg, -110);
#line 98
  dput(dentry);
  }
#line 99
  return;
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
ssize_t rpc_pipe_generic_upcall(struct file *filp , struct rpc_pipe_msg *msg , char *dst ,
                                size_t buflen ) 
{ 
  char *data ;
  size_t mlen ;
  size_t _min1 ;
  size_t _min2 ;
  unsigned long left ;
  int tmp ;

  {
  {
#line 104
  data = (char *)msg->data + msg->copied;
#line 105
  _min1 = msg->len - msg->copied;
#line 105
  _min2 = buflen;
#line 105
  mlen = _min1 < _min2 ? _min1 : _min2;
#line 108
  tmp = copy_to_user((void *)dst, (void const   *)data, (unsigned int )mlen);
#line 108
  left = (unsigned long )tmp;
  }
#line 109
  if (left == mlen) {
#line 110
    msg->errno = -14;
#line 111
    return (-14L);
  } else {

  }
#line 114
  mlen = mlen - left;
#line 115
  msg->copied = msg->copied + mlen;
#line 116
  msg->errno = 0;
#line 117
  return ((ssize_t )mlen);
}
}
#line 132 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
int rpc_queue_upcall(struct rpc_pipe *pipe , struct rpc_pipe_msg *msg ) 
{ 
  int res ;
  struct dentry *dentry ;
  int tmp ;
  struct rpc_inode *tmp___0 ;

  {
  {
#line 134
  res = -32;
#line 137
  spin_lock(& pipe->lock);
  }
#line 138
  if (pipe->nreaders != 0) {
    {
#line 139
    list_add_tail(& msg->list, & pipe->pipe);
#line 140
    pipe->pipelen = (int )((unsigned int )pipe->pipelen + (unsigned int )msg->len);
#line 141
    res = 0;
    }
  } else
#line 142
  if (pipe->flags & 1) {
    {
#line 143
    tmp = list_empty((struct list_head  const  *)(& pipe->pipe));
    }
#line 143
    if (tmp != 0) {
      {
#line 144
      queue_delayed_work(rpciod_workqueue, & pipe->queue_timeout, 7500UL);
      }
    } else {

    }
    {
#line 147
    list_add_tail(& msg->list, & pipe->pipe);
#line 148
    pipe->pipelen = (int )((unsigned int )pipe->pipelen + (unsigned int )msg->len);
#line 149
    res = 0;
    }
  } else {

  }
  {
#line 151
  dentry = dget(pipe->dentry);
#line 152
  spin_unlock(& pipe->lock);
  }
#line 153
  if ((unsigned long )dentry != (unsigned long )((struct dentry *)0)) {
    {
#line 154
    tmp___0 = RPC_I(dentry->d_inode);
#line 154
    __wake_up(& tmp___0->waitq, 3U, 1, (void *)0);
#line 155
    dput(dentry);
    }
  } else {

  }
#line 157
  return (res);
}
}
#line 162 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
__inline static void rpc_inode_setowner(struct inode *inode , void *private ) 
{ 
  struct rpc_inode *tmp ;

  {
  {
#line 164
  tmp = RPC_I(inode);
#line 164
  tmp->private = private;
  }
#line 165
  return;
}
}
#line 168 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_close_pipes(struct inode *inode ) 
{ 
  struct rpc_pipe *pipe ;
  struct rpc_inode *tmp ;
  int need_release ;
  struct list_head free_list ;
  struct rpc_inode *tmp___0 ;
  struct rpc_inode *tmp___1 ;

  {
  {
#line 170
  tmp = RPC_I(inode);
#line 170
  pipe = tmp->pipe;
#line 172
  free_list.next = & free_list;
#line 172
  free_list.prev = & free_list;
#line 174
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 175
  spin_lock(& pipe->lock);
#line 176
  need_release = pipe->nreaders != 0 || pipe->nwriters != 0;
#line 177
  pipe->nreaders = 0;
#line 178
  list_splice_init(& pipe->in_upcall, & free_list);
#line 179
  list_splice_init(& pipe->pipe, & free_list);
#line 180
  pipe->pipelen = 0;
#line 181
  pipe->dentry = (struct dentry *)0;
#line 182
  spin_unlock(& pipe->lock);
#line 183
  tmp___0 = RPC_I(inode);
#line 183
  rpc_purge_list(& tmp___0->waitq, & free_list, (pipe->ops)->destroy_msg, -32);
#line 184
  pipe->nwriters = 0;
  }
#line 185
  if (need_release != 0 && (unsigned long )(pipe->ops)->release_pipe != (unsigned long )((void (*/* const  */)(struct inode * ))0)) {
    {
#line 186
    (*((pipe->ops)->release_pipe))(inode);
    }
  } else {

  }
  {
#line 187
  cancel_delayed_work_sync(& pipe->queue_timeout);
#line 188
  rpc_inode_setowner(inode, (void *)0);
#line 189
  tmp___1 = RPC_I(inode);
#line 189
  tmp___1->pipe = (struct rpc_pipe *)0;
#line 190
  mutex_unlock(& inode->i_mutex);
  }
#line 191
  return;
}
}
#line 194 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct inode *rpc_alloc_inode(struct super_block *sb ) 
{ 
  struct rpc_inode *rpci ;
  void *tmp ;

  {
  {
#line 197
  tmp = kmem_cache_alloc(rpc_inode_cachep, 208U);
#line 197
  rpci = (struct rpc_inode *)tmp;
  }
#line 198
  if ((unsigned long )rpci == (unsigned long )((struct rpc_inode *)0)) {
#line 199
    return ((struct inode *)0);
  } else {

  }
#line 200
  return (& rpci->vfs_inode);
}
}
#line 204 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_i_callback(struct callback_head *head ) 
{ 
  struct inode *inode ;
  struct callback_head  const  *__mptr ;
  struct rpc_inode *tmp ;

  {
  {
#line 206
  __mptr = (struct callback_head  const  *)head;
#line 206
  inode = (struct inode *)((char *)__mptr + 0xfffffffffffffe28UL);
#line 207
  tmp = RPC_I(inode);
#line 207
  kmem_cache_free(rpc_inode_cachep, (void *)tmp);
  }
#line 208
  return;
}
}
#line 211 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_destroy_inode(struct inode *inode ) 
{ 


  {
  {
#line 213
  call_rcu_sched(& inode->__annonCompField44.i_rcu, & rpc_i_callback);
  }
#line 214
  return;
}
}
#line 217 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_pipe_open(struct inode *inode , struct file *filp ) 
{ 
  struct net *net ;
  struct sunrpc_net *sn ;
  void *tmp ;
  struct rpc_pipe *pipe ;
  int first_open ;
  int res ;
  struct rpc_inode *tmp___0 ;

  {
  {
#line 219
  net = (struct net *)(inode->i_sb)->s_fs_info;
#line 220
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 220
  sn = (struct sunrpc_net *)tmp;
#line 223
  res = -6;
#line 225
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 226
  sn->gssd_running = 1U;
#line 227
  tmp___0 = RPC_I(inode);
#line 227
  pipe = tmp___0->pipe;
  }
#line 228
  if ((unsigned long )pipe == (unsigned long )((struct rpc_pipe *)0)) {
#line 229
    goto out;
  } else {

  }
#line 230
  first_open = pipe->nreaders == 0 && pipe->nwriters == 0;
#line 231
  if (first_open != 0 && (unsigned long )(pipe->ops)->open_pipe != (unsigned long )((int (*/* const  */)(struct inode * ))0)) {
    {
#line 232
    res = (*((pipe->ops)->open_pipe))(inode);
    }
#line 233
    if (res != 0) {
#line 234
      goto out;
    } else {

    }
  } else {

  }
#line 236
  if ((int )filp->f_mode & 1) {
#line 237
    pipe->nreaders = pipe->nreaders + 1;
  } else {

  }
#line 238
  if ((filp->f_mode & 2U) != 0U) {
#line 239
    pipe->nwriters = pipe->nwriters + 1;
  } else {

  }
#line 240
  res = 0;
  out: 
  {
#line 242
  mutex_unlock(& inode->i_mutex);
  }
#line 243
  return (res);
}
}
#line 247 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_pipe_release(struct inode *inode , struct file *filp ) 
{ 
  struct rpc_pipe *pipe ;
  struct rpc_pipe_msg *msg ;
  int last_close ;
  struct rpc_inode *tmp ;
  struct list_head free_list ;
  struct rpc_inode *tmp___0 ;

  {
  {
#line 253
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 254
  tmp = RPC_I(inode);
#line 254
  pipe = tmp->pipe;
  }
#line 255
  if ((unsigned long )pipe == (unsigned long )((struct rpc_pipe *)0)) {
#line 256
    goto out;
  } else {

  }
#line 257
  msg = (struct rpc_pipe_msg *)filp->private_data;
#line 258
  if ((unsigned long )msg != (unsigned long )((struct rpc_pipe_msg *)0)) {
    {
#line 259
    spin_lock(& pipe->lock);
#line 260
    msg->errno = -11;
#line 261
    list_del_init(& msg->list);
#line 262
    spin_unlock(& pipe->lock);
#line 263
    (*((pipe->ops)->destroy_msg))(msg);
    }
  } else {

  }
#line 265
  if ((filp->f_mode & 2U) != 0U) {
#line 266
    pipe->nwriters = pipe->nwriters - 1;
  } else {

  }
#line 267
  if ((int )filp->f_mode & 1) {
#line 268
    pipe->nreaders = pipe->nreaders - 1;
#line 269
    if (pipe->nreaders == 0) {
      {
#line 270
      free_list.next = & free_list;
#line 270
      free_list.prev = & free_list;
#line 271
      spin_lock(& pipe->lock);
#line 272
      list_splice_init(& pipe->pipe, & free_list);
#line 273
      pipe->pipelen = 0;
#line 274
      spin_unlock(& pipe->lock);
#line 275
      tmp___0 = RPC_I(inode);
#line 275
      rpc_purge_list(& tmp___0->waitq, & free_list, (pipe->ops)->destroy_msg, -11);
      }
    } else {

    }
  } else {

  }
#line 279
  last_close = pipe->nwriters == 0 && pipe->nreaders == 0;
#line 280
  if (last_close != 0 && (unsigned long )(pipe->ops)->release_pipe != (unsigned long )((void (*/* const  */)(struct inode * ))0)) {
    {
#line 281
    (*((pipe->ops)->release_pipe))(inode);
    }
  } else {

  }
  out: 
  {
#line 283
  mutex_unlock(& inode->i_mutex);
  }
#line 284
  return (0);
}
}
#line 288 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static ssize_t rpc_pipe_read(struct file *filp , char *buf , size_t len , loff_t *offset ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  struct rpc_pipe *pipe ;
  struct rpc_pipe_msg *msg ;
  int res ;
  struct rpc_inode *tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  ssize_t tmp___2 ;

  {
  {
#line 290
  tmp = file_inode(filp);
#line 290
  inode = tmp;
#line 293
  res = 0;
#line 295
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 296
  tmp___0 = RPC_I(inode);
#line 296
  pipe = tmp___0->pipe;
  }
#line 297
  if ((unsigned long )pipe == (unsigned long )((struct rpc_pipe *)0)) {
#line 298
    res = -32;
#line 299
    goto out_unlock;
  } else {

  }
#line 301
  msg = (struct rpc_pipe_msg *)filp->private_data;
#line 302
  if ((unsigned long )msg == (unsigned long )((struct rpc_pipe_msg *)0)) {
    {
#line 303
    spin_lock(& pipe->lock);
#line 304
    tmp___1 = list_empty((struct list_head  const  *)(& pipe->pipe));
    }
#line 304
    if (tmp___1 == 0) {
      {
#line 305
      __mptr = (struct list_head  const  *)pipe->pipe.next;
#line 305
      msg = (struct rpc_pipe_msg *)__mptr;
#line 308
      list_move(& msg->list, & pipe->in_upcall);
#line 309
      pipe->pipelen = (int )((unsigned int )pipe->pipelen - (unsigned int )msg->len);
#line 310
      filp->private_data = (void *)msg;
#line 311
      msg->copied = 0UL;
      }
    } else {

    }
    {
#line 313
    spin_unlock(& pipe->lock);
    }
#line 314
    if ((unsigned long )msg == (unsigned long )((struct rpc_pipe_msg *)0)) {
#line 315
      goto out_unlock;
    } else {

    }
  } else {

  }
  {
#line 318
  tmp___2 = (*((pipe->ops)->upcall))(filp, msg, buf, len);
#line 318
  res = (int )tmp___2;
  }
#line 319
  if (res < 0 || msg->len == msg->copied) {
    {
#line 320
    filp->private_data = (void *)0;
#line 321
    spin_lock(& pipe->lock);
#line 322
    list_del_init(& msg->list);
#line 323
    spin_unlock(& pipe->lock);
#line 324
    (*((pipe->ops)->destroy_msg))(msg);
    }
  } else {

  }
  out_unlock: 
  {
#line 327
  mutex_unlock(& inode->i_mutex);
  }
#line 328
  return ((ssize_t )res);
}
}
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static ssize_t rpc_pipe_write(struct file *filp , char const   *buf , size_t len ,
                              loff_t *offset ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  int res ;
  struct rpc_inode *tmp___0 ;
  ssize_t tmp___1 ;
  struct rpc_inode *tmp___2 ;

  {
  {
#line 334
  tmp = file_inode(filp);
#line 334
  inode = tmp;
#line 337
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 338
  res = -32;
#line 339
  tmp___2 = RPC_I(inode);
  }
#line 339
  if ((unsigned long )tmp___2->pipe != (unsigned long )((struct rpc_pipe *)0)) {
    {
#line 340
    tmp___0 = RPC_I(inode);
#line 340
    tmp___1 = (*(((tmp___0->pipe)->ops)->downcall))(filp, buf, len);
#line 340
    res = (int )tmp___1;
    }
  } else {

  }
  {
#line 341
  mutex_unlock(& inode->i_mutex);
  }
#line 342
  return ((ssize_t )res);
}
}
#line 346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static unsigned int rpc_pipe_poll(struct file *filp , struct poll_table_struct *wait ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  struct rpc_inode *rpci ;
  struct rpc_inode *tmp___0 ;
  unsigned int mask ;
  int tmp___1 ;

  {
  {
#line 348
  tmp = file_inode(filp);
#line 348
  inode = tmp;
#line 349
  tmp___0 = RPC_I(inode);
#line 349
  rpci = tmp___0;
#line 350
  mask = 260U;
#line 352
  poll_wait(filp, & rpci->waitq, wait);
#line 354
  mutex_lock_nested(& inode->i_mutex, 0U);
  }
#line 355
  if ((unsigned long )rpci->pipe == (unsigned long )((struct rpc_pipe *)0)) {
#line 356
    mask = mask | 24U;
  } else
#line 357
  if ((unsigned long )filp->private_data != (unsigned long )((void *)0)) {
#line 358
    mask = mask | 65U;
  } else {
    {
#line 357
    tmp___1 = list_empty((struct list_head  const  *)(& (rpci->pipe)->pipe));
    }
#line 357
    if (tmp___1 == 0) {
#line 358
      mask = mask | 65U;
    } else {

    }
  }
  {
#line 359
  mutex_unlock(& inode->i_mutex);
  }
#line 360
  return (mask);
}
}
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static long rpc_pipe_ioctl(struct file *filp , unsigned int cmd , unsigned long arg ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  struct rpc_pipe *pipe ;
  int len ;
  struct rpc_inode *tmp___0 ;
  struct rpc_pipe_msg *msg ;
  int __ret_pu ;
  int __pu_val ;

  {
  {
#line 366
  tmp = file_inode(filp);
#line 366
  inode = tmp;
  }
  {
#line 371
  if (cmd == 21531U) {
#line 371
    goto case_21531;
  } else {

  }
#line 388
  goto switch_default___0;
  case_21531: /* CIL Label */ 
  {
#line 372
  mutex_lock_nested(& inode->i_mutex, 0U);
#line 373
  tmp___0 = RPC_I(inode);
#line 373
  pipe = tmp___0->pipe;
  }
#line 374
  if ((unsigned long )pipe == (unsigned long )((struct rpc_pipe *)0)) {
    {
#line 375
    mutex_unlock(& inode->i_mutex);
    }
#line 376
    return (-32L);
  } else {

  }
  {
#line 378
  spin_lock(& pipe->lock);
#line 379
  len = pipe->pipelen;
  }
#line 380
  if ((unsigned long )filp->private_data != (unsigned long )((void *)0)) {
#line 382
    msg = (struct rpc_pipe_msg *)filp->private_data;
#line 383
    len = (int )((unsigned int )len + ((unsigned int )msg->len - (unsigned int )msg->copied));
  } else {

  }
  {
#line 385
  spin_unlock(& pipe->lock);
#line 386
  mutex_unlock(& inode->i_mutex);
#line 387
  might_fault();
#line 387
  __pu_val = len;
  }
  {
#line 387
  if (4UL == 1UL) {
#line 387
    goto case_1;
  } else {

  }
#line 387
  if (4UL == 2UL) {
#line 387
    goto case_2;
  } else {

  }
#line 387
  if (4UL == 4UL) {
#line 387
    goto case_4;
  } else {

  }
#line 387
  if (4UL == 8UL) {
#line 387
    goto case_8;
  } else {

  }
#line 387
  goto switch_default;
  case_1: /* CIL Label */ 
#line 387
  __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 387
  goto ldv_46951;
  case_2: /* CIL Label */ 
#line 387
  __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 387
  goto ldv_46951;
  case_4: /* CIL Label */ 
#line 387
  __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 387
  goto ldv_46951;
  case_8: /* CIL Label */ 
#line 387
  __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 387
  goto ldv_46951;
  switch_default: /* CIL Label */ 
#line 387
  __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
#line 387
  goto ldv_46951;
  switch_break___0: /* CIL Label */ ;
  }
  ldv_46951: ;
#line 387
  return ((long )__ret_pu);
  switch_default___0: /* CIL Label */ ;
#line 389
  return (-22L);
  switch_break: /* CIL Label */ ;
  }
}
}
#line 393 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct file_operations  const  rpc_pipe_fops  = 
#line 393
     {& __this_module, & no_llseek, & rpc_pipe_read, & rpc_pipe_write, 0, 0, 0, & rpc_pipe_poll,
    & rpc_pipe_ioctl, 0, 0, & rpc_pipe_open, 0, & rpc_pipe_release, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0};
#line 405 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_show_info(struct seq_file *m , void *v ) 
{ 
  struct rpc_clnt *clnt ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
  {
#line 407
  clnt = (struct rpc_clnt *)m->private;
#line 409
  rcu_read_lock();
#line 411
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 411
  tmp = debug_lockdep_rcu_enabled();
  }
#line 411
  if (tmp != 0 && ! __warned) {
    {
#line 411
    tmp___0 = rcu_read_lock_held();
    }
#line 411
    if (tmp___0 == 0) {
      {
#line 411
      __warned = 1;
#line 411
      lockdep_rcu_suspicious("net/sunrpc/rpc_pipe.c", 411, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
  {
#line 411
  seq_printf(m, "RPC server: %s\n", _________p1->servername);
#line 412
  seq_printf(m, "service: %s (%d) version %d\n", clnt->cl_protname, clnt->cl_prog,
             clnt->cl_vers);
#line 414
  tmp___1 = rpc_peeraddr2str(clnt, 0);
#line 414
  seq_printf(m, "address: %s\n", tmp___1);
#line 415
  tmp___2 = rpc_peeraddr2str(clnt, 2);
#line 415
  seq_printf(m, "protocol: %s\n", tmp___2);
#line 416
  tmp___3 = rpc_peeraddr2str(clnt, 1);
#line 416
  seq_printf(m, "port: %s\n", tmp___3);
#line 417
  rcu_read_unlock();
  }
#line 418
  return (0);
}
}
#line 422 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_info_open(struct inode *inode , struct file *file ) 
{ 
  struct rpc_clnt *clnt ;
  int ret ;
  int tmp ;
  struct seq_file *m ;
  struct rpc_inode *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 424
  clnt = (struct rpc_clnt *)0;
#line 425
  tmp = single_open(file, & rpc_show_info, (void *)0);
#line 425
  ret = tmp;
  }
#line 427
  if (ret == 0) {
    {
#line 428
    m = (struct seq_file *)file->private_data;
#line 430
    spin_lock(& (file->f_path.dentry)->d_lock);
#line 431
    tmp___1 = d_unhashed(file->f_path.dentry);
    }
#line 431
    if (tmp___1 == 0) {
      {
#line 432
      tmp___0 = RPC_I(inode);
#line 432
      clnt = (struct rpc_clnt *)tmp___0->private;
      }
    } else {

    }
#line 433
    if ((unsigned long )clnt != (unsigned long )((struct rpc_clnt *)0)) {
      {
#line 433
      tmp___2 = atomic_add_unless(& clnt->cl_count, 1, 0);
      }
#line 433
      if (tmp___2 != 0) {
        {
#line 434
        spin_unlock(& (file->f_path.dentry)->d_lock);
#line 435
        m->private = (void *)clnt;
        }
      } else {
        {
#line 437
        spin_unlock(& (file->f_path.dentry)->d_lock);
#line 438
        single_release(inode, file);
#line 439
        ret = -22;
        }
      }
    } else {
      {
#line 437
      spin_unlock(& (file->f_path.dentry)->d_lock);
#line 438
      single_release(inode, file);
#line 439
      ret = -22;
      }
    }
  } else {

  }
#line 442
  return (ret);
}
}
#line 446 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_info_release(struct inode *inode , struct file *file ) 
{ 
  struct seq_file *m ;
  struct rpc_clnt *clnt ;
  int tmp ;

  {
#line 448
  m = (struct seq_file *)file->private_data;
#line 449
  clnt = (struct rpc_clnt *)m->private;
#line 451
  if ((unsigned long )clnt != (unsigned long )((struct rpc_clnt *)0)) {
    {
#line 452
    rpc_release_client(clnt);
    }
  } else {

  }
  {
#line 453
  tmp = single_release(inode, file);
  }
#line 453
  return (tmp);
}
}
#line 456 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct file_operations  const  rpc_info_operations  = 
#line 456
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & rpc_info_open,
    0, & rpc_info_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 474 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_delete_dentry(struct dentry  const  *dentry ) 
{ 


  {
#line 476
  return (1);
}
}
#line 479 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct dentry_operations  const  rpc_dentry_operations  = 
#line 479
     {0, 0, 0, 0, & rpc_delete_dentry, 0, 0, 0, 0, 0, 0};
#line 484 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct inode *rpc_get_inode(struct super_block *sb , umode_t mode ) 
{ 
  struct inode *inode ;
  struct inode *tmp ;
  unsigned int tmp___0 ;
  struct timespec tmp___1 ;
  struct timespec tmp___2 ;

  {
  {
#line 486
  tmp = new_inode(sb);
#line 486
  inode = tmp;
  }
#line 487
  if ((unsigned long )inode == (unsigned long )((struct inode *)0)) {
#line 488
    return ((struct inode *)0);
  } else {

  }
  {
#line 489
  tmp___0 = get_next_ino();
#line 489
  inode->i_ino = (unsigned long )tmp___0;
#line 490
  inode->i_mode = mode;
#line 491
  tmp___2 = current_kernel_time();
#line 491
  inode->i_ctime = tmp___2;
#line 491
  tmp___1 = tmp___2;
#line 491
  inode->i_mtime = tmp___1;
#line 491
  inode->i_atime = tmp___1;
  }
  {
#line 493
  if (((int )mode & 61440) == 16384) {
#line 493
    goto case_16384;
  } else {

  }
#line 497
  goto switch_default;
  case_16384: /* CIL Label */ 
  {
#line 494
  inode->i_fop = & simple_dir_operations;
#line 495
  inode->i_op = & simple_dir_inode_operations;
#line 496
  inc_nlink(inode);
  }
  switch_default: /* CIL Label */ ;
#line 498
  goto ldv_46996;
  switch_break: /* CIL Label */ ;
  }
  ldv_46996: ;
#line 500
  return (inode);
}
}
#line 503 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int __rpc_create_common(struct inode *dir , struct dentry *dentry , umode_t mode ,
                               struct file_operations  const  *i_fop , void *private ) 
{ 
  struct inode *inode ;

  {
  {
#line 510
  d_drop(dentry);
#line 511
  inode = rpc_get_inode(dir->i_sb, (int )mode);
  }
#line 512
  if ((unsigned long )inode == (unsigned long )((struct inode *)0)) {
#line 513
    goto out_err;
  } else {

  }
  {
#line 514
  inode->i_ino = iunique(dir->i_sb, 100UL);
  }
#line 515
  if ((unsigned long )i_fop != (unsigned long )((struct file_operations  const  *)0)) {
#line 516
    inode->i_fop = i_fop;
  } else {

  }
#line 517
  if ((unsigned long )private != (unsigned long )((void *)0)) {
    {
#line 518
    rpc_inode_setowner(inode, private);
    }
  } else {

  }
  {
#line 519
  d_add(dentry, inode);
  }
#line 520
  return (0);
  out_err: 
  {
#line 522
  printk("\f%s: %s failed to allocate inode for dentry %s\n", (char *)"net/sunrpc/rpc_pipe.c",
         "__rpc_create_common", dentry->d_name.name);
#line 524
  dput(dentry);
  }
#line 525
  return (-12);
}
}
#line 528 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int __rpc_create(struct inode *dir , struct dentry *dentry , umode_t mode ,
                        struct file_operations  const  *i_fop , void *private ) 
{ 
  int err ;

  {
  {
#line 535
  err = __rpc_create_common(dir, dentry, (int )((unsigned int )mode | 32768U), i_fop,
                            private);
  }
#line 536
  if (err != 0) {
#line 537
    return (err);
  } else {

  }
  {
#line 538
  fsnotify_create(dir, dentry);
  }
#line 539
  return (0);
}
}
#line 542 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int __rpc_mkdir(struct inode *dir , struct dentry *dentry , umode_t mode ,
                       struct file_operations  const  *i_fop , void *private ) 
{ 
  int err ;

  {
  {
#line 549
  err = __rpc_create_common(dir, dentry, (int )((unsigned int )mode | 16384U), i_fop,
                            private);
  }
#line 550
  if (err != 0) {
#line 551
    return (err);
  } else {

  }
  {
#line 552
  inc_nlink(dir);
#line 553
  fsnotify_mkdir(dir, dentry);
  }
#line 554
  return (0);
}
}
#line 558 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void init_pipe(struct rpc_pipe *pipe ) 
{ 
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
  {
#line 560
  pipe->nreaders = 0;
#line 561
  pipe->nwriters = 0;
#line 562
  INIT_LIST_HEAD(& pipe->in_upcall);
#line 563
  INIT_LIST_HEAD(& pipe->in_downcall);
#line 564
  INIT_LIST_HEAD(& pipe->pipe);
#line 565
  pipe->pipelen = 0;
#line 566
  __init_work(& pipe->queue_timeout.work, 0);
#line 566
  __constr_expr_0.counter = 137438953408L;
#line 566
  pipe->queue_timeout.work.data = __constr_expr_0;
#line 566
  lockdep_init_map(& pipe->queue_timeout.work.lockdep_map, "(&(&pipe->queue_timeout)->work)",
                   & __key, 0);
#line 566
  INIT_LIST_HEAD(& pipe->queue_timeout.work.entry);
#line 566
  pipe->queue_timeout.work.func = & rpc_timeout_upcall_queue;
#line 566
  init_timer_key(& pipe->queue_timeout.timer, 2U, "(&(&pipe->queue_timeout)->timer)",
                 & __key___0);
#line 566
  pipe->queue_timeout.timer.function = & delayed_work_timer_fn;
#line 566
  pipe->queue_timeout.timer.data = (unsigned long )(& pipe->queue_timeout);
#line 568
  pipe->ops = (struct rpc_pipe_ops  const  *)0;
#line 569
  spinlock_check(& pipe->lock);
#line 569
  __raw_spin_lock_init(& pipe->lock.__annonCompField20.rlock, "&(&pipe->lock)->rlock",
                       & __key___1);
#line 570
  pipe->dentry = (struct dentry *)0;
  }
#line 571
  return;
}
}
#line 573 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
void rpc_destroy_pipe_data(struct rpc_pipe *pipe ) 
{ 


  {
  {
#line 575
  kfree((void const   *)pipe);
  }
#line 576
  return;
}
}
#line 579 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
struct rpc_pipe *rpc_mkpipe_data(struct rpc_pipe_ops  const  *ops , int flags ) 
{ 
  struct rpc_pipe *pipe ;
  void *tmp ;
  void *tmp___0 ;

  {
  {
#line 583
  tmp = kzalloc(376UL, 208U);
#line 583
  pipe = (struct rpc_pipe *)tmp;
  }
#line 584
  if ((unsigned long )pipe == (unsigned long )((struct rpc_pipe *)0)) {
    {
#line 585
    tmp___0 = ERR_PTR(-12L);
    }
#line 585
    return ((struct rpc_pipe *)tmp___0);
  } else {

  }
  {
#line 586
  init_pipe(pipe);
#line 587
  pipe->ops = ops;
#line 588
  pipe->flags = flags;
  }
#line 589
  return (pipe);
}
}
#line 593 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int __rpc_mkpipe_dentry(struct inode *dir , struct dentry *dentry , umode_t mode ,
                               struct file_operations  const  *i_fop , void *private ,
                               struct rpc_pipe *pipe ) 
{ 
  struct rpc_inode *rpci ;
  int err ;

  {
  {
#line 602
  err = __rpc_create_common(dir, dentry, (int )((unsigned int )mode | 4096U), i_fop,
                            private);
  }
#line 603
  if (err != 0) {
#line 604
    return (err);
  } else {

  }
  {
#line 605
  rpci = RPC_I(dentry->d_inode);
#line 606
  rpci->private = private;
#line 607
  rpci->pipe = pipe;
#line 608
  fsnotify_create(dir, dentry);
  }
#line 609
  return (0);
}
}
#line 612 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int __rpc_rmdir(struct inode *dir , struct dentry *dentry ) 
{ 
  int ret ;

  {
  {
#line 616
  dget(dentry);
#line 617
  ret = simple_rmdir(dir, dentry);
#line 618
  d_delete(dentry);
#line 619
  dput(dentry);
  }
#line 620
  return (ret);
}
}
#line 623 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
int rpc_rmdir(struct dentry *dentry ) 
{ 
  struct dentry *parent ;
  struct inode *dir ;
  int error ;

  {
  {
#line 629
  parent = dget_parent(dentry);
#line 630
  dir = parent->d_inode;
#line 631
  mutex_lock_nested(& dir->i_mutex, 1U);
#line 632
  error = __rpc_rmdir(dir, dentry);
#line 633
  mutex_unlock(& dir->i_mutex);
#line 634
  dput(parent);
  }
#line 635
  return (error);
}
}
#line 639 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int __rpc_unlink(struct inode *dir , struct dentry *dentry ) 
{ 
  int ret ;

  {
  {
#line 643
  dget(dentry);
#line 644
  ret = simple_unlink(dir, dentry);
#line 645
  d_delete(dentry);
#line 646
  dput(dentry);
  }
#line 647
  return (ret);
}
}
#line 650 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int __rpc_rmpipe(struct inode *dir , struct dentry *dentry ) 
{ 
  struct inode *inode ;
  int tmp ;

  {
  {
#line 652
  inode = dentry->d_inode;
#line 654
  rpc_close_pipes(inode);
#line 655
  tmp = __rpc_unlink(dir, dentry);
  }
#line 655
  return (tmp);
}
}
#line 658 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct dentry *__rpc_lookup_create_exclusive(struct dentry *parent , struct qstr *name ) 
{ 
  struct dentry *dentry ;
  void *tmp ;
  void *tmp___0 ;

  {
  {
#line 663
  dentry = d_lookup((struct dentry  const  *)parent, (struct qstr  const  *)name);
  }
#line 664
  if ((unsigned long )dentry == (unsigned long )((struct dentry *)0)) {
    {
#line 665
    dentry = d_alloc(parent, (struct qstr  const  *)name);
    }
#line 666
    if ((unsigned long )dentry == (unsigned long )((struct dentry *)0)) {
      {
#line 667
      tmp = ERR_PTR(-12L);
      }
#line 667
      return ((struct dentry *)tmp);
    } else {

    }
  } else {

  }
#line 669
  if ((unsigned long )dentry->d_inode == (unsigned long )((struct inode *)0)) {
    {
#line 670
    d_set_d_op(dentry, & rpc_dentry_operations);
    }
#line 671
    return (dentry);
  } else {

  }
  {
#line 673
  dput(dentry);
#line 674
  tmp___0 = ERR_PTR(-17L);
  }
#line 674
  return ((struct dentry *)tmp___0);
}
}
#line 680 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void __rpc_depopulate(struct dentry *parent , struct rpc_filelist  const  *files___0 ,
                             int start , int eof ) 
{ 
  struct inode *dir ;
  struct dentry *dentry ;
  struct qstr name ;
  int i ;
  size_t tmp ;

  {
#line 684
  dir = parent->d_inode;
#line 689
  i = start;
#line 689
  goto ldv_47110;
  ldv_47109: 
  {
#line 690
  name.name = (unsigned char const   *)(files___0 + (unsigned long )i)->name;
#line 691
  tmp = strlen((files___0 + (unsigned long )i)->name);
#line 691
  name.__annonCompField41.__annonCompField40.len = (u32 )tmp;
#line 692
  name.__annonCompField41.__annonCompField40.hash = full_name_hash(name.name, name.__annonCompField41.__annonCompField40.len);
#line 693
  dentry = d_lookup((struct dentry  const  *)parent, (struct qstr  const  *)(& name));
  }
#line 695
  if ((unsigned long )dentry == (unsigned long )((struct dentry *)0)) {
#line 696
    goto ldv_47103;
  } else {

  }
#line 697
  if ((unsigned long )dentry->d_inode == (unsigned long )((struct inode *)0)) {
#line 698
    goto next;
  } else {

  }
  {
#line 702
  if (((int )(dentry->d_inode)->i_mode & 61440) == 32768) {
#line 702
    goto case_32768;
  } else {

  }
#line 705
  if (((int )(dentry->d_inode)->i_mode & 61440) == 16384) {
#line 705
    goto case_16384;
  } else {

  }
#line 700
  goto switch_default;
  switch_default: /* CIL Label */ 
  {
#line 701
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/rpc_pipe.c"),
                       "i" (701), "i" (12UL));
#line 701
  __builtin_unreachable();
  }
  case_32768: /* CIL Label */ 
  {
#line 703
  __rpc_unlink(dir, dentry);
  }
#line 704
  goto ldv_47107;
  case_16384: /* CIL Label */ 
  {
#line 706
  __rpc_rmdir(dir, dentry);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_47107: ;
  next: 
  {
#line 709
  dput(dentry);
  }
  ldv_47103: 
#line 689
  i = i + 1;
  ldv_47110: ;
#line 689
  if (i < eof) {
#line 691
    goto ldv_47109;
  } else {

  }

#line 696
  return;
}
}
#line 713 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_depopulate(struct dentry *parent , struct rpc_filelist  const  *files___0 ,
                           int start , int eof ) 
{ 
  struct inode *dir ;

  {
  {
#line 717
  dir = parent->d_inode;
#line 719
  mutex_lock_nested(& dir->i_mutex, 2U);
#line 720
  __rpc_depopulate(parent, files___0, start, eof);
#line 721
  mutex_unlock(& dir->i_mutex);
  }
#line 722
  return;
}
}
#line 724 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_populate(struct dentry *parent , struct rpc_filelist  const  *files___0 ,
                        int start , int eof , void *private ) 
{ 
  struct inode *dir ;
  struct dentry *dentry ;
  int i ;
  int err ;
  struct qstr q ;
  size_t tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
  {
#line 729
  dir = parent->d_inode;
#line 733
  mutex_lock_nested(& dir->i_mutex, 0U);
#line 734
  i = start;
  }
#line 734
  goto ldv_47137;
  ldv_47136: 
  {
#line 737
  q.name = (unsigned char const   *)(files___0 + (unsigned long )i)->name;
#line 738
  tmp = strlen((files___0 + (unsigned long )i)->name);
#line 738
  q.__annonCompField41.__annonCompField40.len = (u32 )tmp;
#line 739
  q.__annonCompField41.__annonCompField40.hash = full_name_hash(q.name, q.__annonCompField41.__annonCompField40.len);
#line 740
  dentry = __rpc_lookup_create_exclusive(parent, & q);
#line 741
  tmp___0 = PTR_ERR((void const   *)dentry);
#line 741
  err = (int )tmp___0;
#line 742
  tmp___1 = IS_ERR((void const   *)dentry);
  }
#line 742
  if (tmp___1 != 0L) {
#line 743
    goto out_bad;
  } else {

  }
  {
#line 747
  if (((int )(files___0 + (unsigned long )i)->mode & 61440) == 32768) {
#line 747
    goto case_32768;
  } else {

  }
#line 753
  if (((int )(files___0 + (unsigned long )i)->mode & 61440) == 16384) {
#line 753
    goto case_16384;
  } else {

  }
#line 745
  goto switch_default;
  switch_default: /* CIL Label */ 
  {
#line 746
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/rpc_pipe.c"),
                       "i" (746), "i" (12UL));
#line 746
  __builtin_unreachable();
  }
  case_32768: /* CIL Label */ 
  {
#line 748
  err = __rpc_create(dir, dentry, (int )(files___0 + (unsigned long )i)->mode, (files___0 + (unsigned long )i)->i_fop,
                     private);
  }
#line 752
  goto ldv_47134;
  case_16384: /* CIL Label */ 
  {
#line 754
  err = __rpc_mkdir(dir, dentry, (int )(files___0 + (unsigned long )i)->mode, (struct file_operations  const  *)0,
                    private);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_47134: ;
#line 759
  if (err != 0) {
#line 760
    goto out_bad;
  } else {

  }
#line 734
  i = i + 1;
  ldv_47137: ;
#line 734
  if (i < eof) {
#line 736
    goto ldv_47136;
  } else {

  }
  {
#line 762
  mutex_unlock(& dir->i_mutex);
  }
#line 763
  return (0);
  out_bad: 
  {
#line 765
  __rpc_depopulate(parent, files___0, start, eof);
#line 766
  mutex_unlock(& dir->i_mutex);
#line 767
  printk("\f%s: %s failed to populate directory %s\n", (char *)"net/sunrpc/rpc_pipe.c",
         "rpc_populate", parent->d_name.name);
  }
#line 769
  return (err);
}
}
#line 772 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct dentry *rpc_mkdir_populate(struct dentry *parent , struct qstr *name ,
                                         umode_t mode , void *private , int (*populate)(struct dentry * ,
                                                                                        void * ) ,
                                         void *args_populate ) 
{ 
  struct dentry *dentry ;
  struct inode *dir ;
  int error ;
  long tmp ;
  void *tmp___0 ;

  {
  {
#line 777
  dir = parent->d_inode;
#line 780
  mutex_lock_nested(& dir->i_mutex, 1U);
#line 781
  dentry = __rpc_lookup_create_exclusive(parent, name);
#line 782
  tmp = IS_ERR((void const   *)dentry);
  }
#line 782
  if (tmp != 0L) {
#line 783
    goto out;
  } else {

  }
  {
#line 784
  error = __rpc_mkdir(dir, dentry, (int )mode, (struct file_operations  const  *)0,
                      private);
  }
#line 785
  if (error != 0) {
#line 786
    goto out_err;
  } else {

  }
#line 787
  if ((unsigned long )populate != (unsigned long )((int (*)(struct dentry * , void * ))0)) {
    {
#line 788
    error = (*populate)(dentry, args_populate);
    }
#line 789
    if (error != 0) {
#line 790
      goto err_rmdir;
    } else {

    }
  } else {

  }
  out: 
  {
#line 793
  mutex_unlock(& dir->i_mutex);
  }
#line 794
  return (dentry);
  err_rmdir: 
  {
#line 796
  __rpc_rmdir(dir, dentry);
  }
  out_err: 
  {
#line 798
  tmp___0 = ERR_PTR((long )error);
#line 798
  dentry = (struct dentry *)tmp___0;
  }
#line 799
  goto out;
}
}
#line 802 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_rmdir_depopulate(struct dentry *dentry , void (*depopulate)(struct dentry * ) ) 
{ 
  struct dentry *parent ;
  struct inode *dir ;
  int error ;

  {
  {
#line 809
  parent = dget_parent(dentry);
#line 810
  dir = parent->d_inode;
#line 811
  mutex_lock_nested(& dir->i_mutex, 1U);
  }
#line 812
  if ((unsigned long )depopulate != (unsigned long )((void (*)(struct dentry * ))0)) {
    {
#line 813
    (*depopulate)(dentry);
    }
  } else {

  }
  {
#line 814
  error = __rpc_rmdir(dir, dentry);
#line 815
  mutex_unlock(& dir->i_mutex);
#line 816
  dput(parent);
  }
#line 817
  return (error);
}
}
#line 838 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
struct dentry *rpc_mkpipe_dentry(struct dentry *parent , char const   *name , void *private ,
                                 struct rpc_pipe *pipe ) 
{ 
  struct dentry *dentry ;
  struct inode *dir ;
  umode_t umode ;
  struct qstr q ;
  int err ;
  size_t tmp ;
  long tmp___0 ;
  void *tmp___1 ;

  {
#line 842
  dir = parent->d_inode;
#line 843
  umode = 4480U;
#line 847
  if ((unsigned long )(pipe->ops)->upcall == (unsigned long )((ssize_t (*/* const  */)(struct file * ,
                                                                                       struct rpc_pipe_msg * ,
                                                                                       char * ,
                                                                                       size_t  ))0)) {
#line 848
    umode = (unsigned int )umode & 65243U;
  } else {

  }
#line 849
  if ((unsigned long )(pipe->ops)->downcall == (unsigned long )((ssize_t (*/* const  */)(struct file * ,
                                                                                         char const   * ,
                                                                                         size_t  ))0)) {
#line 850
    umode = (unsigned int )umode & 65389U;
  } else {

  }
  {
#line 852
  q.name = (unsigned char const   *)name;
#line 853
  tmp = strlen(name);
#line 853
  q.__annonCompField41.__annonCompField40.len = (u32 )tmp;
#line 854
  q.__annonCompField41.__annonCompField40.hash = full_name_hash(q.name, q.__annonCompField41.__annonCompField40.len);
#line 854
  mutex_lock_nested(& dir->i_mutex, 1U);
#line 857
  dentry = __rpc_lookup_create_exclusive(parent, & q);
#line 858
  tmp___0 = IS_ERR((void const   *)dentry);
  }
#line 858
  if (tmp___0 != 0L) {
#line 859
    goto out;
  } else {

  }
  {
#line 860
  err = __rpc_mkpipe_dentry(dir, dentry, (int )umode, & rpc_pipe_fops, private, pipe);
  }
#line 862
  if (err != 0) {
#line 863
    goto out_err;
  } else {

  }
  out: 
  {
#line 865
  mutex_unlock(& dir->i_mutex);
  }
#line 866
  return (dentry);
  out_err: 
  {
#line 868
  tmp___1 = ERR_PTR((long )err);
#line 868
  dentry = (struct dentry *)tmp___1;
#line 869
  printk("\f%s: %s() failed to create pipe %s/%s (errno = %d)\n", (char *)"net/sunrpc/rpc_pipe.c",
         "rpc_mkpipe_dentry", parent->d_name.name, name, err);
  }
#line 872
  goto out;
}
}
#line 885 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
int rpc_unlink(struct dentry *dentry ) 
{ 
  struct dentry *parent ;
  struct inode *dir ;
  int error ;

  {
  {
#line 889
  error = 0;
#line 891
  parent = dget_parent(dentry);
#line 892
  dir = parent->d_inode;
#line 893
  mutex_lock_nested(& dir->i_mutex, 1U);
#line 894
  error = __rpc_rmpipe(dir, dentry);
#line 895
  mutex_unlock(& dir->i_mutex);
#line 896
  dput(parent);
  }
#line 897
  return (error);
}
}
#line 906 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct rpc_filelist  const  authfiles[1U]  = {      {"info", & rpc_info_operations, 33024U}};
#line 914 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_clntdir_populate(struct dentry *dentry , void *private ) 
{ 
  int tmp ;

  {
  {
#line 916
  tmp = rpc_populate(dentry, (struct rpc_filelist  const  *)(& authfiles), 0, 1, private);
  }
#line 916
  return (tmp);
}
}
#line 921 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_clntdir_depopulate(struct dentry *dentry ) 
{ 


  {
  {
#line 923
  rpc_depopulate(dentry, (struct rpc_filelist  const  *)(& authfiles), 0, 1);
  }
#line 924
  return;
}
}
#line 937 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
struct dentry *rpc_create_client_dir(struct dentry *dentry , struct qstr *name , struct rpc_clnt *rpc_client ) 
{ 
  struct dentry *tmp ;

  {
  {
#line 941
  tmp = rpc_mkdir_populate(dentry, name, 365, (void *)0, & rpc_clntdir_populate, (void *)rpc_client);
  }
#line 941
  return (tmp);
}
}
#line 949 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
int rpc_remove_client_dir(struct dentry *dentry ) 
{ 
  int tmp ;

  {
  {
#line 951
  tmp = rpc_rmdir_depopulate(dentry, & rpc_clntdir_depopulate);
  }
#line 951
  return (tmp);
}
}
#line 954 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct rpc_filelist  const  cache_pipefs_files[3U]  = {      {"channel", & cache_file_operations_pipefs, 33152U}, 
        {"content", & content_file_operations_pipefs, 33024U}, 
        {"flush", & cache_flush_operations_pipefs, 33152U}};
#line 972 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_cachedir_populate(struct dentry *dentry , void *private ) 
{ 
  int tmp ;

  {
  {
#line 974
  tmp = rpc_populate(dentry, (struct rpc_filelist  const  *)(& cache_pipefs_files),
                     0, 3, private);
  }
#line 974
  return (tmp);
}
}
#line 979 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_cachedir_depopulate(struct dentry *dentry ) 
{ 


  {
  {
#line 981
  rpc_depopulate(dentry, (struct rpc_filelist  const  *)(& cache_pipefs_files), 0,
                 3);
  }
#line 982
  return;
}
}
#line 984 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
struct dentry *rpc_create_cache_dir(struct dentry *parent , struct qstr *name , umode_t umode ,
                                    struct cache_detail *cd ) 
{ 
  struct dentry *tmp ;

  {
  {
#line 987
  tmp = rpc_mkdir_populate(parent, name, (int )umode, (void *)0, & rpc_cachedir_populate,
                           (void *)cd);
  }
#line 987
  return (tmp);
}
}
#line 991 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
void rpc_remove_cache_dir(struct dentry *dentry ) 
{ 


  {
  {
#line 993
  rpc_rmdir_depopulate(dentry, & rpc_cachedir_depopulate);
  }
#line 994
  return;
}
}
#line 999 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct super_operations  const  s_ops  = 
#line 999
     {& rpc_alloc_inode, & rpc_destroy_inode, 0, 0, 0, 0, 0, 0, 0, 0, & simple_statfs,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 1022 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct rpc_filelist  const  files[8U]  = 
#line 1022
  {      {"lockd", 0, 16749U}, 
        {"mount", 0, 16749U}, 
        {"nfs", 0, 16749U}, 
        {"portmap", 0, 16749U}, 
        {"statd", 0, 16749U}, 
        {"nfsd4_cb", 0, 16749U}, 
        {"cache", 0, 16749U}, 
        {"nfsd", 0, 16749U}};
#line 1060 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
struct dentry *rpc_d_lookup_sb(struct super_block  const  *sb , unsigned char const   *dir_name ) 
{ 
  struct qstr dir ;
  size_t tmp ;
  struct dentry *tmp___0 ;

  {
  {
#line 1063
  tmp = strlen((char const   *)dir_name);
#line 1063
  dir.__annonCompField41.__annonCompField40.hash = 0U;
#line 1063
  dir.__annonCompField41.__annonCompField40.len = (unsigned int )tmp;
#line 1063
  dir.name = dir_name;
#line 1065
  dir.__annonCompField41.__annonCompField40.hash = full_name_hash(dir.name, dir.__annonCompField41.__annonCompField40.len);
#line 1066
  tmp___0 = d_lookup((struct dentry  const  *)sb->s_root, (struct qstr  const  *)(& dir));
  }
#line 1066
  return (tmp___0);
}
}
#line 1070 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
void rpc_pipefs_init_net(struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  struct lock_class_key __key ;

  {
  {
#line 1072
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 1072
  sn = (struct sunrpc_net *)tmp;
#line 1074
  __mutex_init(& sn->pipefs_sb_lock, "&sn->pipefs_sb_lock", & __key);
#line 1075
  sn->gssd_running = 1U;
#line 1076
  sn->pipe_version = -1;
  }
#line 1077
  return;
}
}
#line 1085 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
struct super_block *rpc_get_sb_net(struct net  const  *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;

  {
  {
#line 1087
  tmp = net_generic(net, sunrpc_net_id);
#line 1087
  sn = (struct sunrpc_net *)tmp;
#line 1089
  mutex_lock_nested(& sn->pipefs_sb_lock, 0U);
  }
#line 1090
  if ((unsigned long )sn->pipefs_sb != (unsigned long )((struct super_block *)0)) {
#line 1091
    return (sn->pipefs_sb);
  } else {

  }
  {
#line 1092
  mutex_unlock(& sn->pipefs_sb_lock);
  }
#line 1093
  return ((struct super_block *)0);
}
}
#line 1097 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
void rpc_put_sb_net(struct net  const  *net ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;
  int __ret_warn_on ;
  long tmp___0 ;

  {
  {
#line 1099
  tmp = net_generic(net, sunrpc_net_id);
#line 1099
  sn = (struct sunrpc_net *)tmp;
#line 1101
  __ret_warn_on = (unsigned long )sn->pipefs_sb == (unsigned long )((struct super_block *)0);
#line 1101
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
  }
#line 1101
  if (tmp___0 != 0L) {
    {
#line 1101
    warn_slowpath_null("net/sunrpc/rpc_pipe.c", 1101);
    }
  } else {

  }
  {
#line 1101
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 1102
  mutex_unlock(& sn->pipefs_sb_lock);
  }
#line 1103
  return;
}
}
#line 1107 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static int rpc_fill_super(struct super_block *sb , void *data , int silent ) 
{ 
  struct inode *inode ;
  struct dentry *root ;
  struct net *net ;
  struct sunrpc_net *sn ;
  void *tmp ;
  int err ;
  int tmp___0 ;
  long tmp___1 ;
  struct net *tmp___2 ;

  {
  {
#line 1111
  net = (struct net *)data;
#line 1112
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 1112
  sn = (struct sunrpc_net *)tmp;
#line 1115
  sb->s_blocksize = 4096UL;
#line 1116
  sb->s_blocksize_bits = 12U;
#line 1117
  sb->s_magic = 1733912937UL;
#line 1118
  sb->s_op = & s_ops;
#line 1119
  sb->s_time_gran = 1U;
#line 1121
  inode = rpc_get_inode(sb, 16749);
#line 1122
  root = d_make_root(inode);
#line 1122
  sb->s_root = root;
  }
#line 1123
  if ((unsigned long )root == (unsigned long )((struct dentry *)0)) {
#line 1124
    return (-12);
  } else {

  }
  {
#line 1125
  tmp___0 = rpc_populate(root, (struct rpc_filelist  const  *)(& files), 0, 8, (void *)0);
  }
#line 1125
  if (tmp___0 != 0) {
#line 1126
    return (-12);
  } else {

  }
  {
#line 1127
  tmp___1 = __builtin_expect((rpc_debug & 4U) != 0U, 0L);
  }
#line 1127
  if (tmp___1 != 0L) {
    {
#line 1127
    printk("\001dRPC:       sending pipefs MOUNT notification for net %p%s\n", net,
           (unsigned long )net == (unsigned long )(& init_net) ? (char *)" (init_net)" : (char *)"");
    }
  } else {

  }
  {
#line 1129
  sn->pipefs_sb = sb;
#line 1130
  err = blocking_notifier_call_chain(& rpc_pipefs_notifier_list, 0UL, (void *)sb);
  }
#line 1133
  if (err != 0) {
#line 1134
    goto err_depopulate;
  } else {

  }
  {
#line 1135
  tmp___2 = get_net(net);
#line 1135
  sb->s_fs_info = (void *)tmp___2;
  }
#line 1136
  return (0);
  err_depopulate: 
  {
#line 1139
  blocking_notifier_call_chain(& rpc_pipefs_notifier_list, 1UL, (void *)sb);
#line 1142
  sn->pipefs_sb = (struct super_block *)0;
#line 1143
  __rpc_depopulate(root, (struct rpc_filelist  const  *)(& files), 0, 8);
  }
#line 1144
  return (err);
}
}
#line 1148 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct dentry *rpc_mount(struct file_system_type *fs_type , int flags , char const   *dev_name___0 ,
                                void *data ) 
{ 
  struct task_struct *tmp ;
  struct dentry *tmp___0 ;

  {
  {
#line 1151
  tmp = get_current();
#line 1151
  tmp___0 = mount_ns(fs_type, flags, (void *)(tmp->nsproxy)->net_ns, & rpc_fill_super);
  }
#line 1151
  return (tmp___0);
}
}
#line 1154 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void rpc_kill_sb(struct super_block *sb ) 
{ 
  struct net *net ;
  struct sunrpc_net *sn ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 1156
  net = (struct net *)sb->s_fs_info;
#line 1157
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 1157
  sn = (struct sunrpc_net *)tmp;
#line 1159
  mutex_lock_nested(& sn->pipefs_sb_lock, 0U);
  }
#line 1160
  if ((unsigned long )sn->pipefs_sb != (unsigned long )sb) {
    {
#line 1161
    mutex_unlock(& sn->pipefs_sb_lock);
    }
#line 1162
    goto out;
  } else {

  }
  {
#line 1164
  sn->pipefs_sb = (struct super_block *)0;
#line 1165
  mutex_unlock(& sn->pipefs_sb_lock);
#line 1166
  tmp___0 = __builtin_expect((rpc_debug & 4U) != 0U, 0L);
  }
#line 1166
  if (tmp___0 != 0L) {
    {
#line 1166
    printk("\001dRPC:       sending pipefs UMOUNT notification for net %p%s\n", net,
           (unsigned long )net == (unsigned long )(& init_net) ? (char *)" (init_net)" : (char *)"");
    }
  } else {

  }
  {
#line 1168
  blocking_notifier_call_chain(& rpc_pipefs_notifier_list, 1UL, (void *)sb);
#line 1171
  put_net(net);
  }
  out: 
  {
#line 1173
  kill_litter_super(sb);
  }
#line 1174
  return;
}
}
#line 1176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static struct file_system_type rpc_pipe_fs_type  = 
#line 1176
     {"rpc_pipefs", 0, & rpc_mount, & rpc_kill_sb, & __this_module, 0, {0}, {{{(char)0},
                                                                            {(char)0},
                                                                            {(char)0},
                                                                            {(char)0},
                                                                            {(char)0},
                                                                            {(char)0},
                                                                            {(char)0},
                                                                            {(char)0}}},
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                     {(char)0}, {(char)0}}}, {{{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}},
                                              {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}},
                                              {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                                {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
      {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                     {(char)0}, {(char)0}}}, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                               {(char)0}, {(char)0}, {(char)0}, {(char)0}}}};
#line 1186 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
static void init_once(void *foo ) 
{ 
  struct rpc_inode *rpci ;
  struct lock_class_key __key ;

  {
  {
#line 1188
  rpci = (struct rpc_inode *)foo;
#line 1190
  inode_init_once(& rpci->vfs_inode);
#line 1191
  rpci->private = (void *)0;
#line 1192
  rpci->pipe = (struct rpc_pipe *)0;
#line 1193
  __init_waitqueue_head(& rpci->waitq, "&rpci->waitq", & __key);
  }
#line 1195
  return;
}
}
#line 1196 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
int register_rpc_pipefs(void) 
{ 
  int err ;

  {
  {
#line 1200
  rpc_inode_cachep = kmem_cache_create("rpc_inode_cache", 1136UL, 0UL, 1187840UL,
                                       & init_once);
  }
#line 1205
  if ((unsigned long )rpc_inode_cachep == (unsigned long )((struct kmem_cache *)0)) {
#line 1206
    return (-12);
  } else {

  }
  {
#line 1207
  err = rpc_clients_notifier_register();
  }
#line 1208
  if (err != 0) {
#line 1209
    goto err_notifier;
  } else {

  }
  {
#line 1210
  err = register_filesystem(& rpc_pipe_fs_type);
  }
#line 1211
  if (err != 0) {
#line 1212
    goto err_register;
  } else {

  }
#line 1213
  return (0);
  err_register: 
  {
#line 1216
  rpc_clients_notifier_unregister();
  }
  err_notifier: 
  {
#line 1218
  kmem_cache_destroy(rpc_inode_cachep);
  }
#line 1219
  return (err);
}
}
#line 1222 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/rpc_pipe.c"
void unregister_rpc_pipefs(void) 
{ 


  {
  {
#line 1224
  rpc_clients_notifier_unregister();
#line 1225
  kmem_cache_destroy(rpc_inode_cachep);
#line 1226
  unregister_filesystem(& rpc_pipe_fs_type);
  }
#line 1227
  return;
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_8_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 80
void ldv_character_driver_scenario_callback_8_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 81
void ldv_character_driver_scenario_callback_8_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) ;
#line 82
void ldv_character_driver_scenario_callback_8_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) ;
#line 83
void ldv_character_driver_scenario_callback_9_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 84
void ldv_character_driver_scenario_callback_9_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) ;
#line 85
void ldv_character_driver_scenario_callback_9_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) ;
#line 86
void ldv_character_driver_scenario_callback_9_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) ;
#line 87
int ldv_character_driver_scenario_probe_8_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 88
int ldv_character_driver_scenario_probe_9_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) ;
#line 89
void ldv_character_driver_scenario_release_8_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 90
void ldv_character_driver_scenario_release_9_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) ;
#line 91
void ldv_character_driver_scenario_write_8_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 92
void ldv_character_driver_scenario_write_9_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) ;
#line 106 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_8(void *arg0 ) 
{ 
  loff_t (*ldv_8_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  unsigned int (*ldv_8_callback_poll)(struct file * , struct poll_table_struct * ) ;
  ssize_t (*ldv_8_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_8_callback_unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
  struct file_operations *ldv_8_container_file_operations ;
  struct poll_table_struct *ldv_8_ldv_param_22_1_default ;
  char *ldv_8_ldv_param_25_1_default ;
  long long *ldv_8_ldv_param_25_3_default ;
  unsigned int ldv_8_ldv_param_28_1_default ;
  char *ldv_8_ldv_param_4_1_default ;
  long long *ldv_8_ldv_param_4_3_default ;
  long long ldv_8_ldv_param_5_1_default ;
  int ldv_8_ldv_param_5_2_default ;
  struct file *ldv_8_resource_file ;
  struct inode *ldv_8_resource_inode ;
  int ldv_8_ret_default ;
  size_t ldv_8_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 128
  ldv_8_ret_default = ldv_undef_int();
#line 130
  ldv_free(arg0);
#line 134
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 134
  ldv_8_container_file_operations = (struct file_operations *)tmp;
#line 138
  tmp___0 = ldv_xmalloc(360UL);
#line 138
  ldv_8_resource_file = (struct file *)tmp___0;
#line 139
  tmp___1 = ldv_xmalloc(1032UL);
#line 139
  ldv_8_resource_inode = (struct inode *)tmp___1;
#line 140
  tmp___2 = ldv_undef_int();
#line 140
  ldv_8_size_cnt_write_size = (size_t )tmp___2;
  }
#line 147
  goto ldv_main_8;
#line 149
  return;
  ldv_main_8: 
  {
#line 155
  tmp___4 = ldv_undef_int();
  }
#line 155
  if (tmp___4 != 0) {
    {
#line 158
    ldv_8_ret_default = ldv_character_driver_scenario_probe_8_13(ldv_8_container_file_operations->open,
                                                                 ldv_8_resource_inode,
                                                                 ldv_8_resource_file);
#line 160
    ldv_8_ret_default = ldv_filter_err_code(ldv_8_ret_default);
#line 163
    tmp___3 = ldv_undef_int();
    }
#line 163
    if (tmp___3 != 0) {
      {
#line 165
      __VERIFIER_assume(ldv_8_ret_default == 0);
      }
#line 172
      goto ldv_call_8;
    } else {
      {
#line 176
      __VERIFIER_assume(ldv_8_ret_default != 0);
      }
#line 183
      goto ldv_main_8;
    }
  } else {
    {
#line 188
    ldv_free((void *)ldv_8_resource_file);
#line 189
    ldv_free((void *)ldv_8_resource_inode);
#line 193
    ldv_free((void *)ldv_8_container_file_operations);
    }
#line 201
    return;
  }
#line 204
  return;
  ldv_call_8: 
  {
#line 210
  tmp___5 = ldv_undef_int();
  }
  {
#line 211
  if (tmp___5 == 1) {
#line 211
    goto case_1;
  } else {

  }
#line 242
  if (tmp___5 == 2) {
#line 242
    goto case_2;
  } else {

  }
#line 255
  if (tmp___5 == 3) {
#line 255
    goto case_3;
  } else {

  }
#line 324
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 213
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 213
  ldv_8_ldv_param_4_1_default = (char *)tmp___6;
#line 214
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 214
  ldv_8_ldv_param_4_3_default = (long long *)tmp___7;
#line 223
  __VERIFIER_assume(ldv_8_size_cnt_write_size <= 2147479552UL);
  }
#line 224
  if ((unsigned long )ldv_8_container_file_operations->write != (unsigned long )((ssize_t (*)(struct file * ,
                                                                                              char const   * ,
                                                                                              size_t  ,
                                                                                              loff_t * ))0)) {
    {
#line 226
    ldv_character_driver_scenario_write_8_4((ssize_t (*)(struct file * , char * ,
                                                         size_t  , loff_t * ))ldv_8_container_file_operations->write,
                                            ldv_8_resource_file, ldv_8_ldv_param_4_1_default,
                                            ldv_8_size_cnt_write_size, ldv_8_ldv_param_4_3_default);
    }
  } else {

  }
  {
#line 231
  ldv_free((void *)ldv_8_ldv_param_4_1_default);
#line 232
  ldv_free((void *)ldv_8_ldv_param_4_3_default);
  }
#line 239
  goto ldv_call_8;
  case_2: /* CIL Label */ 
  {
#line 245
  ldv_character_driver_scenario_release_8_2(ldv_8_container_file_operations->release,
                                            ldv_8_resource_inode, ldv_8_resource_file);
  }
#line 252
  goto ldv_main_8;
  case_3: /* CIL Label */ 
  {
#line 259
  tmp___8 = ldv_undef_int();
  }
  {
#line 260
  if (tmp___8 == 1) {
#line 260
    goto case_1___0;
  } else {

  }
#line 276
  if (tmp___8 == 2) {
#line 276
    goto case_2___0;
  } else {

  }
#line 294
  if (tmp___8 == 3) {
#line 294
    goto case_3___0;
  } else {

  }
#line 312
  if (tmp___8 == 4) {
#line 312
    goto case_4;
  } else {

  }
#line 320
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 265
  if ((unsigned long )ldv_8_callback_unlocked_ioctl != (unsigned long )((long (*)(struct file * ,
                                                                                  unsigned int  ,
                                                                                  unsigned long  ))0)) {
    {
#line 267
    ldv_character_driver_scenario_callback_8_28(ldv_8_callback_unlocked_ioctl, ldv_8_resource_file,
                                                ldv_8_ldv_param_28_1_default, ldv_8_size_cnt_write_size);
    }
  } else {

  }
#line 274
  goto ldv_47535;
  case_2___0: /* CIL Label */ 
  {
#line 278
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 278
  ldv_8_ldv_param_25_1_default = (char *)tmp___9;
#line 279
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 279
  ldv_8_ldv_param_25_3_default = (long long *)tmp___10;
#line 284
  ldv_character_driver_scenario_callback_8_25(ldv_8_callback_read, ldv_8_resource_file,
                                              ldv_8_ldv_param_25_1_default, ldv_8_size_cnt_write_size,
                                              ldv_8_ldv_param_25_3_default);
#line 288
  ldv_free((void *)ldv_8_ldv_param_25_1_default);
#line 289
  ldv_free((void *)ldv_8_ldv_param_25_3_default);
  }
#line 292
  goto ldv_47535;
  case_3___0: /* CIL Label */ 
  {
#line 296
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 296
  ldv_8_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
  }
#line 300
  if ((unsigned long )ldv_8_callback_poll != (unsigned long )((unsigned int (*)(struct file * ,
                                                                                struct poll_table_struct * ))0)) {
    {
#line 302
    ldv_character_driver_scenario_callback_8_22(ldv_8_callback_poll, ldv_8_resource_file,
                                                ldv_8_ldv_param_22_1_default);
    }
  } else {

  }
  {
#line 307
  ldv_free((void *)ldv_8_ldv_param_22_1_default);
  }
#line 310
  goto ldv_47535;
  case_4: /* CIL Label */ 
  {
#line 315
  ldv_character_driver_scenario_callback_8_5(ldv_8_callback_llseek, ldv_8_resource_file,
                                             ldv_8_ldv_param_5_1_default, ldv_8_ldv_param_5_2_default);
  }
#line 318
  goto ldv_47535;
  switch_default: /* CIL Label */ 
  {
#line 320
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_47535: ;
#line 322
  goto ldv_47540;
  switch_default___0: /* CIL Label */ 
  {
#line 324
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_47540: ;
#line 333
  goto ldv_call_8;
#line 335
  return;
}
}
#line 340 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_9(void *arg0 ) 
{ 
  loff_t (*ldv_9_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  u32 (*ldv_9_callback_poll)(struct file * , poll_table * ) ;
  ssize_t (*ldv_9_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  ssize_t (*ldv_9_callback_unlocked_ioctl)(struct file * , u32  , size_t  ) ;
  struct file_operations *ldv_9_container_file_operations ;
  struct poll_table_struct *ldv_9_ldv_param_22_1_default ;
  char *ldv_9_ldv_param_25_1_default ;
  long long *ldv_9_ldv_param_25_3_default ;
  unsigned int ldv_9_ldv_param_28_1_default ;
  char *ldv_9_ldv_param_4_1_default ;
  long long *ldv_9_ldv_param_4_3_default ;
  long long ldv_9_ldv_param_5_1_default ;
  int ldv_9_ldv_param_5_2_default ;
  struct file *ldv_9_resource_file ;
  struct inode *ldv_9_resource_inode ;
  int ldv_9_ret_default ;
  size_t ldv_9_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 362
  ldv_9_ret_default = ldv_undef_int();
#line 364
  ldv_free(arg0);
#line 368
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 368
  ldv_9_container_file_operations = (struct file_operations *)tmp;
#line 372
  tmp___0 = ldv_xmalloc(360UL);
#line 372
  ldv_9_resource_file = (struct file *)tmp___0;
#line 373
  tmp___1 = ldv_xmalloc(1032UL);
#line 373
  ldv_9_resource_inode = (struct inode *)tmp___1;
#line 374
  tmp___2 = ldv_undef_int();
#line 374
  ldv_9_size_cnt_write_size = (size_t )tmp___2;
  }
#line 381
  goto ldv_main_9;
#line 383
  return;
  ldv_main_9: 
  {
#line 389
  tmp___4 = ldv_undef_int();
  }
#line 389
  if (tmp___4 != 0) {
    {
#line 392
    ldv_9_ret_default = ldv_character_driver_scenario_probe_9_13(ldv_9_container_file_operations->open,
                                                                 ldv_9_resource_inode,
                                                                 ldv_9_resource_file);
#line 394
    ldv_9_ret_default = ldv_filter_err_code(ldv_9_ret_default);
#line 397
    tmp___3 = ldv_undef_int();
    }
#line 397
    if (tmp___3 != 0) {
      {
#line 399
      __VERIFIER_assume(ldv_9_ret_default == 0);
      }
#line 406
      goto ldv_call_9;
    } else {
      {
#line 410
      __VERIFIER_assume(ldv_9_ret_default != 0);
      }
#line 417
      goto ldv_main_9;
    }
  } else {
    {
#line 422
    ldv_free((void *)ldv_9_resource_file);
#line 423
    ldv_free((void *)ldv_9_resource_inode);
#line 427
    ldv_free((void *)ldv_9_container_file_operations);
    }
#line 435
    return;
  }
#line 438
  return;
  ldv_call_9: 
  {
#line 444
  tmp___5 = ldv_undef_int();
  }
  {
#line 445
  if (tmp___5 == 1) {
#line 445
    goto case_1;
  } else {

  }
#line 474
  if (tmp___5 == 2) {
#line 474
    goto case_2;
  } else {

  }
#line 487
  if (tmp___5 == 3) {
#line 487
    goto case_3;
  } else {

  }
#line 552
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 447
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 447
  ldv_9_ldv_param_4_1_default = (char *)tmp___6;
#line 448
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 448
  ldv_9_ldv_param_4_3_default = (long long *)tmp___7;
#line 457
  __VERIFIER_assume(ldv_9_size_cnt_write_size <= 2147479552UL);
#line 459
  ldv_character_driver_scenario_write_9_4((ssize_t (*)(struct file * , char * , size_t  ,
                                                       loff_t * ))ldv_9_container_file_operations->write,
                                          ldv_9_resource_file, ldv_9_ldv_param_4_1_default,
                                          ldv_9_size_cnt_write_size, ldv_9_ldv_param_4_3_default);
#line 463
  ldv_free((void *)ldv_9_ldv_param_4_1_default);
#line 464
  ldv_free((void *)ldv_9_ldv_param_4_3_default);
  }
#line 471
  goto ldv_call_9;
  case_2: /* CIL Label */ 
  {
#line 477
  ldv_character_driver_scenario_release_9_2(ldv_9_container_file_operations->release,
                                            ldv_9_resource_inode, ldv_9_resource_file);
  }
#line 484
  goto ldv_main_9;
  case_3: /* CIL Label */ 
  {
#line 491
  tmp___8 = ldv_undef_int();
  }
  {
#line 492
  if (tmp___8 == 1) {
#line 492
    goto case_1___0;
  } else {

  }
#line 506
  if (tmp___8 == 2) {
#line 506
    goto case_2___0;
  } else {

  }
#line 524
  if (tmp___8 == 3) {
#line 524
    goto case_3___0;
  } else {

  }
#line 540
  if (tmp___8 == 4) {
#line 540
    goto case_4;
  } else {

  }
#line 548
  goto switch_default;
  case_1___0: /* CIL Label */ 
  {
#line 498
  ldv_character_driver_scenario_callback_9_28(ldv_9_callback_unlocked_ioctl, ldv_9_resource_file,
                                              ldv_9_ldv_param_28_1_default, ldv_9_size_cnt_write_size);
  }
#line 504
  goto ldv_47580;
  case_2___0: /* CIL Label */ 
  {
#line 508
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 508
  ldv_9_ldv_param_25_1_default = (char *)tmp___9;
#line 509
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 509
  ldv_9_ldv_param_25_3_default = (long long *)tmp___10;
#line 514
  ldv_character_driver_scenario_callback_9_25(ldv_9_callback_read, ldv_9_resource_file,
                                              ldv_9_ldv_param_25_1_default, ldv_9_size_cnt_write_size,
                                              ldv_9_ldv_param_25_3_default);
#line 518
  ldv_free((void *)ldv_9_ldv_param_25_1_default);
#line 519
  ldv_free((void *)ldv_9_ldv_param_25_3_default);
  }
#line 522
  goto ldv_47580;
  case_3___0: /* CIL Label */ 
  {
#line 526
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 526
  ldv_9_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
#line 531
  ldv_character_driver_scenario_callback_9_22(ldv_9_callback_poll, ldv_9_resource_file,
                                              ldv_9_ldv_param_22_1_default);
#line 535
  ldv_free((void *)ldv_9_ldv_param_22_1_default);
  }
#line 538
  goto ldv_47580;
  case_4: /* CIL Label */ 
  {
#line 543
  ldv_character_driver_scenario_callback_9_5(ldv_9_callback_llseek, ldv_9_resource_file,
                                             ldv_9_ldv_param_5_1_default, ldv_9_ldv_param_5_2_default);
  }
#line 546
  goto ldv_47580;
  switch_default: /* CIL Label */ 
  {
#line 548
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_47580: ;
#line 550
  goto ldv_47585;
  switch_default___0: /* CIL Label */ 
  {
#line 552
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_47585: ;
#line 561
  goto ldv_call_9;
#line 563
  return;
}
}
#line 568 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_2_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) 
{ 


  {
  {
#line 569
  no_llseek(arg1, arg2, arg3);
  }
#line 570
  return;
}
}
#line 573 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_3_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) 
{ 


  {
  {
#line 574
  no_llseek(arg1, arg2, arg3);
  }
#line 575
  return;
}
}
#line 578 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_4_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) 
{ 


  {
  {
#line 579
  no_llseek(arg1, arg2, arg3);
  }
#line 580
  return;
}
}
#line 583 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_5_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) 
{ 


  {
  {
#line 584
  no_llseek(arg1, arg2, arg3);
  }
#line 585
  return;
}
}
#line 588 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_8_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 589
  (*arg0)(arg1, arg2);
  }
#line 590
  return;
}
}
#line 593 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_8_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 594
  (*arg0)(arg1, arg2, arg3);
  }
#line 595
  return;
}
}
#line 598 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_9_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                 struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 599
  rpc_pipe_poll(arg1, arg2);
  }
#line 600
  return;
}
}
#line 603 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_9_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 604
  rpc_pipe_read(arg1, arg2, arg3, arg4);
  }
#line 605
  return;
}
}
#line 608 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_9_28(ssize_t (*arg0)(struct file * , u32  ,
                                                                 size_t  ) , struct file *arg1 ,
                                                 unsigned int arg2 , unsigned long arg3 ) 
{ 


  {
  {
#line 609
  rpc_pipe_ioctl(arg1, arg2, arg3);
  }
#line 610
  return;
}
}
#line 613 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_callback_9_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) 
{ 


  {
  {
#line 614
  no_llseek(arg1, arg2, arg3);
  }
#line 615
  return;
}
}
#line 618 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
int ldv_character_driver_scenario_probe_8_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 619
  tmp = rpc_info_open(arg1, arg2);
  }
#line 619
  return (tmp);
}
}
#line 623 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
int ldv_character_driver_scenario_probe_9_13(int (*arg0)(struct inode * , struct file * ) ,
                                             struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 624
  tmp = rpc_pipe_open(arg1, arg2);
  }
#line 624
  return (tmp);
}
}
#line 628 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_release_8_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 629
  rpc_info_release(arg1, arg2);
  }
#line 630
  return;
}
}
#line 633 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_release_9_2(int (*arg0)(struct inode * , struct file * ) ,
                                               struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 634
  rpc_pipe_release(arg1, arg2);
  }
#line 635
  return;
}
}
#line 638 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_write_8_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 639
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 640
  return;
}
}
#line 643 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_rpc_pipe.c.aux"
void ldv_character_driver_scenario_write_9_4(ssize_t (*arg0)(struct file * , char * ,
                                                             size_t  , loff_t * ) ,
                                             struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                             long long *arg4 ) 
{ 


  {
  {
#line 644
  rpc_pipe_write(arg1, (char const   *)arg2, arg3, arg4);
  }
#line 645
  return;
}
}
#line 358 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static void *ERR_PTR(long error ) ;
#line 31
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 11 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 47 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock_api_smp.h"
extern int _raw_spin_trylock_bh(raw_spinlock_t * ) ;
#line 351 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/spinlock.h"
__inline static int spin_trylock_bh(spinlock_t *lock ) 
{ 
  int tmp ;

  {
  {
#line 353
  tmp = _raw_spin_trylock_bh(& lock->__annonCompField20.rlock);
  }
#line 353
  return (tmp);
}
}
#line 13 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/wait.h"
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 101
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 103
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 293 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/jiffies.h"
extern unsigned long msecs_to_jiffies(unsigned int const    ) ;
#line 183 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/timer.h"
static int ldv_mod_timer_13(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) ;
#line 187
static int ldv_mod_timer_16(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) ;
#line 191
static int ldv_mod_timer_17(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) ;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 158 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 86 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seq_file.h"
static int ldv_seq_open_18(struct file *ldv_func_arg1 , struct seq_operations  const  *ldv_func_arg2 ) ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/kthread.h"
extern bool kthread_should_stop(void) ;
#line 341 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc.h"
__inline static void svc_free_res_pages(struct svc_rqst *rqstp ) 
{ 
  struct page **pp ;

  {
#line 343
  goto ldv_42607;
  ldv_42606: 
#line 344
  rqstp->rq_next_page = rqstp->rq_next_page - 1;
#line 344
  pp = rqstp->rq_next_page;
#line 345
  if ((unsigned long )*pp != (unsigned long )((struct page *)0)) {
    {
#line 346
    put_page(*pp);
#line 347
    *pp = (struct page *)0;
    }
  } else {

  }
  ldv_42607: ;
#line 343
  if ((unsigned long )rqstp->rq_next_page != (unsigned long )rqstp->rq_respages) {
#line 345
    goto ldv_42606;
  } else {

  }

#line 350
  return;
}
}
#line 431
int svc_pool_stats_open(struct svc_serv *serv , struct file *file ) ;
#line 440
void svc_wake_up(struct svc_serv *serv ) ;
#line 114 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
int svc_create_xprt(struct svc_serv *serv , char const   *xprt_name , struct net *net ,
                    int const   family , unsigned short const   port , int flags ) ;
#line 117
void svc_xprt_put(struct svc_xprt *xprt ) ;
#line 121
int svc_print_xprts(char *buf , int maxlen ) ;
#line 122
struct svc_xprt *svc_find_xprt(struct svc_serv *serv , char const   *xcl_name , struct net *net ,
                               sa_family_t const   af , unsigned short const   port ) ;
#line 125
int svc_xprt_names(struct svc_serv *serv , char *buf , int const   buflen ) ;
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
__inline static void svc_xprt_get(struct svc_xprt *xprt ) 
{ 


  {
  {
#line 130
  kref_get(& xprt->xpt_ref);
  }
#line 131
  return;
}
}
#line 146 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
__inline static unsigned short svc_addr_port(struct sockaddr  const  *sa ) 
{ 
  struct sockaddr_in  const  *sin ;
  struct sockaddr_in6  const  *sin6 ;
  __u16 tmp ;
  __u16 tmp___0 ;

  {
#line 148
  sin = (struct sockaddr_in  const  *)sa;
#line 149
  sin6 = (struct sockaddr_in6  const  *)sa;
  {
#line 152
  if ((int )sa->sa_family == 2) {
#line 152
    goto case_2;
  } else {

  }
#line 154
  if ((int )sa->sa_family == 10) {
#line 154
    goto case_10;
  } else {

  }
#line 151
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 153
  tmp = __fswab16((int )sin->sin_port);
  }
#line 153
  return (tmp);
  case_10: /* CIL Label */ 
  {
#line 155
  tmp___0 = __fswab16((int )sin6->sin6_port);
  }
#line 155
  return (tmp___0);
  switch_break: /* CIL Label */ ;
  }
#line 158
  return (0U);
}
}
#line 172 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
__inline static unsigned short svc_xprt_local_port(struct svc_xprt  const  *xprt ) 
{ 
  unsigned short tmp ;

  {
  {
#line 174
  tmp = svc_addr_port((struct sockaddr  const  *)(& xprt->xpt_local));
  }
#line 174
  return (tmp);
}
}
#line 182 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svc_xprt.h"
__inline static char *__svc_print_addr___0(struct sockaddr  const  *addr , char *buf ,
                                           size_t const   len ) 
{ 
  struct sockaddr_in  const  *sin ;
  struct sockaddr_in6  const  *sin6 ;
  __u16 tmp ;
  __u16 tmp___0 ;

  {
#line 185
  sin = (struct sockaddr_in  const  *)addr;
#line 186
  sin6 = (struct sockaddr_in6  const  *)addr;
  {
#line 189
  if ((int )addr->sa_family == 2) {
#line 189
    goto case_2;
  } else {

  }
#line 194
  if ((int )addr->sa_family == 10) {
#line 194
    goto case_10;
  } else {

  }
#line 200
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 190
  tmp = __fswab16((int )sin->sin_port);
#line 190
  snprintf(buf, len, "%pI4, port=%u", & sin->sin_addr, (int )tmp);
  }
#line 192
  goto ldv_42866;
  case_10: /* CIL Label */ 
  {
#line 195
  tmp___0 = __fswab16((int )sin6->sin6_port);
#line 195
  snprintf(buf, len, "%pI6, port=%u", & sin6->sin6_addr, (int )tmp___0);
  }
#line 198
  goto ldv_42866;
  switch_default: /* CIL Label */ 
  {
#line 201
  snprintf(buf, len, "unknown address type: %d", (int )addr->sa_family);
  }
#line 202
  goto ldv_42866;
  switch_break: /* CIL Label */ ;
  }
  ldv_42866: ;
#line 205
  return (buf);
}
}
#line 55 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/svcsock.h"
int svc_recv(struct svc_rqst *rqstp , long timeout ) ;
#line 464 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/module.h"
static void ldv___module_get_14(struct module *ldv_func_arg1 ) ;
#line 472
static bool ldv_try_module_get_11___0(struct module *ldv_func_arg1 ) ;
#line 478
static void ldv_module_put_10___0(struct module *ldv_func_arg1 ) ;
#line 482
static void ldv_module_put_12___1(struct module *ldv_func_arg1 ) ;
#line 486
static void ldv_module_put_15___1(struct module *ldv_func_arg1 ) ;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static struct svc_deferred_req *svc_deferred_dequeue(struct svc_xprt *xprt ) ;
#line 22
static int svc_deferred_recv(struct svc_rqst *rqstp ) ;
#line 23
static struct cache_deferred_req *svc_defer(struct cache_req *req ) ;
#line 24
static void svc_age_temp_xprts(unsigned long closure ) ;
#line 25
static void svc_delete_xprt(struct svc_xprt *xprt ) ;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static int svc_conn_age_period  =    360;
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static spinlock_t svc_xprt_class_lock  =    {{{{{0U}}, 3735899821U, 4294967295U, (void *)-1, {0, {0, 0}, "svc_xprt_class_lock",
                                                     0, 0UL}}}};
#line 36 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static struct list_head svc_xprt_class_list  =    {& svc_xprt_class_list, & svc_xprt_class_list};
#line 69 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_reg_xprt_class(struct svc_xprt_class *xcl ) 
{ 
  struct svc_xprt_class *cl ;
  int res ;
  long tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 72
  res = -17;
#line 74
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 74
  if (tmp != 0L) {
    {
#line 74
    printk("\001dsvc: Adding svc transport class \'%s\'\n", xcl->xcl_name);
    }
  } else {

  }
  {
#line 76
  INIT_LIST_HEAD(& xcl->xcl_list);
#line 77
  spin_lock(& svc_xprt_class_lock);
#line 79
  __mptr = (struct list_head  const  *)svc_xprt_class_list.next;
#line 79
  cl = (struct svc_xprt_class *)((char *)__mptr + 0xffffffffffffffe8UL);
  }
#line 79
  goto ldv_44057;
  ldv_44056: 
  {
#line 80
  tmp___0 = strcmp(xcl->xcl_name, cl->xcl_name);
  }
#line 80
  if (tmp___0 == 0) {
#line 81
    goto out;
  } else {

  }
#line 79
  __mptr___0 = (struct list_head  const  *)cl->xcl_list.next;
#line 79
  cl = (struct svc_xprt_class *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  ldv_44057: ;
#line 79
  if ((unsigned long )(& cl->xcl_list) != (unsigned long )(& svc_xprt_class_list)) {
#line 81
    goto ldv_44056;
  } else {

  }
  {
#line 83
  list_add_tail(& xcl->xcl_list, & svc_xprt_class_list);
#line 84
  res = 0;
  }
  out: 
  {
#line 86
  spin_unlock(& svc_xprt_class_lock);
  }
#line 87
  return (res);
}
}
#line 91 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_unreg_xprt_class(struct svc_xprt_class *xcl ) 
{ 
  long tmp ;

  {
  {
#line 93
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 93
  if (tmp != 0L) {
    {
#line 93
    printk("\001dsvc: Removing svc transport class \'%s\'\n", xcl->xcl_name);
    }
  } else {

  }
  {
#line 94
  spin_lock(& svc_xprt_class_lock);
#line 95
  list_del_init(& xcl->xcl_list);
#line 96
  spin_unlock(& svc_xprt_class_lock);
  }
#line 97
  return;
}
}
#line 103 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_print_xprts(char *buf , int maxlen ) 
{ 
  struct svc_xprt_class *xcl ;
  char tmpstr[80U] ;
  int len ;
  struct list_head  const  *__mptr ;
  int slen ;
  size_t tmp ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 107
  len = 0;
#line 108
  *buf = 0;
#line 110
  spin_lock(& svc_xprt_class_lock);
#line 111
  __mptr = (struct list_head  const  *)svc_xprt_class_list.next;
#line 111
  xcl = (struct svc_xprt_class *)((char *)__mptr + 0xffffffffffffffe8UL);
  }
#line 111
  goto ldv_44088;
  ldv_44087: 
  {
#line 114
  sprintf((char *)(& tmpstr), "%s %d\n", xcl->xcl_name, xcl->xcl_max_payload);
#line 115
  tmp = strlen((char const   *)(& tmpstr));
#line 115
  slen = (int )tmp;
  }
#line 116
  if (len + slen > maxlen) {
#line 117
    goto ldv_44086;
  } else {

  }
  {
#line 118
  len = len + slen;
#line 119
  strcat(buf, (char const   *)(& tmpstr));
#line 111
  __mptr___0 = (struct list_head  const  *)xcl->xcl_list.next;
#line 111
  xcl = (struct svc_xprt_class *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  }
  ldv_44088: ;
#line 111
  if ((unsigned long )(& xcl->xcl_list) != (unsigned long )(& svc_xprt_class_list)) {
#line 113
    goto ldv_44087;
  } else {

  }
  ldv_44086: 
  {
#line 121
  spin_unlock(& svc_xprt_class_lock);
  }
#line 123
  return (len);
}
}
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_xprt_free(struct kref *kref ) 
{ 
  struct svc_xprt *xprt ;
  struct kref  const  *__mptr ;
  struct module *owner ;
  int tmp ;

  {
  {
#line 129
  __mptr = (struct kref  const  *)kref;
#line 129
  xprt = (struct svc_xprt *)((char *)__mptr + 0xfffffffffffffff0UL);
#line 130
  owner = (xprt->xpt_class)->xcl_owner;
#line 131
  tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 131
  if (tmp != 0) {
    {
#line 132
    svcauth_unix_info_release(xprt);
    }
  } else {

  }
  {
#line 133
  put_net(xprt->xpt_net);
  }
#line 135
  if ((unsigned long )xprt->xpt_bc_xprt != (unsigned long )((struct rpc_xprt *)0)) {
    {
#line 136
    xprt_put(xprt->xpt_bc_xprt);
    }
  } else {

  }
  {
#line 137
  (*((xprt->xpt_ops)->xpo_free))(xprt);
#line 138
  ldv_module_put_10___0(owner);
  }
#line 139
  return;
}
}
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_xprt_put(struct svc_xprt *xprt ) 
{ 


  {
  {
#line 143
  kref_put(& xprt->xpt_ref, & svc_xprt_free);
  }
#line 144
  return;
}
}
#line 151 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_xprt_init(struct net *net , struct svc_xprt_class *xcl , struct svc_xprt *xprt ,
                   struct svc_serv *serv ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
  {
#line 154
  memset((void *)xprt, 0, 960UL);
#line 155
  xprt->xpt_class = xcl;
#line 156
  xprt->xpt_ops = xcl->xcl_ops;
#line 157
  kref_init(& xprt->xpt_ref);
#line 158
  xprt->xpt_server = serv;
#line 159
  INIT_LIST_HEAD(& xprt->xpt_list);
#line 160
  INIT_LIST_HEAD(& xprt->xpt_ready);
#line 161
  INIT_LIST_HEAD(& xprt->xpt_deferred);
#line 162
  INIT_LIST_HEAD(& xprt->xpt_users);
#line 163
  __mutex_init(& xprt->xpt_mutex, "&xprt->xpt_mutex", & __key);
#line 164
  spinlock_check(& xprt->xpt_lock);
#line 164
  __raw_spin_lock_init(& xprt->xpt_lock.__annonCompField20.rlock, "&(&xprt->xpt_lock)->rlock",
                       & __key___0);
#line 165
  set_bit(0U, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 166
  rpc_init_wait_queue(& xprt->xpt_bc_pending, "xpt_bc_pending");
#line 167
  xprt->xpt_net = get_net(net);
  }
#line 168
  return;
}
}
#line 171 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static struct svc_xprt *__svc_xpo_create(struct svc_xprt_class *xcl , struct svc_serv *serv ,
                                         struct net *net , int const   family , unsigned short const   port ,
                                         int flags ) 
{ 
  struct sockaddr_in sin ;
  __u16 tmp ;
  struct sockaddr_in6 sin6 ;
  __u16 tmp___0 ;
  struct sockaddr *sap ;
  size_t len ;
  void *tmp___1 ;
  struct svc_xprt *tmp___2 ;

  {
  {
#line 178
  tmp = __fswab16((int )port);
#line 178
  sin.sin_family = 2U;
#line 178
  sin.sin_port = tmp;
#line 178
  sin.sin_addr.s_addr = 0U;
#line 178
  sin.__pad[0] = (unsigned char)0;
#line 178
  sin.__pad[1] = (unsigned char)0;
#line 178
  sin.__pad[2] = (unsigned char)0;
#line 178
  sin.__pad[3] = (unsigned char)0;
#line 178
  sin.__pad[4] = (unsigned char)0;
#line 178
  sin.__pad[5] = (unsigned char)0;
#line 178
  sin.__pad[6] = (unsigned char)0;
#line 178
  sin.__pad[7] = (unsigned char)0;
#line 184
  tmp___0 = __fswab16((int )port);
#line 184
  sin6.sin6_family = 10U;
#line 184
  sin6.sin6_port = tmp___0;
#line 184
  sin6.sin6_flowinfo = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[0] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[1] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[2] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[3] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[4] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[5] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[6] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[7] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[8] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[9] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[10] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[11] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[12] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[13] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[14] = 0U;
#line 184
  sin6.sin6_addr.in6_u.u6_addr8[15] = 0U;
#line 184
  sin6.sin6_scope_id = 0U;
  }
  {
#line 194
  if (family == 2) {
#line 194
    goto case_2;
  } else {

  }
#line 199
  if (family == 10) {
#line 199
    goto case_10;
  } else {

  }
#line 204
  goto switch_default;
  case_2: /* CIL Label */ 
#line 195
  sap = (struct sockaddr *)(& sin);
#line 196
  len = 16UL;
#line 197
  goto ldv_44135;
  case_10: /* CIL Label */ 
#line 200
  sap = (struct sockaddr *)(& sin6);
#line 201
  len = 28UL;
#line 202
  goto ldv_44135;
  switch_default: /* CIL Label */ 
  {
#line 205
  tmp___1 = ERR_PTR(-97L);
  }
#line 205
  return ((struct svc_xprt *)tmp___1);
  switch_break: /* CIL Label */ ;
  }
  ldv_44135: 
  {
#line 208
  tmp___2 = (*((xcl->xcl_ops)->xpo_create))(serv, net, sap, (int )len, flags);
  }
#line 208
  return (tmp___2);
}
}
#line 219 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_xprt_received(struct svc_xprt *xprt ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int tmp ;
  int __ret_warn_on ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
  {
#line 221
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& xprt->xpt_flags));
#line 221
  __ret_warn_once = tmp == 0;
#line 221
  tmp___2 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 221
  if (tmp___2 != 0L) {
    {
#line 221
    __ret_warn_on = ! __warned;
#line 221
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 221
    if (tmp___0 != 0L) {
      {
#line 221
      warn_slowpath_null("net/sunrpc/svc_xprt.c", 221);
      }
    } else {

    }
    {
#line 221
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 221
    if (tmp___1 != 0L) {
#line 221
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 221
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 222
  tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 222
  if (tmp___3 == 0) {
#line 223
    return;
  } else {

  }
  {
#line 227
  svc_xprt_get(xprt);
#line 228
  clear_bit(0, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 229
  svc_xprt_enqueue(xprt);
#line 230
  svc_xprt_put(xprt);
  }
#line 231
  return;
}
}
#line 233 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_add_new_perm_xprt(struct svc_serv *serv , struct svc_xprt *new ) 
{ 


  {
  {
#line 235
  clear_bit(4, (unsigned long volatile   *)(& new->xpt_flags));
#line 236
  spin_lock_bh(& serv->sv_lock);
#line 237
  list_add(& new->xpt_list, & serv->sv_permsocks);
#line 238
  spin_unlock_bh(& serv->sv_lock);
#line 239
  svc_xprt_received(new);
  }
#line 240
  return;
}
}
#line 242 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_create_xprt(struct svc_serv *serv , char const   *xprt_name , struct net *net ,
                    int const   family , unsigned short const   port , int flags ) 
{ 
  struct svc_xprt_class *xcl ;
  long tmp ;
  struct list_head  const  *__mptr ;
  struct svc_xprt *newxprt ;
  unsigned short newport ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  struct list_head  const  *__mptr___0 ;
  long tmp___5 ;

  {
  {
#line 248
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 248
  if (tmp != 0L) {
    {
#line 248
    printk("\001dsvc: creating transport %s[%d]\n", xprt_name, (int )port);
    }
  } else {

  }
  {
#line 249
  spin_lock(& svc_xprt_class_lock);
#line 250
  __mptr = (struct list_head  const  *)svc_xprt_class_list.next;
#line 250
  xcl = (struct svc_xprt_class *)((char *)__mptr + 0xffffffffffffffe8UL);
  }
#line 250
  goto ldv_44168;
  ldv_44167: 
  {
#line 254
  tmp___0 = strcmp(xprt_name, xcl->xcl_name);
  }
#line 254
  if (tmp___0 != 0) {
#line 255
    goto ldv_44165;
  } else {

  }
  {
#line 257
  tmp___1 = ldv_try_module_get_11___0(xcl->xcl_owner);
  }
#line 257
  if (tmp___1) {
#line 257
    tmp___2 = 0;
  } else {
#line 257
    tmp___2 = 1;
  }
#line 257
  if (tmp___2) {
#line 258
    goto err;
  } else {

  }
  {
#line 260
  spin_unlock(& svc_xprt_class_lock);
#line 261
  newxprt = __svc_xpo_create(xcl, serv, net, family, (int )port, flags);
#line 262
  tmp___4 = IS_ERR((void const   *)newxprt);
  }
#line 262
  if (tmp___4 != 0L) {
    {
#line 263
    ldv_module_put_12___1(xcl->xcl_owner);
#line 264
    tmp___3 = PTR_ERR((void const   *)newxprt);
    }
#line 264
    return ((int )tmp___3);
  } else {

  }
  {
#line 266
  svc_add_new_perm_xprt(serv, newxprt);
#line 267
  newport = svc_xprt_local_port((struct svc_xprt  const  *)newxprt);
  }
#line 268
  return ((int )newport);
  ldv_44165: 
#line 250
  __mptr___0 = (struct list_head  const  *)xcl->xcl_list.next;
#line 250
  xcl = (struct svc_xprt_class *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  ldv_44168: ;
#line 250
  if ((unsigned long )(& xcl->xcl_list) != (unsigned long )(& svc_xprt_class_list)) {
#line 252
    goto ldv_44167;
  } else {

  }

  err: 
  {
#line 271
  spin_unlock(& svc_xprt_class_lock);
#line 272
  tmp___5 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 272
  if (tmp___5 != 0L) {
    {
#line 272
    printk("\001dsvc: transport %s not found\n", xprt_name);
    }
  } else {

  }
#line 276
  return (-93);
}
}
#line 283 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_xprt_copy_addrs(struct svc_rqst *rqstp , struct svc_xprt *xprt ) 
{ 


  {
  {
#line 285
  memcpy((void *)(& rqstp->rq_addr), (void const   *)(& xprt->xpt_remote), xprt->xpt_remotelen);
#line 286
  rqstp->rq_addrlen = xprt->xpt_remotelen;
#line 292
  memcpy((void *)(& rqstp->rq_daddr), (void const   *)(& xprt->xpt_local), xprt->xpt_locallen);
#line 293
  rqstp->rq_daddrlen = xprt->xpt_locallen;
  }
#line 294
  return;
}
}
#line 304 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
char *svc_print_addr(struct svc_rqst *rqstp , char *buf , size_t len ) 
{ 
  struct sockaddr *tmp ;
  char *tmp___0 ;

  {
  {
#line 306
  tmp = svc_addr((struct svc_rqst  const  *)rqstp);
#line 306
  tmp___0 = __svc_print_addr___0((struct sockaddr  const  *)tmp, buf, len);
  }
#line 306
  return (tmp___0);
}
}
#line 316 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_thread_enqueue(struct svc_pool *pool , struct svc_rqst *rqstp ) 
{ 


  {
  {
#line 318
  list_add(& rqstp->rq_list, & pool->sp_threads);
  }
#line 319
  return;
}
}
#line 324 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_thread_dequeue(struct svc_pool *pool , struct svc_rqst *rqstp ) 
{ 


  {
  {
#line 326
  list_del(& rqstp->rq_list);
  }
#line 327
  return;
}
}
#line 329 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static bool svc_xprt_has_something_to_do(struct svc_xprt *xprt ) 
{ 
  int tmp ;

  {
#line 331
  if ((xprt->xpt_flags & 6UL) != 0UL) {
#line 332
    return (1);
  } else {

  }
#line 333
  if ((xprt->xpt_flags & 264UL) != 0UL) {
    {
#line 334
    tmp = (*((xprt->xpt_ops)->xpo_has_wspace))(xprt);
    }
#line 334
    return (tmp != 0);
  } else {

  }
#line 335
  return (0);
}
}
#line 343 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_xprt_enqueue(struct svc_xprt *xprt ) 
{ 
  struct svc_pool *pool ;
  struct svc_rqst *rqstp ;
  int cpu ;
  bool tmp ;
  int tmp___0 ;
  struct thread_info *tmp___1 ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  struct thread_info *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  struct list_head  const  *__mptr ;
  long tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;

  {
  {
#line 349
  tmp = svc_xprt_has_something_to_do(xprt);
  }
#line 349
  if (tmp) {
#line 349
    tmp___0 = 0;
  } else {
#line 349
    tmp___0 = 1;
  }
#line 349
  if (tmp___0) {
#line 350
    return;
  } else {

  }
  {
#line 352
  tmp___1 = current_thread_info();
#line 352
  tmp___1->preempt_count = tmp___1->preempt_count + 1;
#line 352
  __asm__  volatile   ("": : : "memory");
#line 352
  __vpp_verify = (void const   *)0;
  }
  {
#line 352
  if (4UL == 1UL) {
#line 352
    goto case_1;
  } else {

  }
#line 352
  if (4UL == 2UL) {
#line 352
    goto case_2___0;
  } else {

  }
#line 352
  if (4UL == 4UL) {
#line 352
    goto case_4___1;
  } else {

  }
#line 352
  if (4UL == 8UL) {
#line 352
    goto case_8___2;
  } else {

  }
#line 352
  goto switch_default___3;
  case_1: /* CIL Label */ ;
  {
#line 352
  if (4UL == 1UL) {
#line 352
    goto case_1___0;
  } else {

  }
#line 352
  if (4UL == 2UL) {
#line 352
    goto case_2;
  } else {

  }
#line 352
  if (4UL == 4UL) {
#line 352
    goto case_4;
  } else {

  }
#line 352
  if (4UL == 8UL) {
#line 352
    goto case_8;
  } else {

  }
#line 352
  goto switch_default;
  case_1___0: /* CIL Label */ 
#line 352
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 352
  goto ldv_44227;
  case_2: /* CIL Label */ 
#line 352
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 352
  goto ldv_44227;
  case_4: /* CIL Label */ 
#line 352
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 352
  goto ldv_44227;
  case_8: /* CIL Label */ 
#line 352
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 352
  goto ldv_44227;
  switch_default: /* CIL Label */ 
  {
#line 352
  __bad_percpu_size();
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_44227: 
#line 352
  pscr_ret__ = pfo_ret__;
#line 352
  goto ldv_44233;
  case_2___0: /* CIL Label */ ;
  {
#line 352
  if (4UL == 1UL) {
#line 352
    goto case_1___1;
  } else {

  }
#line 352
  if (4UL == 2UL) {
#line 352
    goto case_2___1;
  } else {

  }
#line 352
  if (4UL == 4UL) {
#line 352
    goto case_4___0;
  } else {

  }
#line 352
  if (4UL == 8UL) {
#line 352
    goto case_8___0;
  } else {

  }
#line 352
  goto switch_default___0;
  case_1___1: /* CIL Label */ 
#line 352
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 352
  goto ldv_44237;
  case_2___1: /* CIL Label */ 
#line 352
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 352
  goto ldv_44237;
  case_4___0: /* CIL Label */ 
#line 352
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 352
  goto ldv_44237;
  case_8___0: /* CIL Label */ 
#line 352
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 352
  goto ldv_44237;
  switch_default___0: /* CIL Label */ 
  {
#line 352
  __bad_percpu_size();
  }
  switch_break___1: /* CIL Label */ ;
  }
  ldv_44237: 
#line 352
  pscr_ret__ = pfo_ret_____0;
#line 352
  goto ldv_44233;
  case_4___1: /* CIL Label */ ;
  {
#line 352
  if (4UL == 1UL) {
#line 352
    goto case_1___2;
  } else {

  }
#line 352
  if (4UL == 2UL) {
#line 352
    goto case_2___2;
  } else {

  }
#line 352
  if (4UL == 4UL) {
#line 352
    goto case_4___2;
  } else {

  }
#line 352
  if (4UL == 8UL) {
#line 352
    goto case_8___1;
  } else {

  }
#line 352
  goto switch_default___1;
  case_1___2: /* CIL Label */ 
#line 352
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 352
  goto ldv_44246;
  case_2___2: /* CIL Label */ 
#line 352
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 352
  goto ldv_44246;
  case_4___2: /* CIL Label */ 
#line 352
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 352
  goto ldv_44246;
  case_8___1: /* CIL Label */ 
#line 352
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 352
  goto ldv_44246;
  switch_default___1: /* CIL Label */ 
  {
#line 352
  __bad_percpu_size();
  }
  switch_break___2: /* CIL Label */ ;
  }
  ldv_44246: 
#line 352
  pscr_ret__ = pfo_ret_____1;
#line 352
  goto ldv_44233;
  case_8___2: /* CIL Label */ ;
  {
#line 352
  if (4UL == 1UL) {
#line 352
    goto case_1___3;
  } else {

  }
#line 352
  if (4UL == 2UL) {
#line 352
    goto case_2___3;
  } else {

  }
#line 352
  if (4UL == 4UL) {
#line 352
    goto case_4___3;
  } else {

  }
#line 352
  if (4UL == 8UL) {
#line 352
    goto case_8___3;
  } else {

  }
#line 352
  goto switch_default___2;
  case_1___3: /* CIL Label */ 
#line 352
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 352
  goto ldv_44255;
  case_2___3: /* CIL Label */ 
#line 352
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 352
  goto ldv_44255;
  case_4___3: /* CIL Label */ 
#line 352
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 352
  goto ldv_44255;
  case_8___3: /* CIL Label */ 
#line 352
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 352
  goto ldv_44255;
  switch_default___2: /* CIL Label */ 
  {
#line 352
  __bad_percpu_size();
  }
  switch_break___3: /* CIL Label */ ;
  }
  ldv_44255: 
#line 352
  pscr_ret__ = pfo_ret_____2;
#line 352
  goto ldv_44233;
  switch_default___3: /* CIL Label */ 
  {
#line 352
  __bad_size_call_parameter();
  }
#line 352
  goto ldv_44233;
  switch_break: /* CIL Label */ ;
  }
  ldv_44233: 
  {
#line 352
  cpu = pscr_ret__;
#line 353
  pool = svc_pool_for_cpu(xprt->xpt_server, cpu);
#line 354
  __asm__  volatile   ("": : : "memory");
#line 354
  tmp___2 = current_thread_info();
#line 354
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 354
  __asm__  volatile   ("": : : "memory");
#line 356
  spin_lock_bh(& pool->sp_lock);
#line 358
  tmp___3 = list_empty((struct list_head  const  *)(& pool->sp_threads));
  }
#line 358
  if (tmp___3 == 0) {
    {
#line 358
    tmp___4 = list_empty((struct list_head  const  *)(& pool->sp_sockets));
    }
#line 358
    if (tmp___4 == 0) {
      {
#line 360
      printk("\vsvc_xprt_enqueue: threads and transports both waiting??\n");
      }
    } else {

    }
  } else {

  }
  {
#line 364
  pool->sp_stats.packets = pool->sp_stats.packets + 1UL;
#line 371
  tmp___6 = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->xpt_flags));
  }
#line 371
  if (tmp___6 != 0) {
    {
#line 373
    tmp___5 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 373
    if (tmp___5 != 0L) {
      {
#line 373
      printk("\001dsvc: transport %p busy, not enqueued\n", xprt);
      }
    } else {

    }
#line 374
    goto out_unlock;
  } else {

  }
  {
#line 377
  tmp___9 = list_empty((struct list_head  const  *)(& pool->sp_threads));
  }
#line 377
  if (tmp___9 == 0) {
    {
#line 378
    __mptr = (struct list_head  const  *)pool->sp_threads.next;
#line 378
    rqstp = (struct svc_rqst *)__mptr;
#line 381
    tmp___7 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 381
    if (tmp___7 != 0L) {
      {
#line 381
      printk("\001dsvc: transport %p served by daemon %p\n", xprt, rqstp);
      }
    } else {

    }
    {
#line 383
    svc_thread_dequeue(pool, rqstp);
    }
#line 384
    if ((unsigned long )rqstp->rq_xprt != (unsigned long )((struct svc_xprt *)0)) {
      {
#line 385
      printk("\vsvc_xprt_enqueue: server %p, rq_xprt=%p!\n", rqstp, rqstp->rq_xprt);
      }
    } else {

    }
    {
#line 388
    rqstp->rq_xprt = xprt;
#line 389
    svc_xprt_get(xprt);
#line 390
    pool->sp_stats.threads_woken = pool->sp_stats.threads_woken + 1UL;
#line 391
    __wake_up(& rqstp->rq_wait, 3U, 1, (void *)0);
    }
  } else {
    {
#line 393
    tmp___8 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 393
    if (tmp___8 != 0L) {
      {
#line 393
      printk("\001dsvc: transport %p put into queue\n", xprt);
      }
    } else {

    }
    {
#line 394
    list_add_tail(& xprt->xpt_ready, & pool->sp_sockets);
#line 395
    pool->sp_stats.sockets_queued = pool->sp_stats.sockets_queued + 1UL;
    }
  }
  out_unlock: 
  {
#line 399
  spin_unlock_bh(& pool->sp_lock);
  }
#line 400
  return;
}
}
#line 406 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static struct svc_xprt *svc_xprt_dequeue(struct svc_pool *pool ) 
{ 
  struct svc_xprt *xprt ;
  int tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 410
  tmp = list_empty((struct list_head  const  *)(& pool->sp_sockets));
  }
#line 410
  if (tmp != 0) {
#line 411
    return ((struct svc_xprt *)0);
  } else {

  }
  {
#line 413
  __mptr = (struct list_head  const  *)pool->sp_sockets.next;
#line 413
  xprt = (struct svc_xprt *)((char *)__mptr + 0xffffffffffffffd8UL);
#line 415
  list_del_init(& xprt->xpt_ready);
#line 417
  tmp___1 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 417
  if (tmp___1 != 0L) {
    {
#line 417
    tmp___0 = atomic_read((atomic_t const   *)(& xprt->xpt_ref.refcount));
#line 417
    printk("\001dsvc: transport %p dequeued, inuse=%d\n", xprt, tmp___0);
    }
  } else {

  }
#line 420
  return (xprt);
}
}
#line 433 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_reserve(struct svc_rqst *rqstp , int space ) 
{ 
  struct svc_xprt *xprt ;

  {
#line 435
  space = (int )((unsigned int )space + (unsigned int )rqstp->rq_res.head[0].iov_len);
#line 437
  if (space < rqstp->rq_reserved) {
    {
#line 438
    xprt = rqstp->rq_xprt;
#line 439
    atomic_sub(rqstp->rq_reserved - space, & xprt->xpt_reserved);
#line 440
    rqstp->rq_reserved = space;
#line 442
    svc_xprt_enqueue(xprt);
    }
  } else {

  }
#line 444
  return;
}
}
#line 447 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_xprt_release(struct svc_rqst *rqstp ) 
{ 
  struct svc_xprt *xprt ;

  {
  {
#line 449
  xprt = rqstp->rq_xprt;
#line 451
  (*(((rqstp->rq_xprt)->xpt_ops)->xpo_release_rqst))(rqstp);
#line 453
  kfree((void const   *)rqstp->rq_deferred);
#line 454
  rqstp->rq_deferred = (struct svc_deferred_req *)0;
#line 456
  svc_free_res_pages(rqstp);
#line 457
  rqstp->rq_res.page_len = 0U;
#line 458
  rqstp->rq_res.page_base = 0U;
  }
#line 465
  if (rqstp->rq_res.len > (unsigned int )rqstp->rq_reserved) {
    {
#line 466
    printk("\vRPC request reserved %d but used %d\n", rqstp->rq_reserved, rqstp->rq_res.len);
    }
  } else {

  }
  {
#line 470
  rqstp->rq_res.head[0].iov_len = 0UL;
#line 471
  svc_reserve(rqstp, 0);
#line 472
  rqstp->rq_xprt = (struct svc_xprt *)0;
#line 474
  svc_xprt_put(xprt);
  }
#line 475
  return;
}
}
#line 482 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_wake_up(struct svc_serv *serv ) 
{ 
  struct svc_rqst *rqstp ;
  unsigned int i ;
  struct svc_pool *pool ;
  struct list_head  const  *__mptr ;
  long tmp ;
  int tmp___0 ;

  {
#line 488
  i = 0U;
#line 488
  goto ldv_44304;
  ldv_44303: 
  {
#line 489
  pool = serv->sv_pools + (unsigned long )i;
#line 491
  spin_lock_bh(& pool->sp_lock);
#line 492
  tmp___0 = list_empty((struct list_head  const  *)(& pool->sp_threads));
  }
#line 492
  if (tmp___0 == 0) {
    {
#line 493
    __mptr = (struct list_head  const  *)pool->sp_threads.next;
#line 493
    rqstp = (struct svc_rqst *)__mptr;
#line 496
    tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 496
    if (tmp != 0L) {
      {
#line 496
      printk("\001dsvc: daemon %p woken up.\n", rqstp);
      }
    } else {

    }
    {
#line 501
    __wake_up(& rqstp->rq_wait, 3U, 1, (void *)0);
    }
  } else {
#line 503
    pool->sp_task_pending = 1;
  }
  {
#line 504
  spin_unlock_bh(& pool->sp_lock);
#line 488
  i = i + 1U;
  }
  ldv_44304: ;
#line 488
  if (i < serv->sv_nrpools) {
#line 490
    goto ldv_44303;
  } else {

  }

#line 495
  return;
}
}
#line 509 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_port_is_privileged(struct sockaddr *sin ) 
{ 
  __u16 tmp ;
  __u16 tmp___0 ;

  {
  {
#line 512
  if ((int )sin->sa_family == 2) {
#line 512
    goto case_2;
  } else {

  }
#line 515
  if ((int )sin->sa_family == 10) {
#line 515
    goto case_10;
  } else {

  }
#line 518
  goto switch_default;
  case_2: /* CIL Label */ 
  {
#line 513
  tmp = __fswab16((int )((struct sockaddr_in *)sin)->sin_port);
  }
#line 513
  return ((int )tmp <= 1023);
  case_10: /* CIL Label */ 
  {
#line 516
  tmp___0 = __fswab16((int )((struct sockaddr_in6 *)sin)->sin6_port);
  }
#line 516
  return ((int )tmp___0 <= 1023);
  switch_default: /* CIL Label */ ;
#line 519
  return (0);
  switch_break: /* CIL Label */ ;
  }
}
}
#line 541 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_check_conn_limits(struct svc_serv *serv ) 
{ 
  unsigned int limit ;
  struct svc_xprt *xprt ;
  int tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;

  {
#line 543
  limit = serv->sv_maxconn != 0U ? serv->sv_maxconn : serv->sv_nrthreads * 20U + 60U;
#line 546
  if ((unsigned int )serv->sv_tmpcnt > limit) {
    {
#line 547
    xprt = (struct svc_xprt *)0;
#line 548
    spin_lock_bh(& serv->sv_lock);
#line 549
    tmp___0 = list_empty((struct list_head  const  *)(& serv->sv_tempsocks));
    }
#line 549
    if (tmp___0 == 0) {
      {
#line 551
      tmp = net_ratelimit();
      }
#line 551
      if (tmp != 0) {
        {
#line 551
        printk("\r%s: too many open connections, consider increasing the %s\n", serv->sv_name,
               serv->sv_maxconn != 0U ? (char *)"max number of connections" : (char *)"number of threads");
        }
      } else {

      }
      {
#line 559
      __mptr = (struct list_head  const  *)serv->sv_tempsocks.prev;
#line 559
      xprt = (struct svc_xprt *)((char *)__mptr + 0xffffffffffffffe8UL);
#line 562
      set_bit(2U, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 563
      svc_xprt_get(xprt);
      }
    } else {

    }
    {
#line 565
    spin_unlock_bh(& serv->sv_lock);
    }
#line 567
    if ((unsigned long )xprt != (unsigned long )((struct svc_xprt *)0)) {
      {
#line 568
      svc_xprt_enqueue(xprt);
#line 569
      svc_xprt_put(xprt);
      }
    } else {

    }
  } else {

  }
#line 572
  return;
}
}
#line 574 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_alloc_arg(struct svc_rqst *rqstp ) 
{ 
  struct svc_serv *serv ;
  struct xdr_buf *arg ;
  int pages ;
  int i ;
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  struct page *p ;
  struct page *tmp___2 ;
  long volatile   __ret ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  long volatile   __ret___0 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;
  struct task_struct *tmp___9 ;
  struct task_struct *tmp___10 ;
  struct task_struct *tmp___11 ;
  int tmp___12 ;
  bool tmp___13 ;
  unsigned long tmp___14 ;
  int tmp___15 ;

  {
  {
#line 576
  serv = rqstp->rq_server;
#line 582
  pages = (int )(((unsigned long )serv->sv_max_mesg + 4096UL) / 4096UL);
#line 583
  __ret_warn_once = (unsigned int )pages > 258U;
#line 583
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 583
  if (tmp___1 != 0L) {
    {
#line 583
    __ret_warn_on = ! __warned;
#line 583
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 583
    if (tmp != 0L) {
      {
#line 583
      warn_slowpath_null("net/sunrpc/svc_xprt.c", 583);
      }
    } else {

    }
    {
#line 583
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 583
    if (tmp___0 != 0L) {
#line 583
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 583
  __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 584
  if ((unsigned int )pages > 258U) {
#line 586
    pages = 258;
  } else {

  }
#line 587
  i = 0;
#line 587
  goto ldv_44358;
  ldv_44357: ;
#line 588
  goto ldv_44355;
  ldv_44354: 
  {
#line 589
  tmp___2 = alloc_pages(208U, 0U);
#line 589
  p = tmp___2;
  }
#line 590
  if ((unsigned long )p == (unsigned long )((struct page *)0)) {
#line 591
    __ret = 1L;
    {
#line 591
    if (8UL == 1UL) {
#line 591
      goto case_1;
    } else {

    }
#line 591
    if (8UL == 2UL) {
#line 591
      goto case_2;
    } else {

    }
#line 591
    if (8UL == 4UL) {
#line 591
      goto case_4;
    } else {

    }
#line 591
    if (8UL == 8UL) {
#line 591
      goto case_8;
    } else {

    }
#line 591
    goto switch_default;
    case_1: /* CIL Label */ 
    {
#line 591
    tmp___3 = get_current();
#line 591
    __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___3->state): : "memory",
                         "cc");
    }
#line 591
    goto ldv_44340;
    case_2: /* CIL Label */ 
    {
#line 591
    tmp___4 = get_current();
#line 591
    __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                         "cc");
    }
#line 591
    goto ldv_44340;
    case_4: /* CIL Label */ 
    {
#line 591
    tmp___5 = get_current();
#line 591
    __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___5->state): : "memory",
                         "cc");
    }
#line 591
    goto ldv_44340;
    case_8: /* CIL Label */ 
    {
#line 591
    tmp___6 = get_current();
#line 591
    __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___6->state): : "memory",
                         "cc");
    }
#line 591
    goto ldv_44340;
    switch_default: /* CIL Label */ 
    {
#line 591
    __xchg_wrong_size();
    }
    switch_break: /* CIL Label */ ;
    }
    ldv_44340: 
    {
#line 592
    tmp___11 = get_current();
#line 592
    tmp___12 = signal_pending(tmp___11);
    }
#line 592
    if (tmp___12 != 0) {
#line 592
      goto _L;
    } else {
      {
#line 592
      tmp___13 = kthread_should_stop();
      }
#line 592
      if ((int )tmp___13) {
        _L: /* CIL Label */ 
#line 593
        __ret___0 = 0L;
        {
#line 593
        if (8UL == 1UL) {
#line 593
          goto case_1___0;
        } else {

        }
#line 593
        if (8UL == 2UL) {
#line 593
          goto case_2___0;
        } else {

        }
#line 593
        if (8UL == 4UL) {
#line 593
          goto case_4___0;
        } else {

        }
#line 593
        if (8UL == 8UL) {
#line 593
          goto case_8___0;
        } else {

        }
#line 593
        goto switch_default___0;
        case_1___0: /* CIL Label */ 
        {
#line 593
        tmp___7 = get_current();
#line 593
        __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___7->state): : "memory",
                             "cc");
        }
#line 593
        goto ldv_44348;
        case_2___0: /* CIL Label */ 
        {
#line 593
        tmp___8 = get_current();
#line 593
        __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___8->state): : "memory",
                             "cc");
        }
#line 593
        goto ldv_44348;
        case_4___0: /* CIL Label */ 
        {
#line 593
        tmp___9 = get_current();
#line 593
        __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___9->state): : "memory",
                             "cc");
        }
#line 593
        goto ldv_44348;
        case_8___0: /* CIL Label */ 
        {
#line 593
        tmp___10 = get_current();
#line 593
        __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___10->state): : "memory",
                             "cc");
        }
#line 593
        goto ldv_44348;
        switch_default___0: /* CIL Label */ 
        {
#line 593
        __xchg_wrong_size();
        }
        switch_break___0: /* CIL Label */ ;
        }
        ldv_44348: ;
#line 594
        return (-4);
      } else {

      }
    }
    {
#line 596
    tmp___14 = msecs_to_jiffies(500U);
#line 596
    schedule_timeout((long )tmp___14);
    }
  } else {

  }
#line 598
  rqstp->rq_pages[i] = p;
  ldv_44355: ;
#line 588
  if ((unsigned long )rqstp->rq_pages[i] == (unsigned long )((struct page *)0)) {
#line 590
    goto ldv_44354;
  } else {

  }
#line 587
  i = i + 1;
  ldv_44358: ;
#line 587
  if (i < pages) {
#line 589
    goto ldv_44357;
  } else {

  }
  {
#line 600
  tmp___15 = i;
#line 600
  i = i + 1;
#line 600
  rqstp->rq_pages[tmp___15] = (struct page *)0;
#line 603
  arg = & rqstp->rq_arg;
#line 604
  arg->head[0].iov_base = lowmem_page_address((struct page  const  *)rqstp->rq_pages[0]);
#line 605
  arg->head[0].iov_len = 4096UL;
#line 606
  arg->pages = (struct page **)(& rqstp->rq_pages) + 1UL;
#line 607
  arg->page_base = 0U;
#line 609
  arg->page_len = (unsigned int )((unsigned long )(pages + -2)) * 4096U;
#line 610
  arg->len = (unsigned int )((unsigned long )(pages + -1)) * 4096U;
#line 611
  arg->tail[0].iov_len = 0UL;
  }
#line 612
  return (0);
}
}
#line 615 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
struct svc_xprt *svc_get_next_xprt(struct svc_rqst *rqstp , long timeout ) 
{ 
  struct svc_xprt *xprt ;
  struct svc_pool *pool ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  long time_left ;
  void *tmp___0 ;
  long volatile   __ret ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  long volatile   __ret___0 ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;
  void *tmp___9 ;
  bool tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  struct task_struct *tmp___14 ;
  int tmp___15 ;
  bool tmp___16 ;

  {
  {
#line 618
  pool = rqstp->rq_pool;
#line 619
  tmp = get_current();
#line 619
  wait.flags = 0U;
#line 619
  wait.private = (void *)tmp;
#line 619
  wait.func = & default_wake_function;
#line 619
  wait.task_list.next = (struct list_head *)0;
#line 619
  wait.task_list.prev = (struct list_head *)0;
#line 625
  rqstp->rq_chandle.thread_wait = 1250;
#line 627
  spin_lock_bh(& pool->sp_lock);
#line 628
  xprt = svc_xprt_dequeue(pool);
  }
#line 629
  if ((unsigned long )xprt != (unsigned long )((struct svc_xprt *)0)) {
    {
#line 630
    rqstp->rq_xprt = xprt;
#line 631
    svc_xprt_get(xprt);
#line 637
    rqstp->rq_chandle.thread_wait = 250;
#line 638
    pool->sp_task_pending = 0;
    }
  } else {
#line 640
    if (pool->sp_task_pending != 0) {
      {
#line 641
      pool->sp_task_pending = 0;
#line 642
      spin_unlock_bh(& pool->sp_lock);
#line 643
      tmp___0 = ERR_PTR(-11L);
      }
#line 643
      return ((struct svc_xprt *)tmp___0);
    } else {

    }
    {
#line 646
    svc_thread_enqueue(pool, rqstp);
#line 652
    __ret = 1L;
    }
    {
#line 652
    if (8UL == 1UL) {
#line 652
      goto case_1;
    } else {

    }
#line 652
    if (8UL == 2UL) {
#line 652
      goto case_2;
    } else {

    }
#line 652
    if (8UL == 4UL) {
#line 652
      goto case_4;
    } else {

    }
#line 652
    if (8UL == 8UL) {
#line 652
      goto case_8;
    } else {

    }
#line 652
    goto switch_default;
    case_1: /* CIL Label */ 
    {
#line 652
    tmp___1 = get_current();
#line 652
    __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___1->state): : "memory",
                         "cc");
    }
#line 652
    goto ldv_44370;
    case_2: /* CIL Label */ 
    {
#line 652
    tmp___2 = get_current();
#line 652
    __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                         "cc");
    }
#line 652
    goto ldv_44370;
    case_4: /* CIL Label */ 
    {
#line 652
    tmp___3 = get_current();
#line 652
    __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                         "cc");
    }
#line 652
    goto ldv_44370;
    case_8: /* CIL Label */ 
    {
#line 652
    tmp___4 = get_current();
#line 652
    __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                         "cc");
    }
#line 652
    goto ldv_44370;
    switch_default: /* CIL Label */ 
    {
#line 652
    __xchg_wrong_size();
    }
    switch_break: /* CIL Label */ ;
    }
    ldv_44370: 
    {
#line 661
    tmp___10 = kthread_should_stop();
    }
#line 661
    if ((int )tmp___10) {
#line 662
      __ret___0 = 0L;
      {
#line 662
      if (8UL == 1UL) {
#line 662
        goto case_1___0;
      } else {

      }
#line 662
      if (8UL == 2UL) {
#line 662
        goto case_2___0;
      } else {

      }
#line 662
      if (8UL == 4UL) {
#line 662
        goto case_4___0;
      } else {

      }
#line 662
      if (8UL == 8UL) {
#line 662
        goto case_8___0;
      } else {

      }
#line 662
      goto switch_default___0;
      case_1___0: /* CIL Label */ 
      {
#line 662
      tmp___5 = get_current();
#line 662
      __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___5->state): : "memory",
                           "cc");
      }
#line 662
      goto ldv_44378;
      case_2___0: /* CIL Label */ 
      {
#line 662
      tmp___6 = get_current();
#line 662
      __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___6->state): : "memory",
                           "cc");
      }
#line 662
      goto ldv_44378;
      case_4___0: /* CIL Label */ 
      {
#line 662
      tmp___7 = get_current();
#line 662
      __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___7->state): : "memory",
                           "cc");
      }
#line 662
      goto ldv_44378;
      case_8___0: /* CIL Label */ 
      {
#line 662
      tmp___8 = get_current();
#line 662
      __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___8->state): : "memory",
                           "cc");
      }
#line 662
      goto ldv_44378;
      switch_default___0: /* CIL Label */ 
      {
#line 662
      __xchg_wrong_size();
      }
      switch_break___0: /* CIL Label */ ;
      }
      ldv_44378: 
      {
#line 663
      spin_unlock_bh(& pool->sp_lock);
#line 664
      tmp___9 = ERR_PTR(-4L);
      }
#line 664
      return ((struct svc_xprt *)tmp___9);
    } else {

    }
    {
#line 667
    add_wait_queue(& rqstp->rq_wait, & wait);
#line 668
    spin_unlock_bh(& pool->sp_lock);
#line 670
    time_left = schedule_timeout(timeout);
#line 672
    try_to_freeze();
#line 674
    spin_lock_bh(& pool->sp_lock);
#line 675
    remove_wait_queue(& rqstp->rq_wait, & wait);
    }
#line 676
    if (time_left == 0L) {
#line 677
      pool->sp_stats.threads_timedout = pool->sp_stats.threads_timedout + 1UL;
    } else {

    }
#line 679
    xprt = rqstp->rq_xprt;
#line 680
    if ((unsigned long )xprt == (unsigned long )((struct svc_xprt *)0)) {
      {
#line 681
      svc_thread_dequeue(pool, rqstp);
#line 682
      spin_unlock_bh(& pool->sp_lock);
#line 683
      tmp___11 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
      }
#line 683
      if (tmp___11 != 0L) {
        {
#line 683
        printk("\001dsvc: server %p, no data yet\n", rqstp);
        }
      } else {

      }
      {
#line 684
      tmp___14 = get_current();
#line 684
      tmp___15 = signal_pending(tmp___14);
      }
#line 684
      if (tmp___15 != 0) {
        {
#line 685
        tmp___12 = ERR_PTR(-4L);
        }
#line 685
        return ((struct svc_xprt *)tmp___12);
      } else {
        {
#line 684
        tmp___16 = kthread_should_stop();
        }
#line 684
        if ((int )tmp___16) {
          {
#line 685
          tmp___12 = ERR_PTR(-4L);
          }
#line 685
          return ((struct svc_xprt *)tmp___12);
        } else {
          {
#line 687
          tmp___13 = ERR_PTR(-11L);
          }
#line 687
          return ((struct svc_xprt *)tmp___13);
        }
      }
    } else {

    }
  }
  {
#line 690
  spin_unlock_bh(& pool->sp_lock);
  }
#line 691
  return (xprt);
}
}
#line 694 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_add_new_temp_xprt(struct svc_serv *serv , struct svc_xprt *newxpt ) 
{ 
  struct lock_class_key __key ;

  {
  {
#line 696
  spin_lock_bh(& serv->sv_lock);
#line 697
  set_bit(4U, (unsigned long volatile   *)(& newxpt->xpt_flags));
#line 698
  list_add(& newxpt->xpt_list, & serv->sv_tempsocks);
#line 699
  serv->sv_tmpcnt = serv->sv_tmpcnt + 1;
  }
#line 700
  if ((unsigned long )serv->sv_temptimer.function == (unsigned long )((void (*)(unsigned long  ))0)) {
    {
#line 702
    init_timer_key(& serv->sv_temptimer, 0U, "((&serv->sv_temptimer))", & __key);
#line 702
    serv->sv_temptimer.function = & svc_age_temp_xprts;
#line 702
    serv->sv_temptimer.data = (unsigned long )serv;
#line 704
    ldv_mod_timer_13(& serv->sv_temptimer, (unsigned long )jiffies + (unsigned long )(svc_conn_age_period * 250));
    }
  } else {

  }
  {
#line 707
  spin_unlock_bh(& serv->sv_lock);
#line 708
  svc_xprt_received(newxpt);
  }
#line 709
  return;
}
}
#line 711 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static int svc_handle_xprt(struct svc_rqst *rqstp , struct svc_xprt *xprt ) 
{ 
  struct svc_serv *serv ;
  int len ;
  long tmp ;
  int tmp___0 ;
  struct svc_xprt *newxpt ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 713
  serv = rqstp->rq_server;
#line 714
  len = 0;
#line 716
  tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 716
  if (tmp___0 != 0) {
    {
#line 717
    tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 717
    if (tmp != 0L) {
      {
#line 717
      printk("\001dsvc_recv: found XPT_CLOSE\n");
      }
    } else {

    }
    {
#line 718
    svc_delete_xprt(xprt);
    }
#line 720
    return (0);
  } else {

  }
  {
#line 722
  tmp___5 = constant_test_bit(11U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 722
  if (tmp___5 != 0) {
    {
#line 728
    ldv___module_get_14((xprt->xpt_class)->xcl_owner);
#line 729
    svc_check_conn_limits(xprt->xpt_server);
#line 730
    newxpt = (*((xprt->xpt_ops)->xpo_accept))(xprt);
    }
#line 731
    if ((unsigned long )newxpt != (unsigned long )((struct svc_xprt *)0)) {
      {
#line 732
      svc_add_new_temp_xprt(serv, newxpt);
      }
    } else {
      {
#line 734
      ldv_module_put_15___1((xprt->xpt_class)->xcl_owner);
      }
    }
  } else {
    {
#line 735
    tmp___4 = (*((xprt->xpt_ops)->xpo_has_wspace))(xprt);
    }
#line 735
    if (tmp___4 != 0) {
      {
#line 737
      tmp___2 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
      }
#line 737
      if (tmp___2 != 0L) {
        {
#line 737
        tmp___1 = atomic_read((atomic_t const   *)(& xprt->xpt_ref.refcount));
#line 737
        printk("\001dsvc: server %p, pool %u, transport %p, inuse=%d\n", rqstp, (rqstp->rq_pool)->sp_id,
               xprt, tmp___1);
        }
      } else {

      }
      {
#line 740
      rqstp->rq_deferred = svc_deferred_dequeue(xprt);
      }
#line 741
      if ((unsigned long )rqstp->rq_deferred != (unsigned long )((struct svc_deferred_req *)0)) {
        {
#line 742
        len = svc_deferred_recv(rqstp);
        }
      } else {
        {
#line 744
        len = (*((xprt->xpt_ops)->xpo_recvfrom))(rqstp);
        }
      }
      {
#line 745
      tmp___3 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
      }
#line 745
      if (tmp___3 != 0L) {
        {
#line 745
        printk("\001dsvc: got len=%d\n", len);
        }
      } else {

      }
      {
#line 746
      rqstp->rq_reserved = (int )serv->sv_max_mesg;
#line 747
      atomic_add(rqstp->rq_reserved, & xprt->xpt_reserved);
      }
    } else {

    }
  }
  {
#line 750
  svc_xprt_received(xprt);
  }
#line 751
  return (len);
}
}
#line 759 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_recv(struct svc_rqst *rqstp , long timeout ) 
{ 
  struct svc_xprt *xprt ;
  struct svc_serv *serv ;
  int len ;
  int err ;
  long tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  struct sockaddr *tmp___6 ;
  int tmp___7 ;

  {
  {
#line 761
  xprt = (struct svc_xprt *)0;
#line 762
  serv = rqstp->rq_server;
#line 765
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 765
  if (tmp != 0L) {
    {
#line 765
    printk("\001dsvc: server %p waiting for data (to = %ld)\n", rqstp, timeout);
    }
  } else {

  }
#line 768
  if ((unsigned long )rqstp->rq_xprt != (unsigned long )((struct svc_xprt *)0)) {
    {
#line 769
    printk("\vsvc_recv: service %p, transport not NULL!\n", rqstp);
    }
  } else {

  }
  {
#line 772
  tmp___0 = waitqueue_active(& rqstp->rq_wait);
  }
#line 772
  if (tmp___0 != 0) {
    {
#line 773
    printk("\vsvc_recv: service %p, wait queue active!\n", rqstp);
    }
  } else {

  }
  {
#line 777
  err = svc_alloc_arg(rqstp);
  }
#line 778
  if (err != 0) {
#line 779
    return (err);
  } else {

  }
  {
#line 781
  try_to_freeze();
#line 782
  __might_sleep("net/sunrpc/svc_xprt.c", 782, 0);
#line 782
  _cond_resched();
#line 783
  tmp___1 = get_current();
#line 783
  tmp___2 = signal_pending(tmp___1);
  }
#line 783
  if (tmp___2 != 0) {
#line 784
    return (-4);
  } else {
    {
#line 783
    tmp___3 = kthread_should_stop();
    }
#line 783
    if ((int )tmp___3) {
#line 784
      return (-4);
    } else {

    }
  }
  {
#line 786
  xprt = svc_get_next_xprt(rqstp, timeout);
#line 787
  tmp___5 = IS_ERR((void const   *)xprt);
  }
#line 787
  if (tmp___5 != 0L) {
    {
#line 788
    tmp___4 = PTR_ERR((void const   *)xprt);
    }
#line 788
    return ((int )tmp___4);
  } else {

  }
  {
#line 790
  len = svc_handle_xprt(rqstp, xprt);
  }
#line 793
  if (len <= 0) {
#line 794
    goto out;
  } else {

  }
  {
#line 796
  clear_bit(9, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 798
  tmp___6 = svc_addr((struct svc_rqst  const  *)rqstp);
#line 798
  tmp___7 = svc_port_is_privileged(tmp___6);
#line 798
  rqstp->rq_secure = (unsigned char )tmp___7;
#line 799
  rqstp->rq_chandle.defer = & svc_defer;
  }
#line 801
  if ((unsigned long )serv->sv_stats != (unsigned long )((struct svc_stat *)0)) {
#line 802
    (serv->sv_stats)->netcnt = (serv->sv_stats)->netcnt + 1U;
  } else {

  }
#line 803
  return (len);
  out: 
  {
#line 805
  rqstp->rq_res.len = 0U;
#line 806
  svc_xprt_release(rqstp);
  }
#line 807
  return (-11);
}
}
#line 814 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_drop(struct svc_rqst *rqstp ) 
{ 
  long tmp ;

  {
  {
#line 816
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 816
  if (tmp != 0L) {
    {
#line 816
    printk("\001dsvc: xprt %p dropped request\n", rqstp->rq_xprt);
    }
  } else {

  }
  {
#line 817
  svc_xprt_release(rqstp);
  }
#line 818
  return;
}
}
#line 824 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_send(struct svc_rqst *rqstp ) 
{ 
  struct svc_xprt *xprt ;
  int len ;
  struct xdr_buf *xb ;
  int tmp ;
  int tmp___0 ;

  {
#line 830
  xprt = rqstp->rq_xprt;
#line 831
  if ((unsigned long )xprt == (unsigned long )((struct svc_xprt *)0)) {
#line 832
    return (-14);
  } else {

  }
  {
#line 835
  (*(((rqstp->rq_xprt)->xpt_ops)->xpo_release_rqst))(rqstp);
#line 838
  xb = & rqstp->rq_res;
#line 839
  xb->len = ((unsigned int )xb->head[0].iov_len + xb->page_len) + (unsigned int )xb->tail[0].iov_len;
#line 844
  mutex_lock_nested(& xprt->xpt_mutex, 0U);
#line 845
  tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 845
  if (tmp != 0) {
#line 847
    len = -107;
  } else {
    {
#line 845
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& xprt->xpt_flags));
    }
#line 845
    if (tmp___0 != 0) {
#line 847
      len = -107;
    } else {
      {
#line 849
      len = (*((xprt->xpt_ops)->xpo_sendto))(rqstp);
      }
    }
  }
  {
#line 850
  mutex_unlock(& xprt->xpt_mutex);
#line 851
  rpc_wake_up(& xprt->xpt_bc_pending);
#line 852
  svc_xprt_release(rqstp);
  }
#line 854
  if ((len == -111 || len == -107) || len == -11) {
#line 855
    return (0);
  } else {

  }
#line 856
  return (len);
}
}
#line 863 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_age_temp_xprts(unsigned long closure ) 
{ 
  struct svc_serv *serv ;
  struct svc_xprt *xprt ;
  struct list_head *le ;
  struct list_head *next ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;

  {
  {
#line 865
  serv = (struct svc_serv *)closure;
#line 869
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 869
  if (tmp != 0L) {
    {
#line 869
    printk("\001dsvc_age_temp_xprts\n");
    }
  } else {

  }
  {
#line 871
  tmp___1 = spin_trylock_bh(& serv->sv_lock);
  }
#line 871
  if (tmp___1 == 0) {
    {
#line 873
    tmp___0 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
    }
#line 873
    if (tmp___0 != 0L) {
      {
#line 873
      printk("\001dsvc_age_temp_xprts: busy\n");
      }
    } else {

    }
    {
#line 874
    ldv_mod_timer_16(& serv->sv_temptimer, (unsigned long )jiffies + 250UL);
    }
#line 875
    return;
  } else {

  }
#line 878
  le = serv->sv_tempsocks.next;
#line 878
  next = le->next;
#line 878
  goto ldv_44439;
  ldv_44438: 
  {
#line 879
  __mptr = (struct list_head  const  *)le;
#line 879
  xprt = (struct svc_xprt *)((char *)__mptr + 0xffffffffffffffe8UL);
#line 883
  tmp___2 = test_and_set_bit(9, (unsigned long volatile   *)(& xprt->xpt_flags));
  }
#line 883
  if (tmp___2 == 0) {
#line 884
    goto ldv_44437;
  } else {

  }
  {
#line 885
  tmp___3 = atomic_read((atomic_t const   *)(& xprt->xpt_ref.refcount));
  }
#line 885
  if (tmp___3 > 1) {
#line 887
    goto ldv_44437;
  } else {
    {
#line 885
    tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& xprt->xpt_flags));
    }
#line 885
    if (tmp___4 != 0) {
#line 887
      goto ldv_44437;
    } else {

    }
  }
  {
#line 888
  list_del_init(le);
#line 889
  set_bit(2U, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 890
  set_bit(10U, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 891
  tmp___5 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 891
  if (tmp___5 != 0L) {
    {
#line 891
    printk("\001dqueuing xprt %p for closing\n", xprt);
    }
  } else {

  }
  {
#line 894
  svc_xprt_enqueue(xprt);
  }
  ldv_44437: 
#line 878
  le = next;
#line 878
  next = le->next;
  ldv_44439: ;
#line 878
  if ((unsigned long )le != (unsigned long )(& serv->sv_tempsocks)) {
#line 880
    goto ldv_44438;
  } else {

  }
  {
#line 896
  spin_unlock_bh(& serv->sv_lock);
#line 898
  ldv_mod_timer_17(& serv->sv_temptimer, (unsigned long )jiffies + (unsigned long )(svc_conn_age_period * 250));
  }
#line 899
  return;
}
}
#line 901 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void call_xpt_users(struct svc_xprt *xprt ) 
{ 
  struct svc_xpt_user *u ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
  {
#line 905
  spin_lock(& xprt->xpt_lock);
  }
#line 906
  goto ldv_44448;
  ldv_44447: 
  {
#line 907
  __mptr = (struct list_head  const  *)xprt->xpt_users.next;
#line 907
  u = (struct svc_xpt_user *)__mptr;
#line 908
  list_del(& u->list);
#line 909
  (*(u->callback))(u);
  }
  ldv_44448: 
  {
#line 906
  tmp = list_empty((struct list_head  const  *)(& xprt->xpt_users));
  }
#line 906
  if (tmp == 0) {
#line 908
    goto ldv_44447;
  } else {

  }
  {
#line 911
  spin_unlock(& xprt->xpt_lock);
  }
#line 912
  return;
}
}
#line 917 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_delete_xprt(struct svc_xprt *xprt ) 
{ 
  struct svc_serv *serv ;
  struct svc_deferred_req *dr ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;

  {
  {
#line 919
  serv = xprt->xpt_server;
#line 923
  tmp = test_and_set_bit(6, (unsigned long volatile   *)(& xprt->xpt_flags));
  }
#line 923
  if (tmp != 0) {
    {
#line 924
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"net/sunrpc/svc_xprt.c"),
                         "i" (924), "i" (12UL));
#line 924
    __builtin_unreachable();
    }
  } else {

  }
  {
#line 926
  tmp___0 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 926
  if (tmp___0 != 0L) {
    {
#line 926
    printk("\001dsvc: svc_delete_xprt(%p)\n", xprt);
    }
  } else {

  }
  {
#line 927
  (*((xprt->xpt_ops)->xpo_detach))(xprt);
#line 929
  spin_lock_bh(& serv->sv_lock);
#line 930
  tmp___1 = test_and_set_bit(10, (unsigned long volatile   *)(& xprt->xpt_flags));
  }
#line 930
  if (tmp___1 == 0) {
    {
#line 931
    list_del_init(& xprt->xpt_list);
    }
  } else {

  }
  {
#line 932
  tmp___2 = list_empty((struct list_head  const  *)(& xprt->xpt_ready));
#line 932
  __ret_warn_once = tmp___2 == 0;
#line 932
  tmp___5 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 932
  if (tmp___5 != 0L) {
    {
#line 932
    __ret_warn_on = ! __warned;
#line 932
    tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 932
    if (tmp___3 != 0L) {
      {
#line 932
      warn_slowpath_null("net/sunrpc/svc_xprt.c", 932);
      }
    } else {

    }
    {
#line 932
    tmp___4 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 932
    if (tmp___4 != 0L) {
#line 932
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 932
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 933
  tmp___6 = constant_test_bit(4U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 933
  if (tmp___6 != 0) {
#line 934
    serv->sv_tmpcnt = serv->sv_tmpcnt - 1;
  } else {

  }
  {
#line 935
  spin_unlock_bh(& serv->sv_lock);
  }
#line 937
  goto ldv_44461;
  ldv_44460: 
  {
#line 938
  kfree((void const   *)dr);
  }
  ldv_44461: 
  {
#line 937
  dr = svc_deferred_dequeue(xprt);
  }
#line 937
  if ((unsigned long )dr != (unsigned long )((struct svc_deferred_req *)0)) {
#line 939
    goto ldv_44460;
  } else {

  }
  {
#line 940
  call_xpt_users(xprt);
#line 941
  svc_xprt_put(xprt);
  }
#line 942
  return;
}
}
#line 944 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_close_xprt(struct svc_xprt *xprt ) 
{ 
  int tmp ;

  {
  {
#line 946
  set_bit(2U, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 947
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& xprt->xpt_flags));
  }
#line 947
  if (tmp != 0) {
#line 949
    return;
  } else {

  }
  {
#line 956
  svc_delete_xprt(xprt);
  }
#line 957
  return;
}
}
#line 960 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static int svc_close_list(struct svc_serv *serv , struct list_head *xprt_list___0 ,
                          struct net *net ) 
{ 
  struct svc_xprt *xprt ;
  int ret ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
  {
#line 963
  ret = 0;
#line 965
  spin_lock(& serv->sv_lock);
#line 966
  __mptr = (struct list_head  const  *)xprt_list___0->next;
#line 966
  xprt = (struct svc_xprt *)((char *)__mptr + 0xffffffffffffffe8UL);
  }
#line 966
  goto ldv_44485;
  ldv_44484: ;
#line 967
  if ((unsigned long )xprt->xpt_net != (unsigned long )net) {
#line 968
    goto ldv_44483;
  } else {

  }
  {
#line 969
  ret = ret + 1;
#line 970
  set_bit(2U, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 971
  svc_xprt_enqueue(xprt);
  }
  ldv_44483: 
#line 966
  __mptr___0 = (struct list_head  const  *)xprt->xpt_list.next;
#line 966
  xprt = (struct svc_xprt *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  ldv_44485: ;
#line 966
  if ((unsigned long )(& xprt->xpt_list) != (unsigned long )xprt_list___0) {
#line 968
    goto ldv_44484;
  } else {

  }
  {
#line 973
  spin_unlock(& serv->sv_lock);
  }
#line 974
  return (ret);
}
}
#line 977 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static struct svc_xprt *svc_dequeue_net(struct svc_serv *serv , struct net *net ) 
{ 
  struct svc_pool *pool ;
  struct svc_xprt *xprt ;
  struct svc_xprt *tmp ;
  int i ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 984
  i = 0;
#line 984
  goto ldv_44506;
  ldv_44505: 
  {
#line 985
  pool = serv->sv_pools + (unsigned long )i;
#line 987
  spin_lock_bh(& pool->sp_lock);
#line 988
  __mptr = (struct list_head  const  *)pool->sp_sockets.next;
#line 988
  xprt = (struct svc_xprt *)((char *)__mptr + 0xffffffffffffffd8UL);
#line 988
  __mptr___0 = (struct list_head  const  *)xprt->xpt_ready.next;
#line 988
  tmp = (struct svc_xprt *)((char *)__mptr___0 + 0xffffffffffffffd8UL);
  }
#line 988
  goto ldv_44503;
  ldv_44502: ;
#line 989
  if ((unsigned long )xprt->xpt_net != (unsigned long )net) {
#line 990
    goto ldv_44501;
  } else {

  }
  {
#line 991
  list_del_init(& xprt->xpt_ready);
#line 992
  spin_unlock_bh(& pool->sp_lock);
  }
#line 993
  return (xprt);
  ldv_44501: 
#line 988
  xprt = tmp;
#line 988
  __mptr___1 = (struct list_head  const  *)tmp->xpt_ready.next;
#line 988
  tmp = (struct svc_xprt *)((char *)__mptr___1 + 0xffffffffffffffd8UL);
  ldv_44503: ;
#line 988
  if ((unsigned long )(& xprt->xpt_ready) != (unsigned long )(& pool->sp_sockets)) {
#line 990
    goto ldv_44502;
  } else {

  }
  {
#line 995
  spin_unlock_bh(& pool->sp_lock);
#line 984
  i = i + 1;
  }
  ldv_44506: ;
#line 984
  if ((unsigned int )i < serv->sv_nrpools) {
#line 986
    goto ldv_44505;
  } else {

  }

#line 997
  return ((struct svc_xprt *)0);
}
}
#line 1000 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_clean_up_xprts(struct svc_serv *serv , struct net *net ) 
{ 
  struct svc_xprt *xprt ;

  {
#line 1004
  goto ldv_44514;
  ldv_44513: 
  {
#line 1005
  set_bit(2U, (unsigned long volatile   *)(& xprt->xpt_flags));
#line 1006
  svc_delete_xprt(xprt);
  }
  ldv_44514: 
  {
#line 1004
  xprt = svc_dequeue_net(serv, net);
  }
#line 1004
  if ((unsigned long )xprt != (unsigned long )((struct svc_xprt *)0)) {
#line 1006
    goto ldv_44513;
  } else {

  }

#line 1011
  return;
}
}
#line 1022 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
void svc_close_net(struct svc_serv *serv , struct net *net ) 
{ 
  int delay ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1024
  delay = 0;
#line 1026
  goto ldv_44522;
  ldv_44521: 
  {
#line 1029
  svc_clean_up_xprts(serv, net);
#line 1030
  tmp = delay;
#line 1030
  delay = delay + 1;
#line 1030
  msleep((unsigned int )tmp);
  }
  ldv_44522: 
  {
#line 1026
  tmp___0 = svc_close_list(serv, & serv->sv_permsocks, net);
#line 1026
  tmp___1 = svc_close_list(serv, & serv->sv_tempsocks, net);
  }
#line 1026
  if (tmp___0 + tmp___1 != 0) {
#line 1028
    goto ldv_44521;
  } else {

  }

#line 1033
  return;
}
}
#line 1038 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_revisit(struct cache_deferred_req *dreq , int too_many ) 
{ 
  struct svc_deferred_req *dr ;
  struct cache_deferred_req  const  *__mptr ;
  struct svc_xprt *xprt ;
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 1041
  __mptr = (struct cache_deferred_req  const  *)dreq;
#line 1041
  dr = (struct svc_deferred_req *)((char *)__mptr + 0xfffffffffffffee0UL);
#line 1042
  xprt = dr->xprt;
#line 1044
  spin_lock(& xprt->xpt_lock);
#line 1045
  set_bit(8U, (unsigned long volatile   *)(& xprt->xpt_flags));
  }
#line 1046
  if (too_many != 0) {
#line 1046
    goto _L;
  } else {
    {
#line 1046
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& xprt->xpt_flags));
    }
#line 1046
    if (tmp___0 != 0) {
      _L: /* CIL Label */ 
      {
#line 1047
      spin_unlock(& xprt->xpt_lock);
#line 1048
      tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
      }
#line 1048
      if (tmp != 0L) {
        {
#line 1048
        printk("\001drevisit canceled\n");
        }
      } else {

      }
      {
#line 1049
      svc_xprt_put(xprt);
#line 1050
      kfree((void const   *)dr);
      }
#line 1051
      return;
    } else {

    }
  }
  {
#line 1053
  tmp___1 = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1053
  if (tmp___1 != 0L) {
    {
#line 1053
    printk("\001drevisit queued\n");
    }
  } else {

  }
  {
#line 1054
  dr->xprt = (struct svc_xprt *)0;
#line 1055
  list_add(& dr->handle.recent, & xprt->xpt_deferred);
#line 1056
  spin_unlock(& xprt->xpt_lock);
#line 1057
  svc_xprt_enqueue(xprt);
#line 1058
  svc_xprt_put(xprt);
  }
#line 1059
  return;
}
}
#line 1070 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static struct cache_deferred_req *svc_defer(struct cache_req *req ) 
{ 
  struct svc_rqst *rqstp ;
  struct cache_req  const  *__mptr ;
  struct svc_deferred_req *dr ;
  size_t skip ;
  size_t size ;
  void *tmp ;

  {
#line 1072
  __mptr = (struct cache_req  const  *)req;
#line 1072
  rqstp = (struct svc_rqst *)((char *)__mptr + 0xffffffffffffe550UL);
#line 1075
  if (rqstp->rq_arg.page_len != 0U || rqstp->rq_usedeferral == 0) {
#line 1076
    return ((struct cache_deferred_req *)0);
  } else {

  }
#line 1077
  if ((unsigned long )rqstp->rq_deferred != (unsigned long )((struct svc_deferred_req *)0)) {
#line 1078
    dr = rqstp->rq_deferred;
#line 1079
    rqstp->rq_deferred = (struct svc_deferred_req *)0;
  } else {
    {
#line 1084
    size = (unsigned long )rqstp->rq_arg.len + 360UL;
#line 1085
    tmp = kmalloc(size, 208U);
#line 1085
    dr = (struct svc_deferred_req *)tmp;
    }
#line 1086
    if ((unsigned long )dr == (unsigned long )((struct svc_deferred_req *)0)) {
#line 1087
      return ((struct cache_deferred_req *)0);
    } else {

    }
    {
#line 1089
    dr->handle.owner = (void *)rqstp->rq_server;
#line 1090
    dr->prot = rqstp->rq_prot;
#line 1091
    memcpy((void *)(& dr->addr), (void const   *)(& rqstp->rq_addr), rqstp->rq_addrlen);
#line 1092
    dr->addrlen = rqstp->rq_addrlen;
#line 1093
    dr->daddr = rqstp->rq_daddr;
#line 1094
    dr->argslen = (int )(rqstp->rq_arg.len >> 2);
#line 1095
    dr->xprt_hlen = rqstp->rq_xprt_hlen;
#line 1098
    skip = (size_t )rqstp->rq_arg.len - rqstp->rq_arg.head[0].iov_len;
#line 1099
    memcpy((void *)(& dr->args), (void const   *)(rqstp->rq_arg.head[0].iov_base + - skip),
           (size_t )(dr->argslen << 2));
    }
  }
  {
#line 1102
  svc_xprt_get(rqstp->rq_xprt);
#line 1103
  dr->xprt = rqstp->rq_xprt;
#line 1104
  rqstp->rq_dropme = 1;
#line 1106
  dr->handle.revisit = & svc_revisit;
  }
#line 1107
  return (& dr->handle);
}
}
#line 1113 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static int svc_deferred_recv(struct svc_rqst *rqstp ) 
{ 
  struct svc_deferred_req *dr ;

  {
  {
#line 1115
  dr = rqstp->rq_deferred;
#line 1118
  rqstp->rq_arg.head[0].iov_base = (void *)((__be32 *)(& dr->args) + (dr->xprt_hlen >> 2));
#line 1120
  rqstp->rq_arg.head[0].iov_len = (size_t )(dr->argslen << 2) - dr->xprt_hlen;
#line 1121
  rqstp->rq_arg.page_len = 0U;
#line 1123
  rqstp->rq_arg.len = (unsigned int )(dr->argslen << 2);
#line 1124
  rqstp->rq_prot = dr->prot;
#line 1125
  memcpy((void *)(& rqstp->rq_addr), (void const   *)(& dr->addr), dr->addrlen);
#line 1126
  rqstp->rq_addrlen = dr->addrlen;
#line 1128
  rqstp->rq_xprt_hlen = dr->xprt_hlen;
#line 1129
  rqstp->rq_daddr = dr->daddr;
#line 1130
  rqstp->rq_respages = (struct page **)(& rqstp->rq_pages);
  }
#line 1131
  return ((int )((unsigned int )(dr->argslen << 2) - (unsigned int )dr->xprt_hlen));
}
}
#line 1135 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static struct svc_deferred_req *svc_deferred_dequeue(struct svc_xprt *xprt ) 
{ 
  struct svc_deferred_req *dr ;
  int tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;

  {
  {
#line 1137
  dr = (struct svc_deferred_req *)0;
#line 1139
  tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& xprt->xpt_flags));
  }
#line 1139
  if (tmp == 0) {
#line 1140
    return ((struct svc_deferred_req *)0);
  } else {

  }
  {
#line 1141
  spin_lock(& xprt->xpt_lock);
#line 1142
  tmp___0 = list_empty((struct list_head  const  *)(& xprt->xpt_deferred));
  }
#line 1142
  if (tmp___0 == 0) {
    {
#line 1143
    __mptr = (struct list_head  const  *)xprt->xpt_deferred.next;
#line 1143
    dr = (struct svc_deferred_req *)((char *)__mptr + 0xfffffffffffffed0UL);
#line 1146
    list_del_init(& dr->handle.recent);
    }
  } else {
    {
#line 1148
    clear_bit(8, (unsigned long volatile   *)(& xprt->xpt_flags));
    }
  }
  {
#line 1149
  spin_unlock(& xprt->xpt_lock);
  }
#line 1150
  return (dr);
}
}
#line 1169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
struct svc_xprt *svc_find_xprt(struct svc_serv *serv , char const   *xcl_name , struct net *net ,
                               sa_family_t const   af , unsigned short const   port ) 
{ 
  struct svc_xprt *xprt ;
  struct svc_xprt *found ;
  struct list_head  const  *__mptr ;
  int tmp ;
  unsigned short tmp___0 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1174
  found = (struct svc_xprt *)0;
#line 1177
  if ((unsigned long )serv == (unsigned long )((struct svc_serv *)0) || (unsigned long )xcl_name == (unsigned long )((char const   *)0)) {
#line 1178
    return (found);
  } else {

  }
  {
#line 1180
  spin_lock_bh(& serv->sv_lock);
#line 1181
  __mptr = (struct list_head  const  *)serv->sv_permsocks.next;
#line 1181
  xprt = (struct svc_xprt *)((char *)__mptr + 0xffffffffffffffe8UL);
  }
#line 1181
  goto ldv_44567;
  ldv_44566: ;
#line 1182
  if ((unsigned long )xprt->xpt_net != (unsigned long )net) {
#line 1183
    goto ldv_44564;
  } else {

  }
  {
#line 1184
  tmp = strcmp((xprt->xpt_class)->xcl_name, xcl_name);
  }
#line 1184
  if (tmp != 0) {
#line 1185
    goto ldv_44564;
  } else {

  }
#line 1186
  if ((unsigned int )((unsigned short )af) != 0U && (int )((unsigned short )af) != (int )xprt->xpt_local.ss_family) {
#line 1187
    goto ldv_44564;
  } else {

  }
#line 1188
  if ((unsigned int )((unsigned short )port) != 0U) {
    {
#line 1188
    tmp___0 = svc_xprt_local_port((struct svc_xprt  const  *)xprt);
    }
#line 1188
    if ((int )((unsigned short )port) != (int )tmp___0) {
#line 1189
      goto ldv_44564;
    } else {

    }
  } else {

  }
  {
#line 1190
  found = xprt;
#line 1191
  svc_xprt_get(xprt);
  }
#line 1192
  goto ldv_44565;
  ldv_44564: 
#line 1181
  __mptr___0 = (struct list_head  const  *)xprt->xpt_list.next;
#line 1181
  xprt = (struct svc_xprt *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  ldv_44567: ;
#line 1181
  if ((unsigned long )(& xprt->xpt_list) != (unsigned long )(& serv->sv_permsocks)) {
#line 1183
    goto ldv_44566;
  } else {

  }
  ldv_44565: 
  {
#line 1194
  spin_unlock_bh(& serv->sv_lock);
  }
#line 1195
  return (found);
}
}
#line 1199 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static int svc_one_xprt_name(struct svc_xprt  const  *xprt , char *pos , int remaining ) 
{ 
  int len ;
  unsigned short tmp ;

  {
  {
#line 1204
  tmp = svc_xprt_local_port(xprt);
#line 1204
  len = snprintf(pos, (size_t )remaining, "%s %u\n", (xprt->xpt_class)->xcl_name,
                 (int )tmp);
  }
#line 1207
  if (len >= remaining) {
#line 1208
    return (-36);
  } else {

  }
#line 1209
  return (len);
}
}
#line 1224 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_xprt_names(struct svc_serv *serv , char *buf , int const   buflen ) 
{ 
  struct svc_xprt *xprt ;
  int len ;
  int totlen ;
  char *pos ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1231
  if ((unsigned long )serv == (unsigned long )((struct svc_serv *)0)) {
#line 1232
    return (0);
  } else {

  }
  {
#line 1234
  spin_lock_bh(& serv->sv_lock);
#line 1236
  pos = buf;
#line 1237
  totlen = 0;
#line 1238
  __mptr = (struct list_head  const  *)serv->sv_permsocks.next;
#line 1238
  xprt = (struct svc_xprt *)((char *)__mptr + 0xffffffffffffffe8UL);
  }
#line 1238
  goto ldv_44599;
  ldv_44598: 
  {
#line 1239
  len = svc_one_xprt_name((struct svc_xprt  const  *)xprt, pos, (int )buflen - totlen);
  }
#line 1240
  if (len < 0) {
#line 1241
    *buf = 0;
#line 1242
    totlen = len;
  } else {

  }
#line 1244
  if (len <= 0) {
#line 1245
    goto ldv_44597;
  } else {

  }
#line 1247
  pos = pos + (unsigned long )len;
#line 1248
  totlen = totlen + len;
#line 1238
  __mptr___0 = (struct list_head  const  *)xprt->xpt_list.next;
#line 1238
  xprt = (struct svc_xprt *)((char *)__mptr___0 + 0xffffffffffffffe8UL);
  ldv_44599: ;
#line 1238
  if ((unsigned long )(& xprt->xpt_list) != (unsigned long )(& serv->sv_permsocks)) {
#line 1240
    goto ldv_44598;
  } else {

  }
  ldv_44597: 
  {
#line 1251
  spin_unlock_bh(& serv->sv_lock);
  }
#line 1252
  return (totlen);
}
}
#line 1259 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void *svc_pool_stats_start(struct seq_file *m , loff_t *pos ) 
{ 
  unsigned int pidx ;
  struct svc_serv *serv ;
  long tmp ;

  {
  {
#line 1261
  pidx = (unsigned int )*pos;
#line 1262
  serv = (struct svc_serv *)m->private;
#line 1264
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1264
  if (tmp != 0L) {
    {
#line 1264
    printk("\001dsvc_pool_stats_start, *pidx=%u\n", pidx);
    }
  } else {

  }
#line 1266
  if (pidx == 0U) {
#line 1267
    return ((void *)1);
  } else {

  }
#line 1268
  return (pidx <= serv->sv_nrpools ? (void *)(serv->sv_pools + (unsigned long )(pidx - 1U)) : (void *)0);
}
}
#line 1271 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void *svc_pool_stats_next(struct seq_file *m , void *p , loff_t *pos ) 
{ 
  struct svc_pool *pool ;
  struct svc_serv *serv ;
  long tmp ;
  unsigned int pidx ;

  {
  {
#line 1273
  pool = (struct svc_pool *)p;
#line 1274
  serv = (struct svc_serv *)m->private;
#line 1276
  tmp = __builtin_expect((rpc_debug & 256U) != 0U, 0L);
  }
#line 1276
  if (tmp != 0L) {
    {
#line 1276
    printk("\001dsvc_pool_stats_next, *pos=%llu\n", *pos);
    }
  } else {

  }
#line 1278
  if ((unsigned long )p == (unsigned long )((void *)1)) {
#line 1279
    pool = serv->sv_pools;
  } else {
#line 1281
    pidx = (unsigned int )(((long )pool - (long )serv->sv_pools) / 192L);
#line 1282
    if (pidx < serv->sv_nrpools - 1U) {
#line 1283
      pool = serv->sv_pools + (unsigned long )(pidx + 1U);
    } else {
#line 1285
      pool = (struct svc_pool *)0;
    }
  }
#line 1287
  *pos = *pos + 1LL;
#line 1288
  return ((void *)pool);
}
}
#line 1291 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static void svc_pool_stats_stop(struct seq_file *m , void *p ) 
{ 


  {
#line 1293
  return;
}
}
#line 1295 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static int svc_pool_stats_show(struct seq_file *m , void *p ) 
{ 
  struct svc_pool *pool ;

  {
#line 1297
  pool = (struct svc_pool *)p;
#line 1299
  if ((unsigned long )p == (unsigned long )((void *)1)) {
    {
#line 1300
    seq_puts(m, "# pool packets-arrived sockets-enqueued threads-woken threads-timedout\n");
    }
#line 1301
    return (0);
  } else {

  }
  {
#line 1304
  seq_printf(m, "%u %lu %lu %lu %lu\n", pool->sp_id, pool->sp_stats.packets, pool->sp_stats.sockets_queued,
             pool->sp_stats.threads_woken, pool->sp_stats.threads_timedout);
  }
#line 1311
  return (0);
}
}
#line 1314 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
static struct seq_operations  const  svc_pool_stats_seq_ops  =    {& svc_pool_stats_start, & svc_pool_stats_stop, & svc_pool_stats_next, & svc_pool_stats_show};
#line 1321 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/svc_xprt.c"
int svc_pool_stats_open(struct svc_serv *serv , struct file *file ) 
{ 
  int err ;

  {
  {
#line 1325
  err = ldv_seq_open_18(file, & svc_pool_stats_seq_ops);
  }
#line 1326
  if (err == 0) {
#line 1327
    ((struct seq_file *)file->private_data)->private = (void *)serv;
  } else {

  }
#line 1328
  return (err);
}
}
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
extern int ldv_emg_seq_open(struct file * , struct seq_operations * ) ;
#line 81
void ldv_traverse_kernel_items_scenario_12(void *arg0 ) ;
#line 82
void *ldv_traverse_kernel_items_scenario_next_12_7(void *(*arg0)(struct seq_file * ,
                                                                 void * , loff_t * ) ,
                                                   struct seq_file *arg1 , void *arg2 ,
                                                   long long *arg3 ) ;
#line 83
int ldv_traverse_kernel_items_scenario_show_12_9(pid_t (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) ;
#line 84
void *ldv_traverse_kernel_items_scenario_start_12_14(void *(*arg0)(struct seq_file * ,
                                                                   loff_t * ) , struct seq_file *arg1 ,
                                                     long long *arg2 ) ;
#line 85
void ldv_traverse_kernel_items_scenario_stop_12_2(void (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                  void *arg2 ) ;
#line 86
void ldv_traverse_kernel_items_scenario_stop_12_5(void (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                  void *arg2 ) ;
#line 94 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
void ldv_traverse_kernel_items_scenario_12(void *arg0 ) 
{ 
  loff_t *ldv_12_index_index ;
  struct seq_operations *ldv_12_ops_seq_operations ;
  loff_t *ldv_12_ret_index ;
  struct seq_file *ldv_12_seq_file_seq_file ;
  int ldv_12_show_ret_default ;
  struct ldv_struct_traverse_kernel_items_scenario_11 *data ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;

  {
  {
#line 103
  data = (struct ldv_struct_traverse_kernel_items_scenario_11 *)arg0;
#line 107
  ldv_12_show_ret_default = ldv_undef_int();
  }
#line 110
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_traverse_kernel_items_scenario_11 *)0)) {
    {
#line 111
    ldv_12_seq_file_seq_file = data->arg0;
#line 112
    ldv_12_ops_seq_operations = data->arg1;
#line 113
    ldv_free((void *)data);
    }
  } else {

  }
  {
#line 118
  tmp = ldv_xmalloc(8UL);
#line 118
  ldv_12_index_index = (loff_t *)tmp;
  }
#line 125
  goto ldv_outer_loop_12;
#line 127
  return;
  ldv_outer_loop_12: 
  {
#line 133
  tmp___1 = ldv_undef_int();
  }
#line 133
  if (tmp___1 != 0) {
    {
#line 136
    *ldv_12_index_index = 0LL;
#line 138
    tmp___0 = ldv_traverse_kernel_items_scenario_start_12_14(ldv_12_ops_seq_operations->start,
                                                             ldv_12_seq_file_seq_file,
                                                             ldv_12_index_index);
#line 138
    ldv_12_ret_index = (loff_t *)tmp___0;
    }
#line 145
    goto ldv_inner_loop_12;
  } else {
    {
#line 149
    ldv_free((void *)ldv_12_index_index);
    }
#line 157
    return;
  }
#line 160
  return;
  ldv_inner_loop_12: 
  {
#line 166
  tmp___6 = ldv_undef_int();
  }
#line 166
  if (tmp___6 != 0) {
    {
#line 168
    tmp___2 = ldv_is_err_or_null((void const   *)ldv_12_ret_index);
#line 168
    __VERIFIER_assume(tmp___2 == 0L);
#line 173
    ldv_12_show_ret_default = ldv_traverse_kernel_items_scenario_show_12_9(ldv_12_ops_seq_operations->show,
                                                                           ldv_12_seq_file_seq_file,
                                                                           (void *)ldv_12_ret_index);
#line 176
    tmp___4 = ldv_undef_int();
    }
#line 176
    if (tmp___4 != 0) {
      {
#line 178
      __VERIFIER_assume(ldv_12_show_ret_default >= 0);
#line 183
      tmp___3 = ldv_traverse_kernel_items_scenario_next_12_7(ldv_12_ops_seq_operations->next,
                                                             ldv_12_seq_file_seq_file,
                                                             (void *)ldv_12_ret_index,
                                                             ldv_12_index_index);
#line 183
      ldv_12_ret_index = (loff_t *)tmp___3;
      }
#line 190
      goto ldv_inner_loop_12;
    } else {
      {
#line 195
      ldv_12_seq_file_seq_file->index = *ldv_12_index_index;
#line 197
      ldv_traverse_kernel_items_scenario_stop_12_5(ldv_12_ops_seq_operations->stop,
                                                   ldv_12_seq_file_seq_file, (void *)ldv_12_ret_index);
#line 199
      ldv_12_seq_file_seq_file->index = *ldv_12_index_index;
      }
#line 206
      goto ldv_outer_loop_12;
    }
  } else {
    {
#line 211
    tmp___5 = ldv_is_err_or_null((void const   *)ldv_12_ret_index);
#line 211
    __VERIFIER_assume((int )tmp___5);
#line 216
    ldv_12_seq_file_seq_file->index = *ldv_12_index_index;
#line 218
    ldv_traverse_kernel_items_scenario_stop_12_2(ldv_12_ops_seq_operations->stop,
                                                 ldv_12_seq_file_seq_file, (void *)ldv_12_ret_index);
#line 220
    ldv_12_seq_file_seq_file->index = *ldv_12_index_index;
    }
#line 227
    goto ldv_outer_loop_12;
  }
#line 230
  return;
}
}
#line 235 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
void *ldv_traverse_kernel_items_scenario_next_12_7(void *(*arg0)(struct seq_file * ,
                                                                 void * , loff_t * ) ,
                                                   struct seq_file *arg1 , void *arg2 ,
                                                   long long *arg3 ) 
{ 
  void *tmp ;

  {
  {
#line 236
  tmp = svc_pool_stats_next(arg1, arg2, arg3);
  }
#line 236
  return (tmp);
}
}
#line 240 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
int ldv_traverse_kernel_items_scenario_show_12_9(pid_t (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                 void *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 241
  tmp = svc_pool_stats_show(arg1, arg2);
  }
#line 241
  return (tmp);
}
}
#line 245 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
void *ldv_traverse_kernel_items_scenario_start_12_14(void *(*arg0)(struct seq_file * ,
                                                                   loff_t * ) , struct seq_file *arg1 ,
                                                     long long *arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 246
  tmp = svc_pool_stats_start(arg1, arg2);
  }
#line 246
  return (tmp);
}
}
#line 250 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
void ldv_traverse_kernel_items_scenario_stop_12_2(void (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                  void *arg2 ) 
{ 


  {
  {
#line 251
  svc_pool_stats_stop(arg1, arg2);
  }
#line 252
  return;
}
}
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
void ldv_traverse_kernel_items_scenario_stop_12_5(void (*arg0)(struct seq_file * ,
                                                               void * ) , struct seq_file *arg1 ,
                                                  void *arg2 ) 
{ 


  {
  {
#line 256
  svc_pool_stats_stop(arg1, arg2);
  }
#line 257
  return;
}
}
#line 325 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static void ldv_module_put_10___0(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 328
  ldv_module_put(ldv_func_arg1);
  }
#line 329
  return;
}
}
#line 332 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static bool ldv_try_module_get_11___0(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 335
  tmp = ldv_try_module_get(ldv_func_arg1);
  }
#line 335
  return (tmp != 0);
}
}
#line 339 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static void ldv_module_put_12___1(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 342
  ldv_module_put(ldv_func_arg1);
  }
#line 343
  return;
}
}
#line 346 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static int ldv_mod_timer_13(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 350
  tmp = ldv_emg_mod_timer(ldv_func_arg1, ldv_func_arg2);
  }
#line 350
  return (tmp);
}
}
#line 354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static void ldv___module_get_14(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 357
  ldv_module_get(ldv_func_arg1);
  }
#line 358
  return;
}
}
#line 361 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static void ldv_module_put_15___1(struct module *ldv_func_arg1 ) 
{ 


  {
  {
#line 364
  ldv_module_put(ldv_func_arg1);
  }
#line 365
  return;
}
}
#line 368 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static int ldv_mod_timer_16(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 372
  tmp = ldv_emg_mod_timer(ldv_func_arg1, ldv_func_arg2);
  }
#line 372
  return (tmp);
}
}
#line 376 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static int ldv_mod_timer_17(struct timer_list *ldv_func_arg1 , unsigned long ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 380
  tmp = ldv_emg_mod_timer(ldv_func_arg1, ldv_func_arg2);
  }
#line 380
  return (tmp);
}
}
#line 384 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_svc_xprt.c.aux"
static int ldv_seq_open_18(struct file *ldv_func_arg1 , struct seq_operations  const  *ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 388
  tmp = ldv_emg_seq_open(ldv_func_arg1, (struct seq_operations *)ldv_func_arg2);
  }
#line 388
  return (tmp);
}
}
#line 292 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
  {
#line 295
  tmp = list_empty(list);
  }
#line 295
  if (tmp == 0) {
    {
#line 296
    __list_splice(list, head, head->next);
    }
  } else {

  }
#line 297
  return;
}
}
#line 517 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/bc_xprt.h"
int xprt_setup_backchannel(struct rpc_xprt *xprt , unsigned int min_reqs ) ;
#line 38
void xprt_destroy_backchannel(struct rpc_xprt *xprt , unsigned int max_reqs ) ;
#line 38 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/backchannel_rqst.c"
__inline static int xprt_need_to_requeue(struct rpc_xprt *xprt ) 
{ 


  {
#line 40
  return (xprt->bc_alloc_count != 0U);
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/backchannel_rqst.c"
__inline static void xprt_inc_alloc_count(struct rpc_xprt *xprt , unsigned int n ) 
{ 


  {
#line 45
  xprt->bc_alloc_count = xprt->bc_alloc_count + n;
#line 46
  return;
}
}
#line 48 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/backchannel_rqst.c"
__inline static int xprt_dec_alloc_count(struct rpc_xprt *xprt , unsigned int n ) 
{ 
  unsigned int tmp ;

  {
#line 50
  tmp = xprt->bc_alloc_count - n;
#line 50
  xprt->bc_alloc_count = tmp;
#line 50
  return ((int )tmp);
}
}
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/backchannel_rqst.c"
static void xprt_free_allocation(struct rpc_rqst *req ) 
{ 
  struct xdr_buf *xbufp ;
  long tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
  {
#line 61
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 61
  if (tmp != 0L) {
    {
#line 61
    printk("\001dRPC:        free allocations for req= %p\n", req);
    }
  } else {

  }
  {
#line 62
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& req->rq_bc_pa_state));
#line 62
  __ret_warn_once = tmp___0 != 0;
#line 62
  tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 62
  if (tmp___3 != 0L) {
    {
#line 62
    __ret_warn_on = ! __warned;
#line 62
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 62
    if (tmp___1 != 0L) {
      {
#line 62
      warn_slowpath_null("net/sunrpc/backchannel_rqst.c", 62);
      }
    } else {

    }
    {
#line 62
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 62
    if (tmp___2 != 0L) {
#line 62
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 62
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 63
  xbufp = & req->rq_private_buf;
#line 64
  free_pages((unsigned long )xbufp->head[0].iov_base, 0U);
#line 65
  xbufp = & req->rq_snd_buf;
#line 66
  free_pages((unsigned long )xbufp->head[0].iov_base, 0U);
#line 67
  list_del(& req->rq_bc_pa_list);
#line 68
  kfree((void const   *)req);
  }
#line 69
  return;
}
}
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/backchannel_rqst.c"
int xprt_setup_backchannel(struct rpc_xprt *xprt , unsigned int min_reqs ) 
{ 
  struct page *page_rcv ;
  struct page *page_snd ;
  struct xdr_buf *xbufp ;
  struct rpc_rqst *req ;
  struct rpc_rqst *tmp ;
  struct list_head tmp_list ;
  int i ;
  long tmp___0 ;
  void *tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  long tmp___4 ;

  {
  {
#line 91
  page_rcv = (struct page *)0;
#line 91
  page_snd = (struct page *)0;
#line 92
  xbufp = (struct xdr_buf *)0;
#line 97
  tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 97
  if (tmp___0 != 0L) {
    {
#line 97
    printk("\001dRPC:       setup backchannel transport\n");
    }
  } else {

  }
  {
#line 107
  INIT_LIST_HEAD(& tmp_list);
#line 108
  i = 0;
  }
#line 108
  goto ldv_44111;
  ldv_44110: 
  {
#line 110
  tmp___1 = kzalloc(400UL, 208U);
#line 110
  req = (struct rpc_rqst *)tmp___1;
  }
#line 111
  if ((unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
    {
#line 112
    printk("\vFailed to create bc rpc_rqst\n");
    }
#line 113
    goto out_free;
  } else {

  }
  {
#line 117
  tmp___2 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 117
  if (tmp___2 != 0L) {
    {
#line 117
    printk("\001dRPC:       adding req= %p\n", req);
    }
  } else {

  }
  {
#line 118
  list_add(& req->rq_bc_pa_list, & tmp_list);
#line 120
  req->rq_xprt = xprt;
#line 121
  INIT_LIST_HEAD(& req->rq_list);
#line 122
  INIT_LIST_HEAD(& req->rq_bc_list);
#line 125
  page_rcv = alloc_pages(208U, 0U);
  }
#line 126
  if ((unsigned long )page_rcv == (unsigned long )((struct page *)0)) {
    {
#line 127
    printk("\vFailed to create bc receive xbuf\n");
    }
#line 128
    goto out_free;
  } else {

  }
  {
#line 130
  xbufp = & req->rq_rcv_buf;
#line 131
  xbufp->head[0].iov_base = lowmem_page_address((struct page  const  *)page_rcv);
#line 132
  xbufp->head[0].iov_len = 4096UL;
#line 133
  xbufp->tail[0].iov_base = (void *)0;
#line 134
  xbufp->tail[0].iov_len = 0UL;
#line 135
  xbufp->page_len = 0U;
#line 136
  xbufp->len = 4096U;
#line 137
  xbufp->buflen = 4096U;
#line 140
  page_snd = alloc_pages(208U, 0U);
  }
#line 141
  if ((unsigned long )page_snd == (unsigned long )((struct page *)0)) {
    {
#line 142
    printk("\vFailed to create bc snd xbuf\n");
    }
#line 143
    goto out_free;
  } else {

  }
  {
#line 146
  xbufp = & req->rq_snd_buf;
#line 147
  xbufp->head[0].iov_base = lowmem_page_address((struct page  const  *)page_snd);
#line 148
  xbufp->head[0].iov_len = 0UL;
#line 149
  xbufp->tail[0].iov_base = (void *)0;
#line 150
  xbufp->tail[0].iov_len = 0UL;
#line 151
  xbufp->page_len = 0U;
#line 152
  xbufp->len = 0U;
#line 153
  xbufp->buflen = 4096U;
#line 108
  i = i + 1;
  }
  ldv_44111: ;
#line 108
  if ((unsigned int )i < min_reqs) {
#line 110
    goto ldv_44110;
  } else {

  }
  {
#line 159
  spin_lock_bh(& xprt->bc_pa_lock);
#line 160
  list_splice((struct list_head  const  *)(& tmp_list), & xprt->bc_pa_list);
#line 161
  xprt_inc_alloc_count(xprt, min_reqs);
#line 162
  spin_unlock_bh(& xprt->bc_pa_lock);
#line 164
  tmp___3 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 164
  if (tmp___3 != 0L) {
    {
#line 164
    printk("\001dRPC:       setup backchannel transport done\n");
    }
  } else {

  }
#line 165
  return (0);
  out_free: 
#line 171
  __mptr = (struct list_head  const  *)tmp_list.next;
#line 171
  req = (struct rpc_rqst *)((char *)__mptr + 0xfffffffffffffe80UL);
#line 171
  __mptr___0 = (struct list_head  const  *)req->rq_bc_pa_list.next;
#line 171
  tmp = (struct rpc_rqst *)((char *)__mptr___0 + 0xfffffffffffffe80UL);
#line 171
  goto ldv_44120;
  ldv_44119: 
  {
#line 172
  xprt_free_allocation(req);
#line 171
  req = tmp;
#line 171
  __mptr___1 = (struct list_head  const  *)tmp->rq_bc_pa_list.next;
#line 171
  tmp = (struct rpc_rqst *)((char *)__mptr___1 + 0xfffffffffffffe80UL);
  }
  ldv_44120: ;
#line 171
  if ((unsigned long )(& req->rq_bc_pa_list) != (unsigned long )(& tmp_list)) {
#line 173
    goto ldv_44119;
  } else {

  }
  {
#line 174
  tmp___4 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 174
  if (tmp___4 != 0L) {
    {
#line 174
    printk("\001dRPC:       setup backchannel transport failed\n");
    }
  } else {

  }
#line 175
  return (-12);
}
}
#line 188 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/backchannel_rqst.c"
void xprt_destroy_backchannel(struct rpc_xprt *xprt , unsigned int max_reqs ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_rqst *tmp ;
  long tmp___0 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  long tmp___1 ;
  struct list_head  const  *__mptr___1 ;
  int tmp___2 ;
  long tmp___3 ;

  {
  {
#line 190
  req = (struct rpc_rqst *)0;
#line 190
  tmp = (struct rpc_rqst *)0;
#line 192
  tmp___0 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 192
  if (tmp___0 != 0L) {
    {
#line 192
    printk("\001dRPC:        destroy backchannel transport\n");
    }
  } else {

  }
#line 194
  if (max_reqs == 0U) {
#line 195
    goto out;
  } else {

  }
  {
#line 197
  spin_lock_bh(& xprt->bc_pa_lock);
#line 198
  xprt_dec_alloc_count(xprt, max_reqs);
#line 199
  __mptr = (struct list_head  const  *)xprt->bc_pa_list.next;
#line 199
  req = (struct rpc_rqst *)((char *)__mptr + 0xfffffffffffffe80UL);
#line 199
  __mptr___0 = (struct list_head  const  *)req->rq_bc_pa_list.next;
#line 199
  tmp = (struct rpc_rqst *)((char *)__mptr___0 + 0xfffffffffffffe80UL);
  }
#line 199
  goto ldv_44144;
  ldv_44143: 
  {
#line 200
  tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 200
  if (tmp___1 != 0L) {
    {
#line 200
    printk("\001dRPC:        req=%p\n", req);
    }
  } else {

  }
  {
#line 201
  xprt_free_allocation(req);
#line 202
  max_reqs = max_reqs - 1U;
  }
#line 202
  if (max_reqs == 0U) {
#line 203
    goto ldv_44142;
  } else {

  }
#line 199
  req = tmp;
#line 199
  __mptr___1 = (struct list_head  const  *)tmp->rq_bc_pa_list.next;
#line 199
  tmp = (struct rpc_rqst *)((char *)__mptr___1 + 0xfffffffffffffe80UL);
  ldv_44144: ;
#line 199
  if ((unsigned long )(& req->rq_bc_pa_list) != (unsigned long )(& xprt->bc_pa_list)) {
#line 201
    goto ldv_44143;
  } else {

  }
  ldv_44142: 
  {
#line 205
  spin_unlock_bh(& xprt->bc_pa_lock);
  }
  out: 
  {
#line 208
  tmp___3 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 208
  if (tmp___3 != 0L) {
    {
#line 208
    tmp___2 = list_empty((struct list_head  const  *)(& xprt->bc_pa_list));
#line 208
    printk("\001dRPC:        backchannel list empty= %s\n", tmp___2 != 0 ? (char *)"true" : (char *)"false");
    }
  } else {

  }
#line 209
  return;
}
}
#line 224 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/backchannel_rqst.c"
struct rpc_rqst *xprt_alloc_bc_request(struct rpc_xprt *xprt ) 
{ 
  struct rpc_rqst *req ;
  long tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 228
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 228
  if (tmp != 0L) {
    {
#line 228
    printk("\001dRPC:       allocate a backchannel request\n");
    }
  } else {

  }
  {
#line 229
  spin_lock(& xprt->bc_pa_lock);
#line 230
  tmp___0 = list_empty((struct list_head  const  *)(& xprt->bc_pa_list));
  }
#line 230
  if (tmp___0 == 0) {
    {
#line 231
    __mptr = (struct list_head  const  *)xprt->bc_pa_list.next;
#line 231
    req = (struct rpc_rqst *)((char *)__mptr + 0xfffffffffffffe80UL);
#line 233
    list_del(& req->rq_bc_pa_list);
    }
  } else {
#line 235
    req = (struct rpc_rqst *)0;
  }
  {
#line 237
  spin_unlock(& xprt->bc_pa_lock);
  }
#line 239
  if ((unsigned long )req != (unsigned long )((struct rpc_rqst *)0)) {
    {
#line 240
    set_bit(1U, (unsigned long volatile   *)(& req->rq_bc_pa_state));
#line 241
    req->rq_reply_bytes_recvd = 0UL;
#line 242
    req->rq_bytes_sent = 0U;
#line 243
    memcpy((void *)(& req->rq_private_buf), (void const   *)(& req->rq_rcv_buf), 64UL);
    }
  } else {

  }
  {
#line 246
  tmp___1 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 246
  if (tmp___1 != 0L) {
    {
#line 246
    printk("\001dRPC:       backchannel req=%p\n", req);
    }
  } else {

  }
#line 247
  return (req);
}
}
#line 254 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/backchannel_rqst.c"
void xprt_free_bc_request(struct rpc_rqst *req ) 
{ 
  struct rpc_xprt *xprt ;
  long tmp ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;

  {
  {
#line 256
  xprt = req->rq_xprt;
#line 258
  tmp = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
  }
#line 258
  if (tmp != 0L) {
    {
#line 258
    printk("\001dRPC:       free backchannel req=%p\n", req);
    }
  } else {

  }
  {
#line 260
  __asm__  volatile   ("": : : "memory");
#line 261
  tmp___0 = constant_test_bit(1U, (unsigned long const volatile   *)(& req->rq_bc_pa_state));
#line 261
  __ret_warn_once = tmp___0 == 0;
#line 261
  tmp___3 = __builtin_expect(__ret_warn_once != 0, 0L);
  }
#line 261
  if (tmp___3 != 0L) {
    {
#line 261
    __ret_warn_on = ! __warned;
#line 261
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 261
    if (tmp___1 != 0L) {
      {
#line 261
      warn_slowpath_null("net/sunrpc/backchannel_rqst.c", 261);
      }
    } else {

    }
    {
#line 261
    tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
    }
#line 261
    if (tmp___2 != 0L) {
#line 261
      __warned = 1;
    } else {

    }
  } else {

  }
  {
#line 261
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 262
  clear_bit(1, (unsigned long volatile   *)(& req->rq_bc_pa_state));
#line 263
  __asm__  volatile   ("": : : "memory");
#line 265
  tmp___5 = xprt_need_to_requeue(xprt);
  }
#line 265
  if (tmp___5 == 0) {
    {
#line 272
    tmp___4 = __builtin_expect((rpc_debug & 128U) != 0U, 0L);
    }
#line 272
    if (tmp___4 != 0L) {
      {
#line 272
      printk("\001dRPC:       Last session removed req=%p\n", req);
      }
    } else {

    }
    {
#line 273
    xprt_free_allocation(req);
    }
#line 274
    return;
  } else {

  }
  {
#line 281
  spin_lock_bh(& xprt->bc_pa_lock);
#line 282
  list_add(& req->rq_bc_pa_list, & xprt->bc_pa_list);
#line 283
  spin_unlock_bh(& xprt->bc_pa_lock);
  }
#line 284
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) ;
#line 40
__inline static long IS_ERR(void const   *ptr ) ;
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/bc_svc.c"
static struct rpc_call_ops  const  nfs41_callback_ops  =    {0, 0, 0, 0};
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/bc_svc.c"
int bc_send(struct rpc_rqst *req ) 
{ 
  struct rpc_task *task ;
  int ret ;
  long tmp ;
  long tmp___0 ;
  bool __warned ;
  int __ret_warn_once ;
  int tmp___1 ;
  int __ret_warn_on ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
  {
#line 51
  tmp = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 51
  if (tmp != 0L) {
    {
#line 51
    printk("\001dRPC:       bc_send req= %p\n", req);
    }
  } else {

  }
  {
#line 52
  task = rpc_run_bc_task(req, & nfs41_callback_ops);
#line 53
  tmp___5 = IS_ERR((void const   *)task);
  }
#line 53
  if (tmp___5 != 0L) {
    {
#line 54
    tmp___0 = PTR_ERR((void const   *)task);
#line 54
    ret = (int )tmp___0;
    }
  } else {
    {
#line 56
    tmp___1 = atomic_read((atomic_t const   *)(& task->tk_count));
#line 56
    __ret_warn_once = tmp___1 != 1;
#line 56
    tmp___4 = __builtin_expect(__ret_warn_once != 0, 0L);
    }
#line 56
    if (tmp___4 != 0L) {
      {
#line 56
      __ret_warn_on = ! __warned;
#line 56
      tmp___2 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 56
      if (tmp___2 != 0L) {
        {
#line 56
        warn_slowpath_null("net/sunrpc/bc_svc.c", 56);
        }
      } else {

      }
      {
#line 56
      tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
      }
#line 56
      if (tmp___3 != 0L) {
#line 56
        __warned = 1;
      } else {

      }
    } else {

    }
    {
#line 56
    __builtin_expect(__ret_warn_once != 0, 0L);
#line 57
    ret = task->tk_status;
#line 58
    rpc_put_task(task);
    }
  }
  {
#line 60
  tmp___6 = __builtin_expect((rpc_debug & 512U) != 0U, 0L);
  }
#line 60
  if (tmp___6 != 0L) {
    {
#line 60
    printk("\001dRPC:       bc_send ret= %d\n", ret);
    }
  } else {

  }
#line 61
  return (ret);
}
}
#line 310 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ktime.h"
__inline static s64 ktime_to_ms(ktime_t const   kt ) 
{ 
  struct timeval tv ;
  struct timeval tmp ;

  {
  {
#line 312
  tmp = ns_to_timeval(kt.tv64);
#line 312
  tv = tmp;
  }
#line 313
  return ((long long )tv.tv_sec * 1000LL + (long long )(tv.tv_usec / 1000L));
}
}
#line 426 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) ;
#line 88 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/seq_file.h"
extern int seq_putc(struct seq_file * , char  ) ;
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/stats.h"
struct proc_dir_entry *rpc_proc_register(struct net *net , struct rpc_stat *statp ) ;
#line 62
void rpc_proc_unregister(struct net *net , char const   *name ) ;
#line 64
struct proc_dir_entry *svc_proc_register(struct net *net , struct svc_stat *statp ,
                                         struct file_operations  const  *fops ) ;
#line 66
void svc_proc_unregister(struct net *net , char const   *name ) ;
#line 68
void svc_seq_show(struct seq_file *seq , struct svc_stat  const  *statp ) ;
#line 79 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/metrics.h"
void rpc_print_iostats(struct seq_file *seq , struct rpc_clnt *clnt ) ;
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
static int rpc_proc_show(struct seq_file *seq , void *v ) 
{ 
  struct rpc_stat  const  *statp ;
  struct rpc_program  const  *prog ;
  unsigned int i ;
  unsigned int j ;
  struct rpc_version  const  *vers ;

  {
  {
#line 35
  statp = (struct rpc_stat  const  *)seq->private;
#line 36
  prog = statp->program;
#line 39
  seq_printf(seq, "net %u %u %u %u\n", statp->netcnt, statp->netudpcnt, statp->nettcpcnt,
             statp->nettcpconn);
#line 45
  seq_printf(seq, "rpc %u %u %u\n", statp->rpccnt, statp->rpcretrans, statp->rpcauthrefresh);
#line 51
  i = 0U;
  }
#line 51
  goto ldv_46292;
  ldv_46291: 
#line 52
  vers = *(prog->version + (unsigned long )i);
#line 53
  if ((unsigned long )vers == (unsigned long )((struct rpc_version  const  *)0)) {
#line 54
    goto ldv_46287;
  } else {

  }
  {
#line 55
  seq_printf(seq, "proc%u %u", vers->number, vers->nrprocs);
#line 57
  j = 0U;
  }
#line 57
  goto ldv_46289;
  ldv_46288: 
  {
#line 58
  seq_printf(seq, " %u", (vers->procs + (unsigned long )j)->p_count);
#line 57
  j = j + 1U;
  }
  ldv_46289: ;
#line 57
  if (j < (unsigned int )vers->nrprocs) {
#line 59
    goto ldv_46288;
  } else {

  }
  {
#line 60
  seq_putc(seq, 10);
  }
  ldv_46287: 
#line 51
  i = i + 1U;
  ldv_46292: ;
#line 51
  if (i < (unsigned int )prog->nrvers) {
#line 53
    goto ldv_46291;
  } else {

  }

#line 62
  return (0);
}
}
#line 65 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
static int rpc_proc_open(struct inode *inode , struct file *file ) 
{ 
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 67
  tmp = PDE_DATA((struct inode  const  *)inode);
#line 67
  tmp___0 = single_open(file, & rpc_proc_show, tmp);
  }
#line 67
  return (tmp___0);
}
}
#line 70 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
static struct file_operations  const  rpc_proc_fops  = 
#line 70
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & rpc_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 81 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
void svc_seq_show(struct seq_file *seq , struct svc_stat  const  *statp ) 
{ 
  struct svc_program  const  *prog ;
  struct svc_procedure  const  *proc ;
  struct svc_version  const  *vers ;
  unsigned int i ;
  unsigned int j ;

  {
  {
#line 82
  prog = (struct svc_program  const  *)statp->program;
#line 87
  seq_printf(seq, "net %u %u %u %u\n", statp->netcnt, statp->netudpcnt, statp->nettcpcnt,
             statp->nettcpconn);
#line 93
  seq_printf(seq, "rpc %u %u %u %u %u\n", statp->rpccnt, ((unsigned int )statp->rpcbadfmt + (unsigned int )statp->rpcbadauth) + (unsigned int )statp->rpcbadclnt,
             statp->rpcbadfmt, statp->rpcbadauth, statp->rpcbadclnt);
#line 101
  i = 0U;
  }
#line 101
  goto ldv_46313;
  ldv_46312: 
#line 102
  vers = (struct svc_version  const  *)*(prog->pg_vers + (unsigned long )i);
#line 102
  if ((unsigned long )vers == (unsigned long )((struct svc_version  const  *)0)) {
#line 103
    goto ldv_46308;
  } else {
#line 102
    proc = (struct svc_procedure  const  *)vers->vs_proc;
#line 102
    if ((unsigned long )proc == (unsigned long )((struct svc_procedure  const  *)0)) {
#line 103
      goto ldv_46308;
    } else {

    }
  }
  {
#line 104
  seq_printf(seq, "proc%d %u", i, vers->vs_nproc);
#line 105
  j = 0U;
  }
#line 105
  goto ldv_46310;
  ldv_46309: 
  {
#line 106
  seq_printf(seq, " %u", proc->pc_count);
#line 105
  j = j + 1U;
#line 105
  proc = proc + 1;
  }
  ldv_46310: ;
#line 105
  if (j < (unsigned int )vers->vs_nproc) {
#line 107
    goto ldv_46309;
  } else {

  }
  {
#line 107
  seq_putc(seq, 10);
  }
  ldv_46308: 
#line 101
  i = i + 1U;
  ldv_46313: ;
#line 101
  if (i < (unsigned int )prog->pg_nvers) {
#line 103
    goto ldv_46312;
  } else {

  }

#line 108
  return;
}
}
#line 117 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
struct rpc_iostats *rpc_alloc_iostats(struct rpc_clnt *clnt ) 
{ 
  void *tmp ;

  {
  {
#line 119
  tmp = kcalloc((size_t )clnt->cl_maxproc, 64UL, 208U);
  }
#line 119
  return ((struct rpc_iostats *)tmp);
}
}
#line 128 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
void rpc_free_iostats(struct rpc_iostats *stats ) 
{ 


  {
  {
#line 130
  kfree((void const   *)stats);
  }
#line 131
  return;
}
}
#line 141 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
void rpc_count_iostats(struct rpc_task  const  *task , struct rpc_iostats *stats ) 
{ 
  struct rpc_rqst *req ;
  struct rpc_iostats *op_metrics ;
  ktime_t delta ;
  ktime_t __constr_expr_0 ;
  ktime_t __constr_expr_1 ;
  ktime_t __constr_expr_2 ;
  ktime_t __constr_expr_3 ;
  ktime_t tmp ;
  ktime_t __constr_expr_4 ;

  {
#line 143
  req = task->tk_rqstp;
#line 147
  if ((unsigned long )stats == (unsigned long )((struct rpc_iostats *)0) || (unsigned long )req == (unsigned long )((struct rpc_rqst *)0)) {
#line 148
    return;
  } else {

  }
  {
#line 150
  op_metrics = stats + (unsigned long )(task->tk_msg.rpc_proc)->p_statidx;
#line 152
  op_metrics->om_ops = op_metrics->om_ops + 1UL;
#line 153
  op_metrics->om_ntrans = op_metrics->om_ntrans + (unsigned long )req->rq_ntrans;
#line 154
  op_metrics->om_timeouts = op_metrics->om_timeouts + (unsigned long )task->tk_timeouts;
#line 156
  op_metrics->om_bytes_sent = op_metrics->om_bytes_sent + (unsigned long long )req->rq_xmit_bytes_sent;
#line 157
  op_metrics->om_bytes_recv = op_metrics->om_bytes_recv + (unsigned long long )req->rq_reply_bytes_recvd;
#line 159
  __constr_expr_0.tv64 = req->rq_xtime.tv64 - (long long )task->tk_start.tv64;
#line 159
  delta = __constr_expr_0;
#line 160
  __constr_expr_1.tv64 = op_metrics->om_queue.tv64 + delta.tv64;
#line 160
  op_metrics->om_queue = __constr_expr_1;
#line 162
  __constr_expr_2.tv64 = op_metrics->om_rtt.tv64 + req->rq_rtt.tv64;
#line 162
  op_metrics->om_rtt = __constr_expr_2;
#line 164
  tmp = ktime_get();
#line 164
  __constr_expr_3.tv64 = tmp.tv64 - (long long )task->tk_start.tv64;
#line 164
  delta = __constr_expr_3;
#line 165
  __constr_expr_4.tv64 = op_metrics->om_execute.tv64 + delta.tv64;
#line 165
  op_metrics->om_execute = __constr_expr_4;
  }
#line 166
  return;
}
}
#line 169 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
static void _print_name(struct seq_file *seq , unsigned int op , struct rpc_procinfo *procs ) 
{ 


  {
#line 172
  if ((unsigned long )(procs + (unsigned long )op)->p_name != (unsigned long )((char const   *)0)) {
    {
#line 173
    seq_printf(seq, "\t%12s: ", (procs + (unsigned long )op)->p_name);
    }
  } else
#line 174
  if (op == 0U) {
    {
#line 175
    seq_printf(seq, "\t        NULL: ");
    }
  } else {
    {
#line 177
    seq_printf(seq, "\t%12u: ", op);
    }
  }
#line 178
  return;
}
}
#line 180 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
void rpc_print_iostats(struct seq_file *seq , struct rpc_clnt *clnt ) 
{ 
  struct rpc_iostats *stats ;
  struct rpc_xprt *xprt ;
  unsigned int op ;
  unsigned int maxproc ;
  struct rpc_xprt *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct rpc_iostats *metrics ;
  s64 tmp___1 ;
  s64 tmp___2 ;
  s64 tmp___3 ;

  {
#line 182
  stats = clnt->cl_metrics;
#line 184
  maxproc = clnt->cl_maxproc;
#line 186
  if ((unsigned long )stats == (unsigned long )((struct rpc_iostats *)0)) {
#line 187
    return;
  } else {

  }
  {
#line 189
  seq_printf(seq, "\tRPC iostats version: %s  ", (char *)"1.0");
#line 190
  seq_printf(seq, "p/v: %u/%u (%s)\n", clnt->cl_prog, clnt->cl_vers, clnt->cl_protname);
#line 193
  rcu_read_lock();
#line 194
  _________p1 = *((struct rpc_xprt * volatile  *)(& clnt->cl_xprt));
#line 194
  tmp = debug_lockdep_rcu_enabled();
  }
#line 194
  if (tmp != 0 && ! __warned) {
    {
#line 194
    tmp___0 = rcu_read_lock_held();
    }
#line 194
    if (tmp___0 == 0) {
      {
#line 194
      __warned = 1;
#line 194
      lockdep_rcu_suspicious("net/sunrpc/stats.c", 194, "suspicious rcu_dereference_check() usage");
      }
    } else {

    }
  } else {

  }
#line 194
  xprt = _________p1;
#line 195
  if ((unsigned long )xprt != (unsigned long )((struct rpc_xprt *)0)) {
    {
#line 196
    (*((xprt->ops)->print_stats))(xprt, seq);
    }
  } else {

  }
  {
#line 197
  rcu_read_unlock();
#line 199
  seq_printf(seq, "\tper-op statistics\n");
#line 200
  op = 0U;
  }
#line 200
  goto ldv_46377;
  ldv_46376: 
  {
#line 201
  metrics = stats + (unsigned long )op;
#line 202
  _print_name(seq, op, clnt->cl_procinfo);
#line 203
  tmp___1 = ktime_to_ms(metrics->om_execute);
#line 203
  tmp___2 = ktime_to_ms(metrics->om_rtt);
#line 203
  tmp___3 = ktime_to_ms(metrics->om_queue);
#line 203
  seq_printf(seq, "%lu %lu %lu %Lu %Lu %Lu %Lu %Lu\n", metrics->om_ops, metrics->om_ntrans,
             metrics->om_timeouts, metrics->om_bytes_sent, metrics->om_bytes_recv,
             tmp___3, tmp___2, tmp___1);
#line 200
  op = op + 1U;
  }
  ldv_46377: ;
#line 200
  if (op < maxproc) {
#line 202
    goto ldv_46376;
  } else {

  }

#line 207
  return;
}
}
#line 220 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
__inline static struct proc_dir_entry *do_register(struct net *net , char const   *name ,
                                                   void *data , struct file_operations  const  *fops ) 
{ 
  struct sunrpc_net *sn ;
  long tmp ;
  void *tmp___0 ;
  struct proc_dir_entry *tmp___1 ;

  {
  {
#line 225
  tmp = __builtin_expect((rpc_debug & 1024U) != 0U, 0L);
  }
#line 225
  if (tmp != 0L) {
    {
#line 225
    printk("\001dRPC:       registering /proc/net/rpc/%s\n", name);
    }
  } else {

  }
  {
#line 226
  tmp___0 = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 226
  sn = (struct sunrpc_net *)tmp___0;
#line 227
  tmp___1 = proc_create_data(name, 0, sn->proc_net_rpc, fops, data);
  }
#line 227
  return (tmp___1);
}
}
#line 231 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
struct proc_dir_entry *rpc_proc_register(struct net *net , struct rpc_stat *statp ) 
{ 
  struct proc_dir_entry *tmp ;

  {
  {
#line 233
  tmp = do_register(net, (statp->program)->name, (void *)statp, & rpc_proc_fops);
  }
#line 233
  return (tmp);
}
}
#line 238 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
void rpc_proc_unregister(struct net *net , char const   *name ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;

  {
  {
#line 242
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 242
  sn = (struct sunrpc_net *)tmp;
#line 243
  remove_proc_entry(name, sn->proc_net_rpc);
  }
#line 244
  return;
}
}
#line 248 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
struct proc_dir_entry *svc_proc_register(struct net *net , struct svc_stat *statp ,
                                         struct file_operations  const  *fops ) 
{ 
  struct proc_dir_entry *tmp ;

  {
  {
#line 250
  tmp = do_register(net, (char const   *)(statp->program)->pg_name, (void *)statp,
                    fops);
  }
#line 250
  return (tmp);
}
}
#line 255 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
void svc_proc_unregister(struct net *net , char const   *name ) 
{ 
  struct sunrpc_net *sn ;
  void *tmp ;

  {
  {
#line 259
  tmp = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 259
  sn = (struct sunrpc_net *)tmp;
#line 260
  remove_proc_entry(name, sn->proc_net_rpc);
  }
#line 261
  return;
}
}
#line 264 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
int rpc_proc_init(struct net *net ) 
{ 
  struct sunrpc_net *sn ;
  long tmp ;
  void *tmp___0 ;

  {
  {
#line 268
  tmp = __builtin_expect((rpc_debug & 1024U) != 0U, 0L);
  }
#line 268
  if (tmp != 0L) {
    {
#line 268
    printk("\001dRPC:       registering /proc/net/rpc\n");
    }
  } else {

  }
  {
#line 269
  tmp___0 = net_generic((struct net  const  *)net, sunrpc_net_id);
#line 269
  sn = (struct sunrpc_net *)tmp___0;
#line 270
  sn->proc_net_rpc = proc_mkdir("rpc", net->proc_net);
  }
#line 271
  if ((unsigned long )sn->proc_net_rpc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 272
    return (-12);
  } else {

  }
#line 274
  return (0);
}
}
#line 277 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/stats.c"
void rpc_proc_exit(struct net *net ) 
{ 
  long tmp ;

  {
  {
#line 279
  tmp = __builtin_expect((rpc_debug & 1024U) != 0U, 0L);
  }
#line 279
  if (tmp != 0L) {
    {
#line 279
    printk("\001dRPC:       unregistering /proc/net/rpc\n");
    }
  } else {

  }
  {
#line 280
  remove_proc_entry("rpc", net->proc_net);
  }
#line 281
  return;
}
}
#line 74 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_10_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                  struct file *arg1 , struct poll_table_struct *arg2 ) ;
#line 75
void ldv_character_driver_scenario_callback_10_25(ssize_t (*arg0)(struct file * ,
                                                                  char * , size_t  ,
                                                                  loff_t * ) , struct file *arg1 ,
                                                  char *arg2 , unsigned long arg3 ,
                                                  long long *arg4 ) ;
#line 76
void ldv_character_driver_scenario_callback_10_28(ssize_t (*arg0)(struct file * ,
                                                                  u32  , size_t  ) ,
                                                  struct file *arg1 , unsigned int arg2 ,
                                                  unsigned long arg3 ) ;
#line 77
void ldv_character_driver_scenario_callback_10_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                                pid_t  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) ;
#line 84
int ldv_character_driver_scenario_probe_10_13(int (*arg0)(struct inode * , struct file * ) ,
                                              struct inode *arg1 , struct file *arg2 ) ;
#line 85
void ldv_character_driver_scenario_release_10_2(int (*arg0)(struct inode * , struct file * ) ,
                                                struct inode *arg1 , struct file *arg2 ) ;
#line 86
void ldv_character_driver_scenario_write_10_4(ssize_t (*arg0)(struct file * , char * ,
                                                              size_t  , loff_t * ) ,
                                              struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                              long long *arg4 ) ;
#line 100 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_10(void *arg0 ) 
{ 
  loff_t (*ldv_10_callback_llseek)(struct file * , loff_t  , pid_t  ) ;
  unsigned int (*ldv_10_callback_poll)(struct file * , struct poll_table_struct * ) ;
  ssize_t (*ldv_10_callback_read)(struct file * , char * , size_t  , loff_t * ) ;
  long (*ldv_10_callback_unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
  struct file_operations *ldv_10_container_file_operations ;
  struct poll_table_struct *ldv_10_ldv_param_22_1_default ;
  char *ldv_10_ldv_param_25_1_default ;
  long long *ldv_10_ldv_param_25_3_default ;
  unsigned int ldv_10_ldv_param_28_1_default ;
  char *ldv_10_ldv_param_4_1_default ;
  long long *ldv_10_ldv_param_4_3_default ;
  long long ldv_10_ldv_param_5_1_default ;
  int ldv_10_ldv_param_5_2_default ;
  struct file *ldv_10_resource_file ;
  struct inode *ldv_10_resource_inode ;
  int ldv_10_ret_default ;
  size_t ldv_10_size_cnt_write_size ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
  {
#line 122
  ldv_10_ret_default = ldv_undef_int();
#line 124
  ldv_free(arg0);
#line 128
  tmp = ldv_xmalloc_unknown_size(0UL);
#line 128
  ldv_10_container_file_operations = (struct file_operations *)tmp;
#line 132
  tmp___0 = ldv_xmalloc(360UL);
#line 132
  ldv_10_resource_file = (struct file *)tmp___0;
#line 133
  tmp___1 = ldv_xmalloc(1032UL);
#line 133
  ldv_10_resource_inode = (struct inode *)tmp___1;
#line 134
  tmp___2 = ldv_undef_int();
#line 134
  ldv_10_size_cnt_write_size = (size_t )tmp___2;
  }
#line 141
  goto ldv_main_10;
#line 143
  return;
  ldv_main_10: 
  {
#line 149
  tmp___4 = ldv_undef_int();
  }
#line 149
  if (tmp___4 != 0) {
    {
#line 152
    ldv_10_ret_default = ldv_character_driver_scenario_probe_10_13(ldv_10_container_file_operations->open,
                                                                   ldv_10_resource_inode,
                                                                   ldv_10_resource_file);
#line 154
    ldv_10_ret_default = ldv_filter_err_code(ldv_10_ret_default);
#line 157
    tmp___3 = ldv_undef_int();
    }
#line 157
    if (tmp___3 != 0) {
      {
#line 159
      __VERIFIER_assume(ldv_10_ret_default == 0);
      }
#line 166
      goto ldv_call_10;
    } else {
      {
#line 170
      __VERIFIER_assume(ldv_10_ret_default != 0);
      }
#line 177
      goto ldv_main_10;
    }
  } else {
    {
#line 182
    ldv_free((void *)ldv_10_resource_file);
#line 183
    ldv_free((void *)ldv_10_resource_inode);
#line 187
    ldv_free((void *)ldv_10_container_file_operations);
    }
#line 195
    return;
  }
#line 198
  return;
  ldv_call_10: 
  {
#line 204
  tmp___5 = ldv_undef_int();
  }
  {
#line 205
  if (tmp___5 == 1) {
#line 205
    goto case_1;
  } else {

  }
#line 236
  if (tmp___5 == 2) {
#line 236
    goto case_2;
  } else {

  }
#line 249
  if (tmp___5 == 3) {
#line 249
    goto case_3;
  } else {

  }
#line 318
  goto switch_default___0;
  case_1: /* CIL Label */ 
  {
#line 207
  tmp___6 = ldv_xmalloc_unknown_size(0UL);
#line 207
  ldv_10_ldv_param_4_1_default = (char *)tmp___6;
#line 208
  tmp___7 = ldv_xmalloc_unknown_size(0UL);
#line 208
  ldv_10_ldv_param_4_3_default = (long long *)tmp___7;
#line 217
  __VERIFIER_assume(ldv_10_size_cnt_write_size <= 2147479552UL);
  }
#line 218
  if ((unsigned long )ldv_10_container_file_operations->write != (unsigned long )((ssize_t (*)(struct file * ,
                                                                                               char const   * ,
                                                                                               size_t  ,
                                                                                               loff_t * ))0)) {
    {
#line 220
    ldv_character_driver_scenario_write_10_4((ssize_t (*)(struct file * , char * ,
                                                          size_t  , loff_t * ))ldv_10_container_file_operations->write,
                                             ldv_10_resource_file, ldv_10_ldv_param_4_1_default,
                                             ldv_10_size_cnt_write_size, ldv_10_ldv_param_4_3_default);
    }
  } else {

  }
  {
#line 225
  ldv_free((void *)ldv_10_ldv_param_4_1_default);
#line 226
  ldv_free((void *)ldv_10_ldv_param_4_3_default);
  }
#line 233
  goto ldv_call_10;
  case_2: /* CIL Label */ 
  {
#line 239
  ldv_character_driver_scenario_release_10_2(ldv_10_container_file_operations->release,
                                             ldv_10_resource_inode, ldv_10_resource_file);
  }
#line 246
  goto ldv_main_10;
  case_3: /* CIL Label */ 
  {
#line 253
  tmp___8 = ldv_undef_int();
  }
  {
#line 254
  if (tmp___8 == 1) {
#line 254
    goto case_1___0;
  } else {

  }
#line 270
  if (tmp___8 == 2) {
#line 270
    goto case_2___0;
  } else {

  }
#line 288
  if (tmp___8 == 3) {
#line 288
    goto case_3___0;
  } else {

  }
#line 306
  if (tmp___8 == 4) {
#line 306
    goto case_4;
  } else {

  }
#line 314
  goto switch_default;
  case_1___0: /* CIL Label */ ;
#line 259
  if ((unsigned long )ldv_10_callback_unlocked_ioctl != (unsigned long )((long (*)(struct file * ,
                                                                                   unsigned int  ,
                                                                                   unsigned long  ))0)) {
    {
#line 261
    ldv_character_driver_scenario_callback_10_28(ldv_10_callback_unlocked_ioctl, ldv_10_resource_file,
                                                 ldv_10_ldv_param_28_1_default, ldv_10_size_cnt_write_size);
    }
  } else {

  }
#line 268
  goto ldv_46623;
  case_2___0: /* CIL Label */ 
  {
#line 272
  tmp___9 = ldv_xmalloc_unknown_size(0UL);
#line 272
  ldv_10_ldv_param_25_1_default = (char *)tmp___9;
#line 273
  tmp___10 = ldv_xmalloc_unknown_size(0UL);
#line 273
  ldv_10_ldv_param_25_3_default = (long long *)tmp___10;
#line 278
  ldv_character_driver_scenario_callback_10_25(ldv_10_callback_read, ldv_10_resource_file,
                                               ldv_10_ldv_param_25_1_default, ldv_10_size_cnt_write_size,
                                               ldv_10_ldv_param_25_3_default);
#line 282
  ldv_free((void *)ldv_10_ldv_param_25_1_default);
#line 283
  ldv_free((void *)ldv_10_ldv_param_25_3_default);
  }
#line 286
  goto ldv_46623;
  case_3___0: /* CIL Label */ 
  {
#line 290
  tmp___11 = ldv_xmalloc_unknown_size(0UL);
#line 290
  ldv_10_ldv_param_22_1_default = (struct poll_table_struct *)tmp___11;
  }
#line 294
  if ((unsigned long )ldv_10_callback_poll != (unsigned long )((unsigned int (*)(struct file * ,
                                                                                 struct poll_table_struct * ))0)) {
    {
#line 296
    ldv_character_driver_scenario_callback_10_22(ldv_10_callback_poll, ldv_10_resource_file,
                                                 ldv_10_ldv_param_22_1_default);
    }
  } else {

  }
  {
#line 301
  ldv_free((void *)ldv_10_ldv_param_22_1_default);
  }
#line 304
  goto ldv_46623;
  case_4: /* CIL Label */ 
  {
#line 309
  ldv_character_driver_scenario_callback_10_5(ldv_10_callback_llseek, ldv_10_resource_file,
                                              ldv_10_ldv_param_5_1_default, ldv_10_ldv_param_5_2_default);
  }
#line 312
  goto ldv_46623;
  switch_default: /* CIL Label */ 
  {
#line 314
  __VERIFIER_assume(0);
  }
  switch_break___0: /* CIL Label */ ;
  }
  ldv_46623: ;
#line 316
  goto ldv_46628;
  switch_default___0: /* CIL Label */ 
  {
#line 318
  __VERIFIER_assume(0);
  }
  switch_break: /* CIL Label */ ;
  }
  ldv_46628: ;
#line 327
  goto ldv_call_10;
#line 329
  return;
}
}
#line 334 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_10_22(u32 (*arg0)(struct file * , poll_table * ) ,
                                                  struct file *arg1 , struct poll_table_struct *arg2 ) 
{ 


  {
  {
#line 335
  (*arg0)(arg1, arg2);
  }
#line 336
  return;
}
}
#line 339 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_10_25(ssize_t (*arg0)(struct file * ,
                                                                  char * , size_t  ,
                                                                  loff_t * ) , struct file *arg1 ,
                                                  char *arg2 , unsigned long arg3 ,
                                                  long long *arg4 ) 
{ 


  {
  {
#line 340
  seq_read(arg1, arg2, arg3, arg4);
  }
#line 341
  return;
}
}
#line 344 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_10_28(ssize_t (*arg0)(struct file * ,
                                                                  u32  , size_t  ) ,
                                                  struct file *arg1 , unsigned int arg2 ,
                                                  unsigned long arg3 ) 
{ 


  {
  {
#line 345
  (*arg0)(arg1, arg2, arg3);
  }
#line 346
  return;
}
}
#line 349 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_10_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                                pid_t  ) , struct file *arg1 ,
                                                 long long arg2 , int arg3 ) 
{ 


  {
  {
#line 350
  seq_lseek(arg1, arg2, arg3);
  }
#line 351
  return;
}
}
#line 354 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_6_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 355
  seq_read(arg1, arg2, arg3, arg4);
  }
#line 356
  return;
}
}
#line 359 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_6_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) 
{ 


  {
  {
#line 360
  seq_lseek(arg1, arg2, arg3);
  }
#line 361
  return;
}
}
#line 364 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_7_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 365
  seq_read(arg1, arg2, arg3, arg4);
  }
#line 366
  return;
}
}
#line 369 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_7_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) 
{ 


  {
  {
#line 370
  seq_lseek(arg1, arg2, arg3);
  }
#line 371
  return;
}
}
#line 374 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_8_25(ssize_t (*arg0)(struct file * , char * ,
                                                                 size_t  , loff_t * ) ,
                                                 struct file *arg1 , char *arg2 ,
                                                 unsigned long arg3 , long long *arg4 ) 
{ 


  {
  {
#line 375
  seq_read(arg1, arg2, arg3, arg4);
  }
#line 376
  return;
}
}
#line 379 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_callback_8_5(loff_t (*arg0)(struct file * , loff_t  ,
                                                               pid_t  ) , struct file *arg1 ,
                                                long long arg2 , int arg3 ) 
{ 


  {
  {
#line 380
  seq_lseek(arg1, arg2, arg3);
  }
#line 381
  return;
}
}
#line 384 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
int ldv_character_driver_scenario_probe_10_13(int (*arg0)(struct inode * , struct file * ) ,
                                              struct inode *arg1 , struct file *arg2 ) 
{ 
  int tmp ;

  {
  {
#line 385
  tmp = rpc_proc_open(arg1, arg2);
  }
#line 385
  return (tmp);
}
}
#line 389 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_release_10_2(int (*arg0)(struct inode * , struct file * ) ,
                                                struct inode *arg1 , struct file *arg2 ) 
{ 


  {
  {
#line 390
  single_release(arg1, arg2);
  }
#line 391
  return;
}
}
#line 394 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/weaver/.tmp_stats.c.aux"
void ldv_character_driver_scenario_write_10_4(ssize_t (*arg0)(struct file * , char * ,
                                                              size_t  , loff_t * ) ,
                                              struct file *arg1 , char *arg2 , unsigned long arg3 ,
                                              long long *arg4 ) 
{ 


  {
  {
#line 395
  (*arg0)(arg1, arg2, arg3, arg4);
  }
#line 396
  return;
}
}
#line 2556 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/fs.h"
extern ssize_t simple_read_from_buffer(void * , size_t  , loff_t * , void const   * ,
                                       size_t  ) ;
#line 126 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess.h"
extern int __get_user_bad(void) ;
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess_64.h"
extern unsigned long copy_user_enhanced_fast_string(void * , void const   * , unsigned int  ) ;
#line 22
extern unsigned long copy_user_generic_string(void * , void const   * , unsigned int  ) ;
#line 24
extern unsigned long copy_user_generic_unrolled(void * , void const   * , unsigned int  ) ;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess_64.h"
__inline static unsigned long copy_user_generic(void *to , void const   *from , unsigned int len ) 
{ 
  unsigned int ret ;

  {
#line 36
  __asm__  volatile   ("661:\n\tcall %P4\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (3*32+16)\n .byte 662b-661b\n .byte 6641f-6631f\n .long 661b - .\n .long 6632f - .\n .word (9*32+ 9)\n .byte 662b-661b\n .byte 6642f-6632f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n .byte 0xff + (6642f-6632f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\tcall %P5\n6641:\n\t6632:\n\tcall %P6\n6642:\n\t.popsection": "=a" (ret),
                       "=D" (to), "=S" (from), "=d" (len): [old] "i" (& copy_user_generic_unrolled),
                       [new1] "i" (& copy_user_generic_string), [new2] "i" (& copy_user_enhanced_fast_string),
                       "1" (to), "2" (from), "3" (len): "memory", "rcx", "r8", "r9",
                       "r10", "r11");
#line 45
  return ((unsigned long )ret);
}
}
#line 124 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/arch/x86/include/asm/uaccess_64.h"
__inline static int __copy_to_user(void *dst , void const   *src , unsigned int size ) 
{ 
  int ret ;
  unsigned long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  unsigned long tmp___2 ;

  {
  {
#line 126
  ret = 0;
#line 128
  might_fault();
#line 130
  tmp = copy_user_generic(dst, src, size);
  }
#line 130
  return ((int )tmp);
  {
#line 132
  if (size == 1U) {
#line 132
    goto case_1;
  } else {

  }
#line 135
  if (size == 2U) {
#line 135
    goto case_2;
  } else {

  }
#line 138
  if (size == 4U) {
#line 138
    goto case_4;
  } else {

  }
#line 141
  if (size == 8U) {
#line 141
    goto case_8;
  } else {

  }
#line 144
  if (size == 10U) {
#line 144
    goto case_10;
  } else {

  }
#line 153
  if (size == 16U) {
#line 153
    goto case_16;
  } else {

  }
#line 162
  goto switch_default;
  case_1: /* CIL Label */ 
#line 132
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %b1,%2\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (ret): "iq" (*((u8 *)src)),
                       "m" (*((struct __large_struct *)dst)), "i" (1), "0" (ret));
#line 134
  return (ret);
  case_2: /* CIL Label */ 
#line 135
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %w1,%2\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (ret): "ir" (*((u16 *)src)),
                       "m" (*((struct __large_struct *)dst)), "i" (2), "0" (ret));
#line 137
  return (ret);
  case_4: /* CIL Label */ 
#line 138
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %k1,%2\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (ret): "ir" (*((u32 *)src)),
                       "m" (*((struct __large_struct *)dst)), "i" (4), "0" (ret));
#line 140
  return (ret);
  case_8: /* CIL Label */ 
#line 141
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %1,%2\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (ret): "er" (*((u64 *)src)),
                       "m" (*((struct __large_struct *)dst)), "i" (8), "0" (ret));
#line 143
  return (ret);
  case_10: /* CIL Label */ 
  {
#line 145
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %1,%2\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (ret): "er" (*((u64 *)src)),
                       "m" (*((struct __large_struct *)dst)), "i" (10), "0" (ret));
#line 147
  tmp___0 = __builtin_expect(ret != 0, 0L);
  }
#line 147
  if (tmp___0 != 0L) {
#line 148
    return (ret);
  } else {

  }
#line 149
  __asm__  volatile   ("": : : "memory");
#line 150
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %w1,%2\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (ret): "ir" (*((u16 *)src + 4UL)),
                       "m" (*((struct __large_struct *)((u16 *)dst + 4UL))), "i" (2),
                       "0" (ret));
#line 152
  return (ret);
  case_16: /* CIL Label */ 
  {
#line 154
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %1,%2\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (ret): "er" (*((u64 *)src)),
                       "m" (*((struct __large_struct *)dst)), "i" (16), "0" (ret));
#line 156
  tmp___1 = __builtin_expect(ret != 0, 0L);
  }
#line 156
  if (tmp___1 != 0L) {
#line 157
    return (ret);
  } else {

  }
#line 158
  __asm__  volatile   ("": : : "memory");
#line 159
  __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %1,%2\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (ret): "er" (*((u64 *)src + 1UL)),
                       "m" (*((struct __large_struct *)((u64 *)dst + 1UL))), "i" (8),
                       "0" (ret));
#line 161
  return (ret);
  switch_default: /* CIL Label */ 
  {
#line 163
  tmp___2 = copy_user_generic(dst, src, size);
  }
#line 163
  return ((int )tmp___2);
  switch_break: /* CIL Label */ ;
  }
}
}
#line 18 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/ctype.h"
extern unsigned char const   _ctype[] ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/debug.h"
unsigned int rpc_debug  ;
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/debug.h"
unsigned int nfs_debug  ;
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/debug.h"
unsigned int nfsd_debug  ;
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/include/linux/sunrpc/debug.h"
unsigned int nlm_debug  ;
#line 42 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sysctl.c"
static struct ctl_table_header *sunrpc_table_header___0  ;
#line 43
static ctl_table sunrpc_table___0[2U] ;
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sysctl.c"
void rpc_register_sysctl(void) 
{ 


  {
#line 48
  if ((unsigned long )sunrpc_table_header___0 == (unsigned long )((struct ctl_table_header *)0)) {
    {
#line 49
    sunrpc_table_header___0 = register_sysctl_table((struct ctl_table *)(& sunrpc_table___0));
    }
  } else {

  }
#line 50
  return;
}
}
#line 53 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sysctl.c"
void rpc_unregister_sysctl(void) 
{ 


  {
#line 55
  if ((unsigned long )sunrpc_table_header___0 != (unsigned long )((struct ctl_table_header *)0)) {
    {
#line 56
    unregister_sysctl_table(sunrpc_table_header___0);
#line 57
    sunrpc_table_header___0 = (struct ctl_table_header *)0;
    }
  } else {

  }
#line 59
  return;
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sysctl.c"
static int proc_do_xprt(ctl_table *table , int write , void *buffer , size_t *lenp ,
                        loff_t *ppos ) 
{ 
  char tmpbuf[256U] ;
  size_t len ;
  int tmp ;
  ssize_t tmp___0 ;

  {
#line 67
  if ((*ppos != 0LL && write == 0) || *lenp == 0UL) {
#line 68
    *lenp = 0UL;
#line 69
    return (0);
  } else {

  }
  {
#line 71
  tmp = svc_print_xprts((char *)(& tmpbuf), 256);
#line 71
  len = (size_t )tmp;
#line 72
  tmp___0 = simple_read_from_buffer(buffer, *lenp, ppos, (void const   *)(& tmpbuf),
                                    len);
  }
#line 72
  return ((int )tmp___0);
}
}
#line 76 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sysctl.c"
static int proc_dodebug(ctl_table *table , int write , void *buffer , size_t *lenp ,
                        loff_t *ppos ) 
{ 
  char tmpbuf[20U] ;
  char c ;
  char *s ;
  char *p ;
  unsigned int value ;
  size_t left ;
  size_t len ;
  unsigned long flag ;
  unsigned long roksum ;
  struct thread_info *tmp ;
  long tmp___0 ;
  int __gu_err ;
  unsigned long __gu_val ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  unsigned long flag___0 ;
  unsigned long roksum___0 ;
  struct thread_info *tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int __ret_pu ;
  char __pu_val ;

  {
#line 84
  if ((*ppos != 0LL && write == 0) || *lenp == 0UL) {
#line 85
    *lenp = 0UL;
#line 86
    return (0);
  } else {

  }
#line 89
  left = *lenp;
#line 91
  if (write != 0) {
    {
#line 92
    tmp = current_thread_info();
#line 92
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag), "=r" (roksum): "1" (buffer),
              "g" ((long )left), "rm" (tmp->addr_limit.seg));
#line 92
    tmp___0 = __builtin_expect(flag == 0UL, 1L);
    }
#line 92
    if (tmp___0 == 0L) {
#line 93
      return (-14);
    } else {

    }
#line 94
    p = (char *)buffer;
#line 95
    goto ldv_40506;
    ldv_40505: 
#line 96
    left = left - 1UL;
#line 96
    p = p + 1;
    ldv_40506: ;
#line 95
    if (left != 0UL) {
#line 95
      __gu_err = 0;
      {
#line 95
      if (1UL == 1UL) {
#line 95
        goto case_1;
      } else {

      }
#line 95
      if (1UL == 2UL) {
#line 95
        goto case_2;
      } else {

      }
#line 95
      if (1UL == 4UL) {
#line 95
        goto case_4;
      } else {

      }
#line 95
      if (1UL == 8UL) {
#line 95
        goto case_8;
      } else {

      }
#line 95
      goto switch_default;
      case_1: /* CIL Label */ 
#line 95
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovb %2,%b1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorb %b1,%b1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                           "=q" (__gu_val): "m" (*((struct __large_struct *)p)), "i" (-14),
                           "0" (__gu_err));
#line 95
      goto ldv_40499;
      case_2: /* CIL Label */ 
#line 95
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovw %2,%w1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorw %w1,%w1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                           "=r" (__gu_val): "m" (*((struct __large_struct *)p)), "i" (-14),
                           "0" (__gu_err));
#line 95
      goto ldv_40499;
      case_4: /* CIL Label */ 
#line 95
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovl %2,%k1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorl %k1,%k1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                           "=r" (__gu_val): "m" (*((struct __large_struct *)p)), "i" (-14),
                           "0" (__gu_err));
#line 95
      goto ldv_40499;
      case_8: /* CIL Label */ 
#line 95
      __asm__  volatile   ("661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xcb\n6641:\n\t.popsection\n1:\tmovq %2,%1\n2: 661:\n\t.byte 0x66,0x66,0x90\n\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (9*32+20)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0x0f,0x01,0xca\n6641:\n\t.popsection\n.section .fixup,\"ax\"\n3:\tmov %3,%0\n\txorq %1,%1\n\tjmp 2b\n.previous\n .pushsection \"__ex_table\",\"a\"\n .balign 8\n .long (1b) - .\n .long (3b) - .\n .popsection\n": "=r" (__gu_err),
                           "=r" (__gu_val): "m" (*((struct __large_struct *)p)), "i" (-14),
                           "0" (__gu_err));
#line 95
      goto ldv_40499;
      switch_default: /* CIL Label */ 
      {
#line 95
      tmp___1 = __get_user_bad();
#line 95
      __gu_val = (unsigned long )tmp___1;
      }
      switch_break: /* CIL Label */ ;
      }
      ldv_40499: 
#line 95
      c = (char )__gu_val;
#line 95
      if (__gu_err >= 0) {
#line 95
        if (((int )_ctype[(int )((unsigned char )c)] & 32) != 0) {
#line 97
          goto ldv_40505;
        } else {
#line 100
          goto ldv_40507;
        }
      } else {
#line 100
        goto ldv_40507;
      }
    } else {

    }
    ldv_40507: ;
#line 97
    if (left == 0UL) {
#line 98
      goto done;
    } else {

    }
#line 100
    if (left > 19UL) {
#line 101
      return (-22);
    } else {

    }
    {
#line 102
    tmp___2 = copy_from_user((void *)(& tmpbuf), (void const   *)p, left);
    }
#line 102
    if (tmp___2 != 0UL) {
#line 103
      return (-14);
    } else {

    }
#line 104
    tmpbuf[left] = 0;
#line 106
    s = (char *)(& tmpbuf);
#line 106
    value = 0U;
#line 106
    goto ldv_40510;
    ldv_40509: 
#line 107
    value = (value * 10U + (unsigned int )*s) + 4294967248U;
#line 106
    s = s + 1;
#line 106
    left = left - 1UL;
    ldv_40510: ;
#line 106
    if ((unsigned int )((unsigned char )*s) - 48U <= 9U) {
#line 108
      goto ldv_40509;
    } else {

    }

#line 108
    if ((int )((signed char )*s) != 0 && ((int )_ctype[(int )((unsigned char )*s)] & 32) == 0) {
#line 109
      return (-22);
    } else {

    }
#line 110
    goto ldv_40513;
    ldv_40512: 
#line 111
    left = left - 1UL;
#line 111
    s = s + 1;
    ldv_40513: ;
#line 110
    if (left != 0UL && ((int )_ctype[(int )((unsigned char )*s)] & 32) != 0) {
#line 112
      goto ldv_40512;
    } else {

    }
    {
#line 112
    *((unsigned int *)table->data) = value;
#line 114
    tmp___3 = strcmp(table->procname, "rpc_debug");
    }
#line 114
    if (tmp___3 == 0) {
      {
#line 115
      rpc_show_tasks(& init_net);
      }
    } else {

    }
  } else {
    {
#line 117
    tmp___4 = current_thread_info();
#line 117
    __asm__  ("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0": "=&r" (flag___0), "=r" (roksum___0): "1" (buffer),
              "g" ((long )left), "rm" (tmp___4->addr_limit.seg));
#line 117
    tmp___5 = __builtin_expect(flag___0 == 0UL, 1L);
    }
#line 117
    if (tmp___5 == 0L) {
#line 118
      return (-14);
    } else {

    }
    {
#line 119
    tmp___6 = sprintf((char *)(& tmpbuf), "%d", *((unsigned int *)table->data));
#line 119
    len = (size_t )tmp___6;
    }
#line 120
    if (len > left) {
#line 121
      len = left;
    } else {

    }
    {
#line 122
    tmp___7 = __copy_to_user(buffer, (void const   *)(& tmpbuf), (unsigned int )len);
    }
#line 122
    if (tmp___7 != 0) {
#line 123
      return (-14);
    } else {

    }
#line 124
    left = left - len;
#line 124
    if (left != 0UL) {
      {
#line 125
      might_fault();
#line 125
      __pu_val = 10;
      }
      {
#line 125
      if (1UL == 1UL) {
#line 125
        goto case_1___0;
      } else {

      }
#line 125
      if (1UL == 2UL) {
#line 125
        goto case_2___0;
      } else {

      }
#line 125
      if (1UL == 4UL) {
#line 125
        goto case_4___0;
      } else {

      }
#line 125
      if (1UL == 8UL) {
#line 125
        goto case_8___0;
      } else {

      }
#line 125
      goto switch_default___0;
      case_1___0: /* CIL Label */ 
#line 125
      __asm__  volatile   ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((char *)buffer + len): "ebx");
#line 125
      goto ldv_40521;
      case_2___0: /* CIL Label */ 
#line 125
      __asm__  volatile   ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((char *)buffer + len): "ebx");
#line 125
      goto ldv_40521;
      case_4___0: /* CIL Label */ 
#line 125
      __asm__  volatile   ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((char *)buffer + len): "ebx");
#line 125
      goto ldv_40521;
      case_8___0: /* CIL Label */ 
#line 125
      __asm__  volatile   ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((char *)buffer + len): "ebx");
#line 125
      goto ldv_40521;
      switch_default___0: /* CIL Label */ 
#line 125
      __asm__  volatile   ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((char *)buffer + len): "ebx");
#line 125
      goto ldv_40521;
      switch_break___0: /* CIL Label */ ;
      }
      ldv_40521: ;
#line 125
      if (__ret_pu != 0) {
#line 126
        return (-14);
      } else {

      }
#line 127
      left = left - 1UL;
    } else {

    }
  }
  done: 
#line 132
  *lenp = *lenp - left;
#line 133
  *ppos = (loff_t )((unsigned long long )*ppos + (unsigned long long )*lenp);
#line 134
  return (0);
}
}
#line 138 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sysctl.c"
static ctl_table debug_table[6U]  = {      {"rpc_debug", (void *)(& rpc_debug), 4, 420U, 0, & proc_dodebug, 0, 0, 0}, 
        {"nfs_debug", (void *)(& nfs_debug), 4, 420U, 0, & proc_dodebug, 0, 0, 0}, 
        {"nfsd_debug", (void *)(& nfsd_debug), 4, 420U, 0, & proc_dodebug, 0, 0, 0}, 
        {"nlm_debug", (void *)(& nlm_debug), 4, 420U, 0, & proc_dodebug, 0, 0, 0}, 
        {"transports", 0, 256, 292U, 0, & proc_do_xprt, 0, 0, 0}};
#line 176 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/lkbce/net/sunrpc/sysctl.c"
static ctl_table sunrpc_table___0[2U]  = {      {"sunrpc", 0, 0, 365U, (struct ctl_table *)(& debug_table), 0, 0, 0, 0}};
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device  const  *dev ) ;
#line 24
int ldv_dev_set_drvdata(struct device *dev , void *data ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_xzalloc(size_t size ) ;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 29
  if ((unsigned long )dev != (unsigned long )((struct device  const  *)0) && (unsigned long )dev->p != (unsigned long )((struct device_private */* const  */)0)) {
#line 30
    return ((dev->p)->driver_data);
  } else {

  }
#line 32
  return ((void *)0);
}
}
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev , void *data ) 
{ 
  void *tmp ;

  {
  {
#line 43
  tmp = ldv_xzalloc(8UL);
#line 43
  dev->p = (struct device_private *)tmp;
#line 44
  (dev->p)->driver_data = data;
  }
#line 46
  return (0);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_zalloc(size_t size ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host , unsigned int size ) 
{ 
  struct spi_master *master ;
  void *tmp ;

  {
  {
#line 27
  tmp = ldv_zalloc((unsigned long )size + 1816UL);
#line 27
  master = (struct spi_master *)tmp;
  }
#line 29
  if ((unsigned long )master == (unsigned long )((struct spi_master *)0)) {
#line 30
    return ((struct spi_master *)0);
  } else {

  }
  {
#line 32
  ldv_dev_set_drvdata(& master->dev, (void *)(master + 1UL));
  }
#line 34
  return (master);
}
}
#line 20 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/err.c"
long ldv_is_err(void const   *ptr ) 
{ 


  {
#line 22
  return ((unsigned long )ptr > 4294967295UL);
}
}
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/err.c"
void *ldv_err_ptr(long error ) 
{ 


  {
#line 27
  return ((void *)(4294967295L - error));
}
}
#line 30 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/err.c"
long ldv_ptr_err(void const   *ptr ) 
{ 


  {
#line 32
  return ((long )(4294967295UL - (unsigned long )ptr));
}
}
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/err.c"
long ldv_is_err_or_null(void const   *ptr ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 37
  if ((unsigned long )ptr == (unsigned long )((void const   *)0)) {
#line 37
    tmp___0 = 1;
  } else {
    {
#line 37
    tmp = ldv_is_err(ptr);
    }
#line 37
    if (tmp != 0L) {
#line 37
      tmp___0 = 1;
    } else {
#line 37
      tmp___0 = 0;
    }
  }
#line 37
  return ((long )tmp___0);
}
}
#line 1 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/rsg/models/module.bk.c"
void ldv_assert_linux_kernel_module__less_initial_decrement(int expr ) ;
#line 2
void ldv_assert_linux_kernel_module__more_initial_at_exit(int expr ) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/kernel/module.c"
int ldv_module_refcounter  =    1;
#line 27 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/kernel/module.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 30
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 32
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 33
  return;
}
}
#line 37 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/kernel/module.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int tmp ;

  {
#line 40
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
    {
#line 42
    tmp = ldv_undef_int();
    }
#line 42
    if (tmp == 1) {
#line 44
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 46
      return (1);
    } else {
#line 50
      return (0);
    }
  } else {

  }
#line 51
  return (0);
}
}
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/kernel/module.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 59
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
    {
#line 61
    ldv_assert_linux_kernel_module__less_initial_decrement(ldv_module_refcounter > 1);
#line 63
    ldv_module_refcounter = ldv_module_refcounter - 1;
    }
  } else {

  }
#line 65
  return;
}
}
#line 68 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/kernel/module.c"
void ldv_module_put_and_exit(void) 
{ 


  {
  {
#line 71
  ldv_module_put((struct module *)1);
  }
  LDV_STOP: ;
#line 74
  goto LDV_STOP;
}
}
#line 78 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/kernel/module.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 81
  return ((unsigned int )(ldv_module_refcounter + -1));
}
}
#line 85 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/kernel/module.c"
void ldv_check_final_state(void) 
{ 


  {
  {
#line 88
  ldv_assert_linux_kernel_module__more_initial_at_exit(ldv_module_refcounter == 1);
  }
#line 89
  return;
}
}
#line 50 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.h"
bool ldv_in_interrupt_context(void) ;
#line 133
int ldv_post_probe(int probe_ret_val ) ;
#line 25 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.c"
static bool __ldv_in_interrupt_context  =    0;
#line 28 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void) 
{ 


  {
#line 30
  __ldv_in_interrupt_context = 1;
#line 31
  return;
}
}
#line 34 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.c"
void ldv_switch_to_process_context(void) 
{ 


  {
#line 36
  __ldv_in_interrupt_context = 0;
#line 37
  return;
}
}
#line 39 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.c"
bool ldv_in_interrupt_context(void) 
{ 


  {
#line 41
  return (__ldv_in_interrupt_context);
}
}
#line 44 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.c"
static int ldv_filter_positive_int(int val ) 
{ 


  {
  {
#line 46
  __VERIFIER_assume(val <= 0);
  }
#line 47
  return (val);
}
}
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_post_init(int init_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 56
  tmp = ldv_filter_positive_int(init_ret_val);
  }
#line 56
  return (tmp);
}
}
#line 60 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 62
  tmp = ldv_filter_positive_int(probe_ret_val);
  }
#line 62
  return (tmp);
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val ) 
{ 
  int tmp ;

  {
  {
#line 68
  tmp = ldv_filter_positive_int(ret_val);
  }
#line 68
  return (tmp);
}
}
#line 26 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n , size_t size , gfp_t flags ) ;
#line 28
extern void ldv_check_alloc_flags(gfp_t  ) ;
#line 29
extern void ldv_after_alloc(void * ) ;
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.h"
void *ldv_malloc(size_t size ) ;
#line 24
void *ldv_calloc(size_t nmemb , size_t size ) ;
#line 21 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kmalloc(size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 25
  ldv_check_alloc_flags(flags);
#line 26
  res = ldv_malloc(size);
#line 27
  ldv_after_alloc(res);
  }
#line 29
  return (res);
}
}
#line 32 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 36
  ldv_check_alloc_flags(flags);
#line 37
  res = ldv_calloc(n, size);
#line 38
  ldv_after_alloc(res);
  }
#line 40
  return (res);
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kzalloc(size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 47
  ldv_check_alloc_flags(flags);
#line 48
  res = ldv_zalloc(size);
#line 49
  ldv_after_alloc(res);
  }
#line 51
  return (res);
}
}
#line 54 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n , size_t size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 58
  ldv_check_alloc_flags(flags);
#line 59
  res = ldv_malloc(n * size);
#line 60
  ldv_after_alloc(res);
  }
#line 62
  return (res);
}
}
#line 22 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/common.h"
extern void __VERIFIER_error(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/gcc.c"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 26
  return (exp);
}
}
#line 35 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/gcc.c"
void __builtin_trap(void) 
{ 


  {
  {
#line 37
  __VERIFIER_error();
  }
#line 38
  return;
}
}
#line 31 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.h"
extern void *external_allocated_data(void) ;
#line 33
void *ldv_malloc_unknown_size(void) ;
#line 34
void *ldv_calloc_unknown_size(void) ;
#line 35
void *ldv_zalloc_unknown_size(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
extern void *malloc(size_t  ) ;
#line 25
extern void *calloc(size_t  , size_t  ) ;
#line 26
extern void free(void * ) ;
#line 29 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_malloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 31
  tmp___1 = ldv_undef_int();
  }
#line 31
  if (tmp___1 != 0) {
    {
#line 32
    tmp = malloc(size);
#line 32
    res = tmp;
#line 34
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 35
    tmp___0 = ldv_is_err((void const   *)res);
#line 35
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 37
    return (res);
  } else {
#line 40
    return ((void *)0);
  }
}
}
#line 43 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_calloc(size_t nmemb , size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 45
  tmp___1 = ldv_undef_int();
  }
#line 45
  if (tmp___1 != 0) {
    {
#line 46
    tmp = calloc(nmemb, size);
#line 46
    res = tmp;
#line 48
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 49
    tmp___0 = ldv_is_err((void const   *)res);
#line 49
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 51
    return (res);
  } else {
#line 54
    return ((void *)0);
  }
}
}
#line 57 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_zalloc(size_t size ) 
{ 
  void *tmp ;

  {
  {
#line 59
  tmp = ldv_calloc(1UL, size);
  }
#line 59
  return (tmp);
}
}
#line 62 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void ldv_free(void *s ) 
{ 


  {
  {
#line 64
  free(s);
  }
#line 65
  return;
}
}
#line 67 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xmalloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 69
  tmp = malloc(size);
#line 69
  res = tmp;
#line 71
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 72
  tmp___0 = ldv_is_err((void const   *)res);
#line 72
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 74
  return (res);
}
}
#line 77 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xzalloc(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 79
  tmp = calloc(1UL, size);
#line 79
  res = tmp;
#line 81
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 82
  tmp___0 = ldv_is_err((void const   *)res);
#line 82
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 84
  return (res);
}
}
#line 87 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_malloc_unknown_size(void) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 89
  tmp___1 = ldv_undef_int();
  }
#line 89
  if (tmp___1 != 0) {
    {
#line 90
    tmp = external_allocated_data();
#line 90
    res = tmp;
#line 92
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 93
    tmp___0 = ldv_is_err((void const   *)res);
#line 93
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 95
    return (res);
  } else {
#line 98
    return ((void *)0);
  }
}
}
#line 101 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_calloc_unknown_size(void) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 103
  tmp___1 = ldv_undef_int();
  }
#line 103
  if (tmp___1 != 0) {
    {
#line 104
    tmp = external_allocated_data();
#line 104
    res = tmp;
#line 106
    memset(res, 0, 8UL);
#line 107
    __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 108
    tmp___0 = ldv_is_err((void const   *)res);
#line 108
    __VERIFIER_assume(tmp___0 == 0L);
    }
#line 110
    return (res);
  } else {
#line 113
    return ((void *)0);
  }
}
}
#line 116 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_zalloc_unknown_size(void) 
{ 
  void *tmp ;

  {
  {
#line 118
  tmp = ldv_calloc_unknown_size();
  }
#line 118
  return (tmp);
}
}
#line 121 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 123
  tmp = external_allocated_data();
#line 123
  res = tmp;
#line 125
  __VERIFIER_assume((unsigned long )res != (unsigned long )((void *)0));
#line 126
  tmp___0 = ldv_is_err((void const   *)res);
#line 126
  __VERIFIER_assume(tmp___0 == 0L);
  }
#line 128
  return (res);
}
}
#line 23 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.h"
int ldv_undef_long(void) ;
#line 24
unsigned int ldv_undef_uint(void) ;
#line 25
unsigned long ldv_undef_ulong(void) ;
#line 26
unsigned long long ldv_undef_ulonglong(void) ;
#line 27
void *ldv_undef_ptr(void) ;
#line 30
int ldv_undef_int_positive(void) ;
#line 33
int ldv_undef_int_negative(void) ;
#line 36
int ldv_undef_int_nonpositive(void) ;
#line 39
void *ldv_undef_ptr_non_null(void) ;
#line 24 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
extern int __VERIFIER_nondet_int(void) ;
#line 26
extern long __VERIFIER_nondet_long(void) ;
#line 33
extern unsigned int __VERIFIER_nondet_uint(void) ;
#line 36
extern unsigned long __VERIFIER_nondet_ulong(void) ;
#line 37
extern unsigned long long __VERIFIER_nondet_ulonglong(void) ;
#line 38
extern void *__VERIFIER_nondet_pointer(void) ;
#line 41 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int(void) 
{ 
  int tmp ;

  {
  {
#line 43
  tmp = __VERIFIER_nondet_int();
  }
#line 43
  return (tmp);
}
}
#line 46 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_long(void) 
{ 
  long tmp ;

  {
  {
#line 48
  tmp = __VERIFIER_nondet_long();
  }
#line 48
  return ((int )tmp);
}
}
#line 51 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned int ldv_undef_uint(void) 
{ 
  unsigned int tmp ;

  {
  {
#line 53
  tmp = __VERIFIER_nondet_uint();
  }
#line 53
  return (tmp);
}
}
#line 56 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
void *ldv_undef_ptr(void) 
{ 
  void *tmp ;

  {
  {
#line 58
  tmp = __VERIFIER_nondet_pointer();
  }
#line 58
  return (tmp);
}
}
#line 61 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned long ldv_undef_ulong(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 63
  tmp = __VERIFIER_nondet_ulong();
  }
#line 63
  return (tmp);
}
}
#line 66 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void) 
{ 
  unsigned long long tmp ;

  {
  {
#line 68
  tmp = __VERIFIER_nondet_ulonglong();
  }
#line 68
  return (tmp);
}
}
#line 71 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_positive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 73
  tmp = ldv_undef_int();
#line 73
  ret = tmp;
#line 75
  __VERIFIER_assume(ret > 0);
  }
#line 77
  return (ret);
}
}
#line 80 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_negative(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 82
  tmp = ldv_undef_int();
#line 82
  ret = tmp;
#line 84
  __VERIFIER_assume(ret < 0);
  }
#line 86
  return (ret);
}
}
#line 89 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
int ldv_undef_int_nonpositive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 91
  tmp = ldv_undef_int();
#line 91
  ret = tmp;
#line 93
  __VERIFIER_assume(ret <= 0);
  }
#line 95
  return (ret);
}
}
#line 98 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/job/root/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void) 
{ 
  void *ret ;
  int tmp ;

  {
  {
#line 100
  tmp = ldv_undef_int();
#line 100
  ret = (void *)((long )tmp);
#line 102
  __VERIFIER_assume((unsigned long )ret != (unsigned long )((void *)0));
  }
#line 104
  return (ret);
}
}
#line 3 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_module__less_initial_decrement(int expr ) 
{ 


  {
#line 4
  if (! expr) {
    {
#line 5
    __VERIFIER_error();
    }
  } else {

  }
#line 6
  return;
}
}
#line 7 "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/0e1bde0fd9f35a6cc77d73de70635c06/klever-core-work-dir/15/vtg/net/sunrpc/sunrpc.ko/linux:kernel:module/fvtp/bug kind funcs.c"
void ldv_assert_linux_kernel_module__more_initial_at_exit(int expr ) 
{ 


  {
#line 8
  if (! expr) {
    {
#line 9
    __VERIFIER_error();
    }
  } else {

  }
#line 10
  return;
}
}
